begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|CaseChanger
import|;
end_import

begin_class
DECL|class|CaseChangerTest
specifier|public
class|class
name|CaseChangerTest
extends|extends
name|TestCase
block|{
DECL|method|testNumberOfModes ()
specifier|public
name|void
name|testNumberOfModes
parameter_list|()
block|{
comment|// If this fails we know there are new modes
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|CaseChanger
operator|.
name|getNumModes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|CaseChanger
operator|.
name|getModeNames
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
index|[]
name|modeNames
init|=
name|CaseChanger
operator|.
name|getModeNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CaseChanger
operator|.
name|getNumModes
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|CaseChanger
operator|.
name|getModeName
argument_list|(
name|i
argument_list|)
argument_list|,
name|modeNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"lower"
argument_list|,
name|CaseChanger
operator|.
name|getModeName
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UPPER"
argument_list|,
name|CaseChanger
operator|.
name|getModeName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper first"
argument_list|,
name|CaseChanger
operator|.
name|getModeName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper Each First"
argument_list|,
name|CaseChanger
operator|.
name|getModeName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testChangeCaseStringArrayInt ()
specifier|public
name|void
name|testChangeCaseStringArrayInt
parameter_list|()
block|{
name|String
index|[]
name|s
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CaseChanger
operator|.
name|changeCase
argument_list|(
name|s
argument_list|,
literal|0
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|String
index|[]
block|{
literal|"UPPER"
block|,
literal|"UPdownUPdown"
block|,
literal|"Mary has a little Lamb"
block|}
expr_stmt|;
name|s
operator|=
name|CaseChanger
operator|.
name|changeCase
argument_list|(
name|s
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"upper"
argument_list|,
name|s
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"updownupdown"
argument_list|,
name|s
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mary has a little lamb"
argument_list|,
name|s
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testChangeCaseStringInt ()
specifier|public
name|void
name|testChangeCaseStringInt
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|CaseChanger
operator|.
name|changeCase
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|CaseChanger
operator|.
name|changeCase
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|CaseChanger
operator|.
name|changeCase
argument_list|(
literal|""
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|CaseChanger
operator|.
name|changeCase
argument_list|(
literal|""
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lower"
argument_list|,
name|CaseChanger
operator|.
name|changeCase
argument_list|(
literal|"LOWER"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOWER"
argument_list|,
name|CaseChanger
operator|.
name|changeCase
argument_list|(
literal|"LOWER"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UPPER"
argument_list|,
name|CaseChanger
operator|.
name|changeCase
argument_list|(
literal|"upper"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UPPER"
argument_list|,
name|CaseChanger
operator|.
name|changeCase
argument_list|(
literal|"UPPER"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper first"
argument_list|,
name|CaseChanger
operator|.
name|changeCase
argument_list|(
literal|"upper First"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper Each First"
argument_list|,
name|CaseChanger
operator|.
name|changeCase
argument_list|(
literal|"upper each First"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPreserveBrackets ()
specifier|public
name|void
name|testPreserveBrackets
parameter_list|()
block|{ 		 		 	}
block|}
end_class

end_unit

