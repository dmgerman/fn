begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.testutils
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|testutils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRef
import|;
end_import

begin_comment
comment|/**  * UtilsClass for UnitTests.  *   * @author kahlert, cordes  *   */
end_comment

begin_class
DECL|class|TestUtils
specifier|public
class|class
name|TestUtils
block|{
DECL|field|PATH_TO_TEST_BIBTEX
specifier|public
specifier|static
specifier|final
name|String
name|PATH_TO_TEST_BIBTEX
init|=
literal|"src/resources/tests/net/sf/jabref/bibtexFiles/test.bib"
decl_stmt|;
comment|/** 	 * Returns a full configured and initialized instance of JabRef. As long as 	 * {@link TestUtils#closeJabRef()} wasn't called this method returns the 	 * same instance. 	 *  	 * @see TestUtils#closeJabRef() 	 */
DECL|method|getInitializedJabRef ()
specifier|public
specifier|static
name|JabRef
name|getInitializedJabRef
parameter_list|()
block|{
name|disableSystemExit
argument_list|()
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-p"
block|,
literal|" "
block|,
name|PATH_TO_TEST_BIBTEX
block|}
decl_stmt|;
name|JabRef
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|ignored
parameter_list|)
block|{ 		}
finally|finally
block|{
name|enableSystemExit
argument_list|()
expr_stmt|;
block|}
name|JabRef
name|jabref
init|=
name|JabRef
operator|.
name|singleton
decl_stmt|;
return|return
name|jabref
return|;
block|}
comment|/** 	 * Closes the current instance of JabRef. 	 */
DECL|method|closeJabRef ()
specifier|public
specifier|static
name|void
name|closeJabRef
parameter_list|()
block|{
name|JabRef
name|jabref
init|=
name|JabRef
operator|.
name|singleton
decl_stmt|;
if|if
condition|(
name|jabref
operator|!=
literal|null
condition|)
block|{
name|jabref
operator|.
name|jrf
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|ExitException
specifier|private
specifier|static
class|class
name|ExitException
extends|extends
name|SecurityException
block|{ 	}
DECL|method|disableSystemExit ()
specifier|private
specifier|static
name|void
name|disableSystemExit
parameter_list|()
block|{
specifier|final
name|SecurityManager
name|securityManager
init|=
operator|new
name|SecurityManager
argument_list|()
block|{
specifier|public
name|void
name|checkPermission
parameter_list|(
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
name|permission
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"exitVM"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ExitException
argument_list|()
throw|;
block|}
block|}
block|}
decl_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|securityManager
argument_list|)
expr_stmt|;
block|}
DECL|method|enableSystemExit ()
specifier|private
specifier|static
name|void
name|enableSystemExit
parameter_list|()
block|{
name|System
operator|.
name|setSecurityManager
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

