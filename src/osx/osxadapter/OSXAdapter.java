begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*   File:    OSXAdapter.java      Description:A single class with clear, static entry points for hooking existing preferences,         about, quit functionality from an existing Java app into handlers for the Mac OS X         application menu.  Useful for developers looking to support          multiple platforms with a single codebase, and support Mac OS X features with          minimal impact.          This sample is designed for Java 1.4.1 and later on Mac OS X.            Author:    mdrance    Copyright:   Â© Copyright 2003 Apple Computer, Inc. All rights reserved.      Disclaimer:  IMPORTANT:  This Apple software is supplied to you by Apple Computer, Inc.         ("Apple") in consideration of your agreement to the following terms, and your         use, installation, modification or redistribution of this Apple software         constitutes acceptance of these terms.  If you do not agree with these terms,         please do not use, install, modify or redistribute this Apple software.          In consideration of your agreement to abide by the following terms, and subject         to these terms, Apple grants you a personal, non-exclusive license, under Apple's         copyrights in this original Apple software (the "Apple Software"), to use,         reproduce, modify and redistribute the Apple Software, with or without         modifications, in source and/or binary forms; provided that if you redistribute         the Apple Software in its entirety and without modifications, you must retain         this notice and the following text and disclaimers in all such redistributions of         the Apple Software.  Neither the name, trademarks, service marks or logos of         Apple Computer, Inc. may be used to endorse or promote products derived from the         Apple Software without specific prior written permission from Apple.  Except as         expressly stated in this notice, no other rights or licenses, express or implied,         are granted by Apple herein, including but not limited to any patent rights that         may be infringed by your derivative works or by other works in which the Apple         Software may be incorporated.          The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO         WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED         WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR         PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN         COMBINATION WITH YOUR PRODUCTS.          IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR         CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE         GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)         ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION         OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT         (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN         ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.            Change History (most recent first):     04092003  mdrance    added comments  */
end_comment

begin_package
DECL|package|osxadapter
package|package
name|osxadapter
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|com
operator|.
name|apple
operator|.
name|eawt
operator|.
name|*
import|;
end_import

begin_class
DECL|class|OSXAdapter
specifier|public
class|class
name|OSXAdapter
extends|extends
name|ApplicationAdapter
block|{
comment|// pseudo-singleton model; no point in making multiple instances
comment|// of the EAWT application or our adapter
DECL|field|theAdapter
specifier|private
specifier|static
name|OSXAdapter
name|theAdapter
decl_stmt|;
DECL|field|theApplication
specifier|private
specifier|static
name|com
operator|.
name|apple
operator|.
name|eawt
operator|.
name|Application
name|theApplication
decl_stmt|;
comment|// reference to the app where the existing quit, about, prefs code is
DECL|field|mainApp
specifier|private
name|JabRefFrame
name|mainApp
decl_stmt|;
DECL|method|OSXAdapter (JabRefFrame inApp)
specifier|private
name|OSXAdapter
parameter_list|(
name|JabRefFrame
name|inApp
parameter_list|)
block|{
name|mainApp
operator|=
name|inApp
expr_stmt|;
block|}
comment|// implemented handler methods.  These are basically hooks into existing
comment|// functionality from the main app, as if it came over from another platform.
DECL|method|handleAbout (ApplicationEvent ae)
specifier|public
name|void
name|handleAbout
parameter_list|(
name|ApplicationEvent
name|ae
parameter_list|)
block|{
if|if
condition|(
name|mainApp
operator|!=
literal|null
condition|)
block|{
name|ae
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mainApp
operator|.
name|about
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"handleAbout: MyApp instance detached from listener"
argument_list|)
throw|;
block|}
block|}
DECL|method|handlePreferences (ApplicationEvent ae)
specifier|public
name|void
name|handlePreferences
parameter_list|(
name|ApplicationEvent
name|ae
parameter_list|)
block|{
if|if
condition|(
name|mainApp
operator|!=
literal|null
condition|)
block|{
name|mainApp
operator|.
name|preferences
argument_list|()
expr_stmt|;
name|ae
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"handlePreferences: MyApp instance detached from listener"
argument_list|)
throw|;
block|}
block|}
DECL|method|handleQuit (ApplicationEvent ae)
specifier|public
name|void
name|handleQuit
parameter_list|(
name|ApplicationEvent
name|ae
parameter_list|)
block|{
if|if
condition|(
name|mainApp
operator|!=
literal|null
condition|)
block|{
comment|/*         /  You MUST setHandled(false) if you want to delay or cancel the quit.       /  This is important for cross-platform development -- have a universal quit       /  routine that chooses whether or not to quit, so the functionality is identical       /  on all platforms.  This example simply cancels the AppleEvent-based quit and       /  defers to that universal method.       */
name|ae
operator|.
name|setHandled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mainApp
operator|.
name|quit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"handleQuit: MyApp instance detached from listener"
argument_list|)
throw|;
block|}
block|}
comment|// The main entry-point for this functionality.  This is the only method
comment|// that needs to be called at runtime, and it can easily be done using
comment|// reflection (see MyApp.java)
DECL|method|registerMacOSXApplication (JabRefFrame inApp)
specifier|public
specifier|static
name|void
name|registerMacOSXApplication
parameter_list|(
name|JabRefFrame
name|inApp
parameter_list|)
block|{
if|if
condition|(
name|theApplication
operator|==
literal|null
condition|)
block|{
name|theApplication
operator|=
operator|new
name|com
operator|.
name|apple
operator|.
name|eawt
operator|.
name|Application
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|theAdapter
operator|==
literal|null
condition|)
block|{
name|theAdapter
operator|=
operator|new
name|OSXAdapter
argument_list|(
name|inApp
argument_list|)
expr_stmt|;
block|}
name|theApplication
operator|.
name|addApplicationListener
argument_list|(
name|theAdapter
argument_list|)
expr_stmt|;
block|}
comment|// Another static entry point for EAWT functionality.  Enables the
comment|// "Preferences..." menu item in the application menu.
DECL|method|enablePrefs (boolean enabled)
specifier|public
specifier|static
name|void
name|enablePrefs
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|theApplication
operator|==
literal|null
condition|)
block|{
name|theApplication
operator|=
operator|new
name|com
operator|.
name|apple
operator|.
name|eawt
operator|.
name|Application
argument_list|()
expr_stmt|;
block|}
name|theApplication
operator|.
name|setEnabledPreferencesMenu
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

