begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|com.incors.plaf.kunststoff
package|package
name|com
operator|.
name|incors
operator|.
name|plaf
operator|.
name|kunststoff
package|;
end_package

begin_comment
comment|/*  * This code was developed by INCORS GmbH (www.incors.com).  * It is published under the terms of the GNU Lesser General Public License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|incors
operator|.
name|plaf
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Collection of methods often used in the Kunststoff Look&Feel  */
end_comment

begin_class
DECL|class|KunststoffUtilities
specifier|public
class|class
name|KunststoffUtilities
block|{
comment|/**    * Convenience method to create a translucent<code>Color</color>.    */
DECL|method|getTranslucentColor (Color color, int alpha)
specifier|public
specifier|static
name|Color
name|getTranslucentColor
parameter_list|(
name|Color
name|color
parameter_list|,
name|int
name|alpha
parameter_list|)
block|{
if|if
condition|(
name|color
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|alpha
operator|==
literal|255
condition|)
block|{
return|return
name|color
return|;
block|}
else|else
block|{
return|return
operator|new
name|Color
argument_list|(
name|color
operator|.
name|getRed
argument_list|()
argument_list|,
name|color
operator|.
name|getGreen
argument_list|()
argument_list|,
name|color
operator|.
name|getBlue
argument_list|()
argument_list|,
name|alpha
argument_list|)
return|;
block|}
block|}
comment|/**    * Convenience method to create a translucent<code>ColorUIResource</code>.    */
DECL|method|getTranslucentColorUIResource (Color color, int alpha)
specifier|public
specifier|static
name|Color
name|getTranslucentColorUIResource
parameter_list|(
name|Color
name|color
parameter_list|,
name|int
name|alpha
parameter_list|)
block|{
if|if
condition|(
name|color
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|alpha
operator|==
literal|255
condition|)
block|{
return|return
name|color
return|;
block|}
else|else
block|{
return|return
operator|new
name|ColorUIResource2
argument_list|(
name|color
operator|.
name|getRed
argument_list|()
argument_list|,
name|color
operator|.
name|getGreen
argument_list|()
argument_list|,
name|color
operator|.
name|getBlue
argument_list|()
argument_list|,
name|alpha
argument_list|)
return|;
block|}
block|}
comment|/**    * Convenience method to draw a gradient on the specified rectangle    */
DECL|method|drawGradient (Graphics g, Color color1, Color color2, Rectangle rect, boolean isVertical)
specifier|public
specifier|static
name|void
name|drawGradient
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|Color
name|color1
parameter_list|,
name|Color
name|color2
parameter_list|,
name|Rectangle
name|rect
parameter_list|,
name|boolean
name|isVertical
parameter_list|)
block|{
name|Graphics2D
name|g2D
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
name|Paint
name|gradient
init|=
operator|new
name|FastGradientPaint
argument_list|(
name|color1
argument_list|,
name|color2
argument_list|,
name|isVertical
argument_list|)
decl_stmt|;
name|g2D
operator|.
name|setPaint
argument_list|(
name|gradient
argument_list|)
expr_stmt|;
name|g2D
operator|.
name|fill
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convenience method to draw a gradient. The first rectangle defines the drawing region,    * the second rectangle defines the size of the gradient.    */
DECL|method|drawGradient (Graphics g, Color color1, Color color2, Rectangle rect, Rectangle rect2, boolean isVertical)
specifier|public
specifier|static
name|void
name|drawGradient
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|Color
name|color1
parameter_list|,
name|Color
name|color2
parameter_list|,
name|Rectangle
name|rect
parameter_list|,
name|Rectangle
name|rect2
parameter_list|,
name|boolean
name|isVertical
parameter_list|)
block|{
comment|// We are currently not using the FastGradientPaint to render this gradient, because we have to decide how
comment|// we can use FastGradientPaint if rect and rect2 are different.
if|if
condition|(
name|isVertical
condition|)
block|{
name|Graphics2D
name|g2D
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
name|GradientPaint
name|gradient
init|=
operator|new
name|GradientPaint
argument_list|(
literal|0f
argument_list|,
operator|(
name|float
operator|)
name|rect
operator|.
name|getY
argument_list|()
argument_list|,
name|color1
argument_list|,
literal|0f
argument_list|,
call|(
name|float
call|)
argument_list|(
name|rect
operator|.
name|getHeight
argument_list|()
operator|+
name|rect
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|,
name|color2
argument_list|)
decl_stmt|;
name|g2D
operator|.
name|setPaint
argument_list|(
name|gradient
argument_list|)
expr_stmt|;
name|g2D
operator|.
name|fill
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Graphics2D
name|g2D
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
name|GradientPaint
name|gradient
init|=
operator|new
name|GradientPaint
argument_list|(
operator|(
name|float
operator|)
name|rect
operator|.
name|getX
argument_list|()
argument_list|,
literal|0f
argument_list|,
name|color1
argument_list|,
call|(
name|float
call|)
argument_list|(
name|rect
operator|.
name|getWidth
argument_list|()
operator|+
name|rect
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|,
literal|0f
argument_list|,
name|color2
argument_list|)
decl_stmt|;
name|g2D
operator|.
name|setPaint
argument_list|(
name|gradient
argument_list|)
expr_stmt|;
name|g2D
operator|.
name|fill
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns true if the display uses 24- or 32-bit color depth (= true color)    */
DECL|method|isToolkitTrueColor (Component c)
specifier|public
specifier|static
name|boolean
name|isToolkitTrueColor
parameter_list|(
name|Component
name|c
parameter_list|)
block|{
name|int
name|pixelsize
init|=
name|c
operator|.
name|getToolkit
argument_list|()
operator|.
name|getColorModel
argument_list|()
operator|.
name|getPixelSize
argument_list|()
decl_stmt|;
return|return
name|pixelsize
operator|>=
literal|24
return|;
block|}
block|}
end_class

end_unit

