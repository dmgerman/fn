begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|com.incors.plaf.kunststoff
package|package
name|com
operator|.
name|incors
operator|.
name|plaf
operator|.
name|kunststoff
package|;
end_package

begin_comment
comment|/*  * This code was developed by INCORS GmbH (www.incors.com).  * It is published under the terms of the GNU Lesser General Public License.  *  * The code was improved with the help of these great people:  *  *  Aljoscha Rittner  *  C.J. Kent  *  Christian Peter  *  Christoph Wilhelms  *  Eric Georges  *  Gerald Bauer  *  Ingo Kegel  *  Jamie LaScolea  *  Jens Niemeyer  *  Jerason Banes  *  Jim Wissner  *  Johannes Ernst  *  Jonas Kilian  *  Julien Ponge  *  Karsten Lentzsch  *  Matthew Philips  *  Romain Guy  *  Sebastian Ferreyra  *  Steve Varghese  *  Taoufik Romdhane  *  Timo Haberkern  *  */
end_comment

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|metal
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|incors
operator|.
name|plaf
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The main class for the Kunststoff Look&Feel.  *  */
end_comment

begin_class
DECL|class|KunststoffLookAndFeel
specifier|public
class|class
name|KunststoffLookAndFeel
extends|extends
name|MetalLookAndFeel
block|{
DECL|field|gradientTheme
specifier|private
specifier|static
name|GradientTheme
name|gradientTheme
decl_stmt|;
DECL|field|isInstalled
specifier|private
specifier|static
name|boolean
name|isInstalled
init|=
literal|false
decl_stmt|;
DECL|field|themeHasBeenSet
specifier|private
specifier|static
name|boolean
name|themeHasBeenSet
init|=
literal|false
decl_stmt|;
comment|// Thanks to Jonas Kilian for
comment|// fixing the themes-bug
DECL|method|KunststoffLookAndFeel ()
specifier|public
name|KunststoffLookAndFeel
parameter_list|()
block|{
comment|// the next line was removed by Jens Niemeyer, jens@jensn.de, because it would
comment|// cause a crash when using Sun Web Start
comment|// super();
comment|// install with the UIManager, if not done yet.
if|if
condition|(
operator|!
name|isInstalled
condition|)
block|{
name|UIManager
operator|.
name|installLookAndFeel
argument_list|(
operator|new
name|UIManager
operator|.
name|LookAndFeelInfo
argument_list|(
literal|"Kunststoff"
argument_list|,
literal|"com.incors.plaf.kunststoff.KunststoffLookAndFeel"
argument_list|)
argument_list|)
expr_stmt|;
name|isInstalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|getID ()
specifier|public
name|String
name|getID
parameter_list|()
block|{
return|return
literal|"Kunststoff"
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Kunststoff"
return|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Look and Feel giving a plastic effect. Developed by INCORS GmbH, 2001"
operator|+
literal|"and contributors. Published under the Lesser GNU Public Licence."
return|;
block|}
DECL|method|isNativeLookAndFeel ()
specifier|public
name|boolean
name|isNativeLookAndFeel
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|isSupportedLookAndFeel ()
specifier|public
name|boolean
name|isSupportedLookAndFeel
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|initClassDefaults (UIDefaults table)
specifier|protected
name|void
name|initClassDefaults
parameter_list|(
name|UIDefaults
name|table
parameter_list|)
block|{
name|super
operator|.
name|initClassDefaults
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"ButtonUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"ToggleButtonUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"ComboBoxUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"TabbedPaneUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"TextFieldUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"PasswordFieldUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"ListUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"TreeUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"ToolBarUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"MenuBarUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"MenuUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"ScrollBarUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"ProgressBarUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"TableHeaderUI"
argument_list|)
expr_stmt|;
name|putDefault
argument_list|(
name|table
argument_list|,
literal|"InternalFrameUI"
argument_list|)
expr_stmt|;
comment|// if you want a check box icon with gradients, just remove the comment from
comment|// the following lines. We prefer the standard icon.
comment|/*     putDefault(table, "CheckBoxUI");     try {       String className = "com.incors.plaf.kunststoff.KunststoffCheckBoxIcon";       table.put("CheckBox.icon", className);     } catch (Exception ex) {       ex.printStackTrace();     }     */
block|}
DECL|method|putDefault (UIDefaults table, String uiKey)
specifier|protected
name|void
name|putDefault
parameter_list|(
name|UIDefaults
name|table
parameter_list|,
name|String
name|uiKey
parameter_list|)
block|{
try|try
block|{
name|String
name|className
init|=
literal|"com.incors.plaf.kunststoff.Kunststoff"
operator|+
name|uiKey
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|uiKey
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createDefaultTheme ()
specifier|protected
name|void
name|createDefaultTheme
parameter_list|()
block|{
if|if
condition|(
operator|!
name|themeHasBeenSet
condition|)
block|{
name|setCurrentTheme
argument_list|(
operator|new
name|KunststoffTheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gradientTheme
operator|==
literal|null
condition|)
block|{
name|gradientTheme
operator|=
operator|new
name|KunststoffGradientTheme
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Sets the theme that defines the colors for gradients.    */
DECL|method|setCurrentGradientTheme (GradientTheme theme)
specifier|public
specifier|static
name|void
name|setCurrentGradientTheme
parameter_list|(
name|GradientTheme
name|theme
parameter_list|)
block|{
if|if
condition|(
name|theme
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Gradient Theme cannot have null value"
argument_list|)
throw|;
block|}
name|gradientTheme
operator|=
name|theme
expr_stmt|;
block|}
comment|/**    * Sets the current color theme. This works exactly as with the MetalLookAndFeel.    * Note that for customizing the gradients the method setCurrentGradientTheme()    * must be used.    */
DECL|method|setCurrentTheme (MetalTheme theme)
specifier|public
specifier|static
name|void
name|setCurrentTheme
parameter_list|(
name|MetalTheme
name|theme
parameter_list|)
block|{
name|MetalLookAndFeel
operator|.
name|setCurrentTheme
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|themeHasBeenSet
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|initSystemColorDefaults (UIDefaults table)
specifier|protected
name|void
name|initSystemColorDefaults
parameter_list|(
name|UIDefaults
name|table
parameter_list|)
block|{
name|super
operator|.
name|initSystemColorDefaults
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// we made the color a bit darker because the were complaints about the color
comment|// being very difficult to see
name|table
operator|.
name|put
argument_list|(
literal|"textHighlight"
argument_list|,
name|KunststoffUtilities
operator|.
name|getTranslucentColorUIResource
argument_list|(
name|getTextHighlightColor
argument_list|()
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initComponentDefaults (UIDefaults table)
specifier|protected
name|void
name|initComponentDefaults
parameter_list|(
name|UIDefaults
name|table
parameter_list|)
block|{
name|super
operator|.
name|initComponentDefaults
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"SplitPane.dividerSize"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
comment|// will result in only one row of bumps
block|}
comment|// ******** getter methods for the gradient colors *********
comment|/**    * Returns the reflection color for a standard component (such as JButton).    */
DECL|method|getComponentGradientColorReflection ()
specifier|public
specifier|static
name|ColorUIResource
name|getComponentGradientColorReflection
parameter_list|()
block|{
return|return
name|gradientTheme
operator|.
name|getComponentGradientColorReflection
argument_list|()
return|;
block|}
comment|/**    * Returns the shadow color for a standard component (such as JButton).    */
DECL|method|getComponentGradientColorShadow ()
specifier|public
specifier|static
name|ColorUIResource
name|getComponentGradientColorShadow
parameter_list|()
block|{
return|return
name|gradientTheme
operator|.
name|getComponentGradientColorShadow
argument_list|()
return|;
block|}
comment|/**    * Returns the reflection color for a text component (such as JTextField).    */
DECL|method|getTextComponentGradientColorReflection ()
specifier|public
specifier|static
name|ColorUIResource
name|getTextComponentGradientColorReflection
parameter_list|()
block|{
return|return
name|gradientTheme
operator|.
name|getTextComponentGradientColorReflection
argument_list|()
return|;
block|}
comment|/**    * Returns the reflection color for a text component (such as JTextField).    */
DECL|method|getTextComponentGradientColorShadow ()
specifier|public
specifier|static
name|ColorUIResource
name|getTextComponentGradientColorShadow
parameter_list|()
block|{
return|return
name|gradientTheme
operator|.
name|getTextComponentGradientColorShadow
argument_list|()
return|;
block|}
comment|/**    * Returns the background shadow color for JList. In future we might also    * use this color for the background of JTree.    */
DECL|method|getBackgroundGradientShadow ()
specifier|public
specifier|static
name|int
name|getBackgroundGradientShadow
parameter_list|()
block|{
return|return
name|gradientTheme
operator|.
name|getBackgroundGradientShadow
argument_list|()
return|;
block|}
block|}
end_class

end_unit

