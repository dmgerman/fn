begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|com.incors.plaf.kunststoff
package|package
name|com
operator|.
name|incors
operator|.
name|plaf
operator|.
name|kunststoff
package|;
end_package

begin_comment
comment|/*  * This code was developed by INCORS GmbH (www.incors.com).  * It is published under the terms of the GNU Lesser General Public License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|basic
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * From version 2.0 the KunststoffListUI works with the DefaultListCellRenderer,  * which makes it really plug and play!  */
end_comment

begin_class
DECL|class|KunststoffListUI
specifier|public
class|class
name|KunststoffListUI
extends|extends
name|BasicListUI
block|{
DECL|field|isToolkitTrueColor
specifier|private
name|boolean
name|isToolkitTrueColor
init|=
literal|false
decl_stmt|;
DECL|field|colBg
specifier|private
name|Color
name|colBg
decl_stmt|;
DECL|method|KunststoffListUI (JComponent list)
specifier|public
name|KunststoffListUI
parameter_list|(
name|JComponent
name|list
parameter_list|)
block|{
comment|// this will be needed for the decision if a big gradient or a small shadow
comment|// should be painted. On 16-bit colors the big gradient looks awkward, therefore
comment|// we will then paint a small shadow instead
name|isToolkitTrueColor
operator|=
name|KunststoffUtilities
operator|.
name|isToolkitTrueColor
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|createUI (JComponent list)
specifier|public
specifier|static
name|ComponentUI
name|createUI
parameter_list|(
name|JComponent
name|list
parameter_list|)
block|{
return|return
operator|new
name|KunststoffListUI
argument_list|(
name|list
argument_list|)
return|;
block|}
DECL|method|update (Graphics g, JComponent c)
specifier|public
name|void
name|update
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|JComponent
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
name|Graphics2D
name|g2D
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
name|Color
name|colorBackground
init|=
name|c
operator|.
name|getBackground
argument_list|()
decl_stmt|;
name|int
name|shadow
init|=
name|KunststoffLookAndFeel
operator|.
name|getBackgroundGradientShadow
argument_list|()
decl_stmt|;
comment|// we will only paint the background if the background color is not null
if|if
condition|(
name|colorBackground
operator|!=
literal|null
condition|)
block|{
name|Rectangle
name|clipBounds
init|=
name|g
operator|.
name|getClipBounds
argument_list|()
decl_stmt|;
if|if
condition|(
name|shadow
operator|==
literal|0
condition|)
block|{
comment|// paint the background without gradient
name|g2D
operator|.
name|setColor
argument_list|(
name|colorBackground
argument_list|)
expr_stmt|;
name|g2D
operator|.
name|fill
argument_list|(
name|clipBounds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create the shadow color
name|int
name|red
init|=
name|colorBackground
operator|.
name|getRed
argument_list|()
decl_stmt|;
name|int
name|green
init|=
name|colorBackground
operator|.
name|getGreen
argument_list|()
decl_stmt|;
name|int
name|blue
init|=
name|colorBackground
operator|.
name|getBlue
argument_list|()
decl_stmt|;
name|Color
name|colorShadow
init|=
operator|new
name|Color
argument_list|(
name|red
operator|>=
name|shadow
condition|?
name|red
operator|-
name|shadow
else|:
literal|0
argument_list|,
name|green
operator|>=
name|shadow
condition|?
name|green
operator|-
name|shadow
else|:
literal|0
argument_list|,
name|blue
operator|>=
name|shadow
condition|?
name|blue
operator|-
name|shadow
else|:
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isToolkitTrueColor
condition|)
block|{
comment|// paint big horizontal gradient
name|Rectangle
name|rect
init|=
operator|new
name|Rectangle
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|list
operator|.
name|getWidth
argument_list|()
argument_list|,
name|list
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|KunststoffUtilities
operator|.
name|drawGradient
argument_list|(
name|g
argument_list|,
name|colorBackground
argument_list|,
name|colorShadow
argument_list|,
name|rect
argument_list|,
name|clipBounds
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|g2D
operator|.
name|setColor
argument_list|(
name|colorBackground
argument_list|)
expr_stmt|;
name|g2D
operator|.
name|fill
argument_list|(
name|clipBounds
argument_list|)
expr_stmt|;
comment|// create faded shadow color
name|Color
name|colorShadowFaded
init|=
name|KunststoffUtilities
operator|.
name|getTranslucentColor
argument_list|(
name|colorShadow
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// paint shadow at top
name|GradientPaint
name|gradientTop
init|=
operator|new
name|GradientPaint
argument_list|(
literal|0f
argument_list|,
literal|0f
argument_list|,
name|colorShadow
argument_list|,
literal|0f
argument_list|,
literal|5f
argument_list|,
name|colorShadowFaded
argument_list|)
decl_stmt|;
name|g2D
operator|.
name|setPaint
argument_list|(
name|gradientTop
argument_list|)
expr_stmt|;
name|g2D
operator|.
name|fill
argument_list|(
operator|new
name|Rectangle
argument_list|(
name|clipBounds
operator|.
name|x
argument_list|,
name|clipBounds
operator|.
name|y
argument_list|,
name|clipBounds
operator|.
name|width
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
comment|// paint shadow at left
name|GradientPaint
name|gradientLeft
init|=
operator|new
name|GradientPaint
argument_list|(
literal|0f
argument_list|,
literal|0f
argument_list|,
name|colorShadow
argument_list|,
literal|5f
argument_list|,
literal|0f
argument_list|,
name|colorShadowFaded
argument_list|)
decl_stmt|;
name|g2D
operator|.
name|setPaint
argument_list|(
name|gradientLeft
argument_list|)
expr_stmt|;
name|g2D
operator|.
name|fill
argument_list|(
operator|new
name|Rectangle
argument_list|(
name|clipBounds
operator|.
name|x
argument_list|,
name|clipBounds
operator|.
name|y
argument_list|,
literal|20
argument_list|,
name|clipBounds
operator|.
name|height
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|paint
argument_list|(
name|g
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
comment|// We temporarily make the renderer transparent if the row is not selected
comment|// and the renderer is a JComponent (like DefaultListCellRenderer) and the
comment|// background color is a ColorUIResource (which means it probably has the
comment|// original color assigned by the Look&Feel).
DECL|method|paintCell (Graphics g, int row, Rectangle rowBounds, ListCellRenderer cellRenderer, ListModel dataModel, ListSelectionModel selModel, int leadIndex)
specifier|protected
name|void
name|paintCell
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|int
name|row
parameter_list|,
name|Rectangle
name|rowBounds
parameter_list|,
name|ListCellRenderer
name|cellRenderer
parameter_list|,
name|ListModel
name|dataModel
parameter_list|,
name|ListSelectionModel
name|selModel
parameter_list|,
name|int
name|leadIndex
parameter_list|)
block|{
if|if
condition|(
name|cellRenderer
operator|instanceof
name|JComponent
operator|&&
operator|!
name|selModel
operator|.
name|isSelectedIndex
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|JComponent
name|renderer
init|=
operator|(
operator|(
name|JComponent
operator|)
name|cellRenderer
operator|)
decl_stmt|;
if|if
condition|(
name|renderer
operator|.
name|getBackground
argument_list|()
operator|instanceof
name|ColorUIResource
operator|&&
name|renderer
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
name|renderer
operator|.
name|setOpaque
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|super
operator|.
name|paintCell
argument_list|(
name|g
argument_list|,
name|row
argument_list|,
name|rowBounds
argument_list|,
name|cellRenderer
argument_list|,
name|dataModel
argument_list|,
name|selModel
argument_list|,
name|leadIndex
argument_list|)
expr_stmt|;
name|renderer
operator|.
name|setOpaque
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|super
operator|.
name|paintCell
argument_list|(
name|g
argument_list|,
name|row
argument_list|,
name|rowBounds
argument_list|,
name|cellRenderer
argument_list|,
name|dataModel
argument_list|,
name|selModel
argument_list|,
name|leadIndex
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

