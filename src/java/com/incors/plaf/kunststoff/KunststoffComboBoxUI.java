begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|com.incors.plaf.kunststoff
package|package
name|com
operator|.
name|incors
operator|.
name|plaf
operator|.
name|kunststoff
package|;
end_package

begin_comment
comment|/*  * This code was developed by Matthew Philips and INCORS GmbH (www.incors.com).  * It is published under the terms of the Lesser GNU Public License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|metal
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The KunststoffComboBoxUI is a little bit tricky, but it should work fine in  * most cases. It currently draws only correctly if the renderer of the combo  * box is an instance of<code>JComponent</code> and the background color is an  * instance of<code>ColorUIResource</code>. In a default<code>JComboBox</code>  * with a default renderer this should be the case.  */
end_comment

begin_class
DECL|class|KunststoffComboBoxUI
specifier|public
class|class
name|KunststoffComboBoxUI
extends|extends
name|MetalComboBoxUI
block|{
DECL|method|createUI (JComponent c)
specifier|public
specifier|static
name|ComponentUI
name|createUI
parameter_list|(
name|JComponent
name|c
parameter_list|)
block|{
return|return
operator|new
name|KunststoffComboBoxUI
argument_list|()
return|;
block|}
comment|/**    * Installs MyMetalComboBoxButton    */
DECL|method|createArrowButton ()
specifier|protected
name|JButton
name|createArrowButton
parameter_list|()
block|{
name|JButton
name|button
init|=
operator|new
name|MyMetalComboBoxButton
argument_list|(
name|comboBox
argument_list|,
operator|new
name|MetalComboBoxIcon
argument_list|()
argument_list|,
name|comboBox
operator|.
name|isEditable
argument_list|()
condition|?
literal|true
else|:
literal|false
argument_list|,
name|currentValuePane
argument_list|,
name|listBox
argument_list|)
decl_stmt|;
name|button
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|button
return|;
block|}
comment|/*    * This inner class finally fixed a nasty bug with the combo box. Thanks to    * Matthew Philips for providing the bugfix.    * Thanks to Ingo Kegel for fixing two compiling issues for jikes.    */
DECL|class|MyMetalComboBoxButton
specifier|private
specifier|final
class|class
name|MyMetalComboBoxButton
extends|extends
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|metal
operator|.
name|MetalComboBoxButton
block|{
DECL|method|MyMetalComboBoxButton (JComboBox cb, Icon i, boolean onlyIcon, CellRendererPane pane, JList list)
specifier|public
name|MyMetalComboBoxButton
parameter_list|(
name|JComboBox
name|cb
parameter_list|,
name|Icon
name|i
parameter_list|,
name|boolean
name|onlyIcon
parameter_list|,
name|CellRendererPane
name|pane
parameter_list|,
name|JList
name|list
parameter_list|)
block|{
name|super
argument_list|(
name|cb
argument_list|,
name|i
argument_list|,
name|onlyIcon
argument_list|,
name|pane
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|paintComponent (Graphics g)
specifier|public
name|void
name|paintComponent
parameter_list|(
name|Graphics
name|g
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iconOnly
operator|&&
name|MyMetalComboBoxButton
operator|.
name|this
operator|.
name|comboBox
operator|!=
literal|null
condition|)
block|{
name|boolean
name|isSetRendererOpaque
init|=
literal|false
decl_stmt|;
name|ListCellRenderer
name|renderer
init|=
name|MyMetalComboBoxButton
operator|.
name|this
operator|.
name|comboBox
operator|.
name|getRenderer
argument_list|()
decl_stmt|;
if|if
condition|(
name|renderer
operator|instanceof
name|JComponent
condition|)
block|{
name|JComponent
name|jRenderer
init|=
operator|(
name|JComponent
operator|)
name|renderer
decl_stmt|;
if|if
condition|(
name|jRenderer
operator|.
name|isOpaque
argument_list|()
operator|&&
name|jRenderer
operator|.
name|getBackground
argument_list|()
operator|instanceof
name|ColorUIResource
condition|)
block|{
name|isSetRendererOpaque
operator|=
literal|true
expr_stmt|;
comment|// remember to set the renderer opaque again
name|jRenderer
operator|.
name|setOpaque
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|paintComponent
argument_list|(
name|g
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSetRendererOpaque
condition|)
block|{
operator|(
operator|(
name|JComponent
operator|)
name|renderer
operator|)
operator|.
name|setOpaque
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|paintComponent
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

