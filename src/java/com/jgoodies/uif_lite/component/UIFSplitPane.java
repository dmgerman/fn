begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2003, 2004 JGoodies Karsten Lentzsch. All Rights Reserved.  *  * Redistribution and use in source and binary forms, with or without   * modification, are permitted provided that the following conditions are met:  *   *  o Redistributions of source code must retain the above copyright notice,   *    this list of conditions and the following disclaimer.   *       *  o Redistributions in binary form must reproduce the above copyright notice,   *    this list of conditions and the following disclaimer in the documentation   *    and/or other materials provided with the distribution.   *       *  o Neither the name of JGoodies Karsten Lentzsch nor the names of   *    its contributors may be used to endorse or promote products derived   *    from this software without specific prior written permission.   *       * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,   * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR   * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,   * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;   * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,   * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE   * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   */
end_comment

begin_package
DECL|package|com.jgoodies.uif_lite.component
package|package
name|com
operator|.
name|jgoodies
operator|.
name|uif_lite
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JSplitPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|Border
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|EmptyBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|SplitPaneUI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|basic
operator|.
name|BasicSplitPaneUI
import|;
end_import

begin_comment
comment|/**  * A<code>JSplitPane</code> subclass that can try to remove the divider border.   * Useful if the splitted components render their own borders.  * Note that this feature is not supported by all look&amp;feels.  * Some look&amp;feel implementation will always show a divider border,   * and conversely, others will never show a divider border.  *   * @author Karsten Lentzsch  * @version $Revision$  *   * @see javax.swing.plaf.basic.BasicSplitPaneUI  */
end_comment

begin_class
DECL|class|UIFSplitPane
specifier|public
specifier|final
class|class
name|UIFSplitPane
extends|extends
name|JSplitPane
block|{
comment|/**      * Holds the name of the bound property that tries to show or hide      * the split pane's divider border.      *       * @see #isDividerBorderVisible()      * @see #setDividerBorderVisible(boolean)      */
DECL|field|PROPERTYNAME_DIVIDER_BORDER_VISIBLE
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTYNAME_DIVIDER_BORDER_VISIBLE
init|=
literal|"dividerBorderVisible"
decl_stmt|;
comment|/**      * Holds an empty border that is reused for the split pane itself      * and the divider.      */
DECL|field|EMPTY_BORDER
specifier|private
specifier|static
specifier|final
name|Border
name|EMPTY_BORDER
init|=
operator|new
name|EmptyBorder
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Determines whether the divider border shall be removed when      * the UI is updated.      *       * @see #isDividerBorderVisible()      * @see #setDividerBorderVisible(boolean)       */
DECL|field|dividerBorderVisible
specifier|private
name|boolean
name|dividerBorderVisible
decl_stmt|;
comment|// Instance Creation *****************************************************
comment|/**      * Constructs a<code>UIFSplitPane</code> configured to arrange the child      * components side-by-side horizontally with no continuous       * layout, using two buttons for the components.      */
DECL|method|UIFSplitPane ()
specifier|public
name|UIFSplitPane
parameter_list|()
block|{
name|this
argument_list|(
name|JSplitPane
operator|.
name|HORIZONTAL_SPLIT
argument_list|,
literal|false
argument_list|,
operator|new
name|JButton
argument_list|(
name|UIManager
operator|.
name|getString
argument_list|(
literal|"SplitPane.leftButtonText"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|JButton
argument_list|(
name|UIManager
operator|.
name|getString
argument_list|(
literal|"SplitPane.rightButtonText"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a<code>UIFSplitPane</code> configured with the      * specified orientation and no continuous layout.      *      * @param newOrientation<code>JSplitPane.HORIZONTAL_SPLIT</code> or      *<code>JSplitPane.VERTICAL_SPLIT</code>      * @throws IllegalArgumentException if<code>orientation</code>      *		is not one of HORIZONTAL_SPLIT or VERTICAL_SPLIT.      */
DECL|method|UIFSplitPane (int newOrientation)
specifier|public
name|UIFSplitPane
parameter_list|(
name|int
name|newOrientation
parameter_list|)
block|{
name|this
argument_list|(
name|newOrientation
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a<code>UIFSplitPane</code> with the specified      * orientation and redrawing style.      *      * @param newOrientation<code>JSplitPane.HORIZONTAL_SPLIT</code> or      *<code>JSplitPane.VERTICAL_SPLIT</code>      * @param newContinuousLayout  a boolean, true for the components to       *        redraw continuously as the divider changes position, false      *        to wait until the divider position stops changing to redraw      * @throws IllegalArgumentException if<code>orientation</code>      *		is not one of HORIZONTAL_SPLIT or VERTICAL_SPLIT      */
DECL|method|UIFSplitPane (int newOrientation, boolean newContinuousLayout)
specifier|public
name|UIFSplitPane
parameter_list|(
name|int
name|newOrientation
parameter_list|,
name|boolean
name|newContinuousLayout
parameter_list|)
block|{
name|this
argument_list|(
name|newOrientation
argument_list|,
name|newContinuousLayout
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a<code>UIFSplitPane</code> with the specified orientation      * and the given componenents.      *       * @param orientation<code>JSplitPane.HORIZONTAL_SPLIT</code> or      *<code>JSplitPane.VERTICAL_SPLIT</code>      * @param leftComponent the<code>Component</code> that will      *    appear on the left of a horizontally-split pane,       *    or at the top of a vertically-split pane      * @param rightComponent the<code>Component</code> that will      *    appear on the right of a horizontally-split pane,       *    or at the bottom of a	vertically-split pane      * @throws IllegalArgumentException if<code>orientation</code>      *    is not one of: HORIZONTAL_SPLIT or VERTICAL_SPLIT      */
DECL|method|UIFSplitPane (int orientation, Component leftComponent, Component rightComponent)
specifier|public
name|UIFSplitPane
parameter_list|(
name|int
name|orientation
parameter_list|,
name|Component
name|leftComponent
parameter_list|,
name|Component
name|rightComponent
parameter_list|)
block|{
name|this
argument_list|(
name|orientation
argument_list|,
literal|false
argument_list|,
name|leftComponent
argument_list|,
name|rightComponent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a<code>UIFSplitPane</code> with the specified orientation,      * redrawing style, and given components.      *      * @param orientation<code>JSplitPane.HORIZONTAL_SPLIT</code> or      *<code>JSplitPane.VERTICAL_SPLIT</code>      * @param continuousLayout  a boolean, true for the components to       *        redraw continuously as the divider changes position, false      *        to wait until the divider position stops changing to redraw      * @param leftComponent the<code>Component</code> that will      *		appear on the left      *        	of a horizontally-split pane, or at the top of a      *        	vertically-split pane      * @param rightComponent the<code>Component</code> that will      *		appear on the right      *        	of a horizontally-split pane, or at the bottom of a      *        	vertically-split pane      * @throws IllegalArgumentException if<code>orientation</code>      *		is not one of HORIZONTAL_SPLIT or VERTICAL_SPLIT      */
DECL|method|UIFSplitPane (int orientation, boolean continuousLayout, Component leftComponent, Component rightComponent)
specifier|public
name|UIFSplitPane
parameter_list|(
name|int
name|orientation
parameter_list|,
name|boolean
name|continuousLayout
parameter_list|,
name|Component
name|leftComponent
parameter_list|,
name|Component
name|rightComponent
parameter_list|)
block|{
name|super
argument_list|(
name|orientation
argument_list|,
name|continuousLayout
argument_list|,
name|leftComponent
argument_list|,
name|rightComponent
argument_list|)
expr_stmt|;
name|dividerBorderVisible
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Constructs a<code>UIFSplitPane</code>,       * i.e. a<code>JSplitPane</code> that has no borders.      * Also disabled the one touch exandable property.      *       * @param orientation<code>JSplitPane.HORIZONTAL_SPLIT</code> or      *<code>JSplitPane.VERTICAL_SPLIT</code>      * @param leftComponent the<code>Component</code> that will      *    appear on the left of a horizontally-split pane,       *    or at the top of a vertically-split pane      * @param rightComponent the<code>Component</code> that will      *    appear on the right of a horizontally-split pane,       *    or at the bottom of a	vertically-split pane      * @throws IllegalArgumentException if<code>orientation</code>      *    is not one of: HORIZONTAL_SPLIT or VERTICAL_SPLIT      */
DECL|method|createStrippedSplitPane ( int orientation, Component leftComponent, Component rightComponent)
specifier|public
specifier|static
name|UIFSplitPane
name|createStrippedSplitPane
parameter_list|(
name|int
name|orientation
parameter_list|,
name|Component
name|leftComponent
parameter_list|,
name|Component
name|rightComponent
parameter_list|)
block|{
name|UIFSplitPane
name|split
init|=
operator|new
name|UIFSplitPane
argument_list|(
name|orientation
argument_list|,
name|leftComponent
argument_list|,
name|rightComponent
argument_list|)
decl_stmt|;
name|split
operator|.
name|setBorder
argument_list|(
name|EMPTY_BORDER
argument_list|)
expr_stmt|;
name|split
operator|.
name|setOneTouchExpandable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|split
return|;
block|}
comment|// Accessing Properties **************************************************
comment|/**      * Checks and answers whether the divider border shall be visible       * or invisible.       * Note that this feature is not supported by all look&amp;feels.      * Some look&amp;feel implementation will always show a divider border,       * and conversely, others will never show a divider border.      *       * @return the desired (but potentially inaccurate) divider border visiblity      */
DECL|method|isDividerBorderVisible ()
specifier|public
name|boolean
name|isDividerBorderVisible
parameter_list|()
block|{
return|return
name|dividerBorderVisible
return|;
block|}
comment|/**      * Makes the divider border visible or invisible.      * Note that this feature is not supported by all look&amp;feels.      * Some look&amp;feel implementation will always show a divider border,       * and conversely, others will never show a divider border.      *       * @param newVisibility   true for visible, false for invisible      */
DECL|method|setDividerBorderVisible (boolean newVisibility)
specifier|public
name|void
name|setDividerBorderVisible
parameter_list|(
name|boolean
name|newVisibility
parameter_list|)
block|{
name|boolean
name|oldVisibility
init|=
name|isDividerBorderVisible
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldVisibility
operator|==
name|newVisibility
condition|)
return|return;
name|dividerBorderVisible
operator|=
name|newVisibility
expr_stmt|;
name|firePropertyChange
argument_list|(
name|PROPERTYNAME_DIVIDER_BORDER_VISIBLE
argument_list|,
name|oldVisibility
argument_list|,
name|newVisibility
argument_list|)
expr_stmt|;
block|}
comment|// Changing the Divider Border Visibility *********************************
comment|/**      * Updates the UI and sets an empty divider border. The divider border      * may be restored by a L&F at UI installation time. And so, we      * try to reset it each time the UI is changed.      */
DECL|method|updateUI ()
specifier|public
name|void
name|updateUI
parameter_list|()
block|{
name|super
operator|.
name|updateUI
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isDividerBorderVisible
argument_list|()
condition|)
name|setEmptyDividerBorder
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets an empty divider border if and only if the UI is       * an instance of<code>BasicSplitPaneUI</code>.      */
DECL|method|setEmptyDividerBorder ()
specifier|private
name|void
name|setEmptyDividerBorder
parameter_list|()
block|{
name|SplitPaneUI
name|splitPaneUI
init|=
name|getUI
argument_list|()
decl_stmt|;
if|if
condition|(
name|splitPaneUI
operator|instanceof
name|BasicSplitPaneUI
condition|)
block|{
name|BasicSplitPaneUI
name|basicUI
init|=
operator|(
name|BasicSplitPaneUI
operator|)
name|splitPaneUI
decl_stmt|;
name|basicUI
operator|.
name|getDivider
argument_list|()
operator|.
name|setBorder
argument_list|(
name|EMPTY_BORDER
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

