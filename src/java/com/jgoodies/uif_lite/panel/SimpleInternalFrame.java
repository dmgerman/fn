begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2003 JGoodies Karsten Lentzsch. All Rights Reserved.  *  * Redistribution and use in source and binary forms, with or without   * modification, are permitted provided that the following conditions are met:  *   *  o Redistributions of source code must retain the above copyright notice,   *    this list of conditions and the following disclaimer.   *       *  o Redistributions in binary form must reproduce the above copyright notice,   *    this list of conditions and the following disclaimer in the documentation   *    and/or other materials provided with the distribution.   *       *  o Neither the name of JGoodies Karsten Lentzsch nor the names of   *    its contributors may be used to endorse or promote products derived   *    from this software without specific prior written permission.   *       * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,   * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR   * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,   * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;   * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,   * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE   * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   */
end_comment

begin_package
DECL|package|com.jgoodies.uif_lite.panel
package|package
name|com
operator|.
name|jgoodies
operator|.
name|uif_lite
operator|.
name|panel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|AbstractBorder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|plaf
operator|.
name|LookUtils
import|;
end_import

begin_comment
comment|/**   * A<code>JPanel</code> subclass that has a drop shadow border and   * that provides a header with icon, title and tool bar.<p>  *   * This class can be used to replace the<code>JInternalFrame</code>,  * for use outside of a<code>JDesktopPane</code>.   * The<code>SimpleInternalFrame</code> is less flexible but often  * more usable; it avoids overlapping windows and scales well   * up to IDE size.  * Several customers have reported that they and their clients feel   * much better with both the appearance and the UI feel.<p>  *   * The SimpleInternalFrame provides the following bound properties:  *<i>frameIcon, title, toolBar, content, selected.</i><p>  *   * By default the SimpleInternalFrame is in<i>selected</i> state.  * If you don't do anything, multiple simple internal frames will  * be displayed as selected.  *   * @author Karsten Lentzsch  * @version $Revision$  *   * @see    javax.swing.JInternalFrame  * @see    javax.swing.JDesktopPane  */
end_comment

begin_class
DECL|class|SimpleInternalFrame
specifier|public
class|class
name|SimpleInternalFrame
extends|extends
name|JPanel
block|{
DECL|field|titleLabel
specifier|private
name|JLabel
name|titleLabel
decl_stmt|;
DECL|field|gradientPanel
specifier|private
name|GradientPanel
name|gradientPanel
decl_stmt|;
DECL|field|headerPanel
specifier|private
name|JPanel
name|headerPanel
decl_stmt|;
DECL|field|isSelected
specifier|private
name|boolean
name|isSelected
decl_stmt|;
comment|// Instance Creation ****************************************************
comment|/**      * Constructs a<code>SimpleInternalFrame</code> with the specified title.      *       * @param title       the initial title      */
DECL|method|SimpleInternalFrame (String title)
specifier|public
name|SimpleInternalFrame
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|title
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a<code>SimpleInternalFrame</code> with the specified       * icon, and title.      *       * @param icon        the initial icon      * @param title       the initial title      */
DECL|method|SimpleInternalFrame (Icon icon, String title)
specifier|public
name|SimpleInternalFrame
parameter_list|(
name|Icon
name|icon
parameter_list|,
name|String
name|title
parameter_list|)
block|{
name|this
argument_list|(
name|icon
argument_list|,
name|title
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a<code>SimpleInternalFrame</code> with the specified       * title, tool bar, and content panel.      *       * @param title       the initial title      * @param bar         the initial tool bar      * @param content     the initial content pane      */
DECL|method|SimpleInternalFrame (String title, JToolBar bar, JComponent content)
specifier|public
name|SimpleInternalFrame
parameter_list|(
name|String
name|title
parameter_list|,
name|JToolBar
name|bar
parameter_list|,
name|JComponent
name|content
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|title
argument_list|,
name|bar
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a<code>SimpleInternalFrame</code> with the specified       * icon, title, tool bar, and content panel.      *       * @param icon        the initial icon      * @param title       the initial title      * @param bar         the initial tool bar      * @param content     the initial content pane      */
DECL|method|SimpleInternalFrame ( Icon icon, String title, JToolBar bar, JComponent content)
specifier|public
name|SimpleInternalFrame
parameter_list|(
name|Icon
name|icon
parameter_list|,
name|String
name|title
parameter_list|,
name|JToolBar
name|bar
parameter_list|,
name|JComponent
name|content
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|isSelected
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|titleLabel
operator|=
operator|new
name|JLabel
argument_list|(
name|title
argument_list|,
name|icon
argument_list|,
name|SwingConstants
operator|.
name|LEADING
argument_list|)
expr_stmt|;
name|JPanel
name|top
init|=
name|buildHeader
argument_list|(
name|titleLabel
argument_list|,
name|bar
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|top
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
name|setBorder
argument_list|(
operator|new
name|ShadowBorder
argument_list|()
argument_list|)
expr_stmt|;
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateHeader
argument_list|()
expr_stmt|;
block|}
comment|// Public API ***********************************************************
comment|/**      * Returns the frame's icon.      *       * @return the frame's icon      */
DECL|method|getFrameIcon ()
specifier|public
name|Icon
name|getFrameIcon
parameter_list|()
block|{
return|return
name|titleLabel
operator|.
name|getIcon
argument_list|()
return|;
block|}
comment|/**      * Sets a new frame icon.      *       * @param newIcon   the icon to be set      */
DECL|method|setFrameIcon (Icon newIcon)
specifier|public
name|void
name|setFrameIcon
parameter_list|(
name|Icon
name|newIcon
parameter_list|)
block|{
name|Icon
name|oldIcon
init|=
name|getFrameIcon
argument_list|()
decl_stmt|;
name|titleLabel
operator|.
name|setIcon
argument_list|(
name|newIcon
argument_list|)
expr_stmt|;
name|firePropertyChange
argument_list|(
literal|"frameIcon"
argument_list|,
name|oldIcon
argument_list|,
name|newIcon
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the frame's title text.      *       * @return String   the current title text      */
DECL|method|getTitle ()
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|titleLabel
operator|.
name|getText
argument_list|()
return|;
block|}
comment|/**      * Sets a new title text.      *       * @param newText  the title text tp be set      */
DECL|method|setTitle (String newText)
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|newText
parameter_list|)
block|{
name|String
name|oldText
init|=
name|getTitle
argument_list|()
decl_stmt|;
name|titleLabel
operator|.
name|setText
argument_list|(
name|newText
argument_list|)
expr_stmt|;
name|firePropertyChange
argument_list|(
literal|"title"
argument_list|,
name|oldText
argument_list|,
name|newText
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the current toolbar, null if none has been set before.      *       * @return the current toolbar - if any      */
DECL|method|getToolBar ()
specifier|public
name|JToolBar
name|getToolBar
parameter_list|()
block|{
return|return
name|headerPanel
operator|.
name|getComponentCount
argument_list|()
operator|>
literal|1
condition|?
operator|(
name|JToolBar
operator|)
name|headerPanel
operator|.
name|getComponent
argument_list|(
literal|1
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Sets a new tool bar in the header.      *       * @param newToolBar the tool bar to be set in the header      */
DECL|method|setToolBar (JToolBar newToolBar)
specifier|public
name|void
name|setToolBar
parameter_list|(
name|JToolBar
name|newToolBar
parameter_list|)
block|{
name|JToolBar
name|oldToolBar
init|=
name|getToolBar
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldToolBar
operator|==
name|newToolBar
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|oldToolBar
operator|!=
literal|null
condition|)
block|{
name|headerPanel
operator|.
name|remove
argument_list|(
name|oldToolBar
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newToolBar
operator|!=
literal|null
condition|)
block|{
name|newToolBar
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|headerPanel
operator|.
name|add
argument_list|(
name|newToolBar
argument_list|,
name|BorderLayout
operator|.
name|EAST
argument_list|)
expr_stmt|;
block|}
name|updateHeader
argument_list|()
expr_stmt|;
name|firePropertyChange
argument_list|(
literal|"toolBar"
argument_list|,
name|oldToolBar
argument_list|,
name|newToolBar
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the content - null, if none has been set.      *       * @return the current content      */
DECL|method|getContent ()
specifier|public
name|Component
name|getContent
parameter_list|()
block|{
return|return
name|hasContent
argument_list|()
condition|?
name|getComponent
argument_list|(
literal|1
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Sets a new panel content; replaces any existing content, if existing.      *       * @param newContent   the panel's new content      */
DECL|method|setContent (Component newContent)
specifier|public
name|void
name|setContent
parameter_list|(
name|Component
name|newContent
parameter_list|)
block|{
name|Component
name|oldContent
init|=
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasContent
argument_list|()
condition|)
block|{
name|remove
argument_list|(
name|oldContent
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|newContent
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|firePropertyChange
argument_list|(
literal|"content"
argument_list|,
name|oldContent
argument_list|,
name|newContent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Answers if the panel is currently selected (or in other words active)      * or not. In the selected state, the header background will be      * rendered differently.      *       * @return boolean  a boolean, where true means the frame is selected       *                  (currently active) and false means it is not        */
DECL|method|isSelected ()
specifier|public
name|boolean
name|isSelected
parameter_list|()
block|{
return|return
name|isSelected
return|;
block|}
comment|/**      * This panel draws its title bar differently if it is selected,      * which may be used to indicate to the user that this panel      * has the focus, or should get more attention than other      * simple internal frames.      *      * @param newValue  a boolean, where true means the frame is selected       *                  (currently active) and false means it is not      */
DECL|method|setSelected (boolean newValue)
specifier|public
name|void
name|setSelected
parameter_list|(
name|boolean
name|newValue
parameter_list|)
block|{
name|boolean
name|oldValue
init|=
name|isSelected
argument_list|()
decl_stmt|;
name|isSelected
operator|=
name|newValue
expr_stmt|;
name|updateHeader
argument_list|()
expr_stmt|;
name|firePropertyChange
argument_list|(
literal|"selected"
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
comment|// Building *************************************************************
comment|/**      * Creates and answers the header panel, that consists of:      * an icon, a title label, a tool bar, and a gradient background.      *       * @param label   the label to paint the icon and text      * @param bar     the panel's tool bar      * @return the panel's built header area      */
DECL|method|buildHeader (JLabel label, JToolBar bar)
specifier|private
name|JPanel
name|buildHeader
parameter_list|(
name|JLabel
name|label
parameter_list|,
name|JToolBar
name|bar
parameter_list|)
block|{
name|gradientPanel
operator|=
operator|new
name|GradientPanel
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|,
name|getHeaderBackground
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|setOpaque
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gradientPanel
operator|.
name|add
argument_list|(
name|label
argument_list|,
name|BorderLayout
operator|.
name|WEST
argument_list|)
expr_stmt|;
name|gradientPanel
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|headerPanel
operator|=
operator|new
name|JPanel
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|headerPanel
operator|.
name|add
argument_list|(
name|gradientPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|setToolBar
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|headerPanel
operator|.
name|setBorder
argument_list|(
operator|new
name|RaisedHeaderBorder
argument_list|()
argument_list|)
expr_stmt|;
name|headerPanel
operator|.
name|setOpaque
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|headerPanel
return|;
block|}
comment|/**      * Updates the header.      */
DECL|method|updateHeader ()
specifier|private
name|void
name|updateHeader
parameter_list|()
block|{
name|gradientPanel
operator|.
name|setBackground
argument_list|(
name|getHeaderBackground
argument_list|()
argument_list|)
expr_stmt|;
name|gradientPanel
operator|.
name|setOpaque
argument_list|(
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|titleLabel
operator|.
name|setForeground
argument_list|(
name|getTextForeground
argument_list|(
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|headerPanel
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
comment|/**      * Updates the UI. In addition to the superclass behavior, we need      * to update the header component.      */
DECL|method|updateUI ()
specifier|public
name|void
name|updateUI
parameter_list|()
block|{
name|super
operator|.
name|updateUI
argument_list|()
expr_stmt|;
if|if
condition|(
name|titleLabel
operator|!=
literal|null
condition|)
block|{
name|updateHeader
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Helper Code **********************************************************
comment|/**      * Checks and answers if the panel has a content component set.      *       * @return true if the panel has a content, false if it's empty      */
DECL|method|hasContent ()
specifier|private
name|boolean
name|hasContent
parameter_list|()
block|{
return|return
name|getComponentCount
argument_list|()
operator|>
literal|1
return|;
block|}
comment|/**      * Determines and answers the header's text foreground color.      * Tries to lookup a special color from the L&amp;F.      * In case it is absent, it uses the standard internal frame forground.      *       * @param selected   true to lookup the active color, false for the inactive      * @return the color of the foreground text      */
DECL|method|getTextForeground (boolean selected)
specifier|protected
name|Color
name|getTextForeground
parameter_list|(
name|boolean
name|selected
parameter_list|)
block|{
name|Color
name|c
init|=
name|UIManager
operator|.
name|getColor
argument_list|(
name|selected
condition|?
literal|"SimpleInternalFrame.activeTitleForeground"
else|:
literal|"SimpleInternalFrame.inactiveTitleForeground"
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
return|return
name|c
return|;
block|}
return|return
name|UIManager
operator|.
name|getColor
argument_list|(
name|selected
condition|?
literal|"InternalFrame.activeTitleForeground"
else|:
literal|"Label.foreground"
argument_list|)
return|;
block|}
comment|/**      * Determines and answers the header's background color.      * Tries to lookup a special color from the L&amp;F.      * In case it is absent, it uses the standard internal frame background.      *       * @return the color of the header's background      */
DECL|method|getHeaderBackground ()
specifier|protected
name|Color
name|getHeaderBackground
parameter_list|()
block|{
name|Color
name|c
init|=
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"SimpleInternalFrame.activeTitleBackground"
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
return|return
name|c
return|;
if|if
condition|(
name|LookUtils
operator|.
name|IS_LAF_WINDOWS_XP_ENABLED
condition|)
name|c
operator|=
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"InternalFrame.activeTitleGradient"
argument_list|)
expr_stmt|;
return|return
name|c
operator|!=
literal|null
condition|?
name|c
else|:
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"InternalFrame.activeTitleBackground"
argument_list|)
return|;
block|}
comment|// Helper Classes *******************************************************
comment|// A custom border for the raised header pseudo 3D effect.
DECL|class|RaisedHeaderBorder
specifier|private
specifier|static
class|class
name|RaisedHeaderBorder
extends|extends
name|AbstractBorder
block|{
DECL|field|INSETS
specifier|private
specifier|static
specifier|final
name|Insets
name|INSETS
init|=
operator|new
name|Insets
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|method|getBorderInsets (Component c)
specifier|public
name|Insets
name|getBorderInsets
parameter_list|(
name|Component
name|c
parameter_list|)
block|{
return|return
name|INSETS
return|;
block|}
DECL|method|paintBorder (Component c, Graphics g, int x, int y, int w, int h)
specifier|public
name|void
name|paintBorder
parameter_list|(
name|Component
name|c
parameter_list|,
name|Graphics
name|g
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
name|g
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlLtHighlight"
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|h
operator|-
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlShadow"
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
name|h
operator|-
literal|1
argument_list|,
name|w
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|translate
argument_list|(
operator|-
name|x
argument_list|,
operator|-
name|y
argument_list|)
expr_stmt|;
block|}
block|}
comment|// A custom border that has a shadow on the right and lower sides.
DECL|class|ShadowBorder
specifier|private
specifier|static
class|class
name|ShadowBorder
extends|extends
name|AbstractBorder
block|{
DECL|field|INSETS
specifier|private
specifier|static
specifier|final
name|Insets
name|INSETS
init|=
operator|new
name|Insets
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
DECL|method|getBorderInsets (Component c)
specifier|public
name|Insets
name|getBorderInsets
parameter_list|(
name|Component
name|c
parameter_list|)
block|{
return|return
name|INSETS
return|;
block|}
DECL|method|paintBorder (Component c, Graphics g, int x, int y, int w, int h)
specifier|public
name|void
name|paintBorder
parameter_list|(
name|Component
name|c
parameter_list|,
name|Graphics
name|g
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
name|Color
name|shadow
init|=
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"controlShadow"
argument_list|)
decl_stmt|;
if|if
condition|(
name|shadow
operator|==
literal|null
condition|)
block|{
name|shadow
operator|=
name|Color
operator|.
name|GRAY
expr_stmt|;
block|}
name|Color
name|lightShadow
init|=
operator|new
name|Color
argument_list|(
name|shadow
operator|.
name|getRed
argument_list|()
argument_list|,
name|shadow
operator|.
name|getGreen
argument_list|()
argument_list|,
name|shadow
operator|.
name|getBlue
argument_list|()
argument_list|,
literal|170
argument_list|)
decl_stmt|;
name|Color
name|lighterShadow
init|=
operator|new
name|Color
argument_list|(
name|shadow
operator|.
name|getRed
argument_list|()
argument_list|,
name|shadow
operator|.
name|getGreen
argument_list|()
argument_list|,
name|shadow
operator|.
name|getBlue
argument_list|()
argument_list|,
literal|70
argument_list|)
decl_stmt|;
name|g
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
operator|-
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|h
operator|-
literal|3
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
name|w
operator|-
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|h
operator|-
literal|3
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|1
argument_list|,
name|h
operator|-
literal|3
argument_list|,
name|w
operator|-
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Shadow line 1
name|g
operator|.
name|setColor
argument_list|(
name|lightShadow
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
name|w
operator|-
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
name|h
operator|-
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
name|w
operator|-
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|h
operator|-
literal|3
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|1
argument_list|,
name|h
operator|-
literal|2
argument_list|,
name|w
operator|-
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Shadow line2
name|g
operator|.
name|setColor
argument_list|(
name|lighterShadow
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
name|w
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
name|h
operator|-
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
name|w
operator|-
literal|2
argument_list|,
name|h
operator|-
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
name|w
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|h
operator|-
literal|2
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
literal|1
argument_list|,
name|h
operator|-
literal|1
argument_list|,
name|w
operator|-
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|g
operator|.
name|translate
argument_list|(
operator|-
name|x
argument_list|,
operator|-
name|y
argument_list|)
expr_stmt|;
block|}
block|}
comment|// A panel with a horizontal gradient background.
DECL|class|GradientPanel
specifier|private
specifier|static
class|class
name|GradientPanel
extends|extends
name|JPanel
block|{
DECL|method|GradientPanel (LayoutManager lm, Color background)
specifier|private
name|GradientPanel
parameter_list|(
name|LayoutManager
name|lm
parameter_list|,
name|Color
name|background
parameter_list|)
block|{
name|super
argument_list|(
name|lm
argument_list|)
expr_stmt|;
name|setBackground
argument_list|(
name|background
argument_list|)
expr_stmt|;
block|}
DECL|method|paintComponent (Graphics g)
specifier|public
name|void
name|paintComponent
parameter_list|(
name|Graphics
name|g
parameter_list|)
block|{
name|super
operator|.
name|paintComponent
argument_list|(
name|g
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isOpaque
argument_list|()
condition|)
block|{
return|return;
block|}
name|Color
name|control
init|=
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"control"
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|getHeight
argument_list|()
decl_stmt|;
name|Graphics2D
name|g2
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
name|Paint
name|storedPaint
init|=
name|g2
operator|.
name|getPaint
argument_list|()
decl_stmt|;
name|g2
operator|.
name|setPaint
argument_list|(
operator|new
name|GradientPaint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|getBackground
argument_list|()
argument_list|,
name|width
argument_list|,
literal|0
argument_list|,
name|control
argument_list|)
argument_list|)
expr_stmt|;
name|g2
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|g2
operator|.
name|setPaint
argument_list|(
name|storedPaint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

