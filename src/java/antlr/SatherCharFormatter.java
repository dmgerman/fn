begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/RIGHTS.html  *  * $Id$  */
end_comment

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_class
DECL|class|SatherCharFormatter
class|class
name|SatherCharFormatter
implements|implements
name|CharFormatter
block|{
comment|/** Given a character value, return a string representing the character      * that can be embedded inside a string literal or character literal      * This works for Java/C/C++ code-generation and languages with compatible      * special-character-escapment.      * Code-generators for languages should override this method.      * @param c   The character of interest.      * @param forCharLiteral  true to escape for char literal, false for string literal      */
DECL|method|escapeChar (int c, boolean forCharLiteral)
specifier|public
name|String
name|escapeChar
parameter_list|(
name|int
name|c
parameter_list|,
name|boolean
name|forCharLiteral
parameter_list|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
comment|//		case GrammarAnalyzer.EPSILON_TYPE : return "<end-of-token>";
case|case
literal|'\n'
case|:
return|return
literal|"\\n"
return|;
case|case
literal|'\t'
case|:
return|return
literal|"\\t"
return|;
case|case
literal|'\r'
case|:
return|return
literal|"\\r"
return|;
case|case
literal|'\\'
case|:
return|return
literal|"\\\\"
return|;
case|case
literal|'\''
case|:
return|return
name|forCharLiteral
condition|?
literal|"\\'"
else|:
literal|"'"
return|;
case|case
literal|'"'
case|:
return|return
name|forCharLiteral
condition|?
literal|"\""
else|:
literal|"\\\""
return|;
default|default :
if|if
condition|(
name|c
argument_list|<
literal|' '
operator|||
name|c
argument_list|>
literal|126
condition|)
block|{
if|if
condition|(
name|c
operator|>
literal|255
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"warning: Sather does not support 16-bit characters (..yet)."
argument_list|)
expr_stmt|;
return|return
literal|"\\u"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|"\\"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|c
argument_list|,
literal|8
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
return|;
block|}
block|}
block|}
comment|/** Converts a String into a representation that can be use as a literal      * when surrounded by double-quotes.      * @param s The String to be changed into a literal      */
DECL|method|escapeString (String s)
specifier|public
name|String
name|escapeString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|String
name|retval
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|retval
operator|+=
name|escapeChar
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/** Given a character value, return a string representing the character      * literal that can be recognized by the target language compiler.      * This works for languages that use single-quotes for character literals.      * Code-generators for languages should override this method.      * @param c   The character of interest.      */
DECL|method|literalChar (int c)
specifier|public
name|String
name|literalChar
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
literal|"'"
operator|+
name|escapeChar
argument_list|(
name|c
argument_list|,
literal|true
argument_list|)
operator|+
literal|"'"
return|;
block|}
comment|/** Converts a String into a string literal      * This works for languages that use double-quotes for string literals.      * Code-generators for languages should override this method.      * @param s The String to be changed into a literal      */
DECL|method|literalString (String s)
specifier|public
name|String
name|literalString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|"\""
operator|+
name|escapeString
argument_list|(
name|s
argument_list|)
operator|+
literal|"\""
return|;
block|}
DECL|method|BitSet2BoolList ( BitSet bs, String separator )
specifier|public
name|String
name|BitSet2BoolList
parameter_list|(
name|BitSet
name|bs
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|String
name|result
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
name|int
name|bs_size
init|=
name|bs
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bs_size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bs
operator|.
name|member
argument_list|(
name|i
argument_list|)
condition|)
name|result
operator|+=
literal|"true"
expr_stmt|;
else|else
name|result
operator|+=
literal|"false"
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|bs_size
operator|-
literal|1
condition|)
name|result
operator|+=
name|separator
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|BitSet2IntList ( BitSet bs, String separator )
specifier|public
name|String
name|BitSet2IntList
parameter_list|(
name|BitSet
name|bs
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|String
name|result
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|bs
operator|.
name|member
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|result
operator|+=
name|separator
expr_stmt|;
else|else
name|first
operator|=
literal|false
expr_stmt|;
name|result
operator|+=
name|i
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

