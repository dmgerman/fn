begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_comment
comment|// class implements a String-like object whose sole purpose is to be
end_comment

begin_comment
comment|// entered into a lexer HashTable.  It uses a lexer object to get
end_comment

begin_comment
comment|// information about case sensitivity.
end_comment

begin_class
DECL|class|ANTLRHashString
specifier|public
class|class
name|ANTLRHashString
block|{
comment|// only one of s or buf is non-null
DECL|field|s
specifier|private
name|String
name|s
decl_stmt|;
DECL|field|buf
specifier|private
name|char
index|[]
name|buf
decl_stmt|;
DECL|field|len
specifier|private
name|int
name|len
decl_stmt|;
DECL|field|lexer
specifier|private
name|CharScanner
name|lexer
decl_stmt|;
DECL|field|prime
specifier|private
specifier|static
specifier|final
name|int
name|prime
init|=
literal|151
decl_stmt|;
DECL|method|ANTLRHashString (char[] buf, int length, CharScanner lexer)
specifier|public
name|ANTLRHashString
parameter_list|(
name|char
index|[]
name|buf
parameter_list|,
name|int
name|length
parameter_list|,
name|CharScanner
name|lexer
parameter_list|)
block|{
name|this
operator|.
name|lexer
operator|=
name|lexer
expr_stmt|;
name|setBuffer
argument_list|(
name|buf
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|// Hash strings constructed this way are unusable until setBuffer or setString are called.
DECL|method|ANTLRHashString (CharScanner lexer)
specifier|public
name|ANTLRHashString
parameter_list|(
name|CharScanner
name|lexer
parameter_list|)
block|{
name|this
operator|.
name|lexer
operator|=
name|lexer
expr_stmt|;
block|}
DECL|method|ANTLRHashString (String s, CharScanner lexer)
specifier|public
name|ANTLRHashString
parameter_list|(
name|String
name|s
parameter_list|,
name|CharScanner
name|lexer
parameter_list|)
block|{
name|this
operator|.
name|lexer
operator|=
name|lexer
expr_stmt|;
name|setString
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|charAt (int index)
specifier|private
specifier|final
name|char
name|charAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|s
operator|!=
literal|null
operator|)
condition|?
name|s
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
else|:
name|buf
index|[
name|index
index|]
return|;
block|}
comment|// Return true if o is an ANTLRHashString equal to this.
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ANTLRHashString
operator|)
operator|&&
operator|!
operator|(
name|o
operator|instanceof
name|String
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ANTLRHashString
name|s
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|s
operator|=
operator|new
name|ANTLRHashString
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|lexer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
operator|(
name|ANTLRHashString
operator|)
name|o
expr_stmt|;
block|}
name|int
name|l
init|=
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|!=
name|l
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|lexer
operator|.
name|getCaseSensitiveLiterals
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|lexer
operator|.
name|toLower
argument_list|(
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|!=
name|lexer
operator|.
name|toLower
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashval
init|=
literal|0
decl_stmt|;
name|int
name|l
init|=
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|lexer
operator|.
name|getCaseSensitiveLiterals
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
name|hashval
operator|=
name|hashval
operator|*
name|prime
operator|+
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
name|hashval
operator|=
name|hashval
operator|*
name|prime
operator|+
name|lexer
operator|.
name|toLower
argument_list|(
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hashval
return|;
block|}
DECL|method|length ()
specifier|private
specifier|final
name|int
name|length
parameter_list|()
block|{
return|return
operator|(
name|s
operator|!=
literal|null
operator|)
condition|?
name|s
operator|.
name|length
argument_list|()
else|:
name|len
return|;
block|}
DECL|method|setBuffer (char[] buf, int length)
specifier|public
name|void
name|setBuffer
parameter_list|(
name|char
index|[]
name|buf
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|len
operator|=
name|length
expr_stmt|;
name|s
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|setString (String s)
specifier|public
name|void
name|setString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
name|buf
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

