begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_comment
comment|// Implementation of a StringBuffer-like object that does not have the
end_comment

begin_comment
comment|// unfortunate side-effect of creating Strings with very large buffers.
end_comment

begin_class
DECL|class|ANTLRStringBuffer
specifier|public
class|class
name|ANTLRStringBuffer
block|{
DECL|field|buffer
specifier|protected
name|char
index|[]
name|buffer
init|=
literal|null
decl_stmt|;
DECL|field|length
specifier|protected
name|int
name|length
init|=
literal|0
decl_stmt|;
comment|// length and also where to store next char
DECL|method|ANTLRStringBuffer ()
specifier|public
name|ANTLRStringBuffer
parameter_list|()
block|{
name|buffer
operator|=
operator|new
name|char
index|[
literal|50
index|]
expr_stmt|;
block|}
DECL|method|ANTLRStringBuffer (int n)
specifier|public
name|ANTLRStringBuffer
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|buffer
operator|=
operator|new
name|char
index|[
name|n
index|]
expr_stmt|;
block|}
DECL|method|append (char c)
specifier|public
specifier|final
name|void
name|append
parameter_list|(
name|char
name|c
parameter_list|)
block|{
comment|// This would normally be  an "ensureCapacity" method, but inlined
comment|// here for speed.
if|if
condition|(
name|length
operator|>=
name|buffer
operator|.
name|length
condition|)
block|{
comment|// Compute a new length that is at least double old length
name|int
name|newSize
init|=
name|buffer
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|length
operator|>=
name|newSize
condition|)
block|{
name|newSize
operator|*=
literal|2
expr_stmt|;
block|}
comment|// Allocate new array and copy buffer
name|char
index|[]
name|newBuffer
init|=
operator|new
name|char
index|[
name|newSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newBuffer
index|[
name|i
index|]
operator|=
name|buffer
index|[
name|i
index|]
expr_stmt|;
block|}
name|buffer
operator|=
name|newBuffer
expr_stmt|;
block|}
name|buffer
index|[
name|length
index|]
operator|=
name|c
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
DECL|method|append (String s)
specifier|public
specifier|final
name|void
name|append
parameter_list|(
name|String
name|s
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|charAt (int index)
specifier|public
specifier|final
name|char
name|charAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|buffer
index|[
name|index
index|]
return|;
block|}
DECL|method|getBuffer ()
specifier|final
specifier|public
name|char
index|[]
name|getBuffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
DECL|method|length ()
specifier|public
specifier|final
name|int
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|setCharAt (int index, char ch)
specifier|public
specifier|final
name|void
name|setCharAt
parameter_list|(
name|int
name|index
parameter_list|,
name|char
name|ch
parameter_list|)
block|{
name|buffer
index|[
name|index
index|]
operator|=
name|ch
expr_stmt|;
block|}
DECL|method|setLength (int newLength)
specifier|public
specifier|final
name|void
name|setLength
parameter_list|(
name|int
name|newLength
parameter_list|)
block|{
if|if
condition|(
name|newLength
operator|<
name|length
condition|)
block|{
name|length
operator|=
name|newLength
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|newLength
operator|>
name|length
condition|)
block|{
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|toString ()
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
end_class

end_unit

