begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_comment
comment|/** Simple class to dump the contents of an AST to the output */
end_comment

begin_class
DECL|class|DumpASTVisitor
specifier|public
class|class
name|DumpASTVisitor
implements|implements
name|ASTVisitor
block|{
DECL|field|level
specifier|protected
name|int
name|level
init|=
literal|0
decl_stmt|;
DECL|method|tabs ()
specifier|private
name|void
name|tabs
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|level
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|visit (AST node)
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
comment|// Flatten this level of the tree if it has no children
name|boolean
name|flatten
init|=
comment|/*true*/
literal|false
decl_stmt|;
name|AST
name|node2
decl_stmt|;
for|for
control|(
name|node2
operator|=
name|node
init|;
name|node2
operator|!=
literal|null
condition|;
name|node2
operator|=
name|node2
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|node2
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|flatten
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|node2
operator|=
name|node
init|;
name|node2
operator|!=
literal|null
condition|;
name|node2
operator|=
name|node2
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|flatten
operator|||
name|node2
operator|==
name|node
condition|)
block|{
name|tabs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node2
operator|.
name|getText
argument_list|()
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"nil"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|node2
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" ["
operator|+
name|node2
operator|.
name|getType
argument_list|()
operator|+
literal|"] "
argument_list|)
expr_stmt|;
if|if
condition|(
name|flatten
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node2
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|level
operator|++
expr_stmt|;
name|visit
argument_list|(
name|node2
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|level
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|flatten
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

