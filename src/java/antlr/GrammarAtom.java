begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_comment
comment|/** A GrammarAtom is either a token ref, a character ref, or string.  * The analysis doesn't care.  */
end_comment

begin_class
DECL|class|GrammarAtom
specifier|abstract
class|class
name|GrammarAtom
extends|extends
name|AlternativeElement
block|{
DECL|field|label
specifier|protected
name|String
name|label
decl_stmt|;
DECL|field|atomText
specifier|protected
name|String
name|atomText
decl_stmt|;
DECL|field|tokenType
specifier|protected
name|int
name|tokenType
init|=
name|Token
operator|.
name|INVALID_TYPE
decl_stmt|;
DECL|field|not
specifier|protected
name|boolean
name|not
init|=
literal|false
decl_stmt|;
comment|// ~T or ~'c' or ~"foo"
comment|/** Set to type of AST node to create during parse.  Defaults to what is      *  set in the TokenSymbol.      */
DECL|field|ASTNodeType
specifier|protected
name|String
name|ASTNodeType
init|=
literal|null
decl_stmt|;
DECL|method|GrammarAtom (Grammar g, Token t, int autoGenType)
specifier|public
name|GrammarAtom
parameter_list|(
name|Grammar
name|g
parameter_list|,
name|Token
name|t
parameter_list|,
name|int
name|autoGenType
parameter_list|)
block|{
name|super
argument_list|(
name|g
argument_list|,
name|t
argument_list|,
name|autoGenType
argument_list|)
expr_stmt|;
name|atomText
operator|=
name|t
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|atomText
return|;
block|}
DECL|method|getType ()
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|tokenType
return|;
block|}
DECL|method|setLabel (String label_)
specifier|public
name|void
name|setLabel
parameter_list|(
name|String
name|label_
parameter_list|)
block|{
name|label
operator|=
name|label_
expr_stmt|;
block|}
DECL|method|getASTNodeType ()
specifier|public
name|String
name|getASTNodeType
parameter_list|()
block|{
return|return
name|ASTNodeType
return|;
block|}
DECL|method|setASTNodeType (String type)
specifier|public
name|void
name|setASTNodeType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|ASTNodeType
operator|=
name|type
expr_stmt|;
block|}
DECL|method|setOption (Token option, Token value)
specifier|public
name|void
name|setOption
parameter_list|(
name|Token
name|option
parameter_list|,
name|Token
name|value
parameter_list|)
block|{
if|if
condition|(
name|option
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"AST"
argument_list|)
condition|)
block|{
name|setASTNodeType
argument_list|(
name|value
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|grammar
operator|.
name|antlrTool
operator|.
name|error
argument_list|(
literal|"Invalid element option:"
operator|+
name|option
operator|.
name|getText
argument_list|()
argument_list|,
name|grammar
operator|.
name|getFilename
argument_list|()
argument_list|,
name|option
operator|.
name|getLine
argument_list|()
argument_list|,
name|option
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|s
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
name|s
operator|+=
name|label
operator|+
literal|":"
expr_stmt|;
if|if
condition|(
name|not
condition|)
name|s
operator|+=
literal|"~"
expr_stmt|;
return|return
name|s
operator|+
name|atomText
return|;
block|}
block|}
end_class

end_unit

