begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_comment
comment|/** A TreeElement is a block with one alternative and a root node */
end_comment

begin_class
DECL|class|TreeElement
class|class
name|TreeElement
extends|extends
name|AlternativeBlock
block|{
DECL|field|root
name|GrammarAtom
name|root
decl_stmt|;
DECL|method|TreeElement (Grammar g, Token start)
specifier|public
name|TreeElement
parameter_list|(
name|Grammar
name|g
parameter_list|,
name|Token
name|start
parameter_list|)
block|{
name|super
argument_list|(
name|g
argument_list|,
name|start
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|generate ()
specifier|public
name|void
name|generate
parameter_list|()
block|{
name|grammar
operator|.
name|generator
operator|.
name|gen
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|look (int k)
specifier|public
name|Lookahead
name|look
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
name|grammar
operator|.
name|theLLkAnalyzer
operator|.
name|look
argument_list|(
name|k
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|s
init|=
literal|" #("
operator|+
name|root
decl_stmt|;
name|Alternative
name|a
init|=
operator|(
name|Alternative
operator|)
name|alternatives
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AlternativeElement
name|p
init|=
name|a
operator|.
name|head
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|s
operator|+=
name|p
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
return|return
name|s
operator|+
literal|" )"
return|;
block|}
block|}
end_class

end_unit

