begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr.debug
package|package
name|antlr
operator|.
name|debug
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|*
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|*
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_class
DECL|class|DebuggingCharScanner
specifier|public
specifier|abstract
class|class
name|DebuggingCharScanner
extends|extends
name|CharScanner
implements|implements
name|DebuggingParser
block|{
DECL|field|parserEventSupport
specifier|private
name|ParserEventSupport
name|parserEventSupport
init|=
operator|new
name|ParserEventSupport
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|_notDebugMode
specifier|private
name|boolean
name|_notDebugMode
init|=
literal|false
decl_stmt|;
DECL|field|ruleNames
specifier|protected
name|String
name|ruleNames
index|[]
decl_stmt|;
DECL|field|semPredNames
specifier|protected
name|String
name|semPredNames
index|[]
decl_stmt|;
DECL|method|DebuggingCharScanner (InputBuffer cb)
specifier|public
name|DebuggingCharScanner
parameter_list|(
name|InputBuffer
name|cb
parameter_list|)
block|{
name|super
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|DebuggingCharScanner (LexerSharedInputState state)
specifier|public
name|DebuggingCharScanner
parameter_list|(
name|LexerSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|addMessageListener (MessageListener l)
specifier|public
name|void
name|addMessageListener
parameter_list|(
name|MessageListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addMessageListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addNewLineListener (NewLineListener l)
specifier|public
name|void
name|addNewLineListener
parameter_list|(
name|NewLineListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addNewLineListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addParserListener (ParserListener l)
specifier|public
name|void
name|addParserListener
parameter_list|(
name|ParserListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addParserListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addParserMatchListener (ParserMatchListener l)
specifier|public
name|void
name|addParserMatchListener
parameter_list|(
name|ParserMatchListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addParserMatchListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addParserTokenListener (ParserTokenListener l)
specifier|public
name|void
name|addParserTokenListener
parameter_list|(
name|ParserTokenListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addParserTokenListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addSemanticPredicateListener (SemanticPredicateListener l)
specifier|public
name|void
name|addSemanticPredicateListener
parameter_list|(
name|SemanticPredicateListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addSemanticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addSyntacticPredicateListener (SyntacticPredicateListener l)
specifier|public
name|void
name|addSyntacticPredicateListener
parameter_list|(
name|SyntacticPredicateListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addSyntacticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addTraceListener (TraceListener l)
specifier|public
name|void
name|addTraceListener
parameter_list|(
name|TraceListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addTraceListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|consume ()
specifier|public
name|void
name|consume
parameter_list|()
throws|throws
name|CharStreamException
block|{
name|int
name|la_1
init|=
operator|-
literal|99
decl_stmt|;
try|try
block|{
name|la_1
operator|=
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharStreamException
name|ignoreAnIOException
parameter_list|)
block|{}
name|super
operator|.
name|consume
argument_list|()
expr_stmt|;
name|parserEventSupport
operator|.
name|fireConsume
argument_list|(
name|la_1
argument_list|)
expr_stmt|;
block|}
DECL|method|fireEnterRule (int num, int data)
specifier|protected
name|void
name|fireEnterRule
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|data
parameter_list|)
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
name|parserEventSupport
operator|.
name|fireEnterRule
argument_list|(
name|num
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|fireExitRule (int num, int ttype)
specifier|protected
name|void
name|fireExitRule
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|ttype
parameter_list|)
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
name|parserEventSupport
operator|.
name|fireExitRule
argument_list|(
name|num
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|,
name|ttype
argument_list|)
expr_stmt|;
block|}
DECL|method|fireSemanticPredicateEvaluated (int type, int num, boolean condition)
specifier|protected
name|boolean
name|fireSemanticPredicateEvaluated
parameter_list|(
name|int
name|type
parameter_list|,
name|int
name|num
parameter_list|,
name|boolean
name|condition
parameter_list|)
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
return|return
name|parserEventSupport
operator|.
name|fireSemanticPredicateEvaluated
argument_list|(
name|type
argument_list|,
name|num
argument_list|,
name|condition
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
return|;
else|else
return|return
name|condition
return|;
block|}
DECL|method|fireSyntacticPredicateFailed ()
specifier|protected
name|void
name|fireSyntacticPredicateFailed
parameter_list|()
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
name|parserEventSupport
operator|.
name|fireSyntacticPredicateFailed
argument_list|(
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
DECL|method|fireSyntacticPredicateStarted ()
specifier|protected
name|void
name|fireSyntacticPredicateStarted
parameter_list|()
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
name|parserEventSupport
operator|.
name|fireSyntacticPredicateStarted
argument_list|(
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
DECL|method|fireSyntacticPredicateSucceeded ()
specifier|protected
name|void
name|fireSyntacticPredicateSucceeded
parameter_list|()
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
name|parserEventSupport
operator|.
name|fireSyntacticPredicateSucceeded
argument_list|(
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleName (int num)
specifier|public
name|String
name|getRuleName
parameter_list|(
name|int
name|num
parameter_list|)
block|{
return|return
name|ruleNames
index|[
name|num
index|]
return|;
block|}
DECL|method|getSemPredName (int num)
specifier|public
name|String
name|getSemPredName
parameter_list|(
name|int
name|num
parameter_list|)
block|{
return|return
name|semPredNames
index|[
name|num
index|]
return|;
block|}
DECL|method|goToSleep ()
specifier|public
specifier|synchronized
name|void
name|goToSleep
parameter_list|()
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{	}
block|}
DECL|method|isDebugMode ()
specifier|public
name|boolean
name|isDebugMode
parameter_list|()
block|{
return|return
operator|!
name|_notDebugMode
return|;
block|}
DECL|method|LA (int i)
specifier|public
name|char
name|LA
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|CharStreamException
block|{
name|char
name|la
init|=
name|super
operator|.
name|LA
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|parserEventSupport
operator|.
name|fireLA
argument_list|(
name|i
argument_list|,
name|la
argument_list|)
expr_stmt|;
return|return
name|la
return|;
block|}
DECL|method|makeToken (int t)
specifier|protected
name|Token
name|makeToken
parameter_list|(
name|int
name|t
parameter_list|)
block|{
comment|// do something with char buffer???
comment|//		try {
comment|//			Token tok = (Token)tokenObjectClass.newInstance();
comment|//			tok.setType(t);
comment|//			// tok.setText(getText()); done in generated lexer now
comment|//			tok.setLine(line);
comment|//			return tok;
comment|//		}
comment|//		catch (InstantiationException ie) {
comment|//			panic("can't instantiate a Token");
comment|//		}
comment|//		catch (IllegalAccessException iae) {
comment|//			panic("Token class is not accessible");
comment|//		}
return|return
name|super
operator|.
name|makeToken
argument_list|(
name|t
argument_list|)
return|;
block|}
DECL|method|match (char c)
specifier|public
name|void
name|match
parameter_list|(
name|char
name|c
parameter_list|)
throws|throws
name|MismatchedCharException
throws|,
name|CharStreamException
block|{
name|char
name|la_1
init|=
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|super
operator|.
name|match
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|parserEventSupport
operator|.
name|fireMatch
argument_list|(
name|c
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MismatchedCharException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
name|parserEventSupport
operator|.
name|fireMismatch
argument_list|(
name|la_1
argument_list|,
name|c
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|match (BitSet b)
specifier|public
name|void
name|match
parameter_list|(
name|BitSet
name|b
parameter_list|)
throws|throws
name|MismatchedCharException
throws|,
name|CharStreamException
block|{
name|String
name|text
init|=
name|this
operator|.
name|text
operator|.
name|toString
argument_list|()
decl_stmt|;
name|char
name|la_1
init|=
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|super
operator|.
name|match
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|parserEventSupport
operator|.
name|fireMatch
argument_list|(
name|la_1
argument_list|,
name|b
argument_list|,
name|text
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MismatchedCharException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
name|parserEventSupport
operator|.
name|fireMismatch
argument_list|(
name|la_1
argument_list|,
name|b
argument_list|,
name|text
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|match (String s)
specifier|public
name|void
name|match
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|MismatchedCharException
throws|,
name|CharStreamException
block|{
name|StringBuffer
name|la_s
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// peek at the next len worth of characters
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|len
condition|;
name|i
operator|++
control|)
block|{
name|la_s
operator|.
name|append
argument_list|(
name|super
operator|.
name|LA
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignoreMe
parameter_list|)
block|{}
try|try
block|{
name|super
operator|.
name|match
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|parserEventSupport
operator|.
name|fireMatch
argument_list|(
name|s
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MismatchedCharException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
name|parserEventSupport
operator|.
name|fireMismatch
argument_list|(
name|la_s
operator|.
name|toString
argument_list|()
argument_list|,
name|s
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|matchNot (char c)
specifier|public
name|void
name|matchNot
parameter_list|(
name|char
name|c
parameter_list|)
throws|throws
name|MismatchedCharException
throws|,
name|CharStreamException
block|{
name|char
name|la_1
init|=
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|super
operator|.
name|matchNot
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|parserEventSupport
operator|.
name|fireMatchNot
argument_list|(
name|la_1
argument_list|,
name|c
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MismatchedCharException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
name|parserEventSupport
operator|.
name|fireMismatchNot
argument_list|(
name|la_1
argument_list|,
name|c
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|matchRange (char c1, char c2)
specifier|public
name|void
name|matchRange
parameter_list|(
name|char
name|c1
parameter_list|,
name|char
name|c2
parameter_list|)
throws|throws
name|MismatchedCharException
throws|,
name|CharStreamException
block|{
name|char
name|la_1
init|=
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|super
operator|.
name|matchRange
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|parserEventSupport
operator|.
name|fireMatch
argument_list|(
name|la_1
argument_list|,
literal|""
operator|+
name|c1
operator|+
name|c2
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MismatchedCharException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
name|parserEventSupport
operator|.
name|fireMismatch
argument_list|(
name|la_1
argument_list|,
literal|""
operator|+
name|c1
operator|+
name|c2
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|newline ()
specifier|public
name|void
name|newline
parameter_list|()
block|{
name|super
operator|.
name|newline
argument_list|()
expr_stmt|;
name|parserEventSupport
operator|.
name|fireNewLine
argument_list|(
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|removeMessageListener (MessageListener l)
specifier|public
name|void
name|removeMessageListener
parameter_list|(
name|MessageListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeMessageListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeNewLineListener (NewLineListener l)
specifier|public
name|void
name|removeNewLineListener
parameter_list|(
name|NewLineListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeNewLineListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeParserListener (ParserListener l)
specifier|public
name|void
name|removeParserListener
parameter_list|(
name|ParserListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeParserListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeParserMatchListener (ParserMatchListener l)
specifier|public
name|void
name|removeParserMatchListener
parameter_list|(
name|ParserMatchListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeParserMatchListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeParserTokenListener (ParserTokenListener l)
specifier|public
name|void
name|removeParserTokenListener
parameter_list|(
name|ParserTokenListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeParserTokenListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeSemanticPredicateListener (SemanticPredicateListener l)
specifier|public
name|void
name|removeSemanticPredicateListener
parameter_list|(
name|SemanticPredicateListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeSemanticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeSyntacticPredicateListener (SyntacticPredicateListener l)
specifier|public
name|void
name|removeSyntacticPredicateListener
parameter_list|(
name|SyntacticPredicateListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeSyntacticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeTraceListener (TraceListener l)
specifier|public
name|void
name|removeTraceListener
parameter_list|(
name|TraceListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeTraceListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/** Report exception errors caught in nextToken() */
DECL|method|reportError (MismatchedCharException e)
specifier|public
name|void
name|reportError
parameter_list|(
name|MismatchedCharException
name|e
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|fireReportError
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|super
operator|.
name|reportError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/** Parser error-reporting function can be overridden in subclass */
DECL|method|reportError (String s)
specifier|public
name|void
name|reportError
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|fireReportError
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|super
operator|.
name|reportError
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|/** Parser warning-reporting function can be overridden in subclass */
DECL|method|reportWarning (String s)
specifier|public
name|void
name|reportWarning
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|fireReportWarning
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|super
operator|.
name|reportWarning
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setDebugMode (boolean value)
specifier|public
name|void
name|setDebugMode
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|_notDebugMode
operator|=
operator|!
name|value
expr_stmt|;
block|}
DECL|method|setupDebugging ()
specifier|public
name|void
name|setupDebugging
parameter_list|()
block|{ 	}
DECL|method|wakeUp ()
specifier|public
specifier|synchronized
name|void
name|wakeUp
parameter_list|()
block|{
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

