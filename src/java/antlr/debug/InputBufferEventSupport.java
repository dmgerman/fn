begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr.debug
package|package
name|antlr
operator|.
name|debug
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_class
DECL|class|InputBufferEventSupport
specifier|public
class|class
name|InputBufferEventSupport
block|{
DECL|field|source
specifier|private
name|Object
name|source
decl_stmt|;
DECL|field|inputBufferListeners
specifier|private
name|Vector
name|inputBufferListeners
decl_stmt|;
DECL|field|inputBufferEvent
specifier|private
name|InputBufferEvent
name|inputBufferEvent
decl_stmt|;
DECL|field|CONSUME
specifier|protected
specifier|static
specifier|final
name|int
name|CONSUME
init|=
literal|0
decl_stmt|;
DECL|field|LA
specifier|protected
specifier|static
specifier|final
name|int
name|LA
init|=
literal|1
decl_stmt|;
DECL|field|MARK
specifier|protected
specifier|static
specifier|final
name|int
name|MARK
init|=
literal|2
decl_stmt|;
DECL|field|REWIND
specifier|protected
specifier|static
specifier|final
name|int
name|REWIND
init|=
literal|3
decl_stmt|;
DECL|method|InputBufferEventSupport (Object source)
specifier|public
name|InputBufferEventSupport
parameter_list|(
name|Object
name|source
parameter_list|)
block|{
name|inputBufferEvent
operator|=
operator|new
name|InputBufferEvent
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
DECL|method|addInputBufferListener (InputBufferListener l)
specifier|public
name|void
name|addInputBufferListener
parameter_list|(
name|InputBufferListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|inputBufferListeners
operator|==
literal|null
condition|)
name|inputBufferListeners
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|inputBufferListeners
operator|.
name|addElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|fireConsume (char c)
specifier|public
name|void
name|fireConsume
parameter_list|(
name|char
name|c
parameter_list|)
block|{
name|inputBufferEvent
operator|.
name|setValues
argument_list|(
name|InputBufferEvent
operator|.
name|CONSUME
argument_list|,
name|c
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|CONSUME
argument_list|,
name|inputBufferListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireEvent (int type, ListenerBase l)
specifier|public
name|void
name|fireEvent
parameter_list|(
name|int
name|type
parameter_list|,
name|ListenerBase
name|l
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CONSUME
case|:
operator|(
operator|(
name|InputBufferListener
operator|)
name|l
operator|)
operator|.
name|inputBufferConsume
argument_list|(
name|inputBufferEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|LA
case|:
operator|(
operator|(
name|InputBufferListener
operator|)
name|l
operator|)
operator|.
name|inputBufferLA
argument_list|(
name|inputBufferEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|MARK
case|:
operator|(
operator|(
name|InputBufferListener
operator|)
name|l
operator|)
operator|.
name|inputBufferMark
argument_list|(
name|inputBufferEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|REWIND
case|:
operator|(
operator|(
name|InputBufferListener
operator|)
name|l
operator|)
operator|.
name|inputBufferRewind
argument_list|(
name|inputBufferEvent
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad type "
operator|+
name|type
operator|+
literal|" for fireEvent()"
argument_list|)
throw|;
block|}
block|}
DECL|method|fireEvents (int type, Vector listeners)
specifier|public
name|void
name|fireEvents
parameter_list|(
name|int
name|type
parameter_list|,
name|Vector
name|listeners
parameter_list|)
block|{
name|Vector
name|targets
init|=
literal|null
decl_stmt|;
name|ListenerBase
name|l
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|listeners
operator|==
literal|null
condition|)
return|return;
name|targets
operator|=
operator|(
name|Vector
operator|)
name|listeners
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|targets
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|=
operator|(
name|ListenerBase
operator|)
name|targets
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|fireEvent
argument_list|(
name|type
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fireLA (char c, int la)
specifier|public
name|void
name|fireLA
parameter_list|(
name|char
name|c
parameter_list|,
name|int
name|la
parameter_list|)
block|{
name|inputBufferEvent
operator|.
name|setValues
argument_list|(
name|InputBufferEvent
operator|.
name|LA
argument_list|,
name|c
argument_list|,
name|la
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|LA
argument_list|,
name|inputBufferListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMark (int pos)
specifier|public
name|void
name|fireMark
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|inputBufferEvent
operator|.
name|setValues
argument_list|(
name|InputBufferEvent
operator|.
name|MARK
argument_list|,
literal|' '
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MARK
argument_list|,
name|inputBufferListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireRewind (int pos)
specifier|public
name|void
name|fireRewind
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|inputBufferEvent
operator|.
name|setValues
argument_list|(
name|InputBufferEvent
operator|.
name|REWIND
argument_list|,
literal|' '
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|REWIND
argument_list|,
name|inputBufferListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|getInputBufferListeners ()
specifier|public
name|Vector
name|getInputBufferListeners
parameter_list|()
block|{
return|return
name|inputBufferListeners
return|;
block|}
DECL|method|refresh (Vector listeners)
specifier|protected
name|void
name|refresh
parameter_list|(
name|Vector
name|listeners
parameter_list|)
block|{
name|Vector
name|v
decl_stmt|;
synchronized|synchronized
init|(
name|listeners
init|)
block|{
name|v
operator|=
operator|(
name|Vector
operator|)
name|listeners
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
operator|(
operator|(
name|ListenerBase
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
DECL|method|refreshListeners ()
specifier|public
name|void
name|refreshListeners
parameter_list|()
block|{
name|refresh
argument_list|(
name|inputBufferListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|removeInputBufferListener (InputBufferListener l)
specifier|public
name|void
name|removeInputBufferListener
parameter_list|(
name|InputBufferListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|inputBufferListeners
operator|!=
literal|null
condition|)
name|inputBufferListeners
operator|.
name|removeElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

