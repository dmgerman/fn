begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr.debug
package|package
name|antlr
operator|.
name|debug
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_comment
comment|/** A class to assist in firing parser events  *  NOTE: I intentionally _did_not_ synchronize the event firing and  *        add/remove listener methods.  This is because the add/remove should  *        _only_ be called by the parser at its start/end, and the _same_thread_  *        should be performing the parsing.  This should help performance a tad...  */
end_comment

begin_class
DECL|class|ParserEventSupport
specifier|public
class|class
name|ParserEventSupport
block|{
DECL|field|source
specifier|private
name|Object
name|source
decl_stmt|;
DECL|field|doneListeners
specifier|private
name|Hashtable
name|doneListeners
decl_stmt|;
DECL|field|matchListeners
specifier|private
name|Vector
name|matchListeners
decl_stmt|;
DECL|field|messageListeners
specifier|private
name|Vector
name|messageListeners
decl_stmt|;
DECL|field|tokenListeners
specifier|private
name|Vector
name|tokenListeners
decl_stmt|;
DECL|field|traceListeners
specifier|private
name|Vector
name|traceListeners
decl_stmt|;
DECL|field|semPredListeners
specifier|private
name|Vector
name|semPredListeners
decl_stmt|;
DECL|field|synPredListeners
specifier|private
name|Vector
name|synPredListeners
decl_stmt|;
DECL|field|newLineListeners
specifier|private
name|Vector
name|newLineListeners
decl_stmt|;
DECL|field|matchEvent
specifier|private
name|ParserMatchEvent
name|matchEvent
decl_stmt|;
DECL|field|messageEvent
specifier|private
name|MessageEvent
name|messageEvent
decl_stmt|;
DECL|field|tokenEvent
specifier|private
name|ParserTokenEvent
name|tokenEvent
decl_stmt|;
DECL|field|semPredEvent
specifier|private
name|SemanticPredicateEvent
name|semPredEvent
decl_stmt|;
DECL|field|synPredEvent
specifier|private
name|SyntacticPredicateEvent
name|synPredEvent
decl_stmt|;
DECL|field|traceEvent
specifier|private
name|TraceEvent
name|traceEvent
decl_stmt|;
DECL|field|newLineEvent
specifier|private
name|NewLineEvent
name|newLineEvent
decl_stmt|;
DECL|field|controller
specifier|private
name|ParserController
name|controller
decl_stmt|;
DECL|field|CONSUME
specifier|protected
specifier|static
specifier|final
name|int
name|CONSUME
init|=
literal|0
decl_stmt|;
DECL|field|ENTER_RULE
specifier|protected
specifier|static
specifier|final
name|int
name|ENTER_RULE
init|=
literal|1
decl_stmt|;
DECL|field|EXIT_RULE
specifier|protected
specifier|static
specifier|final
name|int
name|EXIT_RULE
init|=
literal|2
decl_stmt|;
DECL|field|LA
specifier|protected
specifier|static
specifier|final
name|int
name|LA
init|=
literal|3
decl_stmt|;
DECL|field|MATCH
specifier|protected
specifier|static
specifier|final
name|int
name|MATCH
init|=
literal|4
decl_stmt|;
DECL|field|MATCH_NOT
specifier|protected
specifier|static
specifier|final
name|int
name|MATCH_NOT
init|=
literal|5
decl_stmt|;
DECL|field|MISMATCH
specifier|protected
specifier|static
specifier|final
name|int
name|MISMATCH
init|=
literal|6
decl_stmt|;
DECL|field|MISMATCH_NOT
specifier|protected
specifier|static
specifier|final
name|int
name|MISMATCH_NOT
init|=
literal|7
decl_stmt|;
DECL|field|REPORT_ERROR
specifier|protected
specifier|static
specifier|final
name|int
name|REPORT_ERROR
init|=
literal|8
decl_stmt|;
DECL|field|REPORT_WARNING
specifier|protected
specifier|static
specifier|final
name|int
name|REPORT_WARNING
init|=
literal|9
decl_stmt|;
DECL|field|SEMPRED
specifier|protected
specifier|static
specifier|final
name|int
name|SEMPRED
init|=
literal|10
decl_stmt|;
DECL|field|SYNPRED_FAILED
specifier|protected
specifier|static
specifier|final
name|int
name|SYNPRED_FAILED
init|=
literal|11
decl_stmt|;
DECL|field|SYNPRED_STARTED
specifier|protected
specifier|static
specifier|final
name|int
name|SYNPRED_STARTED
init|=
literal|12
decl_stmt|;
DECL|field|SYNPRED_SUCCEEDED
specifier|protected
specifier|static
specifier|final
name|int
name|SYNPRED_SUCCEEDED
init|=
literal|13
decl_stmt|;
DECL|field|NEW_LINE
specifier|protected
specifier|static
specifier|final
name|int
name|NEW_LINE
init|=
literal|14
decl_stmt|;
DECL|field|DONE_PARSING
specifier|protected
specifier|static
specifier|final
name|int
name|DONE_PARSING
init|=
literal|15
decl_stmt|;
DECL|field|ruleDepth
specifier|private
name|int
name|ruleDepth
init|=
literal|0
decl_stmt|;
DECL|method|ParserEventSupport (Object source)
specifier|public
name|ParserEventSupport
parameter_list|(
name|Object
name|source
parameter_list|)
block|{
name|matchEvent
operator|=
operator|new
name|ParserMatchEvent
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|messageEvent
operator|=
operator|new
name|MessageEvent
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|tokenEvent
operator|=
operator|new
name|ParserTokenEvent
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|traceEvent
operator|=
operator|new
name|TraceEvent
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|semPredEvent
operator|=
operator|new
name|SemanticPredicateEvent
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|synPredEvent
operator|=
operator|new
name|SyntacticPredicateEvent
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|newLineEvent
operator|=
operator|new
name|NewLineEvent
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
DECL|method|addDoneListener (ListenerBase l)
specifier|public
name|void
name|addDoneListener
parameter_list|(
name|ListenerBase
name|l
parameter_list|)
block|{
if|if
condition|(
name|doneListeners
operator|==
literal|null
condition|)
name|doneListeners
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|Integer
name|i
init|=
operator|(
name|Integer
operator|)
name|doneListeners
operator|.
name|get
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|int
name|val
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
name|val
operator|=
name|i
operator|.
name|intValue
argument_list|()
operator|+
literal|1
expr_stmt|;
else|else
name|val
operator|=
literal|1
expr_stmt|;
name|doneListeners
operator|.
name|put
argument_list|(
name|l
argument_list|,
operator|new
name|Integer
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addMessageListener (MessageListener l)
specifier|public
name|void
name|addMessageListener
parameter_list|(
name|MessageListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|messageListeners
operator|==
literal|null
condition|)
name|messageListeners
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|messageListeners
operator|.
name|addElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addNewLineListener (NewLineListener l)
specifier|public
name|void
name|addNewLineListener
parameter_list|(
name|NewLineListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|newLineListeners
operator|==
literal|null
condition|)
name|newLineListeners
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|newLineListeners
operator|.
name|addElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addParserListener (ParserListener l)
specifier|public
name|void
name|addParserListener
parameter_list|(
name|ParserListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|l
operator|instanceof
name|ParserController
condition|)
block|{
operator|(
operator|(
name|ParserController
operator|)
name|l
operator|)
operator|.
name|setParserEventSupport
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|controller
operator|=
operator|(
name|ParserController
operator|)
name|l
expr_stmt|;
block|}
name|addParserMatchListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addParserTokenListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addMessageListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addTraceListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addSemanticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addSyntacticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addParserMatchListener (ParserMatchListener l)
specifier|public
name|void
name|addParserMatchListener
parameter_list|(
name|ParserMatchListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|matchListeners
operator|==
literal|null
condition|)
name|matchListeners
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|matchListeners
operator|.
name|addElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addParserTokenListener (ParserTokenListener l)
specifier|public
name|void
name|addParserTokenListener
parameter_list|(
name|ParserTokenListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|tokenListeners
operator|==
literal|null
condition|)
name|tokenListeners
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|tokenListeners
operator|.
name|addElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addSemanticPredicateListener (SemanticPredicateListener l)
specifier|public
name|void
name|addSemanticPredicateListener
parameter_list|(
name|SemanticPredicateListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|semPredListeners
operator|==
literal|null
condition|)
name|semPredListeners
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|semPredListeners
operator|.
name|addElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addSyntacticPredicateListener (SyntacticPredicateListener l)
specifier|public
name|void
name|addSyntacticPredicateListener
parameter_list|(
name|SyntacticPredicateListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|synPredListeners
operator|==
literal|null
condition|)
name|synPredListeners
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|synPredListeners
operator|.
name|addElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addTraceListener (TraceListener l)
specifier|public
name|void
name|addTraceListener
parameter_list|(
name|TraceListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|traceListeners
operator|==
literal|null
condition|)
name|traceListeners
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|traceListeners
operator|.
name|addElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|addDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|fireConsume (int value)
specifier|public
name|void
name|fireConsume
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|tokenEvent
operator|.
name|setValues
argument_list|(
name|ParserTokenEvent
operator|.
name|CONSUME
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|CONSUME
argument_list|,
name|tokenListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireDoneParsing ()
specifier|public
name|void
name|fireDoneParsing
parameter_list|()
block|{
name|traceEvent
operator|.
name|setValues
argument_list|(
name|TraceEvent
operator|.
name|DONE_PARSING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Hashtable
name|targets
init|=
literal|null
decl_stmt|;
comment|//		Hashtable targets=doneListeners;
name|ListenerBase
name|l
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|doneListeners
operator|==
literal|null
condition|)
return|return;
name|targets
operator|=
operator|(
name|Hashtable
operator|)
name|doneListeners
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|targets
operator|!=
literal|null
condition|)
block|{
name|Enumeration
name|e
init|=
name|targets
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|l
operator|=
operator|(
name|ListenerBase
operator|)
name|e
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|fireEvent
argument_list|(
name|DONE_PARSING
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|controller
operator|!=
literal|null
condition|)
name|controller
operator|.
name|checkBreak
argument_list|()
expr_stmt|;
block|}
DECL|method|fireEnterRule (int ruleNum, int guessing, int data)
specifier|public
name|void
name|fireEnterRule
parameter_list|(
name|int
name|ruleNum
parameter_list|,
name|int
name|guessing
parameter_list|,
name|int
name|data
parameter_list|)
block|{
name|ruleDepth
operator|++
expr_stmt|;
name|traceEvent
operator|.
name|setValues
argument_list|(
name|TraceEvent
operator|.
name|ENTER
argument_list|,
name|ruleNum
argument_list|,
name|guessing
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|ENTER_RULE
argument_list|,
name|traceListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireEvent (int type, ListenerBase l)
specifier|public
name|void
name|fireEvent
parameter_list|(
name|int
name|type
parameter_list|,
name|ListenerBase
name|l
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CONSUME
case|:
operator|(
operator|(
name|ParserTokenListener
operator|)
name|l
operator|)
operator|.
name|parserConsume
argument_list|(
name|tokenEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|LA
case|:
operator|(
operator|(
name|ParserTokenListener
operator|)
name|l
operator|)
operator|.
name|parserLA
argument_list|(
name|tokenEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENTER_RULE
case|:
operator|(
operator|(
name|TraceListener
operator|)
name|l
operator|)
operator|.
name|enterRule
argument_list|(
name|traceEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXIT_RULE
case|:
operator|(
operator|(
name|TraceListener
operator|)
name|l
operator|)
operator|.
name|exitRule
argument_list|(
name|traceEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|MATCH
case|:
operator|(
operator|(
name|ParserMatchListener
operator|)
name|l
operator|)
operator|.
name|parserMatch
argument_list|(
name|matchEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|MATCH_NOT
case|:
operator|(
operator|(
name|ParserMatchListener
operator|)
name|l
operator|)
operator|.
name|parserMatchNot
argument_list|(
name|matchEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|MISMATCH
case|:
operator|(
operator|(
name|ParserMatchListener
operator|)
name|l
operator|)
operator|.
name|parserMismatch
argument_list|(
name|matchEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|MISMATCH_NOT
case|:
operator|(
operator|(
name|ParserMatchListener
operator|)
name|l
operator|)
operator|.
name|parserMismatchNot
argument_list|(
name|matchEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|SEMPRED
case|:
operator|(
operator|(
name|SemanticPredicateListener
operator|)
name|l
operator|)
operator|.
name|semanticPredicateEvaluated
argument_list|(
name|semPredEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|SYNPRED_STARTED
case|:
operator|(
operator|(
name|SyntacticPredicateListener
operator|)
name|l
operator|)
operator|.
name|syntacticPredicateStarted
argument_list|(
name|synPredEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|SYNPRED_FAILED
case|:
operator|(
operator|(
name|SyntacticPredicateListener
operator|)
name|l
operator|)
operator|.
name|syntacticPredicateFailed
argument_list|(
name|synPredEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|SYNPRED_SUCCEEDED
case|:
operator|(
operator|(
name|SyntacticPredicateListener
operator|)
name|l
operator|)
operator|.
name|syntacticPredicateSucceeded
argument_list|(
name|synPredEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPORT_ERROR
case|:
operator|(
operator|(
name|MessageListener
operator|)
name|l
operator|)
operator|.
name|reportError
argument_list|(
name|messageEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPORT_WARNING
case|:
operator|(
operator|(
name|MessageListener
operator|)
name|l
operator|)
operator|.
name|reportWarning
argument_list|(
name|messageEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|DONE_PARSING
case|:
name|l
operator|.
name|doneParsing
argument_list|(
name|traceEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|NEW_LINE
case|:
operator|(
operator|(
name|NewLineListener
operator|)
name|l
operator|)
operator|.
name|hitNewLine
argument_list|(
name|newLineEvent
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad type "
operator|+
name|type
operator|+
literal|" for fireEvent()"
argument_list|)
throw|;
block|}
block|}
DECL|method|fireEvents (int type, Vector listeners)
specifier|public
name|void
name|fireEvents
parameter_list|(
name|int
name|type
parameter_list|,
name|Vector
name|listeners
parameter_list|)
block|{
name|ListenerBase
name|l
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|listeners
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|=
operator|(
name|ListenerBase
operator|)
name|listeners
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|fireEvent
argument_list|(
name|type
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|controller
operator|!=
literal|null
condition|)
name|controller
operator|.
name|checkBreak
argument_list|()
expr_stmt|;
block|}
DECL|method|fireExitRule (int ruleNum, int guessing, int data)
specifier|public
name|void
name|fireExitRule
parameter_list|(
name|int
name|ruleNum
parameter_list|,
name|int
name|guessing
parameter_list|,
name|int
name|data
parameter_list|)
block|{
name|traceEvent
operator|.
name|setValues
argument_list|(
name|TraceEvent
operator|.
name|EXIT
argument_list|,
name|ruleNum
argument_list|,
name|guessing
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|EXIT_RULE
argument_list|,
name|traceListeners
argument_list|)
expr_stmt|;
name|ruleDepth
operator|--
expr_stmt|;
if|if
condition|(
name|ruleDepth
operator|==
literal|0
condition|)
name|fireDoneParsing
argument_list|()
expr_stmt|;
block|}
DECL|method|fireLA (int k, int la)
specifier|public
name|void
name|fireLA
parameter_list|(
name|int
name|k
parameter_list|,
name|int
name|la
parameter_list|)
block|{
name|tokenEvent
operator|.
name|setValues
argument_list|(
name|ParserTokenEvent
operator|.
name|LA
argument_list|,
name|k
argument_list|,
name|la
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|LA
argument_list|,
name|tokenListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMatch (char c, int guessing)
specifier|public
name|void
name|fireMatch
parameter_list|(
name|char
name|c
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|CHAR
argument_list|,
name|c
argument_list|,
operator|new
name|Character
argument_list|(
name|c
argument_list|)
argument_list|,
literal|null
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMatch (char value, BitSet b, int guessing)
specifier|public
name|void
name|fireMatch
parameter_list|(
name|char
name|value
parameter_list|,
name|BitSet
name|b
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|CHAR_BITSET
argument_list|,
name|value
argument_list|,
name|b
argument_list|,
literal|null
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMatch (char value, String target, int guessing)
specifier|public
name|void
name|fireMatch
parameter_list|(
name|char
name|value
parameter_list|,
name|String
name|target
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|CHAR_RANGE
argument_list|,
name|value
argument_list|,
name|target
argument_list|,
literal|null
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMatch (int value, BitSet b, String text, int guessing)
specifier|public
name|void
name|fireMatch
parameter_list|(
name|int
name|value
parameter_list|,
name|BitSet
name|b
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|BITSET
argument_list|,
name|value
argument_list|,
name|b
argument_list|,
name|text
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMatch (int n, String text, int guessing)
specifier|public
name|void
name|fireMatch
parameter_list|(
name|int
name|n
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|TOKEN
argument_list|,
name|n
argument_list|,
operator|new
name|Integer
argument_list|(
name|n
argument_list|)
argument_list|,
name|text
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMatch (String s, int guessing)
specifier|public
name|void
name|fireMatch
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|STRING
argument_list|,
literal|0
argument_list|,
name|s
argument_list|,
literal|null
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMatchNot (char value, char n, int guessing)
specifier|public
name|void
name|fireMatchNot
parameter_list|(
name|char
name|value
parameter_list|,
name|char
name|n
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|CHAR
argument_list|,
name|value
argument_list|,
operator|new
name|Character
argument_list|(
name|n
argument_list|)
argument_list|,
literal|null
argument_list|,
name|guessing
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MATCH_NOT
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMatchNot (int value, int n, String text, int guessing)
specifier|public
name|void
name|fireMatchNot
parameter_list|(
name|int
name|value
parameter_list|,
name|int
name|n
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|TOKEN
argument_list|,
name|value
argument_list|,
operator|new
name|Integer
argument_list|(
name|n
argument_list|)
argument_list|,
name|text
argument_list|,
name|guessing
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MATCH_NOT
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMismatch (char value, char n, int guessing)
specifier|public
name|void
name|fireMismatch
parameter_list|(
name|char
name|value
parameter_list|,
name|char
name|n
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|CHAR
argument_list|,
name|value
argument_list|,
operator|new
name|Character
argument_list|(
name|n
argument_list|)
argument_list|,
literal|null
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MISMATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMismatch (char value, BitSet b, int guessing)
specifier|public
name|void
name|fireMismatch
parameter_list|(
name|char
name|value
parameter_list|,
name|BitSet
name|b
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|CHAR_BITSET
argument_list|,
name|value
argument_list|,
name|b
argument_list|,
literal|null
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MISMATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMismatch (char value, String target, int guessing)
specifier|public
name|void
name|fireMismatch
parameter_list|(
name|char
name|value
parameter_list|,
name|String
name|target
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|CHAR_RANGE
argument_list|,
name|value
argument_list|,
name|target
argument_list|,
literal|null
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MISMATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMismatch (int value, int n, String text, int guessing)
specifier|public
name|void
name|fireMismatch
parameter_list|(
name|int
name|value
parameter_list|,
name|int
name|n
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|TOKEN
argument_list|,
name|value
argument_list|,
operator|new
name|Integer
argument_list|(
name|n
argument_list|)
argument_list|,
name|text
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MISMATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMismatch (int value, BitSet b, String text, int guessing)
specifier|public
name|void
name|fireMismatch
parameter_list|(
name|int
name|value
parameter_list|,
name|BitSet
name|b
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|BITSET
argument_list|,
name|value
argument_list|,
name|b
argument_list|,
name|text
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MISMATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMismatch (String value, String text, int guessing)
specifier|public
name|void
name|fireMismatch
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|STRING
argument_list|,
literal|0
argument_list|,
name|text
argument_list|,
name|value
argument_list|,
name|guessing
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MISMATCH
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMismatchNot (char value, char c, int guessing)
specifier|public
name|void
name|fireMismatchNot
parameter_list|(
name|char
name|value
parameter_list|,
name|char
name|c
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|CHAR
argument_list|,
name|value
argument_list|,
operator|new
name|Character
argument_list|(
name|c
argument_list|)
argument_list|,
literal|null
argument_list|,
name|guessing
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MISMATCH_NOT
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireMismatchNot (int value, int n, String text, int guessing)
specifier|public
name|void
name|fireMismatchNot
parameter_list|(
name|int
name|value
parameter_list|,
name|int
name|n
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|matchEvent
operator|.
name|setValues
argument_list|(
name|ParserMatchEvent
operator|.
name|TOKEN
argument_list|,
name|value
argument_list|,
operator|new
name|Integer
argument_list|(
name|n
argument_list|)
argument_list|,
name|text
argument_list|,
name|guessing
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|MISMATCH_NOT
argument_list|,
name|matchListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireNewLine (int line)
specifier|public
name|void
name|fireNewLine
parameter_list|(
name|int
name|line
parameter_list|)
block|{
name|newLineEvent
operator|.
name|setValues
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|NEW_LINE
argument_list|,
name|newLineListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireReportError (Exception e)
specifier|public
name|void
name|fireReportError
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|messageEvent
operator|.
name|setValues
argument_list|(
name|MessageEvent
operator|.
name|ERROR
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|REPORT_ERROR
argument_list|,
name|messageListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireReportError (String s)
specifier|public
name|void
name|fireReportError
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|messageEvent
operator|.
name|setValues
argument_list|(
name|MessageEvent
operator|.
name|ERROR
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|REPORT_ERROR
argument_list|,
name|messageListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireReportWarning (String s)
specifier|public
name|void
name|fireReportWarning
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|messageEvent
operator|.
name|setValues
argument_list|(
name|MessageEvent
operator|.
name|WARNING
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|REPORT_WARNING
argument_list|,
name|messageListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireSemanticPredicateEvaluated (int type, int condition, boolean result, int guessing)
specifier|public
name|boolean
name|fireSemanticPredicateEvaluated
parameter_list|(
name|int
name|type
parameter_list|,
name|int
name|condition
parameter_list|,
name|boolean
name|result
parameter_list|,
name|int
name|guessing
parameter_list|)
block|{
name|semPredEvent
operator|.
name|setValues
argument_list|(
name|type
argument_list|,
name|condition
argument_list|,
name|result
argument_list|,
name|guessing
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|SEMPRED
argument_list|,
name|semPredListeners
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|fireSyntacticPredicateFailed (int guessing)
specifier|public
name|void
name|fireSyntacticPredicateFailed
parameter_list|(
name|int
name|guessing
parameter_list|)
block|{
name|synPredEvent
operator|.
name|setValues
argument_list|(
literal|0
argument_list|,
name|guessing
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|SYNPRED_FAILED
argument_list|,
name|synPredListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireSyntacticPredicateStarted (int guessing)
specifier|public
name|void
name|fireSyntacticPredicateStarted
parameter_list|(
name|int
name|guessing
parameter_list|)
block|{
name|synPredEvent
operator|.
name|setValues
argument_list|(
literal|0
argument_list|,
name|guessing
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|SYNPRED_STARTED
argument_list|,
name|synPredListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|fireSyntacticPredicateSucceeded (int guessing)
specifier|public
name|void
name|fireSyntacticPredicateSucceeded
parameter_list|(
name|int
name|guessing
parameter_list|)
block|{
name|synPredEvent
operator|.
name|setValues
argument_list|(
literal|0
argument_list|,
name|guessing
argument_list|)
expr_stmt|;
name|fireEvents
argument_list|(
name|SYNPRED_SUCCEEDED
argument_list|,
name|synPredListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|refresh (Vector listeners)
specifier|protected
name|void
name|refresh
parameter_list|(
name|Vector
name|listeners
parameter_list|)
block|{
name|Vector
name|v
decl_stmt|;
synchronized|synchronized
init|(
name|listeners
init|)
block|{
name|v
operator|=
operator|(
name|Vector
operator|)
name|listeners
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
operator|(
operator|(
name|ListenerBase
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
DECL|method|refreshListeners ()
specifier|public
name|void
name|refreshListeners
parameter_list|()
block|{
name|refresh
argument_list|(
name|matchListeners
argument_list|)
expr_stmt|;
name|refresh
argument_list|(
name|messageListeners
argument_list|)
expr_stmt|;
name|refresh
argument_list|(
name|tokenListeners
argument_list|)
expr_stmt|;
name|refresh
argument_list|(
name|traceListeners
argument_list|)
expr_stmt|;
name|refresh
argument_list|(
name|semPredListeners
argument_list|)
expr_stmt|;
name|refresh
argument_list|(
name|synPredListeners
argument_list|)
expr_stmt|;
block|}
DECL|method|removeDoneListener (ListenerBase l)
specifier|public
name|void
name|removeDoneListener
parameter_list|(
name|ListenerBase
name|l
parameter_list|)
block|{
if|if
condition|(
name|doneListeners
operator|==
literal|null
condition|)
return|return;
name|Integer
name|i
init|=
operator|(
name|Integer
operator|)
name|doneListeners
operator|.
name|get
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|int
name|val
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
name|val
operator|=
name|i
operator|.
name|intValue
argument_list|()
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|val
operator|==
literal|0
condition|)
name|doneListeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
else|else
name|doneListeners
operator|.
name|put
argument_list|(
name|l
argument_list|,
operator|new
name|Integer
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeMessageListener (MessageListener l)
specifier|public
name|void
name|removeMessageListener
parameter_list|(
name|MessageListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|messageListeners
operator|!=
literal|null
condition|)
name|messageListeners
operator|.
name|removeElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeNewLineListener (NewLineListener l)
specifier|public
name|void
name|removeNewLineListener
parameter_list|(
name|NewLineListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|newLineListeners
operator|!=
literal|null
condition|)
name|newLineListeners
operator|.
name|removeElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeParserListener (ParserListener l)
specifier|public
name|void
name|removeParserListener
parameter_list|(
name|ParserListener
name|l
parameter_list|)
block|{
name|removeParserMatchListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeMessageListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeParserTokenListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeTraceListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeSemanticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeSyntacticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeParserMatchListener (ParserMatchListener l)
specifier|public
name|void
name|removeParserMatchListener
parameter_list|(
name|ParserMatchListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|matchListeners
operator|!=
literal|null
condition|)
name|matchListeners
operator|.
name|removeElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeParserTokenListener (ParserTokenListener l)
specifier|public
name|void
name|removeParserTokenListener
parameter_list|(
name|ParserTokenListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|tokenListeners
operator|!=
literal|null
condition|)
name|tokenListeners
operator|.
name|removeElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeSemanticPredicateListener (SemanticPredicateListener l)
specifier|public
name|void
name|removeSemanticPredicateListener
parameter_list|(
name|SemanticPredicateListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|semPredListeners
operator|!=
literal|null
condition|)
name|semPredListeners
operator|.
name|removeElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeSyntacticPredicateListener (SyntacticPredicateListener l)
specifier|public
name|void
name|removeSyntacticPredicateListener
parameter_list|(
name|SyntacticPredicateListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|synPredListeners
operator|!=
literal|null
condition|)
name|synPredListeners
operator|.
name|removeElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeTraceListener (TraceListener l)
specifier|public
name|void
name|removeTraceListener
parameter_list|(
name|TraceListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|traceListeners
operator|!=
literal|null
condition|)
name|traceListeners
operator|.
name|removeElement
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|removeDoneListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

