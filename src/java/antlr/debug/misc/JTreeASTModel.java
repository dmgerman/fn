begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr.debug.misc
package|package
name|antlr
operator|.
name|debug
operator|.
name|misc
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|*
import|;
end_import

begin_class
DECL|class|JTreeASTModel
specifier|public
class|class
name|JTreeASTModel
implements|implements
name|TreeModel
block|{
DECL|field|root
name|AST
name|root
init|=
literal|null
decl_stmt|;
DECL|method|JTreeASTModel (AST t)
specifier|public
name|JTreeASTModel
parameter_list|(
name|AST
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"root is null"
argument_list|)
throw|;
block|}
name|root
operator|=
name|t
expr_stmt|;
block|}
DECL|method|addTreeModelListener (TreeModelListener l)
specifier|public
name|void
name|addTreeModelListener
parameter_list|(
name|TreeModelListener
name|l
parameter_list|)
block|{     }
DECL|method|getChild (Object parent, int index)
specifier|public
name|Object
name|getChild
parameter_list|(
name|Object
name|parent
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|AST
name|p
init|=
operator|(
name|AST
operator|)
name|parent
decl_stmt|;
name|AST
name|c
init|=
name|p
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"node has no children"
argument_list|)
throw|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
operator|&&
name|i
operator|<
name|index
condition|)
block|{
name|c
operator|=
name|c
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
DECL|method|getChildCount (Object parent)
specifier|public
name|int
name|getChildCount
parameter_list|(
name|Object
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"root is null"
argument_list|)
throw|;
block|}
name|AST
name|p
init|=
operator|(
name|AST
operator|)
name|parent
decl_stmt|;
name|AST
name|c
init|=
name|p
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|c
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
DECL|method|getIndexOfChild (Object parent, Object child)
specifier|public
name|int
name|getIndexOfChild
parameter_list|(
name|Object
name|parent
parameter_list|,
name|Object
name|child
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
operator|||
name|child
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"root or child is null"
argument_list|)
throw|;
block|}
name|AST
name|p
init|=
operator|(
name|AST
operator|)
name|parent
decl_stmt|;
name|AST
name|c
init|=
name|p
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"node has no children"
argument_list|)
throw|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|!=
name|child
condition|)
block|{
name|c
operator|=
name|c
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
name|child
condition|)
block|{
return|return
name|i
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
argument_list|(
literal|"node is not a child"
argument_list|)
throw|;
block|}
DECL|method|getRoot ()
specifier|public
name|Object
name|getRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
DECL|method|isLeaf (Object node)
specifier|public
name|boolean
name|isLeaf
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"node is null"
argument_list|)
throw|;
block|}
name|AST
name|t
init|=
operator|(
name|AST
operator|)
name|node
decl_stmt|;
return|return
name|t
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
return|;
block|}
DECL|method|removeTreeModelListener (TreeModelListener l)
specifier|public
name|void
name|removeTreeModelListener
parameter_list|(
name|TreeModelListener
name|l
parameter_list|)
block|{     }
DECL|method|valueForPathChanged (TreePath path, Object newValue)
specifier|public
name|void
name|valueForPathChanged
parameter_list|(
name|TreePath
name|path
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"heh, who is calling this mystery method?"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

