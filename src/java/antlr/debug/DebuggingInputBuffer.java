begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr.debug
package|package
name|antlr
operator|.
name|debug
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|InputBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharStreamException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|DebuggingInputBuffer
specifier|public
class|class
name|DebuggingInputBuffer
extends|extends
name|InputBuffer
block|{
DECL|field|buffer
specifier|private
name|InputBuffer
name|buffer
decl_stmt|;
DECL|field|inputBufferEventSupport
specifier|private
name|InputBufferEventSupport
name|inputBufferEventSupport
decl_stmt|;
DECL|field|debugMode
specifier|private
name|boolean
name|debugMode
init|=
literal|true
decl_stmt|;
DECL|method|DebuggingInputBuffer (InputBuffer buffer)
specifier|public
name|DebuggingInputBuffer
parameter_list|(
name|InputBuffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|inputBufferEventSupport
operator|=
operator|new
name|InputBufferEventSupport
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|addInputBufferListener (InputBufferListener l)
specifier|public
name|void
name|addInputBufferListener
parameter_list|(
name|InputBufferListener
name|l
parameter_list|)
block|{
name|inputBufferEventSupport
operator|.
name|addInputBufferListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|consume ()
specifier|public
name|void
name|consume
parameter_list|()
block|{
name|char
name|la
init|=
literal|' '
decl_stmt|;
try|try
block|{
name|la
operator|=
name|buffer
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharStreamException
name|e
parameter_list|)
block|{}
comment|// vaporize it...
name|buffer
operator|.
name|consume
argument_list|()
expr_stmt|;
if|if
condition|(
name|debugMode
condition|)
name|inputBufferEventSupport
operator|.
name|fireConsume
argument_list|(
name|la
argument_list|)
expr_stmt|;
block|}
DECL|method|fill (int a)
specifier|public
name|void
name|fill
parameter_list|(
name|int
name|a
parameter_list|)
throws|throws
name|CharStreamException
block|{
name|buffer
operator|.
name|fill
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
DECL|method|getInputBufferListeners ()
specifier|public
name|Vector
name|getInputBufferListeners
parameter_list|()
block|{
return|return
name|inputBufferEventSupport
operator|.
name|getInputBufferListeners
argument_list|()
return|;
block|}
DECL|method|isDebugMode ()
specifier|public
name|boolean
name|isDebugMode
parameter_list|()
block|{
return|return
name|debugMode
return|;
block|}
DECL|method|isMarked ()
specifier|public
name|boolean
name|isMarked
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|isMarked
argument_list|()
return|;
block|}
DECL|method|LA (int i)
specifier|public
name|char
name|LA
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|CharStreamException
block|{
name|char
name|la
init|=
name|buffer
operator|.
name|LA
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|debugMode
condition|)
name|inputBufferEventSupport
operator|.
name|fireLA
argument_list|(
name|la
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|la
return|;
block|}
DECL|method|mark ()
specifier|public
name|int
name|mark
parameter_list|()
block|{
name|int
name|m
init|=
name|buffer
operator|.
name|mark
argument_list|()
decl_stmt|;
name|inputBufferEventSupport
operator|.
name|fireMark
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
DECL|method|removeInputBufferListener (InputBufferListener l)
specifier|public
name|void
name|removeInputBufferListener
parameter_list|(
name|InputBufferListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|inputBufferEventSupport
operator|!=
literal|null
condition|)
name|inputBufferEventSupport
operator|.
name|removeInputBufferListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|rewind (int mark)
specifier|public
name|void
name|rewind
parameter_list|(
name|int
name|mark
parameter_list|)
block|{
name|buffer
operator|.
name|rewind
argument_list|(
name|mark
argument_list|)
expr_stmt|;
name|inputBufferEventSupport
operator|.
name|fireRewind
argument_list|(
name|mark
argument_list|)
expr_stmt|;
block|}
DECL|method|setDebugMode (boolean value)
specifier|public
name|void
name|setDebugMode
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|debugMode
operator|=
name|value
expr_stmt|;
block|}
block|}
end_class

end_unit

