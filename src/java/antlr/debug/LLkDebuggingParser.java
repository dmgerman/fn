begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr.debug
package|package
name|antlr
operator|.
name|debug
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|ParserSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LLkParser
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedTokenException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|debug
operator|.
name|ParserEventSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_class
DECL|class|LLkDebuggingParser
specifier|public
class|class
name|LLkDebuggingParser
extends|extends
name|LLkParser
implements|implements
name|DebuggingParser
block|{
DECL|field|parserEventSupport
specifier|protected
name|ParserEventSupport
name|parserEventSupport
init|=
operator|new
name|ParserEventSupport
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|_notDebugMode
specifier|private
name|boolean
name|_notDebugMode
init|=
literal|false
decl_stmt|;
DECL|field|ruleNames
specifier|protected
name|String
name|ruleNames
index|[]
decl_stmt|;
DECL|field|semPredNames
specifier|protected
name|String
name|semPredNames
index|[]
decl_stmt|;
DECL|method|LLkDebuggingParser (int k_)
specifier|public
name|LLkDebuggingParser
parameter_list|(
name|int
name|k_
parameter_list|)
block|{
name|super
argument_list|(
name|k_
argument_list|)
expr_stmt|;
block|}
DECL|method|LLkDebuggingParser (ParserSharedInputState state, int k_)
specifier|public
name|LLkDebuggingParser
parameter_list|(
name|ParserSharedInputState
name|state
parameter_list|,
name|int
name|k_
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|,
name|k_
argument_list|)
expr_stmt|;
block|}
DECL|method|LLkDebuggingParser (TokenBuffer tokenBuf, int k_)
specifier|public
name|LLkDebuggingParser
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|,
name|int
name|k_
parameter_list|)
block|{
name|super
argument_list|(
name|tokenBuf
argument_list|,
name|k_
argument_list|)
expr_stmt|;
block|}
DECL|method|LLkDebuggingParser (TokenStream lexer, int k_)
specifier|public
name|LLkDebuggingParser
parameter_list|(
name|TokenStream
name|lexer
parameter_list|,
name|int
name|k_
parameter_list|)
block|{
name|super
argument_list|(
name|lexer
argument_list|,
name|k_
argument_list|)
expr_stmt|;
block|}
DECL|method|addMessageListener (MessageListener l)
specifier|public
name|void
name|addMessageListener
parameter_list|(
name|MessageListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addMessageListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addParserListener (ParserListener l)
specifier|public
name|void
name|addParserListener
parameter_list|(
name|ParserListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addParserListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addParserMatchListener (ParserMatchListener l)
specifier|public
name|void
name|addParserMatchListener
parameter_list|(
name|ParserMatchListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addParserMatchListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addParserTokenListener (ParserTokenListener l)
specifier|public
name|void
name|addParserTokenListener
parameter_list|(
name|ParserTokenListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addParserTokenListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addSemanticPredicateListener (SemanticPredicateListener l)
specifier|public
name|void
name|addSemanticPredicateListener
parameter_list|(
name|SemanticPredicateListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addSemanticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addSyntacticPredicateListener (SyntacticPredicateListener l)
specifier|public
name|void
name|addSyntacticPredicateListener
parameter_list|(
name|SyntacticPredicateListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addSyntacticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|addTraceListener (TraceListener l)
specifier|public
name|void
name|addTraceListener
parameter_list|(
name|TraceListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|addTraceListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**Get another token object from the token stream */
DECL|method|consume ()
specifier|public
name|void
name|consume
parameter_list|()
block|{
name|int
name|la_1
init|=
operator|-
literal|99
decl_stmt|;
try|try
block|{
name|la_1
operator|=
name|LA
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TokenStreamException
name|ignoreAnException
parameter_list|)
block|{}
name|super
operator|.
name|consume
argument_list|()
expr_stmt|;
name|parserEventSupport
operator|.
name|fireConsume
argument_list|(
name|la_1
argument_list|)
expr_stmt|;
block|}
DECL|method|fireEnterRule (int num,int data)
specifier|protected
name|void
name|fireEnterRule
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|data
parameter_list|)
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
name|parserEventSupport
operator|.
name|fireEnterRule
argument_list|(
name|num
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|fireExitRule (int num,int data)
specifier|protected
name|void
name|fireExitRule
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|data
parameter_list|)
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
name|parserEventSupport
operator|.
name|fireExitRule
argument_list|(
name|num
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|fireSemanticPredicateEvaluated (int type, int num, boolean condition)
specifier|protected
name|boolean
name|fireSemanticPredicateEvaluated
parameter_list|(
name|int
name|type
parameter_list|,
name|int
name|num
parameter_list|,
name|boolean
name|condition
parameter_list|)
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
return|return
name|parserEventSupport
operator|.
name|fireSemanticPredicateEvaluated
argument_list|(
name|type
argument_list|,
name|num
argument_list|,
name|condition
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
return|;
else|else
return|return
name|condition
return|;
block|}
DECL|method|fireSyntacticPredicateFailed ()
specifier|protected
name|void
name|fireSyntacticPredicateFailed
parameter_list|()
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
name|parserEventSupport
operator|.
name|fireSyntacticPredicateFailed
argument_list|(
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
DECL|method|fireSyntacticPredicateStarted ()
specifier|protected
name|void
name|fireSyntacticPredicateStarted
parameter_list|()
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
name|parserEventSupport
operator|.
name|fireSyntacticPredicateStarted
argument_list|(
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
DECL|method|fireSyntacticPredicateSucceeded ()
specifier|protected
name|void
name|fireSyntacticPredicateSucceeded
parameter_list|()
block|{
if|if
condition|(
name|isDebugMode
argument_list|()
condition|)
name|parserEventSupport
operator|.
name|fireSyntacticPredicateSucceeded
argument_list|(
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
DECL|method|getRuleName (int num)
specifier|public
name|String
name|getRuleName
parameter_list|(
name|int
name|num
parameter_list|)
block|{
return|return
name|ruleNames
index|[
name|num
index|]
return|;
block|}
DECL|method|getSemPredName (int num)
specifier|public
name|String
name|getSemPredName
parameter_list|(
name|int
name|num
parameter_list|)
block|{
return|return
name|semPredNames
index|[
name|num
index|]
return|;
block|}
DECL|method|goToSleep ()
specifier|public
specifier|synchronized
name|void
name|goToSleep
parameter_list|()
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{	}
block|}
DECL|method|isDebugMode ()
specifier|public
name|boolean
name|isDebugMode
parameter_list|()
block|{
return|return
operator|!
name|_notDebugMode
return|;
block|}
DECL|method|isGuessing ()
specifier|public
name|boolean
name|isGuessing
parameter_list|()
block|{
return|return
name|inputState
operator|.
name|guessing
operator|>
literal|0
return|;
block|}
comment|/** Return the token type of the ith token of lookahead where i=1 	 * is the current token being examined by the parser (i.e., it 	 * has not been matched yet). 	 */
DECL|method|LA (int i)
specifier|public
name|int
name|LA
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|TokenStreamException
block|{
name|int
name|la
init|=
name|super
operator|.
name|LA
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|parserEventSupport
operator|.
name|fireLA
argument_list|(
name|i
argument_list|,
name|la
argument_list|)
expr_stmt|;
return|return
name|la
return|;
block|}
comment|/**Make sure current lookahead symbol matches token type<tt>t</tt>. 	 * Throw an exception upon mismatch, which is catch by either the 	 * error handler or by the syntactic predicate. 	 */
DECL|method|match (int t)
specifier|public
name|void
name|match
parameter_list|(
name|int
name|t
parameter_list|)
throws|throws
name|MismatchedTokenException
throws|,
name|TokenStreamException
block|{
name|String
name|text
init|=
name|LT
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|int
name|la_1
init|=
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|super
operator|.
name|match
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|parserEventSupport
operator|.
name|fireMatch
argument_list|(
name|t
argument_list|,
name|text
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MismatchedTokenException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
name|parserEventSupport
operator|.
name|fireMismatch
argument_list|(
name|la_1
argument_list|,
name|t
argument_list|,
name|text
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**Make sure current lookahead symbol matches the given set 	 * Throw an exception upon mismatch, which is catch by either the 	 * error handler or by the syntactic predicate. 	 */
DECL|method|match (BitSet b)
specifier|public
name|void
name|match
parameter_list|(
name|BitSet
name|b
parameter_list|)
throws|throws
name|MismatchedTokenException
throws|,
name|TokenStreamException
block|{
name|String
name|text
init|=
name|LT
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|int
name|la_1
init|=
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|super
operator|.
name|match
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|parserEventSupport
operator|.
name|fireMatch
argument_list|(
name|la_1
argument_list|,
name|b
argument_list|,
name|text
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MismatchedTokenException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
name|parserEventSupport
operator|.
name|fireMismatch
argument_list|(
name|la_1
argument_list|,
name|b
argument_list|,
name|text
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|matchNot (int t)
specifier|public
name|void
name|matchNot
parameter_list|(
name|int
name|t
parameter_list|)
throws|throws
name|MismatchedTokenException
throws|,
name|TokenStreamException
block|{
name|String
name|text
init|=
name|LT
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|int
name|la_1
init|=
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|super
operator|.
name|matchNot
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|parserEventSupport
operator|.
name|fireMatchNot
argument_list|(
name|la_1
argument_list|,
name|t
argument_list|,
name|text
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MismatchedTokenException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
name|parserEventSupport
operator|.
name|fireMismatchNot
argument_list|(
name|la_1
argument_list|,
name|t
argument_list|,
name|text
argument_list|,
name|inputState
operator|.
name|guessing
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|removeMessageListener (MessageListener l)
specifier|public
name|void
name|removeMessageListener
parameter_list|(
name|MessageListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeMessageListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeParserListener (ParserListener l)
specifier|public
name|void
name|removeParserListener
parameter_list|(
name|ParserListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeParserListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeParserMatchListener (ParserMatchListener l)
specifier|public
name|void
name|removeParserMatchListener
parameter_list|(
name|ParserMatchListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeParserMatchListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeParserTokenListener (ParserTokenListener l)
specifier|public
name|void
name|removeParserTokenListener
parameter_list|(
name|ParserTokenListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeParserTokenListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeSemanticPredicateListener (SemanticPredicateListener l)
specifier|public
name|void
name|removeSemanticPredicateListener
parameter_list|(
name|SemanticPredicateListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeSemanticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeSyntacticPredicateListener (SyntacticPredicateListener l)
specifier|public
name|void
name|removeSyntacticPredicateListener
parameter_list|(
name|SyntacticPredicateListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeSyntacticPredicateListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|removeTraceListener (TraceListener l)
specifier|public
name|void
name|removeTraceListener
parameter_list|(
name|TraceListener
name|l
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|removeTraceListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/** Parser error-reporting function can be overridden in subclass */
DECL|method|reportError (RecognitionException ex)
specifier|public
name|void
name|reportError
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|fireReportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|super
operator|.
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
comment|/** Parser error-reporting function can be overridden in subclass */
DECL|method|reportError (String s)
specifier|public
name|void
name|reportError
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|fireReportError
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|super
operator|.
name|reportError
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|/** Parser warning-reporting function can be overridden in subclass */
DECL|method|reportWarning (String s)
specifier|public
name|void
name|reportWarning
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|parserEventSupport
operator|.
name|fireReportWarning
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|super
operator|.
name|reportWarning
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setDebugMode (boolean value)
specifier|public
name|void
name|setDebugMode
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|_notDebugMode
operator|=
operator|!
name|value
expr_stmt|;
block|}
DECL|method|setupDebugging (TokenBuffer tokenBuf)
specifier|public
name|void
name|setupDebugging
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|)
block|{
name|setupDebugging
argument_list|(
literal|null
argument_list|,
name|tokenBuf
argument_list|)
expr_stmt|;
block|}
DECL|method|setupDebugging (TokenStream lexer)
specifier|public
name|void
name|setupDebugging
parameter_list|(
name|TokenStream
name|lexer
parameter_list|)
block|{
name|setupDebugging
argument_list|(
name|lexer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** User can override to do their own debugging */
DECL|method|setupDebugging (TokenStream lexer, TokenBuffer tokenBuf)
specifier|protected
name|void
name|setupDebugging
parameter_list|(
name|TokenStream
name|lexer
parameter_list|,
name|TokenBuffer
name|tokenBuf
parameter_list|)
block|{
name|setDebugMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// default parser debug setup is ParseView
try|try
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"javax.swing.JButton"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Swing is required to use ParseView, but is not present in your CLASSPATH"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Class
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"antlr.parseview.ParseView"
argument_list|)
decl_stmt|;
name|Constructor
name|constructor
init|=
name|c
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|LLkDebuggingParser
operator|.
name|class
block|,
name|TokenStream
operator|.
name|class
block|,
name|TokenBuffer
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|constructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|this
block|,
name|lexer
block|,
name|tokenBuf
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error initializing ParseView: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please report this to Scott Stanchfield, thetick@magelang.com"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|wakeUp ()
specifier|public
specifier|synchronized
name|void
name|wakeUp
parameter_list|()
block|{
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

