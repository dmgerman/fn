begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  * @author Ric Klaren<klaren@cs.utwente.nl>  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/** PreservingFileWriter only overwrites target if the new file is different.  Mainly added in order to prevent big and unnecessary recompiles in C++  projects.  I/O is buffered. */
end_comment

begin_class
DECL|class|PreservingFileWriter
specifier|public
class|class
name|PreservingFileWriter
extends|extends
name|FileWriter
block|{
DECL|field|target_file
specifier|protected
name|File
name|target_file
decl_stmt|;
comment|/// the file we intend to write to
DECL|field|tmp_file
specifier|protected
name|File
name|tmp_file
decl_stmt|;
comment|/// the tmp file we create at first
DECL|method|PreservingFileWriter (String file)
specifier|public
name|PreservingFileWriter
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|file
operator|+
literal|".antlr.tmp"
argument_list|)
expr_stmt|;
comment|// set up File thingy for target..
name|target_file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|String
name|parentdirname
init|=
name|target_file
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentdirname
operator|!=
literal|null
condition|)
block|{
name|File
name|parentdir
init|=
operator|new
name|File
argument_list|(
name|parentdirname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parentdir
operator|.
name|exists
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"destination directory of '"
operator|+
name|file
operator|+
literal|"' doesn't exist"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|parentdir
operator|.
name|canWrite
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"destination directory of '"
operator|+
name|file
operator|+
literal|"' isn't writeable"
argument_list|)
throw|;
block|}
if|if
condition|(
name|target_file
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|target_file
operator|.
name|canWrite
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot write to '"
operator|+
name|file
operator|+
literal|"'"
argument_list|)
throw|;
comment|// and for the temp file
name|tmp_file
operator|=
operator|new
name|File
argument_list|(
name|file
operator|+
literal|".antlr.tmp"
argument_list|)
expr_stmt|;
comment|// have it nuked at exit
comment|// RK: this is broken on java 1.4 and
comment|// is not compatible with java 1.1 (which is a big problem I'm told :) )
comment|// sigh. Any real language would do this in a destructor ;) ;)
comment|// tmp_file.deleteOnExit();
block|}
comment|/** Close the file and see if the actual target is different 	 * if so the target file is overwritten by the copy. If not we do nothing 	 */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Reader
name|source
init|=
literal|null
decl_stmt|;
name|Writer
name|target
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// close the tmp file so we can access it safely...
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|cnt
decl_stmt|;
comment|// target_file != tmp_file so we have to compare and move it..
if|if
condition|(
name|target_file
operator|.
name|length
argument_list|()
operator|==
name|tmp_file
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// Do expensive read'n'compare
name|Reader
name|tmp
decl_stmt|;
name|char
index|[]
name|buf2
init|=
operator|new
name|char
index|[
literal|1024
index|]
decl_stmt|;
name|source
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|tmp_file
argument_list|)
argument_list|)
expr_stmt|;
name|tmp
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|target_file
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|cnt1
decl_stmt|,
name|cnt2
decl_stmt|;
name|boolean
name|equal
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|equal
condition|)
block|{
name|cnt1
operator|=
name|source
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|cnt2
operator|=
name|tmp
operator|.
name|read
argument_list|(
name|buf2
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
if|if
condition|(
name|cnt1
operator|!=
name|cnt2
condition|)
block|{
name|equal
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|cnt1
operator|==
operator|-
literal|1
condition|)
comment|// EOF
break|break;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|!=
name|buf2
index|[
name|i
index|]
condition|)
block|{
name|equal
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// clean up...
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
name|tmp
operator|.
name|close
argument_list|()
expr_stmt|;
name|source
operator|=
name|tmp
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|equal
condition|)
return|return;
block|}
name|source
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|tmp_file
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|target_file
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|cnt
operator|=
name|source
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
if|if
condition|(
name|cnt
operator|==
operator|-
literal|1
condition|)
break|break;
name|target
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
empty_stmt|;
block|}
block|}
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|target
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
empty_stmt|;
block|}
block|}
comment|// RK: Now if I'm correct this should be called anytime.
if|if
condition|(
name|tmp_file
operator|!=
literal|null
operator|&&
name|tmp_file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|tmp_file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tmp_file
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

