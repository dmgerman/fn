begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_comment
comment|/** ASTPair:  utility class used for manipulating a pair of ASTs  * representing the current AST root and current AST sibling.  * This exists to compensate for the lack of pointers or 'var'  * arguments in Java.  */
end_comment

begin_class
DECL|class|ASTPair
specifier|public
class|class
name|ASTPair
block|{
DECL|field|root
specifier|public
name|AST
name|root
decl_stmt|;
comment|// current root of tree
DECL|field|child
specifier|public
name|AST
name|child
decl_stmt|;
comment|// current child to which siblings are added
comment|/** Make sure that child is the last sibling */
DECL|method|advanceChildToEnd ()
specifier|public
specifier|final
name|void
name|advanceChildToEnd
parameter_list|()
block|{
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|child
operator|.
name|getNextSibling
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Copy an ASTPair.  Don't call it clone() because we want type-safety */
DECL|method|copy ()
specifier|public
name|ASTPair
name|copy
parameter_list|()
block|{
name|ASTPair
name|tmp
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|tmp
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|tmp
operator|.
name|child
operator|=
name|child
expr_stmt|;
return|return
name|tmp
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|r
init|=
name|root
operator|==
literal|null
condition|?
literal|"null"
else|:
name|root
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|c
init|=
name|child
operator|==
literal|null
condition|?
literal|"null"
else|:
name|child
operator|.
name|getText
argument_list|()
decl_stmt|;
return|return
literal|"["
operator|+
name|r
operator|+
literal|","
operator|+
name|c
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

