begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_class
DECL|class|StringUtils
specifier|public
class|class
name|StringUtils
block|{
comment|/** General-purpose utility function for removing      * characters from back of string      * @param s The string to process      * @param c The character to remove      * @return The resulting string      */
DECL|method|stripBack (String s, char c)
specifier|static
specifier|public
name|String
name|stripBack
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|c
parameter_list|)
block|{
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|s
operator|.
name|charAt
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|c
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/** General-purpose utility function for removing      * characters from back of string      * @param s The string to process      * @param remove A string containing the set of characters to remove      * @return The resulting string      */
DECL|method|stripBack (String s, String remove)
specifier|static
specifier|public
name|String
name|stripBack
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|remove
parameter_list|)
block|{
name|boolean
name|changed
decl_stmt|;
do|do
block|{
name|changed
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remove
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|remove
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|s
operator|.
name|charAt
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|c
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|changed
condition|)
do|;
return|return
name|s
return|;
block|}
comment|/** General-purpose utility function for removing      * characters from front of string      * @param s The string to process      * @param c The character to remove      * @return The resulting string      */
DECL|method|stripFront (String s, char c)
specifier|static
specifier|public
name|String
name|stripFront
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|c
parameter_list|)
block|{
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|c
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/** General-purpose utility function for removing      * characters from front of string      * @param s The string to process      * @param remove A string containing the set of characters to remove      * @return The resulting string      */
DECL|method|stripFront (String s, String remove)
specifier|static
specifier|public
name|String
name|stripFront
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|remove
parameter_list|)
block|{
name|boolean
name|changed
decl_stmt|;
do|do
block|{
name|changed
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remove
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|remove
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|c
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|changed
condition|)
do|;
return|return
name|s
return|;
block|}
comment|/** General-purpose utility function for removing      * characters from the front and back of string      * @param s The string to process      * @param head exact string to strip from head      * @param tail exact string to strip from tail      * @return The resulting string      */
DECL|method|stripFrontBack (String src, String head, String tail)
specifier|public
specifier|static
name|String
name|stripFrontBack
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|head
parameter_list|,
name|String
name|tail
parameter_list|)
block|{
name|int
name|h
init|=
name|src
operator|.
name|indexOf
argument_list|(
name|head
argument_list|)
decl_stmt|;
name|int
name|t
init|=
name|src
operator|.
name|lastIndexOf
argument_list|(
name|tail
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|==
operator|-
literal|1
operator|||
name|t
operator|==
operator|-
literal|1
condition|)
return|return
name|src
return|;
return|return
name|src
operator|.
name|substring
argument_list|(
name|h
operator|+
literal|1
argument_list|,
name|t
argument_list|)
return|;
block|}
block|}
end_class

end_unit

