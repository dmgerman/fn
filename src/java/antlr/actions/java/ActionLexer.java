begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR : "action.g" -> "ActionLexer.java"$
end_comment

begin_package
DECL|package|antlr.actions.java
package|package
name|antlr
operator|.
name|actions
operator|.
name|java
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamRecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharScanner
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|InputBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CommonToken
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltForCharException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedCharException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRHashString
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LexerSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|*
import|;
end_import

begin_comment
comment|/** Perform the following translations:   AST related translations     ##          -> currentRule_AST    #(x,y,z)    -> codeGenerator.getASTCreateString(vector-of(x,y,z))    #[x]        -> codeGenerator.getASTCreateString(x)    #x          -> codeGenerator.mapTreeId(x)     Inside context of #(...), you can ref (x,y,z), [x], and x as shortcuts.   Text related translations     $append(x)     -> text.append(x)    $setText(x)    -> text.setLength(_begin); text.append(x)    $getText       -> new String(text.getBuffer(),_begin,text.length()-_begin)    $setToken(x)   -> _token = x    $setType(x)    -> _ttype = x    $FOLLOW(r)     -> FOLLOW set name for rule r (optional arg)    $FIRST(r)      -> FIRST set name for rule r (optional arg)  */
end_comment

begin_class
DECL|class|ActionLexer
specifier|public
class|class
name|ActionLexer
extends|extends
name|antlr
operator|.
name|CharScanner
implements|implements
name|ActionLexerTokenTypes
implements|,
name|TokenStream
block|{
DECL|field|currentRule
specifier|protected
name|RuleBlock
name|currentRule
decl_stmt|;
DECL|field|generator
specifier|protected
name|CodeGenerator
name|generator
decl_stmt|;
DECL|field|lineOffset
specifier|protected
name|int
name|lineOffset
init|=
literal|0
decl_stmt|;
DECL|field|antlrTool
specifier|private
name|Tool
name|antlrTool
decl_stmt|;
comment|// The ANTLR tool
DECL|field|transInfo
name|ActionTransInfo
name|transInfo
decl_stmt|;
DECL|method|ActionLexer ( String s, RuleBlock currentRule, CodeGenerator generator, ActionTransInfo transInfo)
specifier|public
name|ActionLexer
parameter_list|(
name|String
name|s
parameter_list|,
name|RuleBlock
name|currentRule
parameter_list|,
name|CodeGenerator
name|generator
parameter_list|,
name|ActionTransInfo
name|transInfo
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentRule
operator|=
name|currentRule
expr_stmt|;
name|this
operator|.
name|generator
operator|=
name|generator
expr_stmt|;
name|this
operator|.
name|transInfo
operator|=
name|transInfo
expr_stmt|;
block|}
DECL|method|setLineOffset (int lineOffset)
specifier|public
name|void
name|setLineOffset
parameter_list|(
name|int
name|lineOffset
parameter_list|)
block|{
comment|// this.lineOffset = lineOffset;
name|setLine
argument_list|(
name|lineOffset
argument_list|)
expr_stmt|;
block|}
DECL|method|setTool (Tool tool)
specifier|public
name|void
name|setTool
parameter_list|(
name|Tool
name|tool
parameter_list|)
block|{
name|this
operator|.
name|antlrTool
operator|=
name|tool
expr_stmt|;
block|}
DECL|method|reportError (RecognitionException e)
specifier|public
name|void
name|reportError
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
name|antlrTool
operator|.
name|error
argument_list|(
literal|"Syntax error in action: "
operator|+
name|e
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|reportError (String s)
specifier|public
name|void
name|reportError
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|antlrTool
operator|.
name|error
argument_list|(
name|s
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|reportWarning (String s)
specifier|public
name|void
name|reportWarning
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|getFilename
argument_list|()
operator|==
literal|null
condition|)
block|{
name|antlrTool
operator|.
name|warning
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|antlrTool
operator|.
name|warning
argument_list|(
name|s
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ActionLexer (InputStream in)
specifier|public
name|ActionLexer
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ByteBuffer
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ActionLexer (Reader in)
specifier|public
name|ActionLexer
parameter_list|(
name|Reader
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|CharBuffer
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ActionLexer (InputBuffer ib)
specifier|public
name|ActionLexer
parameter_list|(
name|InputBuffer
name|ib
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|LexerSharedInputState
argument_list|(
name|ib
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ActionLexer (LexerSharedInputState state)
specifier|public
name|ActionLexer
parameter_list|(
name|LexerSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|caseSensitiveLiterals
operator|=
literal|true
expr_stmt|;
name|setCaseSensitive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|literals
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
block|}
DECL|method|nextToken ()
specifier|public
name|Token
name|nextToken
parameter_list|()
throws|throws
name|TokenStreamException
block|{
name|Token
name|theRetToken
init|=
literal|null
decl_stmt|;
name|tryAgain
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_ttype
init|=
name|Token
operator|.
name|INVALID_TYPE
decl_stmt|;
name|resetText
argument_list|()
expr_stmt|;
try|try
block|{
comment|// for char stream error handling
try|try
block|{
comment|// for lexical error handling
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|mACTION
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|EOF_CHAR
condition|)
block|{
name|uponEOF
argument_list|()
expr_stmt|;
name|_returnToken
operator|=
name|makeToken
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|_returnToken
operator|==
literal|null
condition|)
continue|continue
name|tryAgain
continue|;
comment|// found SKIP token
name|_ttype
operator|=
name|_returnToken
operator|.
name|getType
argument_list|()
expr_stmt|;
name|_returnToken
operator|.
name|setType
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
return|return
name|_returnToken
return|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStreamRecognitionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CharStreamException
name|cse
parameter_list|)
block|{
if|if
condition|(
name|cse
operator|instanceof
name|CharStreamIOException
condition|)
block|{
throw|throw
operator|new
name|TokenStreamIOException
argument_list|(
operator|(
operator|(
name|CharStreamIOException
operator|)
name|cse
operator|)
operator|.
name|io
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|TokenStreamException
argument_list|(
name|cse
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|mACTION (boolean _createToken)
specifier|public
specifier|final
name|void
name|mACTION
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ACTION
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt382
init|=
literal|0
decl_stmt|;
name|_loop382
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'#'
case|:
block|{
name|mAST_ITEM
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'$'
case|:
block|{
name|mTEXT_ITEM
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mSTUFF
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt382
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop382
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt382
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mSTUFF (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mSTUFF
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|STUFF
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'"'
case|:
block|{
name|mSTRING
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\''
case|:
block|{
name|mCHAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\n'
case|:
block|{
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'*'
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'/'
operator|)
condition|)
block|{
name|mCOMMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'\n'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|{
name|match
argument_list|(
name|_tokenSet_1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mAST_ITEM (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mAST_ITEM
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|AST_ITEM
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|Token
name|id
init|=
literal|null
decl_stmt|;
name|Token
name|ctor
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'#'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'('
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mTREE
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'#'
operator|)
operator|&&
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mID
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|id
operator|=
name|_returnToken
expr_stmt|;
name|String
name|idt
init|=
name|id
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|var
init|=
name|generator
operator|.
name|mapTreeId
argument_list|(
name|idt
argument_list|,
name|transInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{ 			}
block|}
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'='
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mVAR_ASSIGN
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{ 			}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'#'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'['
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mAST_CONSTRUCTOR
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ctor
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'#'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'#'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"##"
argument_list|)
expr_stmt|;
name|String
name|r
init|=
name|currentRule
operator|.
name|getRuleName
argument_list|()
operator|+
literal|"_AST"
decl_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|transInfo
operator|!=
literal|null
condition|)
block|{
name|transInfo
operator|.
name|refRuleRoot
operator|=
name|r
expr_stmt|;
comment|// we ref root of tree
block|}
block|{
if|if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{ 			}
block|}
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'='
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mVAR_ASSIGN
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{ 			}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mTEXT_ITEM (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mTEXT_ITEM
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|TEXT_ITEM
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|Token
name|a1
init|=
literal|null
decl_stmt|;
name|Token
name|a2
init|=
literal|null
decl_stmt|;
name|Token
name|a3
init|=
literal|null
decl_stmt|;
name|Token
name|a4
init|=
literal|null
decl_stmt|;
name|Token
name|a5
init|=
literal|null
decl_stmt|;
name|Token
name|a6
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'F'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
literal|'O'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"$FOLLOW"
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_5
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'('
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|mTEXT_ARG
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a5
operator|=
name|_returnToken
expr_stmt|;
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
else|else
block|{ 			}
block|}
name|String
name|rule
init|=
name|currentRule
operator|.
name|getRuleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|a5
operator|!=
literal|null
condition|)
block|{
name|rule
operator|=
name|a5
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
name|String
name|setName
init|=
name|generator
operator|.
name|getFOLLOWBitSet
argument_list|(
name|rule
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// System.out.println("FOLLOW("+rule+")="+setName);
if|if
condition|(
name|setName
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
literal|"$FOLLOW("
operator|+
name|rule
operator|+
literal|")"
operator|+
literal|": unknown rule or bad lookahead computation"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|setName
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'F'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
literal|'I'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"$FIRST"
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_5
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'('
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|mTEXT_ARG
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a6
operator|=
name|_returnToken
expr_stmt|;
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
else|else
block|{ 			}
block|}
name|String
name|rule
init|=
name|currentRule
operator|.
name|getRuleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|a6
operator|!=
literal|null
condition|)
block|{
name|rule
operator|=
name|a6
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
name|String
name|setName
init|=
name|generator
operator|.
name|getFIRSTBitSet
argument_list|(
name|rule
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// System.out.println("FIRST("+rule+")="+setName);
if|if
condition|(
name|setName
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
literal|"$FIRST("
operator|+
name|rule
operator|+
literal|")"
operator|+
literal|": unknown rule or bad lookahead computation"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|setName
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'a'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"$append"
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'('
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|mTEXT_ARG
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a1
operator|=
name|_returnToken
expr_stmt|;
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|String
name|t
init|=
literal|"text.append("
operator|+
name|a1
operator|.
name|getText
argument_list|()
operator|+
literal|")"
decl_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'s'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"$set"
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'e'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"Text"
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'('
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|mTEXT_ARG
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a2
operator|=
name|_returnToken
expr_stmt|;
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|String
name|t
decl_stmt|;
name|t
operator|=
literal|"text.setLength(_begin); text.append("
operator|+
name|a2
operator|.
name|getText
argument_list|()
operator|+
literal|")"
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'o'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"Token"
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'('
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|mTEXT_ARG
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a3
operator|=
name|_returnToken
expr_stmt|;
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|String
name|t
init|=
literal|"_token = "
operator|+
name|a3
operator|.
name|getText
argument_list|()
decl_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'y'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"Type"
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'('
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|mTEXT_ARG
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a4
operator|=
name|_returnToken
expr_stmt|;
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|String
name|t
init|=
literal|"_ttype = "
operator|+
name|a4
operator|.
name|getText
argument_list|()
decl_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'g'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"$getText"
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"new String(text.getBuffer(),_begin,text.length()-_begin)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mCOMMENT (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mCOMMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|COMMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'/'
operator|)
condition|)
block|{
name|mSL_COMMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'*'
operator|)
condition|)
block|{
name|mML_COMMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mSTRING (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mSTRING
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|STRING
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|{
name|_loop478
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|mESC
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_7
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|matchNot
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop478
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mCHAR (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mCHAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|CHAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|mESC
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_8
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|matchNot
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mTREE (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mTREE
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|TREE
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|Token
name|t2
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|Vector
name|terms
init|=
operator|new
name|Vector
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
case|case
literal|'#'
case|:
case|case
literal|'('
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'['
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mTREE_ELEMENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|t
operator|=
name|_returnToken
expr_stmt|;
name|terms
operator|.
name|appendElement
argument_list|(
name|t
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|')'
case|:
case|case
literal|','
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|_loop407
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|','
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
case|case
literal|'#'
case|:
case|case
literal|'('
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'['
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mTREE_ELEMENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|t2
operator|=
name|_returnToken
expr_stmt|;
name|terms
operator|.
name|appendElement
argument_list|(
name|t2
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|')'
case|:
case|case
literal|','
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
break|break
name|_loop407
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|generator
operator|.
name|getASTCreateString
argument_list|(
name|terms
argument_list|)
argument_list|)
expr_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mID (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mID
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ID
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|matchRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
block|{
name|matchRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'_'
case|:
block|{
name|match
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|_loop464
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_9
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|matchRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
block|{
name|matchRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'_'
case|:
block|{
name|match
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
break|break
name|_loop464
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mWS (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mWS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|WS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt498
init|=
literal|0
decl_stmt|;
name|_loop498
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'\n'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|' '
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|match
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\t'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt498
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop498
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt498
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mVAR_ASSIGN (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mVAR_ASSIGN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|VAR_ASSIGN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
comment|// inform the code generator that an assignment was done to
comment|// AST root for the rule if invoker set refRuleRoot.
if|if
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|!=
literal|'='
operator|&&
name|transInfo
operator|!=
literal|null
operator|&&
name|transInfo
operator|.
name|refRuleRoot
operator|!=
literal|null
condition|)
block|{
name|transInfo
operator|.
name|assignToRoot
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mAST_CONSTRUCTOR (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mAST_CONSTRUCTOR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|AST_CONSTRUCTOR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|Token
name|x
init|=
literal|null
decl_stmt|;
name|Token
name|y
init|=
literal|null
decl_stmt|;
name|Token
name|z
init|=
literal|null
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
case|case
literal|'#'
case|:
case|case
literal|'('
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'['
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mAST_CTOR_ELEMENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|x
operator|=
name|_returnToken
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|','
case|:
case|case
literal|']'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|','
operator|)
operator|&&
operator|(
name|_tokenSet_10
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
case|case
literal|'#'
case|:
case|case
literal|'('
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'['
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mAST_CTOR_ELEMENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|y
operator|=
name|_returnToken
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|','
case|:
case|case
literal|']'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|','
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|']'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 		}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|','
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
case|case
literal|'#'
case|:
case|case
literal|'('
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'['
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mAST_CTOR_ELEMENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|z
operator|=
name|_returnToken
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|']'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
literal|']'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|String
name|args
init|=
name|x
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|y
operator|!=
literal|null
condition|)
block|{
name|args
operator|+=
literal|","
operator|+
name|y
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|z
operator|!=
literal|null
condition|)
block|{
name|args
operator|+=
literal|","
operator|+
name|z
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|generator
operator|.
name|getASTCreateString
argument_list|(
literal|null
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mTEXT_ARG (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mTEXT_ARG
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|TEXT_ARG
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
case|case
literal|'$'
case|:
case|case
literal|'\''
case|:
case|case
literal|'+'
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|int
name|_cnt438
init|=
literal|0
decl_stmt|;
name|_loop438
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_11
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mTEXT_ARG_ELEMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_12
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_12
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 				}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|_cnt438
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop438
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt438
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mTREE_ELEMENT (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mTREE_ELEMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|TREE_ELEMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|Token
name|id
init|=
literal|null
decl_stmt|;
name|boolean
name|was_mapped
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'('
case|:
block|{
name|mTREE
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'['
case|:
block|{
name|mAST_CONSTRUCTOR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|mID_ELEMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
block|{
name|mSTRING
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'#'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'('
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mTREE
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'#'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'['
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mAST_CONSTRUCTOR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'#'
operator|)
operator|&&
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|was_mapped
operator|=
name|mID_ELEMENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|id
operator|=
name|_returnToken
expr_stmt|;
comment|// RK: I have a queer feeling that this maptreeid is redundant
if|if
condition|(
operator|!
name|was_mapped
condition|)
block|{
name|String
name|t
init|=
name|generator
operator|.
name|mapTreeId
argument_list|(
name|id
operator|.
name|getText
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'#'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'#'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"##"
argument_list|)
expr_stmt|;
name|String
name|t
init|=
name|currentRule
operator|.
name|getRuleName
argument_list|()
operator|+
literal|"_AST"
decl_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
comment|/** An ID_ELEMENT can be a func call, array ref, simple var,  *  or AST label ref.  */
DECL|method|mID_ELEMENT (boolean _createToken)
specifier|protected
specifier|final
name|boolean
name|mID_ELEMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|boolean
name|mapped
init|=
literal|false
decl_stmt|;
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ID_ELEMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|Token
name|id
init|=
literal|null
decl_stmt|;
name|mID
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|id
operator|=
name|_returnToken
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_13
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_13
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 		}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'('
case|:
block|{
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_14
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_14
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 			}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'"'
case|:
case|case
literal|'#'
case|:
case|case
literal|'\''
case|:
case|case
literal|'('
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'['
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|mARG
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
name|_loop426
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|','
operator|)
condition|)
block|{
name|match
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
case|case
literal|'#'
case|:
case|case
literal|'\''
case|:
case|case
literal|'('
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'['
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|mARG
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop426
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
case|case
literal|')'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|')'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'['
case|:
block|{
block|{
name|int
name|_cnt431
init|=
literal|0
decl_stmt|;
name|_loop431
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'['
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
case|case
literal|'#'
case|:
case|case
literal|'\''
case|:
case|case
literal|'('
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'['
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|mARG
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|']'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt431
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop431
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt431
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
literal|'.'
case|:
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|mID_ELEMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
case|case
literal|')'
case|:
case|case
literal|'*'
case|:
case|case
literal|'+'
case|:
case|case
literal|','
case|:
case|case
literal|'-'
case|:
case|case
literal|'/'
case|:
case|case
literal|'='
case|:
case|case
literal|']'
case|:
block|{
name|mapped
operator|=
literal|true
expr_stmt|;
name|String
name|t
init|=
name|generator
operator|.
name|mapTreeId
argument_list|(
name|id
operator|.
name|getText
argument_list|()
argument_list|,
name|transInfo
argument_list|)
decl_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
operator|(
name|_tokenSet_15
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_16
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
name|transInfo
operator|!=
literal|null
operator|&&
name|transInfo
operator|.
name|refRuleRoot
operator|!=
literal|null
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'='
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|mVAR_ASSIGN
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_17
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 			}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
return|return
name|mapped
return|;
block|}
comment|/** The arguments of a #[...] constructor are text, token type,  *  or a tree.  */
DECL|method|mAST_CTOR_ELEMENT (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mAST_CTOR_ELEMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|AST_CTOR_ELEMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'"'
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|mSTRING
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_18
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mTREE_ELEMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mINT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mINT (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mINT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|INT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt489
init|=
literal|0
decl_stmt|;
name|_loop489
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt489
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop489
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt489
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mARG (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mARG
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ARG
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\''
case|:
block|{
name|mCHAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|mINT_OR_FLOAT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|_tokenSet_18
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|mTREE_ELEMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'"'
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|mSTRING
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|_loop459
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_19
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_20
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'*'
case|:
case|case
literal|'+'
case|:
case|case
literal|'-'
case|:
case|case
literal|'/'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'+'
case|:
block|{
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'*'
case|:
block|{
name|match
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'/'
case|:
block|{
name|match
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
case|case
literal|'#'
case|:
case|case
literal|'\''
case|:
case|case
literal|'('
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'['
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|mARG
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop459
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mTEXT_ARG_ELEMENT (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mTEXT_ARG_ELEMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|TEXT_ARG_ELEMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|mTEXT_ARG_ID_ELEMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
block|{
name|mSTRING
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\''
case|:
block|{
name|mCHAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|mINT_OR_FLOAT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'$'
case|:
block|{
name|mTEXT_ITEM
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'+'
case|:
block|{
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mTEXT_ARG_ID_ELEMENT (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mTEXT_ARG_ID_ELEMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|TEXT_ARG_ID_ELEMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|Token
name|id
init|=
literal|null
decl_stmt|;
name|mID
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|id
operator|=
name|_returnToken
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_21
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_21
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 		}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'('
case|:
block|{
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_22
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_22
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 			}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
name|_loop447
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_23
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|mTEXT_ARG
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
name|_loop446
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|','
operator|)
condition|)
block|{
name|match
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|mTEXT_ARG
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop446
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
else|else
block|{
break|break
name|_loop447
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|')'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'['
case|:
block|{
block|{
name|int
name|_cnt452
init|=
literal|0
decl_stmt|;
name|_loop452
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'['
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_23
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_23
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{ 					}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|mTEXT_ARG
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|']'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt452
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop452
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt452
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
literal|'.'
case|:
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|mTEXT_ARG_ID_ELEMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
case|case
literal|'"'
case|:
case|case
literal|'$'
case|:
case|case
literal|'\''
case|:
case|case
literal|')'
case|:
case|case
literal|'+'
case|:
case|case
literal|','
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|']'
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mINT_OR_FLOAT (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mINT_OR_FLOAT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|INT_OR_FLOAT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt492
init|=
literal|0
decl_stmt|;
name|_loop492
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
operator|&&
operator|(
name|_tokenSet_24
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt492
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop492
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt492
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'L'
operator|)
operator|&&
operator|(
name|_tokenSet_25
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'L'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'l'
operator|)
operator|&&
operator|(
name|_tokenSet_25
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'l'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|{
name|_loop495
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
operator|&&
operator|(
name|_tokenSet_25
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop495
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_25
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 		}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mSL_COMMENT (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mSL_COMMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|SL_COMMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"//"
argument_list|)
expr_stmt|;
block|{
name|_loop469
label|:
do|do
block|{
comment|// nongreedy exit test
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\n'
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
break|break
name|_loop469
break|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|matchNot
argument_list|(
name|EOF_CHAR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop469
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'\n'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|newline
argument_list|()
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mML_COMMENT (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mML_COMMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ML_COMMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
block|{
name|_loop473
label|:
do|do
block|{
comment|// nongreedy exit test
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'*'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
break|break
name|_loop473
break|;
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'\n'
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
condition|)
block|{
name|matchNot
argument_list|(
name|EOF_CHAR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop473
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
literal|"*/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mESC (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mESC
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ESC
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'n'
case|:
block|{
name|match
argument_list|(
literal|'n'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'r'
case|:
block|{
name|match
argument_list|(
literal|'r'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'t'
case|:
block|{
name|match
argument_list|(
literal|'t'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'b'
case|:
block|{
name|match
argument_list|(
literal|'b'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'f'
case|:
block|{
name|match
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
block|{
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\''
case|:
block|{
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\\'
case|:
block|{
name|match
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
block|{
block|{
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'3'
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 				}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 			}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
break|break;
block|}
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
block|{
block|{
name|matchRange
argument_list|(
literal|'4'
argument_list|,
literal|'7'
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\u00ff'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 			}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mDIGIT (boolean _createToken)
specifier|protected
specifier|final
name|void
name|mDIGIT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DIGIT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
DECL|method|mk_tokenSet_0 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|103079215112L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_0
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_1 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|145135534866440L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_1
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_2 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_2
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|141407503262728L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_2
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_2
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_2
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_3 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_3
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|0L
block|,
literal|576460745995190270L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_3
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_3
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_3
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_4 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_4
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4294977024L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_4
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_4
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_4
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_5 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_5
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|1103806604800L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_5
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_5
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_5
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_6 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_6
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|287959436729787904L
block|,
literal|576460745995190270L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_6
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_6
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_6
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_7 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_7
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|17179869192L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|268435457L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_7
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_7
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_7
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_8 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_8
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|549755813896L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|268435457L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_8
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_8
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_8
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_9 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_9
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|287948901175001088L
block|,
literal|576460745995190270L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_9
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_9
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_9
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_10 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_10
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|287950056521213440L
block|,
literal|576460746129407998L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_10
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_10
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_10
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_11 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_11
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|287958332923183104L
block|,
literal|576460745995190270L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_11
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_11
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_11
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_12 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_12
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|287978128427460096L
block|,
literal|576460746532061182L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_12
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_12
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_12
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_13 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_13
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2306123388973753856L
block|,
literal|671088640L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_13
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_13
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_13
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_14 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_14
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|287952805300282880L
block|,
literal|576460746129407998L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_14
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_14
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_14
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_15 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_15
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2305843013508670976L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_15
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_15
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_15
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_16 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_16
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2306051920717948416L
block|,
literal|536870912L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_16
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_16
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_16
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_17 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_17
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|208911504254464L
block|,
literal|536870912L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_17
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_17
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_17
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_18 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_18
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|1151051235328L
block|,
literal|576460746129407998L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_18
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_18
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_18
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_19 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_19
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|189120294954496L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_19
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_19
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_19
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_20 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_20
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|288139722277004800L
block|,
literal|576460746129407998L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_20
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_20
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_20
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_21 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_21
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|288049596683265536L
block|,
literal|576460746666278910L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_21
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_21
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_21
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_22 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_22
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|287960536241415680L
block|,
literal|576460745995190270L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_22
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_22
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_22
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_23 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_23
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|287958337218160128L
block|,
literal|576460745995190270L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_23
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_23
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_23
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_24 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_24
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|288228817078593024L
block|,
literal|576460746532061182L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_24
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_24
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_24
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_25 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_25
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|288158448334415360L
block|,
literal|576460746532061182L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_25
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_25
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_25
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

