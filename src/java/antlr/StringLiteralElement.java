begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/RIGHTS.html  *  * $Id$  */
end_comment

begin_class
DECL|class|StringLiteralElement
class|class
name|StringLiteralElement
extends|extends
name|GrammarAtom
block|{
comment|// atomText with quotes stripped and escape codes processed
DECL|field|processedAtomText
specifier|protected
name|String
name|processedAtomText
decl_stmt|;
DECL|method|StringLiteralElement (Grammar g, Token t, int autoGenType)
specifier|public
name|StringLiteralElement
parameter_list|(
name|Grammar
name|g
parameter_list|,
name|Token
name|t
parameter_list|,
name|int
name|autoGenType
parameter_list|)
block|{
name|super
argument_list|(
name|g
argument_list|,
name|t
argument_list|,
name|autoGenType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|g
operator|instanceof
name|LexerGrammar
operator|)
condition|)
block|{
comment|// lexer does not have token types for string literals
name|TokenSymbol
name|ts
init|=
name|grammar
operator|.
name|tokenManager
operator|.
name|getTokenSymbol
argument_list|(
name|atomText
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
block|{
name|g
operator|.
name|tool
operator|.
name|error
argument_list|(
literal|"Undefined literal: "
operator|+
name|atomText
argument_list|,
name|grammar
operator|.
name|getFilename
argument_list|()
argument_list|,
name|t
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenType
operator|=
name|ts
operator|.
name|getTokenType
argument_list|()
expr_stmt|;
block|}
block|}
name|line
operator|=
name|t
operator|.
name|getLine
argument_list|()
expr_stmt|;
comment|// process the string literal text by removing quotes and escaping chars
comment|// If a lexical grammar, add the characters to the char vocabulary
name|processedAtomText
operator|=
operator|new
name|String
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|atomText
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|atomText
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|atomText
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|c
operator|=
name|atomText
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'n'
case|:
name|c
operator|=
literal|'\n'
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|c
operator|=
literal|'\r'
expr_stmt|;
break|break;
case|case
literal|'t'
case|:
name|c
operator|=
literal|'\t'
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|g
operator|instanceof
name|LexerGrammar
condition|)
block|{
operator|(
operator|(
name|LexerGrammar
operator|)
name|g
operator|)
operator|.
name|charVocabulary
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|processedAtomText
operator|+=
name|c
expr_stmt|;
block|}
block|}
DECL|method|generate ()
specifier|public
name|void
name|generate
parameter_list|()
block|{
name|grammar
operator|.
name|generator
operator|.
name|gen
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|look (int k)
specifier|public
name|Lookahead
name|look
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
name|grammar
operator|.
name|theLLkAnalyzer
operator|.
name|look
argument_list|(
name|k
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

