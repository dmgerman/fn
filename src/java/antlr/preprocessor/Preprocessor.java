begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR : "preproc.g" -> "Preprocessor.java"$
end_comment

begin_package
DECL|package|antlr.preprocessor
package|package
name|antlr
operator|.
name|preprocessor
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|TokenBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LLkParser
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedTokenException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ParserSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|IndexedVector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|preprocessor
operator|.
name|Grammar
import|;
end_import

begin_class
DECL|class|Preprocessor
specifier|public
class|class
name|Preprocessor
extends|extends
name|antlr
operator|.
name|LLkParser
implements|implements
name|PreprocessorTokenTypes
block|{
comment|// This chunk of error reporting code provided by Brian Smith
DECL|field|antlrTool
specifier|private
name|antlr
operator|.
name|Tool
name|antlrTool
decl_stmt|;
comment|/** In order to make it so existing subclasses don't break, we won't require      * that the antlr.Tool instance be passed as a constructor element. Instead,      * the antlr.Tool instance should register itself via {@link #initTool(antlr.Tool)}      * @throws IllegalStateException if a tool has already been registered      * @since 2.7.2      */
DECL|method|setTool (antlr.Tool tool)
specifier|public
name|void
name|setTool
parameter_list|(
name|antlr
operator|.
name|Tool
name|tool
parameter_list|)
block|{
if|if
condition|(
name|antlrTool
operator|==
literal|null
condition|)
block|{
name|antlrTool
operator|=
name|tool
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"antlr.Tool already registered"
argument_list|)
throw|;
block|}
block|}
comment|/** @since 2.7.2 */
DECL|method|getTool ()
specifier|protected
name|antlr
operator|.
name|Tool
name|getTool
parameter_list|()
block|{
return|return
name|antlrTool
return|;
block|}
comment|/** Delegates the error message to the tool if any was registered via      *  {@link #initTool(antlr.Tool)}      *  @since 2.7.2      */
DECL|method|reportError (String s)
specifier|public
name|void
name|reportError
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|getTool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getTool
argument_list|()
operator|.
name|error
argument_list|(
name|s
argument_list|,
name|getFilename
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|reportError
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Delegates the error message to the tool if any was registered via      *  {@link #initTool(antlr.Tool)}      *  @since 2.7.2      */
DECL|method|reportError (RecognitionException e)
specifier|public
name|void
name|reportError
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|getTool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getTool
argument_list|()
operator|.
name|error
argument_list|(
name|e
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getFilename
argument_list|()
argument_list|,
name|e
operator|.
name|getLine
argument_list|()
argument_list|,
name|e
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|reportError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Delegates the warning message to the tool if any was registered via      *  {@link #initTool(antlr.Tool)}      *  @since 2.7.2      */
DECL|method|reportWarning (String s)
specifier|public
name|void
name|reportWarning
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|getTool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getTool
argument_list|()
operator|.
name|warning
argument_list|(
name|s
argument_list|,
name|getFilename
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|reportWarning
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|Preprocessor (TokenBuffer tokenBuf, int k)
specifier|protected
name|Preprocessor
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|tokenBuf
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
block|}
DECL|method|Preprocessor (TokenBuffer tokenBuf)
specifier|public
name|Preprocessor
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|)
block|{
name|this
argument_list|(
name|tokenBuf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|Preprocessor (TokenStream lexer, int k)
specifier|protected
name|Preprocessor
parameter_list|(
name|TokenStream
name|lexer
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|lexer
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
block|}
DECL|method|Preprocessor (TokenStream lexer)
specifier|public
name|Preprocessor
parameter_list|(
name|TokenStream
name|lexer
parameter_list|)
block|{
name|this
argument_list|(
name|lexer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|Preprocessor (ParserSharedInputState state)
specifier|public
name|Preprocessor
parameter_list|(
name|ParserSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
block|}
DECL|method|grammarFile ( Hierarchy hier, String file )
specifier|public
specifier|final
name|void
name|grammarFile
parameter_list|(
name|Hierarchy
name|hier
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|hdr
init|=
literal|null
decl_stmt|;
name|Grammar
name|gr
decl_stmt|;
name|IndexedVector
name|opt
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|_loop265
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|HEADER_ACTION
operator|)
condition|)
block|{
name|hdr
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|HEADER_ACTION
argument_list|)
expr_stmt|;
name|hier
operator|.
name|getFile
argument_list|(
name|file
argument_list|)
operator|.
name|addHeaderAction
argument_list|(
name|hdr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop265
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|OPTIONS_START
case|:
block|{
name|opt
operator|=
name|optionSpec
argument_list|(
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|ACTION
case|:
case|case
name|LITERAL_class
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|_loop268
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|ACTION
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_class
operator|)
condition|)
block|{
name|gr
operator|=
name|class_def
argument_list|(
name|file
argument_list|,
name|hier
argument_list|)
expr_stmt|;
if|if
condition|(
name|gr
operator|!=
literal|null
operator|&&
name|opt
operator|!=
literal|null
condition|)
block|{
name|hier
operator|.
name|getFile
argument_list|(
name|file
argument_list|)
operator|.
name|setOptions
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|setFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|hier
operator|.
name|addGrammar
argument_list|(
name|gr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop268
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|optionSpec ( Grammar gr )
specifier|public
specifier|final
name|IndexedVector
name|optionSpec
parameter_list|(
name|Grammar
name|gr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|IndexedVector
name|options
decl_stmt|;
name|Token
name|op
init|=
literal|null
decl_stmt|;
name|Token
name|rhs
init|=
literal|null
decl_stmt|;
name|options
operator|=
operator|new
name|IndexedVector
argument_list|()
expr_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|OPTIONS_START
argument_list|)
expr_stmt|;
block|{
name|_loop280
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|ID
operator|)
condition|)
block|{
name|op
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ASSIGN_RHS
argument_list|)
expr_stmt|;
name|Option
name|newOp
init|=
operator|new
name|Option
argument_list|(
name|op
operator|.
name|getText
argument_list|()
argument_list|,
name|rhs
operator|.
name|getText
argument_list|()
argument_list|,
name|gr
argument_list|)
decl_stmt|;
name|options
operator|.
name|appendElement
argument_list|(
name|newOp
operator|.
name|getName
argument_list|()
argument_list|,
name|newOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|gr
operator|!=
literal|null
operator|&&
name|op
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"importVocab"
argument_list|)
condition|)
block|{
name|gr
operator|.
name|specifiedVocabulary
operator|=
literal|true
expr_stmt|;
name|gr
operator|.
name|importVocab
operator|=
name|rhs
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gr
operator|!=
literal|null
operator|&&
name|op
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"exportVocab"
argument_list|)
condition|)
block|{
comment|// don't want ';' included in outputVocab.
comment|// This is heinously inconsistent!  Ugh.
name|gr
operator|.
name|exportVocab
operator|=
name|rhs
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rhs
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|gr
operator|.
name|exportVocab
operator|=
name|gr
operator|.
name|exportVocab
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop280
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_1
argument_list|)
expr_stmt|;
block|}
return|return
name|options
return|;
block|}
DECL|method|class_def ( String file, Hierarchy hier )
specifier|public
specifier|final
name|Grammar
name|class_def
parameter_list|(
name|String
name|file
parameter_list|,
name|Hierarchy
name|hier
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Grammar
name|gr
decl_stmt|;
name|Token
name|preamble
init|=
literal|null
decl_stmt|;
name|Token
name|sub
init|=
literal|null
decl_stmt|;
name|Token
name|sup
init|=
literal|null
decl_stmt|;
name|Token
name|tk
init|=
literal|null
decl_stmt|;
name|Token
name|memberA
init|=
literal|null
decl_stmt|;
name|gr
operator|=
literal|null
expr_stmt|;
name|IndexedVector
name|rules
init|=
operator|new
name|IndexedVector
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|IndexedVector
name|classOptions
init|=
literal|null
decl_stmt|;
name|String
name|sc
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ACTION
case|:
block|{
name|preamble
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_class
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LITERAL_class
argument_list|)
expr_stmt|;
name|sub
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_extends
argument_list|)
expr_stmt|;
name|sup
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SUBRULE_BLOCK
case|:
block|{
name|sc
operator|=
name|superClass
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
name|gr
operator|=
operator|(
name|Grammar
operator|)
name|hier
operator|.
name|getGrammar
argument_list|(
name|sub
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
comment|//				antlr.Tool.toolError("redefinition of grammar "+gr.getName()+" ignored");
name|gr
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"redefinition of grammar "
operator|+
name|sub
operator|.
name|getText
argument_list|()
argument_list|,
name|file
argument_list|,
name|sub
operator|.
name|getLine
argument_list|()
argument_list|,
name|sub
operator|.
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|gr
operator|=
operator|new
name|Grammar
argument_list|(
name|hier
operator|.
name|getTool
argument_list|()
argument_list|,
name|sub
operator|.
name|getText
argument_list|()
argument_list|,
name|sup
operator|.
name|getText
argument_list|()
argument_list|,
name|rules
argument_list|)
expr_stmt|;
name|gr
operator|.
name|superClass
operator|=
name|sc
expr_stmt|;
if|if
condition|(
name|preamble
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|setPreambleAction
argument_list|(
name|preamble
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|OPTIONS_START
case|:
block|{
name|classOptions
operator|=
name|optionSpec
argument_list|(
name|gr
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|ID
case|:
case|case
name|TOKENS_SPEC
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_private
case|:
case|case
name|LITERAL_public
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|setOptions
argument_list|(
name|classOptions
argument_list|)
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TOKENS_SPEC
case|:
block|{
name|tk
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TOKENS_SPEC
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setTokenSection
argument_list|(
name|tk
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|ID
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_private
case|:
case|case
name|LITERAL_public
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ACTION
case|:
block|{
name|memberA
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setMemberAction
argument_list|(
name|memberA
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ID
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_private
case|:
case|case
name|LITERAL_public
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|int
name|_cnt277
init|=
literal|0
decl_stmt|;
name|_loop277
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|rule
argument_list|(
name|gr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt277
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop277
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt277
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_3
argument_list|)
expr_stmt|;
block|}
return|return
name|gr
return|;
block|}
DECL|method|superClass ()
specifier|public
specifier|final
name|String
name|superClass
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|sup
decl_stmt|;
name|sup
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|SUBRULE_BLOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_4
argument_list|)
expr_stmt|;
block|}
return|return
name|sup
return|;
block|}
DECL|method|rule ( Grammar gr )
specifier|public
specifier|final
name|void
name|rule
parameter_list|(
name|Grammar
name|gr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|r
init|=
literal|null
decl_stmt|;
name|Token
name|arg
init|=
literal|null
decl_stmt|;
name|Token
name|ret
init|=
literal|null
decl_stmt|;
name|Token
name|init
init|=
literal|null
decl_stmt|;
name|Token
name|blk
init|=
literal|null
decl_stmt|;
name|IndexedVector
name|o
init|=
literal|null
decl_stmt|;
comment|// options for rule
name|String
name|vis
init|=
literal|null
decl_stmt|;
name|boolean
name|bang
init|=
literal|false
decl_stmt|;
name|String
name|eg
init|=
literal|null
decl_stmt|,
name|thr
init|=
literal|""
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_protected
case|:
block|{
name|match
argument_list|(
name|LITERAL_protected
argument_list|)
expr_stmt|;
name|vis
operator|=
literal|"protected"
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_private
case|:
block|{
name|match
argument_list|(
name|LITERAL_private
argument_list|)
expr_stmt|;
name|vis
operator|=
literal|"private"
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_public
case|:
block|{
name|match
argument_list|(
name|LITERAL_public
argument_list|)
expr_stmt|;
name|vis
operator|=
literal|"public"
expr_stmt|;
break|break;
block|}
case|case
name|ID
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|r
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|BANG
case|:
block|{
name|match
argument_list|(
name|BANG
argument_list|)
expr_stmt|;
name|bang
operator|=
literal|true
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|OPTIONS_START
case|:
case|case
name|ARG_ACTION
case|:
case|case
name|LITERAL_returns
case|:
case|case
name|RULE_BLOCK
case|:
case|case
name|LITERAL_throws
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ARG_ACTION
case|:
block|{
name|arg
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|OPTIONS_START
case|:
case|case
name|LITERAL_returns
case|:
case|case
name|RULE_BLOCK
case|:
case|case
name|LITERAL_throws
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_returns
case|:
block|{
name|match
argument_list|(
name|LITERAL_returns
argument_list|)
expr_stmt|;
name|ret
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|OPTIONS_START
case|:
case|case
name|RULE_BLOCK
case|:
case|case
name|LITERAL_throws
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_throws
case|:
block|{
name|thr
operator|=
name|throwsSpec
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|OPTIONS_START
case|:
case|case
name|RULE_BLOCK
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|OPTIONS_START
case|:
block|{
name|o
operator|=
name|optionSpec
argument_list|(
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|RULE_BLOCK
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ACTION
case|:
block|{
name|init
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RULE_BLOCK
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|blk
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RULE_BLOCK
argument_list|)
expr_stmt|;
name|eg
operator|=
name|exceptionGroup
argument_list|()
expr_stmt|;
name|String
name|rtext
init|=
name|blk
operator|.
name|getText
argument_list|()
operator|+
name|eg
decl_stmt|;
name|Rule
name|ppr
init|=
operator|new
name|Rule
argument_list|(
name|r
operator|.
name|getText
argument_list|()
argument_list|,
name|rtext
argument_list|,
name|o
argument_list|,
name|gr
argument_list|)
decl_stmt|;
name|ppr
operator|.
name|setThrowsSpec
argument_list|(
name|thr
argument_list|)
expr_stmt|;
if|if
condition|(
name|arg
operator|!=
literal|null
condition|)
block|{
name|ppr
operator|.
name|setArgs
argument_list|(
name|arg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
name|ppr
operator|.
name|setReturnValue
argument_list|(
name|ret
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|init
operator|!=
literal|null
condition|)
block|{
name|ppr
operator|.
name|setInitAction
argument_list|(
name|init
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bang
condition|)
block|{
name|ppr
operator|.
name|setBang
argument_list|()
expr_stmt|;
block|}
name|ppr
operator|.
name|setVisibility
argument_list|(
name|vis
argument_list|)
expr_stmt|;
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|addRule
argument_list|(
name|ppr
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_5
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|throwsSpec ()
specifier|public
specifier|final
name|String
name|throwsSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|t
decl_stmt|;
name|Token
name|a
init|=
literal|null
decl_stmt|;
name|Token
name|b
init|=
literal|null
decl_stmt|;
name|t
operator|=
literal|"throws "
expr_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|LITERAL_throws
argument_list|)
expr_stmt|;
name|a
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|t
operator|+=
name|a
operator|.
name|getText
argument_list|()
expr_stmt|;
block|{
name|_loop291
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|b
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|t
operator|+=
literal|","
operator|+
name|b
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop291
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_6
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
DECL|method|exceptionGroup ()
specifier|public
specifier|final
name|String
name|exceptionGroup
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|g
decl_stmt|;
name|String
name|e
init|=
literal|null
decl_stmt|;
name|g
operator|=
literal|""
expr_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|_loop294
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_exception
operator|)
condition|)
block|{
name|e
operator|=
name|exceptionSpec
argument_list|()
expr_stmt|;
name|g
operator|+=
name|e
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop294
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_5
argument_list|)
expr_stmt|;
block|}
return|return
name|g
return|;
block|}
DECL|method|exceptionSpec ()
specifier|public
specifier|final
name|String
name|exceptionSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|es
decl_stmt|;
name|Token
name|aa
init|=
literal|null
decl_stmt|;
name|String
name|h
init|=
literal|null
decl_stmt|;
name|es
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|+
literal|"exception "
expr_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|LITERAL_exception
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ARG_ACTION
case|:
block|{
name|aa
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
name|es
operator|+=
name|aa
operator|.
name|getText
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|ACTION
case|:
case|case
name|LITERAL_class
case|:
case|case
name|ID
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_private
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|LITERAL_catch
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|_loop298
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_catch
operator|)
condition|)
block|{
name|h
operator|=
name|exceptionHandler
argument_list|()
expr_stmt|;
name|es
operator|+=
name|h
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop298
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_7
argument_list|)
expr_stmt|;
block|}
return|return
name|es
return|;
block|}
DECL|method|exceptionHandler ()
specifier|public
specifier|final
name|String
name|exceptionHandler
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|h
decl_stmt|;
name|Token
name|a1
init|=
literal|null
decl_stmt|;
name|Token
name|a2
init|=
literal|null
decl_stmt|;
name|h
operator|=
literal|null
expr_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|LITERAL_catch
argument_list|)
expr_stmt|;
name|a1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
name|a2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
name|h
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|+
literal|"catch "
operator|+
name|a1
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|a2
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_8
argument_list|)
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
DECL|field|_tokenNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|_tokenNames
init|=
block|{
literal|"<0>"
block|,
literal|"EOF"
block|,
literal|"<2>"
block|,
literal|"NULL_TREE_LOOKAHEAD"
block|,
literal|"\"tokens\""
block|,
literal|"HEADER_ACTION"
block|,
literal|"SUBRULE_BLOCK"
block|,
literal|"ACTION"
block|,
literal|"\"class\""
block|,
literal|"ID"
block|,
literal|"\"extends\""
block|,
literal|"SEMI"
block|,
literal|"TOKENS_SPEC"
block|,
literal|"OPTIONS_START"
block|,
literal|"ASSIGN_RHS"
block|,
literal|"RCURLY"
block|,
literal|"\"protected\""
block|,
literal|"\"private\""
block|,
literal|"\"public\""
block|,
literal|"BANG"
block|,
literal|"ARG_ACTION"
block|,
literal|"\"returns\""
block|,
literal|"RULE_BLOCK"
block|,
literal|"\"throws\""
block|,
literal|"COMMA"
block|,
literal|"\"exception\""
block|,
literal|"\"catch\""
block|,
literal|"ALT"
block|,
literal|"ELEMENT"
block|,
literal|"LPAREN"
block|,
literal|"RPAREN"
block|,
literal|"ID_OR_KEYWORD"
block|,
literal|"CURLY_BLOCK_SCARF"
block|,
literal|"WS"
block|,
literal|"NEWLINE"
block|,
literal|"COMMENT"
block|,
literal|"SL_COMMENT"
block|,
literal|"ML_COMMENT"
block|,
literal|"CHAR_LITERAL"
block|,
literal|"STRING_LITERAL"
block|,
literal|"ESC"
block|,
literal|"DIGIT"
block|,
literal|"XDIGIT"
block|}
decl_stmt|;
DECL|method|mk_tokenSet_0 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_0
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_1 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4658050L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_1
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_2 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_2
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|459264L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_2
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_2
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_2
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_3 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_3
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|386L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_3
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_3
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_3
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_4 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_4
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2048L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_4
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_4
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_4
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_5 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_5
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|459650L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_5
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_5
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_5
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_6 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_6
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4202624L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_6
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_6
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_6
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_7 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_7
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|34014082L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_7
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_7
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_7
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|mk_tokenSet_8 ()
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_8
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|101122946L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
DECL|field|_tokenSet_8
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_8
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_8
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

