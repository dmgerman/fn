begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  */
end_comment

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_class
DECL|class|ParseTreeRule
specifier|public
class|class
name|ParseTreeRule
extends|extends
name|ParseTree
block|{
DECL|field|INVALID_ALT
specifier|public
specifier|static
specifier|final
name|int
name|INVALID_ALT
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|ruleName
specifier|protected
name|String
name|ruleName
decl_stmt|;
DECL|field|altNumber
specifier|protected
name|int
name|altNumber
decl_stmt|;
comment|// unused until I modify antlr to record this
DECL|method|ParseTreeRule (String ruleName)
specifier|public
name|ParseTreeRule
parameter_list|(
name|String
name|ruleName
parameter_list|)
block|{
name|this
argument_list|(
name|ruleName
argument_list|,
name|INVALID_ALT
argument_list|)
expr_stmt|;
block|}
DECL|method|ParseTreeRule (String ruleName, int altNumber)
specifier|public
name|ParseTreeRule
parameter_list|(
name|String
name|ruleName
parameter_list|,
name|int
name|altNumber
parameter_list|)
block|{
name|this
operator|.
name|ruleName
operator|=
name|ruleName
expr_stmt|;
name|this
operator|.
name|altNumber
operator|=
name|altNumber
expr_stmt|;
block|}
DECL|method|getRuleName ()
specifier|public
name|String
name|getRuleName
parameter_list|()
block|{
return|return
name|ruleName
return|;
block|}
comment|/** Do a step-first walk, building up a buffer of tokens until 	 *  you've reached a particular step and print out any rule subroots 	 *  insteads of descending. 	 */
DECL|method|getLeftmostDerivation (StringBuffer buf, int step)
specifier|protected
name|int
name|getLeftmostDerivation
parameter_list|(
name|StringBuffer
name|buf
parameter_list|,
name|int
name|step
parameter_list|)
block|{
name|int
name|numReplacements
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|step
operator|<=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|numReplacements
return|;
block|}
name|AST
name|child
init|=
name|getFirstChild
argument_list|()
decl_stmt|;
name|numReplacements
operator|=
literal|1
expr_stmt|;
comment|// walk child printing them out, descending into at most one
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|numReplacements
operator|>=
name|step
operator|||
name|child
operator|instanceof
name|ParseTreeToken
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// descend for at least one more derivation; update count
name|int
name|remainingReplacements
init|=
name|step
operator|-
name|numReplacements
decl_stmt|;
name|int
name|n
init|=
operator|(
operator|(
name|ParseTree
operator|)
name|child
operator|)
operator|.
name|getLeftmostDerivation
argument_list|(
name|buf
argument_list|,
name|remainingReplacements
argument_list|)
decl_stmt|;
name|numReplacements
operator|+=
name|n
expr_stmt|;
block|}
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
name|numReplacements
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|altNumber
operator|==
name|INVALID_ALT
condition|)
block|{
return|return
literal|'<'
operator|+
name|ruleName
operator|+
literal|'>'
return|;
block|}
else|else
block|{
return|return
literal|'<'
operator|+
name|ruleName
operator|+
literal|"["
operator|+
name|altNumber
operator|+
literal|"]>"
return|;
block|}
block|}
block|}
end_class

end_unit

