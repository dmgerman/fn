begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/RIGHTS.html  *  * $Id$  */
end_comment

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_class
DECL|class|MismatchedCharException
specifier|public
class|class
name|MismatchedCharException
extends|extends
name|RecognitionException
block|{
comment|// Types of chars
DECL|field|CHAR
specifier|public
specifier|static
specifier|final
name|int
name|CHAR
init|=
literal|1
decl_stmt|;
DECL|field|NOT_CHAR
specifier|public
specifier|static
specifier|final
name|int
name|NOT_CHAR
init|=
literal|2
decl_stmt|;
DECL|field|RANGE
specifier|public
specifier|static
specifier|final
name|int
name|RANGE
init|=
literal|3
decl_stmt|;
DECL|field|NOT_RANGE
specifier|public
specifier|static
specifier|final
name|int
name|NOT_RANGE
init|=
literal|4
decl_stmt|;
DECL|field|SET
specifier|public
specifier|static
specifier|final
name|int
name|SET
init|=
literal|5
decl_stmt|;
DECL|field|NOT_SET
specifier|public
specifier|static
specifier|final
name|int
name|NOT_SET
init|=
literal|6
decl_stmt|;
comment|// One of the above
DECL|field|mismatchType
specifier|public
name|int
name|mismatchType
decl_stmt|;
comment|// what was found on the input stream
DECL|field|foundChar
specifier|public
name|char
name|foundChar
decl_stmt|;
comment|// For CHAR/NOT_CHAR and RANGE/NOT_RANGE
DECL|field|expecting
specifier|public
name|int
name|expecting
decl_stmt|;
comment|// For RANGE/NOT_RANGE (expecting is lower bound of range)
DECL|field|upper
specifier|public
name|int
name|upper
decl_stmt|;
comment|// For SET/NOT_SET
DECL|field|set
specifier|public
name|BitSet
name|set
decl_stmt|;
comment|// who knows...they may want to ask scanner questions
DECL|field|scanner
specifier|public
name|CharScanner
name|scanner
decl_stmt|;
comment|/**      * MismatchedCharException constructor comment.      */
DECL|method|MismatchedCharException ()
specifier|public
name|MismatchedCharException
parameter_list|()
block|{
name|super
argument_list|(
literal|"Mismatched char"
argument_list|)
expr_stmt|;
block|}
comment|// Expected range / not range
DECL|method|MismatchedCharException (char c, char lower, char upper_, boolean matchNot, CharScanner scanner)
specifier|public
name|MismatchedCharException
parameter_list|(
name|char
name|c
parameter_list|,
name|char
name|lower
parameter_list|,
name|char
name|upper_
parameter_list|,
name|boolean
name|matchNot
parameter_list|,
name|CharScanner
name|scanner
parameter_list|)
block|{
name|super
argument_list|(
literal|"Mismatched char"
argument_list|)
expr_stmt|;
name|foundChar
operator|=
name|c
expr_stmt|;
name|expecting
operator|=
name|lower
expr_stmt|;
name|upper
operator|=
name|upper_
expr_stmt|;
comment|// get instantaneous values of file/line/column
name|this
operator|.
name|line
operator|=
name|scanner
operator|.
name|getLine
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|scanner
operator|.
name|getFilename
argument_list|()
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|scanner
operator|.
name|getColumn
argument_list|()
expr_stmt|;
name|this
operator|.
name|scanner
operator|=
name|scanner
expr_stmt|;
name|mismatchType
operator|=
name|matchNot
condition|?
name|NOT_RANGE
else|:
name|RANGE
expr_stmt|;
block|}
comment|// Expected token / not token
DECL|method|MismatchedCharException (char c, char expecting_, boolean matchNot, CharScanner scanner)
specifier|public
name|MismatchedCharException
parameter_list|(
name|char
name|c
parameter_list|,
name|char
name|expecting_
parameter_list|,
name|boolean
name|matchNot
parameter_list|,
name|CharScanner
name|scanner
parameter_list|)
block|{
name|super
argument_list|(
literal|"Mismatched char"
argument_list|)
expr_stmt|;
name|foundChar
operator|=
name|c
expr_stmt|;
name|expecting
operator|=
name|expecting_
expr_stmt|;
comment|// get instantaneous values of file/line/column
name|this
operator|.
name|line
operator|=
name|scanner
operator|.
name|getLine
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|scanner
operator|.
name|getFilename
argument_list|()
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|scanner
operator|.
name|getColumn
argument_list|()
expr_stmt|;
name|this
operator|.
name|scanner
operator|=
name|scanner
expr_stmt|;
name|mismatchType
operator|=
name|matchNot
condition|?
name|NOT_CHAR
else|:
name|CHAR
expr_stmt|;
block|}
comment|// Expected BitSet / not BitSet
DECL|method|MismatchedCharException (char c, BitSet set_, boolean matchNot, CharScanner scanner)
specifier|public
name|MismatchedCharException
parameter_list|(
name|char
name|c
parameter_list|,
name|BitSet
name|set_
parameter_list|,
name|boolean
name|matchNot
parameter_list|,
name|CharScanner
name|scanner
parameter_list|)
block|{
name|super
argument_list|(
literal|"Mismatched char"
argument_list|)
expr_stmt|;
name|foundChar
operator|=
name|c
expr_stmt|;
name|set
operator|=
name|set_
expr_stmt|;
comment|// get instantaneous values of file/line/column
name|this
operator|.
name|line
operator|=
name|scanner
operator|.
name|getLine
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|scanner
operator|.
name|getFilename
argument_list|()
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|scanner
operator|.
name|getColumn
argument_list|()
expr_stmt|;
name|this
operator|.
name|scanner
operator|=
name|scanner
expr_stmt|;
name|mismatchType
operator|=
name|matchNot
condition|?
name|NOT_SET
else|:
name|SET
expr_stmt|;
block|}
comment|/**      * MismatchedCharException constructor comment.      * @param s java.lang.String      */
DECL|method|MismatchedCharException (String s, int line)
specifier|public
name|MismatchedCharException
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the error message that happened on the line/col given.      * Copied from toString().      */
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|mismatchType
condition|)
block|{
case|case
name|CHAR
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"expecting '"
operator|+
operator|(
name|char
operator|)
name|expecting
operator|+
literal|"', found '"
operator|+
operator|(
name|char
operator|)
name|foundChar
operator|+
literal|"'"
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOT_CHAR
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"expecting anything but '"
operator|+
operator|(
name|char
operator|)
name|expecting
operator|+
literal|"'; got it anyway"
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGE
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"expecting token in range: '"
operator|+
operator|(
name|char
operator|)
name|expecting
operator|+
literal|"'..'"
operator|+
operator|(
name|char
operator|)
name|upper
operator|+
literal|"', found '"
operator|+
operator|(
name|char
operator|)
name|foundChar
operator|+
literal|"'"
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOT_RANGE
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"expecting token NOT in range: "
operator|+
operator|(
name|char
operator|)
name|expecting
operator|+
literal|"'..'"
operator|+
operator|(
name|char
operator|)
name|upper
operator|+
literal|"', found '"
operator|+
operator|(
name|char
operator|)
name|foundChar
operator|+
literal|"'"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SET
case|:
case|case
name|NOT_SET
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"expecting "
operator|+
operator|(
name|mismatchType
operator|==
name|NOT_SET
condition|?
literal|"NOT "
else|:
literal|""
operator|)
operator|+
literal|"one of ("
argument_list|)
expr_stmt|;
name|int
index|[]
name|elems
init|=
name|set
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" '"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|elems
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"), found '"
operator|+
operator|(
name|char
operator|)
name|foundChar
operator|+
literal|"'"
argument_list|)
expr_stmt|;
break|break;
default|default :
name|sb
operator|.
name|append
argument_list|(
name|super
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

