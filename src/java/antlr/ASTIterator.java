begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_class
DECL|class|ASTIterator
specifier|public
class|class
name|ASTIterator
block|{
DECL|field|cursor
specifier|protected
name|AST
name|cursor
init|=
literal|null
decl_stmt|;
DECL|field|original
specifier|protected
name|AST
name|original
init|=
literal|null
decl_stmt|;
DECL|method|ASTIterator (AST t)
specifier|public
name|ASTIterator
parameter_list|(
name|AST
name|t
parameter_list|)
block|{
name|original
operator|=
name|cursor
operator|=
name|t
expr_stmt|;
block|}
comment|/** Is 'sub' a subtree of 't' beginning at the root? */
DECL|method|isSubtree (AST t, AST sub)
specifier|public
name|boolean
name|isSubtree
parameter_list|(
name|AST
name|t
parameter_list|,
name|AST
name|sub
parameter_list|)
block|{
name|AST
name|sibling
decl_stmt|;
comment|// the empty tree is always a subset of any tree.
if|if
condition|(
name|sub
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// if the tree is empty, return true if the subtree template is too.
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
comment|// Otherwise, start walking sibling lists.  First mismatch, return false.
for|for
control|(
name|sibling
operator|=
name|t
init|;
name|sibling
operator|!=
literal|null
operator|&&
name|sub
operator|!=
literal|null
condition|;
name|sibling
operator|=
name|sibling
operator|.
name|getNextSibling
argument_list|()
operator|,
name|sub
operator|=
name|sub
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
comment|// as a quick optimization, check roots first.
if|if
condition|(
name|sibling
operator|.
name|getType
argument_list|()
operator|!=
name|sub
operator|.
name|getType
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// if roots match, do full match test on children.
if|if
condition|(
name|sibling
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isSubtree
argument_list|(
name|sibling
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|sub
operator|.
name|getFirstChild
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** Find the next subtree with structure and token types equal to      * those of 'template'.      */
DECL|method|next (AST template)
specifier|public
name|AST
name|next
parameter_list|(
name|AST
name|template
parameter_list|)
block|{
name|AST
name|t
init|=
literal|null
decl_stmt|;
name|AST
name|sibling
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cursor
operator|==
literal|null
condition|)
block|{
comment|// do nothing if no tree to work on
return|return
literal|null
return|;
block|}
comment|// Start walking sibling list looking for subtree matches.
for|for
control|(
init|;
name|cursor
operator|!=
literal|null
condition|;
name|cursor
operator|=
name|cursor
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
comment|// as a quick optimization, check roots first.
if|if
condition|(
name|cursor
operator|.
name|getType
argument_list|()
operator|==
name|template
operator|.
name|getType
argument_list|()
condition|)
block|{
comment|// if roots match, do full match test on children.
if|if
condition|(
name|cursor
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isSubtree
argument_list|(
name|cursor
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|template
operator|.
name|getFirstChild
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|cursor
return|;
block|}
block|}
block|}
block|}
return|return
name|t
return|;
block|}
block|}
end_class

end_unit

