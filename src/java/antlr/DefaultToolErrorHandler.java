begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_class
DECL|class|DefaultToolErrorHandler
class|class
name|DefaultToolErrorHandler
implements|implements
name|ToolErrorHandler
block|{
DECL|method|DefaultToolErrorHandler (antlr.Tool tool)
name|DefaultToolErrorHandler
parameter_list|(
name|antlr
operator|.
name|Tool
name|tool
parameter_list|)
block|{
name|antlrTool
operator|=
name|tool
expr_stmt|;
block|}
DECL|field|antlrTool
specifier|private
specifier|final
name|antlr
operator|.
name|Tool
name|antlrTool
decl_stmt|;
DECL|field|javaCharFormatter
name|CharFormatter
name|javaCharFormatter
init|=
operator|new
name|JavaCharFormatter
argument_list|()
decl_stmt|;
comment|/** Dump token/character sets to a string array suitable for 	 * {@link antlr.Tool.warning(String[], String, int, int) 	 * @param output The array that will contain the token/character set dump, 	 *               one element per k (lookahead) value 	 * @param outputStartIndex The index into<code>output</code> that the 	 *                         dump should start at. 	 * @param lexicalAnalysis  true for lexical rule 	 * @param depth  The depth of the ambiguity 	 * @param sets  An array of bitsets containing the ambiguities 	 */
DECL|method|dumpSets (String[] output, int outputStartIndex, Grammar grammar, boolean lexicalAnalysis, int depth, Lookahead[] sets)
specifier|private
name|void
name|dumpSets
parameter_list|(
name|String
index|[]
name|output
parameter_list|,
name|int
name|outputStartIndex
parameter_list|,
name|Grammar
name|grammar
parameter_list|,
name|boolean
name|lexicalAnalysis
parameter_list|,
name|int
name|depth
parameter_list|,
name|Lookahead
index|[]
name|sets
parameter_list|)
block|{
name|StringBuffer
name|line
init|=
operator|new
name|StringBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|depth
condition|;
name|i
operator|++
control|)
block|{
name|line
operator|.
name|append
argument_list|(
literal|"k=="
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|lexicalAnalysis
condition|)
block|{
name|String
name|bits
init|=
name|sets
index|[
name|i
index|]
operator|.
name|fset
operator|.
name|toStringWithRanges
argument_list|(
literal|","
argument_list|,
name|javaCharFormatter
argument_list|)
decl_stmt|;
if|if
condition|(
name|sets
index|[
name|i
index|]
operator|.
name|containsEpsilon
argument_list|()
condition|)
block|{
name|line
operator|.
name|append
argument_list|(
literal|"<end-of-token>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bits
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|line
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
name|line
operator|.
name|append
argument_list|(
name|bits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|append
argument_list|(
name|sets
index|[
name|i
index|]
operator|.
name|fset
operator|.
name|toString
argument_list|(
literal|","
argument_list|,
name|grammar
operator|.
name|tokenManager
operator|.
name|getVocabulary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|output
index|[
name|outputStartIndex
operator|++
index|]
operator|=
name|line
operator|.
name|toString
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Issue a warning about ambiguity between a alternates 	 * @param blk  The block being analyzed 	 * @param lexicalAnalysis  true for lexical rule 	 * @param depth  The depth of the ambiguity 	 * @param sets  An array of bitsets containing the ambiguities 	 * @param altIdx1  The zero-based index of the first ambiguous alternative 	 * @param altIdx2  The zero-based index of the second ambiguous alternative 	 */
DECL|method|warnAltAmbiguity (Grammar grammar, AlternativeBlock blk, boolean lexicalAnalysis, int depth, Lookahead[] sets, int altIdx1, int altIdx2)
specifier|public
name|void
name|warnAltAmbiguity
parameter_list|(
name|Grammar
name|grammar
parameter_list|,
name|AlternativeBlock
name|blk
parameter_list|,
name|boolean
name|lexicalAnalysis
parameter_list|,
name|int
name|depth
parameter_list|,
name|Lookahead
index|[]
name|sets
parameter_list|,
name|int
name|altIdx1
parameter_list|,
name|int
name|altIdx2
parameter_list|)
block|{
specifier|final
name|StringBuffer
name|line
init|=
operator|new
name|StringBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|blk
operator|instanceof
name|RuleBlock
operator|&&
operator|(
operator|(
name|RuleBlock
operator|)
name|blk
operator|)
operator|.
name|isLexerAutoGenRule
argument_list|()
condition|)
block|{
name|Alternative
name|ai
init|=
name|blk
operator|.
name|getAlternativeAt
argument_list|(
name|altIdx1
argument_list|)
decl_stmt|;
name|Alternative
name|aj
init|=
name|blk
operator|.
name|getAlternativeAt
argument_list|(
name|altIdx2
argument_list|)
decl_stmt|;
name|RuleRefElement
name|rri
init|=
operator|(
name|RuleRefElement
operator|)
name|ai
operator|.
name|head
decl_stmt|;
name|RuleRefElement
name|rrj
init|=
operator|(
name|RuleRefElement
operator|)
name|aj
operator|.
name|head
decl_stmt|;
name|String
name|ri
init|=
name|CodeGenerator
operator|.
name|reverseLexerRuleName
argument_list|(
name|rri
operator|.
name|targetRule
argument_list|)
decl_stmt|;
name|String
name|rj
init|=
name|CodeGenerator
operator|.
name|reverseLexerRuleName
argument_list|(
name|rrj
operator|.
name|targetRule
argument_list|)
decl_stmt|;
name|line
operator|.
name|append
argument_list|(
literal|"lexical nondeterminism between rules "
argument_list|)
expr_stmt|;
name|line
operator|.
name|append
argument_list|(
name|ri
argument_list|)
operator|.
name|append
argument_list|(
literal|" and "
argument_list|)
operator|.
name|append
argument_list|(
name|rj
argument_list|)
operator|.
name|append
argument_list|(
literal|" upon"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lexicalAnalysis
condition|)
block|{
name|line
operator|.
name|append
argument_list|(
literal|"lexical "
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|append
argument_list|(
literal|"nondeterminism between alts "
argument_list|)
expr_stmt|;
name|line
operator|.
name|append
argument_list|(
name|altIdx1
operator|+
literal|1
argument_list|)
operator|.
name|append
argument_list|(
literal|" and "
argument_list|)
expr_stmt|;
name|line
operator|.
name|append
argument_list|(
name|altIdx2
operator|+
literal|1
argument_list|)
operator|.
name|append
argument_list|(
literal|" of block upon"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|output
init|=
operator|new
name|String
index|[
name|depth
operator|+
literal|1
index|]
decl_stmt|;
empty_stmt|;
name|output
index|[
literal|0
index|]
operator|=
name|line
operator|.
name|toString
argument_list|()
expr_stmt|;
name|dumpSets
argument_list|(
name|output
argument_list|,
literal|1
argument_list|,
name|grammar
argument_list|,
name|lexicalAnalysis
argument_list|,
name|depth
argument_list|,
name|sets
argument_list|)
expr_stmt|;
name|antlrTool
operator|.
name|warning
argument_list|(
name|output
argument_list|,
name|grammar
operator|.
name|getFilename
argument_list|()
argument_list|,
name|blk
operator|.
name|getLine
argument_list|()
argument_list|,
name|blk
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Issue a warning about ambiguity between an alternate and exit path. 	 * @param blk  The block being analyzed 	 * @param lexicalAnalysis  true for lexical rule 	 * @param depth  The depth of the ambiguity 	 * @param sets  An array of bitsets containing the ambiguities 	 * @param altIdx  The zero-based index of the ambiguous alternative 	 */
DECL|method|warnAltExitAmbiguity (Grammar grammar, BlockWithImpliedExitPath blk, boolean lexicalAnalysis, int depth, Lookahead[] sets, int altIdx )
specifier|public
name|void
name|warnAltExitAmbiguity
parameter_list|(
name|Grammar
name|grammar
parameter_list|,
name|BlockWithImpliedExitPath
name|blk
parameter_list|,
name|boolean
name|lexicalAnalysis
parameter_list|,
name|int
name|depth
parameter_list|,
name|Lookahead
index|[]
name|sets
parameter_list|,
name|int
name|altIdx
parameter_list|)
block|{
name|String
index|[]
name|output
init|=
operator|new
name|String
index|[
name|depth
operator|+
literal|2
index|]
decl_stmt|;
name|output
index|[
literal|0
index|]
operator|=
operator|(
name|lexicalAnalysis
condition|?
literal|"lexical "
else|:
literal|""
operator|)
operator|+
literal|"nondeterminism upon"
expr_stmt|;
name|dumpSets
argument_list|(
name|output
argument_list|,
literal|1
argument_list|,
name|grammar
argument_list|,
name|lexicalAnalysis
argument_list|,
name|depth
argument_list|,
name|sets
argument_list|)
expr_stmt|;
name|output
index|[
name|depth
operator|+
literal|1
index|]
operator|=
literal|"between alt "
operator|+
operator|(
name|altIdx
operator|+
literal|1
operator|)
operator|+
literal|" and exit branch of block"
expr_stmt|;
name|antlrTool
operator|.
name|warning
argument_list|(
name|output
argument_list|,
name|grammar
operator|.
name|getFilename
argument_list|()
argument_list|,
name|blk
operator|.
name|getLine
argument_list|()
argument_list|,
name|blk
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

