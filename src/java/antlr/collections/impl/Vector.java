begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr.collections.impl
package|package
name|antlr
operator|.
name|collections
operator|.
name|impl
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|Enumerator
import|;
end_import

begin_class
DECL|class|Vector
specifier|public
class|class
name|Vector
implements|implements
name|Cloneable
block|{
DECL|field|data
specifier|protected
name|Object
index|[]
name|data
decl_stmt|;
DECL|field|lastElement
specifier|protected
name|int
name|lastElement
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|Vector ()
specifier|public
name|Vector
parameter_list|()
block|{
name|this
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|Vector (int size)
specifier|public
name|Vector
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|data
operator|=
operator|new
name|Object
index|[
name|size
index|]
expr_stmt|;
block|}
DECL|method|appendElement (Object o)
specifier|public
specifier|synchronized
name|void
name|appendElement
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
name|lastElement
operator|+
literal|2
argument_list|)
expr_stmt|;
name|data
index|[
operator|++
name|lastElement
index|]
operator|=
name|o
expr_stmt|;
block|}
comment|/**      * Returns the current capacity of the vector.      */
DECL|method|capacity ()
specifier|public
name|int
name|capacity
parameter_list|()
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
DECL|method|clone ()
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|Vector
name|v
init|=
literal|null
decl_stmt|;
try|try
block|{
name|v
operator|=
operator|(
name|Vector
operator|)
name|super
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"cannot clone Vector.super"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|v
operator|.
name|data
operator|=
operator|new
name|Object
index|[
name|size
argument_list|()
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
comment|/**      * Returns the element at the specified index.      * @param index the index of the desired element      * @exception ArrayIndexOutOfBoundsException If an invalid      * index was given.      */
DECL|method|elementAt (int i)
specifier|public
specifier|synchronized
name|Object
name|elementAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
name|data
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|i
operator|+
literal|">= "
operator|+
name|data
operator|.
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|i
operator|+
literal|"< 0 "
argument_list|)
throw|;
block|}
return|return
name|data
index|[
name|i
index|]
return|;
block|}
DECL|method|elements ()
specifier|public
specifier|synchronized
name|Enumeration
name|elements
parameter_list|()
block|{
return|return
operator|new
name|VectorEnumerator
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|ensureCapacity (int minIndex)
specifier|public
specifier|synchronized
name|void
name|ensureCapacity
parameter_list|(
name|int
name|minIndex
parameter_list|)
block|{
if|if
condition|(
name|minIndex
operator|+
literal|1
operator|>
name|data
operator|.
name|length
condition|)
block|{
name|Object
name|oldData
index|[]
init|=
name|data
decl_stmt|;
name|int
name|n
init|=
name|data
operator|.
name|length
operator|*
literal|2
decl_stmt|;
if|if
condition|(
name|minIndex
operator|+
literal|1
operator|>
name|n
condition|)
block|{
name|n
operator|=
name|minIndex
operator|+
literal|1
expr_stmt|;
block|}
name|data
operator|=
operator|new
name|Object
index|[
name|n
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oldData
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|oldData
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeElement (Object o)
specifier|public
specifier|synchronized
name|boolean
name|removeElement
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// find element
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
name|lastElement
operator|&&
name|data
index|[
name|i
index|]
operator|!=
name|o
condition|;
name|i
operator|++
control|)
block|{
empty_stmt|;
block|}
if|if
condition|(
name|i
operator|<=
name|lastElement
condition|)
block|{
comment|// if found it
name|data
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
comment|// kill ref for GC
name|int
name|above
init|=
name|lastElement
operator|-
name|i
decl_stmt|;
if|if
condition|(
name|above
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|data
argument_list|,
name|i
argument_list|,
name|above
argument_list|)
expr_stmt|;
block|}
name|lastElement
operator|--
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|setElementAt (Object obj, int i)
specifier|public
specifier|synchronized
name|void
name|setElementAt
parameter_list|(
name|Object
name|obj
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
name|data
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|i
operator|+
literal|">= "
operator|+
name|data
operator|.
name|length
argument_list|)
throw|;
block|}
name|data
index|[
name|i
index|]
operator|=
name|obj
expr_stmt|;
comment|// track last element in the vector so we can append things
if|if
condition|(
name|i
operator|>
name|lastElement
condition|)
block|{
name|lastElement
operator|=
name|i
expr_stmt|;
block|}
block|}
comment|// return number of slots in the vector; e.g., you can set
comment|// the 30th element and size() will return 31.
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|lastElement
operator|+
literal|1
return|;
block|}
block|}
end_class

end_unit

