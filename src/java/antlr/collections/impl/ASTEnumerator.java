begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr.collections.impl
package|package
name|antlr
operator|.
name|collections
operator|.
name|impl
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|ASTEnumeration
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_class
DECL|class|ASTEnumerator
specifier|public
class|class
name|ASTEnumerator
implements|implements
name|antlr
operator|.
name|collections
operator|.
name|ASTEnumeration
block|{
comment|/** The list of root nodes for subtrees that match */
DECL|field|nodes
name|VectorEnumerator
name|nodes
decl_stmt|;
DECL|field|i
name|int
name|i
init|=
literal|0
decl_stmt|;
DECL|method|ASTEnumerator (Vector v)
specifier|public
name|ASTEnumerator
parameter_list|(
name|Vector
name|v
parameter_list|)
block|{
name|nodes
operator|=
operator|new
name|VectorEnumerator
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
DECL|method|hasMoreNodes ()
specifier|public
name|boolean
name|hasMoreNodes
parameter_list|()
block|{
synchronized|synchronized
init|(
name|nodes
init|)
block|{
return|return
name|i
operator|<=
name|nodes
operator|.
name|vector
operator|.
name|lastElement
return|;
block|}
block|}
DECL|method|nextNode ()
specifier|public
name|antlr
operator|.
name|collections
operator|.
name|AST
name|nextNode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|nodes
init|)
block|{
if|if
condition|(
name|i
operator|<=
name|nodes
operator|.
name|vector
operator|.
name|lastElement
condition|)
block|{
return|return
operator|(
name|AST
operator|)
name|nodes
operator|.
name|vector
operator|.
name|data
index|[
name|i
operator|++
index|]
return|;
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"ASTEnumerator"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

