begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr.collections.impl
package|package
name|antlr
operator|.
name|collections
operator|.
name|impl
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|List
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|LLCell
import|;
end_import

begin_comment
comment|/**A Linked List Implementation (not thread-safe for simplicity)  * (adds to the tail) (has an enumeration)  */
end_comment

begin_class
DECL|class|LList
specifier|public
class|class
name|LList
implements|implements
name|List
implements|,
name|Stack
block|{
DECL|field|head
DECL|field|tail
specifier|protected
name|LLCell
name|head
init|=
literal|null
decl_stmt|,
name|tail
init|=
literal|null
decl_stmt|;
DECL|field|length
specifier|protected
name|int
name|length
init|=
literal|0
decl_stmt|;
comment|/** Add an object to the end of the list.      * @param o the object to add      */
DECL|method|add (Object o)
specifier|public
name|void
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
comment|/** Append an object to the end of the list.      * @param o the object to append      */
DECL|method|append (Object o)
specifier|public
name|void
name|append
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|LLCell
name|n
init|=
operator|new
name|LLCell
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
name|head
operator|=
name|tail
operator|=
name|n
expr_stmt|;
name|length
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|tail
operator|.
name|next
operator|=
name|n
expr_stmt|;
name|tail
operator|=
name|n
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
block|}
comment|/**Delete the object at the head of the list.      * @return the object found at the head of the list.      * @exception NoSuchElementException if the list is empty.      */
DECL|method|deleteHead ()
specifier|protected
name|Object
name|deleteHead
parameter_list|()
throws|throws
name|NoSuchElementException
block|{
if|if
condition|(
name|head
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
name|Object
name|o
init|=
name|head
operator|.
name|data
decl_stmt|;
name|head
operator|=
name|head
operator|.
name|next
expr_stmt|;
name|length
operator|--
expr_stmt|;
return|return
name|o
return|;
block|}
comment|/**Get the ith element in the list.      * @param i the index (from 0) of the requested element.      * @return the object at index i      * NoSuchElementException is thrown if i out of range      */
DECL|method|elementAt (int i)
specifier|public
name|Object
name|elementAt
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|NoSuchElementException
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LLCell
name|p
init|=
name|head
init|;
name|p
operator|!=
literal|null
condition|;
name|p
operator|=
name|p
operator|.
name|next
control|)
block|{
if|if
condition|(
name|i
operator|==
name|j
condition|)
return|return
name|p
operator|.
name|data
return|;
name|j
operator|++
expr_stmt|;
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
comment|/**Return an enumeration of the list elements */
DECL|method|elements ()
specifier|public
name|Enumeration
name|elements
parameter_list|()
block|{
return|return
operator|new
name|LLEnumeration
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** How high is the stack? */
DECL|method|height ()
specifier|public
name|int
name|height
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/** Answers whether or not an object is contained in the list      * @param o the object to test for inclusion.      * @return true if object is contained else false.      */
DECL|method|includes (Object o)
specifier|public
name|boolean
name|includes
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
for|for
control|(
name|LLCell
name|p
init|=
name|head
init|;
name|p
operator|!=
literal|null
condition|;
name|p
operator|=
name|p
operator|.
name|next
control|)
block|{
if|if
condition|(
name|p
operator|.
name|data
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// The next two methods make LLQueues and LLStacks easier.
comment|/** Insert an object at the head of the list.      * @param o the object to add      */
DECL|method|insertHead (Object o)
specifier|protected
name|void
name|insertHead
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|LLCell
name|c
init|=
name|head
decl_stmt|;
name|head
operator|=
operator|new
name|LLCell
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|head
operator|.
name|next
operator|=
name|c
expr_stmt|;
name|length
operator|++
expr_stmt|;
if|if
condition|(
name|tail
operator|==
literal|null
condition|)
name|tail
operator|=
name|head
expr_stmt|;
block|}
comment|/**Return the length of the list.*/
DECL|method|length ()
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/** Pop the top element of the stack off.      * @return the top of stack that was popped off.      * @exception NoSuchElementException if the stack is empty.      */
DECL|method|pop ()
specifier|public
name|Object
name|pop
parameter_list|()
throws|throws
name|NoSuchElementException
block|{
name|Object
name|o
init|=
name|deleteHead
argument_list|()
decl_stmt|;
return|return
name|o
return|;
block|}
comment|// Satisfy the Stack interface now.
comment|/** Push an object onto the stack.      * @param o the object to push      */
DECL|method|push (Object o)
specifier|public
name|void
name|push
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|insertHead
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
DECL|method|top ()
specifier|public
name|Object
name|top
parameter_list|()
throws|throws
name|NoSuchElementException
block|{
if|if
condition|(
name|head
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
return|return
name|head
operator|.
name|data
return|;
block|}
block|}
end_class

end_unit

