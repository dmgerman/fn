begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr.collections.impl
package|package
name|antlr
operator|.
name|collections
operator|.
name|impl
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|Vector
import|;
end_import

begin_comment
comment|/**  * A simple indexed vector: a normal vector except that you must  * specify a key when adding an element.  This allows fast lookup  * and allows the order of specification to be preserved.  */
end_comment

begin_class
DECL|class|IndexedVector
specifier|public
class|class
name|IndexedVector
block|{
DECL|field|elements
specifier|protected
name|Vector
name|elements
decl_stmt|;
DECL|field|index
specifier|protected
name|Hashtable
name|index
decl_stmt|;
comment|/**      * IndexedVector constructor comment.      */
DECL|method|IndexedVector ()
specifier|public
name|IndexedVector
parameter_list|()
block|{
name|elements
operator|=
operator|new
name|Vector
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Hashtable
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/**      * IndexedVector constructor comment.      * @param size int      */
DECL|method|IndexedVector (int size)
specifier|public
name|IndexedVector
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|elements
operator|=
operator|new
name|Vector
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Hashtable
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|appendElement (Object key, Object value)
specifier|public
specifier|synchronized
name|void
name|appendElement
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|elements
operator|.
name|appendElement
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the element at the specified index.      * @param index the index of the desired element      * @exception ArrayIndexOutOfBoundsException If an invalid      * index was given.      */
DECL|method|elementAt (int i)
specifier|public
name|Object
name|elementAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|elements
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|elements ()
specifier|public
name|Enumeration
name|elements
parameter_list|()
block|{
return|return
name|elements
operator|.
name|elements
argument_list|()
return|;
block|}
DECL|method|getElement (Object key)
specifier|public
name|Object
name|getElement
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|Object
name|o
init|=
name|index
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|o
return|;
block|}
comment|/** remove element referred to by key NOT value; return false if not found. */
DECL|method|removeElement (Object key)
specifier|public
specifier|synchronized
name|boolean
name|removeElement
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|Object
name|value
init|=
name|index
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|index
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|elements
operator|.
name|removeElement
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|elements
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

