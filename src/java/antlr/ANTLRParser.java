begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 2.7.1: "antlr.g" -> "ANTLRParser.java"$
end_comment

begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|TokenBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LLkParser
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedTokenException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ParserSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ASTPair
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|ASTArray
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|ANTLRParser
specifier|public
class|class
name|ANTLRParser
extends|extends
name|antlr
operator|.
name|LLkParser
implements|implements
name|ANTLRTokenTypes
block|{
DECL|field|DEBUG_PARSER
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG_PARSER
init|=
literal|false
decl_stmt|;
DECL|field|behavior
name|ANTLRGrammarParseBehavior
name|behavior
decl_stmt|;
DECL|field|tool
name|Tool
name|tool
decl_stmt|;
DECL|field|blockNesting
specifier|protected
name|int
name|blockNesting
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|ANTLRParser ( TokenBuffer tokenBuf, ANTLRGrammarParseBehavior behavior_, Tool tool_ )
specifier|public
name|ANTLRParser
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|,
name|ANTLRGrammarParseBehavior
name|behavior_
parameter_list|,
name|Tool
name|tool_
parameter_list|)
block|{
name|super
argument_list|(
name|tokenBuf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|behavior
operator|=
name|behavior_
expr_stmt|;
name|tool
operator|=
name|tool_
expr_stmt|;
block|}
DECL|method|lastInRule ()
specifier|private
name|boolean
name|lastInRule
parameter_list|()
throws|throws
name|TokenStreamException
block|{
if|if
condition|(
name|blockNesting
operator|==
literal|0
operator|&&
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SEMI
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_exception
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|OR
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|checkForMissingEndRule (Token label)
specifier|private
name|void
name|checkForMissingEndRule
parameter_list|(
name|Token
name|label
parameter_list|)
block|{
if|if
condition|(
name|label
operator|.
name|getColumn
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Tool
operator|.
name|warning
argument_list|(
literal|"did you forget to terminate previous rule?"
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|label
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ANTLRParser (TokenBuffer tokenBuf, int k)
specifier|protected
name|ANTLRParser
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|tokenBuf
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
block|}
DECL|method|ANTLRParser (TokenBuffer tokenBuf)
specifier|public
name|ANTLRParser
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|)
block|{
name|this
argument_list|(
name|tokenBuf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|ANTLRParser (TokenStream lexer, int k)
specifier|protected
name|ANTLRParser
parameter_list|(
name|TokenStream
name|lexer
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|lexer
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
block|}
DECL|method|ANTLRParser (TokenStream lexer)
specifier|public
name|ANTLRParser
parameter_list|(
name|TokenStream
name|lexer
parameter_list|)
block|{
name|this
argument_list|(
name|lexer
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|ANTLRParser (ParserSharedInputState state)
specifier|public
name|ANTLRParser
parameter_list|(
name|ParserSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
block|}
DECL|method|grammar ()
specifier|public
specifier|final
name|void
name|grammar
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|n
init|=
literal|null
decl_stmt|;
name|Token
name|h
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|_loop4
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_header
operator|)
condition|)
block|{
name|match
argument_list|(
name|LITERAL_header
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
block|{
name|n
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|h
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refHeaderAction
argument_list|(
name|n
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop4
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|OPTIONS
case|:
block|{
name|fileOptionsSpec
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|ACTION
case|:
case|case
name|DOC_COMMENT
case|:
case|case
name|LITERAL_lexclass
case|:
case|case
name|LITERAL_class
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|_loop7
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|ACTION
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|LITERAL_class
operator|)
operator|)
condition|)
block|{
name|classDef
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop7
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
literal|"rule grammar trapped: "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|consumeUntil
argument_list|(
name|EOF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
DECL|method|fileOptionsSpec ()
specifier|public
specifier|final
name|void
name|fileOptionsSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|idTok
decl_stmt|;
name|Token
name|value
decl_stmt|;
name|match
argument_list|(
name|OPTIONS
argument_list|)
expr_stmt|;
block|{
name|_loop18
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RULE_REF
operator|)
condition|)
block|{
name|idTok
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|value
operator|=
name|optionValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|setFileOption
argument_list|(
name|idTok
argument_list|,
name|value
argument_list|,
name|getInputState
argument_list|()
operator|.
name|filename
argument_list|)
expr_stmt|;
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop18
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
block|}
DECL|method|classDef ()
specifier|public
specifier|final
name|void
name|classDef
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|a
init|=
literal|null
decl_stmt|;
name|Token
name|d
init|=
literal|null
decl_stmt|;
name|String
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ACTION
case|:
block|{
name|a
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refPreambleAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|DOC_COMMENT
case|:
case|case
name|LITERAL_lexclass
case|:
case|case
name|LITERAL_class
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|DOC_COMMENT
case|:
block|{
name|d
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOC_COMMENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|doc
operator|=
name|d
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_lexclass
case|:
case|case
name|LITERAL_class
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|boolean
name|synPredMatched13
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_lexclass
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_class
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|RULE_REF
operator|)
operator|)
condition|)
block|{
name|int
name|_m13
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched13
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_lexclass
case|:
block|{
name|match
argument_list|(
name|LITERAL_lexclass
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_class
case|:
block|{
name|match
argument_list|(
name|LITERAL_class
argument_list|)
expr_stmt|;
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LITERAL_extends
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_Lexer
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched13
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m13
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched13
condition|)
block|{
name|lexerSpec
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched15
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_class
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|RULE_REF
operator|)
operator|)
condition|)
block|{
name|int
name|_m15
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched15
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_class
argument_list|)
expr_stmt|;
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LITERAL_extends
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_TreeParser
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched15
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m15
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched15
condition|)
block|{
name|treeParserSpec
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_class
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|RULE_REF
operator|)
condition|)
block|{
name|parserSpec
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|rules
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endGrammar
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|NoViableAltException
condition|)
block|{
name|NoViableAltException
name|e
init|=
operator|(
name|NoViableAltException
operator|)
name|ex
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|token
operator|.
name|getType
argument_list|()
operator|==
name|DOC_COMMENT
condition|)
block|{
name|reportError
argument_list|(
literal|"line "
operator|+
name|ex
operator|.
name|line
operator|+
literal|": JAVADOC comments may only prefix rules and grammars"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reportError
argument_list|(
literal|"rule classDef trapped: "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|reportError
argument_list|(
literal|"rule classDef trapped: "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|behavior
operator|.
name|abortGrammar
argument_list|()
expr_stmt|;
name|boolean
name|consuming
init|=
literal|true
decl_stmt|;
comment|// consume everything until the next class definition or EOF
while|while
condition|(
name|consuming
condition|)
block|{
name|consume
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_class
case|:
case|case
name|LITERAL_lexclass
case|:
case|case
name|EOF
case|:
name|consuming
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
DECL|method|id ()
specifier|public
specifier|final
name|Token
name|id
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|idTok
decl_stmt|;
name|Token
name|a
init|=
literal|null
decl_stmt|;
name|Token
name|b
init|=
literal|null
decl_stmt|;
name|idTok
operator|=
literal|null
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TOKEN_REF
case|:
block|{
name|a
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TOKEN_REF
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|idTok
operator|=
name|a
expr_stmt|;
block|}
break|break;
block|}
case|case
name|RULE_REF
case|:
block|{
name|b
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RULE_REF
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|idTok
operator|=
name|b
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|idTok
return|;
block|}
DECL|method|lexerSpec ( String doc )
specifier|public
specifier|final
name|void
name|lexerSpec
parameter_list|(
name|String
name|doc
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|lc
init|=
literal|null
decl_stmt|;
name|Token
name|a
init|=
literal|null
decl_stmt|;
name|Token
name|idTok
decl_stmt|;
name|String
name|sup
init|=
literal|null
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_lexclass
case|:
block|{
name|lc
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_lexclass
argument_list|)
expr_stmt|;
name|idTok
operator|=
name|id
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"warning: line "
operator|+
name|lc
operator|.
name|getLine
argument_list|()
operator|+
literal|": 'lexclass' is deprecated; use 'class X extends Lexer'"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_class
case|:
block|{
name|match
argument_list|(
name|LITERAL_class
argument_list|)
expr_stmt|;
name|idTok
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LITERAL_extends
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_Lexer
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
block|{
name|sup
operator|=
name|superClass
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|startLexer
argument_list|(
name|getFilename
argument_list|()
argument_list|,
name|idTok
argument_list|,
name|sup
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|OPTIONS
case|:
block|{
name|lexerOptionsSpec
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|DOC_COMMENT
case|:
case|case
name|TOKENS
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endOptions
argument_list|()
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TOKENS
case|:
block|{
name|tokensSpec
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|DOC_COMMENT
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ACTION
case|:
block|{
name|a
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refMemberAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|DOC_COMMENT
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|treeParserSpec ( String doc )
specifier|public
specifier|final
name|void
name|treeParserSpec
parameter_list|(
name|String
name|doc
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|a
init|=
literal|null
decl_stmt|;
name|Token
name|idTok
decl_stmt|;
name|String
name|sup
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_class
argument_list|)
expr_stmt|;
name|idTok
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LITERAL_extends
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_TreeParser
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
block|{
name|sup
operator|=
name|superClass
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|startTreeWalker
argument_list|(
name|getFilename
argument_list|()
argument_list|,
name|idTok
argument_list|,
name|sup
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|OPTIONS
case|:
block|{
name|treeParserOptionsSpec
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|DOC_COMMENT
case|:
case|case
name|TOKENS
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endOptions
argument_list|()
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TOKENS
case|:
block|{
name|tokensSpec
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|DOC_COMMENT
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ACTION
case|:
block|{
name|a
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refMemberAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|DOC_COMMENT
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|parserSpec ( String doc )
specifier|public
specifier|final
name|void
name|parserSpec
parameter_list|(
name|String
name|doc
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|a
init|=
literal|null
decl_stmt|;
name|Token
name|idTok
decl_stmt|;
name|String
name|sup
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_class
argument_list|)
expr_stmt|;
name|idTok
operator|=
name|id
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_extends
case|:
block|{
name|match
argument_list|(
name|LITERAL_extends
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_Parser
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
block|{
name|sup
operator|=
name|superClass
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|SEMI
case|:
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"warning: line "
operator|+
name|idTok
operator|.
name|getLine
argument_list|()
operator|+
literal|": use 'class X extends Parser'"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|startParser
argument_list|(
name|getFilename
argument_list|()
argument_list|,
name|idTok
argument_list|,
name|sup
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|OPTIONS
case|:
block|{
name|parserOptionsSpec
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|DOC_COMMENT
case|:
case|case
name|TOKENS
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endOptions
argument_list|()
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TOKENS
case|:
block|{
name|tokensSpec
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|DOC_COMMENT
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ACTION
case|:
block|{
name|a
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refMemberAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|DOC_COMMENT
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|rules ()
specifier|public
specifier|final
name|void
name|rules
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
block|{
name|int
name|_cnt68
init|=
literal|0
decl_stmt|;
name|_loop68
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|rule
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt68
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop68
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt68
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
DECL|method|optionValue ()
specifier|public
specifier|final
name|Token
name|optionValue
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|retval
decl_stmt|;
name|Token
name|sl
init|=
literal|null
decl_stmt|;
name|Token
name|cl
init|=
literal|null
decl_stmt|;
name|Token
name|il
init|=
literal|null
decl_stmt|;
name|retval
operator|=
literal|null
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
block|{
name|retval
operator|=
name|qualifiedID
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
name|sl
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|retval
operator|=
name|sl
expr_stmt|;
block|}
break|break;
block|}
case|case
name|CHAR_LITERAL
case|:
block|{
name|cl
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CHAR_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|retval
operator|=
name|cl
expr_stmt|;
block|}
break|break;
block|}
case|case
name|INT
case|:
block|{
name|il
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|INT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|retval
operator|=
name|il
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|retval
return|;
block|}
DECL|method|parserOptionsSpec ()
specifier|public
specifier|final
name|void
name|parserOptionsSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|idTok
decl_stmt|;
name|Token
name|value
decl_stmt|;
name|match
argument_list|(
name|OPTIONS
argument_list|)
expr_stmt|;
block|{
name|_loop21
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RULE_REF
operator|)
condition|)
block|{
name|idTok
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|value
operator|=
name|optionValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|setGrammarOption
argument_list|(
name|idTok
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop21
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
block|}
DECL|method|treeParserOptionsSpec ()
specifier|public
specifier|final
name|void
name|treeParserOptionsSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|idTok
decl_stmt|;
name|Token
name|value
decl_stmt|;
name|match
argument_list|(
name|OPTIONS
argument_list|)
expr_stmt|;
block|{
name|_loop24
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RULE_REF
operator|)
condition|)
block|{
name|idTok
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|value
operator|=
name|optionValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|setGrammarOption
argument_list|(
name|idTok
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop24
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
block|}
DECL|method|lexerOptionsSpec ()
specifier|public
specifier|final
name|void
name|lexerOptionsSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|idTok
decl_stmt|;
name|Token
name|value
decl_stmt|;
name|BitSet
name|b
decl_stmt|;
name|match
argument_list|(
name|OPTIONS
argument_list|)
expr_stmt|;
block|{
name|_loop27
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_charVocabulary
case|:
block|{
name|match
argument_list|(
name|LITERAL_charVocabulary
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|b
operator|=
name|charSet
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|setCharVocabulary
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
block|{
name|idTok
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|value
operator|=
name|optionValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|setGrammarOption
argument_list|(
name|idTok
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
break|break
name|_loop27
break|;
block|}
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
block|}
DECL|method|charSet ()
specifier|public
specifier|final
name|BitSet
name|charSet
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|BitSet
name|b
decl_stmt|;
name|b
operator|=
literal|null
expr_stmt|;
name|BitSet
name|tmpSet
init|=
literal|null
decl_stmt|;
name|b
operator|=
name|setBlockElement
argument_list|()
expr_stmt|;
block|{
name|_loop34
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|OR
operator|)
condition|)
block|{
name|match
argument_list|(
name|OR
argument_list|)
expr_stmt|;
name|tmpSet
operator|=
name|setBlockElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|b
operator|.
name|orInPlace
argument_list|(
name|tmpSet
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop34
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
return|return
name|b
return|;
block|}
DECL|method|subruleOptionsSpec ()
specifier|public
specifier|final
name|void
name|subruleOptionsSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|idTok
decl_stmt|;
name|Token
name|value
decl_stmt|;
name|match
argument_list|(
name|OPTIONS
argument_list|)
expr_stmt|;
block|{
name|_loop30
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RULE_REF
operator|)
condition|)
block|{
name|idTok
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|value
operator|=
name|optionValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|setSubruleOption
argument_list|(
name|idTok
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop30
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
block|}
comment|/** Match a.b.c.d qualified ids; WILDCARD here is overloaded as  *  id separator; that is, I need a reference to the '.' token.  */
DECL|method|qualifiedID ()
specifier|public
specifier|final
name|Token
name|qualifiedID
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|qidTok
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|Token
name|a
decl_stmt|;
name|a
operator|=
name|id
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|a
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|_loop144
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|WILDCARD
operator|)
condition|)
block|{
name|match
argument_list|(
name|WILDCARD
argument_list|)
expr_stmt|;
name|a
operator|=
name|id
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|a
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop144
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
comment|// can use either TOKEN_REF or RULE_REF; should
comment|// really create a QID or something instead.
name|qidTok
operator|=
operator|new
name|CommonToken
argument_list|(
name|TOKEN_REF
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|qidTok
operator|.
name|setLine
argument_list|(
name|a
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|qidTok
return|;
block|}
DECL|method|setBlockElement ()
specifier|public
specifier|final
name|BitSet
name|setBlockElement
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|BitSet
name|b
decl_stmt|;
name|Token
name|c1
init|=
literal|null
decl_stmt|;
name|Token
name|c2
init|=
literal|null
decl_stmt|;
name|b
operator|=
literal|null
expr_stmt|;
name|int
name|rangeMin
init|=
literal|0
decl_stmt|;
name|c1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CHAR_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|rangeMin
operator|=
name|ANTLRLexer
operator|.
name|tokenTypeForCharLiteral
argument_list|(
name|c1
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|=
name|BitSet
operator|.
name|of
argument_list|(
name|rangeMin
argument_list|)
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|RANGE
case|:
block|{
name|match
argument_list|(
name|RANGE
argument_list|)
expr_stmt|;
name|c2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CHAR_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|int
name|rangeMax
init|=
name|ANTLRLexer
operator|.
name|tokenTypeForCharLiteral
argument_list|(
name|c2
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeMax
operator|<
name|rangeMin
condition|)
block|{
name|tool
operator|.
name|error
argument_list|(
literal|"Malformed range line "
operator|+
name|c1
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|rangeMin
operator|+
literal|1
init|;
name|i
operator|<=
name|rangeMax
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|SEMI
case|:
case|case
name|OR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|b
return|;
block|}
DECL|method|tokensSpec ()
specifier|public
specifier|final
name|void
name|tokensSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|t1
init|=
literal|null
decl_stmt|;
name|Token
name|s1
init|=
literal|null
decl_stmt|;
name|Token
name|s3
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|TOKENS
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt43
init|=
literal|0
decl_stmt|;
name|_loop43
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|STRING_LITERAL
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TOKEN_REF
case|:
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|s1
operator|=
literal|null
expr_stmt|;
block|}
name|t1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TOKEN_REF
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ASSIGN
case|:
block|{
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|s1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|defineToken
argument_list|(
name|t1
argument_list|,
name|s1
argument_list|)
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|OPEN_ELEMENT_OPTION
case|:
block|{
name|tokensSpecOptions
argument_list|(
name|t1
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
name|s3
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|defineToken
argument_list|(
literal|null
argument_list|,
name|s3
argument_list|)
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|OPEN_ELEMENT_OPTION
case|:
block|{
name|tokensSpecOptions
argument_list|(
name|s3
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt43
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop43
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt43
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
block|}
DECL|method|tokensSpecOptions ( Token t )
specifier|public
specifier|final
name|void
name|tokensSpecOptions
parameter_list|(
name|Token
name|t
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|o
init|=
literal|null
decl_stmt|,
name|v
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|OPEN_ELEMENT_OPTION
argument_list|)
expr_stmt|;
name|o
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|v
operator|=
name|optionValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refTokensSpecElementOption
argument_list|(
name|t
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|{
name|_loop46
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SEMI
operator|)
condition|)
block|{
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
name|o
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|v
operator|=
name|optionValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refTokensSpecElementOption
argument_list|(
name|t
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop46
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|CLOSE_ELEMENT_OPTION
argument_list|)
expr_stmt|;
block|}
DECL|method|superClass ()
specifier|public
specifier|final
name|String
name|superClass
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|sup
decl_stmt|;
name|sup
operator|=
literal|null
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|sup
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TOKEN_REF
case|:
block|{
name|match
argument_list|(
name|TOKEN_REF
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RULE_REF
case|:
block|{
name|match
argument_list|(
name|RULE_REF
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
return|return
name|sup
return|;
block|}
DECL|method|rule ()
specifier|public
specifier|final
name|void
name|rule
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|d
init|=
literal|null
decl_stmt|;
name|Token
name|p1
init|=
literal|null
decl_stmt|;
name|Token
name|p2
init|=
literal|null
decl_stmt|;
name|Token
name|p3
init|=
literal|null
decl_stmt|;
name|Token
name|aa
init|=
literal|null
decl_stmt|;
name|Token
name|rt
init|=
literal|null
decl_stmt|;
name|Token
name|a
init|=
literal|null
decl_stmt|;
name|String
name|access
init|=
literal|"public"
decl_stmt|;
name|Token
name|idTok
decl_stmt|;
name|String
name|doc
init|=
literal|null
decl_stmt|;
name|boolean
name|ruleAutoGen
init|=
literal|true
decl_stmt|;
name|blockNesting
operator|=
operator|-
literal|1
expr_stmt|;
comment|// block increments, so -1 to make rule at level 0
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|DOC_COMMENT
case|:
block|{
name|d
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOC_COMMENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|doc
operator|=
name|d
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_protected
case|:
block|{
name|p1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_protected
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|access
operator|=
name|p1
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_public
case|:
block|{
name|p2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_public
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|access
operator|=
name|p2
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_private
case|:
block|{
name|p3
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_private
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|access
operator|=
name|p3
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|idTok
operator|=
name|id
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|BANG
case|:
block|{
name|match
argument_list|(
name|BANG
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|ruleAutoGen
operator|=
literal|false
expr_stmt|;
block|}
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ARG_ACTION
case|:
case|case
name|LITERAL_returns
case|:
case|case
name|COLON
case|:
case|case
name|LITERAL_throws
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|defineRuleName
argument_list|(
name|idTok
argument_list|,
name|access
argument_list|,
name|ruleAutoGen
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ARG_ACTION
case|:
block|{
name|aa
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refArgAction
argument_list|(
name|aa
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|LITERAL_returns
case|:
case|case
name|COLON
case|:
case|case
name|LITERAL_throws
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_returns
case|:
block|{
name|match
argument_list|(
name|LITERAL_returns
argument_list|)
expr_stmt|;
name|rt
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refReturnAction
argument_list|(
name|rt
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|COLON
case|:
case|case
name|LITERAL_throws
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_throws
case|:
block|{
name|throwsSpec
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|COLON
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|OPTIONS
case|:
block|{
name|ruleOptionsSpec
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ACTION
case|:
case|case
name|COLON
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ACTION
case|:
block|{
name|a
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refInitAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|COLON
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_exception
case|:
block|{
name|exceptionGroup
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|ACTION
case|:
case|case
name|DOC_COMMENT
case|:
case|case
name|LITERAL_lexclass
case|:
case|case
name|LITERAL_class
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endRule
argument_list|(
name|idTok
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|throwsSpec ()
specifier|public
specifier|final
name|void
name|throwsSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|t
init|=
literal|null
decl_stmt|;
name|Token
name|a
decl_stmt|,
name|b
decl_stmt|;
name|match
argument_list|(
name|LITERAL_throws
argument_list|)
expr_stmt|;
name|a
operator|=
name|id
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|t
operator|=
name|a
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|{
name|_loop84
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|b
operator|=
name|id
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|t
operator|+=
literal|","
operator|+
name|b
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop84
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|setUserExceptions
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ruleOptionsSpec ()
specifier|public
specifier|final
name|void
name|ruleOptionsSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|idTok
decl_stmt|;
name|Token
name|value
decl_stmt|;
name|match
argument_list|(
name|OPTIONS
argument_list|)
expr_stmt|;
block|{
name|_loop81
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RULE_REF
operator|)
condition|)
block|{
name|idTok
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|value
operator|=
name|optionValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|setRuleOption
argument_list|(
name|idTok
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop81
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
block|}
DECL|method|block ()
specifier|public
specifier|final
name|void
name|block
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|blockNesting
operator|++
expr_stmt|;
block|}
name|alternative
argument_list|()
expr_stmt|;
block|{
name|_loop87
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|OR
operator|)
condition|)
block|{
name|match
argument_list|(
name|OR
argument_list|)
expr_stmt|;
name|alternative
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop87
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|blockNesting
operator|--
expr_stmt|;
block|}
block|}
DECL|method|exceptionGroup ()
specifier|public
specifier|final
name|void
name|exceptionGroup
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|beginExceptionGroup
argument_list|()
expr_stmt|;
block|}
block|{
name|int
name|_cnt95
init|=
literal|0
decl_stmt|;
name|_loop95
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_exception
operator|)
condition|)
block|{
name|exceptionSpec
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt95
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop95
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt95
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endExceptionGroup
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|alternative ()
specifier|public
specifier|final
name|void
name|alternative
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|boolean
name|altAutoGen
init|=
literal|true
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|BANG
case|:
block|{
name|match
argument_list|(
name|BANG
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|altAutoGen
operator|=
literal|false
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|beginAlt
argument_list|(
name|altAutoGen
argument_list|)
expr_stmt|;
block|}
block|{
name|_loop91
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|element
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop91
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_exception
case|:
block|{
name|exceptionSpecNoLabel
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
case|case
name|OR
case|:
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endAlt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|element ()
specifier|public
specifier|final
name|void
name|element
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|elementNoOptionSpec
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|OPEN_ELEMENT_OPTION
case|:
block|{
name|elementOptionSpec
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|exceptionSpecNoLabel ()
specifier|public
specifier|final
name|void
name|exceptionSpecNoLabel
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|match
argument_list|(
name|LITERAL_exception
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|beginExceptionSpec
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|{
name|_loop102
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_catch
operator|)
condition|)
block|{
name|exceptionHandler
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop102
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endExceptionSpec
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|exceptionSpec ()
specifier|public
specifier|final
name|void
name|exceptionSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|aa
init|=
literal|null
decl_stmt|;
name|Token
name|labelAction
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_exception
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ARG_ACTION
case|:
block|{
name|aa
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|labelAction
operator|=
name|aa
expr_stmt|;
block|}
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|ACTION
case|:
case|case
name|DOC_COMMENT
case|:
case|case
name|LITERAL_lexclass
case|:
case|case
name|LITERAL_class
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|RULE_REF
case|:
case|case
name|LITERAL_protected
case|:
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|LITERAL_catch
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|beginExceptionSpec
argument_list|(
name|labelAction
argument_list|)
expr_stmt|;
block|}
block|{
name|_loop99
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_catch
operator|)
condition|)
block|{
name|exceptionHandler
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop99
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endExceptionSpec
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|exceptionHandler ()
specifier|public
specifier|final
name|void
name|exceptionHandler
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|a1
init|=
literal|null
decl_stmt|;
name|Token
name|a2
init|=
literal|null
decl_stmt|;
name|Token
name|exType
decl_stmt|;
name|Token
name|exName
decl_stmt|;
name|match
argument_list|(
name|LITERAL_catch
argument_list|)
expr_stmt|;
name|a1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
name|a2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refExceptionHandler
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|elementNoOptionSpec ()
specifier|public
specifier|final
name|void
name|elementNoOptionSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|rr
init|=
literal|null
decl_stmt|;
name|Token
name|aa
init|=
literal|null
decl_stmt|;
name|Token
name|tr
init|=
literal|null
decl_stmt|;
name|Token
name|aa2
init|=
literal|null
decl_stmt|;
name|Token
name|r2
init|=
literal|null
decl_stmt|;
name|Token
name|aa3
init|=
literal|null
decl_stmt|;
name|Token
name|a
init|=
literal|null
decl_stmt|;
name|Token
name|p
init|=
literal|null
decl_stmt|;
name|Token
name|label
init|=
literal|null
decl_stmt|;
name|Token
name|assignId
init|=
literal|null
decl_stmt|;
name|Token
name|args
init|=
literal|null
decl_stmt|;
name|int
name|autoGen
init|=
name|GrammarElement
operator|.
name|AUTO_GEN_NONE
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ACTION
case|:
block|{
name|a
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SEMPRED
case|:
block|{
name|p
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMPRED
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refSemPred
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|TREE_BEGIN
case|:
block|{
name|tree
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RULE_REF
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|ASSIGN
operator|)
condition|)
block|{
name|assignId
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RULE_REF
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|COLON
operator|)
condition|)
block|{
name|label
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|checkForMissingEndRule
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RULE_REF
operator|)
operator|&&
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{ 				}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|RULE_REF
case|:
block|{
name|rr
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RULE_REF
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ARG_ACTION
case|:
block|{
name|aa
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|args
operator|=
name|aa
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|BANG
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|BANG
case|:
block|{
name|match
argument_list|(
name|BANG
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|autoGen
operator|=
name|GrammarElement
operator|.
name|AUTO_GEN_BANG
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refRule
argument_list|(
name|assignId
argument_list|,
name|rr
argument_list|,
name|label
argument_list|,
name|args
argument_list|,
name|autoGen
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|TOKEN_REF
case|:
block|{
name|tr
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TOKEN_REF
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ARG_ACTION
case|:
block|{
name|aa2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|args
operator|=
name|aa2
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refToken
argument_list|(
name|assignId
argument_list|,
name|tr
argument_list|,
name|label
argument_list|,
name|args
argument_list|,
literal|false
argument_list|,
name|autoGen
argument_list|,
name|lastInRule
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_5
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RULE_REF
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|COLON
operator|)
condition|)
block|{
name|label
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|checkForMissingEndRule
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{ 				}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|RULE_REF
case|:
block|{
name|r2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RULE_REF
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ARG_ACTION
case|:
block|{
name|aa3
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|args
operator|=
name|aa3
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|BANG
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|BANG
case|:
block|{
name|match
argument_list|(
name|BANG
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|autoGen
operator|=
name|GrammarElement
operator|.
name|AUTO_GEN_BANG
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refRule
argument_list|(
name|assignId
argument_list|,
name|r2
argument_list|,
name|label
argument_list|,
name|args
argument_list|,
name|autoGen
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|NOT_OP
case|:
block|{
name|match
argument_list|(
name|NOT_OP
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|CHAR_LITERAL
case|:
case|case
name|TOKEN_REF
case|:
block|{
name|notTerminal
argument_list|(
name|label
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LPAREN
case|:
block|{
name|ebnf
argument_list|(
name|label
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|LPAREN
case|:
block|{
name|ebnf
argument_list|(
name|label
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|STRING_LITERAL
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|CHAR_LITERAL
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|RANGE
operator|)
condition|)
block|{
name|range
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_7
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_8
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|terminal
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|elementOptionSpec ()
specifier|public
specifier|final
name|void
name|elementOptionSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|o
init|=
literal|null
decl_stmt|,
name|v
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|OPEN_ELEMENT_OPTION
argument_list|)
expr_stmt|;
name|o
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|v
operator|=
name|optionValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refElementOption
argument_list|(
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|{
name|_loop108
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SEMI
operator|)
condition|)
block|{
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
name|o
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|v
operator|=
name|optionValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refElementOption
argument_list|(
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop108
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|CLOSE_ELEMENT_OPTION
argument_list|)
expr_stmt|;
block|}
DECL|method|range ( Token label )
specifier|public
specifier|final
name|void
name|range
parameter_list|(
name|Token
name|label
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|crLeft
init|=
literal|null
decl_stmt|;
name|Token
name|crRight
init|=
literal|null
decl_stmt|;
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|Token
name|u
init|=
literal|null
decl_stmt|;
name|Token
name|v
init|=
literal|null
decl_stmt|;
name|Token
name|w
init|=
literal|null
decl_stmt|;
name|Token
name|trLeft
init|=
literal|null
decl_stmt|;
name|Token
name|trRight
init|=
literal|null
decl_stmt|;
name|int
name|autoGen
init|=
name|GrammarElement
operator|.
name|AUTO_GEN_NONE
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|CHAR_LITERAL
case|:
block|{
name|crLeft
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CHAR_LITERAL
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RANGE
argument_list|)
expr_stmt|;
name|crRight
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CHAR_LITERAL
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|BANG
case|:
block|{
name|match
argument_list|(
name|BANG
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|autoGen
operator|=
name|GrammarElement
operator|.
name|AUTO_GEN_BANG
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refCharRange
argument_list|(
name|crLeft
argument_list|,
name|crRight
argument_list|,
name|label
argument_list|,
name|autoGen
argument_list|,
name|lastInRule
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|TOKEN_REF
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TOKEN_REF
case|:
block|{
name|t
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TOKEN_REF
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|trLeft
operator|=
name|t
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
name|u
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|trLeft
operator|=
name|u
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RANGE
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|TOKEN_REF
case|:
block|{
name|v
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TOKEN_REF
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|trRight
operator|=
name|v
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
name|w
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|trRight
operator|=
name|w
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|autoGen
operator|=
name|ast_type_spec
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refTokenRange
argument_list|(
name|trLeft
argument_list|,
name|trRight
argument_list|,
name|label
argument_list|,
name|autoGen
argument_list|,
name|lastInRule
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|terminal ( Token label )
specifier|public
specifier|final
name|void
name|terminal
parameter_list|(
name|Token
name|label
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|cl
init|=
literal|null
decl_stmt|;
name|Token
name|tr
init|=
literal|null
decl_stmt|;
name|Token
name|aa
init|=
literal|null
decl_stmt|;
name|Token
name|sl
init|=
literal|null
decl_stmt|;
name|Token
name|wi
init|=
literal|null
decl_stmt|;
name|int
name|autoGen
init|=
name|GrammarElement
operator|.
name|AUTO_GEN_NONE
decl_stmt|;
name|Token
name|args
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|CHAR_LITERAL
case|:
block|{
name|cl
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CHAR_LITERAL
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|BANG
case|:
block|{
name|match
argument_list|(
name|BANG
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|autoGen
operator|=
name|GrammarElement
operator|.
name|AUTO_GEN_BANG
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refCharLiteral
argument_list|(
name|cl
argument_list|,
name|label
argument_list|,
literal|false
argument_list|,
name|autoGen
argument_list|,
name|lastInRule
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|TOKEN_REF
case|:
block|{
name|tr
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TOKEN_REF
argument_list|)
expr_stmt|;
name|autoGen
operator|=
name|ast_type_spec
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ARG_ACTION
case|:
block|{
name|aa
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ARG_ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|args
operator|=
name|aa
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refToken
argument_list|(
literal|null
argument_list|,
name|tr
argument_list|,
name|label
argument_list|,
name|args
argument_list|,
literal|false
argument_list|,
name|autoGen
argument_list|,
name|lastInRule
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
name|sl
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|autoGen
operator|=
name|ast_type_spec
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refStringLiteral
argument_list|(
name|sl
argument_list|,
name|label
argument_list|,
name|autoGen
argument_list|,
name|lastInRule
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|WILDCARD
case|:
block|{
name|wi
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WILDCARD
argument_list|)
expr_stmt|;
name|autoGen
operator|=
name|ast_type_spec
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refWildcard
argument_list|(
name|wi
argument_list|,
name|label
argument_list|,
name|autoGen
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|notTerminal ( Token label )
specifier|public
specifier|final
name|void
name|notTerminal
parameter_list|(
name|Token
name|label
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|cl
init|=
literal|null
decl_stmt|;
name|Token
name|tr
init|=
literal|null
decl_stmt|;
name|int
name|autoGen
init|=
name|GrammarElement
operator|.
name|AUTO_GEN_NONE
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|CHAR_LITERAL
case|:
block|{
name|cl
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CHAR_LITERAL
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|BANG
case|:
block|{
name|match
argument_list|(
name|BANG
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|autoGen
operator|=
name|GrammarElement
operator|.
name|AUTO_GEN_BANG
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refCharLiteral
argument_list|(
name|cl
argument_list|,
name|label
argument_list|,
literal|true
argument_list|,
name|autoGen
argument_list|,
name|lastInRule
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|TOKEN_REF
case|:
block|{
name|tr
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TOKEN_REF
argument_list|)
expr_stmt|;
name|autoGen
operator|=
name|ast_type_spec
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refToken
argument_list|(
literal|null
argument_list|,
name|tr
argument_list|,
name|label
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|autoGen
argument_list|,
name|lastInRule
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|ebnf ( Token label, boolean not )
specifier|public
specifier|final
name|void
name|ebnf
parameter_list|(
name|Token
name|label
parameter_list|,
name|boolean
name|not
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|lp
init|=
literal|null
decl_stmt|;
name|Token
name|aa
init|=
literal|null
decl_stmt|;
name|Token
name|ab
init|=
literal|null
decl_stmt|;
name|lp
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|beginSubRule
argument_list|(
name|label
argument_list|,
name|lp
operator|.
name|getLine
argument_list|()
argument_list|,
name|not
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|OPTIONS
operator|)
condition|)
block|{
name|subruleOptionsSpec
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ACTION
case|:
block|{
name|aa
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refInitAction
argument_list|(
name|aa
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|COLON
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|ACTION
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|COLON
operator|)
condition|)
block|{
name|ab
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|refInitAction
argument_list|(
name|ab
argument_list|)
expr_stmt|;
block|}
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_9
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_10
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{ 		}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|block
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|BANG
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|QUESTION
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|WILDCARD
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|QUESTION
case|:
block|{
name|match
argument_list|(
name|QUESTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|optionalSubRule
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STAR
case|:
block|{
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|zeroOrMoreSubRule
argument_list|()
expr_stmt|;
empty_stmt|;
block|}
break|break;
block|}
case|case
name|PLUS
case|:
block|{
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|oneOrMoreSubRule
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|BANG
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|BANG
case|:
block|{
name|match
argument_list|(
name|BANG
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|noASTSubRule
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|IMPLIES
case|:
block|{
name|match
argument_list|(
name|IMPLIES
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|synPred
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endSubRule
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|tree ()
specifier|public
specifier|final
name|void
name|tree
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|lp
init|=
literal|null
decl_stmt|;
name|lp
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TREE_BEGIN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|beginTree
argument_list|(
name|lp
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rootNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|beginChildList
argument_list|()
expr_stmt|;
block|}
block|{
name|int
name|_cnt122
init|=
literal|0
decl_stmt|;
name|_loop122
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|element
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt122
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop122
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt122
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endChildList
argument_list|()
expr_stmt|;
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|behavior
operator|.
name|endTree
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|rootNode ()
specifier|public
specifier|final
name|void
name|rootNode
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|Token
name|label
init|=
literal|null
decl_stmt|;
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|TOKEN_REF
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RULE_REF
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|COLON
operator|)
condition|)
block|{
name|label
operator|=
name|id
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|checkForMissingEndRule
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_7
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_11
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{ 		}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|terminal
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
DECL|method|ast_type_spec ()
specifier|public
specifier|final
name|int
name|ast_type_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|int
name|autoGen
decl_stmt|;
name|autoGen
operator|=
name|GrammarElement
operator|.
name|AUTO_GEN_NONE
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|CARET
case|:
block|{
name|match
argument_list|(
name|CARET
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|autoGen
operator|=
name|GrammarElement
operator|.
name|AUTO_GEN_CARET
expr_stmt|;
block|}
break|break;
block|}
case|case
name|BANG
case|:
block|{
name|match
argument_list|(
name|BANG
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|autoGen
operator|=
name|GrammarElement
operator|.
name|AUTO_GEN_BANG
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|ACTION
case|:
case|case
name|SEMI
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|OR
case|:
case|case
name|TOKEN_REF
case|:
case|case
name|OPEN_ELEMENT_OPTION
case|:
case|case
name|LPAREN
case|:
case|case
name|RULE_REF
case|:
case|case
name|RPAREN
case|:
case|case
name|ARG_ACTION
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|NOT_OP
case|:
case|case
name|SEMPRED
case|:
case|case
name|TREE_BEGIN
case|:
case|case
name|WILDCARD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|autoGen
return|;
block|}
DECL|field|_tokenNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|_tokenNames
init|=
block|{
literal|"<0>"
block|,
literal|"EOF"
block|,
literal|"<2>"
block|,
literal|"NULL_TREE_LOOKAHEAD"
block|,
literal|"\"tokens\""
block|,
literal|"\"header\""
block|,
literal|"STRING_LITERAL"
block|,
literal|"ACTION"
block|,
literal|"DOC_COMMENT"
block|,
literal|"\"lexclass\""
block|,
literal|"\"class\""
block|,
literal|"\"extends\""
block|,
literal|"\"Lexer\""
block|,
literal|"\"TreeParser\""
block|,
literal|"OPTIONS"
block|,
literal|"ASSIGN"
block|,
literal|"SEMI"
block|,
literal|"RCURLY"
block|,
literal|"\"charVocabulary\""
block|,
literal|"CHAR_LITERAL"
block|,
literal|"INT"
block|,
literal|"OR"
block|,
literal|"RANGE"
block|,
literal|"TOKENS"
block|,
literal|"TOKEN_REF"
block|,
literal|"OPEN_ELEMENT_OPTION"
block|,
literal|"CLOSE_ELEMENT_OPTION"
block|,
literal|"LPAREN"
block|,
literal|"RULE_REF"
block|,
literal|"RPAREN"
block|,
literal|"\"Parser\""
block|,
literal|"\"protected\""
block|,
literal|"\"public\""
block|,
literal|"\"private\""
block|,
literal|"BANG"
block|,
literal|"ARG_ACTION"
block|,
literal|"\"returns\""
block|,
literal|"COLON"
block|,
literal|"\"throws\""
block|,
literal|"COMMA"
block|,
literal|"\"exception\""
block|,
literal|"\"catch\""
block|,
literal|"NOT_OP"
block|,
literal|"SEMPRED"
block|,
literal|"TREE_BEGIN"
block|,
literal|"QUESTION"
block|,
literal|"STAR"
block|,
literal|"PLUS"
block|,
literal|"IMPLIES"
block|,
literal|"CARET"
block|,
literal|"WILDCARD"
block|,
literal|"\"options\""
block|,
literal|"WS"
block|,
literal|"COMMENT"
block|,
literal|"SL_COMMENT"
block|,
literal|"ML_COMMENT"
block|,
literal|"ESC"
block|,
literal|"DIGIT"
block|,
literal|"XDIGIT"
block|,
literal|"VOCAB"
block|,
literal|"NESTED_ARG_ACTION"
block|,
literal|"NESTED_ACTION"
block|,
literal|"WS_LOOP"
block|,
literal|"INTERNAL_RULE_REF"
block|,
literal|"WS_OPT"
block|,
literal|"NOT_USEFUL"
block|}
decl_stmt|;
DECL|field|_tokenSet_0_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_0_data_
index|[]
init|=
block|{
literal|15317598464L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_0
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_0_data_
argument_list|)
decl_stmt|;
DECL|field|_tokenSet_1_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_1_data_
index|[]
init|=
block|{
literal|547893559424L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_1
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_1_data_
argument_list|)
decl_stmt|;
DECL|field|_tokenSet_2_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_2_data_
index|[]
init|=
block|{
literal|1156686652375232L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_2
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_2
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_2_data_
argument_list|)
decl_stmt|;
DECL|field|_tokenSet_3_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_3_data_
index|[]
init|=
block|{
literal|1157838276198592L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_3
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_3
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_3_data_
argument_list|)
decl_stmt|;
DECL|field|_tokenSet_4_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_4_data_
index|[]
init|=
block|{
literal|1130298373308480L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_4
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_4
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_4_data_
argument_list|)
decl_stmt|;
DECL|field|_tokenSet_5_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_5_data_
index|[]
init|=
block|{
literal|1720925672784064L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_5
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_5
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_5_data_
argument_list|)
decl_stmt|;
DECL|field|_tokenSet_6_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_6_data_
index|[]
init|=
block|{
literal|1720788233830592L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_6
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_6
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_6_data_
argument_list|)
decl_stmt|;
DECL|field|_tokenSet_7_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_7_data_
index|[]
init|=
block|{
literal|1125899924144192L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_7
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_7
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_7_data_
argument_list|)
decl_stmt|;
DECL|field|_tokenSet_8_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_8_data_
index|[]
init|=
block|{
literal|1720788229619904L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_8
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_8
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_8_data_
argument_list|)
decl_stmt|;
DECL|field|_tokenSet_9_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_9_data_
index|[]
init|=
block|{
literal|1157803882840256L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_9
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_9
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_9_data_
argument_list|)
decl_stmt|;
DECL|field|_tokenSet_10_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_10_data_
index|[]
init|=
block|{
literal|2250890277404864L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_10
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_10
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_10_data_
argument_list|)
decl_stmt|;
DECL|field|_tokenSet_11_data_
specifier|private
specifier|static
specifier|final
name|long
name|_tokenSet_11_data_
index|[]
init|=
block|{
literal|1719688145404096L
block|,
literal|0L
block|}
decl_stmt|;
DECL|field|_tokenSet_11
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_11
init|=
operator|new
name|BitSet
argument_list|(
name|_tokenSet_11_data_
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

