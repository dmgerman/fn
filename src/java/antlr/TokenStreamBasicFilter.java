begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|antlr
package|package
name|antlr
package|;
end_package

begin_comment
comment|/* ANTLR Translator Generator  * Project led by Terence Parr at http://www.jGuru.com  * Software rights: http://www.antlr.org/license.html  *  * $Id$  */
end_comment

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_comment
comment|/** This object is a TokenStream that passes through all  *  tokens except for those that you tell it to discard.  *  There is no buffering of the tokens.  */
end_comment

begin_class
DECL|class|TokenStreamBasicFilter
specifier|public
class|class
name|TokenStreamBasicFilter
implements|implements
name|TokenStream
block|{
comment|/** The set of token types to discard */
DECL|field|discardMask
specifier|protected
name|BitSet
name|discardMask
decl_stmt|;
comment|/** The input stream */
DECL|field|input
specifier|protected
name|TokenStream
name|input
decl_stmt|;
DECL|method|TokenStreamBasicFilter (TokenStream input)
specifier|public
name|TokenStreamBasicFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|discardMask
operator|=
operator|new
name|BitSet
argument_list|()
expr_stmt|;
block|}
DECL|method|discard (int ttype)
specifier|public
name|void
name|discard
parameter_list|(
name|int
name|ttype
parameter_list|)
block|{
name|discardMask
operator|.
name|add
argument_list|(
name|ttype
argument_list|)
expr_stmt|;
block|}
DECL|method|discard (BitSet mask)
specifier|public
name|void
name|discard
parameter_list|(
name|BitSet
name|mask
parameter_list|)
block|{
name|discardMask
operator|=
name|mask
expr_stmt|;
block|}
DECL|method|nextToken ()
specifier|public
name|Token
name|nextToken
parameter_list|()
throws|throws
name|TokenStreamException
block|{
name|Token
name|tok
init|=
name|input
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|discardMask
operator|.
name|member
argument_list|(
name|tok
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|tok
operator|=
name|input
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|tok
return|;
block|}
block|}
end_class

end_unit

