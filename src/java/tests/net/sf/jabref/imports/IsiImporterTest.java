begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|tests.net.sf.jabref.imports
package|package
name|tests
operator|.
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntryType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|IsiImporter
import|;
end_import

begin_comment
comment|/**  * Test cases for the IsiImporter  *   * @author $Author$  * @version $Revision$ ($Date$)  *  */
end_comment

begin_class
DECL|class|IsiImporterTest
specifier|public
class|class
name|IsiImporterTest
extends|extends
name|TestCase
block|{
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|==
literal|null
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsRecognizedFormat ()
specifier|public
name|void
name|testIsRecognizedFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|IsiImporter
name|importer
init|=
operator|new
name|IsiImporter
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|isRecognizedFormat
argument_list|(
name|IsiImporterTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"IsiImporterTest1.isi"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Current detection works based on years. This is scetchy.
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testImportEntries ()
specifier|public
name|void
name|testImportEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|IsiImporter
name|importer
init|=
operator|new
name|IsiImporter
argument_list|()
decl_stmt|;
name|List
name|entries
init|=
name|importer
operator|.
name|importEntries
argument_list|(
name|IsiImporterTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"IsiImporterTest1.isi"
argument_list|)
argument_list|)
decl_stmt|;
comment|// new
comment|// FileInputStream("tests/net/sf/jabref/imports/IsiImporterTest1.isi"));//new
comment|// ByteArrayInputStream(test1.getBytes()));
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Optical properties of MgO doped LiNbO/sub 3/ single crystals"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"James Brown and James Marc Brown and Brown, J. M. and Brown, J. and Brown, J. M. and Brown, J."
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BibtexEntryType
operator|.
name|ARTICLE
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Optical Materials"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"journal"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2006"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"28"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"volume"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"number"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"467--472"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
argument_list|)
expr_stmt|;
comment|// What todo with PD and UT?
block|}
DECL|method|testIsiAuthorsConvert ()
specifier|public
name|void
name|testIsiAuthorsConvert
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"James Brown and James Marc Brown and Brown, J. M. and Brown, J. and Brown, J. M. and Brown, J."
argument_list|,
name|IsiImporter
operator|.
name|isiAuthorsConvert
argument_list|(
literal|"James Brown and James Marc Brown and Brown, J.M. and Brown, J. and Brown, J.M. and Brown, J."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsiAuthorConvert ()
specifier|public
name|void
name|testIsiAuthorConvert
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"James Brown"
argument_list|,
name|IsiImporter
operator|.
name|isiAuthorConvert
argument_list|(
literal|"James Brown"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"James Marc Brown"
argument_list|,
name|IsiImporter
operator|.
name|isiAuthorConvert
argument_list|(
literal|"James Marc Brown"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Brown, J. M."
argument_list|,
name|IsiImporter
operator|.
name|isiAuthorConvert
argument_list|(
literal|"Brown, J.M."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Brown, J."
argument_list|,
name|IsiImporter
operator|.
name|isiAuthorConvert
argument_list|(
literal|"Brown, J."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Brown, J. M."
argument_list|,
name|IsiImporter
operator|.
name|isiAuthorConvert
argument_list|(
literal|"Brown, JM"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Brown, J."
argument_list|,
name|IsiImporter
operator|.
name|isiAuthorConvert
argument_list|(
literal|"Brown, J"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|IsiImporter
operator|.
name|isiAuthorConvert
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetExtensions ()
specifier|public
name|void
name|testGetExtensions
parameter_list|()
block|{
comment|// new IsiImporter().getExtensions();
block|}
DECL|method|testGetIsCustomImporter ()
specifier|public
name|void
name|testGetIsCustomImporter
parameter_list|()
block|{
name|IsiImporter
name|importer
init|=
operator|new
name|IsiImporter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|importer
operator|.
name|getIsCustomImporter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

