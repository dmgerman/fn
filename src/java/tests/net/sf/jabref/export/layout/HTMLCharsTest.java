begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|tests.net.sf.jabref.export.layout
package|package
name|tests
operator|.
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|LayoutFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
operator|.
name|HTMLChars
import|;
end_import

begin_class
DECL|class|HTMLCharsTest
specifier|public
class|class
name|HTMLCharsTest
extends|extends
name|TestCase
block|{
DECL|method|testBasicFormat ()
specifier|public
name|void
name|testBasicFormat
parameter_list|()
block|{
name|LayoutFormatter
name|layout
init|=
operator|new
name|HTMLChars
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"hallo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Réflexions sur le timing de la quantité"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"Réflexions sur le timing de la quantité"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"h&aacute;llo"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"h\\'allo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&#305;&#305;"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"\\i \\i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&#305;"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"\\i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&#305;"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"\\{i}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&#305;&#305;"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"\\i\\i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&#319;&#305;"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"\\Lmidot\\i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&ntilde;&ntilde;&iacute;&#305;&#305;"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"\\~{n} \\~n \\'i \\i \\i"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLaTeXHighlighting ()
specifier|public
name|void
name|testLaTeXHighlighting
parameter_list|()
block|{
name|LayoutFormatter
name|layout
init|=
operator|new
name|HTMLChars
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<em>hallo</em>"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"\\emph{hallo}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<em>hallo</em>"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"{\\emph hallo}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<em>hallo</em>"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"\\textit{hallo}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<em>hallo</em>"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"{\\textit hallo}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>hallo</b>"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"\\textbf{hallo}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>hallo</b>"
argument_list|,
name|layout
operator|.
name|format
argument_list|(
literal|"{\\textbf hallo}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Is missing a lot of test cases for the individual chars... 	 */
block|}
end_class

end_unit

