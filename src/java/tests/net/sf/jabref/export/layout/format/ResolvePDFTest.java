begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|tests.net.sf.jabref.export.layout.format
package|package
name|tests
operator|.
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|LayoutFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
operator|.
name|ResolvePDF
import|;
end_import

begin_import
import|import
name|tests
operator|.
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|FileBasedTestCase
import|;
end_import

begin_comment
comment|/**  * Testing the PDF resolver.  *   * @author $Author$  * @version $Revision$ ($Date$)  *  */
end_comment

begin_class
DECL|class|ResolvePDFTest
specifier|public
class|class
name|ResolvePDFTest
extends|extends
name|FileBasedTestCase
block|{
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testFormat ()
specifier|public
name|void
name|testFormat
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|LayoutFormatter
name|pdf
init|=
operator|new
name|ResolvePDF
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|pdf
operator|.
name|format
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|/* 		 * Check one that will be found 		 */
name|String
name|result
init|=
name|pdf
operator|.
name|format
argument_list|(
literal|"Organization Science\\HipKro03 - Hello.pdf"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|startsWith
argument_list|(
literal|"file:/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|endsWith
argument_list|(
literal|"/Organization%20Science/HipKro03%20-%20Hello.pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should not contain a backslash:
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|result
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|/* 		 * And one that is not to be found 		 */
name|result
operator|=
name|pdf
operator|.
name|format
argument_list|(
literal|"Organization Science/Does not exist.pdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Organization Science/Does not exist.pdf"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

