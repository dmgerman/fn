begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|tests.net.sf.jabref
package|package
name|tests
operator|.
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|ParserResult
import|;
end_import

begin_comment
comment|/**  * Testing Util.findFile for finding files based on regular expressions.  *   * @author Christopher Oezbek<oezi@oezi.de>  */
end_comment

begin_class
DECL|class|UtilFindFileTest
specifier|public
class|class
name|UtilFindFileTest
extends|extends
name|TestCase
block|{
DECL|method|findFile (String dir, String file)
name|String
name|findFile
parameter_list|(
name|String
name|dir
parameter_list|,
name|String
name|file
parameter_list|)
block|{
return|return
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|dir
argument_list|,
name|file
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** 	 * Test that more than one slash is taken to mean that a relative path is to 	 * be returned. 	 *  	 * @throws IOException 	 */
DECL|method|testFindFileRelative ()
specifier|public
name|void
name|testFindFileRelative
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Most basic case
name|assertEqualPaths
argument_list|(
literal|"HipKro03.pdf"
argument_list|,
name|findFile
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"[bibtexkey].pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Including directory
name|assertEqualPaths
argument_list|(
literal|"test/HipKro03.pdf"
argument_list|,
name|findFile
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"test/[bibtexkey].pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No relative paths
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/test/HipKro03.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|findFile
argument_list|(
literal|null
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
operator|+
literal|"[bibtexkey].pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No relative paths
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/test/HipKro03.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
operator|+
literal|"[bibtexkey].pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFindPdf ()
specifier|public
name|void
name|testFindPdf
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|String
name|pdf
init|=
name|Util
operator|.
name|findPdf
argument_list|(
name|entry
argument_list|,
literal|"pdf"
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEqualPaths
argument_list|(
literal|"HipKro03 - Hello.pdf"
argument_list|,
name|pdf
argument_list|)
expr_stmt|;
name|File
name|fullPath
init|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|String
name|pdf
init|=
name|Util
operator|.
name|findPdf
argument_list|(
name|entry
argument_list|,
literal|"pdf"
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/"
argument_list|)
decl_stmt|;
name|assertEqualPaths
argument_list|(
literal|"sub/HipKro03-sub.pdf"
argument_list|,
name|pdf
argument_list|)
expr_stmt|;
name|File
name|fullPath
init|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFindPdfInMultiple ()
specifier|public
name|void
name|testFindPdfInMultiple
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|String
index|[]
name|dirsToSearch
init|=
operator|new
name|String
index|[]
block|{
name|root
operator|.
name|getAbsolutePath
argument_list|()
block|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/"
block|}
decl_stmt|;
name|String
name|pdf
init|=
name|Util
operator|.
name|findPdf
argument_list|(
name|entry
argument_list|,
literal|"pdf"
argument_list|,
name|dirsToSearch
argument_list|)
decl_stmt|;
name|assertEqualPaths
argument_list|(
literal|"HipKro03 - Hello.pdf"
argument_list|,
name|pdf
argument_list|)
expr_stmt|;
name|File
name|fullPath
init|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|dirsToSearch
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/HipKro03 - Hello.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tmp
init|=
name|dirsToSearch
index|[
literal|1
index|]
decl_stmt|;
name|dirsToSearch
index|[
literal|1
index|]
operator|=
name|dirsToSearch
index|[
literal|0
index|]
expr_stmt|;
name|dirsToSearch
index|[
literal|0
index|]
operator|=
name|tmp
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|dirsToSearch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/HipKro03 - Hello.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
operator|new
name|String
index|[]
block|{
name|dirsToSearch
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|fullPath
argument_list|)
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
operator|new
name|String
index|[]
block|{
name|dirsToSearch
index|[
literal|1
index|]
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/HipKro03 - Hello.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|String
index|[]
name|dirsToSearch
init|=
operator|new
name|String
index|[]
block|{
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/"
block|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|String
name|pdf
init|=
name|Util
operator|.
name|findPdf
argument_list|(
name|entry
argument_list|,
literal|"pdf"
argument_list|,
name|dirsToSearch
argument_list|)
decl_stmt|;
name|assertEqualPaths
argument_list|(
literal|"sub/HipKro03-sub.pdf"
argument_list|,
name|pdf
argument_list|)
expr_stmt|;
name|File
name|fullPath
init|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|dirsToSearch
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/sub/HipKro03-sub.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tmp
init|=
name|dirsToSearch
index|[
literal|1
index|]
decl_stmt|;
name|dirsToSearch
index|[
literal|1
index|]
operator|=
name|dirsToSearch
index|[
literal|0
index|]
expr_stmt|;
name|dirsToSearch
index|[
literal|0
index|]
operator|=
name|tmp
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|dirsToSearch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/sub/HipKro03-sub.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
operator|new
name|String
index|[]
block|{
name|dirsToSearch
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|fullPath
argument_list|)
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
operator|new
name|String
index|[]
block|{
name|dirsToSearch
index|[
literal|1
index|]
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/sub/HipKro03-sub.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFindFile ()
specifier|public
name|void
name|testFindFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Simple case
name|assertEqualPaths
argument_list|(
literal|"HipKro03.pdf"
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"[bibtexkey].pdf"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not found
name|assertEqualPaths
argument_list|(
literal|null
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"Not there [bibtexkey].pdf"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test current dir
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
argument_list|,
literal|"build.xml"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
literal|"./build.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
literal|"build.xml"
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
literal|"."
argument_list|,
literal|"build.xml"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test keys in path and regular expression in file
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/2003/Paper by HipKro03.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/[year]/.*[bibtexkey].pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test . and ..
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/Organization Science/HipKro03 - Hello.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/[year]/../2003/.././././[journal]\\"
operator|+
literal|".*[bibtexkey].*.pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test Escape
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/Organization Science/HipKro03 - Hello.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/*/"
operator|+
literal|"[bibtexkey] - Hello\\\\.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
literal|"TE.ST"
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"TE\\\\.ST"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
literal|".TEST"
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"\\\\.TEST"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
literal|"TEST["
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"TEST\\\\["
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test *
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/Organization Science/HipKro03 - Hello.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/*/"
operator|+
literal|"[bibtexkey].+?.pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test **
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/pdfs/sub/HipKro03-sub.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/**/"
operator|+
literal|"[bibtexkey]-sub.pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test ** - Find in level itself too
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/pdfs/sub/HipKro03-sub.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/sub/**/"
operator|+
literal|"[bibtexkey]-sub.pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test ** - Find lowest level first (Rest is Depth first)
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/HipKro03 - Hello.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/**/"
operator|+
literal|"[bibtexkey].*Hello.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|database
name|BibtexDatabase
name|database
decl_stmt|;
DECL|field|entry
name|BibtexEntry
name|entry
decl_stmt|;
DECL|field|root
name|File
name|root
decl_stmt|;
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"@ARTICLE{HipKro03,\n"
operator|+
literal|"  author = {Eric von Hippel and Georg von Krogh},\n"
operator|+
literal|"  title = {Open Source Software and the \"Private-Collective\" Innovation Model: Issues for Organization Science},\n"
operator|+
literal|"  journal = {Organization Science},\n"
operator|+
literal|"  year = {2003},\n"
operator|+
literal|"  volume = {14},\n"
operator|+
literal|"  pages = {209--223},\n"
operator|+
literal|"  number = {2},\n"
operator|+
literal|"  address = {Institute for Operations Research and the Management Sciences (INFORMS), Linthicum, Maryland, USA},\n"
operator|+
literal|"  doi = {http://dx.doi.org/10.1287/orsc.14.2.209.14992},"
operator|+
literal|"\n"
operator|+
literal|"  issn = {1526-5455},"
operator|+
literal|"\n"
operator|+
literal|"  publisher = {INFORMS}\n"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|BibtexParser
name|parser
init|=
operator|new
name|BibtexParser
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|ParserResult
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
name|database
operator|=
name|result
operator|.
name|getDatabase
argument_list|()
expr_stmt|;
name|entry
operator|=
name|database
operator|.
name|getEntriesByKey
argument_list|(
literal|"HipKro03"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|assertNotNull
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// Create file structure
try|try
block|{
name|root
operator|=
name|createTempDir
argument_list|(
literal|"UtilFindFileTest"
argument_list|)
expr_stmt|;
name|File
name|subDir1
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"Organization Science"
argument_list|)
decl_stmt|;
name|subDir1
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|pdf1
init|=
operator|new
name|File
argument_list|(
name|subDir1
argument_list|,
literal|"HipKro03 - Hello.pdf"
argument_list|)
decl_stmt|;
name|pdf1
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|pdf1a
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"HipKro03 - Hello.pdf"
argument_list|)
decl_stmt|;
name|pdf1a
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|subDir2
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"pdfs"
argument_list|)
decl_stmt|;
name|subDir2
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|subsubDir1
init|=
operator|new
name|File
argument_list|(
name|subDir2
argument_list|,
literal|"sub"
argument_list|)
decl_stmt|;
name|subsubDir1
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|pdf2
init|=
operator|new
name|File
argument_list|(
name|subsubDir1
argument_list|,
literal|"HipKro03-sub.pdf"
argument_list|)
decl_stmt|;
name|pdf2
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|dir2002
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"2002"
argument_list|)
decl_stmt|;
name|dir2002
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|dir2003
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"2003"
argument_list|)
decl_stmt|;
name|dir2003
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|pdf3
init|=
operator|new
name|File
argument_list|(
name|dir2003
argument_list|,
literal|"Paper by HipKro03.pdf"
argument_list|)
decl_stmt|;
name|pdf3
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|dirTest
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|dirTest
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|pdf4
init|=
operator|new
name|File
argument_list|(
name|dirTest
argument_list|,
literal|"HipKro03.pdf"
argument_list|)
decl_stmt|;
name|pdf4
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|pdf5
init|=
operator|new
name|File
argument_list|(
name|dirTest
argument_list|,
literal|".TEST"
argument_list|)
decl_stmt|;
name|pdf5
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|pdf6
init|=
operator|new
name|File
argument_list|(
name|dirTest
argument_list|,
literal|"TEST["
argument_list|)
decl_stmt|;
name|pdf6
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|pdf7
init|=
operator|new
name|File
argument_list|(
name|dirTest
argument_list|,
literal|"TE.ST"
argument_list|)
decl_stmt|;
name|pdf7
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|File
name|foo
init|=
operator|new
name|File
argument_list|(
name|dirTest
argument_list|,
literal|"foo.dat"
argument_list|)
decl_stmt|;
name|foo
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|deleteRecursive
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Will check if two paths are the same. 	 */
DECL|method|assertEqualPaths (String path1, String path2)
specifier|public
specifier|static
name|void
name|assertEqualPaths
parameter_list|(
name|String
name|path1
parameter_list|,
name|String
name|path2
parameter_list|)
block|{
comment|// System.out.println(path1);
if|if
condition|(
name|path1
operator|==
name|path2
condition|)
return|return;
if|if
condition|(
operator|(
name|path1
operator|==
literal|null
operator|||
name|path2
operator|==
literal|null
operator|)
operator|&&
name|path1
operator|!=
name|path2
condition|)
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|path1
operator|+
literal|" but was: "
operator|+
name|path2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
argument_list|,
name|path2
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates a temp directory in the System temp directory. 	 *  	 * Taken from 	 * http://forum.java.sun.com/thread.jspa?threadID=470197&messageID=2169110 	 *  	 * Author: jfbriere 	 *  	 * @return returns null if directory could not created. 	 */
DECL|method|createTempDir (String prefix)
specifier|public
specifier|static
name|File
name|createTempDir
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|createTempDir
argument_list|(
name|prefix
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** 	 * Creates a temp directory in a given directory. 	 *  	 * Taken from 	 * http://forum.java.sun.com/thread.jspa?threadID=470197&messageID=2169110 	 *  	 * Author: jfbriere 	 *  	 * @param directory 	 *            MayBeNull - null indicates that the system tmp directory 	 *            should be used. 	 *  	 * @return returns null if directory could not created. 	 */
DECL|method|createTempDir (String prefix, File directory)
specifier|public
specifier|static
name|File
name|createTempDir
parameter_list|(
name|String
name|prefix
parameter_list|,
name|File
name|directory
parameter_list|)
block|{
try|try
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
argument_list|,
literal|""
argument_list|,
name|directory
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tempFile
operator|.
name|delete
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|tempFile
operator|.
name|mkdir
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|tempFile
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 * Deletes a directory or file 	 *  	 * Taken from 	 * http://forum.java.sun.com/thread.jspa?threadID=470197&messageID=2169110 	 *  	 * Author: jfbriere 	 *  	 * @param file 	 */
DECL|method|deleteRecursive (File file)
specifier|public
specifier|static
name|void
name|deleteRecursive
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|fileArray
init|=
name|file
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileArray
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|deleteRecursive
argument_list|(
name|fileArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

