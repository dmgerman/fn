begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|tests.net.sf.jabref
package|package
name|tests
operator|.
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|ParserResult
import|;
end_import

begin_comment
comment|/**  * Testing Util.findFile for finding files based on regular expressions.  *   * @author Christopher Oezbek<oezi@oezi.de>  */
end_comment

begin_class
DECL|class|UtilFindFileTest
specifier|public
class|class
name|UtilFindFileTest
extends|extends
name|FileBasedTestCase
block|{
DECL|method|findFile (String dir, String file)
name|String
name|findFile
parameter_list|(
name|String
name|dir
parameter_list|,
name|String
name|file
parameter_list|)
block|{
return|return
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|dir
argument_list|,
name|file
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** 	 * Test that more than one slash is taken to mean that a relative path is to 	 * be returned. 	 *  	 * @throws IOException 	 */
DECL|method|testFindFileRelative ()
specifier|public
name|void
name|testFindFileRelative
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Most basic case
name|assertEqualPaths
argument_list|(
literal|"HipKro03.pdf"
argument_list|,
name|findFile
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"[bibtexkey].pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Including directory
name|assertEqualPaths
argument_list|(
literal|"test/HipKro03.pdf"
argument_list|,
name|findFile
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"test/[bibtexkey].pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No relative paths
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"test/HipKro03.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|findFile
argument_list|(
literal|null
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
operator|+
literal|"[bibtexkey].pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No relative paths
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"test/HipKro03.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
operator|+
literal|"[bibtexkey].pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFindPdf ()
specifier|public
name|void
name|testFindPdf
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|String
name|pdf
init|=
name|Util
operator|.
name|findPdf
argument_list|(
name|entry
argument_list|,
literal|"pdf"
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEqualPaths
argument_list|(
literal|"HipKro03 - Hello.pdf"
argument_list|,
name|pdf
argument_list|)
expr_stmt|;
name|File
name|fullPath
init|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|String
name|pdf
init|=
name|Util
operator|.
name|findPdf
argument_list|(
name|entry
argument_list|,
literal|"pdf"
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/"
argument_list|)
decl_stmt|;
name|assertEqualPaths
argument_list|(
literal|"sub/HipKro03-sub.pdf"
argument_list|,
name|pdf
argument_list|)
expr_stmt|;
name|File
name|fullPath
init|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFindPdfInMultiple ()
specifier|public
name|void
name|testFindPdfInMultiple
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|String
index|[]
name|dirsToSearch
init|=
operator|new
name|String
index|[]
block|{
name|root
operator|.
name|getAbsolutePath
argument_list|()
block|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/"
block|}
decl_stmt|;
name|String
name|pdf
init|=
name|Util
operator|.
name|findPdf
argument_list|(
name|entry
argument_list|,
literal|"pdf"
argument_list|,
name|dirsToSearch
argument_list|)
decl_stmt|;
name|assertEqualPaths
argument_list|(
literal|"HipKro03 - Hello.pdf"
argument_list|,
name|pdf
argument_list|)
expr_stmt|;
name|File
name|fullPath
init|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|dirsToSearch
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/HipKro03 - Hello.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tmp
init|=
name|dirsToSearch
index|[
literal|1
index|]
decl_stmt|;
name|dirsToSearch
index|[
literal|1
index|]
operator|=
name|dirsToSearch
index|[
literal|0
index|]
expr_stmt|;
name|dirsToSearch
index|[
literal|0
index|]
operator|=
name|tmp
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|dirsToSearch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/HipKro03 - Hello.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
operator|new
name|String
index|[]
block|{
name|dirsToSearch
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|fullPath
argument_list|)
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
operator|new
name|String
index|[]
block|{
name|dirsToSearch
index|[
literal|1
index|]
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/HipKro03 - Hello.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|String
index|[]
name|dirsToSearch
init|=
operator|new
name|String
index|[]
block|{
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/"
block|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|String
name|pdf
init|=
name|Util
operator|.
name|findPdf
argument_list|(
name|entry
argument_list|,
literal|"pdf"
argument_list|,
name|dirsToSearch
argument_list|)
decl_stmt|;
name|assertEqualPaths
argument_list|(
literal|"sub/HipKro03-sub.pdf"
argument_list|,
name|pdf
argument_list|)
expr_stmt|;
name|File
name|fullPath
init|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|dirsToSearch
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/sub/HipKro03-sub.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tmp
init|=
name|dirsToSearch
index|[
literal|1
index|]
decl_stmt|;
name|dirsToSearch
index|[
literal|1
index|]
operator|=
name|dirsToSearch
index|[
literal|0
index|]
expr_stmt|;
name|dirsToSearch
index|[
literal|0
index|]
operator|=
name|tmp
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
name|dirsToSearch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/sub/HipKro03-sub.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
operator|new
name|String
index|[]
block|{
name|dirsToSearch
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|fullPath
argument_list|)
expr_stmt|;
name|fullPath
operator|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|pdf
argument_list|,
operator|new
name|String
index|[]
block|{
name|dirsToSearch
index|[
literal|1
index|]
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fullPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/sub/HipKro03-sub.pdf"
argument_list|,
name|fullPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFindFile ()
specifier|public
name|void
name|testFindFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Simple case
name|assertEqualPaths
argument_list|(
literal|"HipKro03.pdf"
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"[bibtexkey].pdf"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not found
name|assertEqualPaths
argument_list|(
literal|null
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"Not there [bibtexkey].pdf"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test current dir
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
argument_list|,
literal|"build.xml"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
literal|"./build.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
literal|"build.xml"
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
literal|"."
argument_list|,
literal|"build.xml"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test keys in path and regular expression in file
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/2003/Paper by HipKro03.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/[year]/.*[bibtexkey].pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test . and ..
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/Organization Science/HipKro03 - Hello.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/[year]/../2003/.././././[journal]\\"
operator|+
literal|".*[bibtexkey].*.pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test Escape
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/Organization Science/HipKro03 - Hello.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/*/"
operator|+
literal|"[bibtexkey] - Hello\\\\.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
literal|"TE.ST"
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"TE\\\\.ST"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
literal|".TEST"
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"\\\\.TEST"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualPaths
argument_list|(
literal|"TEST["
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/test/"
argument_list|,
literal|"TEST\\\\["
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test *
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/Organization Science/HipKro03 - Hello.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/*/"
operator|+
literal|"[bibtexkey].+?.pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test **
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/pdfs/sub/HipKro03-sub.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/**/"
operator|+
literal|"[bibtexkey]-sub.pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test ** - Find in level itself too
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/pdfs/sub/HipKro03-sub.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/pdfs/sub/**/"
operator|+
literal|"[bibtexkey]-sub.pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test ** - Find lowest level first (Rest is Depth first)
name|assertEqualPaths
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"/HipKro03 - Hello.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|Util
operator|.
name|findFile
argument_list|(
name|entry
argument_list|,
name|database
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/**/"
operator|+
literal|"[bibtexkey].*Hello.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

