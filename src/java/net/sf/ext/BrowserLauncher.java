begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.ext
package|package
name|net
operator|.
name|sf
operator|.
name|ext
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * BrowserLauncher is a class that provides one static method, openURL, which opens the default  * web browser for the current user of the system to the given URL.  It may support other  * protocols depending on the system -- mailto, ftp, etc. -- but that has not been rigorously  * tested and is not guaranteed to work.  *<p>  * Yes, this is platform-specific code, and yes, it may rely on classes on certain platforms  * that are not part of the standard JDK.  What we're trying to do, though, is to take something  * that's frequently desirable but inherently platform-specific -- opening a default browser --  * and allow programmers (you, for example) to do so without worrying about dropping into native  * code or doing anything else similarly evil.  *<p>  * Anyway, this code is completely in Java and will run on all JDK 1.1-compliant systems without  * modification or a need for additional libraries.  All classes that are required on certain  * platforms to allow this to run are dynamically loaded at runtime via reflection and, if not  * found, will not cause this to do anything other than returning an error when opening the  * browser.  *<p>  * There are certain system requirements for this class, as it's running through Runtime.exec(),  * which is Java's way of making a native system call.  Currently, this requires that a Macintosh  * have a Finder which supports the GURL event, which is true for Mac OS 8.0 and 8.1 systems that  * have the Internet Scripting AppleScript dictionary installed in the Scripting Additions folder  * in the Extensions folder (which is installed by default as far as I know under Mac OS 8.0 and  * 8.1), and for all Mac OS 8.5 and later systems.  On Windows, it only runs under Win32 systems  * (Windows 95, 98, and NT 4.0, as well as later versions of all).  On other systems, this drops  * back from the inherently platform-sensitive concept of a default browser and simply attempts  * to launch Netscape via a shell command.  *<p>  * This code is Copyright 1999-2001 by Eric Albert (ejalbert@cs.stanford.edu) and may be  * redistributed or modified in any form without restrictions as long as the portion of this  * comment from this paragraph through the end of the comment is not removed.  The author  * requests that he be notified of any application, applet, or other binary that makes use of  * this code, but that's more out of curiosity than anything and is not required.  This software  * includes no warranty.  The author is not repsonsible for any loss of data or functionality  * or any adverse or unexpected effects of using this software.  *<p>  * Credits:  *<br>Steven Spencer, JavaWorld magazine (<a href="http://www.javaworld.com/javaworld/javatips/jw-javatip66.html">Java Tip 66</a>)  *<br>Thanks also to Ron B. Yeh, Eric Shapiro, Ben Engber, Paul Teitlebaum, Andrea Cantatore,  * Larry Barowski, Trevor Bedzek, Frank Miedrich, and Ron Rabakukk  *  * @author Eric Albert (<a href="mailto:ejalbert@cs.stanford.edu">ejalbert@cs.stanford.edu</a>)  * @version 1.4b1 (Released June 20, 2001)  */
end_comment

begin_class
DECL|class|BrowserLauncher
specifier|public
class|class
name|BrowserLauncher
block|{
comment|/**      * The Java virtual machine that we are running on.  Actually, in most cases we only care      * about the operating system, but some operating systems require us to switch on the VM. */
DECL|field|jvm
specifier|private
specifier|static
name|int
name|jvm
decl_stmt|;
comment|/** The browser for the system */
DECL|field|browser
specifier|private
specifier|static
name|Object
name|browser
decl_stmt|;
comment|/**      * Caches whether any classes, methods, and fields that are not part of the JDK and need to      * be dynamically loaded at runtime loaded successfully.      *<p>      * Note that if this is<code>false</code>,<code>openURL()</code> will always return an      * IOException.      */
DECL|field|loadedWithoutErrors
specifier|private
specifier|static
name|boolean
name|loadedWithoutErrors
decl_stmt|;
comment|/** The com.apple.mrj.MRJFileUtils class */
DECL|field|mrjFileUtilsClass
specifier|private
specifier|static
name|Class
name|mrjFileUtilsClass
decl_stmt|;
comment|/** The com.apple.mrj.MRJOSType class */
DECL|field|mrjOSTypeClass
specifier|private
specifier|static
name|Class
name|mrjOSTypeClass
decl_stmt|;
comment|/** The com.apple.MacOS.AEDesc class */
DECL|field|aeDescClass
specifier|private
specifier|static
name|Class
name|aeDescClass
decl_stmt|;
comment|/** The<init>(int) method of com.apple.MacOS.AETarget */
DECL|field|aeTargetConstructor
specifier|private
specifier|static
name|Constructor
name|aeTargetConstructor
decl_stmt|;
comment|/** The<init>(int, int, int) method of com.apple.MacOS.AppleEvent */
DECL|field|appleEventConstructor
specifier|private
specifier|static
name|Constructor
name|appleEventConstructor
decl_stmt|;
comment|/** The<init>(String) method of com.apple.MacOS.AEDesc */
DECL|field|aeDescConstructor
specifier|private
specifier|static
name|Constructor
name|aeDescConstructor
decl_stmt|;
comment|/** The findFolder method of com.apple.mrj.MRJFileUtils */
DECL|field|findFolder
specifier|private
specifier|static
name|Method
name|findFolder
decl_stmt|;
comment|/** The getFileCreator method of com.apple.mrj.MRJFileUtils */
DECL|field|getFileCreator
specifier|private
specifier|static
name|Method
name|getFileCreator
decl_stmt|;
comment|/** The getFileType method of com.apple.mrj.MRJFileUtils */
DECL|field|getFileType
specifier|private
specifier|static
name|Method
name|getFileType
decl_stmt|;
comment|/** The openURL method of com.apple.mrj.MRJFileUtils */
DECL|field|openURL
specifier|private
specifier|static
name|Method
name|openURL
decl_stmt|;
comment|/** The makeOSType method of com.apple.MacOS.OSUtils */
DECL|field|makeOSType
specifier|private
specifier|static
name|Method
name|makeOSType
decl_stmt|;
comment|/** The putParameter method of com.apple.MacOS.AppleEvent */
DECL|field|putParameter
specifier|private
specifier|static
name|Method
name|putParameter
decl_stmt|;
comment|/** The sendNoReply method of com.apple.MacOS.AppleEvent */
DECL|field|sendNoReply
specifier|private
specifier|static
name|Method
name|sendNoReply
decl_stmt|;
comment|/** Actually an MRJOSType pointing to the System Folder on a Macintosh */
DECL|field|kSystemFolderType
specifier|private
specifier|static
name|Object
name|kSystemFolderType
decl_stmt|;
comment|/** The keyDirectObject AppleEvent parameter type */
DECL|field|keyDirectObject
specifier|private
specifier|static
name|Integer
name|keyDirectObject
decl_stmt|;
comment|/** The kAutoGenerateReturnID AppleEvent code */
DECL|field|kAutoGenerateReturnID
specifier|private
specifier|static
name|Integer
name|kAutoGenerateReturnID
decl_stmt|;
comment|/** The kAnyTransactionID AppleEvent code */
DECL|field|kAnyTransactionID
specifier|private
specifier|static
name|Integer
name|kAnyTransactionID
decl_stmt|;
comment|/** The linkage object required for JDirect 3 on Mac OS X. */
DECL|field|linkage
specifier|private
specifier|static
name|Object
name|linkage
decl_stmt|;
comment|/** The framework to reference on Mac OS X */
DECL|field|JDirect_MacOSX
specifier|private
specifier|static
specifier|final
name|String
name|JDirect_MacOSX
init|=
literal|"/System/Library/Frameworks/Carbon.framework/Frameworks/HIToolbox.framework/HIToolbox"
decl_stmt|;
comment|/** JVM constant for MRJ 2.0 */
DECL|field|MRJ_2_0
specifier|private
specifier|static
specifier|final
name|int
name|MRJ_2_0
init|=
literal|0
decl_stmt|;
comment|/** JVM constant for MRJ 2.1 or later */
DECL|field|MRJ_2_1
specifier|private
specifier|static
specifier|final
name|int
name|MRJ_2_1
init|=
literal|1
decl_stmt|;
comment|/** JVM constant for Java on Mac OS X 10.0 (MRJ 3.0) */
DECL|field|MRJ_3_0
specifier|private
specifier|static
specifier|final
name|int
name|MRJ_3_0
init|=
literal|3
decl_stmt|;
comment|/** JVM constant for MRJ 3.1 */
DECL|field|MRJ_3_1
specifier|private
specifier|static
specifier|final
name|int
name|MRJ_3_1
init|=
literal|4
decl_stmt|;
comment|/** JVM constant for any Windows NT JVM */
DECL|field|WINDOWS_NT
specifier|private
specifier|static
specifier|final
name|int
name|WINDOWS_NT
init|=
literal|5
decl_stmt|;
comment|/** JVM constant for any Windows 9x JVM */
DECL|field|WINDOWS_9x
specifier|private
specifier|static
specifier|final
name|int
name|WINDOWS_9x
init|=
literal|6
decl_stmt|;
comment|/** JVM constant for any Linux JVM */
DECL|field|LINUX
specifier|private
specifier|static
specifier|final
name|int
name|LINUX
init|=
literal|7
decl_stmt|;
comment|/** JVM constant for any other platform */
DECL|field|OTHER
specifier|private
specifier|static
specifier|final
name|int
name|OTHER
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * The file type of the Finder on a Macintosh.  Hardcoding "Finder" would keep non-U.S. English      * systems from working properly.      */
DECL|field|FINDER_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|FINDER_TYPE
init|=
literal|"FNDR"
decl_stmt|;
comment|/**      * The creator code of the Finder on a Macintosh, which is needed to send AppleEvents to the      * application.      */
DECL|field|FINDER_CREATOR
specifier|private
specifier|static
specifier|final
name|String
name|FINDER_CREATOR
init|=
literal|"MACS"
decl_stmt|;
comment|/** The name for the AppleEvent type corresponding to a GetURL event. */
DECL|field|GURL_EVENT
specifier|private
specifier|static
specifier|final
name|String
name|GURL_EVENT
init|=
literal|"GURL"
decl_stmt|;
comment|/**      * The first parameter that needs to be passed into Runtime.exec() to open the default web      * browser on Windows.      */
DECL|field|FIRST_WINDOWS_PARAMETER
specifier|private
specifier|static
specifier|final
name|String
name|FIRST_WINDOWS_PARAMETER
init|=
literal|"/c"
decl_stmt|;
comment|/** The second parameter for Runtime.exec() on Windows. */
DECL|field|SECOND_WINDOWS_PARAMETER
specifier|private
specifier|static
specifier|final
name|String
name|SECOND_WINDOWS_PARAMETER
init|=
literal|"start"
decl_stmt|;
comment|/**      * The third parameter for Runtime.exec() on Windows.  This is a "title"      * parameter that the command line expects.  Setting this parameter allows      * URLs containing spaces to work.      */
DECL|field|THIRD_WINDOWS_PARAMETER
specifier|private
specifier|static
specifier|final
name|String
name|THIRD_WINDOWS_PARAMETER
init|=
literal|"\"\""
decl_stmt|;
comment|/**      * The shell parameters for Netscape that opens a given URL in an already-open copy of Netscape      * on many command-line systems.      */
DECL|field|NETSCAPE_REMOTE_PARAMETER
specifier|private
specifier|static
specifier|final
name|String
name|NETSCAPE_REMOTE_PARAMETER
init|=
literal|"-remote"
decl_stmt|;
DECL|field|NETSCAPE_OPEN_PARAMETER_START
specifier|private
specifier|static
specifier|final
name|String
name|NETSCAPE_OPEN_PARAMETER_START
init|=
literal|"'openURL("
decl_stmt|;
DECL|field|NETSCAPE_OPEN_PARAMETER_END
specifier|private
specifier|static
specifier|final
name|String
name|NETSCAPE_OPEN_PARAMETER_END
init|=
literal|")'"
decl_stmt|;
comment|/**      * The message from any exception thrown throughout the initialization process.      */
DECL|field|errorMessage
specifier|private
specifier|static
name|String
name|errorMessage
decl_stmt|;
comment|/**      * An initialization block that determines the operating system and loads the necessary      * runtime data.      */
static|static
block|{
name|loadedWithoutErrors
operator|=
literal|true
expr_stmt|;
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Mac OS"
argument_list|)
condition|)
block|{
name|String
name|mrjVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"mrj.version"
argument_list|)
decl_stmt|;
name|String
name|majorMRJVersion
init|=
name|mrjVersion
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
try|try
block|{
name|double
name|version
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|majorMRJVersion
argument_list|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|2
condition|)
block|{
name|jvm
operator|=
name|MRJ_2_0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|>=
literal|2.1
operator|&&
name|version
operator|<
literal|3
condition|)
block|{
comment|// Assume that all 2.x versions of MRJ work the same.  MRJ 2.1 actually
comment|// works via Runtime.exec() and 2.2 supports that but has an openURL() method
comment|// as well that we currently ignore.
name|jvm
operator|=
name|MRJ_2_1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|==
literal|3.0
condition|)
block|{
name|jvm
operator|=
name|MRJ_3_0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|>=
literal|3.1
condition|)
block|{
comment|// Assume that all 3.1 and later versions of MRJ work the same.
name|jvm
operator|=
name|MRJ_3_1
expr_stmt|;
block|}
else|else
block|{
name|loadedWithoutErrors
operator|=
literal|false
expr_stmt|;
name|errorMessage
operator|=
literal|"Unsupported MRJ version: "
operator|+
name|version
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|loadedWithoutErrors
operator|=
literal|false
expr_stmt|;
name|errorMessage
operator|=
literal|"Invalid MRJ version: "
operator|+
name|mrjVersion
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
condition|)
block|{
if|if
condition|(
name|osName
operator|.
name|indexOf
argument_list|(
literal|"9"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|jvm
operator|=
name|WINDOWS_9x
expr_stmt|;
block|}
else|else
block|{
name|jvm
operator|=
name|WINDOWS_NT
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
name|jvm
operator|=
name|LINUX
expr_stmt|;
block|}
else|else
block|{
name|jvm
operator|=
name|OTHER
expr_stmt|;
block|}
if|if
condition|(
name|loadedWithoutErrors
condition|)
block|{
comment|// if we haven't hit any errors yet
name|loadedWithoutErrors
operator|=
name|loadClasses
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This class should be never be instantiated; this just ensures so.      */
DECL|method|BrowserLauncher ()
specifier|private
name|BrowserLauncher
parameter_list|()
block|{ }
comment|/**      * Called by a static initializer to load any classes, fields, and methods required at runtime      * to locate the user's web browser.      * @return<code>true</code> if all intialization succeeded      *<code>false</code> if any portion of the initialization failed      */
DECL|method|loadClasses ()
specifier|private
specifier|static
name|boolean
name|loadClasses
parameter_list|()
block|{
switch|switch
condition|(
name|jvm
condition|)
block|{
case|case
name|MRJ_2_0
case|:
try|try
block|{
name|Class
name|aeTargetClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.apple.MacOS.AETarget"
argument_list|)
decl_stmt|;
name|Class
name|osUtilsClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.apple.MacOS.OSUtils"
argument_list|)
decl_stmt|;
name|Class
name|appleEventClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.apple.MacOS.AppleEvent"
argument_list|)
decl_stmt|;
name|Class
name|aeClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.apple.MacOS.ae"
argument_list|)
decl_stmt|;
name|aeDescClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.apple.MacOS.AEDesc"
argument_list|)
expr_stmt|;
name|aeTargetConstructor
operator|=
name|aeTargetClass
operator|.
name|getDeclaredConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|int
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|appleEventConstructor
operator|=
name|appleEventClass
operator|.
name|getDeclaredConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|int
operator|.
name|class
block|,
name|int
operator|.
name|class
block|,
name|aeTargetClass
block|,
name|int
operator|.
name|class
block|,
name|int
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|aeDescConstructor
operator|=
name|aeDescClass
operator|.
name|getDeclaredConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|makeOSType
operator|=
name|osUtilsClass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"makeOSType"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|putParameter
operator|=
name|appleEventClass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"putParameter"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|int
operator|.
name|class
block|,
name|aeDescClass
block|}
argument_list|)
expr_stmt|;
name|sendNoReply
operator|=
name|appleEventClass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"sendNoReply"
argument_list|,
operator|new
name|Class
index|[]
block|{ }
argument_list|)
expr_stmt|;
name|Field
name|keyDirectObjectField
init|=
name|aeClass
operator|.
name|getDeclaredField
argument_list|(
literal|"keyDirectObject"
argument_list|)
decl_stmt|;
name|keyDirectObject
operator|=
operator|(
name|Integer
operator|)
name|keyDirectObjectField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Field
name|autoGenerateReturnIDField
init|=
name|appleEventClass
operator|.
name|getDeclaredField
argument_list|(
literal|"kAutoGenerateReturnID"
argument_list|)
decl_stmt|;
name|kAutoGenerateReturnID
operator|=
operator|(
name|Integer
operator|)
name|autoGenerateReturnIDField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Field
name|anyTransactionIDField
init|=
name|appleEventClass
operator|.
name|getDeclaredField
argument_list|(
literal|"kAnyTransactionID"
argument_list|)
decl_stmt|;
name|kAnyTransactionID
operator|=
operator|(
name|Integer
operator|)
name|anyTransactionIDField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
name|errorMessage
operator|=
name|cnfe
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
name|errorMessage
operator|=
name|nsme
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|nsfe
parameter_list|)
block|{
name|errorMessage
operator|=
name|nsfe
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
name|errorMessage
operator|=
name|iae
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|MRJ_2_1
case|:
try|try
block|{
name|mrjFileUtilsClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.apple.mrj.MRJFileUtils"
argument_list|)
expr_stmt|;
name|mrjOSTypeClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.apple.mrj.MRJOSType"
argument_list|)
expr_stmt|;
name|Field
name|systemFolderField
init|=
name|mrjFileUtilsClass
operator|.
name|getDeclaredField
argument_list|(
literal|"kSystemFolderType"
argument_list|)
decl_stmt|;
name|kSystemFolderType
operator|=
name|systemFolderField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|findFolder
operator|=
name|mrjFileUtilsClass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"findFolder"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|mrjOSTypeClass
block|}
argument_list|)
expr_stmt|;
name|getFileCreator
operator|=
name|mrjFileUtilsClass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getFileCreator"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|File
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|getFileType
operator|=
name|mrjFileUtilsClass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getFileType"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|File
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
name|errorMessage
operator|=
name|cnfe
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|nsfe
parameter_list|)
block|{
name|errorMessage
operator|=
name|nsfe
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
name|errorMessage
operator|=
name|nsme
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|errorMessage
operator|=
name|se
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
name|errorMessage
operator|=
name|iae
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|MRJ_3_0
case|:
try|try
block|{
name|Class
name|linker
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.apple.mrj.jdirect.Linker"
argument_list|)
decl_stmt|;
name|Constructor
name|constructor
init|=
name|linker
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|Class
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|linkage
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|BrowserLauncher
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
name|errorMessage
operator|=
name|cnfe
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
name|errorMessage
operator|=
name|nsme
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|errorMessage
operator|=
name|ite
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ie
parameter_list|)
block|{
name|errorMessage
operator|=
name|ie
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
name|errorMessage
operator|=
name|iae
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|MRJ_3_1
case|:
try|try
block|{
name|mrjFileUtilsClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.apple.mrj.MRJFileUtils"
argument_list|)
expr_stmt|;
name|openURL
operator|=
name|mrjFileUtilsClass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"openURL"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
name|errorMessage
operator|=
name|cnfe
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
name|errorMessage
operator|=
name|nsme
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Attempts to locate the default web browser on the local system.  Caches results so it      * only locates the browser once for each use of this class per JVM instance.      * @return The browser for the system.  Note that this may not be what you would consider      *          to be a standard web browser; instead, it's the application that gets called to      *          open the default web browser.  In some cases, this will be a non-String object      *          that provides the means of calling the default browser.      */
DECL|method|locateBrowser ()
specifier|private
specifier|static
name|Object
name|locateBrowser
parameter_list|()
block|{
if|if
condition|(
name|browser
operator|!=
literal|null
condition|)
block|{
return|return
name|browser
return|;
block|}
switch|switch
condition|(
name|jvm
condition|)
block|{
case|case
name|MRJ_2_0
case|:
try|try
block|{
name|Integer
name|finderCreatorCode
init|=
operator|(
name|Integer
operator|)
name|makeOSType
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|FINDER_CREATOR
block|}
argument_list|)
decl_stmt|;
name|Object
name|aeTarget
init|=
name|aeTargetConstructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|finderCreatorCode
block|}
argument_list|)
decl_stmt|;
name|Integer
name|gurlType
init|=
operator|(
name|Integer
operator|)
name|makeOSType
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|GURL_EVENT
block|}
argument_list|)
decl_stmt|;
name|Object
name|appleEvent
init|=
name|appleEventConstructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|gurlType
block|,
name|gurlType
block|,
name|aeTarget
block|,
name|kAutoGenerateReturnID
block|,
name|kAnyTransactionID
block|}
argument_list|)
decl_stmt|;
comment|// Don't set browser = appleEvent because then the next time we call
comment|// locateBrowser(), we'll get the same AppleEvent, to which we'll already have
comment|// added the relevant parameter. Instead, regenerate the AppleEvent every time.
comment|// There's probably a way to do this better; if any has any ideas, please let
comment|// me know.
return|return
name|appleEvent
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
name|browser
operator|=
literal|null
expr_stmt|;
name|errorMessage
operator|=
name|iae
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
name|browser
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ie
parameter_list|)
block|{
name|browser
operator|=
literal|null
expr_stmt|;
name|errorMessage
operator|=
name|ie
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
name|browser
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|browser
operator|=
literal|null
expr_stmt|;
name|errorMessage
operator|=
name|ite
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
name|browser
return|;
block|}
case|case
name|MRJ_2_1
case|:
name|File
name|systemFolder
decl_stmt|;
try|try
block|{
name|systemFolder
operator|=
operator|(
name|File
operator|)
name|findFolder
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|kSystemFolderType
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iare
parameter_list|)
block|{
name|browser
operator|=
literal|null
expr_stmt|;
name|errorMessage
operator|=
name|iare
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
name|browser
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
name|browser
operator|=
literal|null
expr_stmt|;
name|errorMessage
operator|=
name|iae
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
name|browser
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|browser
operator|=
literal|null
expr_stmt|;
name|errorMessage
operator|=
name|ite
operator|.
name|getTargetException
argument_list|()
operator|.
name|getClass
argument_list|()
operator|+
literal|": "
operator|+
name|ite
operator|.
name|getTargetException
argument_list|()
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
name|browser
return|;
block|}
name|String
index|[]
name|systemFolderFiles
init|=
name|systemFolder
operator|.
name|list
argument_list|()
decl_stmt|;
comment|// Avoid a FilenameFilter because that can't be stopped mid-list
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|systemFolderFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|systemFolder
argument_list|,
name|systemFolderFiles
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// We're looking for a file with a creator code of 'MACS' and
comment|// a type of 'FNDR'.  Only requiring the type results in non-Finder
comment|// applications being picked up on certain Mac OS 9 systems,
comment|// especially German ones, and sending a GURL event to those
comment|// applications results in a logout under Multiple Users.
name|Object
name|fileType
init|=
name|getFileType
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|FINDER_TYPE
operator|.
name|equals
argument_list|(
name|fileType
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|Object
name|fileCreator
init|=
name|getFileCreator
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|FINDER_CREATOR
operator|.
name|equals
argument_list|(
name|fileCreator
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|browser
operator|=
name|file
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// Actually the Finder, but that's OK
return|return
name|browser
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iare
parameter_list|)
block|{
name|browser
operator|=
name|browser
expr_stmt|;
name|errorMessage
operator|=
name|iare
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
name|browser
operator|=
literal|null
expr_stmt|;
name|errorMessage
operator|=
name|iae
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
name|browser
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|browser
operator|=
literal|null
expr_stmt|;
name|errorMessage
operator|=
name|ite
operator|.
name|getTargetException
argument_list|()
operator|.
name|getClass
argument_list|()
operator|+
literal|": "
operator|+
name|ite
operator|.
name|getTargetException
argument_list|()
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return
name|browser
return|;
block|}
block|}
name|browser
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|MRJ_3_0
case|:
case|case
name|MRJ_3_1
case|:
name|browser
operator|=
literal|""
expr_stmt|;
comment|// Return something non-null
break|break;
case|case
name|WINDOWS_NT
case|:
name|browser
operator|=
literal|"cmd.exe"
expr_stmt|;
break|break;
case|case
name|WINDOWS_9x
case|:
name|browser
operator|=
literal|"command.com"
expr_stmt|;
break|break;
case|case
name|LINUX
case|:
if|if
condition|(
operator|(
operator|new
name|File
argument_list|(
literal|"/usr/bin/mozilla"
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
name|browser
operator|=
literal|"mozilla"
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
operator|new
name|File
argument_list|(
literal|"/usr/bin/firefox"
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
name|browser
operator|=
literal|"firefox"
expr_stmt|;
else|else
name|browser
operator|=
literal|"mozilla"
expr_stmt|;
break|break;
case|case
name|OTHER
case|:
default|default:
name|browser
operator|=
literal|"netscape"
expr_stmt|;
break|break;
block|}
return|return
name|browser
return|;
block|}
comment|/**      * Attempts to open the default web browser to the given URL.      * @param url The URL to open      * @throws IOException If the web browser could not be located or does not run      */
DECL|method|openURL (String url)
specifier|public
specifier|static
name|void
name|openURL
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|loadedWithoutErrors
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception in finding browser: "
operator|+
name|errorMessage
argument_list|)
throw|;
block|}
name|Object
name|browser
init|=
name|locateBrowser
argument_list|()
decl_stmt|;
if|if
condition|(
name|browser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to locate browser: "
operator|+
name|errorMessage
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|jvm
condition|)
block|{
case|case
name|MRJ_2_0
case|:
name|Object
name|aeDesc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|aeDesc
operator|=
name|aeDescConstructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|url
block|}
argument_list|)
expr_stmt|;
name|putParameter
operator|.
name|invoke
argument_list|(
name|browser
argument_list|,
operator|new
name|Object
index|[]
block|{
name|keyDirectObject
block|,
name|aeDesc
block|}
argument_list|)
expr_stmt|;
name|sendNoReply
operator|.
name|invoke
argument_list|(
name|browser
argument_list|,
operator|new
name|Object
index|[]
block|{ }
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"InvocationTargetException while creating AEDesc: "
operator|+
name|ite
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"IllegalAccessException while building AppleEvent: "
operator|+
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"InstantiationException while creating AEDesc: "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|aeDesc
operator|=
literal|null
expr_stmt|;
comment|// Encourage it to get disposed if it was created
name|browser
operator|=
literal|null
expr_stmt|;
comment|// Ditto
block|}
break|break;
case|case
name|MRJ_2_1
case|:
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|browser
block|,
name|url
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|MRJ_3_0
case|:
name|int
index|[]
name|instance
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|int
name|result
init|=
name|ICStart
argument_list|(
name|instance
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|int
index|[]
name|selectionStart
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
name|byte
index|[]
name|urlBytes
init|=
name|url
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
index|[]
name|selectionEnd
init|=
operator|new
name|int
index|[]
block|{
name|urlBytes
operator|.
name|length
block|}
decl_stmt|;
name|result
operator|=
name|ICLaunchURL
argument_list|(
name|instance
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
name|urlBytes
argument_list|,
name|urlBytes
operator|.
name|length
argument_list|,
name|selectionStart
argument_list|,
name|selectionEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
comment|// Ignore the return value; the URL was launched successfully
comment|// regardless of what happens here.
name|ICStop
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to launch URL: "
operator|+
name|result
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create an Internet Config instance: "
operator|+
name|result
argument_list|)
throw|;
block|}
break|break;
case|case
name|MRJ_3_1
case|:
try|try
block|{
name|openURL
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"InvocationTargetException while calling openURL: "
operator|+
name|ite
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"IllegalAccessException while calling openURL: "
operator|+
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
break|break;
case|case
name|WINDOWS_NT
case|:
case|case
name|WINDOWS_9x
case|:
comment|// Add quotes around the URL to allow ampersands and other special
comment|// characters to work.
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|browser
block|,
name|FIRST_WINDOWS_PARAMETER
block|,
name|SECOND_WINDOWS_PARAMETER
block|,
name|THIRD_WINDOWS_PARAMETER
block|,
literal|'"'
operator|+
name|url
operator|+
literal|'"'
block|}
argument_list|)
decl_stmt|;
comment|// This avoids a memory leak on some versions of Java on Windows.
comment|// That's hinted at in<http://developer.java.sun.com/developer/qow/archive/68/>.
try|try
block|{
name|process
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|process
operator|.
name|exitValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"InterruptedException while launching browser: "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
break|break;
case|case
name|OTHER
case|:
comment|// Assume that we're on Unix and that Netscape is installed
comment|// First, attempt to open the URL in a currently running session of Netscape
name|process
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|browser
block|,
name|NETSCAPE_REMOTE_PARAMETER
block|,
name|NETSCAPE_OPEN_PARAMETER_START
operator|+
name|url
operator|+
name|NETSCAPE_OPEN_PARAMETER_END
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|exitCode
init|=
name|process
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
comment|// if Netscape was not open
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|browser
block|,
name|url
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"InterruptedException while launching browser: "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
break|break;
default|default:
comment|// This should never occur, but if it does, we'll try the simplest thing possible
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|browser
block|,
name|url
block|}
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**      * Methods required for Mac OS X.  The presence of native methods does not cause      * any problems on other platforms.      */
DECL|method|ICStart (int[] instance, int signature)
specifier|private
specifier|native
specifier|static
name|int
name|ICStart
parameter_list|(
name|int
index|[]
name|instance
parameter_list|,
name|int
name|signature
parameter_list|)
function_decl|;
DECL|method|ICStop (int[] instance)
specifier|private
specifier|native
specifier|static
name|int
name|ICStop
parameter_list|(
name|int
index|[]
name|instance
parameter_list|)
function_decl|;
DECL|method|ICLaunchURL (int instance, byte[] hint, byte[] data, int len, int[] selectionStart, int[] selectionEnd)
specifier|private
specifier|native
specifier|static
name|int
name|ICLaunchURL
parameter_list|(
name|int
name|instance
parameter_list|,
name|byte
index|[]
name|hint
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|int
index|[]
name|selectionStart
parameter_list|,
name|int
index|[]
name|selectionEnd
parameter_list|)
function_decl|;
block|}
end_class

end_unit

