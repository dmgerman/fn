begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Morten O. Alver, Nizar N. Batada  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|*
import|;
end_import

begin_class
DECL|class|PrefsDialog
specifier|public
class|class
name|PrefsDialog
extends|extends
name|JDialog
block|{
DECL|field|_choices
specifier|private
name|String
index|[]
name|_choices
decl_stmt|;
DECL|field|_sel
specifier|private
name|Boolean
index|[]
name|_sel
decl_stmt|;
DECL|field|_prefs
specifier|private
name|JabRefPreferences
name|_prefs
decl_stmt|;
DECL|field|gbl
specifier|private
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
specifier|private
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
DECL|field|colorCodes
DECL|field|autoResizeMode
DECL|field|autoOpenForm
specifier|private
name|JCheckBox
name|colorCodes
decl_stmt|,
name|autoResizeMode
decl_stmt|,
name|autoOpenForm
decl_stmt|,
DECL|field|backup
DECL|field|openLast
DECL|field|secDesc
DECL|field|terDesc
DECL|field|defSource
DECL|field|editSource
name|backup
decl_stmt|,
name|openLast
decl_stmt|,
name|secDesc
decl_stmt|,
name|terDesc
decl_stmt|,
name|defSource
decl_stmt|,
name|editSource
decl_stmt|,
DECL|field|autoComplete
DECL|field|groupsVisible
name|autoComplete
decl_stmt|,
name|groupsVisible
decl_stmt|;
DECL|field|groupsField
specifier|private
name|JTextField
name|groupsField
decl_stmt|;
DECL|field|complFields
specifier|private
name|JPopupMenu
name|complFields
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|sel_ac
specifier|private
name|JCheckBoxMenuItem
index|[]
name|sel_ac
init|=
operator|new
name|JCheckBoxMenuItem
index|[
name|GUIGlobals
operator|.
name|ALL_FIELDS
operator|.
name|length
index|]
decl_stmt|;
DECL|field|openAutoComp
specifier|private
name|JButton
name|openAutoComp
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Choose fields"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|parent
specifier|private
name|JabRefFrame
name|parent
decl_stmt|;
DECL|field|sizes
specifier|private
name|String
index|[]
name|sizes
init|=
operator|new
name|String
index|[]
block|{
name|Globals
operator|.
name|lang
argument_list|(
literal|"Small"
argument_list|)
block|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Medium"
argument_list|)
block|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Large"
argument_list|)
block|}
decl_stmt|;
specifier|private
name|JComboBox
DECL|field|formWidth
name|formWidth
init|=
operator|new
name|JComboBox
argument_list|(
name|sizes
argument_list|)
decl_stmt|,
DECL|field|formHeight
name|formHeight
init|=
operator|new
name|JComboBox
argument_list|(
name|sizes
argument_list|)
decl_stmt|,
DECL|field|secSort
name|secSort
init|=
operator|new
name|JComboBox
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
argument_list|)
decl_stmt|,
DECL|field|terSort
name|terSort
init|=
operator|new
name|JComboBox
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
argument_list|)
decl_stmt|;
DECL|method|showPrefsDialog (JabRefFrame parent, JabRefPreferences prefs)
specifier|public
specifier|static
name|void
name|showPrefsDialog
parameter_list|(
name|JabRefFrame
name|parent
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
name|PrefsDialog
name|cd
init|=
operator|new
name|PrefsDialog
argument_list|(
name|parent
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
name|Dimension
name|ds
init|=
name|cd
operator|.
name|getSize
argument_list|()
decl_stmt|,
name|df
init|=
name|parent
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|Point
name|pf
init|=
name|parent
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|cd
operator|.
name|setLocation
argument_list|(
operator|new
name|Point
argument_list|(
name|pf
operator|.
name|x
operator|+
operator|(
name|df
operator|.
name|width
operator|-
name|ds
operator|.
name|width
operator|)
operator|/
literal|2
argument_list|,
name|pf
operator|.
name|y
operator|+
operator|(
name|df
operator|.
name|height
operator|-
name|ds
operator|.
name|height
operator|)
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|PrefsDialog (JabRefFrame parent, JabRefPreferences prefs)
specifier|public
name|PrefsDialog
parameter_list|(
name|JabRefFrame
name|parent
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"JabRef preferences"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|_prefs
operator|=
name|prefs
expr_stmt|;
name|colorCodes
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Use color codes for required and optional fields"
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"tableColorCodesOn"
argument_list|)
argument_list|)
expr_stmt|;
name|autoResizeMode
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Always resize table horizontally to fit on screen"
argument_list|,
operator|(
name|_prefs
operator|.
name|getInt
argument_list|(
literal|"autoResizeMode"
argument_list|)
operator|==
name|JTable
operator|.
name|AUTO_RESIZE_ALL_COLUMNS
operator|)
argument_list|)
expr_stmt|;
name|autoOpenForm
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Automatically open editor when creating a new entry"
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoOpenForm"
argument_list|)
argument_list|)
expr_stmt|;
name|backup
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Backup old file when saving"
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"backup"
argument_list|)
argument_list|)
expr_stmt|;
name|openLast
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"As default, open latest edited database on startup"
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"openLastEdited"
argument_list|)
argument_list|)
expr_stmt|;
name|secDesc
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Descending"
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"secDescending"
argument_list|)
argument_list|)
expr_stmt|;
name|terDesc
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Descending"
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"terDescending"
argument_list|)
argument_list|)
expr_stmt|;
name|defSource
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Show source by default"
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"defaultShowSource"
argument_list|)
argument_list|)
expr_stmt|;
name|editSource
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Enable source editing"
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"enableSourceEditing"
argument_list|)
argument_list|)
expr_stmt|;
name|autoComplete
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Enable autocompletion"
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoComplete"
argument_list|)
argument_list|)
expr_stmt|;
name|groupsVisible
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Show groups interface if "
operator|+
literal|"database has groups defined"
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"groupSelectorVisible"
argument_list|)
argument_list|)
expr_stmt|;
name|groupsField
operator|=
operator|new
name|JTextField
argument_list|(
name|_prefs
operator|.
name|get
argument_list|(
literal|"groupsDefaultField"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make ESC close dialog, equivalent to clicking Cancel.
name|colorCodes
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|exitDialog
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|colorCodes
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
operator|new
name|CancelAction
argument_list|()
argument_list|)
expr_stmt|;
name|formWidth
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Boolean
index|[]
name|sel
init|=
operator|new
name|Boolean
index|[
name|GUIGlobals
operator|.
name|ALL_FIELDS
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|found
decl_stmt|,
name|found_ac
decl_stmt|;
name|_choices
operator|=
name|GUIGlobals
operator|.
name|ALL_FIELDS
expr_stmt|;
name|_sel
operator|=
name|sel
expr_stmt|;
name|byte
index|[]
name|autoCompFields
init|=
name|prefs
operator|.
name|getByteArray
argument_list|(
literal|"autoCompFields"
argument_list|)
decl_stmt|;
name|String
index|[]
name|columns
init|=
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"columnNames"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_choices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
name|found_ac
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columns
operator|.
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|columns
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|_choices
index|[
name|i
index|]
argument_list|)
condition|)
name|found
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|autoCompFields
operator|.
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|autoCompFields
index|[
name|j
index|]
index|]
operator|.
name|equals
argument_list|(
name|_choices
index|[
name|i
index|]
argument_list|)
condition|)
name|found_ac
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|found
condition|)
name|sel
index|[
name|i
index|]
operator|=
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|sel
index|[
name|i
index|]
operator|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|found_ac
condition|)
name|sel_ac
index|[
name|i
index|]
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|sel_ac
index|[
name|i
index|]
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Set up the popupmenu for choosing autocompleted fields.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_choices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
name|sel_ac
index|[
name|i
index|]
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|text
operator|.
name|equals
argument_list|(
literal|"bibtexkey"
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|text
operator|.
name|equals
argument_list|(
literal|"search"
argument_list|)
operator|)
condition|)
name|complFields
operator|.
name|add
argument_list|(
name|sel_ac
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|openAutoComp
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JButton
name|src
init|=
operator|(
name|JButton
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|complFields
operator|.
name|show
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Set the correct value for the primary sort JComboBox.
name|String
name|sec
init|=
name|prefs
operator|.
name|get
argument_list|(
literal|"secSort"
argument_list|)
decl_stmt|,
name|ter
init|=
name|prefs
operator|.
name|get
argument_list|(
literal|"terSort"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|GUIGlobals
operator|.
name|ALL_FIELDS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sec
operator|.
name|equals
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|i
index|]
argument_list|)
condition|)
name|secSort
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|ter
operator|.
name|equals
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|i
index|]
argument_list|)
condition|)
name|terSort
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
operator|(
operator|new
name|CancelAction
argument_list|()
operator|)
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TableModel
name|tm
init|=
operator|new
name|AbstractTableModel
argument_list|()
block|{
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|_choices
operator|.
name|length
return|;
block|}
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|==
literal|0
condition|)
return|return
name|_choices
index|[
name|row
index|]
return|;
else|else
return|return
name|_sel
index|[
name|row
index|]
return|;
block|}
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|==
literal|0
condition|)
return|return
name|String
operator|.
name|class
return|;
else|else
return|return
name|Boolean
operator|.
name|class
return|;
block|}
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|col
operator|>
literal|0
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|aValue
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
if|if
condition|(
name|columnIndex
operator|==
literal|1
condition|)
name|_sel
index|[
name|rowIndex
index|]
operator|=
operator|(
name|Boolean
operator|)
name|aValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|JTable
name|table
init|=
operator|new
name|JTable
argument_list|(
name|tm
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowSelectionAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|table
operator|.
name|setColumnSelectionAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|table
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|exitDialog
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|table
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
operator|new
name|CancelAction
argument_list|()
argument_list|)
expr_stmt|;
name|TableColumnModel
name|cm
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|1
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|JLabel
name|lab
decl_stmt|;
name|JPanel
name|upper
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|lower
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|right
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|general
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|rightlow
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|tablePanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|innerTablePanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|sort
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|source
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|autoComp
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|groups
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
comment|//table.setBorder(BorderFactory.createEtchedBorder());
name|table
operator|.
name|setShowVerticalLines
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|innerTablePanel
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|)
expr_stmt|;
comment|//innerTablePanel.setBorder(BorderFactory.createLoweredBevelBorder());
name|tablePanel
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
literal|"Visible fields"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
literal|"Table appearance"
argument_list|)
argument_list|)
expr_stmt|;
name|general
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
literal|"General options"
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
literal|"Sort options"
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
literal|"Edit/view bibtex source"
argument_list|)
argument_list|)
expr_stmt|;
name|autoComp
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
literal|"Autocomplete options"
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
literal|"Groups options"
argument_list|)
argument_list|)
expr_stmt|;
name|formHeight
operator|.
name|setSelectedIndex
argument_list|(
name|prefs
operator|.
name|getInt
argument_list|(
literal|"entryTypeFormHeightFactor"
argument_list|)
argument_list|)
expr_stmt|;
name|formWidth
operator|.
name|setSelectedIndex
argument_list|(
name|prefs
operator|.
name|getInt
argument_list|(
literal|"entryTypeFormWidth"
argument_list|)
argument_list|)
expr_stmt|;
name|innerTablePanel
operator|.
name|setLayout
argument_list|(
operator|new
name|GridLayout
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|innerTablePanel
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|tablePanel
operator|.
name|add
argument_list|(
name|innerTablePanel
argument_list|)
expr_stmt|;
name|upper
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|right
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|general
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|source
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|autoComp
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|groups
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridheight
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|tablePanel
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|upper
operator|.
name|add
argument_list|(
name|tablePanel
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridheight
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|right
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|upper
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|general
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|upper
operator|.
name|add
argument_list|(
name|general
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|sort
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|upper
operator|.
name|add
argument_list|(
name|sort
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|source
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|upper
operator|.
name|add
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|autoComp
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|upper
operator|.
name|add
argument_list|(
name|autoComp
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|groups
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|upper
operator|.
name|add
argument_list|(
name|groups
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|colorCodes
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|right
operator|.
name|add
argument_list|(
name|colorCodes
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|autoResizeMode
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|right
operator|.
name|add
argument_list|(
name|autoResizeMode
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|autoOpenForm
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|general
operator|.
name|add
argument_list|(
name|autoOpenForm
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|formWidth
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|general
operator|.
name|add
argument_list|(
name|formWidth
argument_list|)
expr_stmt|;
name|lab
operator|=
operator|new
name|JLabel
argument_list|(
literal|"Secondary sort criterion"
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lab
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|lab
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|secSort
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|secSort
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|secDesc
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|secDesc
argument_list|)
expr_stmt|;
name|lab
operator|=
operator|new
name|JLabel
argument_list|(
literal|"Default width of entry editor"
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lab
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|general
operator|.
name|add
argument_list|(
name|lab
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|formHeight
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|general
operator|.
name|add
argument_list|(
name|formHeight
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|lab
operator|=
operator|new
name|JLabel
argument_list|(
literal|"Tertiary sort criterion"
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lab
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|lab
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|terSort
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|terSort
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|terDesc
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|terDesc
argument_list|)
expr_stmt|;
name|lab
operator|=
operator|new
name|JLabel
argument_list|(
literal|"Default height of entry editor"
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lab
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|general
operator|.
name|add
argument_list|(
name|lab
argument_list|)
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|backup
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|general
operator|.
name|add
argument_list|(
name|backup
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|openLast
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|general
operator|.
name|add
argument_list|(
name|openLast
argument_list|)
expr_stmt|;
name|lab
operator|=
operator|new
name|JLabel
argument_list|(
literal|"Primary sort criterion is set by clicking on column headers."
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lab
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|lab
argument_list|)
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|defSource
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|source
operator|.
name|add
argument_list|(
name|defSource
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|editSource
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|source
operator|.
name|add
argument_list|(
name|editSource
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|autoComplete
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|autoComp
operator|.
name|add
argument_list|(
name|autoComplete
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|openAutoComp
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|autoComp
operator|.
name|add
argument_list|(
name|openAutoComp
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|groupsVisible
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|groupsVisible
argument_list|)
expr_stmt|;
name|lab
operator|=
operator|new
name|JLabel
argument_list|(
literal|"Default search field for new group:"
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lab
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|lab
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|groupsField
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|groupsField
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|rightlow
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|upper
operator|.
name|add
argument_list|(
name|rightlow
argument_list|)
expr_stmt|;
name|JButton
name|ok
init|=
operator|new
name|JButton
argument_list|(
literal|"Ok"
argument_list|)
decl_stmt|,
name|cancel
init|=
operator|new
name|JButton
argument_list|(
literal|"Cancel"
argument_list|)
decl_stmt|;
name|ok
operator|.
name|addActionListener
argument_list|(
operator|new
name|OkAction
argument_list|()
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|addActionListener
argument_list|(
operator|new
name|CancelAction
argument_list|()
argument_list|)
expr_stmt|;
name|lower
operator|.
name|add
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|lower
operator|.
name|add
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
comment|//upper.setBackground(Color.white);
comment|//lower.setBackground(Color.white);
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|upper
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|lower
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
name|setResizable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getChoices ()
specifier|public
name|String
index|[]
name|getChoices
parameter_list|()
block|{
comment|// First we count how many checkboxes the user has selected.
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_sel
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|_sel
index|[
name|i
index|]
operator|.
name|booleanValue
argument_list|()
condition|)
name|count
operator|++
expr_stmt|;
comment|// Then we build the byte array.
name|String
index|[]
name|choices
init|=
operator|new
name|String
index|[
name|count
index|]
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_sel
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|_sel
index|[
name|i
index|]
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|choices
index|[
name|count
index|]
operator|=
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|i
index|]
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|choices
return|;
block|}
DECL|method|getAcChoices ()
specifier|public
name|byte
index|[]
name|getAcChoices
parameter_list|()
block|{
comment|// First we count how many checkboxes the user has selected
comment|// for which fields to autocomplete.
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sel_ac
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|sel_ac
index|[
name|i
index|]
operator|.
name|isSelected
argument_list|()
condition|)
name|count
operator|++
expr_stmt|;
comment|// Then we build the byte array.
name|byte
index|[]
name|choices
init|=
operator|new
name|byte
index|[
name|count
index|]
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sel_ac
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|sel_ac
index|[
name|i
index|]
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|choices
index|[
name|count
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|choices
return|;
block|}
DECL|class|OkAction
class|class
name|OkAction
extends|extends
name|AbstractAction
block|{
comment|//PrefsDialog parent;
DECL|method|OkAction ( )
specifier|public
name|OkAction
parameter_list|(
comment|/*PrefsDialog parent*/
parameter_list|)
block|{
name|super
argument_list|(
literal|"Ok"
argument_list|)
expr_stmt|;
comment|//this.parent = parent;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Record changes.
name|_prefs
operator|.
name|putStringArray
argument_list|(
literal|"columnNames"
argument_list|,
name|getChoices
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"tableColorCodesOn"
argument_list|,
name|colorCodes
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"autoOpenForm"
argument_list|,
name|autoOpenForm
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putInt
argument_list|(
literal|"autoResizeMode"
argument_list|,
name|autoResizeMode
operator|.
name|isSelected
argument_list|()
condition|?
name|JTable
operator|.
name|AUTO_RESIZE_ALL_COLUMNS
else|:
name|JTable
operator|.
name|AUTO_RESIZE_OFF
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putInt
argument_list|(
literal|"entryTypeFormHeightFactor"
argument_list|,
name|formHeight
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putInt
argument_list|(
literal|"entryTypeFormWidth"
argument_list|,
name|formWidth
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"backup"
argument_list|,
name|backup
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"openLastEdited"
argument_list|,
name|openLast
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"secDescending"
argument_list|,
name|secDesc
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"terDescending"
argument_list|,
name|terDesc
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|put
argument_list|(
literal|"secSort"
argument_list|,
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|secSort
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|put
argument_list|(
literal|"terSort"
argument_list|,
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|terSort
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"defaultShowSource"
argument_list|,
name|defSource
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"enableSourceEditing"
argument_list|,
name|editSource
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"autoComplete"
argument_list|,
name|autoComplete
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
comment|/*if (autoComplete.isSelected()) { 		//parent.database.setCompleters(parent.autoCompleters);	     		_prefs.putByteArray("autoCompFields", getAcChoices()); 		parent.assignAutoCompleters(); 		parent.updateAutoCompleters(); 		}*/
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"groupSelectorVisible"
argument_list|,
name|groupsVisible
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|put
argument_list|(
literal|"groupsDefaultField"
argument_list|,
name|groupsField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|output
argument_list|(
literal|"Preferences recorded."
argument_list|)
expr_stmt|;
comment|// Close dialog.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CancelAction
class|class
name|CancelAction
extends|extends
name|AbstractAction
block|{
DECL|method|CancelAction ()
specifier|public
name|CancelAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Cancel"
argument_list|)
expr_stmt|;
comment|//		  new ImageIcon(_prefs.getImagePath()+GUIGlobals.closeIconFile));
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Just close dialog without recording changes.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

