begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2004 R. Nagel  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_comment
comment|// created by : r.nagel 27.10.2004
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// function : check all bibtex items and report errors, inconsistencies and others
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     todo : find equal authors: e.g.: D. Knuth = Donald Knuth = Donald E. Knuth
end_comment

begin_comment
comment|//            and try to give all items an identically look
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// modified :
end_comment

begin_package
DECL|package|net.sf.jabref.wizard.integrity
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|integrity
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|IntegrityCheck
specifier|public
class|class
name|IntegrityCheck
block|{
DECL|method|IntegrityCheck ()
specifier|public
name|IntegrityCheck
parameter_list|()
block|{   }
DECL|method|checkBibtexDatabase (BibtexDatabase base)
specifier|public
name|Vector
name|checkBibtexDatabase
parameter_list|(
name|BibtexDatabase
name|base
parameter_list|)
block|{
name|Vector
name|back
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|Collection
name|col
init|=
name|base
operator|.
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|myIt
init|=
name|col
operator|.
name|iterator
argument_list|()
init|;
name|myIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|dat
init|=
name|myIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dat
operator|!=
literal|null
condition|)
block|{
name|BibtexEntry
name|item
init|=
operator|(
name|BibtexEntry
operator|)
name|dat
decl_stmt|;
name|Vector
name|result
init|=
name|checkBibtexEntry
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
name|back
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|back
return|;
block|}
DECL|method|checkBibtexEntry (BibtexEntry entry)
specifier|public
name|Vector
name|checkBibtexEntry
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Vector
name|back
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Object
name|name
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
name|back
operator|.
name|addAll
argument_list|(
name|authorCheck
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|back
return|;
block|}
DECL|method|authorCheck (String authors)
specifier|private
name|Vector
name|authorCheck
parameter_list|(
name|String
name|authors
parameter_list|)
block|{
name|Vector
name|back
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
comment|// try to extract the structure of author tag
comment|// N = name, ","= seperator, "a" = and
name|StringBuffer
name|structure
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|authors
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|mode
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|len
condition|;
name|t
operator|++
control|)
block|{
name|char
name|ch
init|=
name|authors
operator|.
name|charAt
argument_list|(
name|t
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|','
case|:
if|if
condition|(
name|mode
operator|==
literal|5
condition|)
comment|// "and"
name|structure
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
else|else
name|structure
operator|.
name|append
argument_list|(
literal|'N'
argument_list|)
expr_stmt|;
name|structure
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|mode
operator|=
literal|0
expr_stmt|;
break|break ;
case|case
literal|' '
case|:
if|if
condition|(
name|mode
operator|==
literal|5
condition|)
comment|// "and"
name|structure
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|mode
operator|!=
literal|0
condition|)
name|structure
operator|.
name|append
argument_list|(
literal|'N'
argument_list|)
expr_stmt|;
name|mode
operator|=
operator|-
literal|1
expr_stmt|;
comment|// blank processed
break|break ;
case|case
literal|'a'
case|:
if|if
condition|(
name|mode
operator|==
operator|-
literal|1
condition|)
name|mode
operator|=
literal|2
expr_stmt|;
break|break ;
case|case
literal|'n'
case|:
if|if
condition|(
name|mode
operator|==
literal|2
condition|)
name|mode
operator|=
literal|3
expr_stmt|;
break|break ;
case|case
literal|'d'
case|:
if|if
condition|(
name|mode
operator|==
literal|3
condition|)
name|mode
operator|=
literal|5
expr_stmt|;
break|break ;
default|default :
name|mode
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mode
operator|==
literal|5
condition|)
comment|// "and"
name|structure
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|mode
operator|!=
literal|0
condition|)
name|structure
operator|.
name|append
argument_list|(
literal|'N'
argument_list|)
expr_stmt|;
comment|// Check
name|len
operator|=
name|structure
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
name|char
name|z1
init|=
name|structure
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|structure
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'N'
condition|)
comment|// must start by name
block|{
name|back
operator|.
name|add
argument_list|(
literal|"beginning of author field"
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|structure
operator|.
name|charAt
argument_list|(
name|structure
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'N'
condition|)
comment|// end without seperator
block|{
name|back
operator|.
name|add
argument_list|(
literal|"bad end (author field)"
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|structure
operator|.
name|indexOf
argument_list|(
literal|"NN,NN"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|back
operator|.
name|add
argument_list|(
literal|"something could be wrong in author field"
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
comment|//      if (failed)
comment|//        System.out.println(authors +" #" +structure.toString() +"#") ;
block|}
return|return
name|back
return|;
block|}
block|}
end_class

end_unit

