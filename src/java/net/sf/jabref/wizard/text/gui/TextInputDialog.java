begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2004 R. Nagel   All programs in this directory and  subdirectories are published under the GNU General Public License as  described below.   This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or (at  your option) any later version.   This program is distributed in the hope that it will be useful, but  WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  General Public License for more details.   You should have received a copy of the GNU General Public License  along with this program; if not, write to the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA   Further information about the GNU GPL is available at:  http://www.gnu.org/copyleft/gpl.ja.html   */
end_comment

begin_comment
comment|// created by : r.nagel 14.09.2004
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// function : import from plain text => simple mark/copy/paste into bibtex entry
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// todo     : - change colors and fonts
end_comment

begin_comment
comment|//            - delete selected text
end_comment

begin_comment
comment|//            - make textarea editable
end_comment

begin_comment
comment|//            - create several bibtex entries in dialog
end_comment

begin_comment
comment|//            - if the dialog works with an existing entry (right click menu item)
end_comment

begin_comment
comment|//              the cancel option doesn't work well
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// modified :
end_comment

begin_comment
comment|//            28.07.2005
end_comment

begin_comment
comment|//            - fix: insert button doesnt work
end_comment

begin_comment
comment|//            - append a author with "and"
end_comment

begin_comment
comment|//            04.11.2004
end_comment

begin_comment
comment|//            - experimental: text-input-area with underlying infotext
end_comment

begin_comment
comment|//            02.11.2004
end_comment

begin_comment
comment|//            - integrity check, which reports errors and warnings for the fields
end_comment

begin_comment
comment|//            22.10.2004
end_comment

begin_comment
comment|//            - little help box
end_comment

begin_comment
comment|//
end_comment

begin_package
DECL|package|net.sf.jabref.wizard.text.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|text
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|integrity
operator|.
name|gui
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TextInputDialog
specifier|public
class|class
name|TextInputDialog
extends|extends
name|JDialog
implements|implements
name|ActionListener
block|{
DECL|field|okButton
specifier|private
name|JButton
name|okButton
init|=
operator|new
name|JButton
argument_list|()
decl_stmt|;
DECL|field|cancelButton
specifier|private
name|JButton
name|cancelButton
init|=
operator|new
name|JButton
argument_list|()
decl_stmt|;
DECL|field|insertButton
specifier|private
name|JButton
name|insertButton
init|=
operator|new
name|JButton
argument_list|()
decl_stmt|;
DECL|field|panel1
specifier|private
name|JPanel
name|panel1
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|buttonPanel
specifier|private
name|JPanel
name|buttonPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|rawPanel
specifier|private
name|JPanel
name|rawPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|sourcePanel
specifier|private
name|JPanel
name|sourcePanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|warnPanel
specifier|private
name|IntegrityMessagePanel
name|warnPanel
decl_stmt|;
DECL|field|fieldList
specifier|private
name|JList
name|fieldList
decl_stmt|;
DECL|field|overRadio
DECL|field|appRadio
specifier|private
name|JRadioButton
name|overRadio
decl_stmt|,
name|appRadio
decl_stmt|;
DECL|field|testPanel
specifier|private
name|OverlayPanel
name|testPanel
decl_stmt|;
DECL|field|entry
specifier|private
name|BibtexEntry
name|entry
decl_stmt|;
DECL|field|inputMenu
specifier|public
name|JPopupMenu
name|inputMenu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|doc
specifier|private
name|StyledDocument
name|doc
decl_stmt|;
comment|// content from inputPane
DECL|field|textPane
specifier|private
name|JTextPane
name|textPane
decl_stmt|;
DECL|field|preview
specifier|private
name|JTextArea
name|preview
decl_stmt|;
DECL|field|inputChanged
specifier|private
name|boolean
name|inputChanged
decl_stmt|;
comment|// input changed, fired by insert button
DECL|field|marked
specifier|private
name|TagToMarkedTextStore
name|marked
decl_stmt|;
DECL|field|_frame
specifier|private
name|JabRefFrame
name|_frame
decl_stmt|;
DECL|field|okPressed
specifier|private
name|boolean
name|okPressed
init|=
literal|false
decl_stmt|;
DECL|method|TextInputDialog ( JabRefFrame frame, BasePanel panel, String title, boolean modal, BibtexEntry bibEntry )
specifier|public
name|TextInputDialog
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanel
name|panel
parameter_list|,
name|String
name|title
parameter_list|,
name|boolean
name|modal
parameter_list|,
name|BibtexEntry
name|bibEntry
parameter_list|)
block|{
name|super
argument_list|(
name|frame
argument_list|,
name|title
argument_list|,
name|modal
argument_list|)
expr_stmt|;
name|warnPanel
operator|=
operator|new
name|IntegrityMessagePanel
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|inputChanged
operator|=
literal|true
expr_stmt|;
comment|// for a first validCheck
name|_frame
operator|=
name|frame
expr_stmt|;
name|entry
operator|=
name|bibEntry
expr_stmt|;
name|marked
operator|=
operator|new
name|TagToMarkedTextStore
argument_list|()
expr_stmt|;
try|try
block|{
name|jbInit
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|updateSourceView
argument_list|()
expr_stmt|;
block|}
DECL|method|jbInit ( JabRefFrame parent )
specifier|private
name|void
name|jbInit
parameter_list|(
name|JabRefFrame
name|parent
parameter_list|)
block|{
name|this
operator|.
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//this.setResizable( false ) ;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|typeStr
init|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"for"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|typeStr
operator|=
name|typeStr
operator|+
literal|" "
operator|+
name|entry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|setTitle
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plain_text_import"
argument_list|)
operator|+
literal|" "
operator|+
name|typeStr
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|panel1
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|initRawPanel
argument_list|()
expr_stmt|;
name|initButtonPanel
argument_list|()
expr_stmt|;
name|initSourcePanel
argument_list|()
expr_stmt|;
name|JTabbedPane
name|tabbed
init|=
operator|new
name|JTabbedPane
argument_list|()
decl_stmt|;
name|tabbed
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputChanged
condition|)
block|{
name|warnPanel
operator|.
name|updateView
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|add
argument_list|(
name|rawPanel
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Raw_source"
argument_list|)
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|add
argument_list|(
name|sourcePanel
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"BibTeX_source"
argument_list|)
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|add
argument_list|(
name|warnPanel
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Messages_and_Hints"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Panel Layout
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|panel1
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
comment|//gbl.setConstraints( tabbed, con ) ;
name|panel1
operator|.
name|add
argument_list|(
name|tabbed
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
comment|//gbl.setConstraints( buttonPanel, con ) ;
name|panel1
operator|.
name|add
argument_list|(
name|buttonPanel
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
comment|// Key bindings:
name|ActionMap
name|am
init|=
name|buttonPanel
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|InputMap
name|im
init|=
name|buttonPanel
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
decl_stmt|;
name|im
operator|.
name|put
argument_list|(
name|parent
operator|.
name|prefs
argument_list|()
operator|.
name|getKey
argument_list|(
literal|"Close dialog"
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// ---------------------------------------------------------------------------
comment|// Panel with text import functionality
DECL|method|initRawPanel ()
specifier|private
name|void
name|initRawPanel
parameter_list|()
block|{
name|rawPanel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
comment|// Textarea
name|textPane
operator|=
operator|new
name|JTextPane
argument_list|()
expr_stmt|;
name|textPane
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doc
operator|=
name|textPane
operator|.
name|getStyledDocument
argument_list|()
expr_stmt|;
name|addStylesToDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
try|try
block|{
name|doc
operator|.
name|insertString
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
name|doc
operator|.
name|getStyle
argument_list|(
literal|"regular"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
name|testPanel
operator|=
operator|new
name|OverlayPanel
argument_list|(
name|textPane
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Text_Input_Area"
argument_list|)
argument_list|)
expr_stmt|;
name|testPanel
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|450
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|testPanel
operator|.
name|setMaximumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|450
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
comment|// copy/paste Menu
name|PasteAction
name|pasteAction
init|=
operator|new
name|PasteAction
argument_list|()
decl_stmt|;
name|JMenuItem
name|pasteMI
init|=
operator|new
name|JMenuItem
argument_list|(
name|pasteAction
argument_list|)
decl_stmt|;
name|inputMenu
operator|.
name|add
argument_list|(
operator|new
name|MenuHeaderAction
argument_list|()
argument_list|)
expr_stmt|;
name|inputMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|inputMenu
operator|.
name|add
argument_list|(
name|pasteMI
argument_list|)
expr_stmt|;
comment|//Add listener to components that can bring up popup menus.
name|MouseListener
name|popupListener
init|=
operator|new
name|PopupListener
argument_list|(
name|inputMenu
argument_list|)
decl_stmt|;
name|textPane
operator|.
name|addMouseListener
argument_list|(
name|popupListener
argument_list|)
expr_stmt|;
name|testPanel
operator|.
name|addMouseListener
argument_list|(
name|popupListener
argument_list|)
expr_stmt|;
comment|// Toolbar
name|JToolBar
name|toolBar
init|=
operator|new
name|JToolBar
argument_list|()
decl_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
operator|new
name|ClearAction
argument_list|()
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|setBorderPainted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|pasteAction
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
operator|new
name|LoadAction
argument_list|()
argument_list|)
expr_stmt|;
name|JPanel
name|leftPanel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
decl_stmt|;
name|leftPanel
operator|.
name|add
argument_list|(
name|toolBar
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|leftPanel
operator|.
name|add
argument_list|(
name|testPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
comment|// ----------------------------------------------------------------
name|JPanel
name|inputPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
comment|// Panel Layout
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|inputPanel
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
comment|// Border
name|TitledBorder
name|titledBorder1
init|=
operator|new
name|TitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createLineBorder
argument_list|(
operator|new
name|Color
argument_list|(
literal|153
argument_list|,
literal|153
argument_list|,
literal|153
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Input"
argument_list|)
argument_list|)
decl_stmt|;
name|inputPanel
operator|.
name|setBorder
argument_list|(
name|titledBorder1
argument_list|)
expr_stmt|;
comment|//inputPanel.setPreferredSize( new Dimension( 200, 255 ) ) ;
name|inputPanel
operator|.
name|setMinimumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|fieldList
operator|=
operator|new
name|JList
argument_list|(
name|getAllFields
argument_list|()
argument_list|)
expr_stmt|;
name|fieldList
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|SimpleCellRenderer
argument_list|(
name|fieldList
operator|.
name|getFont
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ListSelectionModel
name|listSelectionModel
init|=
name|fieldList
operator|.
name|getSelectionModel
argument_list|()
decl_stmt|;
name|listSelectionModel
operator|.
name|setSelectionMode
argument_list|(
name|ListSelectionModel
operator|.
name|SINGLE_SELECTION
argument_list|)
expr_stmt|;
name|listSelectionModel
operator|.
name|addListSelectionListener
argument_list|(
operator|new
name|FieldListSelectionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|fieldList
operator|.
name|addMouseListener
argument_list|(
operator|new
name|FieldListMouseListener
argument_list|()
argument_list|)
expr_stmt|;
name|JScrollPane
name|fieldScroller
init|=
operator|new
name|JScrollPane
argument_list|(
name|fieldList
argument_list|)
decl_stmt|;
name|fieldScroller
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|)
expr_stmt|;
comment|//fieldScroller.setPreferredSize( new Dimension( 180, 190 ) ) ;
comment|//fieldScroller.setMinimumSize( new Dimension( 180, 190 ) ) ;
comment|// insert button
name|insertButton
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Insert"
argument_list|)
argument_list|)
expr_stmt|;
name|insertButton
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Radio buttons
name|appRadio
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Append"
argument_list|)
argument_list|)
expr_stmt|;
name|appRadio
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"append_the_selected_text_to_bibtex_key"
argument_list|)
argument_list|)
expr_stmt|;
name|appRadio
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_A
argument_list|)
expr_stmt|;
name|appRadio
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|overRadio
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Override"
argument_list|)
argument_list|)
expr_stmt|;
name|overRadio
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"override_the_bibtex_key_by_the_selected_text"
argument_list|)
argument_list|)
expr_stmt|;
name|overRadio
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_O
argument_list|)
expr_stmt|;
name|overRadio
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//Group the radio buttons.
name|ButtonGroup
name|group
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|appRadio
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
name|overRadio
argument_list|)
expr_stmt|;
name|JPanel
name|radioPanel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|GridLayout
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|radioPanel
operator|.
name|add
argument_list|(
name|appRadio
argument_list|)
expr_stmt|;
name|radioPanel
operator|.
name|add
argument_list|(
name|overRadio
argument_list|)
expr_stmt|;
comment|// insert sub components
name|JLabel
name|label1
init|=
operator|new
name|JLabel
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Available fields"
argument_list|)
argument_list|)
decl_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|label1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|inputPanel
operator|.
name|add
argument_list|(
name|label1
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|gridheight
operator|=
literal|8
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|fieldScroller
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|inputPanel
operator|.
name|add
argument_list|(
name|fieldScroller
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|radioPanel
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|inputPanel
operator|.
name|add
argument_list|(
name|radioPanel
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|insertButton
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|inputPanel
operator|.
name|add
argument_list|(
name|insertButton
argument_list|)
expr_stmt|;
comment|// ----------------------------------------------------------------------
name|rawPanel
operator|.
name|add
argument_list|(
name|leftPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|rawPanel
operator|.
name|add
argument_list|(
name|inputPanel
argument_list|,
name|BorderLayout
operator|.
name|EAST
argument_list|)
expr_stmt|;
comment|// ----------------------------------------------------------------------
comment|// add a short info, if available
comment|// load the info text from a help-file, the "normal" translation is
comment|// to long and unpractical for the properties file (single line)
comment|// => try to load the help file text, if it fails, show a short text
comment|//infoText.setText(Globals.lang("This_is_a_simple_copy_and_paste_dialog._First_load_or_paste_some_"
comment|//        +"text_into_the_text_input_area._After_that,_you_can_mark_text_and_assign_it_to_a_bibtex_field."));
name|JEditorPane
name|infoText
init|=
operator|new
name|JEditorPane
argument_list|()
decl_stmt|;
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
name|URL
name|infoURL
init|=
name|JabRef
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|GUIGlobals
operator|.
name|getLocaleHelpPath
argument_list|()
operator|+
name|GUIGlobals
operator|.
name|shortPlainImport
argument_list|)
decl_stmt|;
if|if
condition|(
name|infoURL
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// get the info text from help file
name|infoText
operator|.
name|setPage
argument_list|(
name|infoURL
argument_list|)
expr_stmt|;
comment|//infoText.setContentType("text/html");
name|loaded
operator|=
literal|true
expr_stmt|;
comment|// text successfully loaded
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
if|if
condition|(
operator|!
name|loaded
condition|)
comment|// only if no help available
block|{
name|infoText
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"This_is_a_simple_copy_and_paste_dialog_for_import_some_fields_from_normal_text."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|infoText
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|infoText
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|infoField
argument_list|)
expr_stmt|;
name|infoText
operator|.
name|setBorder
argument_list|(
operator|new
name|EtchedBorder
argument_list|(
name|EtchedBorder
operator|.
name|LOWERED
argument_list|)
argument_list|)
expr_stmt|;
name|infoText
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|220
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|infoText
operator|.
name|setMinimumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|180
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|rawPanel
operator|.
name|add
argument_list|(
name|infoText
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
block|}
comment|// ---------------------------------------------------------------------------
comment|// ---------------------------------------------------------------------------
DECL|method|initButtonPanel ()
specifier|private
name|void
name|initButtonPanel
parameter_list|()
block|{
comment|// Panel Layout
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
comment|//    buttonPanel.setLayout(gbl) ;
comment|// Buttons
name|okButton
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Accept"
argument_list|)
argument_list|)
expr_stmt|;
comment|//    okButton.setEnabled(false);
name|okButton
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|cancelButton
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
expr_stmt|;
name|cancelButton
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// insert Buttons
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|okButton
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|buttonPanel
operator|.
name|add
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|cancelButton
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|buttonPanel
operator|.
name|add
argument_list|(
name|cancelButton
argument_list|)
expr_stmt|;
block|}
comment|// ---------------------------------------------------------------------------
comment|// Panel with bibtex source code
DECL|method|initSourcePanel ()
specifier|private
name|void
name|initSourcePanel
parameter_list|()
block|{
comment|//    preview =  new PreviewPanel(entry) ;
name|preview
operator|=
operator|new
name|JTextArea
argument_list|()
expr_stmt|;
name|preview
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JScrollPane
name|paneScrollPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|preview
argument_list|)
decl_stmt|;
name|paneScrollPane
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_ALWAYS
argument_list|)
expr_stmt|;
name|paneScrollPane
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|500
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|paneScrollPane
operator|.
name|setMinimumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|sourcePanel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|sourcePanel
operator|.
name|add
argument_list|(
name|paneScrollPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
comment|// ---------------------------------------------------------------------------
comment|// ---------------------------------------------------------------------------
DECL|method|addStylesToDocument ( StyledDocument doc )
specifier|protected
name|void
name|addStylesToDocument
parameter_list|(
name|StyledDocument
name|doc
parameter_list|)
block|{
comment|//Initialize some styles.
name|Style
name|def
init|=
name|StyleContext
operator|.
name|getDefaultStyleContext
argument_list|()
operator|.
name|getStyle
argument_list|(
name|StyleContext
operator|.
name|DEFAULT_STYLE
argument_list|)
decl_stmt|;
name|Style
name|regular
init|=
name|doc
operator|.
name|addStyle
argument_list|(
literal|"regular"
argument_list|,
name|def
argument_list|)
decl_stmt|;
name|StyleConstants
operator|.
name|setFontFamily
argument_list|(
name|def
argument_list|,
literal|"SansSerif"
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setFontSize
argument_list|(
name|def
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|Style
name|s
init|=
name|doc
operator|.
name|addStyle
argument_list|(
literal|"oldused"
argument_list|,
name|regular
argument_list|)
decl_stmt|;
name|StyleConstants
operator|.
name|setItalic
argument_list|(
name|s
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|s
argument_list|,
name|Color
operator|.
name|blue
argument_list|)
expr_stmt|;
name|s
operator|=
name|doc
operator|.
name|addStyle
argument_list|(
literal|"used"
argument_list|,
name|regular
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setBold
argument_list|(
name|s
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|s
argument_list|,
name|Color
operator|.
name|blue
argument_list|)
expr_stmt|;
name|s
operator|=
name|doc
operator|.
name|addStyle
argument_list|(
literal|"marked"
argument_list|,
name|regular
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setBold
argument_list|(
name|s
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|s
argument_list|,
name|Color
operator|.
name|red
argument_list|)
expr_stmt|;
name|s
operator|=
name|doc
operator|.
name|addStyle
argument_list|(
literal|"small"
argument_list|,
name|regular
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setFontSize
argument_list|(
name|s
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|s
operator|=
name|doc
operator|.
name|addStyle
argument_list|(
literal|"large"
argument_list|,
name|regular
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setFontSize
argument_list|(
name|s
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
comment|// ---------------------------------------------------------------------------
DECL|method|insertTextForTag ()
specifier|private
name|void
name|insertTextForTag
parameter_list|()
block|{
name|String
name|type
init|=
operator|(
name|String
operator|)
name|fieldList
operator|.
name|getSelectedValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|String
name|txt
init|=
name|textPane
operator|.
name|getSelectedText
argument_list|()
decl_stmt|;
if|if
condition|(
name|txt
operator|!=
literal|null
condition|)
block|{
name|int
name|selStart
init|=
name|textPane
operator|.
name|getSelectionStart
argument_list|()
decl_stmt|;
name|int
name|selEnd
init|=
name|textPane
operator|.
name|getSelectionEnd
argument_list|()
decl_stmt|;
comment|// unselect text
name|textPane
operator|.
name|setSelectionEnd
argument_list|(
name|selStart
argument_list|)
expr_stmt|;
comment|// mark the selected text as "used"
name|doc
operator|.
name|setCharacterAttributes
argument_list|(
name|selStart
argument_list|,
name|selEnd
operator|-
name|selStart
argument_list|,
name|doc
operator|.
name|getStyle
argument_list|(
literal|"marked"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// override an existing entry
if|if
condition|(
name|overRadio
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|type
argument_list|,
name|txt
argument_list|)
expr_stmt|;
comment|// erase old text selection
name|marked
operator|.
name|setStyleForTag
argument_list|(
name|type
argument_list|,
literal|"regular"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
comment|// delete all previous styles
name|marked
operator|.
name|insertPosition
argument_list|(
name|type
argument_list|,
name|selStart
argument_list|,
name|selEnd
argument_list|)
expr_stmt|;
comment|// insert new selection style
block|}
else|else
comment|// append text
block|{
comment|// memorize the selection for text highlighting
name|marked
operator|.
name|appendPosition
argument_list|(
name|type
argument_list|,
name|selStart
argument_list|,
name|selEnd
argument_list|)
expr_stmt|;
comment|// get old text from bibtex tag
name|String
name|old
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getField
argument_list|(
name|type
argument_list|)
decl_stmt|;
comment|// merge old and selected text
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
comment|// insert a new author with an additional "and"
if|if
condition|(
name|type
operator|.
name|hashCode
argument_list|()
operator|==
literal|"author"
operator|.
name|hashCode
argument_list|()
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|type
argument_list|,
name|old
operator|+
literal|" and "
operator|+
name|txt
argument_list|)
expr_stmt|;
block|}
else|else
name|entry
operator|.
name|setField
argument_list|(
name|type
argument_list|,
name|old
operator|+
name|txt
argument_list|)
expr_stmt|;
block|}
else|else
comment|// "null"+"txt" Strings forbidden
block|{
name|entry
operator|.
name|setField
argument_list|(
name|type
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make the new data in bibtex source code visible
name|updateSourceView
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// ---------------------------------------------------------------------------
comment|// ---------------------------------------------------------------------------
DECL|method|okPressed ()
specifier|public
name|boolean
name|okPressed
parameter_list|()
block|{
return|return
name|okPressed
return|;
block|}
comment|// ---------------------------------------------------------------------------
comment|//  ActionListener
comment|//  handling of button-click actions
DECL|method|actionPerformed ( ActionEvent e )
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|Object
name|source
init|=
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|==
name|this
operator|.
name|okButton
condition|)
block|{
name|okPressed
operator|=
literal|true
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|this
operator|.
name|cancelButton
condition|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|this
operator|.
name|insertButton
condition|)
block|{
name|insertTextForTag
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ---------------------------------------------------------------------------
comment|// update the bibtex source view and available List
DECL|method|updateSourceView ()
specifier|private
specifier|final
name|void
name|updateSourceView
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|200
argument_list|)
decl_stmt|;
try|try
block|{
name|entry
operator|.
name|write
argument_list|(
name|sw
argument_list|,
operator|new
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|LatexFieldFormatter
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|srcString
init|=
name|sw
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|preview
operator|.
name|setText
argument_list|(
name|srcString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{}
name|fieldList
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
comment|// ---------------------------------------------------------------------------
DECL|method|getAllFields ()
specifier|private
specifier|final
name|String
index|[]
name|getAllFields
parameter_list|()
block|{
name|int
name|len
init|=
literal|0
decl_stmt|;
name|String
name|dummy
index|[]
index|[]
init|=
operator|new
name|String
index|[
literal|3
index|]
index|[]
decl_stmt|;
comment|// fill
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|dummy
index|[
literal|0
index|]
operator|=
name|entry
operator|.
name|getRequiredFields
argument_list|()
expr_stmt|;
name|dummy
index|[
literal|1
index|]
operator|=
name|entry
operator|.
name|getGeneralFields
argument_list|()
expr_stmt|;
name|dummy
index|[
literal|2
index|]
operator|=
name|entry
operator|.
name|getOptionalFields
argument_list|()
expr_stmt|;
block|}
comment|// get size of new result array
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|3
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|dummy
index|[
name|t
index|]
operator|!=
literal|null
condition|)
block|{
name|len
operator|=
name|len
operator|+
name|dummy
index|[
name|t
index|]
operator|.
name|length
expr_stmt|;
block|}
block|}
name|String
name|back
index|[]
init|=
operator|new
name|String
index|[
name|len
index|]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|// put
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|3
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|dummy
index|[
name|t
index|]
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|dummy
index|[
name|t
index|]
argument_list|,
literal|0
argument_list|,
name|back
argument_list|,
name|count
argument_list|,
name|dummy
index|[
name|t
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|count
operator|+=
name|dummy
index|[
name|t
index|]
operator|.
name|length
expr_stmt|;
block|}
block|}
return|return
name|back
return|;
block|}
comment|// ---------------------------------------------------------------------------
DECL|class|PasteAction
class|class
name|PasteAction
extends|extends
name|BasicAction
block|{
DECL|method|PasteAction ()
specifier|public
name|PasteAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Paste"
argument_list|,
literal|"Paste from clipboard"
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"paste"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed ( ActionEvent e )
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|data
init|=
name|ClipBoardManager
operator|.
name|clipBoard
operator|.
name|getClipboardContents
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|int
name|selStart
init|=
name|textPane
operator|.
name|getSelectionStart
argument_list|()
decl_stmt|;
name|int
name|selEnd
init|=
name|textPane
operator|.
name|getSelectionEnd
argument_list|()
decl_stmt|;
if|if
condition|(
name|selEnd
operator|-
name|selStart
operator|>
literal|0
condition|)
block|{
name|textPane
operator|.
name|replaceSelection
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|int
name|cPos
init|=
name|textPane
operator|.
name|getCaretPosition
argument_list|()
decl_stmt|;
try|try
block|{
name|doc
operator|.
name|insertString
argument_list|(
name|cPos
argument_list|,
name|data
argument_list|,
name|doc
operator|.
name|getStyle
argument_list|(
literal|"regular"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
block|}
block|}
block|}
comment|// ---------------------------------------------------------------------------
DECL|class|LoadAction
class|class
name|LoadAction
extends|extends
name|BasicAction
block|{
DECL|method|LoadAction ()
specifier|public
name|LoadAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Open"
argument_list|,
literal|"Open_file"
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"open"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed ( ActionEvent e )
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|String
name|chosen
init|=
literal|null
decl_stmt|;
name|chosen
operator|=
name|Globals
operator|.
name|getNewFile
argument_list|(
name|_frame
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|".txt"
argument_list|,
name|JFileChooser
operator|.
name|OPEN_DIALOG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|chosen
operator|!=
literal|null
condition|)
block|{
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|chosen
argument_list|)
decl_stmt|;
name|doc
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|doc
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|EditorKit
name|eKit
init|=
name|textPane
operator|.
name|getEditorKit
argument_list|()
decl_stmt|;
if|if
condition|(
name|eKit
operator|!=
literal|null
condition|)
block|{
name|eKit
operator|.
name|read
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|newFile
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setLogicalStyle
argument_list|(
literal|0
argument_list|,
name|doc
operator|.
name|getStyle
argument_list|(
literal|"regular"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
block|}
block|}
comment|// ---------------------------------------------------------------------------
DECL|class|ClearAction
class|class
name|ClearAction
extends|extends
name|BasicAction
block|{
DECL|method|ClearAction ()
specifier|public
name|ClearAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Clear"
argument_list|,
literal|"Clear_inputarea"
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed ( ActionEvent e )
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|textPane
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ---------------------------------------------------------------------------
DECL|class|MenuHeaderAction
class|class
name|MenuHeaderAction
extends|extends
name|BasicAction
block|{
DECL|method|MenuHeaderAction ()
specifier|public
name|MenuHeaderAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Edit"
argument_list|)
expr_stmt|;
name|this
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed ( ActionEvent e )
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{}
block|}
comment|// ---------------------------------------------------------------------------
DECL|class|FieldListSelectionHandler
class|class
name|FieldListSelectionHandler
implements|implements
name|ListSelectionListener
block|{
DECL|field|lastIndex
specifier|private
name|int
name|lastIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|valueChanged ( ListSelectionEvent e )
specifier|public
name|void
name|valueChanged
parameter_list|(
name|ListSelectionEvent
name|e
parameter_list|)
block|{
name|ListSelectionModel
name|lsm
init|=
operator|(
name|ListSelectionModel
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|lsm
operator|.
name|getAnchorSelectionIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|!=
name|lastIndex
condition|)
block|{
name|boolean
name|isAdjusting
init|=
name|e
operator|.
name|getValueIsAdjusting
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isAdjusting
condition|)
comment|// if selection is finished
block|{
comment|//            System.out.println( "Event for index" + index ) ;
if|if
condition|(
name|lastIndex
operator|>
operator|-
literal|1
condition|)
block|{
name|String
name|tag1
init|=
name|fieldList
operator|.
name|getModel
argument_list|()
operator|.
name|getElementAt
argument_list|(
name|lastIndex
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|marked
operator|.
name|setStyleForTag
argument_list|(
name|tag1
argument_list|,
literal|"used"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
name|String
name|tag2
init|=
name|fieldList
operator|.
name|getModel
argument_list|()
operator|.
name|getElementAt
argument_list|(
name|index
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|marked
operator|.
name|setStyleForTag
argument_list|(
name|tag2
argument_list|,
literal|"marked"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|lastIndex
operator|=
name|index
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// ---------------------------------------------------------------------------
comment|// simple JList Renderer
comment|// based on : Advanced JList Programming at developers.sun.com
DECL|class|SimpleCellRenderer
class|class
name|SimpleCellRenderer
extends|extends
name|DefaultListCellRenderer
block|{
DECL|field|baseFont
specifier|private
name|Font
name|baseFont
decl_stmt|;
DECL|field|usedFont
specifier|private
name|Font
name|usedFont
decl_stmt|;
DECL|field|okIcon
specifier|private
name|ImageIcon
name|okIcon
init|=
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"complete"
argument_list|)
decl_stmt|;
DECL|field|needIcon
specifier|private
name|ImageIcon
name|needIcon
init|=
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"wrong"
argument_list|)
decl_stmt|;
DECL|method|SimpleCellRenderer ( Font normFont )
specifier|public
name|SimpleCellRenderer
parameter_list|(
name|Font
name|normFont
parameter_list|)
block|{
name|baseFont
operator|=
name|normFont
expr_stmt|;
name|usedFont
operator|=
name|baseFont
operator|.
name|deriveFont
argument_list|(
name|Font
operator|.
name|ITALIC
argument_list|)
expr_stmt|;
block|}
comment|/* This is the only method defined by ListCellRenderer.  We just      * reconfigure the Jlabel each time we're called.      */
DECL|method|getListCellRendererComponent ( JList list, Object value, int index, boolean iss, boolean chf )
specifier|public
name|Component
name|getListCellRendererComponent
parameter_list|(
name|JList
name|list
parameter_list|,
name|Object
name|value
parameter_list|,
comment|// value to display
name|int
name|index
parameter_list|,
comment|// cell index
name|boolean
name|iss
parameter_list|,
comment|// is the cell selected
name|boolean
name|chf
parameter_list|)
comment|// the list and the cell have the focus
block|{
comment|/* The DefaultListCellRenderer class will take care of        * the JLabels text property, it's foreground and background        * colors, and so on.        */
name|super
operator|.
name|getListCellRendererComponent
argument_list|(
name|list
argument_list|,
name|value
argument_list|,
name|index
argument_list|,
name|iss
argument_list|,
name|chf
argument_list|)
expr_stmt|;
comment|/* We additionally set the JLabels icon property here.        */
name|String
name|s
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//        setIcon((s.length> 10) ? longIcon : shortIcon);
if|if
condition|(
name|entry
operator|.
name|getField
argument_list|(
name|s
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|setForeground
argument_list|(
name|Color
operator|.
name|gray
argument_list|)
expr_stmt|;
name|this
operator|.
name|setFont
argument_list|(
name|usedFont
argument_list|)
expr_stmt|;
name|this
operator|.
name|setIcon
argument_list|(
name|okIcon
argument_list|)
expr_stmt|;
name|this
operator|.
name|setToolTipText
argument_list|(
literal|"filled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|setIcon
argument_list|(
name|needIcon
argument_list|)
expr_stmt|;
name|this
operator|.
name|setToolTipText
argument_list|(
literal|"field is missing"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
comment|//---------------------------------------------------------------
DECL|class|FieldListMouseListener
class|class
name|FieldListMouseListener
extends|extends
name|MouseAdapter
block|{
DECL|method|mouseClicked ( MouseEvent e )
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|insertTextForTag
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|//---------------------------------------------------------------
end_comment

begin_class
DECL|class|PopupListener
class|class
name|PopupListener
extends|extends
name|MouseAdapter
block|{
DECL|field|popMenu
specifier|private
name|JPopupMenu
name|popMenu
decl_stmt|;
DECL|method|PopupListener ( JPopupMenu menu )
specifier|public
name|PopupListener
parameter_list|(
name|JPopupMenu
name|menu
parameter_list|)
block|{
name|popMenu
operator|=
name|menu
expr_stmt|;
block|}
DECL|method|mousePressed ( MouseEvent e )
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|maybeShowPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|mouseReleased ( MouseEvent e )
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|maybeShowPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|maybeShowPopup ( MouseEvent e )
specifier|private
name|void
name|maybeShowPopup
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
comment|//      System.out.println("show "
comment|//                         + e.getComponent() +"  x =" + e.getX() +"y =" + e.getY() ) ;
comment|//      popMenu.setVisible(true);
name|popMenu
operator|.
name|show
argument_list|(
name|e
operator|.
name|getComponent
argument_list|()
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|//---------------------------------------------------------------
end_comment

begin_class
DECL|class|BasicAction
specifier|abstract
class|class
name|BasicAction
extends|extends
name|AbstractAction
block|{
DECL|method|BasicAction ( String text, String description, URL icon )
specifier|public
name|BasicAction
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|URL
name|icon
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|icon
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BasicAction ( String text, String description, URL icon, KeyStroke key )
specifier|public
name|BasicAction
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|URL
name|icon
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|icon
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BasicAction ( String text )
specifier|public
name|BasicAction
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BasicAction ( String text, KeyStroke key )
specifier|public
name|BasicAction
parameter_list|(
name|String
name|text
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed ( ActionEvent e )
specifier|public
specifier|abstract
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
function_decl|;
block|}
end_class

begin_comment
comment|//---------------------------------------------------------------
end_comment

begin_comment
comment|//---------------------------------------------------------------
end_comment

end_unit

