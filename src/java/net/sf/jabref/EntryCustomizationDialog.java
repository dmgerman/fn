begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2002-2003 Nizar N. Batada nbatada@stanford.edu All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_class
DECL|class|EntryCustomizationDialog
class|class
name|EntryCustomizationDialog
extends|extends
name|JDialog
block|{
DECL|field|type
name|BibtexEntryType
name|type
decl_stmt|;
DECL|field|ok
DECL|field|cancel
name|JButton
name|ok
decl_stmt|,
name|cancel
decl_stmt|;
DECL|field|typePanel
name|JPanel
name|typePanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|fieldPanel
name|JPanel
name|fieldPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|width
name|int
name|width
init|=
literal|10
decl_stmt|;
DECL|field|messageLabel
name|JLabel
name|messageLabel
init|=
operator|new
name|JLabel
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|name
name|JTextField
name|name
init|=
operator|new
name|JTextField
argument_list|(
literal|""
argument_list|,
name|width
argument_list|)
decl_stmt|;
DECL|field|req_ta
name|JTextArea
name|req_ta
init|=
operator|new
name|JTextArea
argument_list|(
literal|""
argument_list|,
literal|17
argument_list|,
name|width
argument_list|)
decl_stmt|,
comment|//10 row, 20 columns
DECL|field|opt_ta
name|opt_ta
init|=
operator|new
name|JTextArea
argument_list|(
literal|""
argument_list|,
literal|17
argument_list|,
name|width
argument_list|)
decl_stmt|;
comment|//10 row, 20 columns
comment|// need to get FIeld name from somewhere
comment|//JComboBox types_cb = new JComboBox(Globals.typeNames);
DECL|field|gbl
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
DECL|field|buttonPanel
name|JPanel
name|buttonPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|method|EntryCustomizationDialog (JFrame parent)
specifier|public
name|EntryCustomizationDialog
parameter_list|(
name|JFrame
name|parent
parameter_list|)
block|{
comment|//Type=Article, Book etc
comment|// templateName will be used to put on the dialog frame
comment|// create 10 default entries
comment|// return an array
name|super
argument_list|(
name|parent
argument_list|,
literal|"Customize Form fields"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setSize
argument_list|(
literal|230
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
name|makeButtons
argument_list|()
expr_stmt|;
name|typePanel
operator|.
name|add
argument_list|(
operator|new
name|JLabel
argument_list|(
literal|"TYPE"
argument_list|,
name|JLabel
operator|.
name|RIGHT
argument_list|)
argument_list|)
expr_stmt|;
comment|//typePanel.add( types_cb);
name|fieldPanel
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fieldPanel
operator|.
name|add
argument_list|(
operator|new
name|JLabel
argument_list|(
literal|"FIELDS"
argument_list|,
name|JLabel
operator|.
name|RIGHT
argument_list|)
argument_list|)
expr_stmt|;
name|fieldPanel
operator|.
name|add
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|req_ta
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
argument_list|)
expr_stmt|;
name|fieldPanel
operator|.
name|add
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|opt_ta
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
argument_list|)
expr_stmt|;
name|fieldPanel
operator|.
name|add
argument_list|(
name|messageLabel
argument_list|)
expr_stmt|;
block|}
DECL|method|EntryCustomizationDialog (JFrame parent, BibtexEntryType type_)
specifier|public
name|EntryCustomizationDialog
parameter_list|(
name|JFrame
name|parent
parameter_list|,
name|BibtexEntryType
name|type_
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|type
operator|=
name|type_
expr_stmt|;
block|}
DECL|method|initialize ()
name|void
name|initialize
parameter_list|()
block|{
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setDefaultCloseOperation
argument_list|(
name|JDialog
operator|.
name|DO_NOTHING_ON_CLOSE
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|buttonPanel
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|typePanel
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|fieldPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|messageLabel
operator|.
name|setForeground
argument_list|(
name|Color
operator|.
name|black
argument_list|)
expr_stmt|;
name|messageLabel
operator|.
name|setText
argument_list|(
literal|"Field names delimiter is semicolon.\n Ex: author;title;journal;"
argument_list|)
expr_stmt|;
block|}
DECL|method|save ()
name|void
name|save
parameter_list|()
block|{
name|String
name|reqStr
init|=
name|req_ta
operator|.
name|getText
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\n+"
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|,
name|optStr
init|=
name|opt_ta
operator|.
name|getText
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\n+"
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|typeName
init|=
name|name
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|typeName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|Util
operator|.
name|pr
argument_list|(
literal|"Save entry definition."
argument_list|)
expr_stmt|;
name|CustomEntryType
name|typ
init|=
operator|new
name|CustomEntryType
argument_list|(
name|typeName
argument_list|,
name|reqStr
argument_list|,
name|optStr
argument_list|)
decl_stmt|;
name|BibtexEntryType
operator|.
name|ALL_TYPES
operator|.
name|put
argument_list|(
name|typeName
argument_list|,
name|typ
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Util
operator|.
name|pr
argument_list|(
literal|"No name."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeButtons ()
name|void
name|makeButtons
parameter_list|()
block|{
name|ok
operator|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Ok"
argument_list|)
argument_list|)
expr_stmt|;
name|cancel
operator|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonPanel
operator|.
name|add
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|buttonPanel
operator|.
name|add
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
name|ok
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|save
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

