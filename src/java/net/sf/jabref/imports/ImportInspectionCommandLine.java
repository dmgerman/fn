begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on 01.12.2007  *  * To change the template for this generated file go to  * Window>Preferences>Java>Code Generation>Code and Comments  */
end_comment

begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|OutputPrinter
import|;
end_import

begin_class
DECL|class|ImportInspectionCommandLine
specifier|public
class|class
name|ImportInspectionCommandLine
implements|implements
name|ImportInspector
block|{
DECL|field|entries
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
init|=
operator|new
name|LinkedList
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addEntry (BibtexEntry entry)
specifier|public
name|void
name|addEntry
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
DECL|method|setProgress (int current, int max)
specifier|public
name|void
name|setProgress
parameter_list|(
name|int
name|current
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|status
operator|.
name|setStatus
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Progress: %0 of %1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|current
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|max
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|status
name|OutputPrinter
name|status
init|=
operator|new
name|OutputPrinter
argument_list|()
block|{
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showMessage
parameter_list|(
name|Object
name|message
parameter_list|,
name|String
name|title
parameter_list|,
name|int
name|msgType
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|title
operator|+
literal|": "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|method|query (final String query, final EntryFetcher fetcher)
specifier|public
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|query
parameter_list|(
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|EntryFetcher
name|fetcher
parameter_list|)
block|{
name|FutureTask
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
operator|new
name|FutureTask
argument_list|<
name|Boolean
argument_list|>
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|fetcher
operator|.
name|processQuery
argument_list|(
name|query
argument_list|,
name|ImportInspectionCommandLine
operator|.
name|this
argument_list|,
name|status
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
name|future
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|future
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|entries
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{         }
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

