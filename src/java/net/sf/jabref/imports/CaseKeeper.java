begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|LayoutFormatter
import|;
end_import

begin_class
DECL|class|CaseKeeper
specifier|public
class|class
name|CaseKeeper
implements|implements
name|LayoutFormatter
block|{
DECL|field|wordList
specifier|private
name|String
index|[]
name|wordList
init|=
operator|new
name|String
index|[]
block|{
literal|"VLSI"
block|,
literal|"FPGA"
block|,
literal|"ASIC"
block|,
literal|"ADC"
block|,
literal|"DSP"
block|,
literal|"DAC"
block|,
literal|"RF"
block|,
literal|"FFT"
block|,
literal|"DFT"
block|,
literal|"FIR"
block|,
literal|"IIR"
block|,
literal|"RAM"
block|,
literal|"ROM"
block|,
literal|"CMOS"
block|,
literal|"D/A"
block|,
literal|"A/D"
block|,
literal|"I/Q"
block|}
decl_stmt|;
DECL|method|CaseKeeper ()
specifier|public
name|CaseKeeper
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|format (String text)
specifier|public
name|String
name|format
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wordList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|text
operator|=
name|text
operator|.
name|replaceAll
argument_list|(
literal|"([ -\\}])"
operator|+
name|wordList
index|[
name|i
index|]
operator|+
literal|"(^\\})"
argument_list|,
literal|"$1\\{"
operator|+
name|wordList
index|[
name|i
index|]
operator|+
literal|"\\}$2"
argument_list|)
expr_stmt|;
block|}
return|return
name|text
return|;
block|}
block|}
end_class

end_unit

