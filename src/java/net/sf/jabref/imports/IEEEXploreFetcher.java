begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|CookieHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|CookieManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButton
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntryType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|OutputPrinter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Util
import|;
end_import

begin_class
DECL|class|IEEEXploreFetcher
specifier|public
class|class
name|IEEEXploreFetcher
implements|implements
name|EntryFetcher
block|{
DECL|field|caseKeeperList
specifier|final
name|CaseKeeperList
name|caseKeeperList
init|=
operator|new
name|CaseKeeperList
argument_list|()
decl_stmt|;
DECL|field|caseKeeper
specifier|final
name|CaseKeeper
name|caseKeeper
init|=
operator|new
name|CaseKeeper
argument_list|()
decl_stmt|;
DECL|field|dialog
name|ImportInspector
name|dialog
init|=
literal|null
decl_stmt|;
DECL|field|status
name|OutputPrinter
name|status
decl_stmt|;
DECL|field|htmlConverter
specifier|final
name|HTMLConverter
name|htmlConverter
init|=
operator|new
name|HTMLConverter
argument_list|()
decl_stmt|;
DECL|field|absCheckBox
specifier|private
name|JCheckBox
name|absCheckBox
init|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Include abstracts"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|htmlButton
specifier|private
name|JRadioButton
name|htmlButton
init|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"HTML parser"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|bibButton
specifier|private
name|JRadioButton
name|bibButton
init|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"BibTeX importer"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|cm
specifier|private
name|CookieManager
name|cm
init|=
operator|new
name|CookieManager
argument_list|()
decl_stmt|;
DECL|field|MAX_FETCH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_FETCH
init|=
literal|100
decl_stmt|;
DECL|field|perPage
DECL|field|hits
DECL|field|unparseable
DECL|field|parsed
specifier|private
name|int
name|perPage
init|=
name|MAX_FETCH
decl_stmt|,
name|hits
init|=
literal|0
decl_stmt|,
name|unparseable
init|=
literal|0
decl_stmt|,
name|parsed
init|=
literal|0
decl_stmt|;
DECL|field|piv
specifier|private
name|int
name|piv
init|=
literal|0
decl_stmt|;
DECL|field|shouldContinue
specifier|private
name|boolean
name|shouldContinue
init|=
literal|false
decl_stmt|;
DECL|field|includeAbstract
specifier|private
name|boolean
name|includeAbstract
init|=
literal|false
decl_stmt|;
DECL|field|importBibtex
specifier|private
name|boolean
name|importBibtex
init|=
literal|false
decl_stmt|;
DECL|field|terms
specifier|private
name|String
name|terms
decl_stmt|;
DECL|field|startUrl
specifier|private
specifier|final
name|String
name|startUrl
init|=
literal|"http://ieeexplore.ieee.org/search/freesearchresult.jsp?queryText="
decl_stmt|;
DECL|field|endUrl
specifier|private
specifier|final
name|String
name|endUrl
init|=
literal|"&rowsPerPage="
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|perPage
argument_list|)
operator|+
literal|"&pageNumber="
decl_stmt|;
DECL|field|searchUrl
specifier|private
name|String
name|searchUrl
decl_stmt|;
DECL|field|importUrl
specifier|private
specifier|final
name|String
name|importUrl
init|=
literal|"http://ieeexplore.ieee.org/xpls/downloadCitations"
decl_stmt|;
DECL|field|hitsPattern
specifier|private
specifier|final
name|Pattern
name|hitsPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9,]+) Results"
argument_list|)
decl_stmt|;
DECL|field|idPattern
specifier|private
specifier|final
name|Pattern
name|idPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<input name=\'\' title=\'.*\' type=\'checkbox\'"
operator|+
literal|"value=\'\'\\s*id=\'([0-9]+)\'/>"
argument_list|)
decl_stmt|;
DECL|field|typePattern
specifier|private
specifier|final
name|Pattern
name|typePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<span class=\"type\">\\s*(.+)"
argument_list|)
decl_stmt|;
DECL|field|fieldPatterns
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fieldPatterns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|absPattern
specifier|private
specifier|final
name|Pattern
name|absPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<p>\\s*(.+)"
argument_list|)
decl_stmt|;
DECL|field|stdEntryPattern
name|Pattern
name|stdEntryPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*<strong>(.+)</strong><br>"
operator|+
literal|"\\s+(.+)"
argument_list|)
decl_stmt|;
DECL|field|publicationPattern
name|Pattern
name|publicationPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*), \\d*\\.*\\s?(.*)"
argument_list|)
decl_stmt|;
DECL|field|proceedingPattern
name|Pattern
name|proceedingPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*?)\\.?\\s?Proceedings\\s?(.*)"
argument_list|)
decl_stmt|;
DECL|field|abstractLinkPattern
name|Pattern
name|abstractLinkPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<a href=\'(.+)\'>\\s*<span class=\"more\">View full.*</span></a>"
argument_list|)
decl_stmt|;
DECL|field|abrvPattern
name|String
name|abrvPattern
init|=
literal|".*[^,] '?\\d+\\)?"
decl_stmt|;
DECL|field|ieeeArticleNumberPattern
name|Pattern
name|ieeeArticleNumberPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<a href=\".*arnumber=(\\d+).*\">"
argument_list|)
decl_stmt|;
comment|// Common words in IEEE Xplore that should always be
DECL|method|IEEEXploreFetcher ()
specifier|public
name|IEEEXploreFetcher
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|CookieHandler
operator|.
name|setDefault
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|fieldPatterns
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
literal|"<a\\s*href=[^<]+>\\s*(.+)\\s*</a>"
argument_list|)
expr_stmt|;
name|fieldPatterns
operator|.
name|put
argument_list|(
literal|"author"
argument_list|,
literal|"</h3>\\s*(.+)"
argument_list|)
expr_stmt|;
name|fieldPatterns
operator|.
name|put
argument_list|(
literal|"volume"
argument_list|,
literal|"Volume:\\s*([A-Za-z-]*\\d+)"
argument_list|)
expr_stmt|;
name|fieldPatterns
operator|.
name|put
argument_list|(
literal|"number"
argument_list|,
literal|"Issue:\\s*(\\d+)"
argument_list|)
expr_stmt|;
comment|//fieldPatterns.put("part", "Part (\\d+),&nbsp;(.+)");
name|fieldPatterns
operator|.
name|put
argument_list|(
literal|"year"
argument_list|,
literal|"(?:Copyright|Publication) Year:\\s*(\\d{4})"
argument_list|)
expr_stmt|;
name|fieldPatterns
operator|.
name|put
argument_list|(
literal|"pages"
argument_list|,
literal|"Page\\(s\\):\\s*(\\d+)\\s*-\\s*(\\d*)"
argument_list|)
expr_stmt|;
comment|//fieldPatterns.put("doi", "Digital Object Identifier:\\s*<a href=.*>(.+)</a>");
name|fieldPatterns
operator|.
name|put
argument_list|(
literal|"doi"
argument_list|,
literal|"<a href=\"http://dx.doi.org/(.+)\" target"
argument_list|)
expr_stmt|;
name|fieldPatterns
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
literal|"<a href=\"(/stamp/stamp[^\"]+)"
argument_list|)
expr_stmt|;
block|}
DECL|method|getOptionsPanel ()
specifier|public
name|JPanel
name|getOptionsPanel
parameter_list|()
block|{
name|JPanel
name|pan
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|pan
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|htmlButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|htmlButton
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bibButton
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ButtonGroup
name|group
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|htmlButton
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
name|bibButton
argument_list|)
expr_stmt|;
name|pan
operator|.
name|add
argument_list|(
name|absCheckBox
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|pan
operator|.
name|add
argument_list|(
name|htmlButton
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|pan
operator|.
name|add
argument_list|(
name|bibButton
argument_list|,
name|BorderLayout
operator|.
name|EAST
argument_list|)
expr_stmt|;
return|return
name|pan
return|;
block|}
DECL|method|processQuery (String query, ImportInspector dialog, OutputPrinter status)
specifier|public
name|boolean
name|processQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|ImportInspector
name|dialog
parameter_list|,
name|OutputPrinter
name|status
parameter_list|)
block|{
name|this
operator|.
name|dialog
operator|=
name|dialog
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|terms
operator|=
name|query
expr_stmt|;
name|piv
operator|=
literal|0
expr_stmt|;
name|shouldContinue
operator|=
literal|true
expr_stmt|;
name|parsed
operator|=
literal|0
expr_stmt|;
name|unparseable
operator|=
literal|0
expr_stmt|;
name|int
name|pageNumber
init|=
literal|1
decl_stmt|;
name|searchUrl
operator|=
name|makeUrl
argument_list|(
name|pageNumber
argument_list|)
expr_stmt|;
comment|//start at page 1
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|searchUrl
argument_list|)
decl_stmt|;
name|String
name|page
init|=
name|getResults
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|.
name|indexOf
argument_list|(
literal|"You have entered an invalid search"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"You have entered an invalid search '%0'."
argument_list|,
name|terms
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search IEEEXplore"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|page
operator|.
name|indexOf
argument_list|(
literal|"Bad request"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Bad Request '%0'."
argument_list|,
name|terms
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search IEEEXplore"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|page
operator|.
name|indexOf
argument_list|(
literal|"No results were found."
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No entries found for the search string '%0'"
argument_list|,
name|terms
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search IEEEXplore"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|page
operator|.
name|indexOf
argument_list|(
literal|"Error Page"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Intermittent errors on the IEEE Xplore server. Please try again in a while."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search IEEEXplore"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|hits
operator|=
name|getNumberOfHits
argument_list|(
name|page
argument_list|,
literal|"display-status"
argument_list|,
name|hitsPattern
argument_list|)
expr_stmt|;
name|includeAbstract
operator|=
name|absCheckBox
operator|.
name|isSelected
argument_list|()
expr_stmt|;
name|importBibtex
operator|=
name|bibButton
operator|.
name|isSelected
argument_list|()
expr_stmt|;
if|if
condition|(
name|hits
operator|>
name|MAX_FETCH
condition|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 entries found. To reduce server load, "
operator|+
literal|"only %1 will be downloaded."
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|hits
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|MAX_FETCH
argument_list|)
block|}
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search IEEEXplore"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
name|hits
operator|=
name|MAX_FETCH
expr_stmt|;
block|}
name|parse
argument_list|(
name|dialog
argument_list|,
name|page
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|firstEntry
init|=
name|perPage
decl_stmt|;
while|while
condition|(
name|shouldContinue
operator|&&
name|firstEntry
operator|<
name|hits
condition|)
block|{
name|pageNumber
operator|++
expr_stmt|;
name|searchUrl
operator|=
name|makeUrl
argument_list|(
name|pageNumber
argument_list|)
expr_stmt|;
name|page
operator|=
name|getResults
argument_list|(
operator|new
name|URL
argument_list|(
name|searchUrl
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldContinue
condition|)
break|break;
name|parse
argument_list|(
name|dialog
argument_list|,
name|page
argument_list|,
literal|0
argument_list|,
name|firstEntry
operator|+
literal|1
argument_list|)
expr_stmt|;
name|firstEntry
operator|+=
name|perPage
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectException
name|e
parameter_list|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Connection to IEEEXplore failed"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search IEEEXplore"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search IEEEXplore"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getTitle ()
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
literal|"IEEEXplore"
return|;
block|}
DECL|method|getIcon ()
specifier|public
name|URL
name|getIcon
parameter_list|()
block|{
return|return
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"www"
argument_list|)
return|;
block|}
DECL|method|getHelpPage ()
specifier|public
name|String
name|getHelpPage
parameter_list|()
block|{
return|return
literal|"IEEEXploreHelp.html"
return|;
block|}
DECL|method|getKeyName ()
specifier|public
name|String
name|getKeyName
parameter_list|()
block|{
return|return
literal|"IEEEXplore"
return|;
block|}
comment|/**      * This method is called by the dialog when the user has cancelled the import.      */
DECL|method|stopFetching ()
specifier|public
name|void
name|stopFetching
parameter_list|()
block|{
name|shouldContinue
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|makeUrl (int startIndex)
specifier|private
name|String
name|makeUrl
parameter_list|(
name|int
name|startIndex
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
name|startUrl
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|terms
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"+"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|endUrl
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|startIndex
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|parse (ImportInspector dialog, String text, int startIndex, int firstEntryNumber)
specifier|private
name|void
name|parse
parameter_list|(
name|ImportInspector
name|dialog
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|int
name|firstEntryNumber
parameter_list|)
block|{
name|piv
operator|=
name|startIndex
expr_stmt|;
name|int
name|entryNumber
init|=
name|firstEntryNumber
decl_stmt|;
if|if
condition|(
name|importBibtex
condition|)
block|{
comment|//TODO: Login
name|ArrayList
argument_list|<
name|String
argument_list|>
name|idSelected
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|id
decl_stmt|;
while|while
condition|(
operator|(
name|id
operator|=
name|parseNextEntryId
argument_list|(
name|text
argument_list|,
name|piv
argument_list|)
operator|)
operator|!=
literal|null
operator|&&
name|shouldContinue
condition|)
block|{
name|idSelected
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|entryNumber
operator|++
expr_stmt|;
block|}
try|try
block|{
name|BibtexDatabase
name|dbase
init|=
name|parseBibtexDatabase
argument_list|(
name|idSelected
argument_list|,
name|includeAbstract
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|items
init|=
name|dbase
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|BibtexEntry
argument_list|>
name|iter
init|=
name|items
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BibtexEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|dialog
operator|.
name|addEntry
argument_list|(
name|cleanup
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setProgress
argument_list|(
name|parsed
operator|+
name|unparseable
argument_list|,
name|hits
argument_list|)
expr_stmt|;
name|parsed
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|//for
block|}
else|else
block|{
name|BibtexEntry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
operator|(
name|entry
operator|=
name|parseNextEntry
argument_list|(
name|text
argument_list|,
name|piv
argument_list|)
operator|)
operator|!=
literal|null
operator|)
operator|&&
name|shouldContinue
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|dialog
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setProgress
argument_list|(
name|parsed
operator|+
name|unparseable
argument_list|,
name|hits
argument_list|)
expr_stmt|;
name|parsed
operator|++
expr_stmt|;
block|}
name|entryNumber
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseBibtexDatabase (List<String> id, boolean abs)
specifier|private
name|BibtexDatabase
name|parseBibtexDatabase
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|id
parameter_list|,
name|boolean
name|abs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|URL
name|url
decl_stmt|;
name|URLConnection
name|conn
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|importUrl
argument_list|)
expr_stmt|;
name|conn
operator|=
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|conn
operator|.
name|setDoInput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/x-www-form-urlencoded"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Referer"
argument_list|,
name|searchUrl
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|recordIds
init|=
literal|""
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|id
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|recordIds
operator|+=
name|iter
operator|.
name|next
argument_list|()
operator|+
literal|" "
expr_stmt|;
block|}
name|recordIds
operator|=
name|recordIds
operator|.
name|trim
argument_list|()
expr_stmt|;
name|String
name|citation
init|=
name|abs
condition|?
literal|"citation-abstract"
else|:
literal|"citation-only"
decl_stmt|;
name|String
name|content
init|=
literal|"recordIds="
operator|+
name|recordIds
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
operator|+
literal|"&fromPageName=&citations-format="
operator|+
name|citation
operator|+
literal|"&download-format=download-bibtex"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|BufferedReader
name|bufr
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|256
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|bytesRead
init|=
name|bufr
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|==
operator|-
literal|1
condition|)
break|break;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesRead
condition|;
name|i
operator|++
control|)
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ParserResult
name|results
init|=
operator|new
name|BibtexParser
argument_list|(
name|bufr
argument_list|)
operator|.
name|parse
argument_list|()
decl_stmt|;
name|bufr
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|results
operator|.
name|getDatabase
argument_list|()
return|;
block|}
DECL|method|cleanup (BibtexEntry entry)
specifier|private
name|BibtexEntry
name|cleanup
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// clean up title
name|String
name|title
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
if|if
condition|(
name|title
operator|!=
literal|null
condition|)
block|{
comment|// USe the alt-text and replace image links
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"[ ]?img src=[^ ]+ alt=\"([^\"]+)\">[ ]?"
argument_list|,
literal|"\\$$1\\$"
argument_list|)
expr_stmt|;
comment|// Try to sort out most of the /spl / conversions
comment|// Deal with this specific nested type first
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"/sub /spl infin//"
argument_list|,
literal|"\\$_\\\\infty\\$"
argument_list|)
expr_stmt|;
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"/sup /spl infin//"
argument_list|,
literal|"\\$\\^\\\\infty\\$"
argument_list|)
expr_stmt|;
comment|// Replace general expressions
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"/[sS]pl ([^/]+)/"
argument_list|,
literal|"\\$\\\\$1\\$"
argument_list|)
expr_stmt|;
comment|// Deal with subscripts and superscripts
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useConvertToEquation"
argument_list|)
condition|)
block|{
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"/sup ([^/]+)/"
argument_list|,
literal|"\\$\\^\\{$1\\}\\$"
argument_list|)
expr_stmt|;
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"/sub ([^/]+)/"
argument_list|,
literal|"\\$_\\{$1\\}\\$"
argument_list|)
expr_stmt|;
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"\\(sup\\)([^(]+)\\(/sup\\)"
argument_list|,
literal|"\\$\\^\\{$1\\}\\$"
argument_list|)
expr_stmt|;
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"\\(sub\\)([^(]+)\\(/sub\\)"
argument_list|,
literal|"\\_\\{$1\\}\\$"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"/sup ([^/]+)/"
argument_list|,
literal|"\\\\textsuperscript\\{$1\\}"
argument_list|)
expr_stmt|;
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"/sub ([^/]+)/"
argument_list|,
literal|"\\\\textsubscript\\{$1\\}"
argument_list|)
expr_stmt|;
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"\\(sup\\)([^(]+)\\(/sup\\)"
argument_list|,
literal|"\\\\textsuperscript\\{$1\\}"
argument_list|)
expr_stmt|;
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"\\(sub\\)([^(]+)\\(/sub\\)"
argument_list|,
literal|"\\\\textsubscript\\{$1\\}"
argument_list|)
expr_stmt|;
block|}
comment|// Replace \infin with \infty
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"\\\\infin"
argument_list|,
literal|"\\\\infty"
argument_list|)
expr_stmt|;
comment|// Automatic case keeping
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useCaseKeeperOnSearch"
argument_list|)
condition|)
block|{
name|title
operator|=
name|caseKeeper
operator|.
name|format
argument_list|(
name|title
argument_list|,
name|caseKeeperList
operator|.
name|wordListIEEEXplore
argument_list|)
expr_stmt|;
block|}
comment|// Write back
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
comment|// clean up author
name|String
name|author
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
if|if
condition|(
name|author
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|author
operator|.
name|indexOf
argument_list|(
literal|"a href="
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// Author parsing failed because it was empty
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Maybe not needed anymore due to another change
block|}
else|else
block|{
name|author
operator|=
name|author
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|". "
argument_list|)
expr_stmt|;
name|author
operator|=
name|author
operator|.
name|replaceAll
argument_list|(
literal|"([^;]+),([^;]+),([^;]+)"
argument_list|,
literal|"$1,$3,$2"
argument_list|)
expr_stmt|;
comment|// Change order in case of Jr. etc
name|author
operator|=
name|author
operator|.
name|replaceAll
argument_list|(
literal|"  "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|author
operator|=
name|author
operator|.
name|replaceAll
argument_list|(
literal|"\\. -"
argument_list|,
literal|".-"
argument_list|)
expr_stmt|;
name|author
operator|=
name|author
operator|.
name|replaceAll
argument_list|(
literal|"; "
argument_list|,
literal|" and "
argument_list|)
expr_stmt|;
name|author
operator|=
name|author
operator|.
name|replaceAll
argument_list|(
literal|" ,"
argument_list|,
literal|","
argument_list|)
expr_stmt|;
name|author
operator|=
name|author
operator|.
name|replaceAll
argument_list|(
literal|"  "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|author
operator|=
name|author
operator|.
name|replaceAll
argument_list|(
literal|"[ ,;]+$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
name|author
argument_list|)
expr_stmt|;
block|}
block|}
comment|// clean up month
name|String
name|month
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|month
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|month
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|month
operator|=
name|month
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|month
operator|=
name|month
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|Pattern
name|monthPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d*+)\\s*([a-z]*+)-*(\\d*+)\\s*([a-z]*+)"
argument_list|)
decl_stmt|;
name|Matcher
name|mm
init|=
name|monthPattern
operator|.
name|matcher
argument_list|(
name|month
argument_list|)
decl_stmt|;
name|String
name|date
init|=
name|month
decl_stmt|;
if|if
condition|(
name|mm
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|mm
operator|.
name|group
argument_list|(
literal|3
argument_list|)
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|mm
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|date
operator|=
literal|"#"
operator|+
name|mm
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|"#"
expr_stmt|;
if|if
condition|(
name|mm
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|date
operator|+=
literal|" "
operator|+
name|mm
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|","
expr_stmt|;
block|}
block|}
else|else
block|{
name|date
operator|=
name|mm
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|","
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mm
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|mm
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|date
operator|=
literal|"#"
operator|+
name|mm
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|"# "
operator|+
name|mm
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"--"
operator|+
name|mm
operator|.
name|group
argument_list|(
literal|3
argument_list|)
operator|+
literal|","
expr_stmt|;
block|}
else|else
name|date
operator|+=
literal|","
expr_stmt|;
block|}
else|else
block|{
name|date
operator|=
literal|"#"
operator|+
name|mm
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|"# "
operator|+
name|mm
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"--#"
operator|+
name|mm
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|"# "
operator|+
name|mm
operator|.
name|group
argument_list|(
literal|3
argument_list|)
operator|+
literal|","
expr_stmt|;
block|}
block|}
comment|//date = date.trim();
comment|//if (!date.isEmpty()) {
name|entry
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
name|date
argument_list|)
expr_stmt|;
comment|//}
block|}
comment|// clean up pages
name|String
name|field
init|=
literal|"pages"
decl_stmt|;
name|String
name|pages
init|=
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|pages
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|pageNumbers
init|=
name|pages
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pageNumbers
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|pageNumbers
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|pageNumbers
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
comment|// single page
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|pageNumbers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|pages
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|"--"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// clean up publication field
name|BibtexEntryType
name|type
init|=
name|entry
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|sourceField
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|==
literal|"Article"
condition|)
block|{
name|sourceField
operator|=
literal|"journal"
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"booktitle"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|==
literal|"Inproceedings"
condition|)
block|{
name|sourceField
operator|=
literal|"booktitle"
expr_stmt|;
block|}
name|String
name|fullName
init|=
name|entry
operator|.
name|getField
argument_list|(
name|sourceField
argument_list|)
decl_stmt|;
if|if
condition|(
name|fullName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|==
literal|"Article"
condition|)
block|{
name|int
name|ind
init|=
name|fullName
operator|.
name|indexOf
argument_list|(
literal|": Accepted for future publication"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind
operator|>
literal|0
condition|)
block|{
name|fullName
operator|=
name|fullName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"to be published"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"month"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"pages"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|parts
init|=
name|fullName
operator|.
name|split
argument_list|(
literal|"[\\[\\]]"
argument_list|)
decl_stmt|;
comment|//[see also...], [legacy...]
name|fullName
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|fullName
operator|+=
name|parts
index|[
literal|2
index|]
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getField
argument_list|(
literal|"note"
argument_list|)
operator|==
literal|"Early Access"
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"to be published"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"month"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"pages"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fullName
operator|=
name|fullName
operator|.
name|replace
argument_list|(
literal|"Conference Proceedings"
argument_list|,
literal|"Proceedings"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Proceedings of"
argument_list|,
literal|"Proceedings"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Proceedings."
argument_list|,
literal|"Proceedings"
argument_list|)
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|replaceAll
argument_list|(
literal|"International"
argument_list|,
literal|"Int."
argument_list|)
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|replaceAll
argument_list|(
literal|"Symposium"
argument_list|,
literal|"Symp."
argument_list|)
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|replaceAll
argument_list|(
literal|"Conference"
argument_list|,
literal|"Conf."
argument_list|)
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|replaceAll
argument_list|(
literal|" on"
argument_list|,
literal|" "
argument_list|)
operator|.
name|replace
argument_list|(
literal|"  "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
name|Matcher
name|m1
init|=
name|publicationPattern
operator|.
name|matcher
argument_list|(
name|fullName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m1
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|prefix
init|=
name|m1
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|postfix
init|=
name|m1
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|abrv
init|=
literal|""
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|prefix
operator|.
name|split
argument_list|(
literal|"\\. "
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|matches
argument_list|(
name|abrvPattern
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
name|abrv
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|abrv
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prefix
operator|.
name|matches
argument_list|(
name|abrvPattern
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fullName
operator|=
name|prefix
operator|+
literal|" "
operator|+
name|postfix
operator|+
literal|" "
operator|+
name|abrv
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fullName
operator|=
name|postfix
operator|+
literal|" "
operator|+
name|prefix
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|==
literal|"Article"
condition|)
block|{
name|fullName
operator|=
name|fullName
operator|.
name|replace
argument_list|(
literal|" - "
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
comment|//IEE Proceedings-
name|fullName
operator|=
name|fullName
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useIEEEAbrv"
argument_list|)
condition|)
block|{
name|String
name|id
init|=
name|Globals
operator|.
name|journalAbbrev
operator|.
name|getAbbreviatedName
argument_list|(
name|fullName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|fullName
operator|=
name|id
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|==
literal|"Inproceedings"
condition|)
block|{
name|Matcher
name|m2
init|=
name|proceedingPattern
operator|.
name|matcher
argument_list|(
name|fullName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m2
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|prefix
init|=
name|m2
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|postfix
init|=
name|m2
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\.$"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|matches
argument_list|(
name|abrvPattern
argument_list|)
operator|==
literal|false
condition|)
block|{
name|String
name|abrv
init|=
literal|""
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|postfix
operator|.
name|split
argument_list|(
literal|"\\. "
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|matches
argument_list|(
name|abrvPattern
argument_list|)
condition|)
block|{
name|postfix
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
name|abrv
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|postfix
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|abrv
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
name|fullName
operator|=
name|prefix
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|postfix
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|abrv
expr_stmt|;
block|}
else|else
block|{
name|fullName
operator|=
name|postfix
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|prefix
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
name|fullName
operator|=
name|fullName
operator|.
name|trim
argument_list|()
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|replaceAll
argument_list|(
literal|"^[tT]he "
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"^\\d{4} "
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"[,.]$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|year
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|replaceAll
argument_list|(
literal|", "
operator|+
name|year
operator|+
literal|"\\.?"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|fullName
operator|.
name|contains
argument_list|(
literal|"Abstract"
argument_list|)
operator|==
literal|false
operator|&&
name|fullName
operator|.
name|contains
argument_list|(
literal|"Summaries"
argument_list|)
operator|==
literal|false
operator|&&
name|fullName
operator|.
name|contains
argument_list|(
literal|"Conference Record"
argument_list|)
operator|==
literal|false
condition|)
name|fullName
operator|=
literal|"Proc. "
operator|+
name|fullName
expr_stmt|;
block|}
name|entry
operator|.
name|setField
argument_list|(
name|sourceField
argument_list|,
name|fullName
argument_list|)
expr_stmt|;
block|}
comment|// clean up abstract
name|String
name|abstr
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getField
argument_list|(
literal|"abstract"
argument_list|)
decl_stmt|;
if|if
condition|(
name|abstr
operator|!=
literal|null
condition|)
block|{
comment|// Try to sort out most of the /spl / conversions
comment|// Deal with this specific nested type first
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"/sub /spl infin//"
argument_list|,
literal|"\\$_\\\\infty\\$"
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"/sup /spl infin//"
argument_list|,
literal|"\\$\\^\\\\infty\\$"
argument_list|)
expr_stmt|;
comment|// Replace general expressions
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"/[sS]pl ([^/]+)/"
argument_list|,
literal|"\\$\\\\$1\\$"
argument_list|)
expr_stmt|;
comment|// Deal with subscripts and superscripts
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useConvertToEquation"
argument_list|)
condition|)
block|{
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"/sup ([^/]+)/"
argument_list|,
literal|"\\$\\^\\{$1\\}\\$"
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"/sub ([^/]+)/"
argument_list|,
literal|"\\$_\\{$1\\}\\$"
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"\\(sup\\)([^(]+)\\(/sup\\)"
argument_list|,
literal|"\\$\\^\\{$1\\}\\$"
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"\\(sub\\)([^(]+)\\(/sub\\)"
argument_list|,
literal|"\\_\\{$1\\}\\$"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"/sup ([^/]+)/"
argument_list|,
literal|"\\\\textsuperscript\\{$1\\}"
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"/sub ([^/]+)/"
argument_list|,
literal|"\\\\textsubscript\\{$1\\}"
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"\\(sup\\)([^(]+)\\(/sup\\)"
argument_list|,
literal|"\\\\textsuperscript\\{$1\\}"
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"\\(sub\\)([^(]+)\\(/sub\\)"
argument_list|,
literal|"\\\\textsubscript\\{$1\\}"
argument_list|)
expr_stmt|;
block|}
comment|// Replace \infin with \infty
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"\\\\infin"
argument_list|,
literal|"\\\\infty"
argument_list|)
expr_stmt|;
comment|// Write back
name|entry
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
name|abstr
argument_list|)
expr_stmt|;
block|}
comment|// Clean up url
name|String
name|url
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getField
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"url"
argument_list|,
literal|"http://ieeexplore.ieee.org"
operator|+
name|url
operator|.
name|replace
argument_list|(
literal|"tp=&"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
DECL|method|parseNextEntryId (String allText, int startIndex)
specifier|private
name|String
name|parseNextEntryId
parameter_list|(
name|String
name|allText
parameter_list|,
name|int
name|startIndex
parameter_list|)
block|{
name|int
name|index
init|=
name|allText
operator|.
name|indexOf
argument_list|(
literal|"<div class=\"select"
argument_list|,
name|startIndex
argument_list|)
decl_stmt|;
name|int
name|endIndex
init|=
name|allText
operator|.
name|indexOf
argument_list|(
literal|"</div>"
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|endIndex
operator|>
literal|0
condition|)
block|{
name|String
name|text
init|=
name|allText
operator|.
name|substring
argument_list|(
name|index
argument_list|,
name|endIndex
argument_list|)
decl_stmt|;
name|endIndex
operator|+=
literal|6
expr_stmt|;
name|piv
operator|=
name|endIndex
expr_stmt|;
comment|//parse id
name|Matcher
name|idMatcher
init|=
name|idPattern
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|//add id into a vector
if|if
condition|(
name|idMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|idMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|parseNextEntry (String allText, int startIndex)
specifier|private
name|BibtexEntry
name|parseNextEntry
parameter_list|(
name|String
name|allText
parameter_list|,
name|int
name|startIndex
parameter_list|)
block|{
name|BibtexEntry
name|entry
init|=
literal|null
decl_stmt|;
name|int
name|index
init|=
name|allText
operator|.
name|indexOf
argument_list|(
literal|"<div class=\"detail"
argument_list|,
name|piv
argument_list|)
decl_stmt|;
name|int
name|endIndex
init|=
name|allText
operator|.
name|indexOf
argument_list|(
literal|"</div>"
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|endIndex
operator|>
literal|0
condition|)
block|{
name|endIndex
operator|+=
literal|6
expr_stmt|;
name|piv
operator|=
name|endIndex
expr_stmt|;
name|String
name|text
init|=
name|allText
operator|.
name|substring
argument_list|(
name|index
argument_list|,
name|endIndex
argument_list|)
decl_stmt|;
name|BibtexEntryType
name|type
init|=
literal|null
decl_stmt|;
name|String
name|sourceField
init|=
literal|null
decl_stmt|;
name|String
name|typeName
init|=
literal|""
decl_stmt|;
name|Matcher
name|typeMatcher
init|=
name|typePattern
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|typeName
operator|=
name|typeMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IEEE Journals&amp; Magazines"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IEEE Early Access Articles"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IET Journals&amp; Magazines"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"AIP Journals&amp; Magazines"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"AVS Journals&amp; Magazines"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IBM Journals&amp; Magazines"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TUP Journals&amp; Magazines"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"BIAI Journals&amp; Magazines"
argument_list|)
condition|)
block|{
name|type
operator|=
name|BibtexEntryType
operator|.
name|getType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
name|sourceField
operator|=
literal|"journal"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IEEE Conference Publications"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IET Conference Publications"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"VDE Conference Publications"
argument_list|)
condition|)
block|{
name|type
operator|=
name|BibtexEntryType
operator|.
name|getType
argument_list|(
literal|"inproceedings"
argument_list|)
expr_stmt|;
name|sourceField
operator|=
literal|"booktitle"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IEEE Standards"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Standards"
argument_list|)
condition|)
block|{
name|type
operator|=
name|BibtexEntryType
operator|.
name|getType
argument_list|(
literal|"standard"
argument_list|)
expr_stmt|;
name|sourceField
operator|=
literal|"number"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IEEE eLearning Library Courses"
argument_list|)
condition|)
block|{
name|type
operator|=
name|BibtexEntryType
operator|.
name|getType
argument_list|(
literal|"Electronic"
argument_list|)
expr_stmt|;
name|sourceField
operator|=
literal|"note"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Wiley-IEEE Press eBook Chapters"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"MIT Press eBook Chapters"
argument_list|)
operator|||
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IEEE USA Books&amp; eBooks"
argument_list|)
condition|)
block|{
name|type
operator|=
name|BibtexEntryType
operator|.
name|getType
argument_list|(
literal|"inCollection"
argument_list|)
expr_stmt|;
name|sourceField
operator|=
literal|"booktitle"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|BibtexEntryType
operator|.
name|getType
argument_list|(
literal|"misc"
argument_list|)
expr_stmt|;
name|sourceField
operator|=
literal|"note"
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Type detection failed. Use MISC instead."
argument_list|)
expr_stmt|;
name|unparseable
operator|++
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|entry
operator|=
operator|new
name|BibtexEntry
argument_list|(
name|Util
operator|.
name|createNeutralId
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IEEE Standards"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"organization"
argument_list|,
literal|"IEEE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Wiley-IEEE Press eBook Chapters"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"publisher"
argument_list|,
literal|"Wiley-IEEE Press"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"MIT Press eBook Chapters"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"publisher"
argument_list|,
literal|"MIT Press"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IEEE USA Books&amp; eBooks"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"publisher"
argument_list|,
literal|"IEEE USA"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|typeName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IEEE Early Access Articles"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"note"
argument_list|,
literal|"Early Access"
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|fieldPatterns
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|Matcher
name|fieldMatcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|fieldPatterns
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|htmlConverter
operator|.
name|format
argument_list|(
name|fieldMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"title"
argument_list|)
operator|&&
name|fieldMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|sec_title
init|=
name|htmlConverter
operator|.
name|format
argument_list|(
name|fieldMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|BibtexEntryType
operator|.
name|getStandardType
argument_list|(
literal|"standard"
argument_list|)
condition|)
block|{
name|sec_title
operator|=
name|sec_title
operator|.
name|replaceAll
argument_list|(
literal|"IEEE Std "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setField
argument_list|(
name|sourceField
argument_list|,
name|sec_title
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"pages"
argument_list|)
operator|&&
name|fieldMatcher
operator|.
name|groupCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|fieldMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"-"
operator|+
name|fieldMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|==
literal|null
operator|||
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"a href"
argument_list|)
operator|||
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Topic(s)"
argument_list|)
condition|)
block|{
comment|// Fix for some documents without authors
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|BibtexEntryType
operator|.
name|getStandardType
argument_list|(
literal|"inproceedings"
argument_list|)
operator|&&
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryType
operator|.
name|getStandardType
argument_list|(
literal|"proceedings"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeAbstract
condition|)
block|{
name|index
operator|=
name|text
operator|.
name|indexOf
argument_list|(
literal|"id=\"abstract"
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|endIndex
operator|=
name|text
operator|.
name|indexOf
argument_list|(
literal|"</div>"
argument_list|,
name|index
argument_list|)
operator|+
literal|6
expr_stmt|;
name|text
operator|=
name|text
operator|.
name|substring
argument_list|(
name|index
argument_list|,
name|endIndex
argument_list|)
expr_stmt|;
name|Matcher
name|absMatcher
init|=
name|absPattern
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|absMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
comment|// Clean-up abstract
name|String
name|abstr
init|=
name|absMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"<span class='snippet'>([\\w]+)</span>"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
name|htmlConverter
operator|.
name|format
argument_list|(
name|abstr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|cleanup
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
comment|/**      * Find out how many hits were found.      * @param page      */
DECL|method|getNumberOfHits (String page, String marker, Pattern pattern)
specifier|private
name|int
name|getNumberOfHits
parameter_list|(
name|String
name|page
parameter_list|,
name|String
name|marker
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ind
init|=
name|page
operator|.
name|indexOf
argument_list|(
name|marker
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|page
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not parse number of hits"
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|substring
init|=
name|page
operator|.
name|substring
argument_list|(
name|ind
argument_list|,
name|page
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|substring
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
else|else
throw|throw
operator|new
name|IOException
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not parse number of hits"
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * Download the URL and return contents as a String.      * @param source      * @return      * @throws IOException      */
DECL|method|getResults (URL source)
specifier|public
name|String
name|getResults
parameter_list|(
name|URL
name|source
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|source
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|==
operator|-
literal|1
condition|)
break|break;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesRead
condition|;
name|i
operator|++
control|)
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Read results from a file instead of an URL. Just for faster debugging.      * @param f      * @return      * @throws IOException      */
DECL|method|getResultsFromFile (File f)
specifier|public
name|String
name|getResultsFromFile
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|==
operator|-
literal|1
condition|)
break|break;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesRead
condition|;
name|i
operator|++
control|)
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

