begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_comment
comment|/**  * Container class for lists with keywords where the case should be kept independent of bibstyle  *   */
end_comment

begin_class
DECL|class|CaseKeeperList
specifier|public
class|class
name|CaseKeeperList
block|{
comment|// Common words in IEEE Xplore that should always be in the given case
DECL|field|wordListIEEEXplore
specifier|public
name|String
index|[]
name|wordListIEEEXplore
init|=
operator|new
name|String
index|[]
block|{
literal|"VLSI"
block|,
literal|"FPGA"
block|,
literal|"ASIC"
block|,
literal|"ADC"
block|,
literal|"DSP"
block|,
literal|"DAC"
block|,
literal|"RF"
block|,
literal|"FFT"
block|,
literal|"DFT"
block|,
literal|"FIR"
block|,
literal|"IIR"
block|,
literal|"RAM"
block|,
literal|"ROM"
block|,
literal|"CMOS"
block|,
literal|"D/A"
block|,
literal|"A/D"
block|,
literal|"I/Q"
block|,
literal|"Fourier"
block|,
literal|"Winograd"
block|,
literal|"IDCT"
block|,
literal|"DCT"
block|,
literal|"IEEE"
block|,
literal|"SFDR"
block|,
literal|"GSM"
block|,
literal|"WCDMA"
block|,
literal|"CDMA"
block|,
literal|"LTE"
block|,
literal|"EDGE"
block|,
literal|"SNR"
block|,
literal|"MIMO"
block|,
literal|"kHz"
block|,
literal|"MHz"
block|,
literal|"GHz"
block|,
literal|"Nyquist"
block|,
literal|"ADSL"
block|,
literal|"HDTV"
block|,
literal|"VDSL"
block|,
literal|"xDSL"
block|,
literal|"CORDIC"
block|,
literal|"H.264"
block|,
literal|"DWT"
block|,
literal|"Hadamard"
block|,
literal|"MPEG"
block|,
literal|"JPEG"
block|,
literal|"DST"
block|,
literal|"AVC"
block|,
literal|"VHDL"
block|,
literal|"Farrow"
block|,
literal|"Shannon"
block|,
literal|"IC"
block|,
literal|"SQNR"
block|,
literal|"SNDR"
block|,
literal|"ENOB"
block|,
literal|"MS"
block|,
literal|"GS"
block|,
literal|"kS"
block|,
literal|"QPSK"
block|,
literal|"QAM"
block|,
literal|"BPSK"
block|,
literal|"FM"
block|,
literal|"AM"
block|,
literal|"OSR"
block|,
literal|"SAR"
block|,
literal|"Vdd"
block|,
literal|"VDD"
block|,
literal|"VGA"
block|,
literal|"DVI"
block|,
literal|"HDMI"
block|,
literal|"CPU"
block|,
literal|"MCU"
block|,
literal|"IBM"
block|,
literal|"Altera"
block|,
literal|"Xilinx"
block|,
literal|"SoC"
block|,
literal|"RISC"
block|,
literal|"IQ"
block|,
literal|"GPGPU"
block|,
literal|"RNS"
block|,
literal|"OFDM"
block|,
literal|"LDPC"
block|,
literal|"MISO"
block|,
literal|"BER"
block|,
literal|"FER"
block|,
literal|"SAW"
block|,
literal|"GPRS"
block|,
literal|"PAPR"
block|,
literal|"mW"
block|,
literal|"WLAN"
block|,
literal|"WiMAX"
block|,
literal|"Viterbi"
block|,
literal|"SISO"
block|,
literal|"MMSE"
block|,
literal|"SIMO"
block|,
literal|"MAP"
block|,
literal|"HARQ"
block|,
literal|"ARQ"
block|,
literal|"RLS"
block|,
literal|"Verilog"
block|,
literal|"Verilog-A"
block|,
literal|"Verilog-AMS"
block|,
literal|"MOSFET"
block|,
literal|"FET"
block|,
literal|"MOS"
block|,
literal|"LCD"
block|,
literal|"BJT"
block|,
literal|"ANSI"
block|,
literal|"MASH"
block|,
literal|"QoS"
block|,
literal|"PowerPC"
block|,
literal|"LAN"
block|,
literal|"ATM"
block|,
literal|"MAC"
block|,
literal|"WWW"
block|,
literal|"API"
block|,
literal|"UMTS"
block|,
literal|"TDMA"
block|,
literal|"DMT"
block|,
literal|"ISI"
block|,
literal|"GaAs"
block|,
literal|"SiGe"
block|,
literal|"AlGaAs"
block|,
literal|"CBR"
block|,
literal|"VBR"
block|,
literal|"CSIT"
block|,
literal|"CSI"
block|,
literal|"IFFT"
block|,
literal|"IDFT"
block|,
literal|"Remez"
block|,
literal|"WDF"
block|,
literal|"Hilbert"
block|,
literal|"Kalman"
block|,
literal|"3-D"
block|,
literal|"2-D"
block|,
literal|"1-D"
block|,
literal|"MEMS"
block|,
literal|"Monte"
block|,
literal|"Carlo"
block|,
literal|"DVFS"
block|}
decl_stmt|;
comment|// List of all keyword lists
DECL|field|allLists
specifier|private
name|String
index|[]
index|[]
name|allLists
init|=
operator|new
name|String
index|[]
index|[]
block|{
name|wordListIEEEXplore
block|}
decl_stmt|;
DECL|method|CaseKeeperList ()
specifier|public
name|CaseKeeperList
parameter_list|()
block|{        }
empty_stmt|;
comment|/* Return all lists concatenated     * Can be done faster once deciding on Java 6.0     * see: http://stackoverflow.com/questions/80476/how-to-concatenate-two-arrays-in-java     */
DECL|method|getAll ()
specifier|public
name|String
index|[]
name|getAll
parameter_list|()
block|{
name|int
name|lengh
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
index|[]
name|array
range|:
name|allLists
control|)
block|{
name|lengh
operator|+=
name|array
operator|.
name|length
expr_stmt|;
block|}
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|lengh
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
index|[]
name|array
range|:
name|allLists
control|)
block|{
for|for
control|(
name|String
name|element
range|:
name|array
control|)
block|{
name|result
index|[
name|pos
index|]
operator|=
name|element
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

