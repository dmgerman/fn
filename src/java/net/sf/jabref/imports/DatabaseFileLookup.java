begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|FileListEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|FileListTableModel
import|;
end_import

begin_comment
comment|/**  * Search class for files.<br>  *<br>  * This class provides some functionality to search in a {@link BibtexDatabase} for  * files.<br>  *<br>  *   *   * @author Nosh&Dan  * @version 09.11.2008 | 21:21:41  *   */
end_comment

begin_class
DECL|class|DatabaseFileLookup
specifier|public
class|class
name|DatabaseFileLookup
block|{
DECL|field|KEY_FILE_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|KEY_FILE_FIELD
init|=
literal|"file"
decl_stmt|;
DECL|field|database
specifier|private
specifier|final
name|BibtexDatabase
name|database
decl_stmt|;
comment|/** 	 * Creates an instance by passing a {@link BibtexDatabase} which will be 	 * used for the searches. 	 *  	 * @param aDatabase 	 *            A {@link BibtexDatabase}. 	 */
DECL|method|DatabaseFileLookup (BibtexDatabase aDatabase)
specifier|public
name|DatabaseFileLookup
parameter_list|(
name|BibtexDatabase
name|aDatabase
parameter_list|)
block|{
if|if
condition|(
name|aDatabase
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Passing a 'null' BibtexDatabase."
argument_list|)
throw|;
name|this
operator|.
name|database
operator|=
name|aDatabase
expr_stmt|;
block|}
comment|/** 	 * Returns whether the File<code>aFile</code> is present in the database 	 * as an attached File to an {@link BibtexEntry}.<br> 	 *<br> 	 * To do this, the field specified by the key<b>file</b> will be searched 	 * for the provided file for every {@link BibtexEntry} in the database.<br> 	 *<br> 	 * For the matching, the absolute file paths will be used. 	 *  	 * @param file 	 *            A {@link File} Object. 	 * @return<code>true</code>, if the file Object is stored in at least one 	 *         entry in the database, otherwise<code>false</code>. 	 */
DECL|method|lookupDatabase (File aFile)
specifier|public
name|boolean
name|lookupDatabase
parameter_list|(
name|File
name|aFile
parameter_list|)
block|{
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
init|=
name|database
operator|.
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|lookupEntry
argument_list|(
name|aFile
argument_list|,
name|entry
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Searches the specified {@link BibtexEntry}<code>anEntry</code> for the 	 * appearance of the specified {@link File}<code>aFile</code>.<br> 	 *<br> 	 * Therefore the<i>file</i>-field of the bibtex-entry will be searched for 	 * the absolute filepath of the searched file.<br> 	 *<br> 	 *  	 * @param aFile 	 *            A file that is searched in an bibtex-entry. 	 * @param anEntry 	 *            A bibtex-entry, in which the file is searched. 	 * @return<code>true</code>, if the bibtex entry stores the file in its 	 *<i>file</i>-field, otherwise<code>false</code>. 	 */
DECL|method|lookupEntry (File aFile, BibtexEntry anEntry)
specifier|public
name|boolean
name|lookupEntry
parameter_list|(
name|File
name|aFile
parameter_list|,
name|BibtexEntry
name|anEntry
parameter_list|)
block|{
if|if
condition|(
name|aFile
operator|==
literal|null
operator|||
name|anEntry
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|FileListTableModel
name|model
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|String
name|fileField
init|=
name|anEntry
operator|.
name|getField
argument_list|(
name|KEY_FILE_FIELD
argument_list|)
decl_stmt|;
name|model
operator|.
name|setContent
argument_list|(
name|fileField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileListEntry
name|flEntry
init|=
name|model
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|link
init|=
name|flEntry
operator|.
name|getLink
argument_list|()
decl_stmt|;
if|if
condition|(
name|link
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
operator|new
name|File
argument_list|(
name|link
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|equals
argument_list|(
name|aFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

