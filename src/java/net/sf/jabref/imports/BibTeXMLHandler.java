begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_comment
comment|/*   Copyright (C) 2000-2004 E.L. Willighagen<egonw@sci.kun.nl>    This program is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or (at   your option) any later version.    This program is distributed in the hope that it will be useful, but   WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU   General Public License for more details.    You should have received a copy of the GNU General Public License   along with this program; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307   USA  */
end_comment

begin_comment
comment|/**  * Reader for the BibTeXML format. See  *<a href="http://bibtexml.sourceforge.net/">bibtexml.sf.net</a>.  *  * @author Egon Willighagen  */
end_comment

begin_class
DECL|class|BibTeXMLHandler
specifier|public
class|class
name|BibTeXMLHandler
extends|extends
name|DefaultHandler
block|{
DECL|field|bibitems
specifier|private
name|ArrayList
name|bibitems
decl_stmt|;
DECL|field|b
specifier|private
name|BibtexEntry
name|b
decl_stmt|;
comment|// the entry being read
comment|// XML parsing stuff
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|// the current element name
DECL|field|currentChars
specifier|private
name|String
name|currentChars
decl_stmt|;
DECL|method|BibTeXMLHandler ()
specifier|public
name|BibTeXMLHandler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|getItems ()
specifier|public
name|ArrayList
name|getItems
parameter_list|()
block|{
return|return
name|bibitems
return|;
block|}
comment|// SAX parsing methods
DECL|method|doctypeDecl (String name, String publicId, String systemId)
specifier|public
name|void
name|doctypeDecl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
block|{}
DECL|method|startDocument ()
specifier|public
name|void
name|startDocument
parameter_list|()
block|{
name|bibitems
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
DECL|method|endDocument ()
specifier|public
name|void
name|endDocument
parameter_list|()
block|{     }
DECL|method|characters (char ch[], int start, int length)
specifier|public
name|void
name|characters
parameter_list|(
name|char
name|ch
index|[]
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|currentChars
operator|+=
name|s
expr_stmt|;
block|}
DECL|method|startElement (String uri, String local, String raw, Attributes atts)
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|local
parameter_list|,
name|String
name|raw
parameter_list|,
name|Attributes
name|atts
parameter_list|)
block|{
name|String
name|name
init|=
name|raw
decl_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:entry"
argument_list|)
condition|)
block|{
name|String
name|articleID
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"bibtex:id"
argument_list|)
operator|||
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
name|articleID
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|=
operator|new
name|BibtexEntry
argument_list|(
name|Util
operator|.
name|createNeutralId
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|KEY_FIELD
argument_list|,
name|articleID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:article"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:inbook"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:book"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:booklet"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:incollection"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:inproceedings"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:proceedings"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:manual"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:mastersthesis"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:phdthesis"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:techreport"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:unpublished"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:misc"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:other"
argument_list|)
condition|)
block|{
name|BibtexEntryType
name|tp
init|=
name|BibtexEntryType
operator|.
name|getType
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|b
operator|.
name|setType
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
name|currentChars
operator|=
literal|""
expr_stmt|;
block|}
DECL|method|endElement (String uri, String local, String raw)
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|local
parameter_list|,
name|String
name|raw
parameter_list|)
block|{
name|String
name|name
init|=
name|raw
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"bibtex:entry"
argument_list|)
condition|)
block|{
name|bibitems
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"bibtex:"
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
name|local
argument_list|,
name|currentChars
argument_list|)
expr_stmt|;
comment|// Util.pr(local+ " "+currentChars);
block|}
name|currentChars
operator|=
literal|""
expr_stmt|;
block|}
block|}
end_class

end_unit

