begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on Jun 29, 2004  *  * To change the template for this generated file go to  * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments  */
end_comment

begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyChangeEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyChangeListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|AttributeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|HandlerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * @author mspiegel  *   * To change the template for this generated type comment go to  * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments  */
end_comment

begin_class
DECL|class|CiteSeerUndoHandler
specifier|public
class|class
name|CiteSeerUndoHandler
extends|extends
name|HandlerBase
block|{
DECL|field|citeseerNamedCompound
name|NamedCompound
name|citeseerNamedCompound
init|=
literal|null
decl_stmt|;
DECL|field|bibEntry
name|BibtexEntry
name|bibEntry
init|=
literal|null
decl_stmt|;
DECL|field|nextField
name|String
name|nextField
init|=
literal|null
decl_stmt|;
DECL|field|nextAssign
name|boolean
name|nextAssign
init|=
literal|false
decl_stmt|;
DECL|field|panel
name|BasePanel
name|panel
init|=
literal|null
decl_stmt|;
DECL|field|overwriteAll
name|boolean
name|overwriteAll
init|=
literal|false
decl_stmt|;
DECL|field|overwriteNone
name|boolean
name|overwriteNone
init|=
literal|false
decl_stmt|;
DECL|field|recordFound
name|BooleanAssign
name|recordFound
decl_stmt|;
DECL|field|newAuthors
name|String
name|newAuthors
init|=
literal|null
decl_stmt|;
DECL|field|citeseerCitationCount
name|int
name|citeseerCitationCount
init|=
literal|0
decl_stmt|;
comment|/*      * Woe unto those who call this function from anywhere but      * makeOverwriteChoice(). You will seriously f*&k things up.      */
DECL|method|overwriteDialog (String oldValue, String newValue, String fieldName)
specifier|private
name|boolean
name|overwriteDialog
parameter_list|(
name|String
name|oldValue
parameter_list|,
name|String
name|newValue
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|boolean
name|retval
init|=
literal|false
decl_stmt|;
name|Object
index|[]
name|possibilities
init|=
block|{
literal|"Yes"
block|,
literal|"Yes to All"
block|,
literal|"No"
block|,
literal|"No to All"
block|}
decl_stmt|;
specifier|final
name|JOptionPane
name|optionPane
init|=
operator|new
name|JOptionPane
argument_list|(
literal|"Do you want to overwrite the value '"
operator|+
name|oldValue
operator|+
literal|"' \nwith the value '"
operator|+
name|newValue
operator|+
literal|"' \nfor the "
operator|+
name|fieldName
operator|+
literal|" field?"
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|,
name|JOptionPane
operator|.
name|DEFAULT_OPTION
argument_list|,
literal|null
argument_list|,
name|possibilities
argument_list|,
literal|"No"
argument_list|)
decl_stmt|;
specifier|final
name|JDialog
name|dialog
init|=
operator|new
name|JDialog
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
literal|"Overwrite Value"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setContentPane
argument_list|(
name|optionPane
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setDefaultCloseOperation
argument_list|(
name|JDialog
operator|.
name|DO_NOTHING_ON_CLOSE
argument_list|)
expr_stmt|;
name|optionPane
operator|.
name|addPropertyChangeListener
argument_list|(
operator|new
name|PropertyChangeListener
argument_list|()
block|{
specifier|public
name|void
name|propertyChange
parameter_list|(
name|PropertyChangeEvent
name|e
parameter_list|)
block|{
name|String
name|prop
init|=
name|e
operator|.
name|getPropertyName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dialog
operator|.
name|isVisible
argument_list|()
operator|&&
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|optionPane
operator|)
operator|&&
operator|(
name|prop
operator|.
name|equals
argument_list|(
name|JOptionPane
operator|.
name|VALUE_PROPERTY
argument_list|)
operator|)
condition|)
block|{
comment|//If you were going to check something
comment|//before closing the window, you'd do
comment|//it here.
name|dialog
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|pack
argument_list|()
expr_stmt|;
name|dialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|userChoice
init|=
operator|(
name|String
operator|)
name|optionPane
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|userChoice
operator|.
name|equals
argument_list|(
literal|"Yes to All"
argument_list|)
condition|)
block|{
name|overwriteAll
operator|=
literal|true
expr_stmt|;
name|retval
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|userChoice
operator|.
name|equals
argument_list|(
literal|"Yes"
argument_list|)
condition|)
block|{
name|retval
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|userChoice
operator|.
name|equals
argument_list|(
literal|"No to All"
argument_list|)
condition|)
block|{
name|overwriteNone
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|(
name|retval
operator|)
return|;
block|}
comment|/**      * @param be      *       * We must remember to clobber the author field, because of the current      * implementation of addAuthor()      */
DECL|method|CiteSeerUndoHandler (NamedCompound newCompound, BibtexEntry be, BasePanel basePanel, BooleanAssign assignment)
specifier|public
name|CiteSeerUndoHandler
parameter_list|(
name|NamedCompound
name|newCompound
parameter_list|,
name|BibtexEntry
name|be
parameter_list|,
name|BasePanel
name|basePanel
parameter_list|,
name|BooleanAssign
name|assignment
parameter_list|)
block|{
name|citeseerNamedCompound
operator|=
name|newCompound
expr_stmt|;
name|bibEntry
operator|=
name|be
expr_stmt|;
name|panel
operator|=
name|basePanel
expr_stmt|;
name|recordFound
operator|=
name|assignment
expr_stmt|;
name|recordFound
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|characters (char[] ch, int start, int length)
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|nextAssign
operator|==
literal|true
condition|)
block|{
name|String
name|target
init|=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextField
operator|.
name|equals
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
if|if
condition|(
name|makeOverwriteChoice
argument_list|(
operator|(
name|String
operator|)
name|bibEntry
operator|.
name|getField
argument_list|(
name|nextField
argument_list|)
argument_list|,
name|target
argument_list|,
name|nextField
argument_list|)
condition|)
block|{
name|UndoableFieldChange
name|fieldChange
init|=
operator|new
name|UndoableFieldChange
argument_list|(
name|bibEntry
argument_list|,
name|nextField
argument_list|,
name|bibEntry
operator|.
name|getField
argument_list|(
name|nextField
argument_list|)
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|citeseerNamedCompound
operator|.
name|addEdit
argument_list|(
name|fieldChange
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|setField
argument_list|(
name|nextField
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|nextField
operator|.
name|equals
argument_list|(
literal|"year"
argument_list|)
condition|)
block|{
if|if
condition|(
name|makeOverwriteChoice
argument_list|(
operator|(
name|String
operator|)
name|bibEntry
operator|.
name|getField
argument_list|(
name|nextField
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|target
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|nextField
argument_list|)
condition|)
block|{
name|UndoableFieldChange
name|fieldChange
init|=
operator|new
name|UndoableFieldChange
argument_list|(
name|bibEntry
argument_list|,
name|nextField
argument_list|,
name|bibEntry
operator|.
name|getField
argument_list|(
name|nextField
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|target
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|citeseerNamedCompound
operator|.
name|addEdit
argument_list|(
name|fieldChange
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|setField
argument_list|(
name|nextField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|target
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|nextField
operator|.
name|equals
argument_list|(
literal|"citeseerurl"
argument_list|)
condition|)
block|{
if|if
condition|(
name|makeOverwriteChoice
argument_list|(
operator|(
name|String
operator|)
name|bibEntry
operator|.
name|getField
argument_list|(
name|nextField
argument_list|)
argument_list|,
name|target
argument_list|,
name|nextField
argument_list|)
condition|)
block|{
name|UndoableFieldChange
name|fieldChange
init|=
operator|new
name|UndoableFieldChange
argument_list|(
name|bibEntry
argument_list|,
name|nextField
argument_list|,
name|bibEntry
operator|.
name|getField
argument_list|(
name|nextField
argument_list|)
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|citeseerNamedCompound
operator|.
name|addEdit
argument_list|(
name|fieldChange
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|setField
argument_list|(
name|nextField
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
name|nextAssign
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * @param oldValue      * @param newValue      * @param fieldName      * @return overwrite      */
DECL|method|makeOverwriteChoice (String oldValue, String newValue, String fieldName)
specifier|private
name|boolean
name|makeOverwriteChoice
parameter_list|(
name|String
name|oldValue
parameter_list|,
name|String
name|newValue
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|boolean
name|overwrite
decl_stmt|;
if|if
condition|(
operator|(
name|oldValue
operator|==
literal|null
operator|)
operator|||
operator|(
name|oldValue
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
name|overwrite
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
name|overwrite
operator|=
literal|false
expr_stmt|;
elseif|else
if|if
condition|(
name|overwriteAll
operator|==
literal|true
condition|)
name|overwrite
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|overwriteNone
operator|==
literal|true
condition|)
name|overwrite
operator|=
literal|false
expr_stmt|;
else|else
name|overwrite
operator|=
name|overwriteDialog
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
return|return
name|overwrite
return|;
block|}
DECL|method|startElement (String name, AttributeList attrs)
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|name
parameter_list|,
name|AttributeList
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"record"
argument_list|)
condition|)
block|{
name|recordFound
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"oai_citeseer:relation"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attrName
init|=
name|attrs
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attrValue
init|=
name|attrs
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrName
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
operator|&&
name|attrValue
operator|.
name|equals
argument_list|(
literal|"Is Referenced By"
argument_list|)
condition|)
block|{
name|citeseerCitationCount
operator|++
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"oai_citeseer:author"
argument_list|)
condition|)
block|{
name|addAuthor
argument_list|(
name|attrs
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"dc:title"
argument_list|)
condition|)
block|{
name|nextField
operator|=
literal|"title"
expr_stmt|;
name|nextAssign
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"dc:date"
argument_list|)
condition|)
block|{
name|nextField
operator|=
literal|"year"
expr_stmt|;
name|nextAssign
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"dc:identifier"
argument_list|)
condition|)
block|{
name|nextField
operator|=
literal|"citeseerurl"
expr_stmt|;
name|nextAssign
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|endDocument ()
specifier|public
name|void
name|endDocument
parameter_list|()
block|{
if|if
condition|(
name|newAuthors
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|makeOverwriteChoice
argument_list|(
operator|(
name|String
operator|)
name|bibEntry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|,
name|newAuthors
argument_list|,
literal|"author"
argument_list|)
condition|)
block|{
name|UndoableFieldChange
name|fieldChange
init|=
operator|new
name|UndoableFieldChange
argument_list|(
name|bibEntry
argument_list|,
literal|"author"
argument_list|,
name|bibEntry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|,
name|newAuthors
argument_list|)
decl_stmt|;
name|citeseerNamedCompound
operator|.
name|addEdit
argument_list|(
name|fieldChange
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
name|newAuthors
argument_list|)
expr_stmt|;
block|}
block|}
name|Integer
name|newCount
init|=
operator|new
name|Integer
argument_list|(
name|citeseerCitationCount
argument_list|)
decl_stmt|;
name|UndoableFieldChange
name|fieldChange
init|=
operator|new
name|UndoableFieldChange
argument_list|(
name|bibEntry
argument_list|,
literal|"citeseerCitationCount"
argument_list|,
name|bibEntry
operator|.
name|getField
argument_list|(
literal|"citeseerCitationCount"
argument_list|)
argument_list|,
name|newCount
argument_list|)
decl_stmt|;
name|citeseerNamedCompound
operator|.
name|addEdit
argument_list|(
name|fieldChange
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|setField
argument_list|(
literal|"citeseerCitationCount"
argument_list|,
name|newCount
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param string      */
DECL|method|addAuthor (String newAuthor)
specifier|private
name|void
name|addAuthor
parameter_list|(
name|String
name|newAuthor
parameter_list|)
block|{
if|if
condition|(
name|newAuthors
operator|==
literal|null
condition|)
block|{
name|newAuthors
operator|=
name|newAuthor
expr_stmt|;
block|}
else|else
block|{
name|newAuthors
operator|=
name|newAuthors
operator|+
literal|" and "
operator|+
name|newAuthor
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

