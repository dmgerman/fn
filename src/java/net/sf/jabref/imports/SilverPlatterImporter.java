begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntryType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * Imports a Biblioscape Tag File. The format is described on  * http://www.biblioscape.com/manual_bsp/Biblioscape_Tag_File.htm Several  * Biblioscape field types are ignored. Others are only included in the BibTeX  * field "comment".  */
end_comment

begin_class
DECL|class|SilverPlatterImporter
specifier|public
class|class
name|SilverPlatterImporter
implements|implements
name|ImportFormat
block|{
comment|/**      * Return the name of this import format.      */
DECL|method|getFormatName ()
specifier|public
name|String
name|getFormatName
parameter_list|()
block|{
return|return
literal|"SilverPlatter"
return|;
block|}
comment|/**      * Check whether the source is in the correct format for this importer.      */
DECL|method|isRecognizedFormat (InputStream stream)
specifier|public
name|boolean
name|isRecognizedFormat
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
name|ImportFormatReader
operator|.
name|getReaderDefaultEncoding
argument_list|(
name|stream
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|str
decl_stmt|;
while|while
condition|(
operator|(
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|str
operator|.
name|length
argument_list|()
operator|>=
literal|5
operator|)
operator|&&
operator|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
operator|.
name|equals
argument_list|(
literal|"AU:  "
argument_list|)
operator|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Parse the entries in the source, and return a List of BibtexEntry      * objects.      */
DECL|method|importEntries (InputStream stream)
specifier|public
name|List
name|importEntries
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
name|bibitems
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
name|ImportFormatReader
operator|.
name|getReaderDefaultEncoding
argument_list|(
name|stream
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isChapter
init|=
literal|false
decl_stmt|;
name|String
name|str
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|str
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"__::__"
operator|+
name|str
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|"__NEWFIELD__"
operator|+
name|str
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
index|[]
name|entries
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"__::__"
argument_list|)
decl_stmt|;
name|String
name|Type
init|=
literal|""
decl_stmt|;
name|HashMap
name|h
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|entryLoop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|entries
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<
literal|6
condition|)
continue|continue
name|entryLoop
continue|;
comment|//System.out.println("'"+entries[i]+"'");
name|h
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
index|[]
name|fields
init|=
name|entries
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"__NEWFIELD__"
argument_list|)
decl_stmt|;
name|fieldLoop
label|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|j
index|]
operator|.
name|length
argument_list|()
operator|<
literal|6
condition|)
continue|continue
name|fieldLoop
continue|;
comment|//System.out.println(">"+fields[j]+"<");
name|String
name|s
init|=
name|fields
index|[
name|j
index|]
decl_stmt|;
name|String
name|f3
init|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|frest
init|=
name|s
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|f3
operator|.
name|equals
argument_list|(
literal|"TI"
argument_list|)
condition|)
name|h
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
name|frest
argument_list|)
expr_stmt|;
comment|//else if(f3.equals("PY")) h.put("year", frest);
elseif|else
if|if
condition|(
name|f3
operator|.
name|equals
argument_list|(
literal|"AU"
argument_list|)
condition|)
block|{
if|if
condition|(
name|frest
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"(ed)"
argument_list|)
condition|)
block|{
name|String
name|ed
init|=
name|frest
operator|.
name|trim
argument_list|()
decl_stmt|;
name|ed
operator|=
name|ed
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ed
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
literal|"editor"
argument_list|,
name|ImportFormatReader
operator|.
name|fixAuthor_lastnameFirst
argument_list|(
name|ed
operator|.
name|replaceAll
argument_list|(
literal|",-"
argument_list|,
literal|", "
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|";"
argument_list|,
literal|" and "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|h
operator|.
name|put
argument_list|(
literal|"author"
argument_list|,
name|ImportFormatReader
operator|.
name|fixAuthor_lastnameFirst
argument_list|(
name|frest
operator|.
name|replaceAll
argument_list|(
literal|",-"
argument_list|,
literal|", "
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|";"
argument_list|,
literal|" and "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f3
operator|.
name|equals
argument_list|(
literal|"AB"
argument_list|)
condition|)
name|h
operator|.
name|put
argument_list|(
literal|"abstract"
argument_list|,
name|frest
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|f3
operator|.
name|equals
argument_list|(
literal|"DE"
argument_list|)
condition|)
block|{
name|String
name|kw
init|=
name|frest
operator|.
name|replaceAll
argument_list|(
literal|"-;"
argument_list|,
literal|","
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|h
operator|.
name|put
argument_list|(
literal|"keywords"
argument_list|,
name|kw
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|kw
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f3
operator|.
name|equals
argument_list|(
literal|"SO"
argument_list|)
condition|)
block|{
name|int
name|m
init|=
name|frest
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|>=
literal|0
condition|)
block|{
name|String
name|jr
init|=
name|frest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|h
operator|.
name|put
argument_list|(
literal|"journal"
argument_list|,
name|jr
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|frest
operator|=
name|frest
operator|.
name|substring
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|frest
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|>=
literal|5
condition|)
block|{
name|String
name|yr
init|=
name|frest
operator|.
name|substring
argument_list|(
name|m
operator|-
literal|5
argument_list|,
name|m
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|h
operator|.
name|put
argument_list|(
literal|"year"
argument_list|,
name|yr
argument_list|)
expr_stmt|;
name|frest
operator|=
name|frest
operator|.
name|substring
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|frest
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|>=
literal|0
condition|)
block|{
name|String
name|pg
init|=
name|frest
operator|.
name|substring
argument_list|(
name|m
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|h
operator|.
name|put
argument_list|(
literal|"pages"
argument_list|,
name|pg
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
literal|"volume"
argument_list|,
name|frest
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|f3
operator|.
name|equals
argument_list|(
literal|"PB"
argument_list|)
condition|)
block|{
name|int
name|m
init|=
name|frest
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|>=
literal|0
condition|)
block|{
name|String
name|jr
init|=
name|frest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|h
operator|.
name|put
argument_list|(
literal|"publisher"
argument_list|,
name|jr
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|frest
operator|=
name|frest
operator|.
name|substring
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|frest
operator|.
name|indexOf
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|+
literal|2
operator|<
name|frest
operator|.
name|length
argument_list|()
condition|)
block|{
name|String
name|yr
init|=
name|frest
operator|.
name|substring
argument_list|(
name|m
operator|+
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|h
operator|.
name|put
argument_list|(
literal|"year"
argument_list|,
name|yr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|f3
operator|.
name|equals
argument_list|(
literal|"DT"
argument_list|)
condition|)
block|{
name|frest
operator|=
name|frest
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|frest
operator|.
name|equals
argument_list|(
literal|"Monograph"
argument_list|)
condition|)
name|Type
operator|=
literal|"book"
expr_stmt|;
elseif|else
if|if
condition|(
name|frest
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"journal"
argument_list|)
operator|>=
literal|0
condition|)
name|Type
operator|=
literal|"article"
expr_stmt|;
elseif|else
if|if
condition|(
name|frest
operator|.
name|equals
argument_list|(
literal|"Contribution"
argument_list|)
operator|||
name|frest
operator|.
name|equals
argument_list|(
literal|"Chapter"
argument_list|)
condition|)
block|{
name|Type
operator|=
literal|"incollection"
expr_stmt|;
comment|// This entry type contains page numbers and booktitle in the
comment|// title field.
name|isChapter
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|Type
operator|=
name|frest
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isChapter
condition|)
block|{
name|Object
name|titleO
init|=
name|h
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
if|if
condition|(
name|titleO
operator|!=
literal|null
condition|)
block|{
name|String
name|title
init|=
operator|(
operator|(
name|String
operator|)
name|titleO
operator|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|inPos
init|=
name|title
operator|.
name|indexOf
argument_list|(
literal|"\" in "
argument_list|)
decl_stmt|;
name|int
name|pgPos
init|=
name|title
operator|.
name|lastIndexOf
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|inPos
operator|>
literal|1
condition|)
name|h
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
name|title
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|inPos
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pgPos
operator|>
name|inPos
condition|)
name|h
operator|.
name|put
argument_list|(
literal|"pages"
argument_list|,
name|title
operator|.
name|substring
argument_list|(
name|pgPos
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|"--"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|BibtexEntry
name|b
init|=
operator|new
name|BibtexEntry
argument_list|(
name|Globals
operator|.
name|DEFAULT_BIBTEXENTRY_ID
argument_list|,
name|Globals
operator|.
name|getEntryType
argument_list|(
name|Type
argument_list|)
argument_list|)
decl_stmt|;
comment|// id assumes an existing database so don't
comment|// create one here
name|b
operator|.
name|setField
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|bibitems
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|bibitems
return|;
block|}
block|}
end_class

end_unit

