begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableInsertEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|ImportInspectionDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_class
DECL|class|ImportMenuItem
specifier|public
class|class
name|ImportMenuItem
extends|extends
name|JMenuItem
implements|implements
name|ActionListener
block|{
DECL|field|frame
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|openInNew
name|boolean
name|openInNew
decl_stmt|;
DECL|field|worker
name|MyWorker
name|worker
init|=
literal|null
decl_stmt|;
DECL|field|importer
name|ImportFormat
name|importer
decl_stmt|;
DECL|method|ImportMenuItem (JabRefFrame frame, boolean openInNew, ImportFormat importer)
specifier|public
name|ImportMenuItem
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|boolean
name|openInNew
parameter_list|,
name|ImportFormat
name|importer
parameter_list|)
block|{
name|super
argument_list|(
name|importer
operator|!=
literal|null
condition|?
name|importer
operator|.
name|getFormatName
argument_list|()
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"Autodetect format"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|importer
operator|=
name|importer
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|openInNew
operator|=
name|openInNew
expr_stmt|;
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|worker
operator|=
operator|new
name|MyWorker
argument_list|()
expr_stmt|;
name|worker
operator|.
name|init
argument_list|()
expr_stmt|;
name|worker
operator|.
name|getWorker
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
name|worker
operator|.
name|getCallBack
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|class|MyWorker
class|class
name|MyWorker
extends|extends
name|AbstractWorker
implements|implements
name|ImportInspectionDialog
operator|.
name|CallBack
block|{
DECL|field|filenames
DECL|field|formatName
name|String
index|[]
name|filenames
init|=
literal|null
decl_stmt|,
name|formatName
init|=
literal|null
decl_stmt|;
DECL|field|bibtexResult
name|ParserResult
name|bibtexResult
init|=
literal|null
decl_stmt|;
comment|// Contains the merged import results
DECL|field|fileOk
name|boolean
name|fileOk
init|=
literal|false
decl_stmt|;
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|filenames
operator|=
name|Globals
operator|.
name|getMultipleFiles
argument_list|(
name|frame
argument_list|,
operator|new
name|File
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
argument_list|)
argument_list|,
operator|(
name|importer
operator|!=
literal|null
condition|?
name|importer
operator|.
name|getExtensions
argument_list|()
else|:
literal|null
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/*if ((filenames != null)&& !(new File(filename)).exists()) {                JOptionPane.showMessageDialog(frame, Globals.lang("File not found") + ": '" + filename + "'",                        Globals.lang("Error"), JOptionPane.ERROR_MESSAGE);            } else*/
if|if
condition|(
operator|(
name|filenames
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|filenames
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|frame
operator|.
name|block
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Starting import"
argument_list|)
argument_list|)
expr_stmt|;
comment|//frame.output(Globals.lang("Importing file") + ": '" + filename + "'");
name|fileOk
operator|=
literal|true
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
literal|"workingDirectory"
argument_list|,
name|filenames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|fileOk
condition|)
return|return;
comment|// We import all files and collect their results:
name|List
name|imports
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filenames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|filename
init|=
name|filenames
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|importer
operator|!=
literal|null
condition|)
comment|// Specific importer:
try|try
block|{
name|imports
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|importer
operator|.
name|getFormatName
argument_list|()
block|,
name|Globals
operator|.
name|importFormatReader
operator|.
name|importFromFile
argument_list|(
name|importer
argument_list|,
name|filename
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// No entries found...
block|}
else|else
comment|// Unknown format:
name|imports
operator|.
name|add
argument_list|(
name|Globals
operator|.
name|importFormatReader
operator|.
name|importUnknownFormat
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Ok, done. Then try to gather in all we have found. Since we might have found
comment|// one or more bibtex results, it's best to gather them in a BibtexDatabase.
name|bibtexResult
operator|=
name|mergeImportResults
argument_list|(
name|imports
argument_list|)
expr_stmt|;
block|}
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
if|if
condition|(
operator|!
name|fileOk
condition|)
return|return;
comment|// TODO: undo is not handled properly here, except for the entries added by
comment|//  the import inspection dialog.
if|if
condition|(
name|bibtexResult
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|openInNew
condition|)
block|{
specifier|final
name|BasePanel
name|panel
init|=
operator|(
name|BasePanel
operator|)
name|frame
operator|.
name|getTabbedPane
argument_list|()
operator|.
name|getSelectedComponent
argument_list|()
decl_stmt|;
name|BibtexDatabase
name|toAddTo
init|=
name|panel
operator|.
name|database
argument_list|()
decl_stmt|;
comment|// Use the import inspection dialog if it is enabled in preferences, and
comment|// (there are more than one entry or the inspection dialog is also enabled
comment|// for single entries):
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useImportInspectionDialog"
argument_list|)
operator|&&
operator|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useImportInspectionDialogForSingle"
argument_list|)
operator|||
operator|(
name|bibtexResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|1
operator|)
operator|)
condition|)
block|{
name|ImportInspectionDialog
name|diag
init|=
operator|new
name|ImportInspectionDialog
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|BibtexFields
operator|.
name|DEFAULT_INSPECTION_FIELDS
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import"
argument_list|)
argument_list|,
name|openInNew
argument_list|)
decl_stmt|;
name|diag
operator|.
name|addEntries
argument_list|(
name|bibtexResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|diag
operator|.
name|addCallBack
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|diag
operator|.
name|entryListComplete
argument_list|()
expr_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|diag
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|diag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|diag
operator|.
name|toFront
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import entries"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|bibtexResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|toAddTo
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|toAddTo
argument_list|,
name|entry
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|frame
operator|.
name|addTab
argument_list|(
name|bibtexResult
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|bibtexResult
operator|.
name|getFile
argument_list|()
argument_list|,
name|bibtexResult
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|done
argument_list|(
name|bibtexResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|importer
operator|==
literal|null
condition|)
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not find a suitable import format."
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"No entries found. Please make sure you are "
operator|+
literal|"using the correct import filter."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import failed"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
DECL|method|done (int entriesImported)
specifier|public
name|void
name|done
parameter_list|(
name|int
name|entriesImported
parameter_list|)
block|{
specifier|final
name|BasePanel
name|panel
init|=
operator|(
name|BasePanel
operator|)
name|frame
operator|.
name|getTabbedPane
argument_list|()
operator|.
name|getSelectedComponent
argument_list|()
decl_stmt|;
name|BibtexDatabase
name|toAddTo
init|=
name|panel
operator|.
name|database
argument_list|()
decl_stmt|;
comment|/*             // Add the strings, if any:             for (Iterator i = bibtexResult.getDatabase().getStringKeySet().iterator(); i.hasNext();) {                 BibtexString s = bibtexResult.getDatabase().getString(i.next());                 try {                     toAddTo.addString(s);                 } catch (KeyCollisionException e) {                     e.printStackTrace();                 }              }               if ((panel != null)&& (bibtexResult.getDatabase().getEntryCount() == 1)) {                 SwingUtilities.invokeLater(new Runnable() {                     public void run() {                         panel.highlightEntry((BibtexEntry)                                 bibtexResult.getDatabase().getEntries().                                         iterator().next());                     }                 });               }             */
if|if
condition|(
name|worker
operator|.
name|bibtexResult
operator|!=
literal|null
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Imported entries"
argument_list|)
operator|+
literal|": "
operator|+
name|entriesImported
argument_list|)
expr_stmt|;
comment|//        + "  " + Globals.lang("Format used") + ": " + worker.formatName);
block|}
block|}
DECL|method|cancelled ()
specifier|public
name|void
name|cancelled
parameter_list|()
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import cancelled."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This method is called by the dialog when the user has cancelled or
comment|// signalled a stop. It is expected that any long-running fetch operations
comment|// will stop after this method is called.
DECL|method|stopFetching ()
specifier|public
name|void
name|stopFetching
parameter_list|()
block|{
comment|// No process to stop.
block|}
block|}
DECL|method|mergeImportResults (List imports)
specifier|public
specifier|static
name|ParserResult
name|mergeImportResults
parameter_list|(
name|List
name|imports
parameter_list|)
block|{
name|BibtexDatabase
name|database
init|=
operator|new
name|BibtexDatabase
argument_list|()
decl_stmt|;
name|ParserResult
name|directParserResult
init|=
literal|null
decl_stmt|;
name|boolean
name|anythingUseful
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|imports
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
index|[
literal|1
index|]
operator|instanceof
name|List
condition|)
block|{
name|List
name|entries
init|=
operator|(
name|List
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|anythingUseful
operator|=
name|anythingUseful
operator||
operator|(
name|entries
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|entry
operator|.
name|setId
argument_list|(
name|Util
operator|.
name|createNeutralId
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|o
index|[
literal|1
index|]
operator|instanceof
name|ParserResult
condition|)
block|{
comment|// Bibtex result. We must merge it into our main base.
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|anythingUseful
operator|=
name|anythingUseful
operator|||
operator|(
operator|(
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|0
operator|)
operator|||
operator|(
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringCount
argument_list|()
operator|>
literal|0
operator|)
operator|)
expr_stmt|;
comment|// Record the parserResult, as long as this is the first bibtex result:
if|if
condition|(
name|directParserResult
operator|==
literal|null
condition|)
block|{
name|directParserResult
operator|=
name|pr
expr_stmt|;
block|}
comment|// Merge entries:
for|for
control|(
name|Iterator
name|j
init|=
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// This should never happen
block|}
block|}
comment|// Merge strings:
for|for
control|(
name|Iterator
name|j
init|=
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexString
name|bs
init|=
call|(
name|BibtexString
call|)
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getString
argument_list|(
name|j
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|database
operator|.
name|addString
argument_list|(
name|bs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|e
parameter_list|)
block|{
comment|// This means a duplicate string name exists, so it's not
comment|// a very exceptional situation. We should maybe give a warning...?
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|anythingUseful
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|(
name|imports
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
name|directParserResult
operator|!=
literal|null
operator|)
condition|)
block|{
return|return
name|directParserResult
return|;
block|}
else|else
block|{
name|ParserResult
name|pr
init|=
operator|new
name|ParserResult
argument_list|(
name|database
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|pr
return|;
block|}
block|}
block|}
end_class

end_unit

