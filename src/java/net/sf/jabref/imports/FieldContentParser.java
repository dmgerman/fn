begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_comment
comment|/**  * This class provides the reformatting needed when reading BibTeX fields formatted  * in JabRef style. The reformatting must undo all formatting done by JabRef when  * writing the same fields.  */
end_comment

begin_class
DECL|class|FieldContentParser
specifier|public
class|class
name|FieldContentParser
block|{
DECL|field|wrap
specifier|private
specifier|static
name|Pattern
name|wrap
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\n\\t"
argument_list|)
decl_stmt|;
comment|/**      * Performs the reformatting      * @param content StringBuffer containing the field to format.      * @return The formatted field content. NOTE: the StringBuffer returned may      * or may not be the same as the argument given.      */
DECL|method|format (StringBuffer content)
specifier|public
name|StringBuffer
name|format
parameter_list|(
name|StringBuffer
name|content
parameter_list|)
block|{
name|int
name|prev
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|content
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|c
init|=
name|content
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\n'
condition|)
block|{
if|if
condition|(
operator|(
name|content
operator|.
name|length
argument_list|()
operator|>
name|i
operator|+
literal|2
operator|)
operator|&&
operator|(
name|content
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'\t'
operator|)
operator|&&
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|content
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
condition|)
block|{
comment|// We have \n\t followed by non-whitespace, which indicates
comment|// a wrap made by JabRef. Remove and insert space if necessary.
name|content
operator|.
name|deleteCharAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// \n
name|content
operator|.
name|deleteCharAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// \t
comment|// Add space only if necessary:
if|if
condition|(
operator|(
name|i
operator|>
literal|0
operator|)
operator|&&
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|content
operator|.
name|charAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|content
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
comment|// Increment i because of the inserted character:
name|i
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|content
operator|.
name|length
argument_list|()
operator|>
name|i
operator|+
literal|3
operator|)
operator|&&
operator|(
name|content
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'\t'
operator|)
operator|&&
operator|(
name|content
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|==
literal|' '
operator|)
operator|&&
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|content
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|3
argument_list|)
argument_list|)
condition|)
block|{
comment|// We have \n\t followed by ' ' followed by non-whitespace, which indicates
comment|// a wrap made by JabRef<= 1.7.1. Remove:
name|content
operator|.
name|deleteCharAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// \n
name|content
operator|.
name|deleteCharAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// \t
comment|// Remove space only if necessary:
if|if
condition|(
operator|(
name|i
operator|>
literal|0
operator|)
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|content
operator|.
name|charAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|content
operator|.
name|deleteCharAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|content
operator|.
name|length
argument_list|()
operator|>
name|i
operator|+
literal|3
operator|)
operator|&&
operator|(
name|content
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'\t'
operator|)
operator|&&
operator|(
name|content
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|==
literal|'\n'
operator|)
operator|&&
operator|(
name|content
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|3
argument_list|)
operator|==
literal|'\t'
operator|)
condition|)
block|{
comment|// We have \n\t\n\t, which looks like a JabRef-formatted empty line.
comment|// Remove the tabs and keep the line breaks:
name|content
operator|.
name|deleteCharAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|content
operator|.
name|deleteCharAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// i+3 is now i+2 since we removed one char.
comment|// Skip past the line breaks:
name|i
operator|+=
literal|2
expr_stmt|;
block|}
else|else
name|i
operator|++
expr_stmt|;
comment|//content.deleteCharAt(i);
block|}
else|else
name|i
operator|++
expr_stmt|;
name|prev
operator|=
name|c
expr_stmt|;
block|}
return|return
name|content
return|;
block|}
block|}
end_class

end_unit

