begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_comment
comment|/*   Copyright (C) 2002-2003 Morten O. Alver& Nizar N. Batada   All programs in this directory and   subdirectories are published under the GNU General Public License as   described below.    This program is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or (at   your option) any later version.    This program is distributed in the hope that it will be useful, but   WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU   General Public License for more details.    You should have received a copy of the GNU General Public License   along with this program; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307   USA    Further information about the GNU GPL is available at:   http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_class
DECL|class|MedlineHandler
specifier|public
class|class
name|MedlineHandler
extends|extends
name|DefaultHandler
block|{
DECL|field|bibitems
name|ArrayList
name|bibitems
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|inTitle
DECL|field|inYear
name|boolean
name|inTitle
init|=
literal|false
decl_stmt|,
name|inYear
init|=
literal|false
decl_stmt|,
DECL|field|inJournal
DECL|field|inMonth
name|inJournal
init|=
literal|false
decl_stmt|,
name|inMonth
init|=
literal|false
decl_stmt|,
DECL|field|inVolume
DECL|field|inAuthorList
name|inVolume
init|=
literal|false
decl_stmt|,
name|inAuthorList
init|=
literal|false
decl_stmt|,
DECL|field|inAuthor
DECL|field|inLastName
name|inAuthor
init|=
literal|false
decl_stmt|,
name|inLastName
init|=
literal|false
decl_stmt|,
DECL|field|inInitials
DECL|field|inMedlinePgn
name|inInitials
init|=
literal|false
decl_stmt|,
name|inMedlinePgn
init|=
literal|false
decl_stmt|,
DECL|field|inMedlineID
DECL|field|inURL
name|inMedlineID
init|=
literal|false
decl_stmt|,
name|inURL
init|=
literal|false
decl_stmt|,
DECL|field|inIssue
DECL|field|inPubDate
name|inIssue
init|=
literal|false
decl_stmt|,
name|inPubDate
init|=
literal|false
decl_stmt|,
DECL|field|inUrl
DECL|field|inForename
DECL|field|inAbstractText
DECL|field|inMedlineDate
name|inUrl
init|=
literal|false
decl_stmt|,
name|inForename
init|=
literal|false
decl_stmt|,
name|inAbstractText
init|=
literal|false
decl_stmt|,
name|inMedlineDate
init|=
literal|false
decl_stmt|,
DECL|field|inPubMedID
DECL|field|inDescriptorName
DECL|field|inDoi
DECL|field|inPii
name|inPubMedID
init|=
literal|false
decl_stmt|,
name|inDescriptorName
init|=
literal|false
decl_stmt|,
name|inDoi
init|=
literal|false
decl_stmt|,
name|inPii
init|=
literal|false
decl_stmt|;
DECL|field|title
DECL|field|journal
DECL|field|keyword
DECL|field|author
name|String
name|title
init|=
literal|""
decl_stmt|,
name|journal
init|=
literal|""
decl_stmt|,
name|keyword
init|=
literal|""
decl_stmt|,
name|author
init|=
literal|""
decl_stmt|,
DECL|field|lastName
DECL|field|year
DECL|field|forename
DECL|field|abstractText
name|lastName
init|=
literal|""
decl_stmt|,
name|year
init|=
literal|""
decl_stmt|,
name|forename
init|=
literal|""
decl_stmt|,
name|abstractText
init|=
literal|""
decl_stmt|;
DECL|field|month
DECL|field|volume
DECL|field|lastname
DECL|field|initials
DECL|field|number
DECL|field|page
DECL|field|medlineID
DECL|field|url
DECL|field|MedlineDate
name|String
name|month
init|=
literal|""
decl_stmt|,
name|volume
init|=
literal|""
decl_stmt|,
name|lastname
init|=
literal|""
decl_stmt|,
name|initials
init|=
literal|""
decl_stmt|,
name|number
init|=
literal|""
decl_stmt|,
name|page
init|=
literal|""
decl_stmt|,
name|medlineID
init|=
literal|""
decl_stmt|,
name|url
init|=
literal|""
decl_stmt|,
name|MedlineDate
init|=
literal|""
decl_stmt|;
DECL|field|series
DECL|field|editor
DECL|field|booktitle
DECL|field|type
DECL|field|key
DECL|field|address
name|String
name|series
init|=
literal|""
decl_stmt|,
name|editor
init|=
literal|""
decl_stmt|,
name|booktitle
init|=
literal|""
decl_stmt|,
name|type
init|=
literal|"article"
decl_stmt|,
name|key
init|=
literal|""
decl_stmt|,
name|address
init|=
literal|""
decl_stmt|,
DECL|field|pubmedid
DECL|field|descriptorName
DECL|field|doi
DECL|field|pii
name|pubmedid
init|=
literal|""
decl_stmt|,
name|descriptorName
init|=
literal|""
decl_stmt|,
name|doi
init|=
literal|""
decl_stmt|,
name|pii
init|=
literal|""
decl_stmt|;
DECL|field|authors
name|ArrayList
name|authors
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|rowNum
name|int
name|rowNum
init|=
literal|0
decl_stmt|;
DECL|method|getItems ()
specifier|public
name|ArrayList
name|getItems
parameter_list|()
block|{
return|return
name|bibitems
return|;
block|}
DECL|method|MedlineHandler ()
specifier|public
name|MedlineHandler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|startElement (String uri, String localName, String qName, Attributes atts)
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
block|{
comment|//		public void startElement(String localName, Attributes atts) {
comment|// Get the number of attribute
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PubmedArticle"
argument_list|)
condition|)
block|{}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ArticleTitle"
argument_list|)
condition|)
block|{
name|inTitle
operator|=
literal|true
expr_stmt|;
name|title
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PubDate"
argument_list|)
condition|)
block|{
name|inPubDate
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Year"
argument_list|)
operator|&&
name|inPubDate
operator|==
literal|true
condition|)
block|{
name|inYear
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlineDate"
argument_list|)
operator|&&
name|inPubDate
operator|==
literal|true
condition|)
block|{
name|inMedlineDate
operator|=
literal|true
expr_stmt|;
block|}
comment|// medline date does not have 4 digit dates instead it has multiyear etc
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlineTA"
argument_list|)
condition|)
block|{
name|inJournal
operator|=
literal|true
expr_stmt|;
name|journal
operator|=
literal|""
expr_stmt|;
block|}
comment|//journal name
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Month"
argument_list|)
operator|&&
name|inPubDate
operator|==
literal|true
condition|)
block|{
name|inMonth
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Volume"
argument_list|)
condition|)
block|{
name|inVolume
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"AuthorList"
argument_list|)
condition|)
block|{
name|inAuthorList
operator|=
literal|true
expr_stmt|;
name|authors
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"DescriptorName"
argument_list|)
condition|)
block|{
comment|//keyword="";
name|inDescriptorName
operator|=
literal|true
expr_stmt|;
comment|//descriptorName="";
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Author"
argument_list|)
condition|)
block|{
name|inAuthor
operator|=
literal|true
expr_stmt|;
name|author
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"CollectiveName"
argument_list|)
condition|)
block|{
name|inForename
operator|=
literal|true
expr_stmt|;
name|forename
operator|=
literal|""
expr_stmt|;
block|}
comment|// Morten A. 20040513.
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PMID"
argument_list|)
condition|)
block|{
name|inPubMedID
operator|=
literal|true
expr_stmt|;
name|pubmedid
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"LastName"
argument_list|)
condition|)
block|{
name|inLastName
operator|=
literal|true
expr_stmt|;
name|lastName
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ForeName"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"FirstName"
argument_list|)
condition|)
block|{
name|inForename
operator|=
literal|true
expr_stmt|;
name|forename
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Issue"
argument_list|)
condition|)
block|{
name|inIssue
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlinePgn"
argument_list|)
condition|)
block|{
name|inMedlinePgn
operator|=
literal|true
expr_stmt|;
block|}
comment|//pagenumber
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"URL"
argument_list|)
condition|)
block|{
name|inUrl
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Initials"
argument_list|)
condition|)
block|{
name|inInitials
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"AbstractText"
argument_list|)
condition|)
block|{
name|inAbstractText
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ArticleId"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|atts
operator|.
name|getType
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//System.out.println("name:" + name + " type: " + type + " value: " + value);
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"doi"
argument_list|)
condition|)
name|inDoi
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"pii"
argument_list|)
condition|)
name|inPii
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return;
block|}
DECL|method|join (Object[] sa,String delim)
name|String
name|join
parameter_list|(
name|Object
index|[]
name|sa
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sa
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|sa
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sa
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|makeBibtexString ()
name|String
name|makeBibtexString
parameter_list|()
block|{
name|String
name|out
init|=
literal|""
decl_stmt|;
name|out
operator|=
literal|"article{,\n"
operator|+
literal|" author = { "
operator|+
name|author
operator|+
literal|" },\n title = { "
operator|+
name|title
operator|+
literal|"},\n journal ={ "
operator|+
name|journal
operator|+
literal|"},\n year = "
operator|+
name|year
operator|+
literal|"},\n volume = { "
operator|+
name|volume
operator|+
literal|"},\n number = { "
operator|+
name|number
operator|+
literal|"},\n pages = { "
operator|+
name|page
operator|+
literal|"},\n abstract = { "
operator|+
name|abstractText
operator|+
literal|"},\n}"
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|endElement ( String uri, String localName, String qName )
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PubmedArticle"
argument_list|)
condition|)
block|{
comment|//bibitems.add( new Bibitem(null, makeBibtexString(), Globals.nextKey(),"-1" )	 );
comment|// check if year ="" then give medline date instead
if|if
condition|(
name|year
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|MedlineDate
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// multi-year date format
comment|//System.out.println(MedlineDate);
name|year
operator|=
name|MedlineDate
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Matcher m = Pattern.compile("\\b[0-9]{4}\\b").matcher(MedlineDate);
comment|//if(m.matches())
comment|//year = m.group();
block|}
block|}
comment|//################################## 09/23/03  put {} around capitals
name|title
operator|=
name|Globals
operator|.
name|putBracesAroundCapitals
argument_list|(
name|title
argument_list|)
expr_stmt|;
comment|//##############################
comment|// Sort keywords and remove duplicates. Add pubmedid as keyword (user request)
name|keyword
operator|=
name|Util
operator|.
name|sortWordsAndRemoveDuplicates
argument_list|(
name|descriptorName
argument_list|)
operator|+
literal|", "
operator|+
name|pubmedid
expr_stmt|;
comment|// 	    Bibitem b =  new Bibitem(author, title, journal,
comment|// 				     key, year, page, volume,
comment|// 				     type, series, editor, booktitle,
comment|// 				     address, number, keyword, url, abstractText.replaceAll("%","\\\\%"), Globals.nextKey(),""+rowNum++ );
comment|// 	    if(b.getType().length()> 0)
name|BibtexEntry
name|b
init|=
operator|new
name|BibtexEntry
argument_list|(
name|Util
operator|.
name|createNeutralId
argument_list|()
argument_list|,
comment|//Globals.DEFAULT_BIBTEXENTRY_ID,
name|Globals
operator|.
name|getEntryType
argument_list|(
literal|"article"
argument_list|)
argument_list|)
decl_stmt|;
comment|// id assumes an existing database so don't create one here
if|if
condition|(
operator|!
name|author
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
name|ImportFormatReader
operator|.
name|expandAuthorInitials
argument_list|(
name|author
argument_list|)
argument_list|)
expr_stmt|;
name|author
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|title
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|b
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|journal
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|b
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
name|journal
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|year
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|b
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
name|year
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|page
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|b
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
name|page
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|volume
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|b
operator|.
name|setField
argument_list|(
literal|"volume"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|abstractText
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|b
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
name|abstractText
operator|.
name|replaceAll
argument_list|(
literal|"%"
argument_list|,
literal|"\\\\%"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyword
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|b
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
name|keyword
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|month
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|b
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
name|month
argument_list|)
expr_stmt|;
comment|//if (!url.equals("")) b.setField("url",url);
if|if
condition|(
operator|!
name|number
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|b
operator|.
name|setField
argument_list|(
literal|"number"
argument_list|,
name|number
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doi
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
name|doi
argument_list|)
expr_stmt|;
name|b
operator|.
name|setField
argument_list|(
literal|"url"
argument_list|,
literal|"http://dx.doi.org/"
operator|+
name|doi
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pii
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|b
operator|.
name|setField
argument_list|(
literal|"pii"
argument_list|,
name|pii
argument_list|)
expr_stmt|;
name|bibitems
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|abstractText
operator|=
literal|""
expr_stmt|;
name|author
operator|=
literal|""
expr_stmt|;
name|title
operator|=
literal|""
expr_stmt|;
name|journal
operator|=
literal|""
expr_stmt|;
name|keyword
operator|=
literal|""
expr_stmt|;
name|doi
operator|=
literal|""
expr_stmt|;
name|pii
operator|=
literal|""
expr_stmt|;
name|year
operator|=
literal|""
expr_stmt|;
name|forename
operator|=
literal|""
expr_stmt|;
name|lastName
operator|=
literal|""
expr_stmt|;
name|abstractText
operator|=
literal|""
expr_stmt|;
name|pubmedid
operator|=
literal|""
expr_stmt|;
name|month
operator|=
literal|""
expr_stmt|;
name|volume
operator|=
literal|""
expr_stmt|;
name|lastname
operator|=
literal|""
expr_stmt|;
name|initials
operator|=
literal|""
expr_stmt|;
name|number
operator|=
literal|""
expr_stmt|;
name|page
operator|=
literal|""
expr_stmt|;
name|medlineID
operator|=
literal|""
expr_stmt|;
name|url
operator|=
literal|""
expr_stmt|;
name|MedlineDate
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ArticleTitle"
argument_list|)
condition|)
block|{
name|inTitle
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PubDate"
argument_list|)
condition|)
block|{
name|inPubDate
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Year"
argument_list|)
condition|)
block|{
name|inYear
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PMID"
argument_list|)
condition|)
block|{
name|inPubMedID
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlineDate"
argument_list|)
condition|)
block|{
name|inMedlineDate
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlineTA"
argument_list|)
condition|)
block|{
name|inJournal
operator|=
literal|false
expr_stmt|;
block|}
comment|//journal name
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Month"
argument_list|)
condition|)
block|{
name|inMonth
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Volume"
argument_list|)
condition|)
block|{
name|inVolume
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"AuthorList"
argument_list|)
condition|)
block|{
name|author
operator|=
name|join
argument_list|(
name|authors
operator|.
name|toArray
argument_list|()
argument_list|,
literal|" and "
argument_list|)
expr_stmt|;
name|inAuthorList
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Author"
argument_list|)
condition|)
block|{
comment|// forename sometimes has initials with " " in middle: is pattern [A-Z] [A-Z]
comment|// when above is the case replace it with initials
if|if
condition|(
name|forename
operator|.
name|length
argument_list|()
operator|==
literal|3
operator|&&
name|forename
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|forename
operator|=
name|initials
expr_stmt|;
block|}
name|author
operator|=
name|forename
operator|+
literal|" "
operator|+
name|lastname
expr_stmt|;
comment|//author = initials + " " + lastname;
name|authors
operator|.
name|add
argument_list|(
name|author
argument_list|)
expr_stmt|;
name|inAuthor
operator|=
literal|false
expr_stmt|;
name|forename
operator|=
literal|""
expr_stmt|;
name|initials
operator|=
literal|""
expr_stmt|;
name|lastname
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"DescriptorName"
argument_list|)
condition|)
name|inDescriptorName
operator|=
literal|false
expr_stmt|;
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"LastName"
argument_list|)
condition|)
block|{
name|inLastName
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ForeName"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"FirstName"
argument_list|)
condition|)
block|{
name|inForename
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Issue"
argument_list|)
condition|)
block|{
name|inIssue
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlinePgn"
argument_list|)
condition|)
block|{
name|inMedlinePgn
operator|=
literal|false
expr_stmt|;
block|}
comment|//pagenumber
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"URL"
argument_list|)
condition|)
block|{
name|inUrl
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Initials"
argument_list|)
condition|)
block|{
comment|//initials= '.' + initials + '.';
name|inInitials
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"AbstractText"
argument_list|)
condition|)
block|{
name|inAbstractText
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ArticleId"
argument_list|)
condition|)
block|{
if|if
condition|(
name|inDoi
condition|)
name|inDoi
operator|=
literal|false
expr_stmt|;
elseif|else
if|if
condition|(
name|inPii
condition|)
name|inPii
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|characters ( char[] data, int start, int length )
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// if stack is not ready, data is not content of recognized element
if|if
condition|(
name|inTitle
condition|)
block|{
name|title
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inYear
condition|)
block|{
name|year
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inJournal
condition|)
block|{
name|journal
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inMonth
condition|)
block|{
name|month
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inVolume
condition|)
block|{
name|volume
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inLastName
condition|)
block|{
name|lastname
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inInitials
condition|)
block|{
name|initials
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inIssue
condition|)
block|{
name|number
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inMedlinePgn
condition|)
block|{
name|page
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inMedlineID
condition|)
block|{
name|medlineID
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inURL
condition|)
block|{
name|url
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inPubMedID
condition|)
block|{
name|pubmedid
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inDescriptorName
condition|)
name|descriptorName
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
operator|+
literal|", "
expr_stmt|;
elseif|else
if|if
condition|(
name|inForename
condition|)
block|{
name|forename
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|//System.out.println("IN FORENAME: " + forename);
block|}
elseif|else
if|if
condition|(
name|inAbstractText
condition|)
block|{
name|abstractText
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inMedlineDate
condition|)
block|{
name|MedlineDate
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inDoi
condition|)
block|{
name|doi
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inPii
condition|)
block|{
name|pii
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

