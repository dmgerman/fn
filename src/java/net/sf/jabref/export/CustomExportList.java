begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.export
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_comment
comment|/** * This class handles user defined custom export formats. They are initially read from Preferences, * and kept alphabetically (sorted by name). Formats can be added or removed. When modified, the * sort() method must be called to make sure the formats stay properly sorted. * When the method store() is called, export formats are written to Preferences. */
end_comment

begin_class
DECL|class|CustomExportList
specifier|public
class|class
name|CustomExportList
extends|extends
name|TreeSet
block|{
DECL|field|array
specifier|private
name|Object
index|[]
name|array
decl_stmt|;
DECL|field|prefs
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|method|CustomExportList (JabRefPreferences prefs_)
specifier|public
name|CustomExportList
parameter_list|(
name|JabRefPreferences
name|prefs_
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|ExportComparator
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|=
name|prefs_
expr_stmt|;
name|readPrefs
argument_list|()
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
block|}
DECL|method|readPrefs ()
specifier|private
name|void
name|readPrefs
parameter_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|s
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|s
operator|=
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"customExportFormat"
operator|+
name|i
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|getElementAt (int pos)
specifier|public
name|String
index|[]
name|getElementAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
operator|(
name|String
index|[]
operator|)
operator|(
name|array
index|[
name|pos
index|]
operator|)
return|;
block|}
DECL|method|addFormat (String[] s)
specifier|public
name|void
name|addFormat
parameter_list|(
name|String
index|[]
name|s
parameter_list|)
block|{
name|super
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
block|}
DECL|method|remove (int pos)
specifier|public
name|void
name|remove
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|super
operator|.
name|remove
argument_list|(
name|array
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
block|}
DECL|method|sort ()
specifier|public
name|void
name|sort
parameter_list|()
block|{
name|array
operator|=
name|toArray
argument_list|()
expr_stmt|;
block|}
DECL|method|store ()
specifier|public
name|void
name|store
parameter_list|()
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|==
literal|0
condition|)
name|purge
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//System.out.println(i+"..");
name|Globals
operator|.
name|prefs
operator|.
name|putStringArray
argument_list|(
literal|"customExportFormat"
operator|+
name|i
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|array
index|[
name|i
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
name|purge
argument_list|(
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|purge (int from)
specifier|private
name|void
name|purge
parameter_list|(
name|int
name|from
parameter_list|)
block|{
name|String
index|[]
name|s
init|=
literal|null
decl_stmt|;
name|int
name|i
init|=
name|from
decl_stmt|;
while|while
condition|(
operator|(
name|s
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"customExportFormat"
operator|+
name|i
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|remove
argument_list|(
literal|"customExportFormat"
operator|+
name|i
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|ExportComparator
class|class
name|ExportComparator
implements|implements
name|Comparator
block|{
DECL|method|compare (Object o1, Object o2)
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|String
index|[]
name|s1
init|=
operator|(
name|String
index|[]
operator|)
name|o1
decl_stmt|,
name|s2
init|=
operator|(
name|String
index|[]
operator|)
name|o2
decl_stmt|;
return|return
name|s1
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|s2
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

