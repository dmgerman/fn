begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.export
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Exception
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
operator|.
name|SQLutil
import|;
end_import

begin_comment
comment|/**  * MySQLExport contributed by Lee Patton.  */
end_comment

begin_class
DECL|class|MySQLExport
specifier|public
class|class
name|MySQLExport
extends|extends
name|ExportFormat
block|{
DECL|method|MySQLExport ()
specifier|public
name|MySQLExport
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"MySQL database"
argument_list|)
argument_list|,
literal|"mysql"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|".sql"
argument_list|)
expr_stmt|;
block|}
comment|/**      * First method called when user starts the export.      *       * @param database      *            The bibtex database from which to export.      * @param file      *            The filename to which the export should be writtten.      * @param encoding      *            The encoding to use.      * @param keySet      *            The set of IDs of the entries to export.      * @throws java.lang.Exception      *             If something goes wrong, feel free to throw an exception. The      *             error message is shown to the user.      */
DECL|method|performExport (final BibtexDatabase database, final MetaData metaData, final String file, final String encoding, Set<String> keySet)
specifier|public
name|void
name|performExport
parameter_list|(
specifier|final
name|BibtexDatabase
name|database
parameter_list|,
specifier|final
name|MetaData
name|metaData
parameter_list|,
specifier|final
name|String
name|file
parameter_list|,
specifier|final
name|String
name|encoding
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
parameter_list|)
throws|throws
name|Exception
block|{
comment|// open output file
name|File
name|outfile
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|outfile
operator|.
name|exists
argument_list|()
condition|)
name|outfile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|PrintStream
name|fout
init|=
literal|null
decl_stmt|;
name|fout
operator|=
operator|new
name|PrintStream
argument_list|(
name|outfile
argument_list|)
expr_stmt|;
comment|// get entries selected for export
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
init|=
name|FileActions
operator|.
name|getSortedEntries
argument_list|(
name|database
argument_list|,
name|keySet
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// create MySQL tables
name|SQLutil
operator|.
name|dmlCreateTables
argument_list|(
name|SQLutil
operator|.
name|DBTYPE
operator|.
name|MYSQL
argument_list|,
name|fout
argument_list|)
expr_stmt|;
comment|// populate entry_type table
name|SQLutil
operator|.
name|dmlPopTab_ET
argument_list|(
name|fout
argument_list|)
expr_stmt|;
comment|// populate entries table
name|SQLutil
operator|.
name|dmlPopTab_FD
argument_list|(
name|entries
argument_list|,
name|fout
argument_list|)
expr_stmt|;
name|GroupTreeNode
name|gtn
init|=
name|metaData
operator|.
name|getGroups
argument_list|()
decl_stmt|;
comment|// populate groups table
name|SQLutil
operator|.
name|dmlPopTab_GP
argument_list|(
name|gtn
argument_list|,
name|fout
argument_list|)
expr_stmt|;
comment|// populate entry_group table
name|SQLutil
operator|.
name|dmlPopTab_EG
argument_list|(
name|gtn
argument_list|,
name|fout
argument_list|)
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
end_class

end_unit

