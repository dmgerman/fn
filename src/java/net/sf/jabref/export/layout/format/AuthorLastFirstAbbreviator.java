begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on 12/10/2004  */
end_comment

begin_package
DECL|package|net.sf.jabref.export.layout.format
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|LayoutFormatter
import|;
end_import

begin_comment
comment|/**  *   * Uses as input the fields (author or editor) in the LastFirst format.   *   * This formater enables to abbreviate the authors name in the following way:  *   * Ex: Someone, Van Something will be abbreviated as Someone, V. S.  *   * @author Carlos Silla  */
end_comment

begin_class
DECL|class|AuthorLastFirstAbbreviator
specifier|public
class|class
name|AuthorLastFirstAbbreviator
implements|implements
name|LayoutFormatter
block|{
comment|/* (non-Javadoc) 	 * @see net.sf.jabref.export.layout.LayoutFormatter#format(java.lang.String) 	 */
DECL|method|format (String fieldText)
specifier|public
name|String
name|format
parameter_list|(
name|String
name|fieldText
parameter_list|)
block|{
name|String
index|[]
name|authors
init|=
name|fieldText
operator|.
name|split
argument_list|(
literal|" and "
argument_list|)
decl_stmt|;
name|String
name|abbrev
init|=
name|getAbbreviations
argument_list|(
name|authors
argument_list|)
decl_stmt|;
return|return
operator|(
name|abbrev
operator|==
literal|null
condition|?
literal|""
else|:
name|abbrev
operator|)
return|;
block|}
comment|/** 	 * Abbreviates the names in the Last First format. 	 *  	 * @param authors List of authors or editors. 	 * @return the names abbreviated. 	 * @throws RequiredOrderException 	 *  	 */
DECL|method|getAbbreviations (String[] authors)
specifier|private
name|String
name|getAbbreviations
parameter_list|(
name|String
index|[]
name|authors
parameter_list|)
block|{
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|verifyProperFormat
argument_list|(
name|authors
argument_list|)
expr_stmt|;
name|String
index|[]
name|authors_abrv
init|=
operator|new
name|String
index|[
name|authors
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|authors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|authors_abrv
index|[
name|i
index|]
operator|=
name|getAbbreviation
argument_list|(
name|authors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|//Faz o merge em um "unico string" usando " and "
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|authors
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|authors_abrv
index|[
name|i
index|]
operator|+
literal|" and "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|authors_abrv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|String
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//	System.out.println(e);
comment|//System.exit(-1);
block|}
return|return
name|s
return|;
block|}
comment|/** 	 * Method that verifies if the author names are in the Last First format. 	 *  	 * @param authors List of author or editor names. 	 * @throws Exception 	 */
DECL|method|verifyProperFormat (String[] authors)
specifier|private
name|void
name|verifyProperFormat
parameter_list|(
name|String
index|[]
name|authors
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|authors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//If the name contains a space, but does not have the comma it is not in the
comment|// appropriate format.
if|if
condition|(
operator|(
name|authors
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|authors
index|[
name|i
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|)
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|(
literal|"Error: names must be rearranged in Last, First format before formatted with AuthorLastFirstAbbreviator"
argument_list|)
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/** 	 *  	 * Abbreviates all but the last name of the author. 	 *  	 * @param string 	 * @return 	 */
DECL|method|getAbbreviation (String string)
specifier|private
name|String
name|getAbbreviation
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|String
index|[]
name|author
init|=
name|string
operator|.
name|split
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
comment|// If there is no comma in the name, we return it as it is:
if|if
condition|(
name|author
operator|.
name|length
operator|<
literal|2
condition|)
return|return
name|string
return|;
name|char
name|c
decl_stmt|;
name|String
name|s
decl_stmt|;
comment|//Gets the name:
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
name|author
index|[
literal|0
index|]
operator|+
literal|", "
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|author
index|[
literal|1
index|]
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
comment|//Its a simple name like van Something, Someone or  Something, Someone:
name|c
operator|=
name|author
index|[
literal|1
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//			System.out.println("Char c: " + c + " Name: " + author[1]);
name|sb
operator|.
name|append
argument_list|(
name|c
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Its a "complex" name like van Something, Someone Something
name|String
index|[]
name|nameParts
init|=
name|author
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nameParts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|=
name|nameParts
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//			System.out.println("Char c: " + c + " Name: " + nameParts[i]);
name|sb
operator|.
name|append
argument_list|(
name|c
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Replaces each "part of the name" for the corresponding Letter Dot Space format:
name|s
operator|=
operator|new
name|String
argument_list|(
name|sb
argument_list|)
expr_stmt|;
comment|//System.out.println("The Abbreviated name is: " + s);
return|return
name|s
return|;
block|}
block|}
end_class

end_unit

