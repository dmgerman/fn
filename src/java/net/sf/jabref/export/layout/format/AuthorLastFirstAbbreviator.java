begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.export.layout.format
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|LayoutFormatter
import|;
end_import

begin_comment
comment|/**  * Uses as input the fields (author or editor) in the LastFirst format.  *   * This formater enables to abbreviate the authors name in the following way:  *   * Ex: Someone, Van Something will be abbreviated as Someone, V.S.  *   * @author Carlos Silla  * @author Christopher Oezbek<oezi@oezi.de>  *   * @version 1.0 Created on 12/10/2004  * @version 1.1 Fixed bug  *          http://sourceforge.net/tracker/index.php?func=detail&aid=1466924&group_id=92314&atid=600306  */
end_comment

begin_class
DECL|class|AuthorLastFirstAbbreviator
specifier|public
class|class
name|AuthorLastFirstAbbreviator
implements|implements
name|LayoutFormatter
block|{
comment|/** 	 * @see net.sf.jabref.export.layout.LayoutFormatter#format(java.lang.String) 	 */
DECL|method|format (String fieldText)
specifier|public
name|String
name|format
parameter_list|(
name|String
name|fieldText
parameter_list|)
block|{
comment|/**          * This formatter is a duplicate of AuthorAbbreviator, so we simply          * call that one.          *          * TODO: Note that this makes the remaining methods in this formatter obsolete.           */
return|return
operator|(
operator|new
name|AuthorAbbreviator
argument_list|()
operator|)
operator|.
name|format
argument_list|(
name|fieldText
argument_list|)
return|;
block|}
comment|/** 	 * Abbreviates the names in the Last, First or Last, Jr, First format. 	 *  	 * @param authors 	 *            List of authors. 	 * @return The abbreviated names. 	 */
DECL|method|getAbbreviations (String[] authors)
specifier|private
name|String
name|getAbbreviations
parameter_list|(
name|String
index|[]
name|authors
parameter_list|)
block|{
if|if
condition|(
name|authors
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|""
return|;
if|if
condition|(
operator|!
name|isProperFormat
argument_list|(
name|authors
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Author names must be formatted \"Last, First\" or \"Last, Jr., First\" before formatting with AuthorLastFirstAbbreviator"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|authors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|authors
index|[
name|i
index|]
operator|=
name|getAbbreviation
argument_list|(
name|authors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|authors
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|authors
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|" and "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|authors
index|[
name|authors
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * Method that verifies if the author names are in the Last, First or Last, 	 * Jr, First format. 	 *  	 * If the name contains a space, but does not have the comma it is not in 	 * the appropriate format. 	 *  	 * @param authors 	 *            List of authors to verify 	 */
DECL|method|isProperFormat (String[] authors)
specifier|private
name|boolean
name|isProperFormat
parameter_list|(
name|String
index|[]
name|authors
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|authors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|authors
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|authors
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Abbreviates all first names of the author. 	 *  	 * @param author 	 * @return 	 */
DECL|method|getAbbreviation (String author)
specifier|private
name|String
name|getAbbreviation
parameter_list|(
name|String
name|author
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|author
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|last
decl_stmt|,
name|first
decl_stmt|;
switch|switch
condition|(
name|parts
operator|.
name|length
condition|)
block|{
case|case
literal|1
case|:
comment|// If there is no comma in the name, we return it as it is
return|return
name|author
return|;
case|case
literal|2
case|:
name|last
operator|=
name|parts
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
name|first
operator|=
name|parts
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|last
operator|=
name|parts
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// jr = parts[1];
name|first
operator|=
name|parts
index|[
literal|2
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Authorname contained 3 or more commas"
argument_list|)
throw|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|String
index|[]
name|firstNames
init|=
name|first
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|firstNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|firstNames
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|firstNames
operator|.
name|length
operator|-
literal|1
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

