begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|CaretEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|CaretListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|AutoCompleteListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|BasicSearch
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|SearchExpression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|SearchExpressionParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|SearchMatcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|SearchResultsDialog
import|;
end_import

begin_class
DECL|class|SearchManager2
specifier|public
class|class
name|SearchManager2
extends|extends
name|SidePaneComponent
implements|implements
name|ActionListener
implements|,
name|KeyListener
implements|,
name|ItemListener
implements|,
name|CaretListener
implements|,
name|ErrorMessageDisplay
block|{
DECL|field|frame
specifier|private
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|gbl
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
DECL|field|incSearcher
name|IncrementalSearcher
name|incSearcher
decl_stmt|;
DECL|field|searchDialog
name|SearchResultsDialog
name|searchDialog
init|=
literal|null
decl_stmt|;
DECL|field|autoCompleteListener
name|AutoCompleteListener
name|autoCompleteListener
init|=
literal|null
decl_stmt|;
comment|/** 	 * subscribed Objects 	 */
DECL|field|listeners
specifier|private
name|Vector
argument_list|<
name|SearchTextListener
argument_list|>
name|listeners
init|=
operator|new
name|Vector
argument_list|<
name|SearchTextListener
argument_list|>
argument_list|()
decl_stmt|;
comment|//private JabRefFrame frame;
DECL|field|searchField
specifier|private
name|JTextField
name|searchField
init|=
operator|new
name|JTextField
argument_list|(
literal|""
argument_list|,
literal|12
argument_list|)
decl_stmt|;
DECL|field|settings
specifier|private
name|JPopupMenu
name|settings
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|openset
specifier|private
name|JButton
name|openset
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Settings"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|escape
specifier|private
name|JButton
name|escape
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Clear"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|help
specifier|private
name|JButton
name|help
init|=
operator|new
name|JButton
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"help"
argument_list|)
argument_list|)
decl_stmt|;
comment|/** This button's text will be set later. */
DECL|field|search
specifier|private
name|JButton
name|search
init|=
operator|new
name|JButton
argument_list|()
decl_stmt|;
DECL|field|searchReq
DECL|field|searchOpt
DECL|field|searchGen
specifier|private
name|JCheckBoxMenuItem
name|searchReq
decl_stmt|,
name|searchOpt
decl_stmt|,
name|searchGen
decl_stmt|,
DECL|field|searchAll
DECL|field|caseSensitive
DECL|field|regExpSearch
DECL|field|highLightWords
DECL|field|searchAutoComplete
name|searchAll
decl_stmt|,
name|caseSensitive
decl_stmt|,
name|regExpSearch
decl_stmt|,
name|highLightWords
decl_stmt|,
name|searchAutoComplete
decl_stmt|;
DECL|field|increment
DECL|field|floatSearch
DECL|field|hideSearch
DECL|field|showResultsInDialog
specifier|private
name|JRadioButton
name|increment
decl_stmt|,
name|floatSearch
decl_stmt|,
name|hideSearch
decl_stmt|,
name|showResultsInDialog
decl_stmt|,
DECL|field|searchAllBases
name|searchAllBases
decl_stmt|;
DECL|field|select
specifier|private
name|JCheckBoxMenuItem
name|select
decl_stmt|;
DECL|field|types
specifier|private
name|ButtonGroup
name|types
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
DECL|field|incSearch
DECL|field|startedFloatSearch
DECL|field|startedFilterSearch
specifier|private
name|boolean
name|incSearch
init|=
literal|false
decl_stmt|,
name|startedFloatSearch
init|=
literal|false
decl_stmt|,
name|startedFilterSearch
init|=
literal|false
decl_stmt|;
DECL|field|incSearchPos
specifier|private
name|int
name|incSearchPos
init|=
operator|-
literal|1
decl_stmt|;
comment|// To keep track of where we are in
comment|// an incremental search. -1 means
comment|// that the search is inactive.
DECL|method|SearchManager2 (JabRefFrame frame, SidePaneManager manager)
specifier|public
name|SearchManager2
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|SidePaneManager
name|manager
parameter_list|)
block|{
name|super
argument_list|(
name|manager
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"search"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|incSearcher
operator|=
operator|new
name|IncrementalSearcher
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
comment|//setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.magenta));
name|searchReq
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search required fields"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchReq"
argument_list|)
argument_list|)
expr_stmt|;
name|searchOpt
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search optional fields"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchOpt"
argument_list|)
argument_list|)
expr_stmt|;
name|searchGen
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search general fields"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchGen"
argument_list|)
argument_list|)
expr_stmt|;
name|searchAll
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search all fields"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchAll"
argument_list|)
argument_list|)
expr_stmt|;
name|regExpSearch
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Use regular expressions"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"regExpSearch"
argument_list|)
argument_list|)
expr_stmt|;
name|increment
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Incremental"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|floatSearch
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Float"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hideSearch
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Filter"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|showResultsInDialog
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show results in dialog"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|searchAllBases
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Global search"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchAllBases"
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|increment
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|floatSearch
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|hideSearch
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|showResultsInDialog
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|searchAllBases
argument_list|)
expr_stmt|;
name|select
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Select matches"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|increment
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Incremental search"
argument_list|)
argument_list|)
expr_stmt|;
name|floatSearch
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Gray out non-matching entries"
argument_list|)
argument_list|)
expr_stmt|;
name|hideSearch
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Hide non-matching entries"
argument_list|)
argument_list|)
expr_stmt|;
name|showResultsInDialog
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show search results in a window"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add an item listener that makes sure we only listen for key events
comment|// when incremental search is turned on.
name|increment
operator|.
name|addItemListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|floatSearch
operator|.
name|addItemListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|hideSearch
operator|.
name|addItemListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|showResultsInDialog
operator|.
name|addItemListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Add the global focus listener, so a menu item can see if this field was focused when
comment|// an action was called.
name|searchField
operator|.
name|addFocusListener
argument_list|(
name|Globals
operator|.
name|focusListener
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchAll
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|searchReq
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|searchOpt
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|searchGen
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|searchAll
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|boolean
name|state
init|=
operator|!
name|searchAll
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|searchReq
operator|.
name|setEnabled
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|searchOpt
operator|.
name|setEnabled
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|searchGen
operator|.
name|setEnabled
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|caseSensitive
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Case sensitive"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"caseSensitiveSearch"
argument_list|)
argument_list|)
expr_stmt|;
name|highLightWords
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Highlight Words"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"highLightWords"
argument_list|)
argument_list|)
expr_stmt|;
name|searchAutoComplete
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Autocomplete names"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchAutoComplete"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|select
argument_list|)
expr_stmt|;
comment|// 2005.03.29, trying to remove field category searches, to simplify
comment|// search usability.
comment|//settings.addSeparator();
comment|//settings.add(searchReq);
comment|//settings.add(searchOpt);
comment|//settings.add(searchGen);
comment|//settings.addSeparator();
comment|//settings.add(searchAll);
comment|// ---------------------------------------------------------------
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|caseSensitive
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|regExpSearch
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|highLightWords
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|searchAutoComplete
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|addCaretListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|search
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|addFocusListener
argument_list|(
operator|new
name|FocusAdapter
argument_list|()
block|{
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|increment
operator|.
name|isSelected
argument_list|()
condition|)
name|searchField
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
name|incSearch
operator|=
literal|false
expr_stmt|;
name|incSearchPos
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Reset incremental
comment|// search. This makes the
comment|// incremental search reset
comment|// once the user moves focus to
comment|// somewhere else.
if|if
condition|(
name|increment
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|//searchField.setText("");
comment|//System.out.println("focuslistener");
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|escape
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|escape
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// enabled after searching
name|openset
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|isVisible
argument_list|()
condition|)
block|{
comment|//System.out.println("oee");
comment|//settings.setVisible(false);
block|}
else|else
block|{
name|JButton
name|src
init|=
operator|(
name|JButton
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|settings
operator|.
name|show
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|openset
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|searchAutoComplete
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchAutoComplete"
argument_list|,
name|searchAutoComplete
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SearchManager2
operator|.
name|this
operator|.
name|frame
operator|.
name|basePanel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SearchManager2
operator|.
name|this
operator|.
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|updateSearchManager
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|Insets
name|margin
init|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|//search.setMargin(margin);
name|escape
operator|.
name|setMargin
argument_list|(
name|margin
argument_list|)
expr_stmt|;
name|openset
operator|.
name|setMargin
argument_list|(
name|margin
argument_list|)
expr_stmt|;
name|int
name|butSize
init|=
name|help
operator|.
name|getIcon
argument_list|()
operator|.
name|getIconHeight
argument_list|()
operator|+
literal|5
decl_stmt|;
name|Dimension
name|butDim
init|=
operator|new
name|Dimension
argument_list|(
name|butSize
argument_list|,
name|butSize
argument_list|)
decl_stmt|;
name|help
operator|.
name|setPreferredSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|help
operator|.
name|setMinimumSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|help
operator|.
name|setMargin
argument_list|(
name|margin
argument_list|)
expr_stmt|;
name|help
operator|.
name|addActionListener
argument_list|(
operator|new
name|HelpAction
argument_list|(
name|Globals
operator|.
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|searchHelp
argument_list|,
literal|"Help"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Select the last used mode of search:
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"incrementS"
argument_list|)
condition|)
name|increment
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"floatSearch"
argument_list|)
condition|)
name|floatSearch
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"showSearchInDialog"
argument_list|)
condition|)
name|showResultsInDialog
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchAllBases"
argument_list|)
condition|)
name|searchAllBases
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|hideSearch
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JPanel
name|main
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|main
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
comment|//SidePaneHeader header = new SidePaneHeader("Search", GUIGlobals.searchIconFile, this);
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
comment|//con.insets = new Insets(0, 0, 2,  0);
comment|//gbl.setConstraints(header, con);
comment|//add(header);
comment|//con.insets = new Insets(0, 0, 0,  0);
name|gbl
operator|.
name|setConstraints
argument_list|(
name|searchField
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|searchField
argument_list|)
expr_stmt|;
comment|//con.gridwidth = 1;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|search
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|escape
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|escape
argument_list|)
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|increment
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|increment
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|floatSearch
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|floatSearch
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|hideSearch
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|hideSearch
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|showResultsInDialog
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|showResultsInDialog
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|searchAllBases
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|searchAllBases
argument_list|)
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|JPanel
name|pan
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|GridBagLayout
name|gb
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|pan
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|pan
operator|.
name|setLayout
argument_list|(
name|gb
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|gb
operator|.
name|setConstraints
argument_list|(
name|openset
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|pan
operator|.
name|add
argument_list|(
name|openset
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|gb
operator|.
name|setConstraints
argument_list|(
name|help
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|pan
operator|.
name|add
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|main
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|setContent
argument_list|(
name|main
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Repeat incremental search"
argument_list|)
argument_list|,
literal|"repeat"
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"repeat"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|increment
operator|.
name|isSelected
argument_list|()
condition|)
name|repeatIncremental
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Clear search"
argument_list|)
argument_list|,
literal|"escape"
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"escape"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|hideAway
argument_list|()
expr_stmt|;
comment|//SearchManager2.this.actionPerformed(new ActionEvent(escape, 0, ""));
block|}
block|}
argument_list|)
expr_stmt|;
name|setSearchButtonSizes
argument_list|()
expr_stmt|;
name|updateSearchButtonText
argument_list|()
expr_stmt|;
block|}
DECL|method|setAutoCompleteListener (AutoCompleteListener listener)
specifier|public
name|void
name|setAutoCompleteListener
parameter_list|(
name|AutoCompleteListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|autoCompleteListener
operator|=
name|listener
expr_stmt|;
name|updateKeyListeners
argument_list|()
expr_stmt|;
block|}
comment|/**      * Add the correct key listeners to the search text field, depending on whether      * and autocomplete listener has been set and whether incremental search      * is selected.      */
DECL|method|updateKeyListeners ()
specifier|protected
name|void
name|updateKeyListeners
parameter_list|()
block|{
name|KeyListener
index|[]
name|listeners
init|=
name|searchField
operator|.
name|getKeyListeners
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|searchField
operator|.
name|removeKeyListener
argument_list|(
name|listeners
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|increment
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|searchField
operator|.
name|addKeyListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|searchAutoComplete
operator|.
name|isSelected
argument_list|()
operator|&&
name|autoCompleteListener
operator|!=
literal|null
condition|)
name|searchField
operator|.
name|addKeyListener
argument_list|(
name|autoCompleteListener
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Subscribe to the SearchListener and receive events, if the user searches for some thing. You 	 * will receive a list of words 	 *  	 * @param l 	 */
DECL|method|addSearchListener (SearchTextListener l)
specifier|public
name|void
name|addSearchListener
parameter_list|(
name|SearchTextListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|listeners
operator|.
name|contains
argument_list|(
name|l
argument_list|)
condition|)
return|return;
else|else
name|listeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
comment|//fire event for the new subscriber
name|l
operator|.
name|searchText
argument_list|(
name|getSearchwords
argument_list|(
name|searchField
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Remove object from the SearchListener 	 * @param l 	 */
DECL|method|removeSearchListener (SearchTextListener l)
specifier|public
name|void
name|removeSearchListener
parameter_list|(
name|SearchTextListener
name|l
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * parse the search string for valid words and return a list of words 	 * Like "The great Vikinger" will be ["The","great","Vikinger"]  	 *  	 * @param t 	 * @return 	 */
DECL|method|getSearchwords (String t)
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getSearchwords
parameter_list|(
name|String
name|t
parameter_list|)
block|{
comment|// for now ... just seperate words by whitespace
name|String
index|[]
name|strings
init|=
name|t
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|words
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|strings
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|words
operator|.
name|add
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|words
return|;
block|}
comment|/**      * Fires an event if a search was started / canceled      * @param t      */
DECL|method|fireSearchlistenerEvent (String t)
specifier|private
name|void
name|fireSearchlistenerEvent
parameter_list|(
name|String
name|t
parameter_list|)
block|{
comment|// parse the Search string to words
name|ArrayList
argument_list|<
name|String
argument_list|>
name|words
decl_stmt|;
if|if
condition|(
operator|(
name|t
operator|==
literal|null
operator|)
operator|||
operator|(
name|t
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|words
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|words
operator|=
name|getSearchwords
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|//fire an event for every listener
for|for
control|(
name|SearchTextListener
name|s
range|:
name|listeners
control|)
name|s
operator|.
name|searchText
argument_list|(
name|words
argument_list|)
expr_stmt|;
block|}
comment|/** force the search button to be large enough for      * the longer of the two texts */
DECL|method|setSearchButtonSizes ()
specifier|private
name|void
name|setSearchButtonSizes
parameter_list|()
block|{
name|search
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search Specified Field(s)"
argument_list|)
argument_list|)
expr_stmt|;
name|Dimension
name|size1
init|=
name|search
operator|.
name|getPreferredSize
argument_list|()
decl_stmt|;
name|search
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search All Fields"
argument_list|)
argument_list|)
expr_stmt|;
name|Dimension
name|size2
init|=
name|search
operator|.
name|getPreferredSize
argument_list|()
decl_stmt|;
name|size2
operator|.
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|size1
operator|.
name|width
argument_list|,
name|size2
operator|.
name|width
argument_list|)
expr_stmt|;
name|search
operator|.
name|setMinimumSize
argument_list|(
name|size2
argument_list|)
expr_stmt|;
name|search
operator|.
name|setPreferredSize
argument_list|(
name|size2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Instantiate the search dialog, unless it has already been instantiated:      */
DECL|method|instantiateSearchDialog ()
specifier|protected
name|void
name|instantiateSearchDialog
parameter_list|()
block|{
if|if
condition|(
name|searchDialog
operator|==
literal|null
condition|)
name|searchDialog
operator|=
operator|new
name|SearchResultsDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search results"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updatePrefs ()
specifier|public
name|void
name|updatePrefs
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchReq"
argument_list|,
name|searchReq
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchOpt"
argument_list|,
name|searchOpt
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchGen"
argument_list|,
name|searchGen
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchAll"
argument_list|,
name|searchAll
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"incrementS"
argument_list|,
name|increment
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"selectS"
argument_list|,
name|select
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"floatSearch"
argument_list|,
name|floatSearch
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"caseSensitiveSearch"
argument_list|,
name|caseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"regExpSearch"
argument_list|,
name|regExpSearch
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"highLightWords"
argument_list|,
name|highLightWords
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"showSearchInDialog"
argument_list|,
name|showResultsInDialog
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchAllBases"
argument_list|,
name|searchAllBases
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|startIncrementalSearch ()
specifier|public
name|void
name|startIncrementalSearch
parameter_list|()
block|{
name|increment
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|//System.out.println("startIncrementalSearch");
name|searchField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
comment|/**      * Clears and focuses the search field if it is not      * focused. Otherwise, cycles to the next search type.      */
DECL|method|startSearch ()
specifier|public
name|void
name|startSearch
parameter_list|()
block|{
if|if
condition|(
name|increment
operator|.
name|isSelected
argument_list|()
operator|&&
name|incSearch
condition|)
block|{
name|repeatIncremental
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|searchField
operator|.
name|hasFocus
argument_list|()
condition|)
block|{
comment|//searchField.setText("");
name|searchField
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|searchField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|increment
operator|.
name|isSelected
argument_list|()
condition|)
name|floatSearch
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|floatSearch
operator|.
name|isSelected
argument_list|()
condition|)
name|hideSearch
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|hideSearch
operator|.
name|isSelected
argument_list|()
condition|)
name|showResultsInDialog
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|showResultsInDialog
operator|.
name|isSelected
argument_list|()
condition|)
name|searchAllBases
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
block|{
name|increment
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|increment
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|increment
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|searchField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clearSearchLater ()
specifier|private
name|void
name|clearSearchLater
parameter_list|()
block|{
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|clearSearch
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// do this after the button action is over
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|fireSearchlistenerEvent
argument_list|(
name|searchField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|escape
condition|)
block|{
name|incSearch
operator|=
literal|false
expr_stmt|;
name|clearSearchLater
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|searchField
operator|)
operator|||
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|search
operator|)
operator|)
operator|&&
operator|!
name|increment
operator|.
name|isSelected
argument_list|()
operator|&&
operator|(
name|panel
operator|!=
literal|null
operator|)
condition|)
block|{
name|updatePrefs
argument_list|()
expr_stmt|;
comment|// Make sure the user's choices are recorded.
if|if
condition|(
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// An empty search field should cause the search to be cleared.
name|clearSearchLater
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Setup search parameters common to both normal and float.
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|searchOptions
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|searchOptions
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
name|searchField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|SearchRuleSet
name|searchRules
init|=
operator|new
name|SearchRuleSet
argument_list|()
decl_stmt|;
name|SearchRule
name|rule1
decl_stmt|;
name|rule1
operator|=
operator|new
name|BasicSearch
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"caseSensitiveSearch"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"regExpSearch"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// this searches specified fields if specified,
comment|// and all fields otherwise
name|rule1
operator|=
operator|new
name|SearchExpression
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|,
name|searchOptions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// we'll do a search in all fields
block|}
name|searchRules
operator|.
name|addRule
argument_list|(
name|rule1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|searchRules
operator|.
name|validateSearchStrings
argument_list|(
name|searchOptions
argument_list|)
condition|)
block|{
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search failed: illegal search expression"
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
return|return;
block|}
name|SearchWorker
name|worker
init|=
operator|new
name|SearchWorker
argument_list|(
name|searchRules
argument_list|,
name|searchOptions
argument_list|)
decl_stmt|;
name|worker
operator|.
name|getWorker
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
name|worker
operator|.
name|getCallBack
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
name|escape
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SearchWorker
class|class
name|SearchWorker
extends|extends
name|AbstractWorker
block|{
DECL|field|rules
specifier|private
name|SearchRuleSet
name|rules
decl_stmt|;
DECL|field|searchTerm
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|searchTerm
decl_stmt|;
DECL|field|hits
name|int
name|hits
init|=
literal|0
decl_stmt|;
DECL|method|SearchWorker (SearchRuleSet rules, Hashtable<String, String> searchTerm)
specifier|public
name|SearchWorker
parameter_list|(
name|SearchRuleSet
name|rules
parameter_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|searchTerm
parameter_list|)
block|{
name|this
operator|.
name|rules
operator|=
name|rules
expr_stmt|;
name|this
operator|.
name|searchTerm
operator|=
name|searchTerm
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|searchAllBases
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// Search only the current database:
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|boolean
name|hit
init|=
name|rules
operator|.
name|applyRule
argument_list|(
name|searchTerm
argument_list|,
name|entry
argument_list|)
operator|>
literal|0
decl_stmt|;
name|entry
operator|.
name|setSearchHit
argument_list|(
name|hit
argument_list|)
expr_stmt|;
if|if
condition|(
name|hit
condition|)
name|hits
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Search all databases:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|frame
operator|.
name|getTabbedPane
argument_list|()
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BasePanel
name|p
init|=
name|frame
operator|.
name|baseAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|p
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|boolean
name|hit
init|=
name|rules
operator|.
name|applyRule
argument_list|(
name|searchTerm
argument_list|,
name|entry
argument_list|)
operator|>
literal|0
decl_stmt|;
name|entry
operator|.
name|setSearchHit
argument_list|(
name|hit
argument_list|)
expr_stmt|;
if|if
condition|(
name|hit
condition|)
name|hits
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Searched database. Number of hits"
argument_list|)
operator|+
literal|": "
operator|+
name|hits
argument_list|)
expr_stmt|;
comment|// Show the result in the chosen way:
if|if
condition|(
name|searchAllBases
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// Search all databases. This means we need to use the search results dialog.
comment|// Turn off other search mode, if activated:
if|if
condition|(
name|startedFloatSearch
condition|)
block|{
name|panel
operator|.
name|mainTable
operator|.
name|stopShowingFloatSearch
argument_list|()
expr_stmt|;
name|startedFloatSearch
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|startedFilterSearch
condition|)
block|{
name|panel
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
name|startedFilterSearch
operator|=
literal|false
expr_stmt|;
block|}
comment|// Make sure the search dialog is instantiated and cleared:
name|instantiateSearchDialog
argument_list|()
expr_stmt|;
name|searchDialog
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|frame
operator|.
name|getTabbedPane
argument_list|()
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BasePanel
name|p
init|=
name|frame
operator|.
name|baseAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|p
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|isSearchHit
argument_list|()
condition|)
name|searchDialog
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|searchDialog
operator|.
name|selectFirstEntry
argument_list|()
expr_stmt|;
name|searchDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|showResultsInDialog
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// Turn off other search mode, if activated:
if|if
condition|(
name|startedFloatSearch
condition|)
block|{
name|panel
operator|.
name|mainTable
operator|.
name|stopShowingFloatSearch
argument_list|()
expr_stmt|;
name|startedFloatSearch
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|startedFilterSearch
condition|)
block|{
name|panel
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
name|startedFilterSearch
operator|=
literal|false
expr_stmt|;
block|}
comment|// Make sure the search dialog is instantiated and cleared:
name|instantiateSearchDialog
argument_list|()
expr_stmt|;
name|searchDialog
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|isSearchHit
argument_list|()
condition|)
name|searchDialog
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|,
name|panel
argument_list|)
expr_stmt|;
block|}
name|searchDialog
operator|.
name|selectFirstEntry
argument_list|()
expr_stmt|;
name|searchDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hideSearch
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// Filtering search - removes non-hits from the table:
if|if
condition|(
name|startedFloatSearch
condition|)
block|{
name|panel
operator|.
name|mainTable
operator|.
name|stopShowingFloatSearch
argument_list|()
expr_stmt|;
name|startedFloatSearch
operator|=
literal|false
expr_stmt|;
block|}
name|startedFilterSearch
operator|=
literal|true
expr_stmt|;
name|panel
operator|.
name|setSearchMatcher
argument_list|(
name|SearchMatcher
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Float search - floats hits to the top of the table:
if|if
condition|(
name|startedFilterSearch
condition|)
block|{
name|panel
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
name|startedFilterSearch
operator|=
literal|false
expr_stmt|;
block|}
name|startedFloatSearch
operator|=
literal|true
expr_stmt|;
name|panel
operator|.
name|mainTable
operator|.
name|showFloatSearch
argument_list|(
name|SearchMatcher
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
comment|// Afterwards, select all text in the search field.
name|searchField
operator|.
name|select
argument_list|(
literal|0
argument_list|,
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|clearSearch ()
specifier|public
name|void
name|clearSearch
parameter_list|()
block|{
if|if
condition|(
name|panel
operator|.
name|isShowingFloatSearch
argument_list|()
condition|)
block|{
name|startedFloatSearch
operator|=
literal|false
expr_stmt|;
name|panel
operator|.
name|mainTable
operator|.
name|stopShowingFloatSearch
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|panel
operator|.
name|isShowingFilterSearch
argument_list|()
condition|)
block|{
name|startedFilterSearch
operator|=
literal|false
expr_stmt|;
name|panel
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
block|}
comment|// clear search means that nothing is searched for
comment|// even if a word is written in the text field,
comment|// nothing should be highlighted
name|fireSearchlistenerEvent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// disable "Cancel" button to signal this to the user
name|escape
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|itemStateChanged (ItemEvent e)
specifier|public
name|void
name|itemStateChanged
parameter_list|(
name|ItemEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|increment
condition|)
block|{
if|if
condition|(
name|startedFilterSearch
operator|||
name|startedFloatSearch
condition|)
block|{
name|clearSearch
argument_list|()
expr_stmt|;
block|}
name|updateSearchButtonText
argument_list|()
expr_stmt|;
comment|// Make sure the correct key listener is activated:
name|updateKeyListeners
argument_list|()
expr_stmt|;
block|}
else|else
comment|/*if (e.getSource() == normal)*/
block|{
name|updateSearchButtonText
argument_list|()
expr_stmt|;
comment|// If this search type is disabled, remove reordering from
comment|// all databases.
comment|/*if ((panel != null)&& increment.isSelected()) {             clearSearch();         } */
block|}
block|}
DECL|method|repeatIncremental ()
specifier|private
name|void
name|repeatIncremental
parameter_list|()
block|{
name|incSearchPos
operator|++
expr_stmt|;
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
name|goIncremental
argument_list|()
expr_stmt|;
block|}
comment|/**      * Used for incremental search. Only activated when incremental      * is selected.      *      * The variable incSearchPos keeps track of which entry was last      * checked.      */
DECL|method|keyTyped (KeyEvent e)
specifier|public
name|void
name|keyTyped
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isControlDown
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
name|goIncremental
argument_list|()
expr_stmt|;
block|}
DECL|method|goIncremental ()
specifier|private
name|void
name|goIncremental
parameter_list|()
block|{
name|incSearch
operator|=
literal|true
expr_stmt|;
name|escape
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|text
init|=
name|searchField
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|incSearchPos
operator|>=
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryCount
argument_list|()
condition|)
block|{
name|panel
operator|.
name|output
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' : "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Incremental search failed. Repeat to search from top."
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|incSearchPos
operator|=
operator|-
literal|1
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
return|return;
if|if
condition|(
name|incSearchPos
operator|<
literal|0
condition|)
name|incSearchPos
operator|=
literal|0
expr_stmt|;
name|BibtexEntry
name|be
init|=
name|panel
operator|.
name|mainTable
operator|.
name|getEntryAt
argument_list|(
name|incSearchPos
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|incSearcher
operator|.
name|search
argument_list|(
name|text
argument_list|,
name|be
argument_list|)
condition|)
block|{
name|incSearchPos
operator|++
expr_stmt|;
if|if
condition|(
name|incSearchPos
operator|<
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryCount
argument_list|()
condition|)
name|be
operator|=
name|panel
operator|.
name|mainTable
operator|.
name|getEntryAt
argument_list|(
name|incSearchPos
argument_list|)
expr_stmt|;
else|else
block|{
name|panel
operator|.
name|output
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' : "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Incremental search failed. Repeat to search from top."
argument_list|)
argument_list|)
expr_stmt|;
name|incSearchPos
operator|=
operator|-
literal|1
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|incSearchPos
operator|>=
literal|0
condition|)
block|{
name|panel
operator|.
name|selectSingleEntry
argument_list|(
name|incSearchPos
argument_list|)
expr_stmt|;
name|panel
operator|.
name|output
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"found"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|componentClosing ()
specifier|public
name|void
name|componentClosing
parameter_list|()
block|{
name|frame
operator|.
name|searchToggle
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|startedFilterSearch
operator|||
name|startedFloatSearch
condition|)
name|clearSearch
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|keyPressed (KeyEvent e)
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{}
DECL|method|keyReleased (KeyEvent e)
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{}
DECL|method|caretUpdate (CaretEvent e)
specifier|public
name|void
name|caretUpdate
parameter_list|(
name|CaretEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|searchField
condition|)
block|{
name|updateSearchButtonText
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Updates the text on the search button to reflect       * the type of search that will happen on click. */
DECL|method|updateSearchButtonText ()
specifier|private
name|void
name|updateSearchButtonText
parameter_list|()
block|{
name|search
operator|.
name|setText
argument_list|(
operator|!
name|increment
operator|.
name|isSelected
argument_list|()
operator|&&
name|SearchExpressionParser
operator|.
name|checkSyntax
argument_list|(
name|searchField
operator|.
name|getText
argument_list|()
argument_list|,
name|caseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|regExpSearch
operator|.
name|isSelected
argument_list|()
argument_list|)
operator|!=
literal|null
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search Specified Field(s)"
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search All Fields"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is required by the ErrorMessageDisplay interface, and lets this class      * serve as a callback for regular expression exceptions happening in DatabaseSearch.      * @param errorMessage      */
DECL|method|reportError (String errorMessage)
specifier|public
name|void
name|reportError
parameter_list|(
name|String
name|errorMessage
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|panel
argument_list|,
name|errorMessage
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is required by the ErrorMessageDisplay interface, and lets this class      * serve as a callback for regular expression exceptions happening in DatabaseSearch.      * @param errorMessage      */
DECL|method|reportError (String errorMessage, Exception exception)
specifier|public
name|void
name|reportError
parameter_list|(
name|String
name|errorMessage
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
name|reportError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|setActiveBasePanel (BasePanel panel)
specifier|public
name|void
name|setActiveBasePanel
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|super
operator|.
name|setActiveBasePanel
argument_list|(
name|panel
argument_list|)
expr_stmt|;
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
name|escape
operator|.
name|setEnabled
argument_list|(
name|panel
operator|.
name|isShowingFloatSearch
argument_list|()
operator|||
name|panel
operator|.
name|isShowingFilterSearch
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|escape
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

