begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Morten O. Alver, Nizar N. Batada  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|label
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|FileActions
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableInsertEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableInsertString
import|;
end_import

begin_comment
comment|/**  * The main window of the application.  */
end_comment

begin_class
DECL|class|JabRefFrame
specifier|public
class|class
name|JabRefFrame
extends|extends
name|JFrame
block|{
DECL|field|ths
name|JabRefFrame
name|ths
init|=
name|this
decl_stmt|;
DECL|field|prefs
name|JabRefPreferences
name|prefs
init|=
operator|new
name|JabRefPreferences
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|tabbedPane
name|JTabbedPane
name|tabbedPane
init|=
operator|new
name|JTabbedPane
argument_list|()
decl_stmt|;
DECL|field|tlb
name|JToolBar
name|tlb
init|=
operator|new
name|JToolBar
argument_list|()
decl_stmt|;
DECL|field|mb
name|JMenuBar
name|mb
init|=
operator|new
name|JMenuBar
argument_list|()
decl_stmt|;
DECL|field|gbl
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
DECL|field|statusLine
name|JLabel
name|statusLine
init|=
operator|new
name|JLabel
argument_list|(
literal|""
argument_list|,
name|SwingConstants
operator|.
name|LEFT
argument_list|)
decl_stmt|,
DECL|field|statusLabel
name|statusLabel
init|=
operator|new
name|JLabel
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Status"
argument_list|)
operator|+
literal|":"
argument_list|,
name|SwingConstants
operator|.
name|LEFT
argument_list|)
decl_stmt|;
comment|//SearchManager searchManager  = new SearchManager(ths, prefs);
DECL|field|fileHistory
name|FileHistory
name|fileHistory
init|=
operator|new
name|FileHistory
argument_list|(
name|prefs
argument_list|,
name|this
argument_list|)
decl_stmt|;
DECL|field|labelMaker
name|LabelMaker
name|labelMaker
decl_stmt|;
DECL|field|fileToOpen
name|File
name|fileToOpen
init|=
literal|null
decl_stmt|;
comment|// The help window.
DECL|field|helpDiag
specifier|public
name|HelpDialog
name|helpDiag
init|=
operator|new
name|HelpDialog
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// Here we instantiate menu/toolbar actions. Actions regarding
comment|// the currently open database are defined as a GeneralAction
comment|// with a unique command string. This causes the appropriate
comment|// BasePanel's runCommand() method to be called with that command.
comment|// Note: GeneralAction's constructor automatically gets translations
comment|// for the name and message strings.
name|AbstractAction
DECL|field|open
name|open
init|=
operator|new
name|OpenDatabaseAction
argument_list|()
decl_stmt|,
DECL|field|close
name|close
init|=
operator|new
name|CloseDatabaseAction
argument_list|()
decl_stmt|,
DECL|field|quit
name|quit
init|=
operator|new
name|CloseAction
argument_list|()
decl_stmt|,
DECL|field|selectKeys
name|selectKeys
init|=
operator|new
name|SelectKeysAction
argument_list|()
decl_stmt|,
DECL|field|newDatabaseAction
name|newDatabaseAction
init|=
operator|new
name|NewDatabaseAction
argument_list|()
decl_stmt|,
DECL|field|help
name|help
init|=
operator|new
name|HelpAction
argument_list|(
literal|"JabRef help"
argument_list|,
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|baseFrameHelp
argument_list|,
literal|"JabRef help"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Help"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|contents
name|contents
init|=
operator|new
name|HelpAction
argument_list|(
literal|"Help contents"
argument_list|,
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|helpContents
argument_list|,
literal|"Help contents"
argument_list|,
name|GUIGlobals
operator|.
name|helpContentsIconFile
argument_list|)
decl_stmt|,
DECL|field|about
name|about
init|=
operator|new
name|HelpAction
argument_list|(
literal|"About JabRef"
argument_list|,
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|aboutPage
argument_list|,
literal|"About JabRef"
argument_list|)
decl_stmt|,
DECL|field|save
name|save
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"save"
argument_list|,
literal|"Save database"
argument_list|,
literal|"Save database"
argument_list|,
name|GUIGlobals
operator|.
name|saveIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Save"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|saveAs
name|saveAs
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"saveAs"
argument_list|,
literal|"Save database as ..."
argument_list|,
literal|"Save database as ..."
argument_list|,
name|GUIGlobals
operator|.
name|saveAsIconFile
argument_list|)
decl_stmt|,
DECL|field|nextTab
name|nextTab
init|=
operator|new
name|ChangeTabAction
argument_list|(
literal|true
argument_list|)
decl_stmt|,
DECL|field|prevTab
name|prevTab
init|=
operator|new
name|ChangeTabAction
argument_list|(
literal|false
argument_list|)
decl_stmt|,
DECL|field|undo
name|undo
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"undo"
argument_list|,
literal|"Undo"
argument_list|,
literal|"Undo"
argument_list|,
name|GUIGlobals
operator|.
name|undoIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Undo"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|redo
name|redo
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"redo"
argument_list|,
literal|"Redo"
argument_list|,
literal|"Redo"
argument_list|,
name|GUIGlobals
operator|.
name|redoIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Redo"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|cut
name|cut
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"cut"
argument_list|,
literal|"Cut"
argument_list|,
literal|"Cut"
argument_list|,
name|GUIGlobals
operator|.
name|cutIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Cut"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|delete
name|delete
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"delete"
argument_list|,
literal|"Delete"
argument_list|,
literal|"Delete"
argument_list|,
name|GUIGlobals
operator|.
name|removeIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Delete"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|copy
name|copy
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"copy"
argument_list|,
literal|"Copy"
argument_list|,
literal|"Copy"
argument_list|,
name|GUIGlobals
operator|.
name|copyIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Copy"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|paste
name|paste
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"paste"
argument_list|,
literal|"Paste"
argument_list|,
literal|"Paste"
argument_list|,
name|GUIGlobals
operator|.
name|pasteIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Paste"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|saveSessionAction
name|saveSessionAction
init|=
operator|new
name|SaveSessionAction
argument_list|()
decl_stmt|,
DECL|field|loadSessionAction
name|loadSessionAction
init|=
operator|new
name|LoadSessionAction
argument_list|()
decl_stmt|,
DECL|field|incrementalSearch
name|incrementalSearch
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"incSearch"
argument_list|,
literal|"Incremental search"
argument_list|,
literal|"Start incremental search"
argument_list|,
name|GUIGlobals
operator|.
name|searchIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Incremental search"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|normalSearch
name|normalSearch
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"search"
argument_list|,
literal|"Search"
argument_list|,
literal|"Start"
argument_list|,
name|GUIGlobals
operator|.
name|searchIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Search"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|fetchMedline
name|fetchMedline
init|=
operator|new
name|FetchMedlineAction
argument_list|()
decl_stmt|,
DECL|field|copyKey
name|copyKey
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"copyKey"
argument_list|,
literal|"Copy BibTeX key"
argument_list|)
decl_stmt|,
comment|//"Put a BibTeX reference to the selected entries on the clipboard",
DECL|field|copyCiteKey
name|copyCiteKey
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"copyCiteKey"
argument_list|,
literal|"Copy \\cite{BibTeX key}"
argument_list|,
comment|//"Put a BibTeX reference to the selected entries on the clipboard",
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Copy \\cite{BibTeX key}"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|mergeDatabaseAction
name|mergeDatabaseAction
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"mergeDatabase"
argument_list|,
literal|"Append database"
argument_list|,
literal|"Append contents from a BibTeX database into the currently viewed database"
argument_list|,
name|GUIGlobals
operator|.
name|openIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Open"
argument_list|)
argument_list|)
decl_stmt|,
comment|/*remove = new GeneralAction("remove", "Remove", "Remove selected entries", 	  GUIGlobals.removeIconFile),*/
DECL|field|selectAll
name|selectAll
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"selectAll"
argument_list|,
literal|"Select all"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Select all"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|replaceAll
name|replaceAll
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"replaceAll"
argument_list|,
literal|"Replace string"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Replace string"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|editPreamble
name|editPreamble
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"editPreamble"
argument_list|,
literal|"Edit preamble"
argument_list|,
literal|"Edit preamble"
argument_list|,
name|GUIGlobals
operator|.
name|preambleIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Edit preamble"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|editStrings
name|editStrings
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"editStrings"
argument_list|,
literal|"Edit strings"
argument_list|,
literal|"Edit strings"
argument_list|,
name|GUIGlobals
operator|.
name|stringsIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Edit strings"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|toggleGroups
name|toggleGroups
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"toggleGroups"
argument_list|,
literal|"Toggle groups interface"
argument_list|,
literal|"Toggle groups interface"
argument_list|,
name|GUIGlobals
operator|.
name|groupsIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Toggle groups"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|makeKeyAction
name|makeKeyAction
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"makeKey"
argument_list|,
literal|"Autogenerate BibTeX keys"
argument_list|,
literal|"Autogenerate BibTeX keys"
argument_list|,
name|GUIGlobals
operator|.
name|genKeyIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Autgenerate BibTeX keys"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|lyxPushAction
name|lyxPushAction
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"pushToLyX"
argument_list|,
literal|"Insert selected citations into LyX"
argument_list|,
literal|"push selection to lyx"
argument_list|,
name|GUIGlobals
operator|.
name|lyxIconFile
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Push To LyX"
argument_list|)
argument_list|)
decl_stmt|;
comment|/*setupSelector = new GeneralAction("setupSelector", "", "", 					  GUIGlobals.pasteIconFile, 					  prefs.getKey(")),*/
comment|// The menus for importing/appending other formats
DECL|field|importMenu
name|JMenu
name|importMenu
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import and append"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|importNewMenu
name|importNewMenu
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|exportMenu
name|exportMenu
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Export"
argument_list|)
argument_list|)
decl_stmt|;
comment|// The action for adding a new entry of unspecified type.
DECL|field|newEntryAction
name|NewEntryAction
name|newEntryAction
init|=
operator|new
name|NewEntryAction
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New entry"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|newSpecificEntryAction
name|NewEntryAction
index|[]
name|newSpecificEntryAction
init|=
operator|new
name|NewEntryAction
index|[]
block|{
operator|new
name|NewEntryAction
argument_list|(
literal|"article"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New article"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"book"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New book"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"phdthesis"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New phdthesis"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"inbook"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New inbook"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"mastersthesis"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New mastersthesis"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"proceedings"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New proceedings"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"inproceedings"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"incollection"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"booklet"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"manual"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"techreport"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"unpublished"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New unpublished"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"misc"
argument_list|)
block|}
decl_stmt|;
DECL|method|JabRefFrame ()
specifier|public
name|JabRefFrame
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
comment|// If the option is enabled, open the last edited databases, if any.
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"openLastEdited"
argument_list|)
operator|&&
operator|(
name|prefs
operator|.
name|get
argument_list|(
literal|"lastEdited"
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// How to handle errors in the databases to open?
name|String
index|[]
name|names
init|=
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"lastEdited"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fileToOpen
operator|=
operator|new
name|File
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileToOpen
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//Util.pr("Opening last edited file:"
comment|//+fileToOpen.getName());
name|openDatabaseAction
operator|.
name|openIt
argument_list|(
name|i
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Files opened"
argument_list|)
operator|+
literal|": "
operator|+
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|new
name|FocusRequester
argument_list|(
operator|(
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|entryTable
argument_list|)
expr_stmt|;
block|}
else|else
name|setEmptyState
argument_list|()
expr_stmt|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
comment|/*try { 	    //UIManager.setLookAndFeel("com.jgoodies.plaf.windows.ExtWindowsLookAndFeel"); 	    UIManager.setLookAndFeel(new PlasticXPLookAndFeel()); 	    } catch (Exception e) { e.printStackTrace();}*/
comment|//Globals.setLanguage("no", "");
name|setTitle
argument_list|(
name|GUIGlobals
operator|.
name|frameTitle
argument_list|)
expr_stmt|;
name|setIconImage
argument_list|(
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|jabreflogo
argument_list|)
operator|.
name|getImage
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultCloseOperation
argument_list|(
name|WindowConstants
operator|.
name|DO_NOTHING_ON_CLOSE
argument_list|)
expr_stmt|;
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
operator|(
operator|new
name|CloseAction
argument_list|()
operator|)
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initLabelMaker
argument_list|()
expr_stmt|;
name|setupLayout
argument_list|()
expr_stmt|;
name|setSize
argument_list|(
operator|new
name|Dimension
argument_list|(
name|prefs
operator|.
name|getInt
argument_list|(
literal|"sizeX"
argument_list|)
argument_list|,
name|prefs
operator|.
name|getInt
argument_list|(
literal|"sizeY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setLocation
argument_list|(
operator|new
name|Point
argument_list|(
name|prefs
operator|.
name|getInt
argument_list|(
literal|"posX"
argument_list|)
argument_list|,
name|prefs
operator|.
name|getInt
argument_list|(
literal|"posY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupLayout ()
specifier|private
name|void
name|setupLayout
parameter_list|()
block|{
name|fillMenu
argument_list|()
expr_stmt|;
name|createToolBar
argument_list|()
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|lightGray
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|mb
operator|.
name|setMinimumSize
argument_list|(
name|mb
operator|.
name|getPreferredSize
argument_list|()
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|mb
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|mb
argument_list|)
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|NORTH
expr_stmt|;
comment|//con.gridwidth = 1;//GridBagConstraints.REMAINDER;;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|tlb
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|tlb
argument_list|)
expr_stmt|;
name|Component
name|lim
init|=
name|Box
operator|.
name|createGlue
argument_list|()
decl_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lim
argument_list|,
name|con
argument_list|)
expr_stmt|;
comment|//getContentPane().add(lim);
comment|/* 	JPanel empt = new JPanel(); 	empt.setBackground(GUIGlobals.lightGray); 	gbl.setConstraints(empt, con);         getContentPane().add(empt);  	con.insets = new Insets(1,0,1,1); 	con.anchor = GridBagConstraints.EAST; 	con.weightx = 0; 	gbl.setConstraints(searchManager, con); 	getContentPane().add(searchManager);*/
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|lim
operator|=
name|Box
operator|.
name|createGlue
argument_list|()
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lim
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|lim
argument_list|)
expr_stmt|;
comment|//tabbedPane.setVisible(false);
comment|//tabbedPane.setForeground(GUIGlobals.lightGray);
name|con
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|tabbedPane
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|tabbedPane
argument_list|)
expr_stmt|;
name|JPanel
name|status
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|status
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|0
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|statusLabel
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|statusLine
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|statusLine
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|statusLabel
operator|.
name|setForeground
argument_list|(
name|GUIGlobals
operator|.
name|nullFieldColor
operator|.
name|darker
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|status
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|initLabelMaker ()
specifier|private
name|void
name|initLabelMaker
parameter_list|()
block|{
comment|// initialize the labelMaker
name|labelMaker
operator|=
operator|new
name|LabelMaker
argument_list|()
expr_stmt|;
name|labelMaker
operator|.
name|addRule
argument_list|(
operator|new
name|ArticleLabelRule
argument_list|()
argument_list|,
name|BibtexEntryType
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|labelMaker
operator|.
name|addRule
argument_list|(
operator|new
name|BookLabelRule
argument_list|()
argument_list|,
name|BibtexEntryType
operator|.
name|BOOK
argument_list|)
expr_stmt|;
name|labelMaker
operator|.
name|addRule
argument_list|(
operator|new
name|IncollectionLabelRule
argument_list|()
argument_list|,
name|BibtexEntryType
operator|.
name|INCOLLECTION
argument_list|)
expr_stmt|;
name|labelMaker
operator|.
name|addRule
argument_list|(
operator|new
name|InproceedingsLabelRule
argument_list|()
argument_list|,
name|BibtexEntryType
operator|.
name|INPROCEEDINGS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the indexed BasePanel.      * @param i Index of base      */
DECL|method|baseAt (int i)
name|BasePanel
name|baseAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/**      * Returns the currently viewed BasePanel.      */
DECL|method|basePanel ()
name|BasePanel
name|basePanel
parameter_list|()
block|{
return|return
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
return|;
block|}
DECL|method|getTabIndex (JComponent comp)
specifier|private
name|int
name|getTabIndex
parameter_list|(
name|JComponent
name|comp
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
name|i
argument_list|)
operator|==
name|comp
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
DECL|method|getTabTitle (JComponent comp)
specifier|public
name|String
name|getTabTitle
parameter_list|(
name|JComponent
name|comp
parameter_list|)
block|{
return|return
name|tabbedPane
operator|.
name|getTitleAt
argument_list|(
name|getTabIndex
argument_list|(
name|comp
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setTabTitle (JComponent comp, String s)
specifier|public
name|void
name|setTabTitle
parameter_list|(
name|JComponent
name|comp
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|tabbedPane
operator|.
name|setTitleAt
argument_list|(
name|getTabIndex
argument_list|(
name|comp
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|class|GeneralAction
class|class
name|GeneralAction
extends|extends
name|AbstractAction
block|{
DECL|field|command
specifier|private
name|String
name|command
decl_stmt|;
DECL|method|GeneralAction (String command, String text, String description, URL icon)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|URL
name|icon
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|icon
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, String description, URL icon, KeyStroke key)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|URL
name|icon
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|icon
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, KeyStroke key)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
try|try
block|{
operator|(
call|(
name|BasePanel
call|)
argument_list|(
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
argument_list|)
operator|)
operator|.
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
else|else
name|Util
operator|.
name|pr
argument_list|(
literal|"Action '"
operator|+
name|command
operator|+
literal|"' must be disabled when no "
operator|+
literal|"database is open."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** This got removed when we introduced SearchManager2.     class IncrementalSearchAction extends AbstractAction { 	public IncrementalSearchAction() { 	    super("Incremental search", new ImageIcon(GUIGlobals.searchIconFile)); 	    putValue(SHORT_DESCRIPTION, Globals.lang("Start incremental search")); 	    putValue(ACCELERATOR_KEY, prefs.getKey("Incremental search")); 	} 	public void actionPerformed(ActionEvent e) { 	    if (tabbedPane.getTabCount()> 0) 		searchManager.startIncrementalSearch(); 	}     }      class SearchAction extends AbstractAction { 	public SearchAction() { 	    super("Search", new ImageIcon(GUIGlobals.searchIconFile)); 	    putValue(SHORT_DESCRIPTION, Globals.lang("Start search")); 	    putValue(ACCELERATOR_KEY, prefs.getKey("Search")); 	} 	public void actionPerformed(ActionEvent e) { 	    if (tabbedPane.getTabCount()> 0) 		searchManager.startSearch(); 	}     }     */
DECL|class|NewEntryAction
class|class
name|NewEntryAction
extends|extends
name|AbstractAction
block|{
DECL|field|type
name|String
name|type
init|=
literal|null
decl_stmt|;
comment|// The type of item to create.
DECL|field|keyStroke
name|KeyStroke
name|keyStroke
init|=
literal|null
decl_stmt|;
comment|// Used for the specific instances.
DECL|method|NewEntryAction (KeyStroke key)
specifier|public
name|NewEntryAction
parameter_list|(
name|KeyStroke
name|key
parameter_list|)
block|{
comment|// This action leads to a dialog asking for entry type.
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"New entry"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|addIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"New BibTeX entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|NewEntryAction (String type_)
specifier|public
name|NewEntryAction
parameter_list|(
name|String
name|type_
parameter_list|)
block|{
comment|// This action leads to the creation of a specific entry.
name|super
argument_list|(
name|Util
operator|.
name|nCase
argument_list|(
name|type_
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|=
name|type_
expr_stmt|;
block|}
DECL|method|NewEntryAction (String type_, KeyStroke key)
specifier|public
name|NewEntryAction
parameter_list|(
name|String
name|type_
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
comment|// This action leads to the creation of a specific entry.
name|super
argument_list|(
name|Util
operator|.
name|nCase
argument_list|(
name|type_
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|type
operator|=
name|type_
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|thisType
init|=
name|type
decl_stmt|;
if|if
condition|(
name|thisType
operator|==
literal|null
condition|)
block|{
name|EntryTypeDialog
name|etd
init|=
operator|new
name|EntryTypeDialog
argument_list|(
name|ths
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|etd
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|etd
operator|.
name|show
argument_list|()
expr_stmt|;
name|BibtexEntryType
name|tp
init|=
name|etd
operator|.
name|getChoice
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
return|return;
name|thisType
operator|=
name|tp
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
operator|(
call|(
name|BasePanel
call|)
argument_list|(
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
argument_list|)
operator|)
operator|.
name|newEntry
argument_list|(
name|BibtexEntryType
operator|.
name|getType
argument_list|(
name|thisType
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|Util
operator|.
name|pr
argument_list|(
literal|"Action 'New entry' must be disabled when no "
operator|+
literal|"database is open."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*     private void setupDatabaseLayout() { 	// This method is called whenever this frame has been provided 	// with a database, and completes the layout.   	if (file != null) 	    setTitle(GUIGlobals.baseTitle+file.getName()); 	else 	setTitle(GUIGlobals.untitledTitle);  	//DragNDropManager dndm = new DragNDropManager(this);  	//setNonEmptyState(); 	Util.pr("JabRefFrame: Must set non-empty state."); 	}*/
DECL|method|fillMenu ()
specifier|private
name|void
name|fillMenu
parameter_list|()
block|{
name|JMenu
name|file
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"File"
argument_list|)
argument_list|)
decl_stmt|,
name|edit
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Edit"
argument_list|)
argument_list|)
decl_stmt|,
name|bibtex
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"BibTeX"
argument_list|)
argument_list|)
decl_stmt|,
name|view
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"View"
argument_list|)
argument_list|)
decl_stmt|,
name|tools
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Tools"
argument_list|)
argument_list|)
decl_stmt|,
name|options
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Options"
argument_list|)
argument_list|)
decl_stmt|,
name|newSpec
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"New entry..."
argument_list|)
argument_list|)
decl_stmt|,
name|helpMenu
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Help"
argument_list|)
argument_list|)
decl_stmt|;
name|setUpImportMenu
argument_list|(
name|importMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setUpImportMenu
argument_list|(
name|importNewMenu
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setUpExportMenu
argument_list|(
name|exportMenu
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|newDatabaseAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|open
argument_list|)
expr_stmt|;
comment|//opendatabaseaction
name|file
operator|.
name|add
argument_list|(
name|mergeDatabaseAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|importMenu
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|importMenu
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|importNewMenu
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|save
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|saveAs
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|exportMenu
argument_list|)
expr_stmt|;
name|file
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|fileHistory
argument_list|)
expr_stmt|;
comment|//file.addSeparator();
name|file
operator|.
name|add
argument_list|(
name|loadSessionAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|saveSessionAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|close
argument_list|)
expr_stmt|;
comment|//==============================
comment|// NB: I added this because my frame borders are so tiny that I cannot click
comment|// on the "x" close button. Anyways, I think it is good to have and "exit" button
comment|// I was too lazy to make a new ExitAction
comment|//JMenuItem exit_mItem = new JMenuItem(Globals.lang("Exit"));
comment|//exit_mItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, KeyEvent.CTRL_MASK)); //Ctrl-Q to exit
comment|// above keybinding should be from user define
comment|//exit_mItem.addActionListener(new CloseAction() );
comment|//file.add( exit_mItem);
comment|//=====================================
name|file
operator|.
name|add
argument_list|(
name|quit
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|redo
argument_list|)
expr_stmt|;
name|edit
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|cut
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|paste
argument_list|)
expr_stmt|;
comment|//edit.add(remove);
name|edit
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|copyKey
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|copyCiteKey
argument_list|)
expr_stmt|;
name|edit
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|selectAll
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|edit
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|nextTab
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|prevTab
argument_list|)
expr_stmt|;
name|view
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|toggleGroups
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|newEntryAction
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newSpecificEntryAction
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|newSpec
operator|.
name|add
argument_list|(
name|newSpecificEntryAction
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|newSpec
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|editPreamble
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|editStrings
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|bibtex
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|normalSearch
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|incrementalSearch
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|makeKeyAction
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|fetchMedline
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|lyxPushAction
argument_list|)
expr_stmt|;
name|tools
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|replaceAll
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|tools
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|showPrefs
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Customize entry types"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JDialog
name|dl
init|=
operator|new
name|EntryCustomizationDialog
argument_list|(
name|ths
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|dl
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|dl
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|/*options.add(new AbstractAction("Font") { 		public void actionPerformed(ActionEvent e) { 		    // JDialog dl = new EntryCustomizationDialog(ths); 		    Font f=new FontSelectorDialog 				(ths, GUIGlobals.CURRENTFONT).getSelectedFont(); 			if(f==null) 				return; 			else 				GUIGlobals.CURRENTFONT=f; 			// updatefont 			prefs.put("fontFamily", GUIGlobals.CURRENTFONT.getFamily()); 			prefs.putInt("fontStyle", GUIGlobals.CURRENTFONT.getStyle()); 			prefs.putInt("fontSize", GUIGlobals.CURRENTFONT.getSize()); 			if (tabbedPane.getTabCount()> 0) { 				for (int i=0; i<tabbedPane.getTabCount(); i++) { 					baseAt(i).entryTable.updateFont(); 					baseAt(i).refreshTable(); 				} 			} 		} 		});*/
name|options
operator|.
name|add
argument_list|(
name|selectKeys
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|about
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|helpMenu
argument_list|)
expr_stmt|;
block|}
DECL|method|createToolBar ()
specifier|private
name|void
name|createToolBar
parameter_list|()
block|{
comment|//tlb.setRollover(true);
comment|//tlb.setBorderPainted(true);
name|tlb
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|lightGray
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setForeground
argument_list|(
name|GUIGlobals
operator|.
name|lightGray
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setFloatable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|newDatabaseAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|open
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|save
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|cut
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|paste
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|redo
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|newEntryAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|editPreamble
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|editStrings
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|makeKeyAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|lyxPushAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|normalSearch
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|toggleGroups
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|showPrefs
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|Box
operator|.
name|createHorizontalGlue
argument_list|()
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|closeDatabaseAction
argument_list|)
expr_stmt|;
comment|//for (int i=0; i<tlb.getComponentCount(); i++)
comment|//    tlb.getComponentAtIndex(i).setBackground(GUIGlobals.lightGray);
block|}
DECL|method|mItem (AbstractAction a, KeyStroke ks)
specifier|private
name|JMenuItem
name|mItem
parameter_list|(
name|AbstractAction
name|a
parameter_list|,
name|KeyStroke
name|ks
parameter_list|)
block|{
comment|// Set up a menu item with action and accelerator key.
name|JMenuItem
name|mi
init|=
operator|new
name|JMenuItem
argument_list|()
decl_stmt|;
name|mi
operator|.
name|setAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|ks
operator|!=
literal|null
condition|)
name|mi
operator|.
name|setAccelerator
argument_list|(
name|ks
argument_list|)
expr_stmt|;
return|return
name|mi
return|;
block|}
comment|//private void setupMainPanel() {
comment|/*public Completer getAutoCompleter(String field) { 	return (Completer)autoCompleters.get(field); 	}       public void assignAutoCompleters() { 	// Set up which fields should have autocompletion. This should 	// probably be made customizable. Existing Completer objects are 	// forgotten. The completers must be updated towards the database. 	byte[] fields = prefs.getByteArray("autoCompFields"); 	autoCompleters = new Hashtable(); 	for (int i=0; i<fields.length; i++) { 	    autoCompleters.put(GUIGlobals.ALL_FIELDS[fields[i]], new Completer()); 	}      }      public void updateAutoCompleters() { 	if (database != null) 	    database.setCompleters(autoCompleters); 	    }*/
DECL|method|output (String s)
specifier|public
name|void
name|output
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|statusLine
operator|.
name|setText
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|stopShowingSearchResults ()
specifier|public
name|void
name|stopShowingSearchResults
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
block|}
DECL|method|setEmptyState ()
specifier|private
name|void
name|setEmptyState
parameter_list|()
block|{
comment|// Disable actions that demand an open database.
name|mergeDatabaseAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|close
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|saveAs
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nextTab
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|prevTab
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|undo
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|redo
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cut
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|paste
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|selectAll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|copyKey
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|copyCiteKey
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|editPreamble
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|editStrings
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|toggleGroups
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|makeKeyAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lyxPushAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|normalSearch
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|incrementalSearch
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|replaceAll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|exportMenu
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fetchMedline
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newSpecificEntryAction
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|newSpecificEntryAction
index|[
name|i
index|]
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|newEntryAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|closeDatabaseAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|setNonEmptyState ()
specifier|private
name|void
name|setNonEmptyState
parameter_list|()
block|{
comment|// Enable actions that demand an open database.
name|mergeDatabaseAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|close
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveAs
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nextTab
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prevTab
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|undo
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|redo
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cut
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|paste
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|selectAll
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|copyKey
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|copyCiteKey
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|editPreamble
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|editStrings
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|toggleGroups
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|makeKeyAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lyxPushAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|normalSearch
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|incrementalSearch
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|replaceAll
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exportMenu
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fetchMedline
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newSpecificEntryAction
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|newSpecificEntryAction
index|[
name|i
index|]
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|newEntryAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|closeDatabaseAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method causes all open BasePanels to set up their tables      * anew. When called from PrefsDialog2, this updates to the new      * settings.      */
DECL|method|setupAllTables ()
specifier|public
name|void
name|setupAllTables
parameter_list|()
block|{
comment|// This action can be invoked without an open database, so
comment|// we have to check if we have one before trying to invoke
comment|// methods to execute changes in the preferences.
comment|// We want to notify all tabs about the changes to
comment|// avoid problems when changing the column set.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BasePanel
name|bf
init|=
name|baseAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|bf
operator|.
name|database
operator|!=
literal|null
condition|)
block|{
name|bf
operator|.
name|entryTable
operator|.
name|updateFont
argument_list|()
expr_stmt|;
name|bf
operator|.
name|setupTable
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadDatabase (File fileToOpen)
specifier|protected
name|ParserResult
name|loadDatabase
parameter_list|(
name|File
name|fileToOpen
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Temporary (old method):
comment|//FileLoader fl = new FileLoader();
comment|//BibtexDatabase db = fl.load(fileToOpen.getPath());
name|BibtexParser
name|bp
init|=
operator|new
name|BibtexParser
argument_list|(
operator|new
name|FileReader
argument_list|(
name|fileToOpen
argument_list|)
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
name|bp
operator|.
name|parse
argument_list|()
decl_stmt|;
return|return
name|pr
return|;
block|}
DECL|class|SelectKeysAction
class|class
name|SelectKeysAction
extends|extends
name|AbstractAction
block|{
DECL|method|SelectKeysAction ()
specifier|public
name|SelectKeysAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Customize key bindings"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|KeyBindingsDialog
name|d
init|=
operator|new
name|KeyBindingsDialog
argument_list|(
operator|(
name|HashMap
operator|)
name|prefs
operator|.
name|getKeyBindings
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|,
name|prefs
operator|.
name|getDefaultKeys
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|.
name|setDefaultCloseOperation
argument_list|(
name|JFrame
operator|.
name|EXIT_ON_CLOSE
argument_list|)
expr_stmt|;
name|d
operator|.
name|pack
argument_list|()
expr_stmt|;
comment|//setSize(300,500);
name|Util
operator|.
name|placeDialog
argument_list|(
name|d
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|d
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|getAction
argument_list|()
condition|)
block|{
name|prefs
operator|.
name|setNewKeyBindings
argument_list|(
name|d
operator|.
name|getNewKeyBindings
argument_list|()
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Your new key bindings have been stored."
argument_list|)
operator|+
literal|"\n"
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"You must restart JabRef for the new key "
operator|+
literal|"bindings to work properly."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Key bindings changed"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * The action concerned with closing the window.      */
DECL|class|CloseAction
class|class
name|CloseAction
extends|extends
name|AbstractAction
block|{
DECL|method|CloseAction ()
specifier|public
name|CloseAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Quit"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Quit JabRef"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Quit JabRef"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Ask here if the user really wants to close, if the base
comment|// has not been saved since last save.
name|boolean
name|close
init|=
literal|true
decl_stmt|;
name|Vector
name|filenames
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|baseChanged
condition|)
block|{
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Database has changed. Do you "
operator|+
literal|"want to save before closing?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save before closing"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_CANCEL_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CANCEL_OPTION
operator|)
operator|||
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CLOSED_OPTION
operator|)
condition|)
name|close
operator|=
literal|false
expr_stmt|;
comment|// The user has cancelled.
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|// The user wants to save.
try|try
block|{
name|basePanel
argument_list|()
operator|.
name|runCommand
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// Something prevented the file
comment|// from being saved. Break!!!
name|close
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|file
operator|!=
literal|null
condition|)
name|filenames
operator|.
name|add
argument_list|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|close
condition|)
block|{
name|dispose
argument_list|()
expr_stmt|;
name|prefs
operator|.
name|putInt
argument_list|(
literal|"posX"
argument_list|,
name|ths
operator|.
name|getLocation
argument_list|()
operator|.
name|x
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putInt
argument_list|(
literal|"posY"
argument_list|,
name|ths
operator|.
name|getLocation
argument_list|()
operator|.
name|y
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putInt
argument_list|(
literal|"sizeX"
argument_list|,
name|ths
operator|.
name|getSize
argument_list|()
operator|.
name|width
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putInt
argument_list|(
literal|"sizeY"
argument_list|,
name|ths
operator|.
name|getSize
argument_list|()
operator|.
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"openLastEdited"
argument_list|)
condition|)
block|{
comment|// Here we store the names of allcurrent filea. If
comment|// there is no current file, we remove any
comment|// previously stored file name.
if|if
condition|(
name|filenames
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|prefs
operator|.
name|remove
argument_list|(
literal|"lastEdited"
argument_list|)
expr_stmt|;
else|else
block|{
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|filenames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filenames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|names
index|[
name|i
index|]
operator|=
operator|(
name|String
operator|)
name|filenames
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringArray
argument_list|(
literal|"lastEdited"
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
block|}
name|fileHistory
operator|.
name|storeHistory
argument_list|()
expr_stmt|;
name|BibtexEntryType
operator|.
name|saveCustomEntryTypes
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
comment|// Let the search interface store changes to prefs.
comment|// But which one? Let's use the one that is visible.
if|if
condition|(
name|basePanel
argument_list|()
operator|!=
literal|null
condition|)
name|basePanel
argument_list|()
operator|.
name|searchManager
operator|.
name|updatePrefs
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// End program.
block|}
block|}
block|}
comment|// The action for closing the current database and leaving the window open.
DECL|field|closeDatabaseAction
name|CloseDatabaseAction
name|closeDatabaseAction
init|=
operator|new
name|CloseDatabaseAction
argument_list|()
decl_stmt|;
DECL|class|CloseDatabaseAction
class|class
name|CloseDatabaseAction
extends|extends
name|AbstractAction
block|{
DECL|method|CloseDatabaseAction ()
specifier|public
name|CloseDatabaseAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Close database"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|closeIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Close the current database"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Close database"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Ask here if the user really wants to close, if the base
comment|// has not been saved since last save.
name|boolean
name|close
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|basePanel
argument_list|()
operator|==
literal|null
condition|)
comment|// when it is initially empty
return|return;
comment|//nbatada nov 7
if|if
condition|(
name|basePanel
argument_list|()
operator|.
name|baseChanged
condition|)
block|{
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Database has changed. Do you want to save "
operator|+
literal|"before closing?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save before closing"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_CANCEL_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CANCEL_OPTION
operator|)
operator|||
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CLOSED_OPTION
operator|)
condition|)
name|close
operator|=
literal|false
expr_stmt|;
comment|// The user has cancelled.
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|// The user wants to save.
try|try
block|{
name|basePanel
argument_list|()
operator|.
name|runCommand
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// Something prevented the file
comment|// from being saved. Break!!!
name|close
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|close
condition|)
block|{
name|tabbedPane
operator|.
name|remove
argument_list|(
name|basePanel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|0
condition|)
name|setEmptyState
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Closed database"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// The action concerned with opening an existing database.
DECL|field|openDatabaseAction
name|OpenDatabaseAction
name|openDatabaseAction
init|=
operator|new
name|OpenDatabaseAction
argument_list|()
decl_stmt|;
DECL|class|OpenDatabaseAction
class|class
name|OpenDatabaseAction
extends|extends
name|AbstractAction
block|{
DECL|method|OpenDatabaseAction ()
specifier|public
name|OpenDatabaseAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Open database"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|openIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Open"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Open BibTeX database"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Open a new database.
if|if
condition|(
operator|(
name|e
operator|.
name|getActionCommand
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|e
operator|.
name|getActionCommand
argument_list|()
operator|.
name|equals
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Open database"
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|JFileChooser
name|chooser
init|=
operator|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|new
name|JabRefFileChooser
argument_list|(
operator|(
name|File
operator|)
literal|null
argument_list|)
else|:
operator|new
name|JabRefFileChooser
argument_list|(
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|chooser
operator|.
name|addChoosableFileFilter
argument_list|(
operator|new
name|OpenFileFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|//nb nov2
name|int
name|returnVal
init|=
name|chooser
operator|.
name|showOpenDialog
argument_list|(
name|ths
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnVal
operator|==
name|JFileChooser
operator|.
name|APPROVE_OPTION
condition|)
block|{
name|fileToOpen
operator|=
name|chooser
operator|.
name|getSelectedFile
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|Util
operator|.
name|pr
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|Util
operator|.
name|pr
argument_list|(
name|e
operator|.
name|getActionCommand
argument_list|()
argument_list|)
expr_stmt|;
name|fileToOpen
operator|=
operator|new
name|File
argument_list|(
name|Util
operator|.
name|checkName
argument_list|(
name|e
operator|.
name|getActionCommand
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Run the actual open in a thread to prevent the program
comment|// locking until the file is loaded.
if|if
condition|(
name|fileToOpen
operator|!=
literal|null
condition|)
block|{
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|openIt
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|fileHistory
operator|.
name|newFile
argument_list|(
name|fileToOpen
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openIt (boolean raisePanel)
specifier|public
name|void
name|openIt
parameter_list|(
name|boolean
name|raisePanel
parameter_list|)
block|{
if|if
condition|(
operator|(
name|fileToOpen
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|fileToOpen
operator|.
name|exists
argument_list|()
operator|)
condition|)
block|{
try|try
block|{
name|prefs
operator|.
name|put
argument_list|(
literal|"workingDirectory"
argument_list|,
name|fileToOpen
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should this be done _after_ we know it was successfully opened?
name|ParserResult
name|pr
init|=
name|loadDatabase
argument_list|(
name|fileToOpen
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|db
init|=
name|pr
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|HashMap
name|meta
init|=
name|pr
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|BasePanel
name|bp
init|=
operator|new
name|BasePanel
argument_list|(
name|ths
argument_list|,
name|db
argument_list|,
name|fileToOpen
argument_list|,
name|meta
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
comment|/*                           if (prefs.getBoolean("autoComplete")) {                           db.setCompleters(autoCompleters);                           }                         */
name|tabbedPane
operator|.
name|add
argument_list|(
name|fileToOpen
operator|.
name|getName
argument_list|()
argument_list|,
name|bp
argument_list|)
expr_stmt|;
if|if
condition|(
name|raisePanel
condition|)
name|tabbedPane
operator|.
name|setSelectedComponent
argument_list|(
name|bp
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|1
condition|)
name|setNonEmptyState
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Opened database"
argument_list|)
operator|+
literal|" '"
operator|+
name|fileToOpen
operator|.
name|getPath
argument_list|()
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"with"
argument_list|)
operator|+
literal|" "
operator|+
name|db
operator|.
name|getEntryCount
argument_list|()
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|fileToOpen
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|ths
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Open database"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// The action concerned with opening a new database.
DECL|class|NewDatabaseAction
class|class
name|NewDatabaseAction
extends|extends
name|AbstractAction
block|{
DECL|method|NewDatabaseAction ()
specifier|public
name|NewDatabaseAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"New database"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|newIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"New BibTeX database"
argument_list|)
argument_list|)
expr_stmt|;
comment|//putValue(MNEMONIC_KEY, GUIGlobals.newKeyCode);
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Create a new, empty, database.
name|BasePanel
name|bp
init|=
operator|new
name|BasePanel
argument_list|(
name|ths
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
name|tabbedPane
operator|.
name|add
argument_list|(
name|GUIGlobals
operator|.
name|untitledTitle
argument_list|,
name|bp
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|setSelectedComponent
argument_list|(
name|bp
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|1
condition|)
name|setNonEmptyState
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"New database created."
argument_list|)
argument_list|)
expr_stmt|;
comment|/* 	      if (prefs.getBoolean("autoComplete")) 	      db.setCompleters(autoCompleters);*/
block|}
block|}
DECL|class|FetchMedlineAction
class|class
name|FetchMedlineAction
extends|extends
name|AbstractAction
block|{
DECL|method|FetchMedlineAction ()
specifier|public
name|FetchMedlineAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Fetch Medline"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|fetchMedlineIcon
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Fetch Medline by ID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|sidePaneManager
operator|.
name|ensureVisible
argument_list|(
literal|"fetchMedline"
argument_list|)
expr_stmt|;
operator|new
name|FocusRequester
argument_list|(
name|basePanel
argument_list|()
operator|.
name|medlineFetcher
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// The action for opening the preferences dialog.
DECL|field|showPrefs
name|AbstractAction
name|showPrefs
init|=
operator|new
name|ShowPrefsAction
argument_list|()
decl_stmt|;
DECL|class|ShowPrefsAction
class|class
name|ShowPrefsAction
extends|extends
name|AbstractAction
block|{
DECL|method|ShowPrefsAction ()
specifier|public
name|ShowPrefsAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Preferences"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|prefsIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Preferences"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|//PrefsDialog.showPrefsDialog(ths, prefs);
name|PrefsDialog2
name|pd
init|=
operator|new
name|PrefsDialog2
argument_list|(
name|ths
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|pd
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|pd
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|aboutAction
name|AboutAction
name|aboutAction
init|=
operator|new
name|AboutAction
argument_list|()
decl_stmt|;
DECL|class|AboutAction
class|class
name|AboutAction
extends|extends
name|AbstractAction
block|{
DECL|method|AboutAction ()
specifier|public
name|AboutAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"About JabRef"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JDialog
name|about
init|=
operator|new
name|JDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"About JabRef"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JEditorPane
name|jp
init|=
operator|new
name|JEditorPane
argument_list|()
decl_stmt|;
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
name|jp
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
decl_stmt|;
name|jp
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|jp
operator|.
name|setPage
argument_list|(
name|GUIGlobals
operator|.
name|aboutPage
argument_list|)
expr_stmt|;
comment|// We need a hyperlink listener to be able to switch to the license
comment|// terms and back.
name|jp
operator|.
name|addHyperlinkListener
argument_list|(
operator|new
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|HyperlinkListener
argument_list|()
block|{
specifier|public
name|void
name|hyperlinkUpdate
parameter_list|(
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|HyperlinkEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getEventType
argument_list|()
operator|==
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|HyperlinkEvent
operator|.
name|EventType
operator|.
name|ACTIVATED
condition|)
try|try
block|{
operator|(
operator|(
name|JEditorPane
operator|)
name|e
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|setPage
argument_list|(
name|e
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{}
block|}
block|}
argument_list|)
expr_stmt|;
name|about
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|about
operator|.
name|setSize
argument_list|(
name|GUIGlobals
operator|.
name|aboutSize
argument_list|)
expr_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|about
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|about
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|ths
argument_list|,
literal|"Could not load file 'About.html'"
argument_list|,
literal|"Error"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addBibEntries (ArrayList bibentries, String filename, boolean intoNew)
specifier|private
name|void
name|addBibEntries
parameter_list|(
name|ArrayList
name|bibentries
parameter_list|,
name|String
name|filename
parameter_list|,
name|boolean
name|intoNew
parameter_list|)
block|{
comment|// check if bibentries is null
if|if
condition|(
name|intoNew
operator|||
operator|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
comment|// Import into new database.
name|BibtexDatabase
name|database
init|=
operator|new
name|BibtexDatabase
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|bibentries
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|entry
operator|.
name|setId
argument_list|(
name|Util
operator|.
name|createId
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{
comment|//ignore
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"KeyCollisionException [ addBibEntries(...) ]"
argument_list|)
expr_stmt|;
block|}
block|}
name|HashMap
name|meta
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Metadata are only put in bibtex files, so we will not find it
comment|// in imported files. Instead we pass an empty HashMap.
name|BasePanel
name|bp
init|=
operator|new
name|BasePanel
argument_list|(
name|ths
argument_list|,
name|database
argument_list|,
literal|null
argument_list|,
name|meta
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
comment|/*                           if (prefs.getBoolean("autoComplete")) {                           db.setCompleters(autoCompleters);                           }                      */
name|tabbedPane
operator|.
name|add
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"untitled"
argument_list|)
argument_list|,
name|bp
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|setSelectedComponent
argument_list|(
name|bp
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|1
condition|)
name|setNonEmptyState
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Imported database"
argument_list|)
operator|+
literal|" '"
operator|+
name|filename
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"with"
argument_list|)
operator|+
literal|" "
operator|+
name|database
operator|.
name|getEntryCount
argument_list|()
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries into new database"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Import into current database.
name|BasePanel
name|basePanel
init|=
name|basePanel
argument_list|()
decl_stmt|;
name|BibtexDatabase
name|database
init|=
name|basePanel
operator|.
name|database
decl_stmt|;
name|int
name|oldCount
init|=
name|database
operator|.
name|getEntryCount
argument_list|()
decl_stmt|;
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
literal|"Import database"
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|bibentries
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|entry
operator|.
name|setId
argument_list|(
name|Util
operator|.
name|createId
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|database
argument_list|,
name|entry
argument_list|,
name|basePanel
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{
comment|//ignore
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"KeyCollisionException [ addBibEntries(...) ]"
argument_list|)
expr_stmt|;
block|}
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|basePanel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|basePanel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|basePanel
operator|.
name|refreshTable
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Imported database"
argument_list|)
operator|+
literal|" '"
operator|+
name|filename
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"with"
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|database
operator|.
name|getEntryCount
argument_list|()
operator|-
name|oldCount
operator|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries into new database"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setUpImportMenu (JMenu importMenu, boolean intoNew_)
specifier|private
name|void
name|setUpImportMenu
parameter_list|(
name|JMenu
name|importMenu
parameter_list|,
name|boolean
name|intoNew_
parameter_list|)
block|{
specifier|final
name|boolean
name|intoNew
init|=
name|intoNew_
decl_stmt|;
comment|//
comment|// put in menu
comment|//
comment|//########################################
name|JMenuItem
name|newEndnoteFile_mItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Refer/Endnote"
argument_list|)
argument_list|)
decl_stmt|;
comment|//,						       new ImageIcon(getClass().getResource("images16/Open16.gif")));
name|newEndnoteFile_mItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|tempFilename
init|=
name|getNewFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempFilename
operator|!=
literal|null
condition|)
block|{
name|ArrayList
name|bibs
init|=
name|ImportFormatReader
operator|.
name|readEndnote
argument_list|(
name|tempFilename
argument_list|)
decl_stmt|;
comment|//MedlineParser.readMedline(tempFilename);
name|addBibEntries
argument_list|(
name|bibs
argument_list|,
name|tempFilename
argument_list|,
name|intoNew
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|add
argument_list|(
name|newEndnoteFile_mItem
argument_list|)
expr_stmt|;
comment|//########################################
name|JMenuItem
name|newINSPECFile_mItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"INSPEC"
argument_list|)
argument_list|)
decl_stmt|;
comment|//, new ImageIcon(getClass().getResource("images16/Open16.gif")));
name|newINSPECFile_mItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|tempFilename
init|=
name|getNewFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempFilename
operator|!=
literal|null
condition|)
block|{
name|ArrayList
name|bibs
init|=
name|ImportFormatReader
operator|.
name|readINSPEC
argument_list|(
name|tempFilename
argument_list|)
decl_stmt|;
name|addBibEntries
argument_list|(
name|bibs
argument_list|,
name|tempFilename
argument_list|,
name|intoNew
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|add
argument_list|(
name|newINSPECFile_mItem
argument_list|)
expr_stmt|;
comment|//########################################
name|JMenuItem
name|newISIFile_mItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"ISI"
argument_list|)
argument_list|)
decl_stmt|;
comment|//, new ImageIcon(getClass().getResource("images16/Open16.gif")));
name|newISIFile_mItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|tempFilename
init|=
name|getNewFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempFilename
operator|!=
literal|null
condition|)
block|{
name|ArrayList
name|bibs
init|=
name|ImportFormatReader
operator|.
name|readISI
argument_list|(
name|tempFilename
argument_list|)
decl_stmt|;
name|addBibEntries
argument_list|(
name|bibs
argument_list|,
name|tempFilename
argument_list|,
name|intoNew
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|add
argument_list|(
name|newISIFile_mItem
argument_list|)
expr_stmt|;
comment|//########################################
name|JMenuItem
name|newMedlineFile_mItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Medline XML File"
argument_list|)
argument_list|)
decl_stmt|;
name|newMedlineFile_mItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|tempFilename
init|=
name|getNewFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempFilename
operator|!=
literal|null
condition|)
block|{
name|ArrayList
name|bibs
init|=
name|ImportFormatReader
operator|.
name|readMedline
argument_list|(
name|tempFilename
argument_list|)
decl_stmt|;
name|addBibEntries
argument_list|(
name|bibs
argument_list|,
name|tempFilename
argument_list|,
name|intoNew
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|add
argument_list|(
name|newMedlineFile_mItem
argument_list|)
expr_stmt|;
comment|//########################################
name|JMenuItem
name|newBibTeXMLFile_mItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"BibTeXML File"
argument_list|)
argument_list|)
decl_stmt|;
name|newBibTeXMLFile_mItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|tempFilename
init|=
name|getNewFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempFilename
operator|!=
literal|null
condition|)
block|{
name|ArrayList
name|bibs
init|=
name|ImportFormatReader
operator|.
name|readBibTeXML
argument_list|(
name|tempFilename
argument_list|)
decl_stmt|;
name|addBibEntries
argument_list|(
name|bibs
argument_list|,
name|tempFilename
argument_list|,
name|intoNew
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|add
argument_list|(
name|newBibTeXMLFile_mItem
argument_list|)
expr_stmt|;
comment|//##############################
comment|/*JMenuItem newMedlineId_mItem = new JMenuItem(Globals.lang("Medline Fetch By ID"));  			newMedlineId_mItem.addActionListener(new ActionListener()  			    {  				public void actionPerformed(ActionEvent e)  				{  			   	    String idList = JOptionPane.showInputDialog(ths,"Enter a comma separated list of Medline ids","Fetch Medline Citation",JOptionPane.PLAIN_MESSAGE); 				    if(idList==null || idList.trim().equals(""))//if user pressed cancel 					return; 				    Pattern p = Pattern.compile("\\d+[,\\d+]*");  		    		    Matcher m = p.matcher( idList );  				    if ( m.matches() ) {  				        ArrayList bibs = ImportFormatReader.fetchMedline(idList);  				        addBibEntries( bibs, idList, intoNew);  				    } else { 					JOptionPane.showMessageDialog(ths,"Sorry, I was expecting a comma separated list of Medline IDs (numbers)!","Input Error",JOptionPane.ERROR_MESSAGE); 				    }  				}  			    });  			importMenu.add(newMedlineId_mItem);*/
comment|//########################################
name|JMenuItem
name|newOvidFile_mItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Ovid"
argument_list|)
argument_list|)
decl_stmt|;
comment|//,new ImageIcon(getClass().getResource("images16/Open16.gif")));
name|newOvidFile_mItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|tempFilename
init|=
name|getNewFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempFilename
operator|!=
literal|null
condition|)
block|{
name|ArrayList
name|bibs
init|=
name|ImportFormatReader
operator|.
name|readOvid
argument_list|(
name|tempFilename
argument_list|)
decl_stmt|;
name|addBibEntries
argument_list|(
name|bibs
argument_list|,
name|tempFilename
argument_list|,
name|intoNew
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|add
argument_list|(
name|newOvidFile_mItem
argument_list|)
expr_stmt|;
comment|//########################################
name|JMenuItem
name|newRefMan_mItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"RIS"
argument_list|)
argument_list|)
decl_stmt|;
comment|//, new ImageIcon(getClass().getResource("images16/Open16.gif")));
name|newRefMan_mItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|tempFilename
init|=
name|getNewFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempFilename
operator|!=
literal|null
condition|)
block|{
name|ArrayList
name|bibs
init|=
name|ImportFormatReader
operator|.
name|readReferenceManager10
argument_list|(
name|tempFilename
argument_list|)
decl_stmt|;
name|addBibEntries
argument_list|(
name|bibs
argument_list|,
name|tempFilename
argument_list|,
name|intoNew
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|add
argument_list|(
name|newRefMan_mItem
argument_list|)
expr_stmt|;
comment|//########################################
name|JMenuItem
name|newSciFinderFile_mItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"SciFinder"
argument_list|)
argument_list|)
decl_stmt|;
comment|//,new ImageIcon(getClass().getResource("images16/Open16.gif")));
comment|//newSciFinderFile_mItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK)); //Ctrl-F for new file
name|newSciFinderFile_mItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|tempFilename
init|=
name|getNewFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempFilename
operator|!=
literal|null
condition|)
comment|//filenm != null)
block|{
comment|//ArrayList bibs = Scifinder2bibtex.readSciFinderFile( tempFilename);//filename);//filenm );
name|ArrayList
name|bibs
init|=
name|ImportFormatReader
operator|.
name|readScifinder
argument_list|(
name|tempFilename
argument_list|)
decl_stmt|;
name|addBibEntries
argument_list|(
name|bibs
argument_list|,
name|tempFilename
argument_list|,
name|intoNew
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|add
argument_list|(
name|newSciFinderFile_mItem
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// simply opens up a jfilechooser dialog and gets a filename
comment|// returns null if user selects cancel
comment|// it should also do a check perhaps to see if
comment|// file exists and is readable?
comment|//
DECL|method|getNewFile ()
specifier|public
name|String
name|getNewFile
parameter_list|()
block|{
name|JFileChooser
name|fc
decl_stmt|;
if|if
condition|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
operator|==
literal|null
condition|)
name|fc
operator|=
operator|new
name|JabRefFileChooser
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//cwd));
else|else
block|{
name|fc
operator|=
operator|new
name|JabRefFileChooser
argument_list|(
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//cwd));
block|}
name|fc
operator|.
name|addChoosableFileFilter
argument_list|(
operator|new
name|OpenFileFilter
argument_list|()
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setDialogType
argument_list|(
name|JFileChooser
operator|.
name|OPEN_DIALOG
argument_list|)
expr_stmt|;
name|fc
operator|.
name|showOpenDialog
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|File
name|selectedFile
init|=
name|fc
operator|.
name|getSelectedFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedFile
operator|==
literal|null
condition|)
comment|// cancel
return|return
literal|null
return|;
name|prefs
operator|.
name|put
argument_list|(
literal|"workingDirectory"
argument_list|,
name|selectedFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|selectedFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
name|JMenuItem
DECL|field|htmlItem
name|htmlItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"HTML"
argument_list|)
argument_list|)
decl_stmt|,
comment|//plainTextItem = new JMenuItem(Globals.lang("Plain text")),
DECL|field|docbookItem
name|docbookItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Docbook"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|setUpExportMenu (JMenu menu)
specifier|private
name|void
name|setUpExportMenu
parameter_list|(
name|JMenu
name|menu
parameter_list|)
block|{
name|ActionListener
name|listener
init|=
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JMenuItem
name|source
init|=
operator|(
name|JMenuItem
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|String
name|lfFileName
init|=
literal|null
decl_stmt|,
name|extension
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|source
operator|==
name|htmlItem
condition|)
block|{
name|lfFileName
operator|=
literal|"html"
expr_stmt|;
name|extension
operator|=
literal|".html"
expr_stmt|;
block|}
comment|//else if (source == plainTextItem)
comment|//lfFileName = "text";
elseif|else
if|if
condition|(
name|source
operator|==
name|docbookItem
condition|)
block|{
name|lfFileName
operator|=
literal|"docbook"
expr_stmt|;
name|extension
operator|=
literal|".xml"
expr_stmt|;
block|}
comment|// We need to find out:
comment|// 1. The layout definition string to use. Or, rather, we
comment|//    must provide a Reader for the layout definition.
comment|// 2. The preferred extension for the layout format.
comment|// 3. The name of the file to use.
name|File
name|outFile
init|=
literal|null
decl_stmt|;
name|JFileChooser
name|chooser
init|=
operator|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|new
name|JabRefFileChooser
argument_list|(
operator|(
name|File
operator|)
literal|null
argument_list|)
else|:
operator|new
name|JabRefFileChooser
argument_list|(
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|OpenFileFilter
name|off
init|=
operator|new
name|OpenFileFilter
argument_list|(
name|extension
argument_list|)
decl_stmt|;
name|chooser
operator|.
name|addChoosableFileFilter
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|int
name|returnVal
init|=
name|chooser
operator|.
name|showSaveDialog
argument_list|(
name|ths
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnVal
operator|==
name|JFileChooser
operator|.
name|APPROVE_OPTION
condition|)
block|{
name|outFile
operator|=
name|chooser
operator|.
name|getSelectedFile
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|chooser
operator|.
name|getFileFilter
argument_list|()
operator|==
name|off
operator|)
operator|&&
operator|!
name|outFile
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
name|extension
argument_list|)
condition|)
comment|// We need to append the selected extension.
name|outFile
operator|=
operator|new
name|File
argument_list|(
name|outFile
operator|.
name|getPath
argument_list|()
operator|+
name|extension
argument_list|)
expr_stmt|;
block|}
else|else
return|return;
specifier|final
name|String
name|lfName
init|=
name|lfFileName
decl_stmt|;
specifier|final
name|File
name|oFile
init|=
name|outFile
decl_stmt|;
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|FileActions
operator|.
name|exportDatabase
argument_list|(
name|basePanel
argument_list|()
operator|.
name|database
argument_list|,
name|lfName
argument_list|,
name|oFile
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Exported database to file"
argument_list|)
operator|+
literal|" '"
operator|+
name|oFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|JMenuItem
name|item
decl_stmt|;
name|htmlItem
operator|.
name|addActionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|htmlItem
argument_list|)
expr_stmt|;
comment|//plainTextItem.addActionListener(listener);
comment|//menu.add(plainTextItem);
name|docbookItem
operator|.
name|addActionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|docbookItem
argument_list|)
expr_stmt|;
block|}
DECL|class|SaveSessionAction
class|class
name|SaveSessionAction
extends|extends
name|AbstractAction
block|{
DECL|method|SaveSessionAction ()
specifier|public
name|SaveSessionAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save session"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|saveIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Save session"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Here we store the names of allcurrent filea. If
comment|// there is no current file, we remove any
comment|// previously stored file name.
name|Vector
name|filenames
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tabbedPane
operator|.
name|getTitleAt
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|GUIGlobals
operator|.
name|untitledTitle
argument_list|)
condition|)
block|{
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"This untitled database must be saved first to be "
operator|+
literal|"included in the saved session. Save now?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save database"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|// The user wants to save.
try|try
block|{
name|basePanel
argument_list|()
operator|.
name|runCommand
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{}
block|}
block|}
if|if
condition|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|file
operator|!=
literal|null
condition|)
name|filenames
operator|.
name|add
argument_list|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filenames
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Not saved (empty session)"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|filenames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filenames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|names
index|[
name|i
index|]
operator|=
operator|(
name|String
operator|)
name|filenames
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringArray
argument_list|(
literal|"savedSession"
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saved session"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|LoadSessionAction
class|class
name|LoadSessionAction
extends|extends
name|AbstractAction
block|{
DECL|method|LoadSessionAction ()
specifier|public
name|LoadSessionAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Load session"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|openIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Load session"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|.
name|get
argument_list|(
literal|"savedSession"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No saved session found."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Loading session..."
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|HashSet
name|currentFiles
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|currentFiles
operator|.
name|add
argument_list|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i0
init|=
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
decl_stmt|;
name|String
index|[]
name|names
init|=
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"savedSession"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|currentFiles
operator|.
name|contains
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|fileToOpen
operator|=
operator|new
name|File
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileToOpen
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//Util.pr("Opening last edited file:"
comment|//+fileToOpen.getName());
name|openDatabaseAction
operator|.
name|openIt
argument_list|(
name|i
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Files opened"
argument_list|)
operator|+
literal|": "
operator|+
operator|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|-
name|i0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ChangeTabAction
class|class
name|ChangeTabAction
extends|extends
name|AbstractAction
block|{
DECL|field|next
specifier|private
name|boolean
name|next
decl_stmt|;
DECL|method|ChangeTabAction (boolean next)
specifier|public
name|ChangeTabAction
parameter_list|(
name|boolean
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|next
condition|?
literal|"Next tab"
else|:
literal|"Previous tab"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
operator|(
name|next
condition|?
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Next tab"
argument_list|)
else|:
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Previous tab"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|i
init|=
name|tabbedPane
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|int
name|newI
init|=
operator|(
name|next
condition|?
name|i
operator|+
literal|1
else|:
name|i
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|newI
operator|<
literal|0
condition|)
name|newI
operator|=
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|newI
operator|==
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|)
name|newI
operator|=
literal|0
expr_stmt|;
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
name|newI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

