begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003 Morten O. Alver, Nizar N. Batada   All programs in this directory and  subdirectories are published under the GNU General Public License as  described below.   This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or (at  your option) any later version.   This program is distributed in the hope that it will be useful, but  WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  General Public License for more details.   You should have received a copy of the GNU General Public License  along with this program; if not, write to the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA   Further information about the GNU GPL is available at:  http://www.gnu.org/copyleft/gpl.ja.html   */
end_comment

begin_comment
comment|// created by : ?
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// modified : r.nagel 23.08.2004
end_comment

begin_comment
comment|//               - insert new Menuitem New Database -> New Database from Aux
end_comment

begin_comment
comment|// modified : juan 10.02.2005
end_comment

begin_comment
comment|//               - insert new Menuitem to the Export menu -> Openoffice
end_comment

begin_comment
comment|//                 export filter
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|label
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|FileActions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|ExpandEndnoteFilters
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|auximport
operator|.
name|gui
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableInsertEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableRemoveEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|ExportCustomizationDialog
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|integrity
operator|.
name|gui
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|GroupSelector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|EntryTableTransferHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|journals
operator|.
name|ManageJournalsAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|MassSetFieldAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|uif_lite
operator|.
name|component
operator|.
name|UIFSplitPane
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|HeaderStyle
import|;
end_import

begin_comment
comment|/**  * The main window of the application.  */
end_comment

begin_class
DECL|class|JabRefFrame
specifier|public
class|class
name|JabRefFrame
extends|extends
name|JFrame
block|{
DECL|field|ths
name|JabRefFrame
name|ths
init|=
name|this
decl_stmt|;
DECL|field|contentPane
name|UIFSplitPane
name|contentPane
init|=
operator|new
name|UIFSplitPane
argument_list|()
decl_stmt|;
DECL|field|prefs
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
comment|//new JabRefPreferences();
DECL|field|prefsDialog
name|PrefsDialog3
name|prefsDialog
init|=
literal|null
decl_stmt|;
DECL|field|lastTabbedPanelSelectionIndex
specifier|private
name|int
name|lastTabbedPanelSelectionIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|// The sidepane manager takes care of populating the sidepane.
DECL|field|sidePaneManager
specifier|public
name|SidePaneManager
name|sidePaneManager
decl_stmt|;
DECL|field|tabbedPane
name|JTabbedPane
name|tabbedPane
init|=
operator|new
name|JTabbedPane
argument_list|()
decl_stmt|;
DECL|field|marg
specifier|final
name|Insets
name|marg
init|=
operator|new
name|Insets
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|class|ToolBar
class|class
name|ToolBar
extends|extends
name|JToolBar
block|{
DECL|method|addAction (Action a)
name|void
name|addAction
parameter_list|(
name|Action
name|a
parameter_list|)
block|{
name|JButton
name|b
init|=
operator|new
name|JButton
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|b
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_MAC
condition|)
name|b
operator|.
name|setMargin
argument_list|(
name|marg
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|tlb
name|ToolBar
name|tlb
init|=
operator|new
name|ToolBar
argument_list|()
decl_stmt|;
DECL|field|mb
name|JMenuBar
name|mb
init|=
operator|new
name|JMenuBar
argument_list|()
decl_stmt|;
DECL|field|gbl
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
DECL|field|statusLine
name|JLabel
name|statusLine
init|=
operator|new
name|JLabel
argument_list|(
literal|""
argument_list|,
name|SwingConstants
operator|.
name|LEFT
argument_list|)
decl_stmt|,
DECL|field|statusLabel
name|statusLabel
init|=
operator|new
name|JLabel
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Status"
argument_list|)
operator|+
literal|":"
argument_list|,
name|SwingConstants
operator|.
name|LEFT
argument_list|)
decl_stmt|;
comment|//SearchManager searchManager  = new SearchManager(ths, prefs);
DECL|field|fileHistory
specifier|private
name|FileHistory
name|fileHistory
init|=
operator|new
name|FileHistory
argument_list|(
name|prefs
argument_list|,
name|this
argument_list|)
decl_stmt|;
DECL|field|labelMaker
name|LabelMaker
name|labelMaker
decl_stmt|;
comment|// The help window.
DECL|field|helpDiag
specifier|public
name|HelpDialog
name|helpDiag
init|=
operator|new
name|HelpDialog
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// Here we instantiate menu/toolbar actions. Actions regarding
comment|// the currently open database are defined as a GeneralAction
comment|// with a unique command string. This causes the appropriate
comment|// BasePanel's runCommand() method to be called with that command.
comment|// Note: GeneralAction's constructor automatically gets translations
comment|// for the name and message strings.
comment|// References to the toggle buttons in the toolbar:
DECL|field|groupToggle
DECL|field|searchToggle
DECL|field|previewToggle
DECL|field|highlightAny
specifier|public
name|JToggleButton
name|groupToggle
decl_stmt|,
name|searchToggle
decl_stmt|,
name|previewToggle
decl_stmt|,
name|highlightAny
decl_stmt|,
DECL|field|highlightAll
name|highlightAll
decl_stmt|;
name|OpenDatabaseAction
DECL|field|open
name|open
init|=
operator|new
name|OpenDatabaseAction
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AbstractAction
DECL|field|close
name|close
init|=
operator|new
name|CloseDatabaseAction
argument_list|()
decl_stmt|,
DECL|field|quit
name|quit
init|=
operator|new
name|CloseAction
argument_list|()
decl_stmt|,
DECL|field|selectKeys
name|selectKeys
init|=
operator|new
name|SelectKeysAction
argument_list|()
decl_stmt|,
DECL|field|newDatabaseAction
name|newDatabaseAction
init|=
operator|new
name|NewDatabaseAction
argument_list|()
decl_stmt|,
DECL|field|newSubDatabaseAction
name|newSubDatabaseAction
init|=
operator|new
name|NewSubDatabaseAction
argument_list|()
decl_stmt|,
DECL|field|integrityCheckAction
name|integrityCheckAction
init|=
operator|new
name|IntegrityCheckAction
argument_list|()
decl_stmt|,
DECL|field|help
name|help
init|=
operator|new
name|HelpAction
argument_list|(
literal|"JabRef help"
argument_list|,
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|baseFrameHelp
argument_list|,
literal|"JabRef help"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Help"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|contents
name|contents
init|=
operator|new
name|HelpAction
argument_list|(
literal|"Help contents"
argument_list|,
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|helpContents
argument_list|,
literal|"Help contents"
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"helpContents"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|about
name|about
init|=
operator|new
name|HelpAction
argument_list|(
literal|"About JabRef"
argument_list|,
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|aboutPage
argument_list|,
literal|"About JabRef"
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"about"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|editEntry
name|editEntry
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"edit"
argument_list|,
literal|"Edit entry"
argument_list|,
literal|"Edit entry"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Edit entry"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|save
name|save
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"save"
argument_list|,
literal|"Save database"
argument_list|,
literal|"Save database"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Save database"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|saveAs
name|saveAs
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"saveAs"
argument_list|,
literal|"Save database as ..."
argument_list|,
literal|"Save database as ..."
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Save database as ..."
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|saveSelectedAs
name|saveSelectedAs
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"saveSelectedAs"
argument_list|,
literal|"Save selected as ..."
argument_list|,
literal|"Save selected as ..."
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"saveAs"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|nextTab
name|nextTab
init|=
operator|new
name|ChangeTabAction
argument_list|(
literal|true
argument_list|)
decl_stmt|,
DECL|field|prevTab
name|prevTab
init|=
operator|new
name|ChangeTabAction
argument_list|(
literal|false
argument_list|)
decl_stmt|,
DECL|field|sortTabs
name|sortTabs
init|=
operator|new
name|SortTabsAction
argument_list|(
name|this
argument_list|)
decl_stmt|,
DECL|field|undo
name|undo
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"undo"
argument_list|,
literal|"Undo"
argument_list|,
literal|"Undo"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Undo"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|redo
name|redo
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"redo"
argument_list|,
literal|"Redo"
argument_list|,
literal|"Redo"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Redo"
argument_list|)
argument_list|)
decl_stmt|,
comment|/*cut = new GeneralAction("cut", "Cut", "Cut",          GUIGlobals.cutIconFile,          prefs.getKey("Cut")),*/
DECL|field|delete
name|delete
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"delete"
argument_list|,
literal|"Delete"
argument_list|,
literal|"Delete"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Delete"
argument_list|)
argument_list|)
decl_stmt|,
comment|/*copy = new GeneralAction("copy", "Copy", "Copy",                                GUIGlobals.copyIconFile,                                prefs.getKey("Copy")),*/
DECL|field|copy
name|copy
init|=
operator|new
name|EditAction
argument_list|(
literal|"copy"
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"copy"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|paste
name|paste
init|=
operator|new
name|EditAction
argument_list|(
literal|"paste"
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"paste"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|cut
name|cut
init|=
operator|new
name|EditAction
argument_list|(
literal|"cut"
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"cut"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|mark
name|mark
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"markEntries"
argument_list|,
literal|"Mark entries"
argument_list|,
literal|"Mark entries"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Mark entries"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|unmark
name|unmark
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"unmarkEntries"
argument_list|,
literal|"Unmark entries"
argument_list|,
literal|"Unmark entries"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Unmark entries"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|unmarkAll
name|unmarkAll
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"unmarkAll"
argument_list|,
literal|"Unmark all"
argument_list|)
decl_stmt|,
DECL|field|manageSelectors
name|manageSelectors
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"manageSelectors"
argument_list|,
literal|"Manage content selectors"
argument_list|)
decl_stmt|,
DECL|field|saveSessionAction
name|saveSessionAction
init|=
operator|new
name|SaveSessionAction
argument_list|()
decl_stmt|,
DECL|field|loadSessionAction
name|loadSessionAction
init|=
operator|new
name|LoadSessionAction
argument_list|()
decl_stmt|,
DECL|field|incrementalSearch
name|incrementalSearch
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"incSearch"
argument_list|,
literal|"Incremental search"
argument_list|,
literal|"Start incremental search"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Incremental search"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|normalSearch
name|normalSearch
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"search"
argument_list|,
literal|"Search"
argument_list|,
literal|"Search"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Search"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|toggleSearch
name|toggleSearch
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"toggleSearch"
argument_list|,
literal|"Search"
argument_list|,
literal|"Toggle search panel"
argument_list|)
decl_stmt|,
DECL|field|fetchCiteSeer
name|fetchCiteSeer
init|=
operator|new
name|FetchCiteSeerAction
argument_list|()
decl_stmt|,
DECL|field|importCiteSeer
name|importCiteSeer
init|=
operator|new
name|ImportCiteSeerAction
argument_list|()
decl_stmt|,
DECL|field|fetchMedline
name|fetchMedline
init|=
operator|new
name|FetchMedlineAction
argument_list|()
decl_stmt|,
DECL|field|citeSeerPanelAction
name|citeSeerPanelAction
init|=
operator|new
name|CiteSeerPanelAction
argument_list|()
decl_stmt|,
comment|//fetchAuthorMedline = new FetchAuthorMedlineAction(),
DECL|field|copyKey
name|copyKey
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"copyKey"
argument_list|,
literal|"Copy BibTeX key"
argument_list|)
decl_stmt|,
comment|//"Put a BibTeX reference to the selected entries on the clipboard",
DECL|field|copyCiteKey
name|copyCiteKey
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"copyCiteKey"
argument_list|,
literal|"Copy \\cite{BibTeX key}"
argument_list|,
comment|//"Put a BibTeX reference to the selected entries on the clipboard",
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Copy \\cite{BibTeX key}"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|mergeDatabaseAction
name|mergeDatabaseAction
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"mergeDatabase"
argument_list|,
literal|"Append database"
argument_list|,
literal|"Append contents from a BibTeX database into the currently viewed database"
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"open"
argument_list|)
argument_list|)
decl_stmt|,
comment|//prefs.getKey("Open")),
comment|/*remove = new GeneralAction("remove", "Remove", "Remove selected entries",         GUIGlobals.removeIconFile),*/
DECL|field|selectAll
name|selectAll
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"selectAll"
argument_list|,
literal|"Select all"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Select all"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|replaceAll
name|replaceAll
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"replaceAll"
argument_list|,
literal|"Replace string"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Replace string"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|editPreamble
name|editPreamble
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"editPreamble"
argument_list|,
literal|"Edit preamble"
argument_list|,
literal|"Edit preamble"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Edit preamble"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|editStrings
name|editStrings
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"editStrings"
argument_list|,
literal|"Edit strings"
argument_list|,
literal|"Edit strings"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Edit strings"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|toggleGroups
name|toggleGroups
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"toggleGroups"
argument_list|,
literal|"Toggle groups interface"
argument_list|,
literal|"Toggle groups interface"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Toggle groups interface"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|togglePreview
name|togglePreview
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"togglePreview"
argument_list|,
literal|"Toggle entry preview"
argument_list|,
literal|"Toggle entry preview"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Toggle entry preview"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|toggleHighlightAny
name|toggleHighlightAny
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"toggleHighlightGroupsMatchingAny"
argument_list|,
literal|"Highlight groups matching any selected entry"
argument_list|,
literal|"Highlight groups matching any selected entry"
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"groupsHighlightAny"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|toggleHighlightAll
name|toggleHighlightAll
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"toggleHighlightGroupsMatchingAll"
argument_list|,
literal|"Highlight groups matching all selected entries"
argument_list|,
literal|"Highlight groups matching all selected entries"
argument_list|,
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"groupsHighlightAll"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|switchPreview
name|switchPreview
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"switchPreview"
argument_list|,
literal|"Switch preview layout"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Switch preview layout"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|makeKeyAction
name|makeKeyAction
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"makeKey"
argument_list|,
literal|"Autogenerate BibTeX keys"
argument_list|,
literal|"Autogenerate BibTeX keys"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Autogenerate BibTeX keys"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|lyxPushAction
name|lyxPushAction
init|=
operator|new
name|PushToApplicationAction
argument_list|(
name|ths
argument_list|,
operator|new
name|PushToLyx
argument_list|()
argument_list|)
decl_stmt|,
DECL|field|winEdtPushAction
name|winEdtPushAction
init|=
operator|new
name|PushToApplicationAction
argument_list|(
name|ths
argument_list|,
operator|new
name|PushToWinEdt
argument_list|()
argument_list|)
decl_stmt|,
DECL|field|latexEditorPushAction
name|latexEditorPushAction
init|=
operator|new
name|PushToApplicationAction
argument_list|(
name|ths
argument_list|,
operator|new
name|PushToLatexEditor
argument_list|()
argument_list|)
decl_stmt|,
DECL|field|writeXmpAction
name|writeXmpAction
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"writeXMP"
argument_list|,
literal|"Write XMP-metadata to PDFs"
argument_list|,
literal|"Will write XMP-metadata to the PDFs linked from selected entries."
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"writeXMP"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|openFile
name|openFile
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"openFile"
argument_list|,
literal|"Open PDF or PS"
argument_list|,
literal|"Open PDF or PS"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Open PDF or PS"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|openUrl
name|openUrl
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"openUrl"
argument_list|,
literal|"Open URL or DOI"
argument_list|,
literal|"Open URL or DOI"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Open URL or DOI"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|dupliCheck
name|dupliCheck
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"dupliCheck"
argument_list|,
literal|"Find duplicates"
argument_list|)
decl_stmt|,
DECL|field|strictDupliCheck
name|strictDupliCheck
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"strictDupliCheck"
argument_list|,
literal|"Find and remove exact duplicates"
argument_list|)
decl_stmt|,
DECL|field|plainTextImport
name|plainTextImport
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"plainTextImport"
argument_list|,
literal|"New entry from plain text"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New from plain text"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|customExpAction
name|customExpAction
init|=
operator|new
name|CustomizeExportsAction
argument_list|()
decl_stmt|,
DECL|field|customImpAction
name|customImpAction
init|=
operator|new
name|CustomizeImportsAction
argument_list|()
decl_stmt|,
DECL|field|exportCSV
name|exportCSV
init|=
operator|new
name|ExportCSV
argument_list|()
decl_stmt|,
DECL|field|exportToClipboard
name|exportToClipboard
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"exportToClipboard"
argument_list|,
literal|"Export selected entries to clipboard"
argument_list|)
decl_stmt|,
DECL|field|expandEndnoteZip
name|expandEndnoteZip
init|=
operator|new
name|ExpandEndnoteFilters
argument_list|(
name|this
argument_list|)
decl_stmt|,
DECL|field|autoSetPdf
name|autoSetPdf
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"autoSetPdf"
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Synchronize %0 links"
argument_list|,
literal|"PDF"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Synchronize PDF"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|autoSetPs
name|autoSetPs
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"autoSetPs"
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Synchronize %0 links"
argument_list|,
literal|"PS"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Synchronize PS"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|abbreviateMedline
name|abbreviateMedline
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"abbreviateMedline"
argument_list|,
literal|"Abbreviate journal names (MEDLINE)"
argument_list|,
literal|"Abbreviate journal names of the selected entries (MEDLINE abbreviation)"
argument_list|)
decl_stmt|,
DECL|field|abbreviateIso
name|abbreviateIso
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"abbreviateIso"
argument_list|,
literal|"Abbreviate journal names (ISO)"
argument_list|,
literal|"Abbreviate journal names of the selected entries (ISO abbreviation)"
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Abbreviate"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|unabbreviate
name|unabbreviate
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"unabbreviate"
argument_list|,
literal|"Unabbreviate journal names"
argument_list|,
literal|"Unabbreviate journal names of the selected entries"
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Unabbreviate"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|manageJournals
name|manageJournals
init|=
operator|new
name|ManageJournalsAction
argument_list|(
name|this
argument_list|)
decl_stmt|,
DECL|field|databaseProperties
name|databaseProperties
init|=
operator|new
name|DatabasePropertiesAction
argument_list|()
decl_stmt|,
DECL|field|emacsPushAction
name|emacsPushAction
init|=
operator|new
name|PushToApplicationAction
argument_list|(
name|ths
argument_list|,
operator|new
name|PushToEmacs
argument_list|()
argument_list|)
decl_stmt|,
DECL|field|errorConsole
name|errorConsole
init|=
name|Globals
operator|.
name|errorConsole
operator|.
name|getAction
argument_list|(
name|this
argument_list|)
decl_stmt|,
DECL|field|test
name|test
init|=
operator|new
name|GeneralAction
argument_list|(
literal|"test"
argument_list|,
literal|"Test"
argument_list|)
decl_stmt|;
DECL|field|pushExternalButton
name|PushToApplicationButton
name|pushExternalButton
decl_stmt|;
comment|/*setupSelector = new GeneralAction("setupSelector", "", "",           GUIGlobals.pasteIconFile,           prefs.getKey(")),*/
DECL|field|medlineFetcher
name|MedlineFetcher
name|medlineFetcher
decl_stmt|;
DECL|field|citeSeerFetcher
name|CiteSeerFetcher
name|citeSeerFetcher
decl_stmt|;
DECL|field|citeSeerFetcherPanel
name|CiteSeerFetcherPanel
name|citeSeerFetcherPanel
decl_stmt|;
DECL|field|ieeexplorerFetcher
name|IEEEXploreFetcher
name|ieeexplorerFetcher
decl_stmt|;
DECL|field|searchManager
name|SearchManager2
name|searchManager
decl_stmt|;
DECL|field|groupSelector
specifier|public
name|GroupSelector
name|groupSelector
decl_stmt|;
comment|// The menus for importing/appending other formats
DECL|field|importMenu
name|JMenu
name|importMenu
init|=
name|subMenu
argument_list|(
literal|"Import into current database"
argument_list|)
decl_stmt|,
DECL|field|importNewMenu
name|importNewMenu
init|=
name|subMenu
argument_list|(
literal|"Import into new database"
argument_list|)
decl_stmt|,
DECL|field|exportMenu
name|exportMenu
init|=
name|subMenu
argument_list|(
literal|"Export"
argument_list|)
decl_stmt|,
DECL|field|customExportMenu
name|customExportMenu
init|=
name|subMenu
argument_list|(
literal|"Custom export"
argument_list|)
decl_stmt|,
DECL|field|newDatabaseMenu
name|newDatabaseMenu
init|=
name|subMenu
argument_list|(
literal|"New database"
argument_list|)
decl_stmt|;
comment|// Other submenus
DECL|field|checkAndFix
name|JMenu
name|checkAndFix
init|=
name|subMenu
argument_list|(
literal|"Scan database..."
argument_list|)
decl_stmt|;
comment|// The action for adding a new entry of unspecified type.
DECL|field|newEntryAction
name|NewEntryAction
name|newEntryAction
init|=
operator|new
name|NewEntryAction
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New entry"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|newSpecificEntryAction
name|NewEntryAction
index|[]
name|newSpecificEntryAction
init|=
operator|new
name|NewEntryAction
index|[]
block|{
operator|new
name|NewEntryAction
argument_list|(
literal|"article"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New article"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"book"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New book"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"phdthesis"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New phdthesis"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"inbook"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New inbook"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"mastersthesis"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New mastersthesis"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"proceedings"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New proceedings"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"inproceedings"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"conference"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"incollection"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"booklet"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"manual"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"techreport"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"unpublished"
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"New unpublished"
argument_list|)
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"misc"
argument_list|)
block|,
operator|new
name|NewEntryAction
argument_list|(
literal|"other"
argument_list|)
block|}
decl_stmt|;
DECL|method|JabRefFrame ()
specifier|public
name|JabRefFrame
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
name|setEmptyState
argument_list|()
expr_stmt|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
comment|/*try {         //UIManager.setLookAndFeel("com.jgoodies.plaf.windows.ExtWindowsLookAndFeel");         UIManager.setLookAndFeel(new PlasticXPLookAndFeel());         } catch (Exception e) { e.printStackTrace();}*/
comment|//Globals.setLanguage("no", "");
name|macOSXRegistration
argument_list|()
expr_stmt|;
name|MyGlassPane
name|glassPane
init|=
operator|new
name|MyGlassPane
argument_list|()
decl_stmt|;
name|setGlassPane
argument_list|(
name|glassPane
argument_list|)
expr_stmt|;
comment|//  glassPane.setVisible(true);
name|setTitle
argument_list|(
name|GUIGlobals
operator|.
name|frameTitle
argument_list|)
expr_stmt|;
name|setIconImage
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"jabrefIcon"
argument_list|)
operator|.
name|getImage
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultCloseOperation
argument_list|(
name|WindowConstants
operator|.
name|DO_NOTHING_ON_CLOSE
argument_list|)
expr_stmt|;
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
operator|(
operator|new
name|CloseAction
argument_list|()
operator|)
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initLabelMaker
argument_list|()
expr_stmt|;
name|initSidePane
argument_list|()
expr_stmt|;
name|setupLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"rememberWindowLocation"
argument_list|)
condition|)
block|{
name|setSize
argument_list|(
operator|new
name|Dimension
argument_list|(
name|prefs
operator|.
name|getInt
argument_list|(
literal|"sizeX"
argument_list|)
argument_list|,
name|prefs
operator|.
name|getInt
argument_list|(
literal|"sizeY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setLocation
argument_list|(
operator|new
name|Point
argument_list|(
name|prefs
operator|.
name|getInt
argument_list|(
literal|"posX"
argument_list|)
argument_list|,
name|prefs
operator|.
name|getInt
argument_list|(
literal|"posY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tabbedPane
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|setForeground
argument_list|(
name|GUIGlobals
operator|.
name|inActiveTabbed
argument_list|)
expr_stmt|;
comment|// The following state listener makes sure focus is registered with the correct database
comment|// when the user switches tabs. Without this, cut/paste/copy operations would some times
comment|// occur in the wrong tab.
name|tabbedPane
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
name|markActiveBasePanel
argument_list|()
expr_stmt|;
name|BasePanel
name|bp
init|=
name|basePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
name|groupToggle
operator|.
name|setSelected
argument_list|(
name|sidePaneManager
operator|.
name|isComponentVisible
argument_list|(
literal|"groups"
argument_list|)
argument_list|)
expr_stmt|;
name|searchToggle
operator|.
name|setSelected
argument_list|(
name|sidePaneManager
operator|.
name|isComponentVisible
argument_list|(
literal|"search"
argument_list|)
argument_list|)
expr_stmt|;
name|previewToggle
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"previewEnabled"
argument_list|)
argument_list|)
expr_stmt|;
name|highlightAny
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"highlightGroupsMatchingAny"
argument_list|)
argument_list|)
expr_stmt|;
name|highlightAll
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"highlightGroupsMatchingAll"
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|focusListener
operator|.
name|setFocused
argument_list|(
name|bp
operator|.
name|mainTable
argument_list|)
expr_stmt|;
operator|new
name|FocusRequester
argument_list|(
name|bp
operator|.
name|mainTable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|initSidePane ()
specifier|private
name|void
name|initSidePane
parameter_list|()
block|{
name|sidePaneManager
operator|=
operator|new
name|SidePaneManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|sidePaneManager
operator|=
name|this
operator|.
name|sidePaneManager
expr_stmt|;
name|Globals
operator|.
name|helpDiag
operator|=
name|this
operator|.
name|helpDiag
expr_stmt|;
name|ieeexplorerFetcher
operator|=
operator|new
name|IEEEXploreFetcher
argument_list|()
expr_stmt|;
name|medlineFetcher
operator|=
operator|new
name|MedlineFetcher
argument_list|(
name|sidePaneManager
argument_list|)
expr_stmt|;
name|citeSeerFetcher
operator|=
operator|new
name|CiteSeerFetcher
argument_list|(
name|sidePaneManager
argument_list|)
expr_stmt|;
name|citeSeerFetcherPanel
operator|=
operator|new
name|CiteSeerFetcherPanel
argument_list|(
name|sidePaneManager
argument_list|,
operator|(
name|CiteSeerFetcher
operator|)
name|citeSeerFetcher
argument_list|)
expr_stmt|;
name|groupSelector
operator|=
operator|new
name|GroupSelector
argument_list|(
name|this
argument_list|,
name|sidePaneManager
argument_list|)
expr_stmt|;
name|searchManager
operator|=
operator|new
name|SearchManager2
argument_list|(
name|this
argument_list|,
name|sidePaneManager
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|register
argument_list|(
literal|"fetchMedline"
argument_list|,
name|medlineFetcher
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|register
argument_list|(
literal|"CiteSeerProgress"
argument_list|,
name|citeSeerFetcher
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|register
argument_list|(
literal|"CiteSeerPanel"
argument_list|,
name|citeSeerFetcherPanel
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|register
argument_list|(
literal|"groups"
argument_list|,
name|groupSelector
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|register
argument_list|(
literal|"search"
argument_list|,
name|searchManager
argument_list|)
expr_stmt|;
comment|// Show the search panel if it was visible at last shutdown:
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchPanelVisible"
argument_list|)
condition|)
name|sidePaneManager
operator|.
name|show
argument_list|(
literal|"search"
argument_list|)
expr_stmt|;
block|}
DECL|field|aboutAction
name|AboutAction
name|aboutAction
init|=
operator|new
name|AboutAction
argument_list|()
decl_stmt|;
DECL|class|AboutAction
class|class
name|AboutAction
extends|extends
name|AbstractAction
block|{
DECL|method|AboutAction ()
specifier|public
name|AboutAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"About JabRef"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|about
argument_list|()
expr_stmt|;
block|}
block|}
comment|// General info dialog.  The OSXAdapter calls this method when "About OSXAdapter"
comment|// is selected from the application menu.
DECL|method|about ()
specifier|public
name|void
name|about
parameter_list|()
block|{
name|JDialog
name|about
init|=
operator|new
name|JDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"About JabRef"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JEditorPane
name|jp
init|=
operator|new
name|JEditorPane
argument_list|()
decl_stmt|;
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
name|jp
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
decl_stmt|;
name|jp
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|jp
operator|.
name|setPage
argument_list|(
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/help/About.html"
argument_list|)
argument_list|)
expr_stmt|;
comment|//GUIGlobals.aboutPage);
comment|// We need a hyperlink listener to be able to switch to the license
comment|// terms and back.
name|jp
operator|.
name|addHyperlinkListener
argument_list|(
operator|new
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|HyperlinkListener
argument_list|()
block|{
specifier|public
name|void
name|hyperlinkUpdate
parameter_list|(
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|HyperlinkEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getEventType
argument_list|()
operator|==
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|HyperlinkEvent
operator|.
name|EventType
operator|.
name|ACTIVATED
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|JEditorPane
operator|)
name|e
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|setPage
argument_list|(
name|e
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|about
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|about
operator|.
name|setSize
argument_list|(
name|GUIGlobals
operator|.
name|aboutSize
argument_list|)
expr_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|about
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|about
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|ths
argument_list|,
literal|"Could not load file 'About.html'"
argument_list|,
literal|"Error"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// General preferences dialog.  The OSXAdapter calls this method when "Preferences..."
comment|// is selected from the application menu.
DECL|method|preferences ()
specifier|public
name|void
name|preferences
parameter_list|()
block|{
comment|//PrefsDialog.showPrefsDialog(ths, prefs);
name|AbstractWorker
name|worker
init|=
operator|new
name|AbstractWorker
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Opening preferences..."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefsDialog
operator|==
literal|null
condition|)
block|{
name|prefsDialog
operator|=
operator|new
name|PrefsDialog3
argument_list|(
name|ths
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|prefsDialog
argument_list|,
name|ths
argument_list|)
expr_stmt|;
block|}
else|else
name|prefsDialog
operator|.
name|setValues
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
name|prefsDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|output
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|worker
operator|.
name|getWorker
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
name|worker
operator|.
name|getCallBack
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|prefs ()
specifier|public
name|JabRefPreferences
name|prefs
parameter_list|()
block|{
return|return
name|prefs
return|;
block|}
comment|// General info dialog.  The OSXAdapter calls this method when "Quit OSXAdapter"
comment|// is selected from the application menu, Cmd-Q is pressed, or "Quit" is selected from the Dock.
DECL|method|quit ()
specifier|public
name|void
name|quit
parameter_list|()
block|{
comment|// Ask here if the user really wants to close, if the base
comment|// has not been saved since last save.
name|boolean
name|close
init|=
literal|true
decl_stmt|;
name|Vector
name|filenames
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|loop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|baseChanged
condition|)
block|{
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Database has changed. Do you "
operator|+
literal|"want to save before closing?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save before closing"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_CANCEL_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CANCEL_OPTION
operator|)
operator|||
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CLOSED_OPTION
operator|)
condition|)
block|{
name|close
operator|=
literal|false
expr_stmt|;
comment|// The user has cancelled.
return|return;
block|}
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|// The user wants to save.
try|try
block|{
name|basePanel
argument_list|()
operator|.
name|runCommand
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// Something prevented the file
comment|// from being saved. Break!!!
name|close
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|filenames
operator|.
name|add
argument_list|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|close
condition|)
block|{
name|dispose
argument_list|()
expr_stmt|;
name|prefs
operator|.
name|putInt
argument_list|(
literal|"posX"
argument_list|,
name|ths
operator|.
name|getLocation
argument_list|()
operator|.
name|x
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putInt
argument_list|(
literal|"posY"
argument_list|,
name|ths
operator|.
name|getLocation
argument_list|()
operator|.
name|y
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putInt
argument_list|(
literal|"sizeX"
argument_list|,
name|ths
operator|.
name|getSize
argument_list|()
operator|.
name|width
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putInt
argument_list|(
literal|"sizeY"
argument_list|,
name|ths
operator|.
name|getSize
argument_list|()
operator|.
name|height
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchPanelVisible"
argument_list|,
name|sidePaneManager
operator|.
name|isComponentVisible
argument_list|(
literal|"search"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"openLastEdited"
argument_list|)
condition|)
block|{
comment|// Here we store the names of allcurrent filea. If
comment|// there is no current file, we remove any
comment|// previously stored file name.
if|if
condition|(
name|filenames
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|prefs
operator|.
name|remove
argument_list|(
literal|"lastEdited"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|filenames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filenames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
operator|(
name|String
operator|)
name|filenames
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|prefs
operator|.
name|putStringArray
argument_list|(
literal|"lastEdited"
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
block|}
name|fileHistory
operator|.
name|storeHistory
argument_list|()
expr_stmt|;
name|prefs
operator|.
name|customExports
operator|.
name|store
argument_list|()
expr_stmt|;
name|prefs
operator|.
name|customImports
operator|.
name|store
argument_list|()
expr_stmt|;
name|BibtexEntryType
operator|.
name|saveCustomEntryTypes
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
comment|// Let the search interface store changes to prefs.
comment|// But which one? Let's use the one that is visible.
if|if
condition|(
name|basePanel
argument_list|()
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|SearchManager2
operator|)
name|searchManager
operator|)
operator|.
name|updatePrefs
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// End program.
block|}
block|}
DECL|method|macOSXRegistration ()
specifier|private
name|void
name|macOSXRegistration
parameter_list|()
block|{
if|if
condition|(
name|Globals
operator|.
name|osName
operator|.
name|equals
argument_list|(
name|Globals
operator|.
name|MAC
argument_list|)
condition|)
block|{
try|try
block|{
name|Class
name|osxAdapter
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"osxadapter.OSXAdapter"
argument_list|)
decl_stmt|;
name|Class
index|[]
name|defArgs
init|=
block|{
name|JabRefFrame
operator|.
name|class
block|}
decl_stmt|;
name|Method
name|registerMethod
init|=
name|osxAdapter
operator|.
name|getDeclaredMethod
argument_list|(
literal|"registerMacOSXApplication"
argument_list|,
name|defArgs
argument_list|)
decl_stmt|;
if|if
condition|(
name|registerMethod
operator|!=
literal|null
condition|)
block|{
name|Object
index|[]
name|args
init|=
block|{
name|this
block|}
decl_stmt|;
name|registerMethod
operator|.
name|invoke
argument_list|(
name|osxAdapter
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|// This is slightly gross.  to reflectively access methods with boolean args,
comment|// use "boolean.class", then pass a Boolean object in as the arg, which apparently
name|defArgs
index|[
literal|0
index|]
operator|=
name|boolean
operator|.
name|class
expr_stmt|;
name|Method
name|prefsEnableMethod
init|=
name|osxAdapter
operator|.
name|getDeclaredMethod
argument_list|(
literal|"enablePrefs"
argument_list|,
name|defArgs
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefsEnableMethod
operator|!=
literal|null
condition|)
block|{
name|Object
name|args
index|[]
init|=
block|{
name|Boolean
operator|.
name|TRUE
block|}
decl_stmt|;
name|prefsEnableMethod
operator|.
name|invoke
argument_list|(
name|osxAdapter
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
comment|// This will be thrown first if the OSXAdapter is loaded on a system without the EAWT
comment|// because OSXAdapter extends ApplicationAdapter in its def
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"This version of Mac OS X does not support the Apple EAWT.  Application Menu handling has been disabled ("
operator|+
name|e
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// This shouldn't be reached; if there's a problem with the OSXAdapter we should get the
comment|// above NoClassDefFoundError first.
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"This version of Mac OS X does not support the Apple EAWT.  Application Menu handling has been disabled ("
operator|+
name|e
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception while loading the OSXAdapter:"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setupLayout ()
specifier|private
name|void
name|setupLayout
parameter_list|()
block|{
name|tabbedPane
operator|.
name|putClientProperty
argument_list|(
name|Options
operator|.
name|NO_CONTENT_BORDER_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|pushExternalButton
operator|=
operator|new
name|PushToApplicationButton
argument_list|(
name|this
argument_list|,
name|PushToApplicationButton
operator|.
name|applications
argument_list|)
expr_stmt|;
name|fillMenu
argument_list|()
expr_stmt|;
name|createToolBar
argument_list|()
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setDividerSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//getContentPane().setBackground(GUIGlobals.lightGray);
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
comment|//gbl.setConstraints(mb, con);
comment|//getContentPane().add(mb);
name|setJMenuBar
argument_list|(
name|mb
argument_list|)
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|NORTH
expr_stmt|;
comment|//con.gridwidth = 1;//GridBagConstraints.REMAINDER;;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|tlb
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|tlb
argument_list|)
expr_stmt|;
name|Component
name|lim
init|=
name|Box
operator|.
name|createGlue
argument_list|()
decl_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lim
argument_list|,
name|con
argument_list|)
expr_stmt|;
comment|//getContentPane().add(lim);
comment|/*       JPanel empt = new JPanel();       empt.setBackground(GUIGlobals.lightGray);       gbl.setConstraints(empt, con);            getContentPane().add(empt);        con.insets = new Insets(1,0,1,1);       con.anchor = GridBagConstraints.EAST;       con.weightx = 0;       gbl.setConstraints(searchManager, con);       getContentPane().add(searchManager);*/
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|lim
operator|=
name|Box
operator|.
name|createGlue
argument_list|()
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lim
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|lim
argument_list|)
expr_stmt|;
comment|//tabbedPane.setVisible(false);
comment|//tabbedPane.setForeground(GUIGlobals.lightGray);
name|con
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|contentPane
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|contentPane
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setRightComponent
argument_list|(
name|tabbedPane
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setLeftComponent
argument_list|(
name|sidePaneManager
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|updateView
argument_list|()
expr_stmt|;
name|JPanel
name|status
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|status
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|statusLabel
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|statusLabel
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|statusLine
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|statusLine
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|statusLabel
operator|.
name|setForeground
argument_list|(
name|GUIGlobals
operator|.
name|validFieldColor
operator|.
name|darker
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|status
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// Drag and drop for tabbedPane:
name|TransferHandler
name|xfer
init|=
operator|new
name|EntryTableTransferHandler
argument_list|(
literal|null
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tabbedPane
operator|.
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|getPanel
argument_list|()
operator|.
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
block|}
DECL|method|initLabelMaker ()
specifier|private
name|void
name|initLabelMaker
parameter_list|()
block|{
comment|// initialize the labelMaker
name|labelMaker
operator|=
operator|new
name|LabelMaker
argument_list|()
expr_stmt|;
name|labelMaker
operator|.
name|addRule
argument_list|(
operator|new
name|ArticleLabelRule
argument_list|()
argument_list|,
name|BibtexEntryType
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|labelMaker
operator|.
name|addRule
argument_list|(
operator|new
name|BookLabelRule
argument_list|()
argument_list|,
name|BibtexEntryType
operator|.
name|BOOK
argument_list|)
expr_stmt|;
name|labelMaker
operator|.
name|addRule
argument_list|(
operator|new
name|IncollectionLabelRule
argument_list|()
argument_list|,
name|BibtexEntryType
operator|.
name|INCOLLECTION
argument_list|)
expr_stmt|;
name|labelMaker
operator|.
name|addRule
argument_list|(
operator|new
name|InproceedingsLabelRule
argument_list|()
argument_list|,
name|BibtexEntryType
operator|.
name|INPROCEEDINGS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the indexed BasePanel.    * @param i Index of base    */
DECL|method|baseAt (int i)
name|BasePanel
name|baseAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|showBaseAt (int i)
specifier|public
name|void
name|showBaseAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the currently viewed BasePanel.    */
DECL|method|basePanel ()
specifier|public
name|BasePanel
name|basePanel
parameter_list|()
block|{
return|return
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
return|;
block|}
comment|/**    * handle the color of active and inactive JTabbedPane tabs    */
DECL|method|markActiveBasePanel ()
specifier|private
name|void
name|markActiveBasePanel
parameter_list|()
block|{
name|int
name|now
init|=
name|tabbedPane
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|lastTabbedPanelSelectionIndex
operator|>
operator|-
literal|1
operator|)
operator|&&
operator|(
name|lastTabbedPanelSelectionIndex
operator|<
name|len
operator|)
condition|)
name|tabbedPane
operator|.
name|setForegroundAt
argument_list|(
name|lastTabbedPanelSelectionIndex
argument_list|,
name|GUIGlobals
operator|.
name|inActiveTabbed
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|now
operator|>
operator|-
literal|1
operator|)
operator|&&
operator|(
name|now
operator|<
name|len
operator|)
condition|)
name|tabbedPane
operator|.
name|setForegroundAt
argument_list|(
name|now
argument_list|,
name|GUIGlobals
operator|.
name|activeTabbed
argument_list|)
expr_stmt|;
name|lastTabbedPanelSelectionIndex
operator|=
name|now
expr_stmt|;
block|}
DECL|method|getTabIndex (JComponent comp)
specifier|private
name|int
name|getTabIndex
parameter_list|(
name|JComponent
name|comp
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
name|i
argument_list|)
operator|==
name|comp
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|getTabbedPane ()
specifier|public
name|JTabbedPane
name|getTabbedPane
parameter_list|()
block|{
return|return
name|tabbedPane
return|;
block|}
DECL|method|getTabTitle (JComponent comp)
specifier|public
name|String
name|getTabTitle
parameter_list|(
name|JComponent
name|comp
parameter_list|)
block|{
return|return
name|tabbedPane
operator|.
name|getTitleAt
argument_list|(
name|getTabIndex
argument_list|(
name|comp
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getTabTooltip (JComponent comp)
specifier|public
name|String
name|getTabTooltip
parameter_list|(
name|JComponent
name|comp
parameter_list|)
block|{
return|return
name|tabbedPane
operator|.
name|getToolTipTextAt
argument_list|(
name|getTabIndex
argument_list|(
name|comp
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setTabTitle (JComponent comp, String title, String toolTip)
specifier|public
name|void
name|setTabTitle
parameter_list|(
name|JComponent
name|comp
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|toolTip
parameter_list|)
block|{
name|int
name|index
init|=
name|getTabIndex
argument_list|(
name|comp
argument_list|)
decl_stmt|;
name|tabbedPane
operator|.
name|setTitleAt
argument_list|(
name|index
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|setToolTipTextAt
argument_list|(
name|index
argument_list|,
name|toolTip
argument_list|)
expr_stmt|;
block|}
DECL|class|GeneralAction
class|class
name|GeneralAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|command
specifier|private
name|String
name|command
decl_stmt|;
DECL|method|GeneralAction (String command, String text, String description, URL icon)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|URL
name|icon
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|ImageIcon
argument_list|(
name|icon
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, String description, String imageName, KeyStroke key)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|imageName
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
name|imageName
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|putValue
argument_list|(
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, KeyStroke key)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, String description)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|ImageIcon
name|icon
init|=
name|GUIGlobals
operator|.
name|getImage
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|icon
operator|!=
literal|null
condition|)
name|putValue
argument_list|(
name|SMALL_ICON
argument_list|,
name|icon
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, String description, KeyStroke key)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|ImageIcon
name|icon
init|=
name|GUIGlobals
operator|.
name|getImage
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|icon
operator|!=
literal|null
condition|)
name|putValue
argument_list|(
name|SMALL_ICON
argument_list|,
name|icon
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
comment|/*    public GeneralAction(String command, String text, String description,                            URL imageUrl, KeyStroke key) {       this.command = command;         ImageIcon icon = GUIGlobals.getImage(command);         if (icon != null)             putValue(SMALL_ICON, icon);       putValue(NAME, text);       putValue(SHORT_DESCRIPTION, Globals.lang(description));         putValue(ACCELERATOR_KEY, key);     }*/
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
operator|(
call|(
name|BasePanel
call|)
argument_list|(
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
argument_list|)
operator|)
operator|.
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|Util
operator|.
name|pr
argument_list|(
literal|"Action '"
operator|+
name|command
operator|+
literal|"' must be disabled when no "
operator|+
literal|"database is open."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** This got removed when we introduced SearchManager2.        class IncrementalSearchAction extends AbstractAction {     public IncrementalSearchAction() {    super("Incremental search", new ImageIcon(GUIGlobals.searchIconFile));    putValue(SHORT_DESCRIPTION, Globals.lang("Start incremental search"));    putValue(ACCELERATOR_KEY, prefs.getKey("Incremental search"));     }     public void actionPerformed(ActionEvent e) {    if (tabbedPane.getTabCount()> 0)      searchManager.startIncrementalSearch();     }        }         class SearchAction extends AbstractAction {     public SearchAction() {    super("Search", new ImageIcon(GUIGlobals.searchIconFile));    putValue(SHORT_DESCRIPTION, Globals.lang("Start search"));    putValue(ACCELERATOR_KEY, prefs.getKey("Search"));     }     public void actionPerformed(ActionEvent e) {    if (tabbedPane.getTabCount()> 0)      searchManager.startSearch();     }        }    */
DECL|class|NewEntryAction
class|class
name|NewEntryAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|type
name|String
name|type
init|=
literal|null
decl_stmt|;
comment|// The type of item to create.
DECL|field|keyStroke
name|KeyStroke
name|keyStroke
init|=
literal|null
decl_stmt|;
comment|// Used for the specific instances.
DECL|method|NewEntryAction (KeyStroke key)
specifier|public
name|NewEntryAction
parameter_list|(
name|KeyStroke
name|key
parameter_list|)
block|{
comment|// This action leads to a dialog asking for entry type.
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"add"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"New entry"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"New BibTeX entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|NewEntryAction (String type_)
specifier|public
name|NewEntryAction
parameter_list|(
name|String
name|type_
parameter_list|)
block|{
comment|// This action leads to the creation of a specific entry.
name|putValue
argument_list|(
name|NAME
argument_list|,
name|Util
operator|.
name|nCase
argument_list|(
name|type_
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|=
name|type_
expr_stmt|;
block|}
DECL|method|NewEntryAction (String type_, KeyStroke key)
specifier|public
name|NewEntryAction
parameter_list|(
name|String
name|type_
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
comment|// This action leads to the creation of a specific entry.
name|putValue
argument_list|(
name|NAME
argument_list|,
name|Util
operator|.
name|nCase
argument_list|(
name|type_
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|type
operator|=
name|type_
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|thisType
init|=
name|type
decl_stmt|;
if|if
condition|(
name|thisType
operator|==
literal|null
condition|)
block|{
name|EntryTypeDialog
name|etd
init|=
operator|new
name|EntryTypeDialog
argument_list|(
name|ths
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|etd
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|etd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibtexEntryType
name|tp
init|=
name|etd
operator|.
name|getChoice
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|thisType
operator|=
name|tp
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
operator|(
call|(
name|BasePanel
call|)
argument_list|(
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
argument_list|)
operator|)
operator|.
name|newEntry
argument_list|(
name|BibtexEntryType
operator|.
name|getType
argument_list|(
name|thisType
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Util
operator|.
name|pr
argument_list|(
literal|"Action 'New entry' must be disabled when no "
operator|+
literal|"database is open."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*        private void setupDatabaseLayout() {     // This method is called whenever this frame has been provided     // with a database, and completes the layout.       if (file != null)    setTitle(GUIGlobals.baseTitle+file.getName());     else     setTitle(GUIGlobals.untitledTitle);      //DragNDropManager dndm = new DragNDropManager(this);      //setNonEmptyState();     Util.pr("JabRefFrame: Must set non-empty state.");     }*/
comment|/**    * Refresh import menus.    */
DECL|method|setUpImportMenus ()
specifier|public
name|void
name|setUpImportMenus
parameter_list|()
block|{
name|setUpImportMenu
argument_list|(
name|importMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setUpImportMenu
argument_list|(
name|importNewMenu
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|fillMenu ()
specifier|private
name|void
name|fillMenu
parameter_list|()
block|{
comment|//mb.putClientProperty(Options.HEADER_STYLE_KEY, HeaderStyle.BOTH);
name|mb
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|JMenu
name|file
init|=
name|subMenu
argument_list|(
literal|"File"
argument_list|)
decl_stmt|,
name|edit
init|=
name|subMenu
argument_list|(
literal|"Edit"
argument_list|)
decl_stmt|,
name|bibtex
init|=
name|subMenu
argument_list|(
literal|"BibTeX"
argument_list|)
decl_stmt|,
name|view
init|=
name|subMenu
argument_list|(
literal|"View"
argument_list|)
decl_stmt|,
name|tools
init|=
name|subMenu
argument_list|(
literal|"Tools"
argument_list|)
decl_stmt|,
name|web
init|=
name|subMenu
argument_list|(
literal|"Web search"
argument_list|)
decl_stmt|,
name|options
init|=
name|subMenu
argument_list|(
literal|"Options"
argument_list|)
decl_stmt|,
name|newSpec
init|=
name|subMenu
argument_list|(
literal|"New entry..."
argument_list|)
decl_stmt|,
name|helpMenu
init|=
name|subMenu
argument_list|(
literal|"Help"
argument_list|)
decl_stmt|;
name|setUpImportMenus
argument_list|()
expr_stmt|;
name|setUpExportMenu
argument_list|(
name|exportMenu
argument_list|)
expr_stmt|;
name|setUpCustomExportMenu
argument_list|()
expr_stmt|;
name|newDatabaseMenu
operator|.
name|add
argument_list|(
name|newDatabaseAction
argument_list|)
expr_stmt|;
name|newDatabaseMenu
operator|.
name|add
argument_list|(
name|newSubDatabaseAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|newDatabaseAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|open
argument_list|)
expr_stmt|;
comment|//opendatabaseaction
name|file
operator|.
name|add
argument_list|(
name|mergeDatabaseAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|importMenu
argument_list|)
expr_stmt|;
comment|//file.add(importMenu);
name|file
operator|.
name|add
argument_list|(
name|importNewMenu
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|save
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|saveAs
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|saveSelectedAs
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|exportMenu
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|customExportMenu
argument_list|)
expr_stmt|;
name|file
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|databaseProperties
argument_list|)
expr_stmt|;
name|file
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|fileHistory
argument_list|)
expr_stmt|;
comment|//file.addSeparator();
name|file
operator|.
name|add
argument_list|(
name|loadSessionAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|saveSessionAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|close
argument_list|)
expr_stmt|;
comment|//==============================
comment|// NB: I added this because my frame borders are so tiny that I cannot click
comment|// on the "x" close button. Anyways, I think it is good to have and "exit" button
comment|// I was too lazy to make a new ExitAction
comment|//JMenuItem exit_mItem = new JMenuItem(Globals.lang("Exit"));
comment|//exit_mItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, KeyEvent.CTRL_MASK)); //Ctrl-Q to exit
comment|// above keybinding should be from user define
comment|//exit_mItem.addActionListener(new CloseAction() );
comment|//file.add( exit_mItem);
comment|//=====================================
name|file
operator|.
name|add
argument_list|(
name|quit
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|//edit.add(test);
name|edit
operator|.
name|add
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|redo
argument_list|)
expr_stmt|;
name|edit
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|cut
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|paste
argument_list|)
expr_stmt|;
comment|//edit.add(remove);
name|edit
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|copyKey
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|copyCiteKey
argument_list|)
expr_stmt|;
comment|//edit.add(exportToClipboard);
name|edit
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|mark
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|unmark
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|unmarkAll
argument_list|)
expr_stmt|;
name|edit
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|selectAll
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|edit
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|nextTab
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|prevTab
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|sortTabs
argument_list|)
expr_stmt|;
name|view
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|toggleGroups
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|togglePreview
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|switchPreview
argument_list|)
expr_stmt|;
name|view
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|toggleHighlightAny
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|toggleHighlightAll
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|newEntryAction
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newSpecificEntryAction
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newSpec
operator|.
name|add
argument_list|(
name|newSpecificEntryAction
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|bibtex
operator|.
name|add
argument_list|(
name|newSpec
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|plainTextImport
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|editEntry
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|importCiteSeer
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|editPreamble
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|editStrings
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|bibtex
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|normalSearch
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|incrementalSearch
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|replaceAll
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
operator|new
name|MassSetFieldAction
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|makeKeyAction
argument_list|)
expr_stmt|;
comment|// [kiar] I think we should group these festures
name|tools
operator|.
name|add
argument_list|(
name|checkAndFix
argument_list|)
expr_stmt|;
name|checkAndFix
operator|.
name|add
argument_list|(
name|dupliCheck
argument_list|)
expr_stmt|;
name|checkAndFix
operator|.
name|add
argument_list|(
name|strictDupliCheck
argument_list|)
expr_stmt|;
name|checkAndFix
operator|.
name|add
argument_list|(
name|autoSetPdf
argument_list|)
expr_stmt|;
name|checkAndFix
operator|.
name|add
argument_list|(
name|autoSetPs
argument_list|)
expr_stmt|;
name|checkAndFix
operator|.
name|add
argument_list|(
name|integrityCheckAction
argument_list|)
expr_stmt|;
name|tools
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|manageSelectors
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|pushExternalButton
operator|.
name|getMenuAction
argument_list|()
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|writeXmpAction
argument_list|)
expr_stmt|;
comment|//tools.add(emacsPushAction);
comment|//tools.add(lyxPushAction);
comment|//tools.add(winEdtPushAction);
comment|//tools.add(latexEditorPushAction);
comment|//tools.add(fetchAuthorMedline);
name|tools
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|openFile
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|openUrl
argument_list|)
expr_stmt|;
name|tools
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|newSubDatabaseAction
argument_list|)
expr_stmt|;
name|tools
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|abbreviateIso
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|abbreviateMedline
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|unabbreviate
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|tools
argument_list|)
expr_stmt|;
name|web
operator|.
name|add
argument_list|(
name|fetchMedline
argument_list|)
expr_stmt|;
name|web
operator|.
name|add
argument_list|(
name|citeSeerPanelAction
argument_list|)
expr_stmt|;
name|web
operator|.
name|add
argument_list|(
name|fetchCiteSeer
argument_list|)
expr_stmt|;
name|GeneralFetcher
name|ieex
init|=
operator|new
name|GeneralFetcher
argument_list|(
name|sidePaneManager
argument_list|,
name|this
argument_list|,
name|ieeexplorerFetcher
argument_list|)
decl_stmt|;
name|web
operator|.
name|add
argument_list|(
name|ieex
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|web
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|showPrefs
argument_list|)
expr_stmt|;
name|AbstractAction
name|customizeAction
init|=
operator|new
name|CustomizeEntryTypeAction
argument_list|()
decl_stmt|;
name|AbstractAction
name|genFieldsCustomization
init|=
operator|new
name|GenFieldsCustomizationAction
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
name|customizeAction
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|genFieldsCustomization
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|customExpAction
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|customImpAction
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|manageJournals
argument_list|)
expr_stmt|;
comment|/*options.add(new AbstractAction("Font") {     public void actionPerformed(ActionEvent e) {         // JDialog dl = new EntryCustomizationDialog(ths);         Font f=new FontSelectorDialog       (ths, GUIGlobals.CURRENTFONT).getSelectedFont();      if(f==null)       return;      else       GUIGlobals.CURRENTFONT=f;      // updatefont      prefs.put("fontFamily", GUIGlobals.CURRENTFONT.getFamily());      prefs.putInt("fontStyle", GUIGlobals.CURRENTFONT.getStyle());      prefs.putInt("fontSize", GUIGlobals.CURRENTFONT.getSize());      if (tabbedPane.getTabCount()> 0) {       for (int i=0; i<tabbedPane.getTabCount(); i++) {        baseAt(i).entryTable.updateFont();        baseAt(i).refreshTable();       }      }     }     });*/
comment|//options.add(selectKeys);
name|mb
operator|.
name|add
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
comment|//old about    helpMenu.add(about);
name|helpMenu
operator|.
name|add
argument_list|(
name|about
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|helpMenu
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|errorConsole
argument_list|)
expr_stmt|;
block|}
DECL|method|subMenu (String name)
specifier|private
name|JMenu
name|subMenu
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|Globals
operator|.
name|menuTitle
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|)
decl_stmt|;
name|JMenu
name|res
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|res
operator|=
operator|new
name|JMenu
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|mnemonic
init|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|res
operator|.
name|setMnemonic
argument_list|(
operator|(
name|int
operator|)
name|mnemonic
argument_list|)
expr_stmt|;
block|}
else|else
name|res
operator|=
operator|new
name|JMenu
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|createToolBar ()
specifier|private
name|void
name|createToolBar
parameter_list|()
block|{
name|tlb
operator|.
name|putClientProperty
argument_list|(
name|Options
operator|.
name|HEADER_STYLE_KEY
argument_list|,
name|HeaderStyle
operator|.
name|BOTH
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setRollover
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//tlb.setBorderPainted(true);
comment|//tlb.setBackground(GUIGlobals.lightGray);
comment|//tlb.setForeground(GUIGlobals.lightGray);
name|tlb
operator|.
name|setFloatable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|newDatabaseAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|open
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|save
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|cut
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|paste
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|redo
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|newEntryAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|editEntry
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|editPreamble
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|editStrings
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|makeKeyAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|mark
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|unmark
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|searchToggle
operator|=
operator|new
name|JToggleButton
argument_list|(
name|toggleSearch
argument_list|)
expr_stmt|;
name|searchToggle
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_MAC
condition|)
name|searchToggle
operator|.
name|setMargin
argument_list|(
name|marg
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|searchToggle
argument_list|)
expr_stmt|;
name|previewToggle
operator|=
operator|new
name|JToggleButton
argument_list|(
name|togglePreview
argument_list|)
expr_stmt|;
name|previewToggle
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_MAC
condition|)
name|previewToggle
operator|.
name|setMargin
argument_list|(
name|marg
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|previewToggle
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|groupToggle
operator|=
operator|new
name|JToggleButton
argument_list|(
name|toggleGroups
argument_list|)
expr_stmt|;
name|groupToggle
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_MAC
condition|)
name|groupToggle
operator|.
name|setMargin
argument_list|(
name|marg
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|groupToggle
argument_list|)
expr_stmt|;
name|highlightAny
operator|=
operator|new
name|JToggleButton
argument_list|(
name|toggleHighlightAny
argument_list|)
expr_stmt|;
name|highlightAny
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_MAC
condition|)
name|highlightAny
operator|.
name|setMargin
argument_list|(
name|marg
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|highlightAny
argument_list|)
expr_stmt|;
name|highlightAll
operator|=
operator|new
name|JToggleButton
argument_list|(
name|toggleHighlightAll
argument_list|)
expr_stmt|;
name|highlightAll
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_MAC
condition|)
name|highlightAll
operator|.
name|setMargin
argument_list|(
name|marg
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|highlightAll
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
comment|// Removing the separate push-to buttons, replacing them by the
comment|// multipurpose button:
comment|//tlb.addAction(emacsPushAction);
comment|//tlb.addAction(lyxPushAction);
comment|//tlb.addAction(winEdtPushAction);
name|tlb
operator|.
name|add
argument_list|(
name|pushExternalButton
operator|.
name|getComponent
argument_list|()
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|openFile
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|openUrl
argument_list|)
expr_stmt|;
comment|//tlb.addSeparator();
comment|//tlb.addAction(showPrefs);
name|tlb
operator|.
name|add
argument_list|(
name|Box
operator|.
name|createHorizontalGlue
argument_list|()
argument_list|)
expr_stmt|;
comment|//tlb.add(new JabRefLabel(GUIGlobals.frameTitle+" "+GUIGlobals.version));
name|tlb
operator|.
name|addAction
argument_list|(
name|closeDatabaseAction
argument_list|)
expr_stmt|;
comment|//Insets margin = new Insets(0, 0, 0, 0);
comment|//for (int i=0; i<tlb.getComponentCount(); i++)
comment|//  ((JButton)tlb.getComponentAtIndex(i)).setMargin(margin);
block|}
DECL|class|JabRefLabel
specifier|private
class|class
name|JabRefLabel
extends|extends
name|JPanel
block|{
DECL|field|label
specifier|private
name|String
name|label
decl_stmt|;
DECL|method|JabRefLabel (String name)
specifier|public
name|JabRefLabel
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|label
operator|=
name|name
expr_stmt|;
block|}
DECL|method|paint (Graphics g)
specifier|public
name|void
name|paint
parameter_list|(
name|Graphics
name|g
parameter_list|)
block|{
name|Graphics2D
name|g2
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
name|g2
operator|.
name|setColor
argument_list|(
name|GUIGlobals
operator|.
name|nullFieldColor
argument_list|)
expr_stmt|;
name|g2
operator|.
name|setFont
argument_list|(
name|GUIGlobals
operator|.
name|jabRefFont
argument_list|)
expr_stmt|;
name|FontMetrics
name|fm
init|=
name|g2
operator|.
name|getFontMetrics
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|fm
operator|.
name|stringWidth
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|g2
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_ON
argument_list|)
expr_stmt|;
name|g2
operator|.
name|drawString
argument_list|(
name|label
argument_list|,
name|getWidth
argument_list|()
operator|-
name|width
operator|-
literal|7
argument_list|,
name|getHeight
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mItem (AbstractAction a, KeyStroke ks)
specifier|private
name|JMenuItem
name|mItem
parameter_list|(
name|AbstractAction
name|a
parameter_list|,
name|KeyStroke
name|ks
parameter_list|)
block|{
comment|// Set up a menu item with action and accelerator key.
name|JMenuItem
name|mi
init|=
operator|new
name|JMenuItem
argument_list|()
decl_stmt|;
name|mi
operator|.
name|setAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|ks
operator|!=
literal|null
condition|)
block|{
name|mi
operator|.
name|setAccelerator
argument_list|(
name|ks
argument_list|)
expr_stmt|;
block|}
return|return
name|mi
return|;
block|}
comment|//private void setupMainPanel() {
comment|/*public Completer getAutoCompleter(String field) {     return (Completer)autoCompleters.get(field);     }          public void assignAutoCompleters() {     // Set up which fields should have autocompletion. This should     // probably be made customizable. Existing Completer objects are     // forgotten. The completers must be updated towards the database.     byte[] fields = prefs.getByteArray("autoCompFields");     autoCompleters = new Hashtable();     for (int i=0; i<fields.length; i++) {    autoCompleters.put(GUIGlobals.ALL_FIELDS[fields[i]], new Completer());     }         }         public void updateAutoCompleters() {     if (database != null)    database.setCompleters(autoCompleters);    }*/
DECL|method|output (final String s)
specifier|public
name|void
name|output
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|statusLine
operator|.
name|setText
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|statusLine
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|stopShowingSearchResults ()
specifier|public
name|void
name|stopShowingSearchResults
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Disable actions that demand an open database.      */
DECL|method|setEmptyState ()
specifier|private
name|void
name|setEmptyState
parameter_list|()
block|{
name|manageSelectors
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mergeDatabaseAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|newSubDatabaseAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|close
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|saveAs
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|saveSelectedAs
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nextTab
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|prevTab
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sortTabs
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|undo
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|redo
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cut
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|paste
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mark
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|unmark
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|unmarkAll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|editEntry
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|importCiteSeer
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|selectAll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|copyKey
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|copyCiteKey
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|editPreamble
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|editStrings
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|toggleGroups
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|toggleSearch
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|makeKeyAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|emacsPushAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lyxPushAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|winEdtPushAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|normalSearch
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|incrementalSearch
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|replaceAll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|exportMenu
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fetchMedline
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fetchCiteSeer
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|openFile
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|openUrl
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|togglePreview
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dupliCheck
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|strictDupliCheck
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|highlightAll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|highlightAny
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|citeSeerPanelAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newSpecificEntryAction
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newSpecificEntryAction
index|[
name|i
index|]
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|newEntryAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|plainTextImport
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|closeDatabaseAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|switchPreview
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|integrityCheckAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|autoSetPdf
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|autoSetPs
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|toggleHighlightAny
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|toggleHighlightAll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|databaseProperties
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|abbreviateIso
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|abbreviateMedline
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|unabbreviate
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Enable actions that demand an open database.      */
DECL|method|setNonEmptyState ()
specifier|private
name|void
name|setNonEmptyState
parameter_list|()
block|{
name|manageSelectors
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mergeDatabaseAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|newSubDatabaseAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|close
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveAs
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveSelectedAs
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|undo
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|redo
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cut
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|paste
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mark
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|unmark
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|unmarkAll
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|editEntry
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|importCiteSeer
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|selectAll
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|copyKey
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|copyCiteKey
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|editPreamble
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|editStrings
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|toggleGroups
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|toggleSearch
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|makeKeyAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|emacsPushAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lyxPushAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|winEdtPushAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|normalSearch
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|incrementalSearch
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|replaceAll
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exportMenu
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fetchMedline
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fetchCiteSeer
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|openFile
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|openUrl
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|togglePreview
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dupliCheck
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|strictDupliCheck
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|highlightAll
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|highlightAny
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|citeSeerPanelAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newSpecificEntryAction
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newSpecificEntryAction
index|[
name|i
index|]
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|newEntryAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|plainTextImport
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|closeDatabaseAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|switchPreview
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|integrityCheckAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|autoSetPdf
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|autoSetPs
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|toggleHighlightAny
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|toggleHighlightAll
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|databaseProperties
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|abbreviateIso
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|abbreviateMedline
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|unabbreviate
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Disable actions that need more than one database open.      */
DECL|method|setOnlyOne ()
specifier|private
name|void
name|setOnlyOne
parameter_list|()
block|{
name|nextTab
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|prevTab
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sortTabs
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Disable actions that need more than one database open.      */
DECL|method|setMultiple ()
specifier|private
name|void
name|setMultiple
parameter_list|()
block|{
name|nextTab
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prevTab
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sortTabs
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method causes all open BasePanels to set up their tables    * anew. When called from PrefsDialog2, this updates to the new    * settings.    */
DECL|method|setupAllTables ()
specifier|public
name|void
name|setupAllTables
parameter_list|()
block|{
comment|// This action can be invoked without an open database, so
comment|// we have to check if we have one before trying to invoke
comment|// methods to execute changes in the preferences.
comment|// We want to notify all tabs about the changes to
comment|// avoid problems when changing the column set.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BasePanel
name|bf
init|=
name|baseAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Update tables:
if|if
condition|(
name|bf
operator|.
name|database
operator|!=
literal|null
condition|)
block|{
name|bf
operator|.
name|setupMainPanel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|addTab (BibtexDatabase db, File file, HashMap meta, String encoding, boolean raisePanel)
specifier|public
name|BasePanel
name|addTab
parameter_list|(
name|BibtexDatabase
name|db
parameter_list|,
name|File
name|file
parameter_list|,
name|HashMap
name|meta
parameter_list|,
name|String
name|encoding
parameter_list|,
name|boolean
name|raisePanel
parameter_list|)
block|{
name|BasePanel
name|bp
init|=
operator|new
name|BasePanel
argument_list|(
name|ths
argument_list|,
name|db
argument_list|,
name|file
argument_list|,
name|meta
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|addTab
argument_list|(
name|bp
argument_list|,
name|file
argument_list|,
name|raisePanel
argument_list|)
expr_stmt|;
return|return
name|bp
return|;
block|}
DECL|method|addTab (BasePanel bp, File file, boolean raisePanel)
specifier|public
name|void
name|addTab
parameter_list|(
name|BasePanel
name|bp
parameter_list|,
name|File
name|file
parameter_list|,
name|boolean
name|raisePanel
parameter_list|)
block|{
name|tabbedPane
operator|.
name|add
argument_list|(
operator|(
name|file
operator|!=
literal|null
condition|?
name|file
operator|.
name|getName
argument_list|()
else|:
name|Globals
operator|.
name|lang
argument_list|(
name|GUIGlobals
operator|.
name|untitledTitle
argument_list|)
operator|)
argument_list|,
name|bp
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|setToolTipTextAt
argument_list|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
argument_list|,
name|file
operator|!=
literal|null
condition|?
name|file
operator|.
name|getAbsolutePath
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|raisePanel
condition|)
block|{
name|tabbedPane
operator|.
name|setSelectedComponent
argument_list|(
name|bp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setNonEmptyState
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|setMultiple
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|SelectKeysAction
class|class
name|SelectKeysAction
extends|extends
name|AbstractAction
block|{
DECL|method|SelectKeysAction ()
specifier|public
name|SelectKeysAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Customize key bindings"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|KeyBindingsDialog
name|d
init|=
operator|new
name|KeyBindingsDialog
argument_list|(
operator|(
name|HashMap
operator|)
name|prefs
operator|.
name|getKeyBindings
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|,
name|prefs
operator|.
name|getDefaultKeys
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|.
name|setDefaultCloseOperation
argument_list|(
name|JFrame
operator|.
name|EXIT_ON_CLOSE
argument_list|)
expr_stmt|;
name|d
operator|.
name|pack
argument_list|()
expr_stmt|;
comment|//setSize(300,500);
name|Util
operator|.
name|placeDialog
argument_list|(
name|d
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|d
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|getAction
argument_list|()
condition|)
block|{
name|prefs
operator|.
name|setNewKeyBindings
argument_list|(
name|d
operator|.
name|getNewKeyBindings
argument_list|()
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Your new key bindings have been stored."
argument_list|)
operator|+
literal|"\n"
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"You must restart JabRef for the new key "
operator|+
literal|"bindings to work properly."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Key bindings changed"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * The action concerned with closing the window.    */
DECL|class|CloseAction
class|class
name|CloseAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|CloseAction ()
specifier|public
name|CloseAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Quit"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Quit JabRef"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Quit JabRef"
argument_list|)
argument_list|)
expr_stmt|;
comment|//putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_Q,
comment|//    Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|quit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// The action for closing the current database and leaving the window open.
DECL|field|closeDatabaseAction
name|CloseDatabaseAction
name|closeDatabaseAction
init|=
operator|new
name|CloseDatabaseAction
argument_list|()
decl_stmt|;
DECL|class|CloseDatabaseAction
class|class
name|CloseDatabaseAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|CloseDatabaseAction ()
specifier|public
name|CloseDatabaseAction
parameter_list|()
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"close"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Close database"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Close the current database"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Close database"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Ask here if the user really wants to close, if the base
comment|// has not been saved since last save.
name|boolean
name|close
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|basePanel
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// when it is initially empty
return|return;
comment|//nbatada nov 7
block|}
if|if
condition|(
name|basePanel
argument_list|()
operator|.
name|baseChanged
condition|)
block|{
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Database has changed. Do you want to save "
operator|+
literal|"before closing?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save before closing"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_CANCEL_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CANCEL_OPTION
operator|)
operator|||
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CLOSED_OPTION
operator|)
condition|)
block|{
name|close
operator|=
literal|false
expr_stmt|;
comment|// The user has cancelled.
block|}
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|// The user wants to save.
try|try
block|{
name|basePanel
argument_list|()
operator|.
name|runCommand
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// Something prevented the file
comment|// from being saved. Break!!!
name|close
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|close
condition|)
block|{
name|basePanel
argument_list|()
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|tabbedPane
operator|.
name|remove
argument_list|(
name|basePanel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|setEmptyState
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// This should be triggered from the tabbedPane
comment|// sidePaneManager.stateChanged(new ChangeEvent(tabbedPane));
name|markActiveBasePanel
argument_list|()
expr_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setOnlyOne
argument_list|()
expr_stmt|;
block|}
block|}
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Closed database"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
comment|// Test
block|}
block|}
block|}
comment|// The action concerned with opening a new database.
DECL|class|NewDatabaseAction
class|class
name|NewDatabaseAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|NewDatabaseAction ()
specifier|public
name|NewDatabaseAction
parameter_list|()
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"New database"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"New BibTeX database"
argument_list|)
argument_list|)
expr_stmt|;
comment|//putValue(MNEMONIC_KEY, GUIGlobals.newKeyCode);
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Create a new, empty, database.
name|BibtexDatabase
name|database
init|=
operator|new
name|BibtexDatabase
argument_list|()
decl_stmt|;
name|addTab
argument_list|(
name|database
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"New database created."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ImportCiteSeerAction
class|class
name|ImportCiteSeerAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|ImportCiteSeerAction ()
specifier|public
name|ImportCiteSeerAction
parameter_list|()
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"citeseer"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Import Fields from CiteSeer"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import Fields from CiteSeer Database"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Import Fields from CiteSeer"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key defined in MenuTitles!
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|citeSeerFetcher
operator|.
name|activateImportFetcher
argument_list|()
condition|)
block|{
operator|(
operator|new
name|Thread
argument_list|()
block|{
name|BasePanel
name|currentBp
decl_stmt|;
name|BibtexEntry
name|toShow
decl_stmt|;
comment|//String id;
name|int
index|[]
name|clickedOn
init|=
literal|null
decl_stmt|;
class|class
name|UpdateComponent
implements|implements
name|Runnable
block|{
name|boolean
name|changesMade
decl_stmt|;
name|UpdateComponent
parameter_list|(
name|boolean
name|changesMade
parameter_list|)
block|{
name|this
operator|.
name|changesMade
operator|=
name|changesMade
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|citeSeerFetcher
operator|.
name|endImportCiteSeerProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|changesMade
condition|)
name|currentBp
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
comment|//for(int i=0; i< clickedOn.length; i++)
comment|//        currentBp.entryTable.addRowSelectionInterval(i,i);
comment|//currentBp.showEntry(toShow);
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Completed Import Fields from CiteSeer."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|currentBp
operator|=
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
expr_stmt|;
comment|// We demand that at least one row is selected.
name|int
name|rowCount
init|=
name|currentBp
operator|.
name|mainTable
operator|.
name|getSelectedRowCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|rowCount
operator|>=
literal|1
condition|)
block|{
name|clickedOn
operator|=
name|currentBp
operator|.
name|mainTable
operator|.
name|getSelectedRows
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|currentBp
operator|.
name|frame
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"You must select at least one row to perform this operation."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"CiteSeer Import Error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
block|}
name|toShow
operator|=
operator|(
name|BibtexEntry
operator|)
name|currentBp
operator|.
name|mainTable
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|clickedOn
operator|!=
literal|null
condition|)
block|{
name|citeSeerFetcher
operator|.
name|beginImportCiteSeerProgress
argument_list|()
expr_stmt|;
name|NamedCompound
name|citeseerNamedCompound
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"CiteSeer Import Fields"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|newValues
init|=
name|citeSeerFetcher
operator|.
name|importCiteSeerEntries
argument_list|(
name|clickedOn
argument_list|,
name|citeseerNamedCompound
argument_list|)
decl_stmt|;
if|if
condition|(
name|newValues
condition|)
block|{
name|citeseerNamedCompound
operator|.
name|end
argument_list|()
expr_stmt|;
name|currentBp
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|citeseerNamedCompound
argument_list|)
expr_stmt|;
block|}
name|UpdateComponent
name|updateComponent
init|=
operator|new
name|UpdateComponent
argument_list|(
name|newValues
argument_list|)
decl_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|updateComponent
argument_list|)
expr_stmt|;
block|}
name|citeSeerFetcher
operator|.
name|deactivateImportFetcher
argument_list|()
expr_stmt|;
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"A CiteSeer import operation is currently in progress."
argument_list|)
operator|+
literal|"  "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please wait until it has finished."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"CiteSeer Import Error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|FetchCiteSeerAction
class|class
name|FetchCiteSeerAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|FetchCiteSeerAction ()
specifier|public
name|FetchCiteSeerAction
parameter_list|()
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"citeseer"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Fetch citations from CiteSeer"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Fetch Articles Citing your Database"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Fetch citations from CiteSeer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|citeSeerFetcher
operator|.
name|activateCitationFetcher
argument_list|()
condition|)
block|{
name|sidePaneManager
operator|.
name|show
argument_list|(
literal|"CiteSeerProgress"
argument_list|)
expr_stmt|;
operator|(
operator|new
name|Thread
argument_list|()
block|{
name|BasePanel
name|newBp
decl_stmt|;
name|BasePanel
name|targetBp
decl_stmt|;
name|BibtexDatabase
name|newDatabase
decl_stmt|;
name|BibtexDatabase
name|targetDatabase
decl_stmt|;
name|Runnable
name|updateComponent
init|=
operator|new
name|Runnable
argument_list|()
block|{
comment|/* TODO: This should probably be selectable on/off                                                  * in the preferences window, but for now all                                                  * Citation fetcher operations will sort by citation count.                                                  */
specifier|private
name|void
name|setSortingByCitationCount
parameter_list|()
block|{
name|newBp
operator|.
name|sortingByCiteSeerResults
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|setSortingByCitationCount
argument_list|()
expr_stmt|;
name|tabbedPane
operator|.
name|add
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|GUIGlobals
operator|.
name|untitledTitle
argument_list|)
argument_list|,
name|newBp
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|setSelectedComponent
argument_list|(
name|newBp
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Fetched all citations from target database."
argument_list|)
argument_list|)
expr_stmt|;
name|citeSeerFetcher
operator|.
name|deactivateCitationFetcher
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|newBp
operator|=
operator|new
name|BasePanel
argument_list|(
name|ths
argument_list|)
expr_stmt|;
name|int
name|errorCode
decl_stmt|;
name|targetBp
operator|=
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
expr_stmt|;
name|newDatabase
operator|=
name|newBp
operator|.
name|getDatabase
argument_list|()
expr_stmt|;
name|targetDatabase
operator|=
name|targetBp
operator|.
name|getDatabase
argument_list|()
expr_stmt|;
name|errorCode
operator|=
name|citeSeerFetcher
operator|.
name|populate
argument_list|(
name|newDatabase
argument_list|,
name|targetDatabase
argument_list|)
expr_stmt|;
if|if
condition|(
name|newDatabase
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|updateComponent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|errorCode
operator|==
literal|0
condition|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|citeSeerFetcher
operator|.
name|getEmptyFetchSetDialog
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|citeSeerFetcher
operator|.
name|deactivateCitationFetcher
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"A CiteSeer fetch operation is currently in progress."
argument_list|)
operator|+
literal|"  "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please wait until it has finished."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"CiteSeer Fetch Error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// The action concerned with generate a new (sub-)database from latex aux file.
DECL|class|NewSubDatabaseAction
class|class
name|NewSubDatabaseAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|NewSubDatabaseAction ()
specifier|public
name|NewSubDatabaseAction
parameter_list|()
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"New subdatabase based on AUX file"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"New BibTeX subdatabase"
argument_list|)
argument_list|)
expr_stmt|;
comment|//putValue(MNEMONIC_KEY, GUIGlobals.newKeyCode);
block|}
DECL|method|actionPerformed ( ActionEvent e )
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Create a new, empty, database.
name|FromAuxDialog
name|dialog
init|=
operator|new
name|FromAuxDialog
argument_list|(
name|ths
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
name|ths
operator|.
name|tabbedPane
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|dialog
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|dialog
operator|.
name|okPressed
argument_list|()
condition|)
block|{
name|BasePanel
name|bp
init|=
operator|new
name|BasePanel
argument_list|(
name|ths
argument_list|,
name|dialog
operator|.
name|getGenerateDB
argument_list|()
argument_list|,
comment|// database
literal|null
argument_list|,
comment|// file
literal|null
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|)
decl_stmt|;
comment|// meta data
name|tabbedPane
operator|.
name|add
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|GUIGlobals
operator|.
name|untitledTitle
argument_list|)
argument_list|,
name|bp
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|setSelectedComponent
argument_list|(
name|bp
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setNonEmptyState
argument_list|()
expr_stmt|;
block|}
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"New database created."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// The action should test the database and report errors/warnings
DECL|class|IntegrityCheckAction
class|class
name|IntegrityCheckAction
extends|extends
name|AbstractAction
block|{
DECL|method|IntegrityCheckAction ()
specifier|public
name|IntegrityCheckAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|menuTitle
argument_list|(
literal|"Integrity check"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"integrityCheck"
argument_list|)
argument_list|)
expr_stmt|;
comment|//putValue( SHORT_DESCRIPTION, "integrity" ) ;  //Globals.lang( "integrity" ) ) ;
comment|//putValue(MNEMONIC_KEY, GUIGlobals.newKeyCode);
block|}
DECL|method|actionPerformed ( ActionEvent e )
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|Object
name|selComp
init|=
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|selComp
operator|!=
literal|null
condition|)
block|{
name|BasePanel
name|bp
init|=
operator|(
name|BasePanel
operator|)
name|selComp
decl_stmt|;
name|BibtexDatabase
name|refBase
init|=
name|bp
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
if|if
condition|(
name|refBase
operator|!=
literal|null
condition|)
block|{
name|IntegrityWizard
name|wizard
init|=
operator|new
name|IntegrityWizard
argument_list|(
name|ths
argument_list|,
name|basePanel
argument_list|()
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|wizard
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|wizard
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|FetchMedlineAction
class|class
name|FetchMedlineAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|FetchMedlineAction ()
specifier|public
name|FetchMedlineAction
parameter_list|()
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"medline"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Fetch Medline"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Fetch Medline"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Fetch Medline by ID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sidePaneManager
operator|.
name|toggle
argument_list|(
literal|"fetchMedline"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sidePaneManager
operator|.
name|isComponentVisible
argument_list|(
literal|"fetchMedline"
argument_list|)
condition|)
block|{
operator|new
name|FocusRequester
argument_list|(
name|medlineFetcher
operator|.
name|getTextField
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|CiteSeerPanelAction
class|class
name|CiteSeerPanelAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|CiteSeerPanelAction ()
specifier|public
name|CiteSeerPanelAction
parameter_list|()
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"medline"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Fetch CiteSeer"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Fetch CiteSeer"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Fetch CiteSeer by ID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sidePaneManager
operator|.
name|toggle
argument_list|(
literal|"CiteSeerPanel"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sidePaneManager
operator|.
name|isComponentVisible
argument_list|(
literal|"CiteSeerPanel"
argument_list|)
condition|)
block|{
operator|new
name|FocusRequester
argument_list|(
name|citeSeerFetcherPanel
operator|.
name|getTextField
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// The action for opening the preferences dialog.
DECL|field|showPrefs
name|AbstractAction
name|showPrefs
init|=
operator|new
name|ShowPrefsAction
argument_list|()
decl_stmt|;
DECL|class|ShowPrefsAction
class|class
name|ShowPrefsAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|ShowPrefsAction ()
specifier|public
name|ShowPrefsAction
parameter_list|()
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"preferences"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Preferences"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Preferences"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|preferences
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This method does the job of adding imported entries into the active database, or into a new one.    * It shows the ImportInspectionDialog if preferences indicate it should be used. Otherwise it imports    * directly.    * @param panel The BasePanel to add to.    * @param entries The entries to add.    * @param filename Name of the file where the import came from.    * @param openInNew Should the entries be imported into a new database?    * @param callBack The callback for the ImportInspectionDialog to use.    */
DECL|method|addImportedEntries (final BasePanel panel, final List entries, String filename, boolean openInNew, ImportInspectionDialog.CallBack callBack)
specifier|public
name|void
name|addImportedEntries
parameter_list|(
specifier|final
name|BasePanel
name|panel
parameter_list|,
specifier|final
name|List
name|entries
parameter_list|,
name|String
name|filename
parameter_list|,
name|boolean
name|openInNew
parameter_list|,
name|ImportInspectionDialog
operator|.
name|CallBack
name|callBack
parameter_list|)
block|{
comment|// Use the import inspection dialog if it is enabled in preferences, and (there are more than
comment|// one entry or the inspection dialog is also enabled for single entries):
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useImportInspectionDialog"
argument_list|)
operator|&&
operator|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useImportInspectionDialogForSingle"
argument_list|)
operator|||
operator|(
name|entries
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
operator|)
condition|)
block|{
name|ImportInspectionDialog
name|diag
init|=
operator|new
name|ImportInspectionDialog
argument_list|(
name|ths
argument_list|,
name|panel
argument_list|,
name|BibtexFields
operator|.
name|DEFAULT_INSPECTION_FIELDS
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import"
argument_list|)
argument_list|,
name|openInNew
argument_list|)
decl_stmt|;
name|diag
operator|.
name|addEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|diag
operator|.
name|addCallBack
argument_list|(
name|callBack
argument_list|)
expr_stmt|;
name|diag
operator|.
name|entryListComplete
argument_list|()
expr_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|diag
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|diag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|diag
operator|.
name|toFront
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ths
operator|.
name|addBibEntries
argument_list|(
name|entries
argument_list|,
name|filename
argument_list|,
name|openInNew
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|panel
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
condition|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|panel
operator|.
name|highlightEntry
argument_list|(
operator|(
name|BibtexEntry
operator|)
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Adds the entries to the database, possibly checking for duplicates first.      * @param filename If non-null, a message is printed to the status line describing      * how many entries were imported, and from which file. If null, the message will not      * be printed.      * @param intoNew Determines if the entries will be put in a new database or in the current      * one.      */
DECL|method|addBibEntries (java.util.List bibentries, String filename, boolean intoNew)
specifier|public
name|int
name|addBibEntries
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
name|bibentries
parameter_list|,
name|String
name|filename
parameter_list|,
name|boolean
name|intoNew
parameter_list|)
block|{
if|if
condition|(
name|bibentries
operator|==
literal|null
operator|||
name|bibentries
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// No entries found. We need a message for this.
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"No entries found. Please make sure you are "
operator|+
literal|"using the correct import filter."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import failed"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|int
name|addedEntries
init|=
literal|0
decl_stmt|;
comment|// Set owner and timestamp fields:
name|Util
operator|.
name|setAutomaticFields
argument_list|(
name|bibentries
argument_list|)
expr_stmt|;
if|if
condition|(
name|intoNew
operator|||
operator|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
comment|// Import into new database.
name|BibtexDatabase
name|database
init|=
operator|new
name|BibtexDatabase
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|bibentries
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|entry
operator|.
name|setId
argument_list|(
name|Util
operator|.
name|createNeutralId
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{
comment|//ignore
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"KeyCollisionException [ addBibEntries(...) ]"
argument_list|)
expr_stmt|;
block|}
block|}
name|HashMap
name|meta
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Metadata are only put in bibtex files, so we will not find it
comment|// in imported files. Instead we pass an empty HashMap.
name|BasePanel
name|bp
init|=
operator|new
name|BasePanel
argument_list|(
name|ths
argument_list|,
name|database
argument_list|,
literal|null
argument_list|,
name|meta
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|)
decl_stmt|;
comment|/*             if (prefs.getBoolean("autoComplete")) {             db.setCompleters(autoCompleters);             }        */
name|addedEntries
operator|=
name|database
operator|.
name|getEntryCount
argument_list|()
expr_stmt|;
name|tabbedPane
operator|.
name|add
argument_list|(
name|GUIGlobals
operator|.
name|untitledTitle
argument_list|,
name|bp
argument_list|)
expr_stmt|;
name|bp
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|tabbedPane
operator|.
name|setSelectedComponent
argument_list|(
name|bp
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setNonEmptyState
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|filename
operator|!=
literal|null
condition|)
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Imported database"
argument_list|)
operator|+
literal|" '"
operator|+
name|filename
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"with"
argument_list|)
operator|+
literal|" "
operator|+
name|database
operator|.
name|getEntryCount
argument_list|()
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries into new database"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Import into current database.
name|boolean
name|checkForDuplicates
init|=
literal|true
decl_stmt|;
name|BasePanel
name|basePanel
init|=
name|basePanel
argument_list|()
decl_stmt|;
name|BibtexDatabase
name|database
init|=
name|basePanel
operator|.
name|database
decl_stmt|;
name|int
name|oldCount
init|=
name|database
operator|.
name|getEntryCount
argument_list|()
decl_stmt|;
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import entries"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|bibentries
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|mainLoop
label|:
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|dupli
init|=
literal|false
decl_stmt|;
comment|// Check for duplicates among the current entries:
if|if
condition|(
name|checkForDuplicates
condition|)
block|{
name|loop
label|:
for|for
control|(
name|Iterator
name|i2
init|=
name|database
operator|.
name|getKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|existingEntry
init|=
name|database
operator|.
name|getEntryById
argument_list|(
operator|(
name|String
operator|)
name|i2
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|isDuplicate
argument_list|(
name|entry
argument_list|,
name|existingEntry
argument_list|,
name|Globals
operator|.
name|duplicateThreshold
argument_list|)
condition|)
block|{
name|DuplicateResolverDialog
name|drd
init|=
operator|new
name|DuplicateResolverDialog
argument_list|(
name|ths
argument_list|,
name|existingEntry
argument_list|,
name|entry
argument_list|,
name|DuplicateResolverDialog
operator|.
name|IMPORT_CHECK
argument_list|)
decl_stmt|;
name|drd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|drd
operator|.
name|getSelected
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|==
name|DuplicateResolverDialog
operator|.
name|KEEP_LOWER
condition|)
block|{
name|dupli
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|res
operator|==
name|DuplicateResolverDialog
operator|.
name|KEEP_UPPER
condition|)
block|{
name|database
operator|.
name|removeEntry
argument_list|(
name|existingEntry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|database
argument_list|,
name|existingEntry
argument_list|,
name|basePanel
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|res
operator|==
name|DuplicateResolverDialog
operator|.
name|BREAK
condition|)
block|{
break|break
name|mainLoop
break|;
block|}
break|break
name|loop
break|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|dupli
condition|)
block|{
try|try
block|{
name|entry
operator|.
name|setId
argument_list|(
name|Util
operator|.
name|createNeutralId
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|database
argument_list|,
name|entry
argument_list|,
name|basePanel
argument_list|)
argument_list|)
expr_stmt|;
name|addedEntries
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{
comment|//ignore
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"KeyCollisionException [ addBibEntries(...) ]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|addedEntries
operator|>
literal|0
condition|)
block|{
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|basePanel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|basePanel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
if|if
condition|(
name|filename
operator|!=
literal|null
condition|)
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Imported database"
argument_list|)
operator|+
literal|" '"
operator|+
name|filename
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"with"
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|database
operator|.
name|getEntryCount
argument_list|()
operator|-
name|oldCount
operator|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries into new database"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|addedEntries
return|;
block|}
DECL|method|setUpImportMenu (JMenu importMenu, boolean intoNew_)
specifier|private
name|void
name|setUpImportMenu
parameter_list|(
name|JMenu
name|importMenu
parameter_list|,
name|boolean
name|intoNew_
parameter_list|)
block|{
specifier|final
name|boolean
name|intoNew
init|=
name|intoNew_
decl_stmt|;
name|importMenu
operator|.
name|removeAll
argument_list|()
expr_stmt|;
comment|// Add a menu item for autodetecting import format:
name|importMenu
operator|.
name|add
argument_list|(
operator|new
name|ImportMenuItem
argument_list|(
name|ths
argument_list|,
name|intoNew
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add custom importers
name|importMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|SortedSet
name|customImporters
init|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|getCustomImportFormats
argument_list|()
decl_stmt|;
name|JMenu
name|submenu
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Custom importers"
argument_list|)
argument_list|)
decl_stmt|;
name|submenu
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_S
argument_list|)
expr_stmt|;
if|if
condition|(
name|customImporters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|submenu
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|submenu
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No custom imports registered yet."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Put in all formatters registered in ImportFormatReader:
for|for
control|(
name|Iterator
name|i
init|=
name|customImporters
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ImportFormat
name|imFo
init|=
operator|(
name|ImportFormat
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|submenu
operator|.
name|add
argument_list|(
operator|new
name|ImportMenuItem
argument_list|(
name|ths
argument_list|,
name|intoNew
argument_list|,
name|imFo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|importMenu
operator|.
name|add
argument_list|(
name|submenu
argument_list|)
expr_stmt|;
name|importMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
comment|// Put in all formatters registered in ImportFormatReader:
for|for
control|(
name|Iterator
name|i
init|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|getBuiltInInputFormats
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ImportFormat
name|imFo
init|=
operator|(
name|ImportFormat
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|importMenu
operator|.
name|add
argument_list|(
operator|new
name|ImportMenuItem
argument_list|(
name|ths
argument_list|,
name|intoNew
argument_list|,
name|imFo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFileHistory ()
specifier|public
name|FileHistory
name|getFileHistory
parameter_list|()
block|{
return|return
name|fileHistory
return|;
block|}
name|JMenuItem
DECL|field|htmlItem
name|htmlItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"HTML"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|simpleHtmlItem
name|simpleHtmlItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Simple HTML"
argument_list|)
argument_list|)
decl_stmt|,
comment|//plainTextItem = new JMenuItem(Globals.lang("Plain text")),
DECL|field|docbookItem
name|docbookItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Docbook"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|bibtexmlItem
name|bibtexmlItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"BibTeXML"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|modsItem
name|modsItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"MODS"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|rtfItem
name|rtfItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Harvard RTF"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|endnoteItem
name|endnoteItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Endnote"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|openofficeItem
name|openofficeItem
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"OpenOffice Calc"
argument_list|)
decl_stmt|,
DECL|field|odsItem
name|odsItem
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"OpenDocument Spreadsheet"
argument_list|)
decl_stmt|;
DECL|method|setUpExportMenu (JMenu menu)
specifier|private
name|void
name|setUpExportMenu
parameter_list|(
name|JMenu
name|menu
parameter_list|)
block|{
name|ActionListener
name|listener
init|=
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JMenuItem
name|source
init|=
operator|(
name|JMenuItem
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|String
name|lfFileName
init|=
literal|null
decl_stmt|,
name|extension
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|source
operator|==
name|htmlItem
condition|)
block|{
name|lfFileName
operator|=
literal|"html"
expr_stmt|;
name|extension
operator|=
literal|".html"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|simpleHtmlItem
condition|)
block|{
name|lfFileName
operator|=
literal|"simplehtml"
expr_stmt|;
name|extension
operator|=
literal|".html"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|docbookItem
condition|)
block|{
name|lfFileName
operator|=
literal|"docbook"
expr_stmt|;
name|extension
operator|=
literal|".xml"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|bibtexmlItem
condition|)
block|{
name|lfFileName
operator|=
literal|"bibtexml"
expr_stmt|;
name|extension
operator|=
literal|".xml"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|modsItem
condition|)
block|{
name|lfFileName
operator|=
literal|"mods"
expr_stmt|;
name|extension
operator|=
literal|".xml"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|rtfItem
condition|)
block|{
name|lfFileName
operator|=
literal|"harvard"
expr_stmt|;
name|extension
operator|=
literal|".rtf"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|endnoteItem
condition|)
block|{
name|lfFileName
operator|=
literal|"endnote"
expr_stmt|;
name|extension
operator|=
literal|".txt"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|openofficeItem
condition|)
block|{
name|lfFileName
operator|=
literal|"oocalc"
expr_stmt|;
name|extension
operator|=
literal|".sxc"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|odsItem
condition|)
block|{
name|lfFileName
operator|=
literal|"ods"
expr_stmt|;
name|extension
operator|=
literal|".ods"
expr_stmt|;
block|}
comment|// We need to find out:
comment|// 1. The layout definition string to use. Or, rather, we
comment|//    must provide a Reader for the layout definition.
comment|// 2. The preferred extension for the layout format.
comment|// 3. The name of the file to use.
specifier|final
name|String
name|chosenFile
init|=
name|Globals
operator|.
name|getNewFile
argument_list|(
name|ths
argument_list|,
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
argument_list|)
argument_list|,
name|extension
argument_list|,
name|JFileChooser
operator|.
name|SAVE_DIALOG
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|exportName
init|=
name|lfFileName
decl_stmt|;
if|if
condition|(
name|chosenFile
operator|==
literal|null
condition|)
return|return;
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|FileActions
operator|.
name|performExport
argument_list|(
name|basePanel
argument_list|()
operator|.
name|database
argument_list|()
argument_list|,
name|exportName
argument_list|,
name|chosenFile
argument_list|,
name|basePanel
argument_list|()
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Exported database to file"
argument_list|)
operator|+
literal|" '"
operator|+
name|chosenFile
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|htmlItem
operator|.
name|addActionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|htmlItem
argument_list|)
expr_stmt|;
name|simpleHtmlItem
operator|.
name|addActionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|simpleHtmlItem
argument_list|)
expr_stmt|;
comment|//plainTextItem.addActionListener(listener);
comment|//menu.add(plainTextItem);
name|bibtexmlItem
operator|.
name|addActionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|bibtexmlItem
argument_list|)
expr_stmt|;
name|docbookItem
operator|.
name|addActionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|docbookItem
argument_list|)
expr_stmt|;
name|modsItem
operator|.
name|addActionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|modsItem
argument_list|)
expr_stmt|;
name|rtfItem
operator|.
name|addActionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|rtfItem
argument_list|)
expr_stmt|;
name|endnoteItem
operator|.
name|addActionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|endnoteItem
argument_list|)
expr_stmt|;
name|openofficeItem
operator|.
name|addActionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|odsItem
operator|.
name|addActionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|openofficeItem
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|odsItem
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|exportCSV
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|expandEndnoteZip
argument_list|)
expr_stmt|;
block|}
comment|/**    * Interrogates the list of custom export formats defined, and adds them to the custom    * export menu.    */
DECL|method|setUpCustomExportMenu ()
specifier|public
name|void
name|setUpCustomExportMenu
parameter_list|()
block|{
name|customExportMenu
operator|.
name|removeAll
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefs
operator|.
name|customExports
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|s
init|=
name|prefs
operator|.
name|customExports
operator|.
name|getElementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|customExportMenu
operator|.
name|add
argument_list|(
operator|new
name|CustomExportAction
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|,
name|s
index|[
literal|2
index|]
argument_list|,
name|s
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Set the preview active state for all BasePanel instances.      * @param enabled      */
DECL|method|setPreviewActive (boolean enabled)
specifier|public
name|void
name|setPreviewActive
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|setPreviewActive
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeCachedEntryEditors ()
specifier|public
name|void
name|removeCachedEntryEditors
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|BasePanel
name|bp
init|=
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|bp
operator|.
name|entryEditors
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This method shows a wait cursor and blocks all input to the JFrame's contents.      */
DECL|method|block ()
specifier|public
name|void
name|block
parameter_list|()
block|{
name|getGlassPane
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
block|}
comment|/**      * This method reverts the cursor to normal, and stops blocking input to the JFrame's contents.      */
DECL|method|unblock ()
specifier|public
name|void
name|unblock
parameter_list|()
block|{
name|getGlassPane
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//	getGlassPane().setCursor(Cursor.WAIT_CURSOR);
block|}
DECL|class|SaveSessionAction
class|class
name|SaveSessionAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|SaveSessionAction ()
specifier|public
name|SaveSessionAction
parameter_list|()
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"save"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Save session"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Save session"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Here we store the names of allcurrent filea. If
comment|// there is no current file, we remove any
comment|// previously stored file name.
name|Vector
name|filenames
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tabbedPane
operator|.
name|getTitleAt
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|GUIGlobals
operator|.
name|untitledTitle
argument_list|)
condition|)
block|{
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"This untitled database must be saved first to be "
operator|+
literal|"included in the saved session. Save now?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save database"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|// The user wants to save.
try|try
block|{
name|basePanel
argument_list|()
operator|.
name|runCommand
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{}
block|}
block|}
if|if
condition|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|filenames
operator|.
name|add
argument_list|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|filenames
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Not saved (empty session)"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|filenames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filenames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
operator|(
name|String
operator|)
name|filenames
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|prefs
operator|.
name|putStringArray
argument_list|(
literal|"savedSession"
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saved session"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|CustomExportAction
class|class
name|CustomExportAction
extends|extends
name|AbstractAction
block|{
DECL|field|extension
DECL|field|lfFileName
DECL|field|directory
name|String
name|extension
decl_stmt|,
name|lfFileName
decl_stmt|,
name|directory
decl_stmt|;
DECL|method|CustomExportAction (String name, String ext, String lf)
specifier|public
name|CustomExportAction
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|ext
parameter_list|,
name|String
name|lf
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|File
name|lfFile
init|=
operator|new
name|File
argument_list|(
name|lf
argument_list|)
decl_stmt|;
name|extension
operator|=
name|ext
expr_stmt|;
name|String
name|filename
init|=
name|lfFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|lfFileName
operator|=
name|filename
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|filename
operator|.
name|length
argument_list|()
operator|-
literal|7
argument_list|)
expr_stmt|;
name|directory
operator|=
name|lfFile
operator|.
name|getParent
argument_list|()
operator|+
name|File
operator|.
name|separator
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// We need to find out:
comment|// 1. The layout definition string to use. Or, rather, we
comment|//    must provide a Reader for the layout definition.
comment|// 2. The preferred extension for the layout format.
comment|// 3. The name of the file to use.
name|File
name|outFile
decl_stmt|;
name|String
name|chosenFile
init|=
name|Globals
operator|.
name|getNewFile
argument_list|(
name|ths
argument_list|,
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
argument_list|)
argument_list|,
name|extension
argument_list|,
name|JFileChooser
operator|.
name|SAVE_DIALOG
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenFile
operator|!=
literal|null
condition|)
name|outFile
operator|=
operator|new
name|File
argument_list|(
name|chosenFile
argument_list|)
expr_stmt|;
else|else
block|{
return|return;
block|}
specifier|final
name|String
name|lfName
init|=
name|lfFileName
decl_stmt|;
specifier|final
name|File
name|oFile
init|=
name|outFile
decl_stmt|;
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|FileActions
operator|.
name|exportDatabase
argument_list|(
name|basePanel
argument_list|()
operator|.
name|database
argument_list|,
name|directory
argument_list|,
name|lfName
argument_list|,
name|oFile
argument_list|,
name|basePanel
argument_list|()
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Exported database to file"
argument_list|)
operator|+
literal|" '"
operator|+
name|oFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ex.printStackTrace();
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|ths
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|LoadSessionAction
class|class
name|LoadSessionAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|running
name|boolean
name|running
init|=
literal|false
decl_stmt|;
DECL|method|LoadSessionAction ()
specifier|public
name|LoadSessionAction
parameter_list|()
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"loadSession"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Load session"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Load session"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|.
name|get
argument_list|(
literal|"savedSession"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No saved session found."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|running
condition|)
return|return;
else|else
name|running
operator|=
literal|true
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Loading session..."
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|HashSet
name|currentFiles
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
name|currentFiles
operator|.
name|add
argument_list|(
name|baseAt
argument_list|(
name|i
argument_list|)
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|i0
init|=
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
decl_stmt|;
name|String
index|[]
name|names
init|=
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"savedSession"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|currentFiles
operator|.
name|contains
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//Util.pr("Opening last edited file:"
comment|//+fileToOpen.getName());
name|open
operator|.
name|openIt
argument_list|(
name|file
argument_list|,
name|i
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Files opened"
argument_list|)
operator|+
literal|": "
operator|+
operator|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|-
name|i0
operator|)
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ChangeTabAction
class|class
name|ChangeTabAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|next
specifier|private
name|boolean
name|next
decl_stmt|;
DECL|method|ChangeTabAction (boolean next)
specifier|public
name|ChangeTabAction
parameter_list|(
name|boolean
name|next
parameter_list|)
block|{
name|putValue
argument_list|(
name|NAME
argument_list|,
name|next
condition|?
literal|"Next tab"
else|:
literal|"Previous tab"
argument_list|)
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
comment|//Util.pr(""+prefs.getKey("Next tab"));
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
operator|(
name|next
condition|?
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Next tab"
argument_list|)
else|:
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Previous tab"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|i
init|=
name|tabbedPane
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|int
name|newI
init|=
operator|(
name|next
condition|?
name|i
operator|+
literal|1
else|:
name|i
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|newI
operator|<
literal|0
condition|)
block|{
name|newI
operator|=
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|newI
operator|==
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|)
block|{
name|newI
operator|=
literal|0
expr_stmt|;
block|}
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
name|newI
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Class for handling general actions; cut, copy and paste. The focused component is    * kept track of by Globals.focusListener, and we call the action stored under the    * relevant name in its action map.    */
DECL|class|EditAction
class|class
name|EditAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|command
specifier|private
name|String
name|command
decl_stmt|;
DECL|method|EditAction (String command, URL icon)
specifier|public
name|EditAction
parameter_list|(
name|String
name|command
parameter_list|,
name|URL
name|icon
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|ImageIcon
argument_list|(
name|icon
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|String
name|nName
init|=
name|Util
operator|.
name|nCase
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
name|nName
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|prefs
operator|.
name|getKey
argument_list|(
name|nName
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|nName
argument_list|)
argument_list|)
expr_stmt|;
comment|//putValue(ACCELERATOR_KEY,
comment|//         (next?prefs.getKey("Next tab"):prefs.getKey("Previous tab")));
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|//Util.pr(Globals.focusListener.getFocused().toString());
name|JComponent
name|source
init|=
name|Globals
operator|.
name|focusListener
operator|.
name|getFocused
argument_list|()
decl_stmt|;
try|try
block|{
name|source
operator|.
name|getActionMap
argument_list|()
operator|.
name|get
argument_list|(
name|command
argument_list|)
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|// No component is focused, so we do nothing.
block|}
block|}
block|}
DECL|class|CustomizeExportsAction
class|class
name|CustomizeExportsAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|CustomizeExportsAction ()
specifier|public
name|CustomizeExportsAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Manage custom exports"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|ExportCustomizationDialog
name|ecd
init|=
operator|new
name|ExportCustomizationDialog
argument_list|(
name|ths
argument_list|)
decl_stmt|;
name|ecd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CustomizeImportsAction
class|class
name|CustomizeImportsAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|CustomizeImportsAction ()
specifier|public
name|CustomizeImportsAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Manage custom imports"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|ImportCustomizationDialog
name|ecd
init|=
operator|new
name|ImportCustomizationDialog
argument_list|(
name|ths
argument_list|)
decl_stmt|;
name|ecd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ExportCSV
class|class
name|ExportCSV
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|ExportCSV ()
specifier|public
name|ExportCSV
parameter_list|()
block|{
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Tab-separated file"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|chosenFile
init|=
name|Globals
operator|.
name|getNewFile
argument_list|(
name|ths
argument_list|,
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
argument_list|)
argument_list|,
literal|".csv"
argument_list|,
name|JFileChooser
operator|.
name|SAVE_DIALOG
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenFile
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|FileActions
operator|.
name|exportToCSV
argument_list|(
name|basePanel
argument_list|()
operator|.
name|database
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|chosenFile
argument_list|)
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|CustomizeEntryTypeAction
class|class
name|CustomizeEntryTypeAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|CustomizeEntryTypeAction ()
specifier|public
name|CustomizeEntryTypeAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Customize entry types"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JDialog
name|dl
init|=
operator|new
name|EntryCustomizationDialog2
argument_list|(
name|ths
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|dl
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|dl
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|GenFieldsCustomizationAction
class|class
name|GenFieldsCustomizationAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|GenFieldsCustomizationAction ()
specifier|public
name|GenFieldsCustomizationAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Set up general fields"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|GenFieldsCustomizer
name|gf
init|=
operator|new
name|GenFieldsCustomizer
argument_list|(
name|ths
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|gf
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|gf
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DatabasePropertiesAction
class|class
name|DatabasePropertiesAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|propertiesDialog
name|DatabasePropertiesDialog
name|propertiesDialog
init|=
literal|null
decl_stmt|;
DECL|method|DatabasePropertiesAction ()
specifier|public
name|DatabasePropertiesAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Database properties"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|propertiesDialog
operator|==
literal|null
condition|)
name|propertiesDialog
operator|=
operator|new
name|DatabasePropertiesDialog
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
expr_stmt|;
name|propertiesDialog
operator|.
name|setPanel
argument_list|(
name|basePanel
argument_list|()
argument_list|)
expr_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|propertiesDialog
argument_list|,
name|JabRefFrame
operator|.
name|this
argument_list|)
expr_stmt|;
name|propertiesDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*private class ForegroundLabel extends JLabel {          public ForegroundLabel(String s) {              super(s);              setFont(new Font("plain", Font.BOLD, 70));              setHorizontalAlignment(JLabel.CENTER);          }          public void paint(Graphics g) {             Graphics2D g2 = (Graphics2D)g;             g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);             super.paint(g2);    //To change body of overridden methods use File | Settings | File Templates.         }     }       */
DECL|class|MyGlassPane
specifier|private
class|class
name|MyGlassPane
extends|extends
name|JPanel
block|{
comment|//ForegroundLabel infoLabel = new ForegroundLabel("Showing search");
DECL|method|MyGlassPane ()
specifier|public
name|MyGlassPane
parameter_list|()
block|{
name|addKeyListener
argument_list|(
operator|new
name|KeyAdapter
argument_list|()
block|{ }
argument_list|)
expr_stmt|;
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{ }
argument_list|)
expr_stmt|;
comment|/*  infoLabel.setForeground(new Color(255, 100, 100, 124));          setLayout(new BorderLayout());         add(infoLabel, BorderLayout.CENTER);*/
name|super
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|getPredefinedCursor
argument_list|(
name|Cursor
operator|.
name|WAIT_CURSOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Override isOpaque() to prevent the glasspane from hiding the window contents:
DECL|method|isOpaque ()
specifier|public
name|boolean
name|isOpaque
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

