begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2004 R. Nagel   All programs in this directory and  subdirectories are published under the GNU General Public License as  described below.   This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or (at  your option) any later version.   This program is distributed in the hope that it will be useful, but  WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  General Public License for more details.   You should have received a copy of the GNU General Public License  along with this program; if not, write to the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA   Further information about the GNU GPL is available at:  http://www.gnu.org/copyleft/gpl.ja.html   */
end_comment

begin_comment
comment|// created by : r.nagel 19.10.2004
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// function : a popupmenu for bibtex fieldtext editors
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// modified :
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|*
import|;
end_import

begin_class
DECL|class|FieldTextMenu
specifier|public
class|class
name|FieldTextMenu
implements|implements
name|MouseListener
block|{
DECL|field|myFieldName
specifier|private
name|FieldEditor
name|myFieldName
decl_stmt|;
DECL|field|inputMenu
specifier|private
name|JPopupMenu
name|inputMenu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|copyAct
specifier|private
name|CopyAction
name|copyAct
init|=
operator|new
name|CopyAction
argument_list|()
decl_stmt|;
DECL|field|pasteAct
specifier|private
name|PasteAction
name|pasteAct
init|=
operator|new
name|PasteAction
argument_list|()
decl_stmt|;
DECL|method|FieldTextMenu (FieldEditor fieldComponent)
specifier|public
name|FieldTextMenu
parameter_list|(
name|FieldEditor
name|fieldComponent
parameter_list|)
block|{
name|myFieldName
operator|=
name|fieldComponent
expr_stmt|;
comment|// copy/paste Menu
name|inputMenu
operator|.
name|add
argument_list|(
operator|new
name|MenuHeaderAction
argument_list|(
name|myFieldName
operator|.
name|getFieldName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|inputMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|inputMenu
operator|.
name|add
argument_list|(
name|pasteAct
argument_list|)
expr_stmt|;
name|inputMenu
operator|.
name|add
argument_list|(
name|copyAct
argument_list|)
expr_stmt|;
block|}
DECL|method|mouseClicked (MouseEvent e)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{   }
DECL|method|mouseEntered (MouseEvent e)
specifier|public
name|void
name|mouseEntered
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{   }
DECL|method|mouseExited (MouseEvent e)
specifier|public
name|void
name|mouseExited
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{   }
DECL|method|mousePressed (MouseEvent e)
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|maybeShowPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|mouseReleased (MouseEvent e)
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|maybeShowPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|maybeShowPopup ( MouseEvent e )
specifier|private
name|void
name|maybeShowPopup
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
if|if
condition|(
name|myFieldName
operator|!=
literal|null
condition|)
block|{
comment|// enable/disable copy to clipboard if selected text available
name|String
name|txt
init|=
name|myFieldName
operator|.
name|getSelectedText
argument_list|()
decl_stmt|;
name|boolean
name|cStat
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|txt
operator|!=
literal|null
condition|)
if|if
condition|(
name|txt
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|cStat
operator|=
literal|true
expr_stmt|;
name|copyAct
operator|.
name|setEnabled
argument_list|(
name|cStat
argument_list|)
expr_stmt|;
name|inputMenu
operator|.
name|show
argument_list|(
name|e
operator|.
name|getComponent
argument_list|()
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// ---------------------------------------------------------------------------
DECL|class|BasicAction
specifier|abstract
class|class
name|BasicAction
extends|extends
name|AbstractAction
block|{
DECL|method|BasicAction (String text, String description, URL icon)
specifier|public
name|BasicAction
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|URL
name|icon
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|icon
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BasicAction (String text, String description, URL icon, KeyStroke key)
specifier|public
name|BasicAction
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|URL
name|icon
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|icon
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BasicAction (String text)
specifier|public
name|BasicAction
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BasicAction (String text, KeyStroke key)
specifier|public
name|BasicAction
parameter_list|(
name|String
name|text
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
specifier|abstract
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
function_decl|;
block|}
comment|//---------------------------------------------------------------
DECL|class|MenuHeaderAction
class|class
name|MenuHeaderAction
extends|extends
name|BasicAction
block|{
DECL|method|MenuHeaderAction (String comment)
specifier|public
name|MenuHeaderAction
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|super
argument_list|(
literal|"Edit -"
operator|+
name|comment
argument_list|)
expr_stmt|;
name|this
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{ }
block|}
comment|// ---------------------------------------------------------------------------
DECL|class|PasteAction
class|class
name|PasteAction
extends|extends
name|BasicAction
block|{
DECL|method|PasteAction ()
specifier|public
name|PasteAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Paste from clipboard"
argument_list|,
literal|"Paste from clipboard"
argument_list|,
name|GUIGlobals
operator|.
name|pasteIconFile
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|Clipboard
name|systemClip
init|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
decl_stmt|;
try|try
block|{
comment|//        String data = ( String ) systemClip.getContents( null ).getTransferData(
comment|//            DataFlavor.stringFlavor ) ;
name|String
name|data
init|=
name|ClipBoardManager
operator|.
name|clipBoard
operator|.
name|getClipboardContents
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
if|if
condition|(
name|myFieldName
operator|!=
literal|null
condition|)
name|myFieldName
operator|.
name|paste
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
block|}
block|}
comment|// ---------------------------------------------------------------------------
DECL|class|CopyAction
class|class
name|CopyAction
extends|extends
name|BasicAction
block|{
DECL|method|CopyAction ()
specifier|public
name|CopyAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Copy to clipboard"
argument_list|,
literal|"Copy to clipboard"
argument_list|,
name|GUIGlobals
operator|.
name|copyIconFile
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
comment|//        String data = ( String ) systemClip.getContents( null ).getTransferData(
comment|//            DataFlavor.stringFlavor ) ;
if|if
condition|(
name|myFieldName
operator|!=
literal|null
condition|)
block|{
name|String
name|data
init|=
name|myFieldName
operator|.
name|getSelectedText
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ClipBoardManager
operator|.
name|clipBoard
operator|.
name|setClipboardContents
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
block|}
block|}
comment|// ---------------------------------------------------------------------------
block|}
end_class

end_unit

