begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 David Weitzman, Morten O. Alver  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  Note: Modified for use in JabRef.  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|BibtexEntryType
specifier|public
specifier|abstract
class|class
name|BibtexEntryType
block|{
DECL|field|OTHER
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|OTHER
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Other"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
DECL|field|ARTICLE
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|ARTICLE
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Article"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"volume"
block|,
literal|"number"
block|,
literal|"pages"
block|,
literal|"month"
block|,
literal|"eid"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"journal"
block|,
literal|"year"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"AUTHOR, TITLE, JOURNAL and YEAR"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"journal"
block|,
literal|"year"
block|,
literal|"bibtexkey"
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|BOOKLET
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|BOOKLET
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Booklet"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"howpublished"
block|,
literal|"address"
block|,
literal|"month"
block|,
literal|"year"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"title"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"TITLE"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"title"
block|,
literal|"bibtexkey"
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|INBOOK
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|INBOOK
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Inbook"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"volume"
block|,
literal|"number"
block|,
literal|"series"
block|,
literal|"type"
block|,
literal|"address"
block|,
literal|"edition"
block|,
literal|"month"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"title"
block|,
literal|"publisher"
block|,
literal|"year"
block|,
literal|"editor"
block|,
literal|"author"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"TITLE, CHAPTER and/or PAGES, PUBLISHER, YEAR, and an "
operator|+
literal|"EDITOR and/or AUTHOR"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"title"
block|,
literal|"publisher"
block|,
literal|"year"
block|,
literal|"bibtexkey"
block|}
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|!=
literal|null
operator|)
operator|||
operator|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|!=
literal|null
operator|)
operator|)
operator|&&
operator|(
operator|(
name|entry
operator|.
name|getField
argument_list|(
literal|"chapter"
argument_list|)
operator|!=
literal|null
operator|)
operator|||
operator|(
name|entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
operator|!=
literal|null
operator|)
operator|)
operator|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|BOOK
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|BOOK
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Book"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"volume"
block|,
literal|"number"
block|,
literal|"series"
block|,
literal|"address"
block|,
literal|"edition"
block|,
literal|"month"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"title"
block|,
literal|"publisher"
block|,
literal|"year"
block|,
literal|"editor"
block|,
literal|"author"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"TITLE, PUBLISHER, YEAR, and an EDITOR and/or AUTHOR"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"title"
block|,
literal|"publisher"
block|,
literal|"year"
block|,
literal|"bibtexkey"
block|}
argument_list|)
operator|&&
operator|(
operator|(
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|!=
literal|null
operator|)
operator|||
operator|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|!=
literal|null
operator|)
operator|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|INCOLLECTION
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|INCOLLECTION
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Incollection"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"editor"
block|,
literal|"volume"
block|,
literal|"number"
block|,
literal|"series"
block|,
literal|"type"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"address"
block|,
literal|"edition"
block|,
literal|"month"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"booktitle"
block|,
literal|"publisher"
block|,
literal|"year"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"AUTHOR, TITLE, BOOKTITLE, PUBLISHER and YEAR"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"booktitle"
block|,
literal|"publisher"
block|,
literal|"year"
block|,
literal|"bibtexkey"
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|INPROCEEDINGS
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|INPROCEEDINGS
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Inproceedings"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"editor"
block|,
literal|"volume"
block|,
literal|"number"
block|,
literal|"series"
block|,
literal|"pages"
block|,
literal|"address"
block|,
literal|"month"
block|,
literal|"organization"
block|,
literal|"publisher"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"booktitle"
block|,
literal|"year"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"AUTHOR, TITLE, BOOKTITLE and YEAR"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"booktitle"
block|,
literal|"year"
block|,
literal|"bibtexkey"
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|PROCEEDINGS
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|PROCEEDINGS
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Proceedings"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"editor"
block|,
literal|"volume"
block|,
literal|"number"
block|,
literal|"series"
block|,
literal|"address"
block|,
literal|"publisher"
block|,
literal|"note"
block|,
literal|"month"
block|,
literal|"organization"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"title"
block|,
literal|"year"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"TITLE and YEAR"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"title"
block|,
literal|"year"
block|,
literal|"bibtexkey"
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|MANUAL
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|MANUAL
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Manual"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"organization"
block|,
literal|"address"
block|,
literal|"edition"
block|,
literal|"month"
block|,
literal|"year"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"title"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"TITLE"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"title"
block|,
literal|"bibtexkey"
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|TECHREPORT
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|TECHREPORT
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Techreport"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"type"
block|,
literal|"number"
block|,
literal|"address"
block|,
literal|"month"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"institution"
block|,
literal|"year"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"AUTHOR, TITLE, INSTITUTION and YEAR"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"institution"
block|,
literal|"year"
block|,
literal|"bibtexkey"
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|MASTERSTHESIS
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|MASTERSTHESIS
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Mastersthesis"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"type"
block|,
literal|"address"
block|,
literal|"month"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"school"
block|,
literal|"year"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"AUTHOR, TITLE, SCHOOL and YEAR"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"school"
block|,
literal|"year"
block|,
literal|"bibtexkey"
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|PHDTHESIS
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|PHDTHESIS
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Phdthesis"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"type"
block|,
literal|"address"
block|,
literal|"month"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"school"
block|,
literal|"year"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"AUTHOR, TITLE, SCHOOL and YEAR"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"school"
block|,
literal|"year"
block|,
literal|"bibtexkey"
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|UNPUBLISHED
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|UNPUBLISHED
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Unpublished"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"month"
block|,
literal|"year"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"AUTHOR, TITLE and NOTE"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"note"
block|,
literal|"bibtexkey"
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|MISC
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|MISC
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Misc"
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"howpublished"
block|,
literal|"month"
block|,
literal|"year"
block|,
literal|"note"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|"None"
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bibtexkey"
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|ALL_TYPES
specifier|public
specifier|static
specifier|final
name|Set
name|ALL_TYPES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|BibtexEntryType
index|[]
block|{
name|ARTICLE
block|,
name|INBOOK
block|,
name|BOOK
block|,
name|BOOKLET
block|,
name|INCOLLECTION
block|,
name|INPROCEEDINGS
block|,
name|PROCEEDINGS
block|,
name|MANUAL
block|,
name|MASTERSTHESIS
block|,
name|PHDTHESIS
block|,
name|TECHREPORT
block|,
name|UNPUBLISHED
block|,
name|MISC
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|getName ()
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
DECL|method|getOptionalFields ()
specifier|public
specifier|abstract
name|String
index|[]
name|getOptionalFields
parameter_list|()
function_decl|;
DECL|method|getRequiredFields ()
specifier|public
specifier|abstract
name|String
index|[]
name|getRequiredFields
parameter_list|()
function_decl|;
DECL|method|getGeneralFields ()
specifier|public
name|String
index|[]
name|getGeneralFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"crossref"
block|,
literal|"keywords"
block|,
literal|"doi"
block|,
literal|"url"
block|,
literal|"pdf"
block|,
literal|"abstract"
block|,
literal|"comment"
block|}
return|;
block|}
DECL|method|describeRequiredFields ()
specifier|public
specifier|abstract
name|String
name|describeRequiredFields
parameter_list|()
function_decl|;
DECL|method|hasAllRequiredFields (BibtexEntry entry)
specifier|public
specifier|abstract
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
function_decl|;
DECL|method|getUtilityFields ()
specifier|public
name|String
index|[]
name|getUtilityFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"search"
block|}
return|;
block|}
DECL|method|isRequired (String field)
specifier|public
name|boolean
name|isRequired
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|String
index|[]
name|req
init|=
name|getRequiredFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|req
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|req
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|method|isOptional (String field)
specifier|public
name|boolean
name|isOptional
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|String
index|[]
name|opt
init|=
name|getOptionalFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opt
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|opt
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

