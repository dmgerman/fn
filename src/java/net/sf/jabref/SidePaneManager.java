begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003  Nizar N. Batada, Morten O. Alver  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_class
DECL|class|SidePaneManager
specifier|public
class|class
name|SidePaneManager
implements|implements
name|ChangeListener
block|{
DECL|field|frame
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|panel
name|BasePanel
name|panel
decl_stmt|;
DECL|field|sidep
name|SidePane
name|sidep
decl_stmt|;
DECL|field|prefs
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|metaData
name|MetaData
name|metaData
decl_stmt|;
DECL|field|components
name|LinkedHashMap
name|components
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
DECL|field|visible
name|Vector
name|visible
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
DECL|field|visibleComponents
specifier|private
name|int
name|visibleComponents
init|=
literal|0
decl_stmt|;
DECL|method|SidePaneManager (JabRefFrame frame)
specifier|public
name|SidePaneManager
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|this
operator|.
name|prefs
operator|=
name|Globals
operator|.
name|prefs
expr_stmt|;
comment|// TODO: tab listener, update all sidepanecomponents.
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|frame
operator|.
name|tabbedPane
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|sidep
operator|=
operator|new
name|SidePane
argument_list|()
expr_stmt|;
block|}
DECL|method|getPanel ()
specifier|public
name|SidePane
name|getPanel
parameter_list|()
block|{
return|return
name|sidep
return|;
block|}
DECL|method|populatePanel ()
specifier|public
name|void
name|populatePanel
parameter_list|()
block|{
comment|/*          * if (components.size()> 0) { panel.setLeftComponent(sidep); } else          * panel.setLeftComponent(null);          */
name|updateView
argument_list|()
expr_stmt|;
if|if
condition|(
name|components
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|sidep
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|sidep
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|isPanelVisible (String name)
specifier|public
name|boolean
name|isPanelVisible
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|o
init|=
name|components
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
return|return
name|visible
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Side pane component '"
operator|+
name|name
operator|+
literal|"' unknown."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|togglePanel (String name)
specifier|public
name|void
name|togglePanel
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|o
init|=
name|components
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|visible
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|visible
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
comment|//sidep.setComponents(visible);
name|updateView
argument_list|()
expr_stmt|;
operator|(
operator|(
name|SidePaneComponent
operator|)
name|o
operator|)
operator|.
name|componentOpening
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|visible
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
comment|//sidep.setComponents(visible);
name|updateView
argument_list|()
expr_stmt|;
operator|(
operator|(
name|SidePaneComponent
operator|)
name|o
operator|)
operator|.
name|componentClosing
argument_list|()
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Side pane component '"
operator|+
name|name
operator|+
literal|"' unknown."
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureVisible (String name)
specifier|public
specifier|synchronized
name|void
name|ensureVisible
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|o
init|=
name|components
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|visible
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|visible
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
comment|//sidep.setComponents(visible);
name|updateView
argument_list|()
expr_stmt|;
operator|(
operator|(
name|SidePaneComponent
operator|)
name|o
operator|)
operator|.
name|componentOpening
argument_list|()
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Side pane component '"
operator|+
name|name
operator|+
literal|"' unknown."
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureNotVisible (String name)
specifier|public
specifier|synchronized
name|void
name|ensureNotVisible
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|o
init|=
name|components
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|visible
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|visible
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|updateView
argument_list|()
expr_stmt|;
operator|(
operator|(
name|SidePaneComponent
operator|)
name|o
operator|)
operator|.
name|componentOpening
argument_list|()
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Side pane component '"
operator|+
name|name
operator|+
literal|"' unknown."
argument_list|)
expr_stmt|;
block|}
DECL|method|add (String name, SidePaneComponent comp)
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|SidePaneComponent
name|comp
parameter_list|)
block|{
name|components
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|visible
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
comment|//sidep.setComponents(visible);
name|updateView
argument_list|()
expr_stmt|;
name|comp
operator|.
name|componentOpening
argument_list|()
expr_stmt|;
comment|/*sidep.add(comp);         components.put(name, comp);         visibleComponents++;         if (visibleComponents == 1)             panel.setLeftComponent(sidep);           comp.componentOpening();         comp.setVisibility(true);*/
block|}
DECL|method|register (String name, SidePaneComponent comp)
specifier|public
specifier|synchronized
name|void
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|SidePaneComponent
name|comp
parameter_list|)
block|{
name|components
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|comp
argument_list|)
expr_stmt|;
comment|/*comp.setVisible(false);       sidep.add(comp);       components.put(name, comp);*/
block|}
DECL|method|hasComponent (String name)
specifier|public
specifier|synchronized
name|boolean
name|hasComponent
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|components
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
DECL|method|hideAway (String name)
specifier|public
specifier|synchronized
name|void
name|hideAway
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|o
init|=
name|components
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|SidePaneComponent
operator|)
name|o
operator|)
operator|.
name|componentClosing
argument_list|()
expr_stmt|;
if|if
condition|(
name|visible
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|visible
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
comment|//sidep.setComponents(visible);
name|updateView
argument_list|()
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Side pane component '"
operator|+
name|name
operator|+
literal|"' unknown."
argument_list|)
expr_stmt|;
block|}
DECL|method|hideAway (SidePaneComponent comp)
specifier|public
specifier|synchronized
name|void
name|hideAway
parameter_list|(
name|SidePaneComponent
name|comp
parameter_list|)
block|{
name|comp
operator|.
name|componentClosing
argument_list|()
expr_stmt|;
name|visible
operator|.
name|remove
argument_list|(
name|comp
argument_list|)
expr_stmt|;
comment|//sidep.setComponents(visible);
name|updateView
argument_list|()
expr_stmt|;
comment|/*comp.componentClosing();   comp.setVisible(false);  // Swing method to make component invisible.   comp.setVisibility(false); // Our own boolean to keep track of visibility.   visibleComponents--;   if (visibleComponents == 0)       panel.remove(sidep);     */
block|}
comment|/**      * Update all side pane components to show information from the given BasePanel.      * @param panel      */
DECL|method|setActiveBasePanel (BasePanel panel)
specifier|public
name|void
name|setActiveBasePanel
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|components
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
operator|(
operator|(
name|SidePaneComponent
operator|)
name|components
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|.
name|setActiveBasePanel
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateView ()
specifier|public
name|void
name|updateView
parameter_list|()
block|{
name|Vector
name|toShow
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|components
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|visible
operator|.
name|contains
argument_list|(
name|components
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
name|toShow
operator|.
name|add
argument_list|(
name|components
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sidep
operator|.
name|setComponents
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
name|boolean
name|wasVisible
init|=
name|sidep
operator|.
name|isVisible
argument_list|()
decl_stmt|;
if|if
condition|(
name|visible
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sidep
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wasVisible
condition|)
name|frame
operator|.
name|contentPane
operator|.
name|setDividerLocation
argument_list|(
name|getPanel
argument_list|()
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|width
argument_list|)
expr_stmt|;
block|}
else|else
name|sidep
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|revalidate ()
specifier|public
name|void
name|revalidate
parameter_list|()
block|{
name|sidep
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|sidep
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
DECL|method|stateChanged (ChangeEvent event)
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
comment|// Change by Morten Alver 2005.12.04:
comment|// By postponing the updating of the side pane components, we get rid of the annoying
comment|// latency when switching tabs:
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|setActiveBasePanel
argument_list|(
operator|(
name|BasePanel
operator|)
name|frame
operator|.
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

