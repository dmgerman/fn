begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.oo
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|oo
package|;
end_package

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|BasicEventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|SortedList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|gui
operator|.
name|AdvancedTableFormat
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|gui
operator|.
name|WritableTableFormat
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|EventSelectionModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|EventTableModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonStackBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumnModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|filechooser
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Panel for setting up the list of directories and files to search for style files.  * Each directory entry can be set to be searched recursively or not.  */
end_comment

begin_class
DECL|class|StyleDirectoriesPanel
specifier|public
class|class
name|StyleDirectoriesPanel
block|{
DECL|field|listeners
name|List
argument_list|<
name|ActionListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|ActionListener
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|entries
name|EventList
argument_list|<
name|DirElement
argument_list|>
name|entries
init|=
operator|new
name|BasicEventList
argument_list|<
name|DirElement
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|sortedEntries
name|EventList
argument_list|<
name|DirElement
argument_list|>
name|sortedEntries
decl_stmt|;
DECL|field|tableModel
name|EventTableModel
argument_list|<
name|DirElement
argument_list|>
name|tableModel
decl_stmt|;
DECL|field|selectionModel
name|EventSelectionModel
argument_list|<
name|DirElement
argument_list|>
name|selectionModel
decl_stmt|;
DECL|field|panel
name|JPanel
name|panel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|addFile
name|JButton
name|addFile
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Add file"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|addDir
name|addDir
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Add directory"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|remove
name|remove
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Remove"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|styleFileFilter
name|FileFilter
name|styleFileFilter
init|=
literal|null
decl_stmt|;
DECL|field|TABLE_VISIBLE_ROWS
specifier|static
specifier|final
name|int
name|TABLE_VISIBLE_ROWS
init|=
literal|5
decl_stmt|;
DECL|field|parent
specifier|private
name|JDialog
name|parent
decl_stmt|;
comment|/**      *      * @param dirs A String array containing two elements per file/directory:      *   first the path, then the string "true" or "false", determining whether      *   the element should be handled recursively.      */
DECL|method|StyleDirectoriesPanel (JDialog parent, String[] dirs)
specifier|public
name|StyleDirectoriesPanel
parameter_list|(
name|JDialog
name|parent
parameter_list|,
name|String
index|[]
name|dirs
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|sortedEntries
operator|=
operator|new
name|SortedList
argument_list|<
name|DirElement
argument_list|>
argument_list|(
name|entries
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirs
operator|!=
literal|null
condition|)
name|setValues
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|tableModel
operator|=
operator|new
name|EventTableModel
argument_list|<
name|DirElement
argument_list|>
argument_list|(
name|sortedEntries
argument_list|,
operator|new
name|DirElementFormat
argument_list|()
argument_list|)
expr_stmt|;
name|selectionModel
operator|=
operator|new
name|EventSelectionModel
argument_list|<
name|DirElement
argument_list|>
argument_list|(
name|sortedEntries
argument_list|)
expr_stmt|;
name|JTable
name|table
init|=
operator|new
name|JTable
argument_list|(
name|tableModel
argument_list|)
decl_stmt|;
name|table
operator|.
name|setSelectionModel
argument_list|(
name|selectionModel
argument_list|)
expr_stmt|;
name|table
operator|.
name|setPreferredScrollableViewportSize
argument_list|(
operator|new
name|Dimension
argument_list|(
name|table
operator|.
name|getPreferredScrollableViewportSize
argument_list|()
operator|.
name|width
argument_list|,
name|TABLE_VISIBLE_ROWS
operator|*
name|table
operator|.
name|getRowHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TableColumnModel
name|cm
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|1
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|ButtonStackBuilder
name|bb
init|=
operator|new
name|ButtonStackBuilder
argument_list|()
decl_stmt|;
name|bb
operator|.
name|addGridded
argument_list|(
name|addFile
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGridded
argument_list|(
name|addDir
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGridded
argument_list|(
name|remove
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|DefaultFormBuilder
name|b
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"fill:pref:grow, 2dlu, fill:pref"
argument_list|,
literal|"pref, fill:pref"
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|appendSeparator
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Directories and files"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
operator|new
name|JLabel
argument_list|(
literal|"<html>"
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Here you set up which single files and directories (with or without subdirectories)<br>"
operator|+
literal|" should be searched to build the list of available styles."
argument_list|)
operator|+
literal|"</html>"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|b
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|bb
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|b
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|addFile
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|addEntry
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addDir
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|addEntry
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|remove
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|removeSelected
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getPanel ()
specifier|public
name|JPanel
name|getPanel
parameter_list|()
block|{
return|return
name|panel
return|;
block|}
DECL|method|addEntry (boolean directory)
specifier|private
name|void
name|addEntry
parameter_list|(
name|boolean
name|directory
parameter_list|)
block|{
name|File
name|initValue
init|=
operator|new
name|File
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooStyleFileLastDir"
argument_list|)
argument_list|)
decl_stmt|;
name|JFileChooser
name|jfc
init|=
operator|new
name|JFileChooser
argument_list|(
name|initValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
condition|)
name|jfc
operator|.
name|setFileSelectionMode
argument_list|(
name|JFileChooser
operator|.
name|DIRECTORIES_ONLY
argument_list|)
expr_stmt|;
else|else
block|{
comment|// Set file filter:
if|if
condition|(
name|styleFileFilter
operator|==
literal|null
condition|)
block|{
name|styleFileFilter
operator|=
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|isDirectory
argument_list|()
operator|||
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|StyleSelectDialog
operator|.
name|STYLE_FILE_EXTENSION
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|StyleSelectDialog
operator|.
name|STYLE_FILE_EXTENSION
return|;
block|}
block|}
expr_stmt|;
block|}
name|jfc
operator|.
name|addChoosableFileFilter
argument_list|(
name|styleFileFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jfc
operator|.
name|showOpenDialog
argument_list|(
name|parent
argument_list|)
operator|==
name|JFileChooser
operator|.
name|APPROVE_OPTION
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
literal|"ooStyleFileLastDir"
argument_list|,
name|jfc
operator|.
name|getSelectedFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|DirElement
name|elm
init|=
operator|new
name|DirElement
argument_list|(
name|jfc
operator|.
name|getSelectedFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|entries
operator|.
name|contains
argument_list|(
name|elm
argument_list|)
condition|)
comment|// prevent dupes
name|entries
operator|.
name|add
argument_list|(
name|elm
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|notifyListeners
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|removeSelected ()
specifier|private
name|void
name|removeSelected
parameter_list|()
block|{
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|DirElement
name|elm
range|:
name|selectionModel
operator|.
name|getSelected
argument_list|()
control|)
block|{
name|entries
operator|.
name|remove
argument_list|(
name|elm
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|notifyListeners
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get a list of dir elements describing the current selection.      * @return      */
DECL|method|getDirElements ()
specifier|public
name|List
argument_list|<
name|DirElement
argument_list|>
name|getDirElements
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|entries
argument_list|)
return|;
block|}
DECL|method|setValues (String[] dirs)
specifier|private
name|void
name|setValues
parameter_list|(
name|String
index|[]
name|dirs
parameter_list|)
block|{
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|entries
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|File
name|tmp
init|=
operator|new
name|File
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|DirElement
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|,
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|dirs
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
name|tmp
operator|.
name|isDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get a String array describing the current selection.      * @return A String array containing two elements per file/directory:      *   first the path, then the string "true" or "false", determining whether      *   the element should be handled recursively.      */
DECL|method|getStringArray ()
specifier|public
name|String
index|[]
name|getStringArray
parameter_list|()
block|{
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|String
index|[]
name|res
init|=
operator|new
name|String
index|[
name|entries
operator|.
name|size
argument_list|()
operator|*
literal|2
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DirElement
name|elm
range|:
name|entries
control|)
block|{
name|res
index|[
name|i
operator|++
index|]
operator|=
name|elm
operator|.
name|path
expr_stmt|;
name|res
index|[
name|i
operator|++
index|]
operator|=
name|elm
operator|.
name|recursive
condition|?
literal|"true"
else|:
literal|"false"
expr_stmt|;
block|}
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/**      * Add a listener that will be notified that the directory setup has      * been changed.      * @param listener The listener.      */
DECL|method|addActionListener (ActionListener listener)
specifier|public
name|void
name|addActionListener
parameter_list|(
name|ActionListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeActionListener (ActionListener listener)
specifier|public
name|void
name|removeActionListener
parameter_list|(
name|ActionListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|notifyListeners ()
specifier|private
name|void
name|notifyListeners
parameter_list|()
block|{
for|for
control|(
name|ActionListener
name|listener
range|:
name|listeners
control|)
name|listener
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|StyleDirectoriesPanel
operator|.
name|this
argument_list|,
literal|0
argument_list|,
literal|"list change"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Wrapper class for presenting the entries as a table with checkboxes for      * recursiveness.      */
DECL|class|DirElement
specifier|public
specifier|static
class|class
name|DirElement
implements|implements
name|Comparable
block|{
DECL|field|path
specifier|public
name|String
name|path
decl_stmt|;
DECL|field|recursive
DECL|field|canBeRecursive
specifier|public
name|boolean
name|recursive
decl_stmt|,
name|canBeRecursive
decl_stmt|;
DECL|method|DirElement (String path, boolean recursive, boolean canBeRecursive)
specifier|public
name|DirElement
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|canBeRecursive
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
name|this
operator|.
name|canBeRecursive
operator|=
name|canBeRecursive
expr_stmt|;
block|}
DECL|method|compareTo (Object o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|DirElement
name|other
init|=
operator|(
name|DirElement
operator|)
name|o
decl_stmt|;
return|return
name|path
operator|.
name|compareToIgnoreCase
argument_list|(
name|other
operator|.
name|path
argument_list|)
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|DirElement
name|other
init|=
operator|(
name|DirElement
operator|)
name|o
decl_stmt|;
return|return
name|other
operator|.
name|path
operator|.
name|equals
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
DECL|class|DirElementFormat
class|class
name|DirElementFormat
implements|implements
name|WritableTableFormat
argument_list|<
name|DirElement
argument_list|>
implements|,
name|AdvancedTableFormat
argument_list|<
name|DirElement
argument_list|>
block|{
DECL|method|getColumnClass (int i)
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|String
operator|.
name|class
return|;
else|else
return|return
name|Boolean
operator|.
name|class
return|;
block|}
DECL|method|getColumnComparator (int i)
specifier|public
name|Comparator
name|getColumnComparator
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|getColumnCount ()
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
DECL|method|getColumnName (int i)
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|Globals
operator|.
name|lang
argument_list|(
literal|"Directory or file"
argument_list|)
return|;
else|else
return|return
name|Globals
operator|.
name|lang
argument_list|(
literal|"Include subdirectories"
argument_list|)
return|;
block|}
DECL|method|getColumnValue (DirElement dirElement, int i)
specifier|public
name|Object
name|getColumnValue
parameter_list|(
name|DirElement
name|dirElement
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|dirElement
operator|.
name|path
return|;
else|else
return|return
name|dirElement
operator|.
name|recursive
return|;
block|}
DECL|method|isEditable (DirElement elm, int i)
specifier|public
name|boolean
name|isEditable
parameter_list|(
name|DirElement
name|elm
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|i
operator|==
literal|1
operator|)
operator|&&
operator|(
name|elm
operator|.
name|canBeRecursive
operator|)
return|;
block|}
DECL|method|setColumnValue (DirElement elm, Object o, int col)
specifier|public
name|DirElement
name|setColumnValue
parameter_list|(
name|DirElement
name|elm
parameter_list|,
name|Object
name|o
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|col
operator|==
literal|1
condition|)
block|{
name|elm
operator|.
name|recursive
operator|=
operator|(
name|Boolean
operator|)
name|o
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|notifyListeners
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|elm
return|;
block|}
block|}
block|}
end_class

end_unit

