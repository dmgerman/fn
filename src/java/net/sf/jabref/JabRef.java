begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Morten O. Alver, Nizar N. Batada  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|*
import|;
end_import

begin_comment
comment|//import javax.swing.UIManager;
end_comment

begin_comment
comment|//import javax.swing.UIDefaults;
end_comment

begin_comment
comment|//import javax.swing.UnsupportedLookAndFeelException;
end_comment

begin_class
DECL|class|JabRef
specifier|public
class|class
name|JabRef
block|{
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// First we quickly scan the command line parameters for any that signal that the GUI
comment|// should not be opened. This is used to decide whether we should show the splash screen or not.
name|boolean
name|openGui
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-o"
argument_list|)
condition|)
name|openGui
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Help info goes here."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|SplashScreen
name|ss
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|openGui
condition|)
block|{
name|ss
operator|=
operator|new
name|SplashScreen
argument_list|()
expr_stmt|;
name|ss
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
else|else
name|Util
operator|.
name|pr
argument_list|(
literal|"JabRef "
operator|+
name|GUIGlobals
operator|.
name|version
argument_list|)
expr_stmt|;
comment|//Font fnt = new Font("plain", Font.PLAIN, 12);
name|Object
name|fnt
init|=
operator|new
name|UIDefaults
operator|.
name|ProxyLazyValue
argument_list|(
literal|"javax.swing.plaf.FontUIResource"
argument_list|,
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"Arial"
block|,
operator|new
name|Integer
argument_list|(
name|Font
operator|.
name|PLAIN
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
literal|12
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"Button.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"ToggleButton.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"RadioButton.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"CheckBox.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"ColorChooser.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"ComboBox.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"Label.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"List.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"MenuBar.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"MenuItem.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"RadioButtonMenuItem.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"CheckBoxMenuItem.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"Menu.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"PopupMenu.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"OptionPane.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"Panel.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"ProgressBar.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"ScrollPane.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"Viewport.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"TabbedPane.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"Table.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"TableHeader.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"TextField.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"PasswordField.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"TextArea.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"TextPane.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"EditorPane.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"TitledBorder.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"ToolBar.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"ToolTip.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"Tree.font"
argument_list|,
name|fnt
argument_list|)
expr_stmt|;
comment|// This property is set to make the Mac OSX Java VM move the menu bar to the top
comment|// of the screen, where Mac users expect it to be.
name|System
operator|.
name|setProperty
argument_list|(
literal|"apple.laf.useScreenMenuBar"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|//String osName = System.getProperty("os.name", "def");
if|if
condition|(
name|Globals
operator|.
name|ON_WIN
condition|)
block|{
try|try
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
operator|new
name|com
operator|.
name|sun
operator|.
name|java
operator|.
name|swing
operator|.
name|plaf
operator|.
name|windows
operator|.
name|WindowsLookAndFeel
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedLookAndFeelException
name|ex
parameter_list|)
block|{}
block|}
elseif|else
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_MAC
condition|)
block|{
try|try
block|{
comment|//Class plastic = Class.forName("com.jgoodies.plaf.plastic.PlasticLookAndFeel");
comment|//LookAndFeel lnf = new com.jgoodies.plaf.plastic.PlasticLookAndFeel();
comment|//LookAndFeel lnf = new com.sun.java.swing.plaf.gtk.GTKLookAndFeel();
name|LookAndFeel
name|lnf
init|=
operator|new
name|com
operator|.
name|incors
operator|.
name|plaf
operator|.
name|kunststoff
operator|.
name|KunststoffLookAndFeel
argument_list|()
decl_stmt|;
comment|//com.incors.plaf.kunststoff.KunststoffLookAndFeel.setCurrentTheme(new com.incors.plaf.kunststoff.themes.KunststoffDesktopTheme());
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|lnf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedLookAndFeelException
name|ex
parameter_list|)
block|{}
block|}
name|JabRefPreferences
name|prefs
init|=
operator|new
name|JabRefPreferences
argument_list|()
decl_stmt|;
comment|/*if (!prefs.get("columnNames").substring(0,1).equals(GUIGlobals.NUMBER_COL)) {           prefs.put("columnNames", GUIGlobals.NUMBER_COL+";"+prefs.get("columnNames"));           prefs.put("columnWidths", GUIGlobals.NUMBER_COL_LENGTH+";"+prefs.get("columnWidths"));         }*/
name|BibtexEntryType
operator|.
name|loadCustomEntryTypes
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|setLanguage
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|GUIGlobals
operator|.
name|CURRENTFONT
operator|=
operator|new
name|Font
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"fontFamily"
argument_list|)
argument_list|,
name|prefs
operator|.
name|getInt
argument_list|(
literal|"fontStyle"
argument_list|)
argument_list|,
name|prefs
operator|.
name|getInt
argument_list|(
literal|"fontSize"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Basic command line interpretation...
name|Vector
name|loaded
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
comment|// Load a bibtex file:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Opening"
argument_list|)
operator|+
literal|": "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
name|ImportFormatReader
operator|.
name|loadDatabase
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|pr
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|args
index|[
name|i
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*jrf.output("Opening: " + args[i]);             //verify the file             File f = new File (args[i]);             if( f.exists()&& f.canRead()&& f.isFile()) {               jrf.fileToOpen=f;               jrf.openDatabaseAction.openIt(true);               base = jrf.basePanel().database();             }else{               System.err.println("Error" + args[i] + " is not a valid file or is not readable");               //JOptionPane...             }*/
block|}
else|else
block|{
comment|// A command line switch.
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-i"
argument_list|)
operator|&&
operator|(
name|args
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|>
literal|3
operator|)
operator|&&
operator|(
name|args
operator|.
name|length
operator|>
name|i
operator|+
literal|1
operator|)
condition|)
block|{
comment|// Import a database in a certain format.
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Importing"
argument_list|)
operator|+
literal|": "
operator|+
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|BibtexDatabase
name|base
init|=
name|ImportFormatReader
operator|.
name|importFile
argument_list|(
name|args
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|,
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
operator|new
name|ParserResult
argument_list|(
name|base
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
name|pr
operator|.
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-o"
argument_list|)
operator|&&
operator|(
name|args
operator|.
name|length
operator|>
name|i
operator|+
literal|1
operator|)
condition|)
block|{
comment|// This signals that the latest import should be stored in BibTeX format to the given file.
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|loaded
operator|.
name|elementAt
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saving"
argument_list|)
operator|+
literal|": "
operator|+
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|FileActions
operator|.
name|saveDatabase
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
operator|new
name|MetaData
argument_list|(
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
name|prefs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not save file"
argument_list|)
operator|+
literal|" '"
operator|+
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The -o option must be preceded by an import option."
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-o"
argument_list|)
operator|&&
operator|(
name|args
operator|.
name|length
operator|>
name|i
operator|+
literal|1
operator|)
condition|)
block|{
comment|// The database should be exported to the named database in the format following "-o_"
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|loaded
operator|.
name|elementAt
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Exporting"
argument_list|)
operator|+
literal|": "
operator|+
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|FileActions
operator|.
name|exportDatabase
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|args
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not export file"
argument_list|)
operator|+
literal|" '"
operator|+
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex2
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unknown export format"
argument_list|)
operator|+
literal|": "
operator|+
name|args
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The -o option must be preceded by an import option."
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//no arguments (this will be for later and other command line switches)
comment|// ignore..
block|}
if|if
condition|(
name|openGui
condition|)
block|{
name|JabRefFrame
name|jrf
init|=
operator|new
name|JabRefFrame
argument_list|()
decl_stmt|;
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|loaded
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|jrf
operator|.
name|addTab
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|pr
operator|.
name|getFile
argument_list|()
argument_list|,
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
operator|(
name|i
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|jrf
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

