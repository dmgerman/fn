begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2003 Morten O. Alver, Nizar N. Batada  *   * All programs in this directory and subdirectories are published under the GNU  * General Public License as described below.  *  * This program is free software; you can redistribute it and/or modify it under  * the terms of the GNU General Public License as published by the Free Software  * Foundation; either version 2 of the License, or (at your option) any later  * version.  *  * This program is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more  * details.  *  * You should have received a copy of the GNU General Public License along with  * this program; if not, write to the Free Software Foundation, Inc., 59 Temple  * Place, Suite 330, Boston, MA 02111-1307 USA  *  * Further information about the GNU GPL is available at:  * http://www.gnu.org/copyleft/gpl.ja.html  *  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|plaf
operator|.
name|FontSizeHints
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|auximport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|remote
operator|.
name|RemoteListener
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|dtools
operator|.
name|ritopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Frame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|plaf
operator|.
name|plastic
operator|.
name|Plastic3DLookAndFeel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|plaf
operator|.
name|windows
operator|.
name|ExtWindowsLookAndFeel
import|;
end_import

begin_comment
comment|//import javax.swing.UIManager;
end_comment

begin_comment
comment|//import javax.swing.UIDefaults;
end_comment

begin_comment
comment|//import javax.swing.UnsupportedLookAndFeelException;
end_comment

begin_class
DECL|class|JabRef
specifier|public
class|class
name|JabRef
block|{
DECL|field|ths
specifier|public
specifier|static
name|JabRef
name|ths
decl_stmt|;
DECL|field|remoteListener
specifier|public
specifier|static
name|RemoteListener
name|remoteListener
init|=
literal|null
decl_stmt|;
DECL|field|jrf
specifier|public
name|JabRefFrame
name|jrf
decl_stmt|;
DECL|field|options
specifier|public
name|Options
name|options
decl_stmt|;
DECL|field|splashScreen
specifier|public
name|Frame
name|splashScreen
init|=
literal|null
decl_stmt|;
DECL|field|graphicFailure
name|boolean
name|graphicFailure
init|=
literal|false
decl_stmt|;
DECL|field|importFile
DECL|field|exportFile
DECL|field|exportPrefs
DECL|field|importPrefs
DECL|field|auxImExport
DECL|field|importToOpenBase
name|StringOption
name|importFile
decl_stmt|,
name|exportFile
decl_stmt|,
name|exportPrefs
decl_stmt|,
name|importPrefs
decl_stmt|,
name|auxImExport
decl_stmt|,
name|importToOpenBase
decl_stmt|;
DECL|field|helpO
DECL|field|disableGui
DECL|field|blank
DECL|field|loadSess
name|BooleanOption
name|helpO
decl_stmt|,
name|disableGui
decl_stmt|,
name|blank
decl_stmt|,
name|loadSess
decl_stmt|;
comment|/*     * class StringArrayOption extends ArrayOption { public public void     * modify(String value) { } public void modify(String[] value) { } public     * Object[] getObjectArray() { return null; } public String getTypeName() {     * return "Strings"; } public String getStringValue() { return ""; } public     * Object getObject() { return null; } }     */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
operator|new
name|JabRef
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|JabRef (String[] args)
specifier|public
name|JabRef
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|ths
operator|=
name|this
expr_stmt|;
name|JabRefPreferences
name|prefs
init|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|BibtexEntryType
operator|.
name|loadCustomEntryTypes
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
comment|//Globals.turnOnFileLogging();
name|Globals
operator|.
name|setLanguage
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useRemoteServer"
argument_list|)
condition|)
block|{
name|remoteListener
operator|=
name|RemoteListener
operator|.
name|openRemoteListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|remoteListener
operator|!=
literal|null
condition|)
block|{
name|remoteListener
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Unless we are alone, try to contact already running JabRef:
if|if
condition|(
name|remoteListener
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|RemoteListener
operator|.
name|sendToActiveJabRefInstance
argument_list|(
name|args
argument_list|)
condition|)
empty_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|//System.setProperty("sun.awt.noerasebackground", "true");
comment|//System.out.println(java.awt.Toolkit.getDefaultToolkit().getDesktopProperty("awt.dynamicLayoutSupported"));
comment|// Make sure of a proper cleanup when quitting (e.g. deleting temporary
comment|// files).
name|System
operator|.
name|runFinalizersOnExit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Vector
name|loaded
init|=
name|processArguments
argument_list|(
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|openWindow
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
block|}
DECL|method|setupOptions ()
specifier|private
name|void
name|setupOptions
parameter_list|()
block|{
name|importFile
operator|=
operator|new
name|StringOption
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|exportFile
operator|=
operator|new
name|StringOption
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|helpO
operator|=
operator|new
name|BooleanOption
argument_list|()
expr_stmt|;
name|disableGui
operator|=
operator|new
name|BooleanOption
argument_list|()
expr_stmt|;
name|blank
operator|=
operator|new
name|BooleanOption
argument_list|()
expr_stmt|;
name|loadSess
operator|=
operator|new
name|BooleanOption
argument_list|()
expr_stmt|;
name|exportPrefs
operator|=
operator|new
name|StringOption
argument_list|(
literal|"jabref_prefs.xml"
argument_list|)
expr_stmt|;
name|importPrefs
operator|=
operator|new
name|StringOption
argument_list|(
literal|"jabref_prefs.xml"
argument_list|)
expr_stmt|;
name|auxImExport
operator|=
operator|new
name|StringOption
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|importToOpenBase
operator|=
operator|new
name|StringOption
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|Options
argument_list|(
literal|"JabRef "
argument_list|)
expr_stmt|;
comment|// Create an options repository.
name|options
operator|.
name|setVersion
argument_list|(
name|GUIGlobals
operator|.
name|version
argument_list|)
expr_stmt|;
name|importFile
operator|.
name|setDescription
argument_list|(
literal|"imopoepuoeu"
argument_list|)
expr_stmt|;
comment|//Globals.lang);
name|options
operator|.
name|register
argument_list|(
literal|"nogui"
argument_list|,
literal|'n'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"No GUI. Only process command line options."
argument_list|)
argument_list|,
name|disableGui
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"import"
argument_list|,
literal|'i'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import file"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"filename"
argument_list|)
operator|+
literal|"[,import format]"
argument_list|,
name|importFile
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"output"
argument_list|,
literal|'o'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Output or export file"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"filename"
argument_list|)
operator|+
literal|"[,export format]"
argument_list|,
name|exportFile
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"help"
argument_list|,
literal|'h'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Display help on command line options"
argument_list|)
argument_list|,
name|helpO
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"loads"
argument_list|,
literal|'l'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Load session"
argument_list|)
argument_list|,
name|loadSess
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"prexp"
argument_list|,
literal|'x'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Export preferences to file"
argument_list|)
argument_list|,
name|exportPrefs
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"primp"
argument_list|,
literal|'p'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import preferences from file"
argument_list|)
argument_list|,
name|importPrefs
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"aux"
argument_list|,
literal|'a'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Subdatabase from aux"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"file"
argument_list|)
operator|+
literal|"[.aux]"
operator|+
literal|","
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"new"
argument_list|)
operator|+
literal|"[.bib]"
argument_list|,
name|auxImExport
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"blank"
argument_list|,
literal|'b'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Do not open any files at startup"
argument_list|)
argument_list|,
name|blank
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"importToOpen"
argument_list|,
literal|'\0'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import to open tab"
argument_list|)
argument_list|,
name|importToOpenBase
argument_list|)
expr_stmt|;
name|options
operator|.
name|setUseMenu
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|processArguments (String[] args, boolean initialStartup)
specifier|public
name|Vector
name|processArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|boolean
name|initialStartup
parameter_list|)
block|{
name|setupOptions
argument_list|()
expr_stmt|;
name|String
index|[]
name|leftOver
init|=
name|options
operator|.
name|process
argument_list|(
name|args
argument_list|)
decl_stmt|;
comment|//Util.pr(": Options processed");
if|if
condition|(
name|initialStartup
operator|&&
name|helpO
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"jabref [options] [bibtex-file]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|options
operator|.
name|getHelp
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|importFormats
init|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|getImportFormatList
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Available import formats"
argument_list|)
operator|+
literal|":\n"
operator|+
name|importFormats
argument_list|)
expr_stmt|;
comment|// + ": biblioscape, bibtexml, endnote, inspec,\n\tisi, medline, ovid,
comment|// ris, scifinder, sixpack, jstor, silverplatter.");
comment|// To specify export formats, we need to take the custom export formats
comment|// into account.
comment|// So we iterate through the custom formats and add them.
name|String
name|outFormats
init|=
literal|": bibtexml, docbook, html, simplehtml"
decl_stmt|;
name|int
name|length
init|=
name|outFormats
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Globals
operator|.
name|prefs
operator|.
name|customExports
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|format
init|=
name|Globals
operator|.
name|prefs
operator|.
name|customExports
operator|.
name|getElementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|length
operator|+
name|format
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|)
operator|>
literal|50
condition|)
block|{
name|outFormats
operator|=
name|outFormats
operator|+
literal|",\n\t"
operator|+
name|format
index|[
literal|0
index|]
expr_stmt|;
name|length
operator|=
name|format
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|outFormats
operator|=
name|outFormats
operator|+
literal|", "
operator|+
name|format
index|[
literal|0
index|]
expr_stmt|;
name|length
operator|+=
operator|(
literal|1
operator|+
name|format
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Available export formats"
argument_list|)
operator|+
name|outFormats
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// First we quickly scan the command line parameters for any that signal
comment|// that the GUI
comment|// should not be opened. This is used to decide whether we should show the
comment|// splash screen or not.
if|if
condition|(
name|initialStartup
operator|&&
operator|!
name|disableGui
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
try|try
block|{
name|splashScreen
operator|=
name|SplashScreen
operator|.
name|splash
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|graphicFailure
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to create graphical interface"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Util.pr("JabRef "+GUIGlobals.version);
comment|// Vector to put imported/loaded database(s) in.
name|Vector
name|loaded
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|blank
operator|.
name|isInvoked
argument_list|()
operator|&&
operator|(
name|leftOver
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftOver
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Leftover arguments are interpreted as bib files to open.
name|ParserResult
name|pr
init|=
name|openBibFile
argument_list|(
name|leftOver
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Util.pr(": Checked blank");
if|if
condition|(
operator|!
name|blank
operator|.
name|isInvoked
argument_list|()
operator|&&
name|importFile
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
name|String
index|[]
name|data
init|=
name|importFile
operator|.
name|getStringValue
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// Load a bibtex file:
name|ParserResult
name|pr
init|=
name|openBibFile
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// Import a database in a certain format.
try|try
block|{
if|if
condition|(
operator|!
literal|"*"
operator|.
name|equals
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Importing"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|List
name|entries
init|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importFromFile
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|data
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"~"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|base
init|=
name|ImportFormatReader
operator|.
name|createDatabase
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
operator|new
name|ParserResult
argument_list|(
name|base
argument_list|,
literal|null
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// * means "guess the format":
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Importing in unknown format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|o
init|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importUnknownFormat
argument_list|(
name|data
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"~"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|formatName
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|formatName
operator|.
name|equals
argument_list|(
name|ImportFormatReader
operator|.
name|BIBTEX_FORMAT
argument_list|)
condition|)
block|{
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
name|entries
init|=
operator|(
name|java
operator|.
name|util
operator|.
name|List
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Format used"
argument_list|)
operator|+
literal|": "
operator|+
name|formatName
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not find a suitable import format."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
name|BibtexDatabase
name|base
init|=
name|ImportFormatReader
operator|.
name|createDatabase
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
operator|new
name|ParserResult
argument_list|(
name|base
argument_list|,
literal|null
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
comment|//pr.setFile(new File(data[0]));
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|initialStartup
operator|&&
operator|!
name|blank
operator|.
name|isInvoked
argument_list|()
operator|&&
name|importToOpenBase
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
name|String
index|[]
name|data
init|=
name|importToOpenBase
operator|.
name|getStringValue
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// Load a bibtex file:
name|ParserResult
name|pr
init|=
name|openBibFile
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
block|{
name|pr
operator|.
name|setToOpenTab
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// Import a database in a certain format.
try|try
block|{
if|if
condition|(
operator|!
literal|"*"
operator|.
name|equals
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Importing"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|List
name|entries
init|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importFromFile
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|data
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"~"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|base
init|=
name|ImportFormatReader
operator|.
name|createDatabase
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
operator|new
name|ParserResult
argument_list|(
name|base
argument_list|,
literal|null
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
name|pr
operator|.
name|setToOpenTab
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// * means "guess the format":
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Importing in unknown format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|o
init|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importUnknownFormat
argument_list|(
name|data
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"~"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|formatName
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|formatName
operator|.
name|equals
argument_list|(
name|ImportFormatReader
operator|.
name|BIBTEX_FORMAT
argument_list|)
condition|)
block|{
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|pr
operator|.
name|setToOpenTab
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
name|entries
init|=
operator|(
name|java
operator|.
name|util
operator|.
name|List
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Format used"
argument_list|)
operator|+
literal|": "
operator|+
name|formatName
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not find a suitable import format."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
name|BibtexDatabase
name|base
init|=
name|ImportFormatReader
operator|.
name|createDatabase
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
operator|new
name|ParserResult
argument_list|(
name|base
argument_list|,
literal|null
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
comment|//pr.setFile(new File(data[0]));
name|pr
operator|.
name|setToOpenTab
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//Util.pr(": Finished import");
if|if
condition|(
name|exportFile
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|data
init|=
name|exportFile
operator|.
name|getStringValue
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// This signals that the latest import should be stored in BibTeX
comment|// format to the given file.
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|loaded
operator|.
name|elementAt
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saving"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|FileActions
operator|.
name|saveDatabase
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
operator|new
name|MetaData
argument_list|(
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not save file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The output option depends on a valid import option."
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// This signals that the latest import should be stored in the given
comment|// format to the given file.
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|loaded
operator|.
name|elementAt
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// We first try to find a matching custom export format.
name|boolean
name|foundCustom
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Globals
operator|.
name|prefs
operator|.
name|customExports
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|format
init|=
name|Globals
operator|.
name|prefs
operator|.
name|customExports
operator|.
name|getElementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
comment|// Found the correct export format here.
comment|//System.out.println(format[0]+" "+format[1]+" "+format[2]);
try|try
block|{
name|File
name|lfFile
init|=
operator|new
name|File
argument_list|(
name|format
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|//System.out.println(lfFile.getName());
name|String
name|fname
init|=
operator|(
name|lfFile
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
operator|)
index|[
literal|0
index|]
decl_stmt|;
name|FileActions
operator|.
name|exportDatabase
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|lfFile
operator|.
name|getParent
argument_list|()
operator|+
name|File
operator|.
name|separator
argument_list|,
name|fname
argument_list|,
operator|new
name|File
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Exporting"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ex.printStackTrace();
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not export file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|foundCustom
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundCustom
condition|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Exporting"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|FileActions
operator|.
name|exportDatabase
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|,
operator|new
name|File
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex2
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unknown export format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not export file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The output option depends on a valid import option."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Util.pr(": Finished export");
if|if
condition|(
name|exportPrefs
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
try|try
block|{
name|Globals
operator|.
name|prefs
operator|.
name|exportPreferences
argument_list|(
name|exportPrefs
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Util
operator|.
name|pr
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|importPrefs
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
try|try
block|{
name|Globals
operator|.
name|prefs
operator|.
name|importPreferences
argument_list|(
name|importPrefs
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntryType
operator|.
name|loadCustomEntryTypes
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Util
operator|.
name|pr
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|blank
operator|.
name|isInvoked
argument_list|()
operator|&&
name|auxImExport
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
name|boolean
name|usageMsg
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
comment|// bibtex file loaded
block|{
name|String
index|[]
name|data
init|=
name|auxImExport
operator|.
name|getStringValue
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|loaded
operator|.
name|firstElement
argument_list|()
decl_stmt|;
name|AuxCommandLine
name|acl
init|=
operator|new
name|AuxCommandLine
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|newBase
init|=
name|acl
operator|.
name|perform
argument_list|()
decl_stmt|;
name|boolean
name|notSavedMsg
init|=
literal|false
decl_stmt|;
comment|// write an output, if something could be resolved
if|if
condition|(
name|newBase
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|newBase
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|subName
init|=
name|Util
operator|.
name|getCorrectFileName
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
literal|"bib"
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saving"
argument_list|)
operator|+
literal|": "
operator|+
name|subName
argument_list|)
expr_stmt|;
name|FileActions
operator|.
name|saveDatabase
argument_list|(
name|newBase
argument_list|,
operator|new
name|MetaData
argument_list|()
argument_list|,
comment|// no Metadata
operator|new
name|File
argument_list|(
name|subName
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not save file"
argument_list|)
operator|+
literal|" '"
operator|+
name|subName
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|notSavedMsg
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|notSavedMsg
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"no database generated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|usageMsg
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|usageMsg
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|usageMsg
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"no base-bibtex-file specified"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"usage"
argument_list|)
operator|+
literal|" :"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"jabref --aux infile[.aux],outfile[.bib] base-bibtex-file"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|loaded
return|;
block|}
DECL|method|openWindow (Vector loaded)
specifier|public
name|void
name|openWindow
parameter_list|(
name|Vector
name|loaded
parameter_list|)
block|{
if|if
condition|(
operator|!
name|graphicFailure
operator|&&
operator|!
name|disableGui
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
comment|// Call the method performCompatibilityUpdate(), which does any
comment|// necessary changes for users with a preference set from an older
comment|// Jabref version.
name|Util
operator|.
name|performCompatibilityUpdate
argument_list|()
expr_stmt|;
comment|// This property is set to make the Mac OSX Java VM move the menu bar to
comment|// the top
comment|// of the screen, where Mac users expect it to be.
name|System
operator|.
name|setProperty
argument_list|(
literal|"apple.laf.useScreenMenuBar"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// Set antialiasing on everywhere. This only works in JRE>= 1.5.
comment|// Or... it doesn't work, period.
comment|//System.setProperty("swing.aatext", "true");
comment|// If we are not on Mac, deal with font sizes and LookAndFeels:
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_MAC
condition|)
block|{
name|int
name|fontSizes
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"menuFontSize"
argument_list|)
decl_stmt|;
name|String
name|defaultLookAndFeel
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|ON_WIN
condition|)
name|defaultLookAndFeel
operator|=
name|GUIGlobals
operator|.
name|windowsDefaultLookAndFeel
expr_stmt|;
else|else
name|defaultLookAndFeel
operator|=
name|GUIGlobals
operator|.
name|linuxDefaultLookAndFeel
expr_stmt|;
name|String
name|lookAndFeel
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useDefaultLookAndFeel"
argument_list|)
condition|)
name|lookAndFeel
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"lookAndFeel"
argument_list|)
expr_stmt|;
else|else
name|lookAndFeel
operator|=
name|defaultLookAndFeel
expr_stmt|;
name|LookAndFeel
name|lnf
init|=
literal|null
decl_stmt|;
comment|//Class plastic =
comment|// Class.forName("com.jgoodies.plaf.plastic.PlasticLookAndFeel");
comment|//PlasticLookAndFeel lnf = new
comment|// com.jgoodies.plaf.plastic.Plastic3DLookAndFeel();
name|Object
name|objLnf
init|=
literal|null
decl_stmt|;
comment|//Util.pr(": LnF: "+lookAndFeel);
try|try
block|{
comment|//lnf2 =
comment|// Class.forName("com.jgoodies.plaf.plastic.Plastic3DLookAndFeel").newInstance();
if|if
condition|(
name|lookAndFeel
operator|!=
literal|null
condition|)
name|objLnf
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|lookAndFeel
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
else|else
name|objLnf
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|defaultLookAndFeel
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
try|try
block|{
name|objLnf
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|defaultLookAndFeel
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex2
parameter_list|)
block|{                     }
block|}
if|if
condition|(
name|objLnf
operator|!=
literal|null
condition|)
name|lnf
operator|=
operator|(
name|LookAndFeel
operator|)
name|objLnf
expr_stmt|;
comment|// Set font sizes if we are using a JGoodies look and feel.
if|if
condition|(
operator|(
name|lnf
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|lnf
operator|instanceof
name|Plastic3DLookAndFeel
operator|)
condition|)
block|{
comment|//MetalLookAndFeel.setCurrentTheme(new
comment|// com.jgoodies.plaf.plastic.theme.SkyBluer());
name|Plastic3DLookAndFeel
name|plLnf
init|=
operator|(
name|Plastic3DLookAndFeel
operator|)
name|lnf
decl_stmt|;
name|plLnf
operator|.
name|setFontSizeHints
argument_list|(
operator|new
name|FontSizeHints
argument_list|(
name|fontSizes
argument_list|,
name|fontSizes
argument_list|,
name|fontSizes
argument_list|,
name|fontSizes
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|lnf
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|lnf
operator|instanceof
name|ExtWindowsLookAndFeel
operator|)
condition|)
block|{
comment|//System.out.println("ttt");
name|ExtWindowsLookAndFeel
name|plLnf
init|=
operator|(
name|ExtWindowsLookAndFeel
operator|)
name|lnf
decl_stmt|;
name|plLnf
operator|.
name|setFontSizeHints
argument_list|(
operator|new
name|FontSizeHints
argument_list|(
name|fontSizes
argument_list|,
name|fontSizes
argument_list|,
name|fontSizes
argument_list|,
name|fontSizes
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lnf
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|lnf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_WIN
condition|)
block|{
name|UIManager
operator|.
name|put
argument_list|(
literal|"SimpleInternalFrame.activeTitleBackground"
argument_list|,
name|GUIGlobals
operator|.
name|gradientBlue
argument_list|)
expr_stmt|;
comment|//UIManager.put("TabbedPane.selected", Color.red);
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Trying to set system default Look&Feel..."
argument_list|)
expr_stmt|;
comment|// if desired lnf could not be set, try system default
try|try
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|UIManager
operator|.
name|getSystemLookAndFeelClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|//LookAndFeel lnf = new com.sun.java.swing.plaf.gtk.GTKLookAndFeel();
comment|//Look1AndFeel lnf = new
comment|// com.incors.plaf.kunststoff.KunststoffLookAndFeel();
comment|//com.incors.plaf.kunststoff.KunststoffLookAndFeel.setCurrentTheme(new
comment|// com.incors.plaf.kunststoff.themes.KunststoffDesktopTheme());
block|}
block|}
comment|// If the option is enabled, open the last edited databases, if any.
if|if
condition|(
operator|!
name|blank
operator|.
name|isInvoked
argument_list|()
operator|&&
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"openLastEdited"
argument_list|)
operator|&&
operator|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"lastEdited"
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// How to handle errors in the databases to open?
name|String
index|[]
name|names
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"lastEdited"
argument_list|)
decl_stmt|;
name|lastEdLoop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|fileToOpen
init|=
operator|new
name|File
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|loaded
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|loaded
operator|.
name|elementAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|pr
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|equals
argument_list|(
name|fileToOpen
argument_list|)
condition|)
continue|continue
name|lastEdLoop
continue|;
block|}
if|if
condition|(
name|fileToOpen
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ParserResult
name|pr
init|=
name|openBibFile
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|GUIGlobals
operator|.
name|init
argument_list|()
expr_stmt|;
name|GUIGlobals
operator|.
name|CURRENTFONT
operator|=
operator|new
name|Font
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"fontFamily"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"fontStyle"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"fontSize"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Util.pr(": Initializing frame");
name|jrf
operator|=
operator|new
name|JabRefFrame
argument_list|()
expr_stmt|;
comment|// Add all loaded databases to the frame:
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|loaded
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|jrf
operator|.
name|addTab
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|pr
operator|.
name|getFile
argument_list|()
argument_list|,
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
operator|(
name|i
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|loadSess
operator|.
name|isInvoked
argument_list|()
condition|)
name|jrf
operator|.
name|loadSessionAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
argument_list|(
name|jrf
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|splashScreen
operator|!=
literal|null
condition|)
block|{
comment|// do this only if splashscreen was actually created
name|splashScreen
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|splashScreen
operator|=
literal|null
expr_stmt|;
block|}
comment|//Util.pr(": Showing frame");
name|jrf
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|loaded
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"displayKeyWarningDialogAtStartup"
argument_list|)
operator|&&
name|pr
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
name|String
index|[]
name|wrns
init|=
name|pr
operator|.
name|warnings
argument_list|()
decl_stmt|;
name|StringBuffer
name|wrn
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wrns
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|wrn
operator|.
name|append
argument_list|(
operator|(
name|j
operator|+
literal|1
operator|)
operator|+
literal|". "
operator|+
name|wrns
index|[
name|j
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrn
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|wrn
operator|.
name|deleteCharAt
argument_list|(
name|wrn
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|jrf
operator|.
name|showBaseAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|jrf
argument_list|,
name|wrn
operator|.
name|toString
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warnings"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Util.pr(": Finished adding panels");
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|jrf
operator|.
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|new
name|FocusRequester
argument_list|(
operator|(
operator|(
name|BasePanel
operator|)
name|jrf
operator|.
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|entryTable
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|openBibFile (String name)
specifier|public
specifier|static
name|ParserResult
name|openBibFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Opening"
argument_list|)
operator|+
literal|": "
operator|+
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
name|ImportFormatReader
operator|.
name|loadDatabase
argument_list|(
name|file
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|pr
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|pr
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
name|String
index|[]
name|warn
init|=
name|pr
operator|.
name|warnings
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|warn
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
name|warn
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|pr
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|//System.err.println(Globals.lang("Error opening file")+" '"+ name+"':
comment|// "+ex.getMessage());
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

