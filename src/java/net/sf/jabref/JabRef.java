begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|FontPolicies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|FontPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|FontSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|FontSets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|plastic
operator|.
name|Plastic3DLookAndFeel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|windows
operator|.
name|WindowsLookAndFeel
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|dtools
operator|.
name|ritopt
operator|.
name|BooleanOption
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|dtools
operator|.
name|ritopt
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|dtools
operator|.
name|ritopt
operator|.
name|StringOption
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|PluginCore
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|SidePanePlugin
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|PluginInstaller
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|core
operator|.
name|JabRefPlugin
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|core
operator|.
name|generated
operator|.
name|_JabRefPlugin
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|core
operator|.
name|generated
operator|.
name|_JabRefPlugin
operator|.
name|EntryFetcherExtension
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|remote
operator|.
name|RemoteListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|auximport
operator|.
name|AuxCommandLine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|metal
operator|.
name|MetalLookAndFeel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|spin
operator|.
name|Spin
import|;
end_import

begin_comment
comment|/**  * JabRef Main Class - The application gets started here.  *  */
end_comment

begin_class
DECL|class|JabRef
specifier|public
class|class
name|JabRef
block|{
DECL|field|singleton
specifier|public
specifier|static
name|JabRef
name|singleton
decl_stmt|;
DECL|field|remoteListener
specifier|public
specifier|static
name|RemoteListener
name|remoteListener
init|=
literal|null
decl_stmt|;
DECL|field|jrf
specifier|public
name|JabRefFrame
name|jrf
decl_stmt|;
DECL|field|options
specifier|public
name|Options
name|options
decl_stmt|;
DECL|field|splashScreen
specifier|public
name|Frame
name|splashScreen
init|=
literal|null
decl_stmt|;
DECL|field|graphicFailure
name|boolean
name|graphicFailure
init|=
literal|false
decl_stmt|;
DECL|field|importFile
DECL|field|exportFile
DECL|field|exportPrefs
DECL|field|importPrefs
DECL|field|auxImExport
DECL|field|importToOpenBase
DECL|field|fetcherEngine
DECL|field|exportMatches
name|StringOption
name|importFile
decl_stmt|,
name|exportFile
decl_stmt|,
name|exportPrefs
decl_stmt|,
name|importPrefs
decl_stmt|,
name|auxImExport
decl_stmt|,
name|importToOpenBase
decl_stmt|,
name|fetcherEngine
decl_stmt|,
name|exportMatches
decl_stmt|;
DECL|field|helpO
DECL|field|disableGui
DECL|field|blank
DECL|field|loadSess
DECL|field|showVersion
DECL|field|disableSplash
name|BooleanOption
name|helpO
decl_stmt|,
name|disableGui
decl_stmt|,
name|blank
decl_stmt|,
name|loadSess
decl_stmt|,
name|showVersion
decl_stmt|,
name|disableSplash
decl_stmt|;
DECL|field|exportMatchesSyntax
specifier|private
specifier|final
specifier|static
name|String
name|exportMatchesSyntax
init|=
literal|"["
operator|.
name|concat
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"field"
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
literal|"]"
argument_list|)
operator|.
name|concat
argument_list|(
literal|"searchTerm"
argument_list|)
operator|.
name|concat
argument_list|(
literal|","
argument_list|)
operator|.
name|concat
argument_list|(
literal|"outputFile"
argument_list|)
operator|.
name|concat
argument_list|(
literal|": "
argument_list|)
operator|.
name|concat
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"file"
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
literal|"[,"
argument_list|)
operator|.
name|concat
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"exportFormat"
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
literal|"]"
argument_list|)
decl_stmt|;
DECL|field|MAX_DIALOG_WARNINGS
specifier|public
specifier|static
specifier|final
name|int
name|MAX_DIALOG_WARNINGS
init|=
literal|10
decl_stmt|;
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
operator|new
name|JabRef
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|JabRef (String[] args)
specifier|protected
name|JabRef
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|singleton
operator|=
name|this
expr_stmt|;
comment|// The following two lines signal that the system proxy settings should
comment|// be used:
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.net.useSystemProxies"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"proxySet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|JabRefPreferences
name|prefs
init|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// See if there are plugins scheduled for deletion:
if|if
condition|(
name|prefs
operator|.
name|hasKey
argument_list|(
literal|"deletePlugins"
argument_list|)
operator|&&
operator|(
name|prefs
operator|.
name|get
argument_list|(
literal|"deletePlugins"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|String
index|[]
name|toDelete
init|=
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"deletePlugins"
argument_list|)
decl_stmt|;
name|PluginInstaller
operator|.
name|deletePluginsOnStartup
argument_list|(
name|toDelete
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
literal|"deletePlugins"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|Globals
operator|.
name|startBackgroundTasks
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|Globals
operator|.
name|setLanguage
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|setLanguageDependentDefaultValues
argument_list|()
expr_stmt|;
comment|/* 		 * The Plug-in System is started automatically on the first call to 		 * PluginCore.getManager(). 		 *  		 * Plug-ins are activated on the first call to their getInstance method. 		 */
comment|// Update which fields should be treated as numeric, based on preferences:
name|BibtexFields
operator|.
name|setNumericFieldsFromPrefs
argument_list|()
expr_stmt|;
comment|/* Build list of Import and Export formats */
name|Globals
operator|.
name|importFormatReader
operator|.
name|resetImportFormats
argument_list|()
expr_stmt|;
name|BibtexEntryType
operator|.
name|loadCustomEntryTypes
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|initAllExports
argument_list|()
expr_stmt|;
comment|// Read list(s) of journal names and abbreviations:
name|Globals
operator|.
name|initializeJournalNames
argument_list|()
expr_stmt|;
comment|// Check for running JabRef
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useRemoteServer"
argument_list|)
condition|)
block|{
name|remoteListener
operator|=
name|RemoteListener
operator|.
name|openRemoteListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|remoteListener
operator|==
literal|null
condition|)
block|{
comment|// Unless we are alone, try to contact already running JabRef:
if|if
condition|(
name|RemoteListener
operator|.
name|sendToActiveJabRefInstance
argument_list|(
name|args
argument_list|)
condition|)
block|{
comment|/* 					 * We have successfully sent our command line options 					 * through the socket to another JabRef instance. So we 					 * assume it's all taken care of, and quit. 					 */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Arguments passed on to running JabRef instance. Shutting down."
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No listener found, thus we are the first instance to be
comment|// started.
name|remoteListener
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* 		 * See if the user has a personal journal list set up. If so, add these 		 * journal names and abbreviations to the list: 		 */
name|String
name|personalJournalList
init|=
name|prefs
operator|.
name|get
argument_list|(
literal|"personalJournalList"
argument_list|)
decl_stmt|;
if|if
condition|(
name|personalJournalList
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Globals
operator|.
name|journalAbbrev
operator|.
name|readJournalList
argument_list|(
operator|new
name|File
argument_list|(
name|personalJournalList
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* 		 * Make sure of a proper cleanup when quitting (e.g. deleting temporary 		 * files). 		 *  		 * CO 2007-07-12: Since this is deprecated, commented out: 		 *  		 * System.runFinalizersOnExit(true); 		 *  		 */
name|openWindow
argument_list|(
name|processArguments
argument_list|(
name|args
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupOptions ()
specifier|private
name|void
name|setupOptions
parameter_list|()
block|{
name|importFile
operator|=
operator|new
name|StringOption
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|exportFile
operator|=
operator|new
name|StringOption
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|helpO
operator|=
operator|new
name|BooleanOption
argument_list|()
expr_stmt|;
name|disableGui
operator|=
operator|new
name|BooleanOption
argument_list|()
expr_stmt|;
name|disableSplash
operator|=
operator|new
name|BooleanOption
argument_list|()
expr_stmt|;
name|blank
operator|=
operator|new
name|BooleanOption
argument_list|()
expr_stmt|;
name|loadSess
operator|=
operator|new
name|BooleanOption
argument_list|()
expr_stmt|;
name|showVersion
operator|=
operator|new
name|BooleanOption
argument_list|()
expr_stmt|;
name|exportPrefs
operator|=
operator|new
name|StringOption
argument_list|(
literal|"jabref_prefs.xml"
argument_list|)
expr_stmt|;
name|importPrefs
operator|=
operator|new
name|StringOption
argument_list|(
literal|"jabref_prefs.xml"
argument_list|)
expr_stmt|;
name|auxImExport
operator|=
operator|new
name|StringOption
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|importToOpenBase
operator|=
operator|new
name|StringOption
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fetcherEngine
operator|=
operator|new
name|StringOption
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|exportMatches
operator|=
operator|new
name|StringOption
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|Options
argument_list|(
literal|"JabRef "
argument_list|)
expr_stmt|;
comment|// Create an options repository.
name|options
operator|.
name|setVersion
argument_list|(
name|GUIGlobals
operator|.
name|version
argument_list|)
expr_stmt|;
name|importFile
operator|.
name|setDescription
argument_list|(
literal|"imopoepuoeu"
argument_list|)
expr_stmt|;
comment|//Globals.lang);
name|options
operator|.
name|register
argument_list|(
literal|"version"
argument_list|,
literal|'v'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Display version"
argument_list|)
argument_list|,
name|showVersion
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"nogui"
argument_list|,
literal|'n'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"No GUI. Only process command line options."
argument_list|)
argument_list|,
name|disableGui
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"nosplash"
argument_list|,
literal|'s'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Do not show splash window at startup"
argument_list|)
argument_list|,
name|disableSplash
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"import"
argument_list|,
literal|'i'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import file"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"filename"
argument_list|)
operator|+
literal|"[,import format]"
argument_list|,
name|importFile
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"output"
argument_list|,
literal|'o'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Output or export file"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"filename"
argument_list|)
operator|+
literal|"[,export format]"
argument_list|,
name|exportFile
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"help"
argument_list|,
literal|'h'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Display help on command line options"
argument_list|)
argument_list|,
name|helpO
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"loads"
argument_list|,
literal|'l'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Load session"
argument_list|)
argument_list|,
name|loadSess
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"prexp"
argument_list|,
literal|'x'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Export preferences to file"
argument_list|)
argument_list|,
name|exportPrefs
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"primp"
argument_list|,
literal|'p'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import preferences from file"
argument_list|)
argument_list|,
name|importPrefs
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"aux"
argument_list|,
literal|'a'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Subdatabase from aux"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"file"
argument_list|)
operator|+
literal|"[.aux]"
operator|+
literal|","
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"new"
argument_list|)
operator|+
literal|"[.bib]"
argument_list|,
name|auxImExport
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"blank"
argument_list|,
literal|'b'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Do not open any files at startup"
argument_list|)
argument_list|,
name|blank
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"importToOpen"
argument_list|,
literal|'\0'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Import to open tab"
argument_list|)
argument_list|,
name|importToOpenBase
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"fetch"
argument_list|,
literal|'f'
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Run Fetcher, e.g. \"--fetch=Medline:cancer\""
argument_list|)
argument_list|,
name|fetcherEngine
argument_list|)
expr_stmt|;
name|options
operator|.
name|register
argument_list|(
literal|"exportMatches"
argument_list|,
literal|'m'
argument_list|,
name|exportMatchesSyntax
argument_list|,
name|exportMatches
argument_list|)
expr_stmt|;
name|options
operator|.
name|setUseMenu
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|processArguments (String[] args, boolean initialStartup)
specifier|public
name|Vector
argument_list|<
name|ParserResult
argument_list|>
name|processArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|boolean
name|initialStartup
parameter_list|)
block|{
name|setupOptions
argument_list|()
expr_stmt|;
name|String
index|[]
name|leftOver
init|=
name|options
operator|.
name|process
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialStartup
operator|&&
name|showVersion
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
name|options
operator|.
name|displayVersion
argument_list|()
expr_stmt|;
name|disableGui
operator|.
name|setInvoked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|initialStartup
operator|&&
name|helpO
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"jabref [options] [bibtex-file]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|options
operator|.
name|getHelp
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|importFormats
init|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|getImportFormatList
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Available import formats"
argument_list|)
operator|+
literal|":\n"
operator|+
name|importFormats
argument_list|)
expr_stmt|;
name|String
name|outFormats
init|=
name|ExportFormats
operator|.
name|getConsoleExportList
argument_list|(
literal|70
argument_list|,
literal|20
argument_list|,
literal|"\t"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Available export formats"
argument_list|)
operator|+
literal|": "
operator|+
name|outFormats
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|boolean
name|commandmode
init|=
name|disableGui
operator|.
name|isInvoked
argument_list|()
operator|||
name|fetcherEngine
operator|.
name|isInvoked
argument_list|()
decl_stmt|;
comment|// First we quickly scan the command line parameters for any that signal
comment|// that the GUI
comment|// should not be opened. This is used to decide whether we should show the
comment|// splash screen or not.
if|if
condition|(
name|initialStartup
operator|&&
operator|!
name|commandmode
operator|&&
operator|!
name|disableSplash
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
try|try
block|{
name|splashScreen
operator|=
name|SplashScreen
operator|.
name|splash
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|graphicFailure
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to create graphical interface"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Vector to put imported/loaded database(s) in.
name|Vector
argument_list|<
name|ParserResult
argument_list|>
name|loaded
init|=
operator|new
name|Vector
argument_list|<
name|ParserResult
argument_list|>
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|toImport
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|blank
operator|.
name|isInvoked
argument_list|()
operator|&&
operator|(
name|leftOver
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftOver
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Leftover arguments that have a "bib" extension are interpreted as
comment|// bib files to open. Other files, and files that could not be opened
comment|// as bib, we try to import instead.
name|boolean
name|bibExtension
init|=
name|leftOver
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"bib"
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bibExtension
condition|)
name|pr
operator|=
name|openBibFile
argument_list|(
name|leftOver
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|pr
operator|==
literal|null
operator|)
operator|||
operator|(
name|pr
operator|==
name|ParserResult
operator|.
name|INVALID_FORMAT
operator|)
condition|)
block|{
comment|// We will try to import this file. Normally we
comment|// will import it into a new tab, but if this import has
comment|// been initiated by another instance through the remote
comment|// listener, we will instead import it into the current database.
comment|// This will enable easy integration with web browers that can
comment|// open a reference file in JabRef.
if|if
condition|(
name|initialStartup
condition|)
block|{
name|toImport
operator|.
name|add
argument_list|(
name|leftOver
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ParserResult
name|res
init|=
name|importToOpenBase
argument_list|(
name|leftOver
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
name|loaded
operator|.
name|add
argument_list|(
name|res
argument_list|)
expr_stmt|;
else|else
name|loaded
operator|.
name|add
argument_list|(
name|ParserResult
operator|.
name|INVALID_FORMAT
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|pr
operator|!=
name|ParserResult
operator|.
name|FILE_LOCKED
condition|)
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|blank
operator|.
name|isInvoked
argument_list|()
operator|&&
name|importFile
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
name|toImport
operator|.
name|add
argument_list|(
name|importFile
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|filenameString
range|:
name|toImport
control|)
block|{
name|ParserResult
name|pr
init|=
name|importFile
argument_list|(
name|filenameString
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|blank
operator|.
name|isInvoked
argument_list|()
operator|&&
name|importToOpenBase
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
name|ParserResult
name|res
init|=
name|importToOpenBase
argument_list|(
name|importToOpenBase
operator|.
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
name|loaded
operator|.
name|add
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|blank
operator|.
name|isInvoked
argument_list|()
operator|&&
name|fetcherEngine
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
name|ParserResult
name|res
init|=
name|fetch
argument_list|(
name|fetcherEngine
operator|.
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
name|loaded
operator|.
name|add
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exportMatches
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|data
init|=
name|exportMatches
operator|.
name|getStringValue
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|searchTerm
init|=
name|data
index|[
literal|0
index|]
operator|.
name|replace
argument_list|(
literal|"\\$"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
comment|//enables blanks within the search term:
comment|//? stands for a blank
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|loaded
operator|.
name|elementAt
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|dataBase
init|=
name|pr
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|SearchManagerNoGUI
name|smng
init|=
operator|new
name|SearchManagerNoGUI
argument_list|(
name|searchTerm
argument_list|,
name|dataBase
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|newBase
init|=
name|smng
operator|.
name|getDBfromMatches
argument_list|()
decl_stmt|;
comment|//newBase contains only match entries
comment|//export database
if|if
condition|(
name|newBase
operator|!=
literal|null
operator|&&
name|newBase
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|formatName
init|=
literal|null
decl_stmt|;
name|IExportFormat
name|format
init|=
literal|null
decl_stmt|;
comment|//read in the export format, take default format if no format entered
switch|switch
condition|(
name|data
operator|.
name|length
condition|)
block|{
case|case
operator|(
literal|3
operator|)
case|:
block|{
name|formatName
operator|=
name|data
index|[
literal|2
index|]
expr_stmt|;
break|break;
block|}
case|case
operator|(
literal|2
operator|)
case|:
block|{
comment|//default ExportFormat: HTML table (with Abstract& BibTeX)
name|formatName
operator|=
literal|"tablerefsabsbib"
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Output file missing"
argument_list|)
operator|.
name|concat
argument_list|(
literal|". \n \t "
argument_list|)
operator|.
name|concat
argument_list|(
literal|"Usage"
argument_list|)
operator|.
name|concat
argument_list|(
literal|": "
argument_list|)
operator|+
name|exportMatchesSyntax
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|//end switch
comment|//export new database
name|format
operator|=
name|ExportFormats
operator|.
name|getExportFormat
argument_list|(
name|formatName
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
comment|// We have an ExportFormat instance:
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Exporting"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|format
operator|.
name|performExport
argument_list|(
name|newBase
argument_list|,
operator|new
name|MetaData
argument_list|(
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|,
name|pr
operator|.
name|getEncoding
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not export file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|1
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unknown export format"
argument_list|)
operator|+
literal|": "
operator|+
name|formatName
argument_list|)
expr_stmt|;
block|}
comment|/*end if newBase != null*/
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No search matches."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The output option depends on a valid input option."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//end if(loaded.size> 0)
block|}
comment|//end exportMatches invoked
if|if
condition|(
name|exportFile
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|data
init|=
name|exportFile
operator|.
name|getStringValue
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// This signals that the latest import should be stored in BibTeX
comment|// format to the given file.
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|elementAt
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pr
operator|.
name|isInvalid
argument_list|()
condition|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saving"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|SaveSession
name|session
init|=
name|FileActions
operator|.
name|saveDatabase
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
operator|new
name|MetaData
argument_list|(
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Show just a warning message if encoding didn't work for all characters:
if|if
condition|(
operator|!
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|couldEncodeAll
argument_list|()
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"The chosen encoding '%0' could not encode the following characters: "
argument_list|,
name|session
operator|.
name|getEncoding
argument_list|()
argument_list|)
operator|+
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|getProblemCharacters
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not save file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The output option depends on a valid import option."
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// This signals that the latest import should be stored in the given
comment|// format to the given file.
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|elementAt
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Set the global variable for this database's file directory before exporting,
comment|// so formatters can resolve linked files correctly.
comment|// (This is an ugly hack!)
name|File
name|theFile
init|=
name|pr
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|theFile
operator|.
name|isAbsolute
argument_list|()
condition|)
name|theFile
operator|=
name|theFile
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|(
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|setFile
argument_list|(
name|theFile
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|fileDirForDatabase
operator|=
name|metaData
operator|.
name|getFileDirectory
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|databaseFile
operator|=
name|metaData
operator|.
name|getFile
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Exporting"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|IExportFormat
name|format
init|=
name|ExportFormats
operator|.
name|getExportFormat
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
comment|// We have an ExportFormat instance:
try|try
block|{
name|format
operator|.
name|performExport
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
operator|new
name|MetaData
argument_list|(
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|,
name|pr
operator|.
name|getEncoding
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not export file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unknown export format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The output option depends on a valid import option."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Util.pr(": Finished export");
if|if
condition|(
name|exportPrefs
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
try|try
block|{
name|Globals
operator|.
name|prefs
operator|.
name|exportPreferences
argument_list|(
name|exportPrefs
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Util
operator|.
name|pr
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|importPrefs
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
try|try
block|{
name|Globals
operator|.
name|prefs
operator|.
name|importPreferences
argument_list|(
name|importPrefs
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntryType
operator|.
name|loadCustomEntryTypes
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|initAllExports
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Util
operator|.
name|pr
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|blank
operator|.
name|isInvoked
argument_list|()
operator|&&
name|auxImExport
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
name|boolean
name|usageMsg
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
comment|// bibtex file loaded
block|{
name|String
index|[]
name|data
init|=
name|auxImExport
operator|.
name|getStringValue
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|firstElement
argument_list|()
decl_stmt|;
name|AuxCommandLine
name|acl
init|=
operator|new
name|AuxCommandLine
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|newBase
init|=
name|acl
operator|.
name|perform
argument_list|()
decl_stmt|;
name|boolean
name|notSavedMsg
init|=
literal|false
decl_stmt|;
comment|// write an output, if something could be resolved
if|if
condition|(
name|newBase
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|newBase
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|subName
init|=
name|Util
operator|.
name|getCorrectFileName
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
literal|"bib"
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saving"
argument_list|)
operator|+
literal|": "
operator|+
name|subName
argument_list|)
expr_stmt|;
name|SaveSession
name|session
init|=
name|FileActions
operator|.
name|saveDatabase
argument_list|(
name|newBase
argument_list|,
operator|new
name|MetaData
argument_list|()
argument_list|,
comment|// no Metadata
operator|new
name|File
argument_list|(
name|subName
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Show just a warning message if encoding didn't work for all characters:
if|if
condition|(
operator|!
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|couldEncodeAll
argument_list|()
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"The chosen encoding '%0' could not encode the following characters: "
argument_list|,
name|session
operator|.
name|getEncoding
argument_list|()
argument_list|)
operator|+
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|getProblemCharacters
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not save file"
argument_list|)
operator|+
literal|" '"
operator|+
name|subName
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|notSavedMsg
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|notSavedMsg
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"no database generated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|usageMsg
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|usageMsg
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|usageMsg
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"no base-bibtex-file specified"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"usage"
argument_list|)
operator|+
literal|" :"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"jabref --aux infile[.aux],outfile[.bib] base-bibtex-file"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|loaded
return|;
block|}
comment|/**      * Run an entry fetcher from the command line.      *       * Note that this only works headlessly if the EntryFetcher does not show      * any GUI.      *       * @param fetchCommand      *            A string containing both the fetcher to use (id of      *            EntryFetcherExtension minus Fetcher) and the search query,      *            separated by a :      * @return A parser result containing the entries fetched or null if an      *         error occurred.      */
DECL|method|fetch (String fetchCommand)
specifier|protected
name|ParserResult
name|fetch
parameter_list|(
name|String
name|fetchCommand
parameter_list|)
block|{
if|if
condition|(
name|fetchCommand
operator|==
literal|null
operator|||
operator|!
name|fetchCommand
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
operator|||
name|fetchCommand
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Expected syntax for --fetch='<name of fetcher>:<query>'"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The following fetchers are available:"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|engine
init|=
name|fetchCommand
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|String
name|query
init|=
name|fetchCommand
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
name|EntryFetcher
name|fetcher
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EntryFetcherExtension
name|e
range|:
name|JabRefPlugin
operator|.
name|getInstance
argument_list|(
name|PluginCore
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|getEntryFetcherExtensions
argument_list|()
control|)
block|{
if|if
condition|(
name|engine
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getId
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"Fetcher"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|fetcher
operator|=
name|e
operator|.
name|getEntryFetcher
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fetcher
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not find fetcher '%0'"
argument_list|,
name|engine
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The following fetchers are available:"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|EntryFetcherExtension
name|e
range|:
name|JabRefPlugin
operator|.
name|getInstance
argument_list|(
name|PluginCore
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|getEntryFetcherExtensions
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|e
operator|.
name|getId
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"Fetcher"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Running Query '%0' with fetcher '%1'."
argument_list|,
name|query
argument_list|,
name|engine
argument_list|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please wait!"
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|result
init|=
operator|new
name|ImportInspectionCommandLine
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|fetcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Query '%0' with fetcher '%1' did not return any results."
argument_list|,
name|query
argument_list|,
name|engine
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ParserResult
argument_list|(
name|result
argument_list|)
return|;
block|}
DECL|method|openWindow (Vector<ParserResult> loaded)
specifier|public
name|void
name|openWindow
parameter_list|(
name|Vector
argument_list|<
name|ParserResult
argument_list|>
name|loaded
parameter_list|)
block|{
if|if
condition|(
operator|!
name|graphicFailure
operator|&&
operator|!
name|disableGui
operator|.
name|isInvoked
argument_list|()
condition|)
block|{
comment|// Call the method performCompatibilityUpdate(), which does any
comment|// necessary changes for users with a preference set from an older
comment|// Jabref version.
name|Util
operator|.
name|performCompatibilityUpdate
argument_list|()
expr_stmt|;
comment|// Set up custom or default icon theme:
name|GUIGlobals
operator|.
name|setUpIconTheme
argument_list|()
expr_stmt|;
comment|// TODO: remove temporary registering of external file types?
name|Globals
operator|.
name|prefs
operator|.
name|updateExternalFileTypes
argument_list|()
expr_stmt|;
comment|// This property is set to make the Mac OSX Java VM move the menu bar to
comment|// the top
comment|// of the screen, where Mac users expect it to be.
name|System
operator|.
name|setProperty
argument_list|(
literal|"apple.laf.useScreenMenuBar"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// Set antialiasing on everywhere. This only works in JRE>= 1.5.
comment|// Or... it doesn't work, period.
comment|//System.setProperty("swing.aatext", "true");
comment|// If we are not on Mac, deal with font sizes and LookAndFeels:
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_MAC
condition|)
block|{
name|int
name|fontSizes
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"menuFontSize"
argument_list|)
decl_stmt|;
name|boolean
name|overrideDefaultFonts
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"overrideDefaultFonts"
argument_list|)
decl_stmt|;
name|String
name|defaultLookAndFeel
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|ON_WIN
condition|)
name|defaultLookAndFeel
operator|=
name|GUIGlobals
operator|.
name|windowsDefaultLookAndFeel
expr_stmt|;
else|else
name|defaultLookAndFeel
operator|=
name|GUIGlobals
operator|.
name|linuxDefaultLookAndFeel
expr_stmt|;
name|String
name|lookAndFeel
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useDefaultLookAndFeel"
argument_list|)
condition|)
name|lookAndFeel
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"lookAndFeel"
argument_list|)
expr_stmt|;
else|else
name|lookAndFeel
operator|=
name|defaultLookAndFeel
expr_stmt|;
name|LookAndFeel
name|lnf
init|=
literal|null
decl_stmt|;
name|Object
name|objLnf
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|lookAndFeel
operator|!=
literal|null
condition|)
name|objLnf
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|lookAndFeel
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
else|else
name|objLnf
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|defaultLookAndFeel
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|splashScreen
operator|!=
literal|null
condition|)
block|{
comment|// do this only if splashscreen was actually created
name|splashScreen
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|splashScreen
operator|=
literal|null
expr_stmt|;
block|}
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error setting look and feel"
argument_list|)
operator|+
literal|": "
operator|+
name|lookAndFeel
argument_list|)
expr_stmt|;
try|try
block|{
name|objLnf
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|defaultLookAndFeel
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex2
parameter_list|)
block|{                     }
block|}
if|if
condition|(
name|objLnf
operator|!=
literal|null
condition|)
name|lnf
operator|=
operator|(
name|LookAndFeel
operator|)
name|objLnf
expr_stmt|;
comment|// Set font sizes if we are using a JGoodies look and feel.
if|if
condition|(
operator|(
name|lnf
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|lnf
operator|instanceof
name|Plastic3DLookAndFeel
operator|)
condition|)
block|{
comment|//UIManager.put("jgoodies.popupDropShadowEnabled", Boolean.TRUE);
name|MetalLookAndFeel
operator|.
name|setCurrentTheme
argument_list|(
operator|new
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|plastic
operator|.
name|theme
operator|.
name|SkyBluer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set a "model" icon size, so menu items are evenly spaced even though
comment|// only some items have icons. We load an arbitrary icon and look at
comment|// its size to determine what size to use:
name|int
name|defaultIconSize
init|=
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"open"
argument_list|)
operator|.
name|getIconWidth
argument_list|()
decl_stmt|;
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|Options
operator|.
name|setDefaultIconSize
argument_list|(
operator|new
name|Dimension
argument_list|(
name|defaultIconSize
argument_list|,
name|defaultIconSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|overrideDefaultFonts
condition|)
block|{
name|FontSet
name|fontSet
init|=
name|FontSets
operator|.
name|createDefaultFontSet
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Tahoma"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
name|fontSizes
argument_list|)
argument_list|,
comment|// control font
operator|new
name|Font
argument_list|(
literal|"Tahoma"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
name|fontSizes
argument_list|)
argument_list|,
comment|// menu font
operator|new
name|Font
argument_list|(
literal|"Tahoma"
argument_list|,
name|Font
operator|.
name|BOLD
argument_list|,
name|fontSizes
argument_list|)
comment|// title font
argument_list|)
decl_stmt|;
name|FontPolicy
name|fixedPolicy
init|=
name|FontPolicies
operator|.
name|createFixedPolicy
argument_list|(
name|fontSet
argument_list|)
decl_stmt|;
name|Plastic3DLookAndFeel
operator|.
name|setFontPolicy
argument_list|(
name|fixedPolicy
argument_list|)
expr_stmt|;
block|}
comment|//Plastic3DLookAndFeel plLnf = (Plastic3DLookAndFeel) lnf;
block|}
elseif|else
if|if
condition|(
operator|(
name|lnf
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|lnf
operator|instanceof
name|WindowsLookAndFeel
operator|)
condition|)
block|{
comment|// Set a "model" icon size, so menu items are evenly spaced even though
comment|// only some items have icons. We load an arbitrary icon and look at
comment|// its size to determine what size to use:
name|int
name|defaultIconSize
init|=
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"open"
argument_list|)
operator|.
name|getIconWidth
argument_list|()
decl_stmt|;
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|Options
operator|.
name|setDefaultIconSize
argument_list|(
operator|new
name|Dimension
argument_list|(
name|defaultIconSize
argument_list|,
name|defaultIconSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|overrideDefaultFonts
condition|)
block|{
name|FontSet
name|fontSet
init|=
name|FontSets
operator|.
name|createDefaultFontSet
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Tahoma"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
name|fontSizes
argument_list|)
argument_list|,
comment|// control font
operator|new
name|Font
argument_list|(
literal|"Tahoma"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
name|fontSizes
argument_list|)
argument_list|,
comment|// menu font
operator|new
name|Font
argument_list|(
literal|"Tahoma"
argument_list|,
name|Font
operator|.
name|BOLD
argument_list|,
name|fontSizes
argument_list|)
comment|// title font
argument_list|)
decl_stmt|;
name|FontPolicy
name|fixedPolicy
init|=
name|FontPolicies
operator|.
name|createFixedPolicy
argument_list|(
name|fontSet
argument_list|)
decl_stmt|;
name|WindowsLookAndFeel
operator|.
name|setFontPolicy
argument_list|(
name|fixedPolicy
argument_list|)
expr_stmt|;
block|}
comment|//WindowsLookAndFeel plLnf = (WindowsLookAndFeel) lnf;
block|}
if|if
condition|(
name|lnf
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|lnf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_WIN
condition|)
block|{
name|UIManager
operator|.
name|put
argument_list|(
literal|"SimpleInternalFrame.activeTitleBackground"
argument_list|,
name|GUIGlobals
operator|.
name|gradientBlue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_WIN
operator|&&
operator|!
name|Globals
operator|.
name|ON_MAC
condition|)
block|{
comment|// For Linux, add Enter as button click key:
name|UIDefaults
name|def
init|=
name|UIManager
operator|.
name|getDefaults
argument_list|()
decl_stmt|;
name|InputMap
name|im
init|=
operator|(
name|InputMap
operator|)
name|def
operator|.
name|get
argument_list|(
literal|"Button.focusInputMap"
argument_list|)
decl_stmt|;
name|im
operator|.
name|put
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_ENTER
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"pressed"
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_ENTER
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"released"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Trying to set system default Look&Feel..."
argument_list|)
expr_stmt|;
comment|// if desired lnf could not be set, try system default
try|try
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|UIManager
operator|.
name|getSystemLookAndFeelClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|//LookAndFeel lnf = new com.sun.java.swing.plaf.gtk.GTKLookAndFeel();
comment|//Look1AndFeel lnf = new
comment|// com.incors.plaf.kunststoff.KunststoffLookAndFeel();
comment|//com.incors.plaf.kunststoff.KunststoffLookAndFeel.setCurrentTheme(new
comment|// com.incors.plaf.kunststoff.themes.KunststoffDesktopTheme());
block|}
block|}
comment|// If the option is enabled, open the last edited databases, if any.
if|if
condition|(
operator|!
name|blank
operator|.
name|isInvoked
argument_list|()
operator|&&
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"openLastEdited"
argument_list|)
operator|&&
operator|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"lastEdited"
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// How to handle errors in the databases to open?
name|String
index|[]
name|names
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"lastEdited"
argument_list|)
decl_stmt|;
name|lastEdLoop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|fileToOpen
init|=
operator|new
name|File
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|loaded
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|elementAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|pr
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|equals
argument_list|(
name|fileToOpen
argument_list|)
condition|)
continue|continue
name|lastEdLoop
continue|;
block|}
if|if
condition|(
name|fileToOpen
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ParserResult
name|pr
init|=
name|openBibFile
argument_list|(
name|names
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pr
operator|==
name|ParserResult
operator|.
name|INVALID_FORMAT
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|fileToOpen
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|!=
name|ParserResult
operator|.
name|FILE_LOCKED
condition|)
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|GUIGlobals
operator|.
name|init
argument_list|()
expr_stmt|;
name|GUIGlobals
operator|.
name|CURRENTFONT
operator|=
operator|new
name|Font
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"fontFamily"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"fontStyle"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"fontSize"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Util.pr(": Initializing frame");
name|jrf
operator|=
operator|new
name|JabRefFrame
argument_list|()
expr_stmt|;
comment|// Add all loaded databases to the frame:
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|postponed
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ParserResult
argument_list|>
name|failed
init|=
operator|new
name|ArrayList
argument_list|<
name|ParserResult
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ParserResult
argument_list|>
name|i
init|=
name|loaded
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ParserResult
name|pr
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|isInvalid
argument_list|()
condition|)
block|{
name|failed
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|pr
operator|.
name|isPostponedAutosaveFound
argument_list|()
condition|)
block|{
name|jrf
operator|.
name|addTab
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|pr
operator|.
name|getFile
argument_list|()
argument_list|,
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|pr
operator|.
name|getEncoding
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|postponed
operator|.
name|add
argument_list|(
name|pr
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|loadSess
operator|.
name|isInvoked
argument_list|()
condition|)
name|jrf
operator|.
name|loadSessionAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
argument_list|(
name|jrf
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|splashScreen
operator|!=
literal|null
condition|)
block|{
comment|// do this only if splashscreen was actually created
name|splashScreen
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|splashScreen
operator|=
literal|null
expr_stmt|;
block|}
comment|/*JOptionPane.showMessageDialog(null, Globals.lang("Please note that this "                 +"is an early beta version. Do not use it without backing up your files!"),                     Globals.lang("Beta version"), JOptionPane.WARNING_MESSAGE);*/
comment|// Start auto save timer:
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoSave"
argument_list|)
condition|)
name|Globals
operator|.
name|startAutoSaveManager
argument_list|(
name|jrf
argument_list|)
expr_stmt|;
comment|// If we are set to remember the window location, we also remember the maximised
comment|// state. This needs to be set after the window has been made visible, so we
comment|// do it here:
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"windowMaximised"
argument_list|)
condition|)
block|{
name|jrf
operator|.
name|setExtendedState
argument_list|(
name|JFrame
operator|.
name|MAXIMIZED_BOTH
argument_list|)
expr_stmt|;
block|}
name|jrf
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"windowMaximised"
argument_list|)
condition|)
block|{
name|jrf
operator|.
name|setExtendedState
argument_list|(
name|JFrame
operator|.
name|MAXIMIZED_BOTH
argument_list|)
expr_stmt|;
block|}
comment|// TEST TEST TEST TEST TEST TEST
name|startSidePanePlugins
argument_list|(
name|jrf
argument_list|)
expr_stmt|;
for|for
control|(
name|ParserResult
name|pr
range|:
name|failed
control|)
block|{
name|String
name|message
init|=
literal|"<html>"
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file '%0'."
argument_list|,
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"<p>"
operator|+
name|pr
operator|.
name|getErrorMessage
argument_list|()
operator|+
literal|"</html>"
decl_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|jrf
argument_list|,
name|message
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"displayKeyWarningDialogAtStartup"
argument_list|)
operator|&&
name|pr
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
name|String
index|[]
name|wrns
init|=
name|pr
operator|.
name|warnings
argument_list|()
decl_stmt|;
name|StringBuilder
name|wrn
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Math
operator|.
name|min
argument_list|(
name|MAX_DIALOG_WARNINGS
argument_list|,
name|wrns
operator|.
name|length
argument_list|)
condition|;
name|j
operator|++
control|)
name|wrn
operator|.
name|append
argument_list|(
name|j
operator|+
literal|1
argument_list|)
operator|.
name|append
argument_list|(
literal|". "
argument_list|)
operator|.
name|append
argument_list|(
name|wrns
index|[
name|j
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrns
operator|.
name|length
operator|>
name|MAX_DIALOG_WARNINGS
condition|)
block|{
name|wrn
operator|.
name|append
argument_list|(
literal|"... "
argument_list|)
expr_stmt|;
name|wrn
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 warnings"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|wrns
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wrn
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|wrn
operator|.
name|deleteCharAt
argument_list|(
name|wrn
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|jrf
operator|.
name|showBaseAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|jrf
argument_list|,
name|wrn
operator|.
name|toString
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warnings"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// After adding the databases, go through each and see if
comment|// any post open actions need to be done. For instance, checking
comment|// if we found new entry types that can be imported, or checking
comment|// if the database contents should be modified due to new features
comment|// in this version of JabRef:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BasePanel
name|panel
init|=
name|jrf
operator|.
name|baseAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|OpenDatabaseAction
operator|.
name|performPostOpenActions
argument_list|(
name|panel
argument_list|,
name|pr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//Util.pr(": Finished adding panels");
comment|// If any database loading was postponed due to an autosave, schedule them
comment|// for handing now:
if|if
condition|(
name|postponed
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|AutosaveStartupPrompter
name|asp
init|=
operator|new
name|AutosaveStartupPrompter
argument_list|(
name|jrf
argument_list|,
name|postponed
argument_list|)
decl_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|asp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|jrf
operator|.
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|new
name|FocusRequester
argument_list|(
operator|(
operator|(
name|BasePanel
operator|)
name|jrf
operator|.
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|mainTable
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Go through all registered instances of SidePanePlugin, and register them      * in the SidePaneManager.      *      * @param jrf The JabRefFrame.      */
DECL|method|startSidePanePlugins (JabRefFrame jrf)
specifier|private
name|void
name|startSidePanePlugins
parameter_list|(
name|JabRefFrame
name|jrf
parameter_list|)
block|{
name|JabRefPlugin
name|jabrefPlugin
init|=
name|JabRefPlugin
operator|.
name|getInstance
argument_list|(
name|PluginCore
operator|.
name|getManager
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|_JabRefPlugin
operator|.
name|SidePanePluginExtension
argument_list|>
name|plugins
init|=
name|jabrefPlugin
operator|.
name|getSidePanePluginExtensions
argument_list|()
decl_stmt|;
for|for
control|(
name|_JabRefPlugin
operator|.
name|SidePanePluginExtension
name|extension
range|:
name|plugins
control|)
block|{
name|SidePanePlugin
name|plugin
init|=
name|extension
operator|.
name|getSidePanePlugin
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|init
argument_list|(
name|jrf
argument_list|,
name|jrf
operator|.
name|sidePaneManager
argument_list|)
expr_stmt|;
name|SidePaneComponent
name|comp
init|=
name|plugin
operator|.
name|getSidePaneComponent
argument_list|()
decl_stmt|;
name|jrf
operator|.
name|sidePaneManager
operator|.
name|register
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|jrf
operator|.
name|addPluginMenuItem
argument_list|(
name|plugin
operator|.
name|getMenuItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openBibFile (String name, boolean ignoreAutosave)
specifier|public
specifier|static
name|ParserResult
name|openBibFile
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|ignoreAutosave
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Opening"
argument_list|)
operator|+
literal|": "
operator|+
name|name
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ParserResult
name|pr
init|=
operator|new
name|ParserResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|pr
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setInvalid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error:"
argument_list|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"File not found"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pr
return|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|ignoreAutosave
condition|)
block|{
name|boolean
name|autoSaveFound
init|=
name|AutoSaveManager
operator|.
name|newerAutoSaveExists
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|autoSaveFound
condition|)
block|{
comment|// We have found a newer autosave. Make a note of this, so it can be
comment|// handled after startup:
name|ParserResult
name|postp
init|=
operator|new
name|ParserResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|postp
operator|.
name|setPostponedAutosaveFound
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|postp
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|postp
return|;
block|}
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|waitForFileLock
argument_list|(
name|file
argument_list|,
literal|10
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|name
operator|+
literal|"'. "
operator|+
literal|"File is locked by another JabRef instance."
argument_list|)
expr_stmt|;
return|return
name|ParserResult
operator|.
name|FILE_LOCKED
return|;
block|}
name|String
name|encoding
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
name|OpenDatabaseAction
operator|.
name|loadDatabase
argument_list|(
name|file
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|==
literal|null
condition|)
block|{
name|pr
operator|=
operator|new
name|ParserResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setInvalid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|pr
return|;
block|}
name|pr
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|pr
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
name|String
index|[]
name|warn
init|=
name|pr
operator|.
name|warnings
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|warn
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
name|warn
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|pr
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ParserResult
name|pr
init|=
operator|new
name|ParserResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|pr
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setInvalid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setErrorMessage
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pr
return|;
block|}
block|}
DECL|method|importFile (String argument)
specifier|public
specifier|static
name|ParserResult
name|importFile
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
name|String
index|[]
name|data
init|=
name|argument
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|data
operator|.
name|length
operator|>
literal|1
operator|)
operator|&&
operator|!
literal|"*"
operator|.
name|equals
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Importing"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|ON_WIN
condition|)
block|{
name|entries
operator|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importFromFile
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entries
operator|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importFromFile
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|data
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"~"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParserResult
argument_list|(
name|entries
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unknown import format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// * means "guess the format":
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Importing in unknown format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|String
argument_list|,
name|ParserResult
argument_list|>
name|importResult
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|ON_WIN
condition|)
block|{
name|importResult
operator|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importUnknownFormat
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|importResult
operator|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importUnknownFormat
argument_list|(
name|data
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"~"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|importResult
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Format used"
argument_list|)
operator|+
literal|": "
operator|+
name|importResult
operator|.
name|p
argument_list|)
expr_stmt|;
return|return
name|importResult
operator|.
name|v
return|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not find a suitable import format."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Will open a file (like importFile), but will also request JabRef to focus on this database       * @param argument See importFile.      * @return ParserResult with setToOpenTab(true)      */
DECL|method|importToOpenBase (String argument)
specifier|public
specifier|static
name|ParserResult
name|importToOpenBase
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
name|ParserResult
name|result
init|=
name|importFile
argument_list|(
name|argument
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
name|result
operator|.
name|setToOpenTab
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

