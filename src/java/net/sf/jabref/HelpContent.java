begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003 Nizar N. Batada, Morten O. Alver   All programs in this directory and  subdirectories are published under the GNU General Public License as  described below.   This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or (at  your option) any later version.   This program is distributed in the hope that it will be useful, but  WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  General Public License for more details.   You should have received a copy of the GNU General Public License  along with this program; if not, write to the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA   Further information about the GNU GPL is available at:  http://www.gnu.org/copyleft/gpl.ja.html   */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|HyperlinkEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|HyperlinkListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|DefaultEditorKit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|TextAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|html
operator|.
name|HTMLEditorKit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|HelpContent
specifier|public
class|class
name|HelpContent
extends|extends
name|JTextPane
block|{
DECL|field|log
specifier|static
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HelpContent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|pane
name|JScrollPane
name|pane
decl_stmt|;
DECL|field|history
DECL|field|forw
specifier|private
name|Stack
argument_list|<
name|URL
argument_list|>
name|history
decl_stmt|,
name|forw
decl_stmt|;
DECL|field|prefs
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|method|HelpContent (JabRefPreferences prefs_)
specifier|public
name|HelpContent
parameter_list|(
name|JabRefPreferences
name|prefs_
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|pane
operator|=
operator|new
name|JScrollPane
argument_list|(
name|this
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
expr_stmt|;
name|pane
operator|.
name|setDoubleBuffered
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prefs
operator|=
name|prefs_
expr_stmt|;
name|history
operator|=
operator|new
name|Stack
argument_list|<
name|URL
argument_list|>
argument_list|()
expr_stmt|;
name|forw
operator|=
operator|new
name|Stack
argument_list|<
name|URL
argument_list|>
argument_list|()
expr_stmt|;
name|setEditorKitForContentType
argument_list|(
literal|"text/html"
argument_list|,
operator|new
name|MyEditorKit
argument_list|()
argument_list|)
expr_stmt|;
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Handles Anchors
specifier|final
name|HyperlinkListener
name|hyperLinkListener
init|=
operator|new
name|HyperlinkListener
argument_list|()
block|{
specifier|public
name|void
name|hyperlinkUpdate
parameter_list|(
specifier|final
name|HyperlinkEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getDescription
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|scrollToReference
argument_list|(
name|e
operator|.
name|getDescription
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|addHyperlinkListener
argument_list|(
name|hyperLinkListener
argument_list|)
expr_stmt|;
block|}
DECL|method|back ()
specifier|public
name|boolean
name|back
parameter_list|()
block|{
if|if
condition|(
operator|!
name|history
operator|.
name|empty
argument_list|()
condition|)
block|{
name|URL
name|prev
init|=
operator|(
name|history
operator|.
name|pop
argument_list|()
operator|)
decl_stmt|;
name|forw
operator|.
name|push
argument_list|(
name|getPage
argument_list|()
argument_list|)
expr_stmt|;
name|setPageOnly
argument_list|(
name|prev
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|history
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|forward ()
specifier|public
name|boolean
name|forward
parameter_list|()
block|{
if|if
condition|(
operator|!
name|forw
operator|.
name|empty
argument_list|()
condition|)
block|{
name|URL
name|next
init|=
operator|(
name|forw
operator|.
name|pop
argument_list|()
operator|)
decl_stmt|;
name|history
operator|.
name|push
argument_list|(
name|getPage
argument_list|()
argument_list|)
expr_stmt|;
name|setPageOnly
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|forw
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|forw
operator|.
name|removeAllElements
argument_list|()
expr_stmt|;
name|history
operator|.
name|removeAllElements
argument_list|()
expr_stmt|;
block|}
DECL|method|setPage (String filename)
specifier|public
name|void
name|setPage
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
comment|// Check for anchor
name|int
name|indexOf
init|=
name|filename
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
name|String
name|file
decl_stmt|;
name|String
name|reference
decl_stmt|;
if|if
condition|(
name|indexOf
operator|!=
operator|-
literal|1
condition|)
block|{
name|file
operator|=
name|filename
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOf
argument_list|)
expr_stmt|;
name|reference
operator|=
name|filename
operator|.
name|substring
argument_list|(
name|indexOf
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
name|filename
expr_stmt|;
name|reference
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|middle
init|=
name|prefs
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
operator|+
literal|"/"
decl_stmt|;
if|if
condition|(
name|middle
operator|.
name|equals
argument_list|(
literal|"en/"
argument_list|)
condition|)
name|middle
operator|=
literal|""
expr_stmt|;
comment|// english in base help dir.
name|URL
name|old
init|=
name|getPage
argument_list|()
decl_stmt|;
try|try
block|{
comment|// First check in specified language
name|URL
name|resource
init|=
name|JabRef
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|GUIGlobals
operator|.
name|helpPre
operator|+
name|middle
operator|+
name|file
argument_list|)
decl_stmt|;
comment|// If not available fallback to english
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|resource
operator|=
name|JabRef
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|GUIGlobals
operator|.
name|helpPre
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
comment|// If still not available print a warning
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
comment|// TODO show warning to user
name|log
operator|.
name|error
argument_list|(
literal|"Could not find html-help for file '"
operator|+
name|file
operator|+
literal|"'."
argument_list|)
expr_stmt|;
return|return;
block|}
name|setPageOnly
argument_list|(
operator|new
name|URL
argument_list|(
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|"#"
operator|+
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|forw
operator|.
name|removeAllElements
argument_list|()
expr_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
name|history
operator|.
name|push
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Convenience method for setPage(String) 	 */
DECL|method|setPage (URL url)
specifier|public
name|void
name|setPage
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|setPage
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setPageOnly (URL url)
specifier|private
name|void
name|setPageOnly
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
try|try
block|{
name|super
operator|.
name|setPage
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error: Help file not set"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error: Help file not found '"
operator|+
name|url
operator|.
name|getFile
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getPane ()
specifier|public
name|JComponent
name|getPane
parameter_list|()
block|{
return|return
name|pane
return|;
block|}
comment|/*public void paintComponent(Graphics g) { 		Graphics2D g2 = (Graphics2D) g; 		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); 		g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY); 		super.paintComponent(g2); 	}*/
DECL|class|MyNextVisualPositionAction
specifier|public
class|class
name|MyNextVisualPositionAction
extends|extends
name|TextAction
block|{
DECL|field|textActn
specifier|private
name|Action
name|textActn
decl_stmt|;
DECL|field|direction
specifier|private
name|int
name|direction
decl_stmt|;
DECL|method|MyNextVisualPositionAction (Action textActn, int direction)
specifier|private
name|MyNextVisualPositionAction
parameter_list|(
name|Action
name|textActn
parameter_list|,
name|int
name|direction
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|String
operator|)
name|textActn
operator|.
name|getValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|textActn
operator|=
name|textActn
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JTextComponent
name|c
init|=
name|getTextComponent
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getParent
argument_list|()
operator|instanceof
name|JViewport
condition|)
block|{
name|JViewport
name|viewport
init|=
operator|(
name|JViewport
operator|)
name|c
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Point
name|p
init|=
name|viewport
operator|.
name|getViewPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|direction
operator|==
name|SwingConstants
operator|.
name|NORTH
condition|)
block|{
name|c
operator|.
name|setCaretPosition
argument_list|(
name|c
operator|.
name|viewToModel
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|y
operator|+=
name|viewport
operator|.
name|getExtentSize
argument_list|()
operator|.
name|height
expr_stmt|;
name|c
operator|.
name|setCaretPosition
argument_list|(
name|c
operator|.
name|viewToModel
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|textActn
operator|.
name|actionPerformed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyEditorKit
specifier|public
class|class
name|MyEditorKit
extends|extends
name|HTMLEditorKit
block|{
DECL|field|myActions
specifier|private
name|Action
index|[]
name|myActions
decl_stmt|;
DECL|method|getActions ()
specifier|public
name|Action
index|[]
name|getActions
parameter_list|()
block|{
if|if
condition|(
name|myActions
operator|==
literal|null
condition|)
block|{
name|Action
index|[]
name|actions
init|=
name|super
operator|.
name|getActions
argument_list|()
decl_stmt|;
name|Action
index|[]
name|newActions
init|=
operator|new
name|Action
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Action
name|actn
init|=
name|actions
index|[
name|i
index|]
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|actn
operator|.
name|getValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|DefaultEditorKit
operator|.
name|upAction
argument_list|)
condition|)
block|{
name|newActions
index|[
literal|0
index|]
operator|=
operator|new
name|MyNextVisualPositionAction
argument_list|(
name|actions
index|[
name|i
index|]
argument_list|,
name|SwingConstants
operator|.
name|NORTH
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|DefaultEditorKit
operator|.
name|downAction
argument_list|)
condition|)
block|{
name|newActions
index|[
literal|1
index|]
operator|=
operator|new
name|MyNextVisualPositionAction
argument_list|(
name|actions
index|[
name|i
index|]
argument_list|,
name|SwingConstants
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
block|}
block|}
name|myActions
operator|=
name|TextAction
operator|.
name|augmentList
argument_list|(
name|actions
argument_list|,
name|newActions
argument_list|)
expr_stmt|;
block|}
return|return
name|myActions
return|;
block|}
block|}
block|}
end_class

end_unit

