begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.plugin
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|java
operator|.
name|plugin
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|java
operator|.
name|plugin
operator|.
name|PluginManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|java
operator|.
name|plugin
operator|.
name|PluginManager
operator|.
name|PluginLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|java
operator|.
name|plugin
operator|.
name|boot
operator|.
name|DefaultPluginsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|java
operator|.
name|plugin
operator|.
name|standard
operator|.
name|StandardPluginLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|java
operator|.
name|plugin
operator|.
name|util
operator|.
name|ExtendedProperties
import|;
end_import

begin_comment
comment|/**  * Helper class for the plug-in system. Helps to retrieve the singleton instance  * of the PluginManager.  *   */
end_comment

begin_class
DECL|class|PluginCore
specifier|public
class|class
name|PluginCore
block|{
DECL|field|singleton
specifier|static
name|PluginManager
name|singleton
decl_stmt|;
DECL|method|getLocationInsideJar (String context, String manifest)
specifier|static
name|PluginLocation
name|getLocationInsideJar
parameter_list|(
name|String
name|context
parameter_list|,
name|String
name|manifest
parameter_list|)
block|{
name|URL
name|jar
init|=
name|PluginCore
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|Util
operator|.
name|joinPath
argument_list|(
name|context
argument_list|,
name|manifest
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|jar
operator|!=
literal|null
operator|&&
name|jar
operator|.
name|getProtocol
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"jar"
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|new
name|StandardPluginLocation
argument_list|(
operator|new
name|URL
argument_list|(
name|jar
operator|.
name|toExternalForm
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"!(.*?)$"
argument_list|,
name|Util
operator|.
name|joinPath
argument_list|(
literal|"!"
argument_list|,
name|context
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|jar
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getManager ()
specifier|public
specifier|static
name|PluginManager
name|getManager
parameter_list|()
block|{
if|if
condition|(
name|singleton
operator|==
literal|null
condition|)
block|{
name|ObjectFactory
name|objectFactory
init|=
name|ObjectFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|singleton
operator|=
name|objectFactory
operator|.
name|createManager
argument_list|()
expr_stmt|;
try|try
block|{
name|DefaultPluginsCollector
name|collector
init|=
operator|new
name|DefaultPluginsCollector
argument_list|()
decl_stmt|;
name|ExtendedProperties
name|ep
init|=
operator|new
name|ExtendedProperties
argument_list|()
decl_stmt|;
name|ep
operator|.
name|setProperty
argument_list|(
literal|"org.java.plugin.boot.pluginsRepositories"
argument_list|,
literal|"./src/plugins,./plugins"
argument_list|)
expr_stmt|;
name|collector
operator|.
name|configure
argument_list|(
name|ep
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PluginLocation
argument_list|>
name|plugins
init|=
name|collector
operator|.
name|collectPluginLocations
argument_list|()
decl_stmt|;
comment|/** 				 * I know the following is really, really ugly, but I have found 				 * no way to automatically discover multiple plugin.xmls in JARs 				 */
name|PluginLocation
name|location
decl_stmt|;
name|location
operator|=
name|getLocationInsideJar
argument_list|(
literal|"/plugins/net.sf.jabref.core/"
argument_list|,
literal|"plugin.xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
name|plugins
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|location
operator|=
name|getLocationInsideJar
argument_list|(
literal|"/plugins/net.sf.jabref.export.misq/"
argument_list|,
literal|"plugin.xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
name|plugins
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|plugins
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
operator|.
name|logger
argument_list|(
literal|"No plugins found. At least net.sf.jabref.core should be there."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
operator|.
name|logger
argument_list|(
name|plugins
operator|.
name|size
argument_list|()
operator|+
literal|" plugin(s) found."
argument_list|)
expr_stmt|;
block|}
name|singleton
operator|.
name|publishPlugins
argument_list|(
name|plugins
operator|.
name|toArray
argument_list|(
operator|new
name|PluginLocation
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|singleton
return|;
block|}
block|}
end_class

end_unit

