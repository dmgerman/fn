begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.plugin
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|*
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|BasicEventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|net
operator|.
name|URLDownload
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|java
operator|.
name|plugin
operator|.
name|registry
operator|.
name|PluginDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|java
operator|.
name|plugin
operator|.
name|registry
operator|.
name|ManifestProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|java
operator|.
name|plugin
operator|.
name|registry
operator|.
name|ManifestInfo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PluginInstaller
specifier|public
class|class
name|PluginInstaller
block|{
DECL|field|PLUGIN_XML_FILE
specifier|public
specifier|static
specifier|final
name|String
name|PLUGIN_XML_FILE
init|=
literal|"plugin.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|SUCCESS
name|SUCCESS
init|=
literal|0
decl_stmt|,
DECL|field|UNABLE_TO_CREATE_DIR
name|UNABLE_TO_CREATE_DIR
init|=
literal|1
decl_stmt|,
DECL|field|UNABLE_TO_COPY_FILE
name|UNABLE_TO_COPY_FILE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|NO_VERSIONS_INSTALLED
name|NO_VERSIONS_INSTALLED
init|=
literal|0
decl_stmt|,
DECL|field|NEWER_VERSION_INSTALLED
name|NEWER_VERSION_INSTALLED
init|=
literal|1
decl_stmt|,
DECL|field|SAME_VERSION_INSTALLED
name|SAME_VERSION_INSTALLED
init|=
literal|2
decl_stmt|,
DECL|field|OLDER_VERSION_INSTALLED
name|OLDER_VERSION_INSTALLED
init|=
literal|3
decl_stmt|,
DECL|field|UNCONVENTIONAL_FILENAME
name|UNCONVENTIONAL_FILENAME
init|=
literal|4
decl_stmt|,
DECL|field|UNKNOWN_VERSION
name|UNKNOWN_VERSION
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|NOT_LOADED
name|NOT_LOADED
init|=
literal|0
decl_stmt|,
DECL|field|LOADED
name|LOADED
init|=
literal|1
decl_stmt|,
DECL|field|BAD
name|BAD
init|=
literal|2
decl_stmt|;
DECL|method|installPlugin (JabRefFrame frame, File file, String targetFileName)
specifier|public
specifier|static
name|void
name|installPlugin
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|File
name|file
parameter_list|,
name|String
name|targetFileName
parameter_list|)
block|{
name|String
name|fileName
init|=
name|targetFileName
operator|!=
literal|null
condition|?
name|targetFileName
else|:
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|boolean
name|created
init|=
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|created
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to create plugin directory"
argument_list|)
operator|+
literal|" ("
operator|+
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|getPath
argument_list|()
operator|+
literal|")."
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|int
name|status
init|=
name|checkInstalledVersion
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|int
name|result
decl_stmt|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|NO_VERSIONS_INSTALLED
case|:
name|result
operator|=
name|copyPlugin
argument_list|(
name|frame
argument_list|,
name|file
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|SUCCESS
condition|)
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installed successfully. You must restart JabRef to load the new plugin."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
else|else
block|{
name|String
name|reason
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|UNABLE_TO_COPY_FILE
condition|)
name|reason
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to copy file"
argument_list|)
expr_stmt|;
else|else
name|reason
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to create user plugin directory"
argument_list|)
operator|+
literal|" ("
operator|+
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|getPath
argument_list|()
operator|+
literal|")."
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installation failed."
argument_list|)
operator|+
literal|" "
operator|+
name|reason
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SAME_VERSION_INSTALLED
case|:
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"The same version of this plugin is already installed."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
break|break;
case|case
name|NEWER_VERSION_INSTALLED
case|:
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"A newer version of this plugin is already installed."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
break|break;
case|case
name|OLDER_VERSION_INSTALLED
case|:
name|result
operator|=
name|copyPlugin
argument_list|(
name|frame
argument_list|,
name|file
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|SUCCESS
condition|)
block|{
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"One or more older versions of this plugin is installed. Delete old versions?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
name|boolean
name|success
init|=
name|deleteOlderVersions
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Old versions deleted successfully."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Old plugin versions will be deleted next time JabRef starts up."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|String
name|reason
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|UNABLE_TO_COPY_FILE
condition|)
name|reason
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to copy file"
argument_list|)
expr_stmt|;
else|else
name|reason
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to create user plugin directory"
argument_list|)
operator|+
literal|" ("
operator|+
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|getPath
argument_list|()
operator|+
literal|")."
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installation failed."
argument_list|)
operator|+
literal|" "
operator|+
name|reason
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
break|break;
comment|//case UNKNOWN_VERSION:
comment|//    JOptionPane.showMessageDialog(frame, Globals.lang("Could not determine version of "));
comment|//    break;
case|case
name|UNKNOWN_VERSION
case|:
name|JLabel
name|lab
init|=
operator|new
name|JLabel
argument_list|(
literal|"<html>"
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to determine plugin name and "
operator|+
literal|"version. This may not be a valid JabRef plugin."
argument_list|)
operator|+
literal|"<br>"
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Install anyway?"
argument_list|)
operator|+
literal|"</html>"
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|lab
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
name|result
operator|=
name|copyPlugin
argument_list|(
name|frame
argument_list|,
name|file
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|SUCCESS
condition|)
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installed successfully. You must restart JabRef to load the new plugin."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
else|else
block|{
name|String
name|reason
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|UNABLE_TO_COPY_FILE
condition|)
name|reason
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to copy file"
argument_list|)
expr_stmt|;
else|else
name|reason
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to create user plugin directory"
argument_list|)
operator|+
literal|" ("
operator|+
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|getPath
argument_list|()
operator|+
literal|")."
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installation failed."
argument_list|)
operator|+
literal|" "
operator|+
name|reason
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Plugin installer"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
comment|/**      * Check the status of the named plugin - whether an older, the same or a      * newer version is already installed.      * @param f The plugin file.      * @return an integer indicating the status      */
DECL|method|checkInstalledVersion (File f)
specifier|public
specifier|static
name|int
name|checkInstalledVersion
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|String
index|[]
name|nav
init|=
name|getNameAndVersion
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|nav
operator|==
literal|null
condition|)
return|return
name|UNKNOWN_VERSION
return|;
name|VersionNumber
name|vn
init|=
operator|new
name|VersionNumber
argument_list|(
name|nav
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|VersionNumber
argument_list|,
name|File
argument_list|>
name|versions
init|=
name|getInstalledVersions
argument_list|(
name|nav
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|versions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|NO_VERSIONS_INSTALLED
return|;
block|}
name|VersionNumber
name|thenum
init|=
name|versions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|hasSame
init|=
name|vn
operator|.
name|compareTo
argument_list|(
name|thenum
argument_list|)
operator|==
literal|0
decl_stmt|;
name|boolean
name|hasNewer
init|=
name|vn
operator|.
name|compareTo
argument_list|(
name|thenum
argument_list|)
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|hasNewer
condition|)
return|return
name|NEWER_VERSION_INSTALLED
return|;
if|if
condition|(
name|hasSame
condition|)
return|return
name|SAME_VERSION_INSTALLED
return|;
return|return
name|OLDER_VERSION_INSTALLED
return|;
block|}
comment|/**      * Delete the given plugin.      * @param plugin Name and version information for the plugin to delete.      * @return true if deletion is successful, false otherwise.      */
DECL|method|deletePlugin (NameAndVersion plugin)
specifier|public
specifier|static
name|boolean
name|deletePlugin
parameter_list|(
name|NameAndVersion
name|plugin
parameter_list|)
block|{
comment|/*String file = buildFileName(plugin.name,                 plugin.version.equals(VersionNumber.ZERO) ? null : plugin.version.toString());*/
return|return
name|deletePluginFile
argument_list|(
name|plugin
operator|.
name|file
argument_list|)
return|;
block|}
DECL|method|deleteOlderVersions (File f)
specifier|public
specifier|static
name|boolean
name|deleteOlderVersions
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|String
index|[]
name|nav
init|=
name|getNameAndVersion
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|nav
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
name|VersionNumber
name|num
init|=
operator|new
name|VersionNumber
argument_list|(
name|nav
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|VersionNumber
argument_list|,
name|File
argument_list|>
name|versions
init|=
name|getInstalledVersions
argument_list|(
name|nav
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|VersionNumber
name|versionNumber
range|:
name|versions
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|num
operator|.
name|compareTo
argument_list|(
name|versionNumber
argument_list|)
operator|<
literal|0
condition|)
block|{
name|String
name|vnString
init|=
name|versionNumber
operator|.
name|equals
argument_list|(
name|VersionNumber
operator|.
name|ZERO
argument_list|)
condition|?
literal|null
else|:
name|versionNumber
operator|.
name|toString
argument_list|()
decl_stmt|;
name|File
name|file
init|=
name|versions
operator|.
name|get
argument_list|(
name|versionNumber
argument_list|)
decl_stmt|;
comment|//buildFileName(nav[0], vnString);
name|success
operator|=
name|deletePluginFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|//file).delete()&& success;
block|}
block|}
return|return
name|success
return|;
block|}
comment|/**      * This method deletes a plugin file. If deletion fails - typically happens      * on Windows due to file locking - the file is scheduled for deletion on      * the next startup.      *      * @param f The file to delete.      * @return true if deletion was successful, false if scheduled for later.      */
DECL|method|deletePluginFile (File f)
specifier|public
specifier|static
name|boolean
name|deletePluginFile
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|boolean
name|success
init|=
name|f
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
name|success
condition|)
return|return
literal|true
return|;
else|else
block|{
name|schedulePluginForDeletion
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Copy a plugin to the user plugin directory. Does not check whether the plugin      * already exists.      * @param source The local or remote location to copy the plugin from.      * @return true if the install was successful      */
DECL|method|copyPlugin (JFrame frame, URL source, String destFileName)
specifier|public
specifier|static
name|int
name|copyPlugin
parameter_list|(
name|JFrame
name|frame
parameter_list|,
name|URL
name|source
parameter_list|,
name|String
name|destFileName
parameter_list|)
block|{
if|if
condition|(
name|destFileName
operator|==
literal|null
condition|)
name|destFileName
operator|=
name|source
operator|.
name|getFile
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|boolean
name|created
init|=
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|created
condition|)
block|{
return|return
name|UNABLE_TO_CREATE_DIR
return|;
block|}
block|}
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|PluginCore
operator|.
name|userPluginDir
argument_list|,
name|destFileName
argument_list|)
decl_stmt|;
name|URLDownload
name|ud
init|=
operator|new
name|URLDownload
argument_list|(
name|frame
argument_list|,
name|source
argument_list|,
name|destFile
argument_list|)
decl_stmt|;
try|try
block|{
name|ud
operator|.
name|download
argument_list|()
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|UNABLE_TO_COPY_FILE
return|;
block|}
block|}
DECL|method|copyPlugin (JFrame frame, File source, String destFileName)
specifier|public
specifier|static
name|int
name|copyPlugin
parameter_list|(
name|JFrame
name|frame
parameter_list|,
name|File
name|source
parameter_list|,
name|String
name|destFileName
parameter_list|)
block|{
if|if
condition|(
name|destFileName
operator|==
literal|null
condition|)
name|destFileName
operator|=
name|source
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|boolean
name|created
init|=
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|created
condition|)
block|{
return|return
name|UNABLE_TO_CREATE_DIR
return|;
block|}
block|}
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|PluginCore
operator|.
name|userPluginDir
argument_list|,
name|destFileName
argument_list|)
decl_stmt|;
name|BufferedInputStream
name|in
init|=
literal|null
decl_stmt|;
name|BufferedOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|destFile
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|count
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|UNABLE_TO_COPY_FILE
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{
comment|// UNABLE_TO_COPY_FILE;
block|}
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{
comment|// UNABLE_TO_COPY_FILE;
block|}
block|}
block|}
return|return
name|SUCCESS
return|;
block|}
comment|/**      * Based on a plugin name, find all versions that are already present      * in the user plugin directory.      * @param pluginName The name of the plugin.      * @return A map of versions already present, linking to the file containing each.      */
DECL|method|getInstalledVersions (final String pluginName)
specifier|public
specifier|static
name|Map
argument_list|<
name|VersionNumber
argument_list|,
name|File
argument_list|>
name|getInstalledVersions
parameter_list|(
specifier|final
name|String
name|pluginName
parameter_list|)
block|{
name|String
index|[]
name|files
init|=
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|list
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|VersionNumber
argument_list|,
name|File
argument_list|>
name|versions
init|=
operator|new
name|TreeMap
argument_list|<
name|VersionNumber
argument_list|,
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|PluginCore
operator|.
name|userPluginDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|String
index|[]
name|nav
init|=
name|getNameAndVersion
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|nav
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nav
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|pluginName
argument_list|)
condition|)
block|{
name|VersionNumber
name|vn
init|=
operator|new
name|VersionNumber
argument_list|(
name|nav
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|versions
operator|.
name|put
argument_list|(
name|vn
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|versions
return|;
block|}
comment|/**      * Add the given filename to the list of plugins to be deleted on the next      * JabRef startup.      *      * @param filename The path to the file to delete.      */
DECL|method|schedulePluginForDeletion (String filename)
specifier|public
specifier|static
name|void
name|schedulePluginForDeletion
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|String
index|[]
name|oldValues
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"deletePlugins"
argument_list|)
decl_stmt|;
name|String
index|[]
name|newValues
init|=
name|oldValues
operator|==
literal|null
condition|?
operator|new
name|String
index|[
literal|1
index|]
else|:
operator|new
name|String
index|[
name|oldValues
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|oldValues
operator|!=
literal|null
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|oldValues
argument_list|,
literal|0
argument_list|,
name|newValues
argument_list|,
literal|0
argument_list|,
name|oldValues
operator|.
name|length
argument_list|)
expr_stmt|;
name|newValues
index|[
name|newValues
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|filename
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putStringArray
argument_list|(
literal|"deletePlugins"
argument_list|,
name|newValues
argument_list|)
expr_stmt|;
block|}
comment|/**      * Delete the given files. Refuses to delete files outside the user plugin directory.      * This method throws no errors is the files don't exist or deletion failed.      * @param filenames An array of names of the files to be deleted.      */
DECL|method|deletePluginsOnStartup (String[] filenames)
specifier|public
specifier|static
name|void
name|deletePluginsOnStartup
parameter_list|(
name|String
index|[]
name|filenames
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|filenames
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|getParentFile
argument_list|()
operator|.
name|equals
argument_list|(
name|PluginCore
operator|.
name|userPluginDir
argument_list|)
condition|)
block|{
comment|//if (s.startsWith(PluginCore.userPluginDir.getPath())) {
name|boolean
name|success
init|=
name|f
operator|.
name|delete
argument_list|()
decl_stmt|;
block|}
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"File outside of user plugin dir: "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|pluginFilePattern
specifier|static
name|Pattern
name|pluginFilePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*)-([\\d\\.]+).jar"
argument_list|)
decl_stmt|;
DECL|field|pluginFilePatternNoVersion
specifier|static
name|Pattern
name|pluginFilePatternNoVersion
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*).jar"
argument_list|)
decl_stmt|;
comment|/**      * Look inside a jar file, find the plugin.xml file, and use it to determine the name      * and version of the plugin.      *      * @param f The file to investigate.      * @return A string array containing the plugin name in the first element and      *   the version number in the second, or null if the filename couldn't be      *   interpreted.      *      */
DECL|method|getNameAndVersion (File f)
specifier|public
specifier|static
name|String
index|[]
name|getNameAndVersion
parameter_list|(
name|File
name|f
parameter_list|)
block|{
try|try
block|{
name|File
name|temp
init|=
name|unpackPluginXML
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|temp
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// Couldn't find the plugin.xml file
name|ManifestInfo
name|mi
init|=
name|PluginCore
operator|.
name|getManager
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|readManifestInfo
argument_list|(
name|temp
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
decl_stmt|;
name|temp
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|mi
operator|.
name|getId
argument_list|()
block|,
name|mi
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
block|}
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ManifestProcessingException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// Couldn't make sense of the plugin.xml
block|}
block|}
comment|/**      * Take the name of a jar file and extract the plugin.xml file, if possible,      * to a temporary file.      * @param f The jar file to extract from.      * @return a temporary file to which the plugin.xml file has been copied.      */
DECL|method|unpackPluginXML (File f)
specifier|public
specifier|static
name|File
name|unpackPluginXML
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JarFile
name|jar
init|=
operator|new
name|JarFile
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|ZipEntry
name|entry
init|=
name|jar
operator|.
name|getEntry
argument_list|(
name|PLUGIN_XML_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|dest
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"jabref_plugin"
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
name|dest
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|jar
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|nBytes
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|nBytes
operator|<=
literal|0
condition|)
break|break;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|nBytes
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|dest
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Build a list of installed plugins.      * @return a list of plugin names and version numbers.      */
DECL|method|findInstalledPlugins ()
specifier|public
specifier|static
name|EventList
argument_list|<
name|NameAndVersion
argument_list|>
name|findInstalledPlugins
parameter_list|()
block|{
name|EventList
argument_list|<
name|NameAndVersion
argument_list|>
name|plugins
init|=
operator|new
name|BasicEventList
argument_list|<
name|NameAndVersion
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|exists
argument_list|()
condition|)
return|return
name|plugins
return|;
name|String
index|[]
name|files
init|=
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|list
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|PluginDescriptor
argument_list|>
name|urls
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PluginDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|PluginDescriptor
argument_list|>
name|descriptors
init|=
name|PluginCore
operator|.
name|getManager
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|getPluginDescriptors
argument_list|()
decl_stmt|;
for|for
control|(
name|PluginDescriptor
name|desc
range|:
name|descriptors
control|)
block|{
if|if
condition|(
operator|(
name|desc
operator|.
name|getPluginClassName
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|!
name|desc
operator|.
name|getPluginClassName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"net.sf.jabref.plugin.core.JabRefPlugin"
argument_list|)
condition|)
block|{
name|urls
operator|.
name|put
argument_list|(
name|desc
operator|.
name|getId
argument_list|()
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|file1
range|:
name|files
control|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|PluginCore
operator|.
name|userPluginDir
argument_list|,
name|file1
argument_list|)
decl_stmt|;
name|String
index|[]
name|nav
init|=
name|getNameAndVersion
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|nav
operator|!=
literal|null
condition|)
block|{
name|VersionNumber
name|vn
init|=
name|nav
index|[
literal|1
index|]
operator|!=
literal|null
condition|?
operator|new
name|VersionNumber
argument_list|(
name|nav
index|[
literal|1
index|]
argument_list|)
else|:
literal|null
decl_stmt|;
name|NameAndVersion
name|nameAndVersion
init|=
operator|new
name|NameAndVersion
argument_list|(
name|nav
index|[
literal|0
index|]
argument_list|,
name|vn
argument_list|,
literal|true
argument_list|,
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|urls
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|loc
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|loc
operator|.
name|contains
argument_list|(
name|nav
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|PluginDescriptor
name|desc
init|=
name|urls
operator|.
name|get
argument_list|(
name|loc
argument_list|)
decl_stmt|;
comment|//System.out.println("Accounted for: "+desc.getId()+" "+desc.getVersion().toString());
if|if
condition|(
operator|!
name|PluginCore
operator|.
name|getManager
argument_list|()
operator|.
name|isPluginEnabled
argument_list|(
name|urls
operator|.
name|get
argument_list|(
name|loc
argument_list|)
argument_list|)
condition|)
name|nameAndVersion
operator|.
name|setStatus
argument_list|(
name|BAD
argument_list|)
expr_stmt|;
else|else
name|nameAndVersion
operator|.
name|setStatus
argument_list|(
name|LOADED
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|plugins
operator|.
name|add
argument_list|(
name|nameAndVersion
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|url
range|:
name|urls
operator|.
name|keySet
argument_list|()
control|)
block|{
name|PluginDescriptor
name|desc
init|=
name|urls
operator|.
name|get
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|File
name|location
init|=
operator|new
name|File
argument_list|(
name|desc
operator|.
name|getLocation
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getPath
argument_list|()
operator|.
name|contains
argument_list|(
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// This must be a loaded user dir plugin that's been deleted.
comment|//System.out.println("File: "+desc.getLocation().getFile());
name|NameAndVersion
name|nameAndVersion
init|=
operator|new
name|NameAndVersion
argument_list|(
name|desc
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|VersionNumber
argument_list|(
name|desc
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PluginCore
operator|.
name|getManager
argument_list|()
operator|.
name|isPluginEnabled
argument_list|(
name|urls
operator|.
name|get
argument_list|(
name|url
argument_list|)
argument_list|)
condition|)
name|nameAndVersion
operator|.
name|setStatus
argument_list|(
name|BAD
argument_list|)
expr_stmt|;
else|else
name|nameAndVersion
operator|.
name|setStatus
argument_list|(
name|LOADED
argument_list|)
expr_stmt|;
name|plugins
operator|.
name|add
argument_list|(
name|nameAndVersion
argument_list|)
expr_stmt|;
block|}
return|return
name|plugins
return|;
block|}
DECL|class|NameAndVersion
specifier|public
specifier|static
class|class
name|NameAndVersion
implements|implements
name|Comparable
argument_list|<
name|NameAndVersion
argument_list|>
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|version
name|VersionNumber
name|version
decl_stmt|;
DECL|field|status
name|int
name|status
init|=
literal|0
decl_stmt|;
DECL|field|inUserDirectory
name|boolean
name|inUserDirectory
decl_stmt|;
DECL|field|file
name|File
name|file
decl_stmt|;
DECL|method|NameAndVersion (String name, VersionNumber version, boolean inUserDirectory, File file)
specifier|public
name|NameAndVersion
parameter_list|(
name|String
name|name
parameter_list|,
name|VersionNumber
name|version
parameter_list|,
name|boolean
name|inUserDirectory
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|inUserDirectory
operator|=
name|inUserDirectory
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
DECL|method|compareTo (NameAndVersion oth)
specifier|public
name|int
name|compareTo
parameter_list|(
name|NameAndVersion
name|oth
parameter_list|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|oth
operator|.
name|name
argument_list|)
condition|)
return|return
name|name
operator|.
name|compareTo
argument_list|(
name|oth
operator|.
name|name
argument_list|)
return|;
else|else
block|{
if|if
condition|(
name|version
operator|==
literal|null
condition|)
return|return
literal|1
return|;
elseif|else
if|if
condition|(
name|oth
operator|.
name|version
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
else|else
return|return
name|version
operator|.
name|compareTo
argument_list|(
name|oth
operator|.
name|version
argument_list|)
return|;
block|}
block|}
DECL|method|getStatus ()
specifier|public
name|int
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|setStatus (int status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
block|}
DECL|class|VersionNumber
specifier|static
class|class
name|VersionNumber
implements|implements
name|Comparable
argument_list|<
name|VersionNumber
argument_list|>
block|{
DECL|field|ZERO
specifier|public
specifier|static
specifier|final
name|VersionNumber
name|ZERO
init|=
operator|new
name|VersionNumber
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
DECL|field|digits
name|List
argument_list|<
name|Integer
argument_list|>
name|digits
decl_stmt|;
DECL|method|VersionNumber (String number)
specifier|public
name|VersionNumber
parameter_list|(
name|String
name|number
parameter_list|)
block|{
name|digits
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|String
index|[]
name|elms
init|=
name|number
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|elm
range|:
name|elms
control|)
block|{
try|try
block|{
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elm
argument_list|)
decl_stmt|;
name|digits
operator|.
name|add
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
comment|// Do nothing
block|}
block|}
block|}
DECL|method|compareTo (VersionNumber oth)
specifier|public
name|int
name|compareTo
parameter_list|(
name|VersionNumber
name|oth
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|digits
operator|.
name|size
argument_list|()
argument_list|,
name|oth
operator|.
name|digits
operator|.
name|size
argument_list|()
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|digits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|oth
operator|.
name|digits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
return|return
name|oth
operator|.
name|digits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|-
name|digits
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|// All digits equal so far, and only one of the numbers has more digits.
comment|// The one with digits remaining is the newest one:
return|return
name|oth
operator|.
name|digits
operator|.
name|size
argument_list|()
operator|-
name|digits
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|integerIterator
init|=
name|digits
operator|.
name|iterator
argument_list|()
init|;
name|integerIterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|integerIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|integerIterator
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|equals (VersionNumber o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|VersionNumber
name|o
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

