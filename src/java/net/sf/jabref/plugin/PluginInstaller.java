begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.plugin
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|net
operator|.
name|URLDownload
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PluginInstaller
specifier|public
class|class
name|PluginInstaller
block|{
DECL|method|checkInstalledVersion (String filename)
specifier|public
specifier|static
name|void
name|checkInstalledVersion
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|String
index|[]
name|nav
init|=
name|getNameAndVersion
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|VersionNumber
name|vn
init|=
operator|new
name|VersionNumber
argument_list|(
name|nav
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Name: '"
operator|+
name|nav
index|[
literal|0
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Version: '"
operator|+
name|nav
index|[
literal|1
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|VersionNumber
argument_list|>
name|versions
init|=
name|getInstalledVersions
argument_list|(
name|nav
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Installed versions:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|VersionNumber
argument_list|>
name|stringIterator
init|=
name|versions
operator|.
name|iterator
argument_list|()
init|;
name|stringIterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|stringIterator
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasSame
init|=
name|versions
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|vn
operator|.
name|compareTo
argument_list|(
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
literal|0
operator|)
decl_stmt|;
name|boolean
name|hasNewer
init|=
name|versions
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|vn
operator|.
name|compareTo
argument_list|(
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|>
literal|0
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Has same? "
operator|+
name|hasSame
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Has newer? "
operator|+
name|hasNewer
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy a plugin to the user plugin directory. Does not check whether the plugin      * already exists.      * @param source The local or remote location to copy the plugin from.      * @return true if the install was successful      */
DECL|method|installPlugin (JFrame frame, URL source, String destFileName)
specifier|public
specifier|static
name|boolean
name|installPlugin
parameter_list|(
name|JFrame
name|frame
parameter_list|,
name|URL
name|source
parameter_list|,
name|String
name|destFileName
parameter_list|)
block|{
if|if
condition|(
name|destFileName
operator|==
literal|null
condition|)
name|destFileName
operator|=
name|source
operator|.
name|getFile
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Destination name: '"
operator|+
name|destFileName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|PluginCore
operator|.
name|userPluginDir
argument_list|,
name|destFileName
argument_list|)
decl_stmt|;
name|URLDownload
name|ud
init|=
operator|new
name|URLDownload
argument_list|(
name|frame
argument_list|,
name|source
argument_list|,
name|destFile
argument_list|)
decl_stmt|;
try|try
block|{
name|ud
operator|.
name|download
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Based on a plugin name, find all versions that are already present      * in the user plugin directory.      * @param pluginName The name of the plugin.      * @return A list of versions already present.      */
DECL|method|getInstalledVersions (final String pluginName)
specifier|public
specifier|static
name|List
argument_list|<
name|VersionNumber
argument_list|>
name|getInstalledVersions
parameter_list|(
specifier|final
name|String
name|pluginName
parameter_list|)
block|{
name|String
index|[]
name|files
init|=
name|PluginCore
operator|.
name|userPluginDir
operator|.
name|list
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|":: "
operator|+
name|s
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|startsWith
argument_list|(
name|pluginName
argument_list|)
operator|&&
name|s
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|VersionNumber
argument_list|>
name|versions
init|=
operator|new
name|ArrayList
argument_list|<
name|VersionNumber
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
name|String
index|[]
name|nav
init|=
name|getNameAndVersion
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|nav
operator|!=
literal|null
condition|)
name|versions
operator|.
name|add
argument_list|(
operator|new
name|VersionNumber
argument_list|(
name|nav
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|versions
argument_list|)
expr_stmt|;
return|return
name|versions
return|;
block|}
DECL|field|pluginFilePattern
specifier|static
name|Pattern
name|pluginFilePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*)-([\\d\\.]+).jar"
argument_list|)
decl_stmt|;
comment|/**      * Try to split up a plugin file name in order to find the plugin name and      * the version number. The file name is expected to be on the format      * [plugin name]-[version number].jar      *      * @param filename The plugin file name.      * @return A string array containing the plugin name in the first element and      *   the version number in the second, or null if the filename couldn't be      *   interpreted.      *      */
DECL|method|getNameAndVersion (String filename)
specifier|public
specifier|static
name|String
index|[]
name|getNameAndVersion
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|pluginFilePattern
operator|.
name|matcher
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
block|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
block|}
return|;
block|}
else|else
return|return
literal|null
return|;
block|}
comment|/**      * Make a File pointing to a file with the correct name in the user      * plugin directory.      * @param name The plugin name.      * @param version The plugin version.      * @return the correct File.      */
DECL|method|buildFileName (String name, String version)
specifier|public
specifier|static
name|String
name|buildFileName
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|PluginCore
operator|.
name|userPluginDir
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-"
operator|+
name|version
operator|+
literal|".jar"
return|;
block|}
DECL|class|VersionNumber
specifier|static
class|class
name|VersionNumber
implements|implements
name|Comparable
block|{
DECL|field|digits
name|List
argument_list|<
name|Integer
argument_list|>
name|digits
decl_stmt|;
DECL|method|VersionNumber (String number)
specifier|public
name|VersionNumber
parameter_list|(
name|String
name|number
parameter_list|)
block|{
name|digits
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|String
index|[]
name|elms
init|=
name|number
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elms
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|digits
operator|.
name|add
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
comment|// Do nothing
block|}
block|}
block|}
DECL|method|compareTo (Object o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|VersionNumber
name|oth
init|=
operator|(
name|VersionNumber
operator|)
name|o
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|digits
operator|.
name|size
argument_list|()
argument_list|,
name|oth
operator|.
name|digits
operator|.
name|size
argument_list|()
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|digits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
name|oth
operator|.
name|digits
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
return|return
name|oth
operator|.
name|digits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|-
name|digits
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|// All digits equal so far, and only one of the numbers has more digits.
comment|// The one with digits remaining is the newest one:
return|return
name|oth
operator|.
name|digits
operator|.
name|size
argument_list|()
operator|-
name|digits
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|integerIterator
init|=
name|digits
operator|.
name|iterator
argument_list|()
init|;
name|integerIterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|integerIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|integerIterator
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

