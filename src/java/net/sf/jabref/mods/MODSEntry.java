begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.mods
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|mods
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author Michael Wrighton  *  * TODO To change the template for this generated type comment go to  * Window - Preferences - Java - Code Style - Code Templates  */
end_comment

begin_class
DECL|class|MODSEntry
specifier|public
class|class
name|MODSEntry
block|{
DECL|field|id
specifier|protected
name|String
name|id
decl_stmt|;
DECL|field|authors
specifier|protected
name|List
name|authors
init|=
literal|null
decl_stmt|;
DECL|field|editors
specifier|protected
name|List
name|editors
init|=
literal|null
decl_stmt|;
comment|// should really be handled with an enum
DECL|field|issuance
specifier|protected
name|String
name|issuance
init|=
literal|"monographic"
decl_stmt|;
DECL|field|publisher
specifier|protected
name|String
name|publisher
init|=
literal|null
decl_stmt|;
DECL|field|date
specifier|protected
name|String
name|date
init|=
literal|null
decl_stmt|;
DECL|field|place
specifier|protected
name|String
name|place
init|=
literal|null
decl_stmt|;
DECL|field|title
specifier|protected
name|String
name|title
init|=
literal|null
decl_stmt|;
comment|// should really be handled with an enum
DECL|field|type
specifier|protected
name|String
name|type
init|=
literal|"text"
decl_stmt|;
DECL|field|pages
specifier|protected
name|String
name|pages
decl_stmt|;
DECL|field|number
specifier|protected
name|String
name|number
decl_stmt|;
DECL|field|volume
specifier|protected
name|String
name|volume
decl_stmt|;
DECL|field|genre
specifier|protected
name|String
name|genre
init|=
literal|null
decl_stmt|;
DECL|field|handledExtensions
specifier|protected
name|Set
name|handledExtensions
decl_stmt|;
DECL|field|host
specifier|protected
name|MODSEntry
name|host
decl_stmt|;
DECL|field|extensionFields
name|Map
name|extensionFields
decl_stmt|;
DECL|field|BIBTEX
specifier|public
specifier|static
name|String
name|BIBTEX
init|=
literal|"bibtex_"
decl_stmt|;
DECL|method|MODSEntry ()
specifier|public
name|MODSEntry
parameter_list|()
block|{ 		 	}
DECL|method|MODSEntry (BibtexEntry bibtex)
specifier|public
name|MODSEntry
parameter_list|(
name|BibtexEntry
name|bibtex
parameter_list|)
block|{
name|extensionFields
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|handledExtensions
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|handledExtensions
operator|.
name|add
argument_list|(
name|BIBTEX
operator|+
literal|"publisher"
argument_list|)
expr_stmt|;
name|handledExtensions
operator|.
name|add
argument_list|(
name|BIBTEX
operator|+
literal|"title"
argument_list|)
expr_stmt|;
name|handledExtensions
operator|.
name|add
argument_list|(
name|BIBTEX
operator|+
literal|"bibtexkey"
argument_list|)
expr_stmt|;
name|handledExtensions
operator|.
name|add
argument_list|(
name|BIBTEX
operator|+
literal|"author"
argument_list|)
expr_stmt|;
name|populateFromBibtex
argument_list|(
name|bibtex
argument_list|)
expr_stmt|;
block|}
DECL|method|populateFromBibtex (BibtexEntry bibtex)
specifier|protected
name|void
name|populateFromBibtex
parameter_list|(
name|BibtexEntry
name|bibtex
parameter_list|)
block|{
name|LayoutFormatter
name|chars
init|=
operator|new
name|XMLChars
argument_list|()
decl_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|!=
literal|null
condition|)
name|title
operator|=
name|chars
operator|.
name|format
argument_list|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"publisher"
argument_list|)
operator|!=
literal|null
condition|)
name|publisher
operator|=
name|chars
operator|.
name|format
argument_list|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"publisher"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"bibtexkey"
argument_list|)
operator|!=
literal|null
condition|)
name|id
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"bibtexkey"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"place"
argument_list|)
operator|!=
literal|null
condition|)
name|place
operator|=
name|chars
operator|.
name|format
argument_list|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"place"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|date
operator|=
name|getDate
argument_list|(
name|bibtex
argument_list|)
expr_stmt|;
name|genre
operator|=
name|getMODSgenre
argument_list|(
name|bibtex
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|!=
literal|null
condition|)
name|authors
operator|=
name|getAuthors
argument_list|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getType
argument_list|()
operator|==
name|BibtexEntryType
operator|.
name|ARTICLE
condition|)
block|{
name|host
operator|=
operator|new
name|MODSEntry
argument_list|()
expr_stmt|;
name|host
operator|.
name|title
operator|=
operator|(
name|String
operator|)
name|bibtex
operator|.
name|getField
argument_list|(
literal|"booktitle"
argument_list|)
expr_stmt|;
name|host
operator|.
name|publisher
operator|=
operator|(
name|String
operator|)
name|bibtex
operator|.
name|getField
argument_list|(
literal|"publisher"
argument_list|)
expr_stmt|;
name|host
operator|.
name|pages
operator|=
operator|(
name|String
operator|)
name|bibtex
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
expr_stmt|;
name|host
operator|.
name|number
operator|=
operator|(
name|String
operator|)
name|bibtex
operator|.
name|getField
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|host
operator|.
name|volume
operator|=
operator|(
name|String
operator|)
name|bibtex
operator|.
name|getField
argument_list|(
literal|"volume"
argument_list|)
expr_stmt|;
name|host
operator|.
name|issuance
operator|=
literal|"continuing"
expr_stmt|;
block|}
name|populateExtensionFields
argument_list|(
name|bibtex
argument_list|)
expr_stmt|;
block|}
DECL|method|populateExtensionFields (BibtexEntry e)
specifier|protected
name|void
name|populateExtensionFields
parameter_list|(
name|BibtexEntry
name|e
parameter_list|)
block|{
name|Object
name|fields
index|[]
init|=
name|e
operator|.
name|getAllFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|field
init|=
operator|(
name|String
operator|)
name|fields
index|[
name|i
index|]
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|field
operator|=
name|BIBTEX
operator|+
name|field
expr_stmt|;
name|extensionFields
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAuthors (String authors)
specifier|protected
name|List
name|getAuthors
parameter_list|(
name|String
name|authors
parameter_list|)
block|{
name|List
name|result
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|LayoutFormatter
name|chars
init|=
operator|new
name|XMLChars
argument_list|()
decl_stmt|;
if|if
condition|(
name|authors
operator|.
name|indexOf
argument_list|(
literal|" and "
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|result
operator|.
name|add
argument_list|(
operator|new
name|PersonName
argument_list|(
name|chars
operator|.
name|format
argument_list|(
name|authors
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|String
index|[]
name|names
init|=
name|authors
operator|.
name|split
argument_list|(
literal|" and "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|result
operator|.
name|add
argument_list|(
operator|new
name|PersonName
argument_list|(
name|chars
operator|.
name|format
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/* construct a MODS date object */
DECL|method|getDate (BibtexEntry bibtex)
specifier|protected
name|String
name|getDate
parameter_list|(
name|BibtexEntry
name|bibtex
parameter_list|)
block|{
name|String
name|result
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
operator|!=
literal|null
condition|)
name|result
operator|+=
operator|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
operator|!=
literal|null
condition|)
name|result
operator|+=
literal|"-"
operator|+
name|bibtex
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// must be from http://www.loc.gov/marc/sourcecode/genre/genrelist.html
DECL|method|getMODSgenre (BibtexEntry bibtex)
specifier|protected
name|String
name|getMODSgenre
parameter_list|(
name|BibtexEntry
name|bibtex
parameter_list|)
block|{
name|String
name|bibtexType
init|=
name|bibtex
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|result
decl_stmt|;
if|if
condition|(
name|bibtexType
operator|.
name|equals
argument_list|(
literal|"Mastersthesis"
argument_list|)
condition|)
name|result
operator|=
literal|"theses"
expr_stmt|;
else|else
name|result
operator|=
literal|"conference publication"
expr_stmt|;
comment|// etc...
return|return
name|bibtexType
return|;
block|}
DECL|method|getDOMrepresentation ()
specifier|public
name|Document
name|getDOMrepresentation
parameter_list|()
block|{
name|Document
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DocumentBuilder
name|d
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
comment|//	result = getDOMrepresentation(d);
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getDOMrepresentation (Document d)
specifier|public
name|Node
name|getDOMrepresentation
parameter_list|(
name|Document
name|d
parameter_list|)
block|{
name|Node
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Element
name|mods
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"mods"
argument_list|)
decl_stmt|;
name|mods
operator|.
name|setAttribute
argument_list|(
literal|"version"
argument_list|,
literal|"3.0"
argument_list|)
expr_stmt|;
comment|// mods.setAttribute("xmlns:xlink:", "http://www.w3.org/1999/xlink");
name|mods
operator|.
name|setAttribute
argument_list|(
literal|"ID"
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// title
name|Element
name|titleInfo
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"titleInfo"
argument_list|)
decl_stmt|;
name|Element
name|mainTitle
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|mainTitle
operator|.
name|setNodeValue
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|titleInfo
operator|.
name|appendChild
argument_list|(
name|mainTitle
argument_list|)
expr_stmt|;
name|mods
operator|.
name|appendChild
argument_list|(
name|titleInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|authors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|authors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PersonName
name|name
init|=
operator|(
name|PersonName
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|modsName
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|modsName
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
literal|"personal"
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|getSurname
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Element
name|namePart
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"namePart"
argument_list|)
decl_stmt|;
name|namePart
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
literal|"family"
argument_list|)
expr_stmt|;
name|namePart
operator|.
name|setNodeValue
argument_list|(
name|name
operator|.
name|getSurname
argument_list|()
argument_list|)
expr_stmt|;
name|modsName
operator|.
name|appendChild
argument_list|(
name|namePart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|getGivenNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Element
name|namePart
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"namePart"
argument_list|)
decl_stmt|;
name|namePart
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
literal|"given"
argument_list|)
expr_stmt|;
name|namePart
operator|.
name|setNodeValue
argument_list|(
name|name
operator|.
name|getGivenNames
argument_list|()
argument_list|)
expr_stmt|;
name|modsName
operator|.
name|appendChild
argument_list|(
name|namePart
argument_list|)
expr_stmt|;
block|}
name|Element
name|role
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
name|Element
name|roleTerm
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"roleTerm"
argument_list|)
decl_stmt|;
name|roleTerm
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|roleTerm
operator|.
name|setNodeValue
argument_list|(
literal|"author"
argument_list|)
expr_stmt|;
name|role
operator|.
name|appendChild
argument_list|(
name|roleTerm
argument_list|)
expr_stmt|;
name|modsName
operator|.
name|appendChild
argument_list|(
name|role
argument_list|)
expr_stmt|;
name|mods
operator|.
name|appendChild
argument_list|(
name|modsName
argument_list|)
expr_stmt|;
block|}
block|}
comment|//publisher
name|Element
name|originInfo
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"originInfo"
argument_list|)
decl_stmt|;
name|mods
operator|.
name|appendChild
argument_list|(
name|originInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|publisher
operator|!=
literal|null
condition|)
block|{
name|Element
name|publisher
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"publisher"
argument_list|)
decl_stmt|;
name|publisher
operator|.
name|setNodeValue
argument_list|(
name|this
operator|.
name|publisher
argument_list|)
expr_stmt|;
name|originInfo
operator|.
name|appendChild
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|Element
name|dateIssued
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"dateIssued"
argument_list|)
decl_stmt|;
name|dateIssued
operator|.
name|setNodeValue
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|originInfo
operator|.
name|appendChild
argument_list|(
name|dateIssued
argument_list|)
expr_stmt|;
block|}
name|Element
name|issuance
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"issuance"
argument_list|)
decl_stmt|;
name|issuance
operator|.
name|setNodeValue
argument_list|(
name|this
operator|.
name|issuance
argument_list|)
expr_stmt|;
name|originInfo
operator|.
name|appendChild
argument_list|(
name|issuance
argument_list|)
expr_stmt|;
name|Element
name|idref
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"identifier"
argument_list|)
decl_stmt|;
name|idref
operator|.
name|setNodeValue
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|mods
operator|.
name|appendChild
argument_list|(
name|idref
argument_list|)
expr_stmt|;
name|Element
name|typeOfResource
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"typeOfResource"
argument_list|)
decl_stmt|;
name|typeOfResource
operator|.
name|setNodeValue
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|mods
operator|.
name|appendChild
argument_list|(
name|typeOfResource
argument_list|)
expr_stmt|;
if|if
condition|(
name|genre
operator|!=
literal|null
condition|)
block|{
name|Element
name|genreElement
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"genre"
argument_list|)
decl_stmt|;
name|genreElement
operator|.
name|setAttribute
argument_list|(
literal|"authority"
argument_list|,
literal|"marc"
argument_list|)
expr_stmt|;
name|genreElement
operator|.
name|setNodeValue
argument_list|(
name|genre
argument_list|)
expr_stmt|;
name|mods
operator|.
name|appendChild
argument_list|(
name|genreElement
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
comment|//Element relatedItem = (Element) host.getDOMrepresentation(d);
comment|// d.renameNode(relatedItem, "", "relatedItem");
comment|//relatedItem.setAttribute("type","host");
comment|//mods.appendChild(relatedItem);
block|}
comment|/* now generate extension fields for unhandled data */
for|for
control|(
name|Iterator
name|iter
init|=
name|extensionFields
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|extension
init|=
name|d
operator|.
name|createElement
argument_list|(
literal|"extension"
argument_list|)
decl_stmt|;
name|Map
operator|.
name|Entry
name|theEntry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|field
init|=
operator|(
name|String
operator|)
name|theEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|theEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|handledExtensions
operator|.
name|contains
argument_list|(
name|field
argument_list|)
condition|)
continue|continue;
name|Element
name|theData
init|=
name|d
operator|.
name|createElement
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|theData
operator|.
name|setNodeValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|extension
operator|.
name|appendChild
argument_list|(
name|theData
argument_list|)
expr_stmt|;
name|mods
operator|.
name|appendChild
argument_list|(
name|extension
argument_list|)
expr_stmt|;
block|}
return|return
name|mods
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Exception caught..."
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/* 	 * render as XML 	 */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringWriter
name|sresult
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|getDOMrepresentation
argument_list|()
argument_list|)
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|sresult
argument_list|)
decl_stmt|;
name|Transformer
name|trans
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|trans
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|trans
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|sresult
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

