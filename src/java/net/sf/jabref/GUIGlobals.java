begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Morten O. Alver  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  Note: Modified for use in JabRef.  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_class
DECL|class|GUIGlobals
specifier|public
class|class
name|GUIGlobals
block|{
comment|/*       * Static variables for graphics files and keyboard shortcuts.      */
comment|// for debugging
DECL|field|teller
specifier|static
name|int
name|teller
init|=
literal|0
decl_stmt|;
comment|// HashMap containing refs to all open BibtexDatabases.
DECL|field|frames
specifier|static
name|HashMap
name|frames
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Frame titles.
specifier|static
name|String
DECL|field|frameTitle
name|frameTitle
init|=
literal|"JabRef"
decl_stmt|,
DECL|field|stringsTitle
name|stringsTitle
init|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Strings for database"
argument_list|)
operator|+
literal|": "
decl_stmt|,
DECL|field|untitledStringsTitle
name|untitledStringsTitle
init|=
name|stringsTitle
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"untitled"
argument_list|)
decl_stmt|,
DECL|field|helpTitle
name|helpTitle
init|=
literal|"JabRef help"
decl_stmt|;
comment|// Signature written at the top of the .bib file.
DECL|field|SIGNATURE
specifier|public
specifier|static
specifier|final
name|String
name|SIGNATURE
init|=
literal|"This file was created with JabRef.\n\n"
decl_stmt|,
DECL|field|SHOW_ALL
name|SHOW_ALL
init|=
literal|"All entries"
decl_stmt|;
comment|// Size of help window.
specifier|static
name|Dimension
DECL|field|helpSize
name|helpSize
init|=
operator|new
name|Dimension
argument_list|(
literal|700
argument_list|,
literal|600
argument_list|)
decl_stmt|,
DECL|field|aboutSize
name|aboutSize
init|=
operator|new
name|Dimension
argument_list|(
literal|600
argument_list|,
literal|265
argument_list|)
decl_stmt|,
DECL|field|searchPaneSize
name|searchPaneSize
init|=
operator|new
name|Dimension
argument_list|(
literal|430
argument_list|,
literal|70
argument_list|)
decl_stmt|,
DECL|field|searchFieldSize
name|searchFieldSize
init|=
operator|new
name|Dimension
argument_list|(
literal|215
argument_list|,
literal|25
argument_list|)
decl_stmt|;
comment|// Divider size for BaseFrame split pane. 0 means non-resizable.
specifier|public
specifier|static
specifier|final
name|int
DECL|field|SPLIT_PANE_DIVIDER_SIZE
name|SPLIT_PANE_DIVIDER_SIZE
init|=
literal|2
decl_stmt|,
DECL|field|SPLIT_PANE_DIVIDER_LOCATION
name|SPLIT_PANE_DIVIDER_LOCATION
init|=
literal|80
decl_stmt|,
DECL|field|GROUPS_VISIBLE_ROWS
name|GROUPS_VISIBLE_ROWS
init|=
literal|8
decl_stmt|;
comment|// File names.
specifier|public
specifier|static
name|String
comment|//configFile = "preferences.dat",
DECL|field|backupExt
name|backupExt
init|=
literal|".bak"
decl_stmt|,
DECL|field|tempExt
name|tempExt
init|=
literal|".tmp"
decl_stmt|,
DECL|field|defaultDir
name|defaultDir
init|=
literal|"."
decl_stmt|;
comment|// Image paths.
specifier|public
specifier|static
name|String
DECL|field|imageSize
name|imageSize
init|=
literal|"24"
decl_stmt|,
DECL|field|extension
name|extension
init|=
literal|".gif"
decl_stmt|,
DECL|field|ex
name|ex
init|=
name|imageSize
operator|+
name|extension
decl_stmt|,
DECL|field|pre
name|pre
init|=
literal|"/images/"
decl_stmt|,
DECL|field|helpPre
name|helpPre
init|=
literal|"/help/"
decl_stmt|;
specifier|public
specifier|static
name|URL
comment|//appIconFile = GUIGlobals.class.getResource(pre+"ikon.jpg"),
DECL|field|openIconFile
name|openIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Open.gif"
argument_list|)
decl_stmt|,
DECL|field|saveIconFile
name|saveIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Save.gif"
argument_list|)
decl_stmt|,
DECL|field|saveAsIconFile
name|saveAsIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"SaveAs.gif"
argument_list|)
decl_stmt|,
DECL|field|prefsIconFile
name|prefsIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Options.gif"
argument_list|)
decl_stmt|,
DECL|field|newIconFile
name|newIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"New.gif"
argument_list|)
decl_stmt|,
DECL|field|undoIconFile
name|undoIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Undo.gif"
argument_list|)
decl_stmt|,
DECL|field|redoIconFile
name|redoIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Redo.gif"
argument_list|)
decl_stmt|,
DECL|field|preambleIconFile
name|preambleIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Preamble.gif"
argument_list|)
decl_stmt|,
DECL|field|addIconFile
name|addIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"UpdateRow.gif"
argument_list|)
decl_stmt|,
DECL|field|showReqIconFile
name|showReqIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"r_icon.gif"
argument_list|)
decl_stmt|,
DECL|field|showOptIconFile
name|showOptIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"o_icon.gif"
argument_list|)
decl_stmt|,
DECL|field|showGenIconFile
name|showGenIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"g_icon.gif"
argument_list|)
decl_stmt|,
DECL|field|sourceIconFile
name|sourceIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"viewsource.gif"
argument_list|)
decl_stmt|,
DECL|field|copyIconFile
name|copyIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Copy.gif"
argument_list|)
decl_stmt|,
DECL|field|copyKeyIconFile
name|copyKeyIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"CopyKey.gif"
argument_list|)
decl_stmt|,
DECL|field|genKeyIconFile
name|genKeyIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"GenKey.gif"
argument_list|)
decl_stmt|,
DECL|field|backIconFile
name|backIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"VCRBack.gif"
argument_list|)
decl_stmt|,
DECL|field|forwardIconFile
name|forwardIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"VCRForward.gif"
argument_list|)
decl_stmt|,
DECL|field|contentsIconFile
name|contentsIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Contents.gif"
argument_list|)
decl_stmt|,
DECL|field|removeIconFile
name|removeIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Delete.gif"
argument_list|)
decl_stmt|,
DECL|field|upIconFile
name|upIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Up.gif"
argument_list|)
decl_stmt|,
DECL|field|downIconFile
name|downIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Down.gif"
argument_list|)
decl_stmt|,
DECL|field|stringsIconFile
name|stringsIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Strings.gif"
argument_list|)
decl_stmt|,
DECL|field|groupsIconFile
name|groupsIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Groups.gif"
argument_list|)
decl_stmt|,
DECL|field|closeIconFile
name|closeIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Close.gif"
argument_list|)
decl_stmt|,
DECL|field|refreshSmallIconFile
name|refreshSmallIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"GreenFlag.gif"
argument_list|)
decl_stmt|,
DECL|field|helpSmallIconFile
name|helpSmallIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"HelpSmall.gif"
argument_list|)
decl_stmt|,
DECL|field|helpIconFile
name|helpIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Help.gif"
argument_list|)
decl_stmt|,
DECL|field|newSmallIconFile
name|newSmallIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"NewSmall.gif"
argument_list|)
decl_stmt|,
DECL|field|pasteIconFile
name|pasteIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"Paste.gif"
argument_list|)
decl_stmt|,
DECL|field|editEntryIconFile
name|editEntryIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"DocumentDraw.gif"
argument_list|)
decl_stmt|,
DECL|field|searchIconFile
name|searchIconFile
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|pre
operator|+
literal|"SearchRow.gif"
argument_list|)
decl_stmt|;
comment|// Help files (in HTML format):
specifier|public
specifier|static
name|URL
DECL|field|baseFrameHelp
name|baseFrameHelp
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|helpPre
operator|+
literal|"GUIGlobalsHelp.html"
argument_list|)
decl_stmt|,
DECL|field|entryEditorHelp
name|entryEditorHelp
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|helpPre
operator|+
literal|"EntryEditorHelp.html"
argument_list|)
decl_stmt|,
DECL|field|stringEditorHelp
name|stringEditorHelp
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|helpPre
operator|+
literal|"StringEditorHelp.html"
argument_list|)
decl_stmt|,
DECL|field|helpContents
name|helpContents
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|helpPre
operator|+
literal|"Contents.html"
argument_list|)
decl_stmt|,
DECL|field|searchHelp
name|searchHelp
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|helpPre
operator|+
literal|"SearchHelp.html"
argument_list|)
decl_stmt|,
DECL|field|groupsHelp
name|groupsHelp
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|helpPre
operator|+
literal|"GroupsHelp.html"
argument_list|)
decl_stmt|,
DECL|field|aboutPage
name|aboutPage
init|=
name|GUIGlobals
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|helpPre
operator|+
literal|"About.html"
argument_list|)
decl_stmt|;
comment|// Keystrokes for Entry editor.
specifier|public
specifier|static
name|String
DECL|field|openKey
name|openKey
init|=
literal|"control O"
decl_stmt|,
DECL|field|closeKey
name|closeKey
init|=
literal|"control Q"
decl_stmt|,
DECL|field|storeFieldKey
name|storeFieldKey
init|=
literal|"control S"
decl_stmt|,
DECL|field|copyKeyKey
name|copyKeyKey
init|=
literal|"control K"
decl_stmt|,
DECL|field|showReqKey
name|showReqKey
init|=
literal|"control R"
decl_stmt|,
DECL|field|showOptKey
name|showOptKey
init|=
literal|"control O"
decl_stmt|,
DECL|field|showGenKey
name|showGenKey
init|=
literal|"control G"
decl_stmt|,
DECL|field|addKey
name|addKey
init|=
literal|"control N"
decl_stmt|,
DECL|field|removeKey
name|removeKey
init|=
literal|"shift DELETE"
decl_stmt|,
DECL|field|upKey
name|upKey
init|=
literal|"control UP"
decl_stmt|,
DECL|field|downKey
name|downKey
init|=
literal|"control DOWN"
decl_stmt|;
comment|// The following defines the mnemonic keys for menu items.
specifier|public
specifier|static
name|Integer
DECL|field|openKeyCode
name|openKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_O
argument_list|)
decl_stmt|,
comment|//	newKeyCode = new Integer(KeyEvent.VK_N),
DECL|field|saveKeyCode
name|saveKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_S
argument_list|)
decl_stmt|,
DECL|field|copyKeyCode
name|copyKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_K
argument_list|)
decl_stmt|,
DECL|field|closeKeyCode
name|closeKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_Q
argument_list|)
decl_stmt|,
DECL|field|showReqKeyCode
name|showReqKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_R
argument_list|)
decl_stmt|,
DECL|field|showOptKeyCode
name|showOptKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_O
argument_list|)
decl_stmt|,
DECL|field|showGenKeyCode
name|showGenKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_G
argument_list|)
decl_stmt|,
DECL|field|newEntryKeyCode
name|newEntryKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_N
argument_list|)
decl_stmt|,
DECL|field|newBookKeyCode
name|newBookKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_B
argument_list|)
decl_stmt|,
DECL|field|newArticleKeyCode
name|newArticleKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_A
argument_list|)
decl_stmt|,
DECL|field|newPhdthesisKeyCode
name|newPhdthesisKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_T
argument_list|)
decl_stmt|,
DECL|field|newInBookKeyCode
name|newInBookKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_I
argument_list|)
decl_stmt|,
DECL|field|newMasterKeyCode
name|newMasterKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_M
argument_list|)
decl_stmt|,
DECL|field|newProcKeyCode
name|newProcKeyCode
init|=
operator|new
name|Integer
argument_list|(
name|KeyEvent
operator|.
name|VK_P
argument_list|)
decl_stmt|;
comment|//    	newInProcKeyCode = new Integer(KeyEvent.VK_M);
comment|// The following defines the accelerator keys for menu items,
comment|// corresponding to the letters for mnemonics.
specifier|public
specifier|static
name|KeyStroke
DECL|field|copyKeyStroke
name|copyKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|copyKeyCode
operator|.
name|intValue
argument_list|()
argument_list|,
name|ActionEvent
operator|.
name|CTRL_MASK
argument_list|)
decl_stmt|,
DECL|field|generateKeyStroke
name|generateKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control G"
argument_list|)
decl_stmt|,
DECL|field|exitDialog
name|exitDialog
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"ESCAPE"
argument_list|)
decl_stmt|,
DECL|field|copyStroke
name|copyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control C"
argument_list|)
decl_stmt|,
DECL|field|pasteStroke
name|pasteStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control V"
argument_list|)
decl_stmt|,
DECL|field|undoStroke
name|undoStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control Z"
argument_list|)
decl_stmt|,
DECL|field|redoStroke
name|redoStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control Y"
argument_list|)
decl_stmt|,
DECL|field|selectAllKeyStroke
name|selectAllKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control A"
argument_list|)
decl_stmt|,
DECL|field|editEntryKeyStroke
name|editEntryKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control D"
argument_list|)
decl_stmt|,
DECL|field|helpKeyStroke
name|helpKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"F1"
argument_list|)
decl_stmt|,
comment|//setupTableKeyStroke = KeyStroke.getKeyStroke(""),
DECL|field|editPreambleKeyStroke
name|editPreambleKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control P"
argument_list|)
decl_stmt|,
DECL|field|editStringsKeyStroke
name|editStringsKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control shift S"
argument_list|)
decl_stmt|,
DECL|field|simpleSearchKeyStroke
name|simpleSearchKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control F"
argument_list|)
decl_stmt|,
DECL|field|autoCompKeyStroke
name|autoCompKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control W"
argument_list|)
decl_stmt|,
DECL|field|showGroupsKeyStroke
name|showGroupsKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control shift G"
argument_list|)
decl_stmt|,
comment|//newKeyStroke = KeyStroke.getKeyStroke(newKeyCode.intValue(), ActionEvent.CTRL_MASK),
DECL|field|saveKeyStroke
name|saveKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|saveKeyCode
operator|.
name|intValue
argument_list|()
argument_list|,
name|ActionEvent
operator|.
name|CTRL_MASK
argument_list|)
decl_stmt|,
DECL|field|openKeyStroke
name|openKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|openKeyCode
operator|.
name|intValue
argument_list|()
argument_list|,
name|ActionEvent
operator|.
name|CTRL_MASK
argument_list|)
decl_stmt|,
DECL|field|closeKeyStroke
name|closeKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|closeKeyCode
operator|.
name|intValue
argument_list|()
argument_list|,
name|ActionEvent
operator|.
name|CTRL_MASK
argument_list|)
decl_stmt|,
DECL|field|newEntryKeyStroke
name|newEntryKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|newEntryKeyCode
operator|.
name|intValue
argument_list|()
argument_list|,
name|ActionEvent
operator|.
name|CTRL_MASK
argument_list|)
decl_stmt|,
DECL|field|removeEntryKeyStroke
name|removeEntryKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_DELETE
argument_list|,
name|ActionEvent
operator|.
name|SHIFT_MASK
argument_list|)
decl_stmt|,
DECL|field|newBookKeyStroke
name|newBookKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|newBookKeyCode
operator|.
name|intValue
argument_list|()
argument_list|,
name|ActionEvent
operator|.
name|SHIFT_MASK
operator||
name|ActionEvent
operator|.
name|CTRL_MASK
argument_list|)
decl_stmt|,
DECL|field|newArticleKeyStroke
name|newArticleKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|newArticleKeyCode
operator|.
name|intValue
argument_list|()
argument_list|,
name|ActionEvent
operator|.
name|SHIFT_MASK
operator||
name|ActionEvent
operator|.
name|CTRL_MASK
argument_list|)
decl_stmt|,
DECL|field|newPhdthesisKeyStroke
name|newPhdthesisKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|newPhdthesisKeyCode
operator|.
name|intValue
argument_list|()
argument_list|,
name|ActionEvent
operator|.
name|SHIFT_MASK
operator||
name|ActionEvent
operator|.
name|CTRL_MASK
argument_list|)
decl_stmt|,
DECL|field|newInBookKeyStroke
name|newInBookKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|newInBookKeyCode
operator|.
name|intValue
argument_list|()
argument_list|,
name|ActionEvent
operator|.
name|SHIFT_MASK
operator||
name|ActionEvent
operator|.
name|CTRL_MASK
argument_list|)
decl_stmt|,
DECL|field|newMasterKeyStroke
name|newMasterKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|newMasterKeyCode
operator|.
name|intValue
argument_list|()
argument_list|,
name|ActionEvent
operator|.
name|SHIFT_MASK
operator||
name|ActionEvent
operator|.
name|CTRL_MASK
argument_list|)
decl_stmt|,
DECL|field|newProcKeyStroke
name|newProcKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|newProcKeyCode
operator|.
name|intValue
argument_list|()
argument_list|,
name|ActionEvent
operator|.
name|SHIFT_MASK
operator||
name|ActionEvent
operator|.
name|CTRL_MASK
argument_list|)
decl_stmt|,
DECL|field|newUnpublKeyStroke
name|newUnpublKeyStroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control shift U"
argument_list|)
decl_stmt|,
DECL|field|switchPanelLeft
name|switchPanelLeft
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control shift LEFT"
argument_list|)
decl_stmt|,
DECL|field|switchPanelRight
name|switchPanelRight
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"control shift RIGHT"
argument_list|)
decl_stmt|;
comment|// Colors.
specifier|public
specifier|static
name|Color
DECL|field|nullFieldColor
name|nullFieldColor
init|=
operator|new
name|Color
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|,
comment|// Empty field, blue.
DECL|field|validFieldColor
name|validFieldColor
init|=
operator|new
name|Color
argument_list|(
literal|75
argument_list|,
literal|130
argument_list|,
literal|75
argument_list|)
decl_stmt|,
comment|// Valid field, green.
DECL|field|invalidFieldColor
name|invalidFieldColor
init|=
operator|new
name|Color
argument_list|(
literal|141
argument_list|,
literal|0
argument_list|,
literal|61
argument_list|)
decl_stmt|,
comment|// Invalid field, red.
comment|//	invalidFieldColor = new Color(210, 70, 70), // Invalid field, red.
DECL|field|validFieldBackground
name|validFieldBackground
init|=
name|Color
operator|.
name|white
decl_stmt|,
comment|// Valid field backgnd.
comment|//invalidFieldBackground = new Color(210, 70, 70), // Invalid field backgnd.
DECL|field|invalidFieldBackground
name|invalidFieldBackground
init|=
operator|new
name|Color
argument_list|(
literal|141
argument_list|,
literal|0
argument_list|,
literal|61
argument_list|)
decl_stmt|,
comment|// Invalid field backgnd.
DECL|field|tableBackground
name|tableBackground
init|=
name|Color
operator|.
name|white
decl_stmt|,
comment|// Background color for the entry table.
DECL|field|tableReqFieldBackground
name|tableReqFieldBackground
init|=
operator|new
name|Color
argument_list|(
literal|235
argument_list|,
literal|235
argument_list|,
literal|255
argument_list|)
decl_stmt|,
DECL|field|tableOptFieldBackground
name|tableOptFieldBackground
init|=
operator|new
name|Color
argument_list|(
literal|230
argument_list|,
literal|255
argument_list|,
literal|230
argument_list|)
decl_stmt|,
DECL|field|tableIncompleteEntryBackground
name|tableIncompleteEntryBackground
init|=
operator|new
name|Color
argument_list|(
literal|250
argument_list|,
literal|175
argument_list|,
literal|175
argument_list|)
decl_stmt|,
DECL|field|maybeIncompleteEntryBackground
name|maybeIncompleteEntryBackground
init|=
operator|new
name|Color
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|200
argument_list|)
decl_stmt|,
DECL|field|grayedOutBackground
name|grayedOutBackground
init|=
operator|new
name|Color
argument_list|(
literal|210
argument_list|,
literal|210
argument_list|,
literal|210
argument_list|)
decl_stmt|,
DECL|field|grayedOutText
name|grayedOutText
init|=
operator|new
name|Color
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|)
decl_stmt|,
DECL|field|veryGrayedOutBackground
name|veryGrayedOutBackground
init|=
operator|new
name|Color
argument_list|(
literal|180
argument_list|,
literal|180
argument_list|,
literal|180
argument_list|)
decl_stmt|,
DECL|field|veryGrayedOutText
name|veryGrayedOutText
init|=
operator|new
name|Color
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|)
decl_stmt|;
DECL|field|META_FLAG
specifier|public
specifier|static
name|String
name|META_FLAG
init|=
literal|"bibkeeper-meta: "
decl_stmt|;
DECL|field|KEY_FIELD
specifier|public
specifier|static
name|String
name|KEY_FIELD
init|=
literal|"bibtexkey"
decl_stmt|;
DECL|field|ALL_FIELDS
specifier|public
specifier|static
name|String
index|[]
name|ALL_FIELDS
init|=
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"editor"
block|,
literal|"title"
block|,
literal|"year"
block|,
literal|"pages"
block|,
literal|"month"
block|,
literal|"note"
block|,
literal|"publisher"
block|,
literal|"journal"
block|,
literal|"volume"
block|,
literal|"edition"
block|,
literal|"number"
block|,
literal|"chapter"
block|,
literal|"series"
block|,
literal|"type"
block|,
literal|"address"
block|,
literal|"annote"
block|,
literal|"booktitle"
block|,
literal|"crossref"
block|,
literal|"howpublished"
block|,
literal|"institution"
block|,
literal|"key"
block|,
literal|"organization"
block|,
literal|"school"
block|,
literal|"abstract"
block|,
literal|"url"
block|,
literal|"comment"
block|,
literal|"bibtexkey"
block|,
literal|"keywords"
block|,
literal|"search"
block|}
decl_stmt|;
DECL|field|NON_WRITABLE_FIELDS
specifier|public
specifier|static
name|String
index|[]
name|NON_WRITABLE_FIELDS
init|=
operator|new
name|String
index|[]
block|{
literal|"search"
block|}
decl_stmt|;
DECL|method|isWriteableField (String field)
specifier|public
specifier|static
name|boolean
name|isWriteableField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NON_WRITABLE_FIELDS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|NON_WRITABLE_FIELDS
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|field|DEFAULT_FIELD_WEIGHT
specifier|public
specifier|static
name|double
name|DEFAULT_FIELD_WEIGHT
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
name|Double
DECL|field|SMALL_W
name|SMALL_W
init|=
operator|new
name|Double
argument_list|(
literal|0.30
argument_list|)
decl_stmt|,
DECL|field|MEDIUM_W
name|MEDIUM_W
init|=
operator|new
name|Double
argument_list|(
literal|0.5
argument_list|)
decl_stmt|,
DECL|field|LARGE_W
name|LARGE_W
init|=
operator|new
name|Double
argument_list|(
literal|1.5
argument_list|)
decl_stmt|;
DECL|field|PE_HEIGHT
specifier|public
specifier|static
specifier|final
name|double
name|PE_HEIGHT
init|=
literal|2
decl_stmt|;
comment|// Size constants for EntryTypeForm; small, medium and large.
DECL|field|FORM_WIDTH
specifier|public
specifier|static
name|int
index|[]
name|FORM_WIDTH
init|=
operator|new
name|int
index|[]
block|{
literal|500
block|,
literal|650
block|,
literal|820
block|}
decl_stmt|;
DECL|field|FORM_HEIGHT
specifier|public
specifier|static
name|int
index|[]
name|FORM_HEIGHT
init|=
operator|new
name|int
index|[]
block|{
literal|90
block|,
literal|110
block|,
literal|130
block|}
decl_stmt|;
comment|// Constants controlling formatted bibtex output.
specifier|public
specifier|static
specifier|final
name|int
DECL|field|INDENT
name|INDENT
init|=
literal|4
decl_stmt|,
DECL|field|LINE_LENGTH
name|LINE_LENGTH
init|=
literal|65
decl_stmt|;
comment|// Maximum
DECL|field|DEFAULT_FIELD_LENGTH
specifier|public
specifier|static
name|int
name|DEFAULT_FIELD_LENGTH
init|=
literal|100
decl_stmt|;
DECL|field|FIELD_LENGTH
DECL|field|FIELD_WEIGHT
specifier|public
specifier|static
specifier|final
name|Map
name|FIELD_LENGTH
decl_stmt|,
name|FIELD_WEIGHT
decl_stmt|;
static|static
block|{
name|Map
name|fieldLength
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|fieldLength
operator|.
name|put
argument_list|(
literal|"author"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|280
argument_list|)
argument_list|)
expr_stmt|;
name|fieldLength
operator|.
name|put
argument_list|(
literal|"editor"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|280
argument_list|)
argument_list|)
expr_stmt|;
name|fieldLength
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|fieldLength
operator|.
name|put
argument_list|(
literal|"abstract"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|fieldLength
operator|.
name|put
argument_list|(
literal|"booktitle"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|175
argument_list|)
argument_list|)
expr_stmt|;
name|fieldLength
operator|.
name|put
argument_list|(
literal|"year"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|fieldLength
operator|.
name|put
argument_list|(
literal|"volume"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|fieldLength
operator|.
name|put
argument_list|(
literal|"number"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|fieldLength
operator|.
name|put
argument_list|(
literal|"entrytype"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|75
argument_list|)
argument_list|)
expr_stmt|;
name|fieldLength
operator|.
name|put
argument_list|(
literal|"search"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|75
argument_list|)
argument_list|)
expr_stmt|;
name|FIELD_LENGTH
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|fieldLength
argument_list|)
expr_stmt|;
name|Map
name|fieldWeight
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"author"
argument_list|,
name|MEDIUM_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"year"
argument_list|,
name|SMALL_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"pages"
argument_list|,
name|SMALL_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"month"
argument_list|,
name|SMALL_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
name|SMALL_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"crossref"
argument_list|,
name|SMALL_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"note"
argument_list|,
name|MEDIUM_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"publisher"
argument_list|,
name|MEDIUM_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"journal"
argument_list|,
name|SMALL_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"volume"
argument_list|,
name|SMALL_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"edition"
argument_list|,
name|SMALL_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"number"
argument_list|,
name|SMALL_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"chapter"
argument_list|,
name|SMALL_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"editor"
argument_list|,
name|MEDIUM_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"series"
argument_list|,
name|MEDIUM_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|MEDIUM_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"howpublished"
argument_list|,
name|MEDIUM_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"institution"
argument_list|,
name|MEDIUM_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"organization"
argument_list|,
name|MEDIUM_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"school"
argument_list|,
name|MEDIUM_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"comment"
argument_list|,
name|MEDIUM_W
argument_list|)
expr_stmt|;
name|fieldWeight
operator|.
name|put
argument_list|(
literal|"abstract"
argument_list|,
name|LARGE_W
argument_list|)
expr_stmt|;
name|FIELD_WEIGHT
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|fieldWeight
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|method|getPreferredFieldLength (String name)
specifier|public
specifier|static
name|int
name|getPreferredFieldLength
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|l
init|=
name|DEFAULT_FIELD_LENGTH
decl_stmt|;
name|Object
name|o
init|=
name|FIELD_LENGTH
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
name|l
operator|=
operator|(
operator|(
name|Integer
operator|)
name|o
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
return|return
name|l
return|;
block|}
DECL|method|getFieldWeight (String name)
specifier|public
specifier|static
name|double
name|getFieldWeight
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|double
name|l
init|=
name|DEFAULT_FIELD_WEIGHT
decl_stmt|;
name|Object
name|o
init|=
name|FIELD_WEIGHT
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
name|l
operator|=
operator|(
operator|(
name|Double
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
return|return
name|l
return|;
block|}
block|}
end_class

end_unit

