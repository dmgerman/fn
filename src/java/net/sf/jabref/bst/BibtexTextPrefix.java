begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_comment
comment|// $Id$
end_comment

begin_package
DECL|package|net.sf.jabref.bst
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bst
package|;
end_package

begin_comment
comment|/**  * The |built_in| function {\.{text.prefix\$}} pops the top two literals (the  * integer literal |pop_lit1| and a string literal, in that order). It pushes  * the substring of the (at most) |pop_lit1| consecutive text characters  * starting from the beginning of the string. This function is similar to  * {\.{substring\$}}, but this one considers an accented character (or more  * precisely, a ``special character''$\!$, even if it's missing its matching  * |right_brace|) to be a single text character (rather than however many  * |ASCII_code| characters it actually comprises), and this function doesn't  * consider braces to be text characters; furthermore, this function appends any  * needed matching |right_brace|s. If any of the types is incorrect, it  * complains and pushes the null string.  *   * @author $Author$  * @version $Revision$ ($Date$)  *   */
end_comment

begin_class
DECL|class|BibtexTextPrefix
specifier|public
class|class
name|BibtexTextPrefix
block|{
comment|/** 	 *  	 * @param numOfChars 	 * @param toPrefix 	 * @param warn may-be-null 	 * @return 	 */
DECL|method|textPrefix (int numOfChars, String toPrefix, Warn warn)
specifier|public
specifier|static
name|String
name|textPrefix
parameter_list|(
name|int
name|numOfChars
parameter_list|,
name|String
name|toPrefix
parameter_list|,
name|Warn
name|warn
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|char
index|[]
name|cs
init|=
name|toPrefix
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|cs
operator|.
name|length
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|braceLevel
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
argument_list|<
name|n
operator|&&
name|numOfChars
argument_list|>
literal|0
condition|)
block|{
name|char
name|c
init|=
name|cs
index|[
name|i
index|]
decl_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'{'
condition|)
block|{
name|braceLevel
operator|++
expr_stmt|;
if|if
condition|(
name|braceLevel
operator|==
literal|1
operator|&&
name|i
operator|<
name|n
operator|&&
operator|(
name|cs
index|[
name|i
index|]
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
comment|// skip backslash
while|while
condition|(
name|i
argument_list|<
name|n
operator|&&
name|braceLevel
argument_list|>
literal|0
condition|)
block|{
if|if
condition|(
name|cs
index|[
name|i
index|]
operator|==
literal|'}'
condition|)
block|{
name|braceLevel
operator|--
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cs
index|[
name|i
index|]
operator|==
literal|'{'
condition|)
block|{
name|braceLevel
operator|++
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|numOfChars
operator|--
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'}'
condition|)
block|{
if|if
condition|(
name|braceLevel
operator|>
literal|0
condition|)
block|{
name|braceLevel
operator|--
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|warn
operator|!=
literal|null
condition|)
name|warn
operator|.
name|warn
argument_list|(
literal|"Unbalanced brace in string for purify$: "
operator|+
name|toPrefix
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|numOfChars
operator|--
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|braceLevel
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|braceLevel
operator|--
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

