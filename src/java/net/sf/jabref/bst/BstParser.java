begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.bst
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bst
package|;
end_package

begin_comment
comment|// $ANTLR 3.0b5 Bst.g 2006-11-23 23:20:24
end_comment

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|*
import|;
end_import

begin_class
DECL|class|BstParser
specifier|public
class|class
name|BstParser
extends|extends
name|Parser
block|{
DECL|field|tokenNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|tokenNames
init|=
operator|new
name|String
index|[]
block|{
literal|"<invalid>"
block|,
literal|"<EOR>"
block|,
literal|"<DOWN>"
block|,
literal|"<UP>"
block|,
literal|"IDLIST"
block|,
literal|"STACK"
block|,
literal|"ENTRY"
block|,
literal|"COMMANDS"
block|,
literal|"STRINGS"
block|,
literal|"INTEGERS"
block|,
literal|"FUNCTION"
block|,
literal|"MACRO"
block|,
literal|"STRING"
block|,
literal|"READ"
block|,
literal|"EXECUTE"
block|,
literal|"ITERATE"
block|,
literal|"REVERSE"
block|,
literal|"SORT"
block|,
literal|"IDENTIFIER"
block|,
literal|"INTEGER"
block|,
literal|"QUOTED"
block|,
literal|"LETTER"
block|,
literal|"NUMERAL"
block|,
literal|"WS"
block|,
literal|"LINE_COMMENT"
block|,
literal|"'{'"
block|,
literal|"'}'"
block|,
literal|"'<'"
block|,
literal|"'>'"
block|,
literal|"'='"
block|,
literal|"'+'"
block|,
literal|"'-'"
block|,
literal|"':='"
block|,
literal|"'*'"
block|}
decl_stmt|;
DECL|field|LETTER
specifier|public
specifier|static
specifier|final
name|int
name|LETTER
init|=
literal|21
decl_stmt|;
DECL|field|ENTRY
specifier|public
specifier|static
specifier|final
name|int
name|ENTRY
init|=
literal|6
decl_stmt|;
DECL|field|INTEGERS
specifier|public
specifier|static
specifier|final
name|int
name|INTEGERS
init|=
literal|9
decl_stmt|;
DECL|field|WS
specifier|public
specifier|static
specifier|final
name|int
name|WS
init|=
literal|23
decl_stmt|;
DECL|field|COMMANDS
specifier|public
specifier|static
specifier|final
name|int
name|COMMANDS
init|=
literal|7
decl_stmt|;
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|12
decl_stmt|;
DECL|field|EXECUTE
specifier|public
specifier|static
specifier|final
name|int
name|EXECUTE
init|=
literal|14
decl_stmt|;
DECL|field|LINE_COMMENT
specifier|public
specifier|static
specifier|final
name|int
name|LINE_COMMENT
init|=
literal|24
decl_stmt|;
DECL|field|SORT
specifier|public
specifier|static
specifier|final
name|int
name|SORT
init|=
literal|17
decl_stmt|;
DECL|field|STACK
specifier|public
specifier|static
specifier|final
name|int
name|STACK
init|=
literal|5
decl_stmt|;
DECL|field|REVERSE
specifier|public
specifier|static
specifier|final
name|int
name|REVERSE
init|=
literal|16
decl_stmt|;
DECL|field|QUOTED
specifier|public
specifier|static
specifier|final
name|int
name|QUOTED
init|=
literal|20
decl_stmt|;
DECL|field|INTEGER
specifier|public
specifier|static
specifier|final
name|int
name|INTEGER
init|=
literal|19
decl_stmt|;
DECL|field|ITERATE
specifier|public
specifier|static
specifier|final
name|int
name|ITERATE
init|=
literal|15
decl_stmt|;
DECL|field|FUNCTION
specifier|public
specifier|static
specifier|final
name|int
name|FUNCTION
init|=
literal|10
decl_stmt|;
DECL|field|EOF
specifier|public
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|STRINGS
specifier|public
specifier|static
specifier|final
name|int
name|STRINGS
init|=
literal|8
decl_stmt|;
DECL|field|IDENTIFIER
specifier|public
specifier|static
specifier|final
name|int
name|IDENTIFIER
init|=
literal|18
decl_stmt|;
DECL|field|MACRO
specifier|public
specifier|static
specifier|final
name|int
name|MACRO
init|=
literal|11
decl_stmt|;
DECL|field|IDLIST
specifier|public
specifier|static
specifier|final
name|int
name|IDLIST
init|=
literal|4
decl_stmt|;
DECL|field|NUMERAL
specifier|public
specifier|static
specifier|final
name|int
name|NUMERAL
init|=
literal|22
decl_stmt|;
DECL|field|READ
specifier|public
specifier|static
specifier|final
name|int
name|READ
init|=
literal|13
decl_stmt|;
DECL|method|BstParser (TokenStream input)
specifier|public
name|BstParser
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
DECL|field|adaptor
specifier|protected
name|TreeAdaptor
name|adaptor
init|=
operator|new
name|CommonTreeAdaptor
argument_list|()
decl_stmt|;
DECL|method|setTreeAdaptor (TreeAdaptor adaptor)
specifier|public
name|void
name|setTreeAdaptor
parameter_list|(
name|TreeAdaptor
name|adaptor
parameter_list|)
block|{
name|this
operator|.
name|adaptor
operator|=
name|adaptor
expr_stmt|;
block|}
DECL|method|getTreeAdaptor ()
specifier|public
name|TreeAdaptor
name|getTreeAdaptor
parameter_list|()
block|{
return|return
name|adaptor
return|;
block|}
DECL|method|getTokenNames ()
specifier|public
name|String
index|[]
name|getTokenNames
parameter_list|()
block|{
return|return
name|tokenNames
return|;
block|}
DECL|method|getGrammarFileName ()
specifier|public
name|String
name|getGrammarFileName
parameter_list|()
block|{
return|return
literal|"Bst.g"
return|;
block|}
DECL|class|program_return
specifier|public
specifier|static
class|class
name|program_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start program
comment|// Bst.g:14:1: program : ( commands )+ -> ^( COMMANDS ( commands )+ ) ;
DECL|method|program ()
specifier|public
name|program_return
name|program
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|program_return
name|retval
init|=
operator|new
name|program_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|commands_return
name|commands1
init|=
literal|null
decl_stmt|;
name|List
name|list_commands
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Bst.g:14:11: ( ( commands )+ -> ^( COMMANDS ( commands )+ ) )
comment|// Bst.g:14:11: ( commands )+
block|{
comment|// Bst.g:14:11: ( commands )+
name|int
name|cnt1
init|=
literal|0
decl_stmt|;
name|loop1
label|:
do|do
block|{
name|int
name|alt1
init|=
literal|2
decl_stmt|;
name|int
name|LA1_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA1_0
operator|==
name|ENTRY
operator|||
operator|(
name|LA1_0
operator|>=
name|STRINGS
operator|&&
name|LA1_0
operator|<=
name|MACRO
operator|)
operator|||
operator|(
name|LA1_0
operator|>=
name|READ
operator|&&
name|LA1_0
operator|<=
name|SORT
operator|)
operator|)
condition|)
block|{
name|alt1
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt1
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:14:11: commands
block|{
name|pushFollow
argument_list|(
name|FOLLOW_commands_in_program45
argument_list|)
expr_stmt|;
name|commands1
operator|=
name|commands
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|list_commands
operator|.
name|add
argument_list|(
name|commands1
operator|.
name|tree
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
if|if
condition|(
name|cnt1
operator|>=
literal|1
condition|)
break|break
name|loop1
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt1
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
comment|// AST REWRITE
name|int
name|i_0
init|=
literal|0
decl_stmt|;
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
comment|// 14:21: -> ^( COMMANDS ( commands )+ )
block|{
comment|// Bst.g:14:24: ^( COMMANDS ( commands )+ )
block|{
name|Object
name|root_1
init|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
decl_stmt|;
name|root_1
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|adaptor
operator|.
name|create
argument_list|(
name|COMMANDS
argument_list|,
literal|"COMMANDS"
argument_list|)
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
comment|// Bst.g:14:35: ( commands )+
block|{
name|int
name|n_1
init|=
name|list_commands
operator|==
literal|null
condition|?
literal|0
else|:
name|list_commands
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|n_1
operator|==
literal|0
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must have more than one element for (...)+ loops"
argument_list|)
throw|;
for|for
control|(
name|int
name|i_1
init|=
literal|0
init|;
name|i_1
operator|<
name|n_1
condition|;
name|i_1
operator|++
control|)
block|{
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_1
argument_list|,
name|list_commands
operator|.
name|get
argument_list|(
name|i_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end program
DECL|class|commands_return
specifier|public
specifier|static
class|class
name|commands_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start commands
comment|// Bst.g:16:1: commands : ( STRINGS^^ idList | INTEGERS^^ idList | FUNCTION^^ id stack | MACRO^^ id '{'! STRING '}'! | READ^^ | EXECUTE^^ '{'! function '}'! | ITERATE^^ '{'! function '}'! | REVERSE^^ '{'! function '}'! | ENTRY^^ idList0 idList0 idList0 | SORT^^ );
DECL|method|commands ()
specifier|public
name|commands_return
name|commands
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|commands_return
name|retval
init|=
operator|new
name|commands_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|STRINGS2
init|=
literal|null
decl_stmt|;
name|Token
name|INTEGERS4
init|=
literal|null
decl_stmt|;
name|Token
name|FUNCTION6
init|=
literal|null
decl_stmt|;
name|Token
name|MACRO9
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal11
init|=
literal|null
decl_stmt|;
name|Token
name|STRING12
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal13
init|=
literal|null
decl_stmt|;
name|Token
name|READ14
init|=
literal|null
decl_stmt|;
name|Token
name|EXECUTE15
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal16
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal18
init|=
literal|null
decl_stmt|;
name|Token
name|ITERATE19
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal20
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal22
init|=
literal|null
decl_stmt|;
name|Token
name|REVERSE23
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal24
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal26
init|=
literal|null
decl_stmt|;
name|Token
name|ENTRY27
init|=
literal|null
decl_stmt|;
name|Token
name|SORT31
init|=
literal|null
decl_stmt|;
name|idList_return
name|idList3
init|=
literal|null
decl_stmt|;
name|idList_return
name|idList5
init|=
literal|null
decl_stmt|;
name|id_return
name|id7
init|=
literal|null
decl_stmt|;
name|stack_return
name|stack8
init|=
literal|null
decl_stmt|;
name|id_return
name|id10
init|=
literal|null
decl_stmt|;
name|function_return
name|function17
init|=
literal|null
decl_stmt|;
name|function_return
name|function21
init|=
literal|null
decl_stmt|;
name|function_return
name|function25
init|=
literal|null
decl_stmt|;
name|idList0_return
name|idList028
init|=
literal|null
decl_stmt|;
name|idList0_return
name|idList029
init|=
literal|null
decl_stmt|;
name|idList0_return
name|idList030
init|=
literal|null
decl_stmt|;
name|Object
name|STRINGS2_tree
init|=
literal|null
decl_stmt|;
name|Object
name|INTEGERS4_tree
init|=
literal|null
decl_stmt|;
name|Object
name|FUNCTION6_tree
init|=
literal|null
decl_stmt|;
name|Object
name|MACRO9_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal11_tree
init|=
literal|null
decl_stmt|;
name|Object
name|STRING12_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal13_tree
init|=
literal|null
decl_stmt|;
name|Object
name|READ14_tree
init|=
literal|null
decl_stmt|;
name|Object
name|EXECUTE15_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal16_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal18_tree
init|=
literal|null
decl_stmt|;
name|Object
name|ITERATE19_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal20_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal22_tree
init|=
literal|null
decl_stmt|;
name|Object
name|REVERSE23_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal24_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal26_tree
init|=
literal|null
decl_stmt|;
name|Object
name|ENTRY27_tree
init|=
literal|null
decl_stmt|;
name|Object
name|SORT31_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Bst.g:17:4: ( STRINGS^^ idList | INTEGERS^^ idList | FUNCTION^^ id stack | MACRO^^ id '{'! STRING '}'! | READ^^ | EXECUTE^^ '{'! function '}'! | ITERATE^^ '{'! function '}'! | REVERSE^^ '{'! function '}'! | ENTRY^^ idList0 idList0 idList0 | SORT^^ )
name|int
name|alt2
init|=
literal|10
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STRINGS
case|:
name|alt2
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|INTEGERS
case|:
name|alt2
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|FUNCTION
case|:
name|alt2
operator|=
literal|3
expr_stmt|;
break|break;
case|case
name|MACRO
case|:
name|alt2
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|READ
case|:
name|alt2
operator|=
literal|5
expr_stmt|;
break|break;
case|case
name|EXECUTE
case|:
name|alt2
operator|=
literal|6
expr_stmt|;
break|break;
case|case
name|ITERATE
case|:
name|alt2
operator|=
literal|7
expr_stmt|;
break|break;
case|case
name|REVERSE
case|:
name|alt2
operator|=
literal|8
expr_stmt|;
break|break;
case|case
name|ENTRY
case|:
name|alt2
operator|=
literal|9
expr_stmt|;
break|break;
case|case
name|SORT
case|:
name|alt2
operator|=
literal|10
expr_stmt|;
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|"16:1: commands : ( STRINGS^^ idList | INTEGERS^^ idList | FUNCTION^^ id stack | MACRO^^ id '{'! STRING '}'! | READ^^ | EXECUTE^^ '{'! function '}'! | ITERATE^^ '{'! function '}'! | REVERSE^^ '{'! function '}'! | ENTRY^^ idList0 idList0 idList0 | SORT^^ );"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt2
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:17:4: STRINGS^^ idList
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|STRINGS2
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|STRINGS
argument_list|,
name|FOLLOW_STRINGS_in_commands65
argument_list|)
expr_stmt|;
name|STRINGS2_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|STRINGS2
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|STRINGS2_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_idList_in_commands68
argument_list|)
expr_stmt|;
name|idList3
operator|=
name|idList
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|idList3
operator|.
name|tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// Bst.g:18:4: INTEGERS^^ idList
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|INTEGERS4
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|INTEGERS
argument_list|,
name|FOLLOW_INTEGERS_in_commands73
argument_list|)
expr_stmt|;
name|INTEGERS4_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|INTEGERS4
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|INTEGERS4_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_idList_in_commands76
argument_list|)
expr_stmt|;
name|idList5
operator|=
name|idList
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|idList5
operator|.
name|tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// Bst.g:19:4: FUNCTION^^ id stack
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|FUNCTION6
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|FUNCTION
argument_list|,
name|FOLLOW_FUNCTION_in_commands81
argument_list|)
expr_stmt|;
name|FUNCTION6_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|FUNCTION6
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|FUNCTION6_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_id_in_commands84
argument_list|)
expr_stmt|;
name|id7
operator|=
name|id
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|id7
operator|.
name|tree
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_stack_in_commands86
argument_list|)
expr_stmt|;
name|stack8
operator|=
name|stack
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|stack8
operator|.
name|tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// Bst.g:20:4: MACRO^^ id '{'! STRING '}'!
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|MACRO9
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|MACRO
argument_list|,
name|FOLLOW_MACRO_in_commands91
argument_list|)
expr_stmt|;
name|MACRO9_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|MACRO9
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|MACRO9_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_id_in_commands94
argument_list|)
expr_stmt|;
name|id10
operator|=
name|id
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|id10
operator|.
name|tree
argument_list|)
expr_stmt|;
name|char_literal11
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|25
argument_list|,
name|FOLLOW_25_in_commands96
argument_list|)
expr_stmt|;
name|STRING12
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|STRING
argument_list|,
name|FOLLOW_STRING_in_commands99
argument_list|)
expr_stmt|;
name|STRING12_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|STRING12
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|STRING12_tree
argument_list|)
expr_stmt|;
name|char_literal13
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|26
argument_list|,
name|FOLLOW_26_in_commands101
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// Bst.g:21:4: READ^^
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|READ14
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|READ
argument_list|,
name|FOLLOW_READ_in_commands107
argument_list|)
expr_stmt|;
name|READ14_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|READ14
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|READ14_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// Bst.g:22:4: EXECUTE^^ '{'! function '}'!
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|EXECUTE15
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|EXECUTE
argument_list|,
name|FOLLOW_EXECUTE_in_commands113
argument_list|)
expr_stmt|;
name|EXECUTE15_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|EXECUTE15
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|EXECUTE15_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|char_literal16
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|25
argument_list|,
name|FOLLOW_25_in_commands116
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_function_in_commands119
argument_list|)
expr_stmt|;
name|function17
operator|=
name|function
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|function17
operator|.
name|tree
argument_list|)
expr_stmt|;
name|char_literal18
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|26
argument_list|,
name|FOLLOW_26_in_commands121
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// Bst.g:23:4: ITERATE^^ '{'! function '}'!
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|ITERATE19
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|ITERATE
argument_list|,
name|FOLLOW_ITERATE_in_commands127
argument_list|)
expr_stmt|;
name|ITERATE19_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|ITERATE19
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|ITERATE19_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|char_literal20
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|25
argument_list|,
name|FOLLOW_25_in_commands130
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_function_in_commands133
argument_list|)
expr_stmt|;
name|function21
operator|=
name|function
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|function21
operator|.
name|tree
argument_list|)
expr_stmt|;
name|char_literal22
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|26
argument_list|,
name|FOLLOW_26_in_commands135
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// Bst.g:24:4: REVERSE^^ '{'! function '}'!
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|REVERSE23
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|REVERSE
argument_list|,
name|FOLLOW_REVERSE_in_commands141
argument_list|)
expr_stmt|;
name|REVERSE23_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|REVERSE23
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|REVERSE23_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|char_literal24
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|25
argument_list|,
name|FOLLOW_25_in_commands144
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_function_in_commands147
argument_list|)
expr_stmt|;
name|function25
operator|=
name|function
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|function25
operator|.
name|tree
argument_list|)
expr_stmt|;
name|char_literal26
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|26
argument_list|,
name|FOLLOW_26_in_commands149
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// Bst.g:25:4: ENTRY^^ idList0 idList0 idList0
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|ENTRY27
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|ENTRY
argument_list|,
name|FOLLOW_ENTRY_in_commands155
argument_list|)
expr_stmt|;
name|ENTRY27_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|ENTRY27
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|ENTRY27_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_idList0_in_commands158
argument_list|)
expr_stmt|;
name|idList028
operator|=
name|idList0
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|idList028
operator|.
name|tree
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_idList0_in_commands160
argument_list|)
expr_stmt|;
name|idList029
operator|=
name|idList0
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|idList029
operator|.
name|tree
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_idList0_in_commands162
argument_list|)
expr_stmt|;
name|idList030
operator|=
name|idList0
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|idList030
operator|.
name|tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// Bst.g:26:4: SORT^^
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|SORT31
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|SORT
argument_list|,
name|FOLLOW_SORT_in_commands167
argument_list|)
expr_stmt|;
name|SORT31_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|SORT31
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|SORT31_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end commands
DECL|class|identifier_return
specifier|public
specifier|static
class|class
name|identifier_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start identifier
comment|// Bst.g:28:1: identifier : IDENTIFIER ;
DECL|method|identifier ()
specifier|public
name|identifier_return
name|identifier
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|identifier_return
name|retval
init|=
operator|new
name|identifier_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|IDENTIFIER32
init|=
literal|null
decl_stmt|;
name|Object
name|IDENTIFIER32_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Bst.g:29:4: ( IDENTIFIER )
comment|// Bst.g:29:4: IDENTIFIER
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|IDENTIFIER32
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|IDENTIFIER
argument_list|,
name|FOLLOW_IDENTIFIER_in_identifier178
argument_list|)
expr_stmt|;
name|IDENTIFIER32_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|IDENTIFIER32
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|IDENTIFIER32_tree
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end identifier
DECL|class|id_return
specifier|public
specifier|static
class|class
name|id_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start id
comment|// Bst.g:31:1: id : '{'! identifier '}'! ;
DECL|method|id ()
specifier|public
name|id_return
name|id
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|id_return
name|retval
init|=
operator|new
name|id_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal33
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal35
init|=
literal|null
decl_stmt|;
name|identifier_return
name|identifier34
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal33_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal35_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Bst.g:32:4: ( '{'! identifier '}'! )
comment|// Bst.g:32:4: '{'! identifier '}'!
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal33
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|25
argument_list|,
name|FOLLOW_25_in_id188
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_identifier_in_id191
argument_list|)
expr_stmt|;
name|identifier34
operator|=
name|identifier
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|identifier34
operator|.
name|tree
argument_list|)
expr_stmt|;
name|char_literal35
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|26
argument_list|,
name|FOLLOW_26_in_id193
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end id
DECL|class|idList_return
specifier|public
specifier|static
class|class
name|idList_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start idList
comment|// Bst.g:34:1: idList : '{' ( identifier )+ '}' -> ^( IDLIST ( identifier )+ ) ;
DECL|method|idList ()
specifier|public
name|idList_return
name|idList
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|idList_return
name|retval
init|=
operator|new
name|idList_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal36
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal38
init|=
literal|null
decl_stmt|;
name|identifier_return
name|identifier37
init|=
literal|null
decl_stmt|;
name|List
name|list_identifier
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|list_26
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|list_25
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Object
name|char_literal36_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal38_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Bst.g:35:4: ( '{' ( identifier )+ '}' -> ^( IDLIST ( identifier )+ ) )
comment|// Bst.g:35:4: '{' ( identifier )+ '}'
block|{
name|char_literal36
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|25
argument_list|,
name|FOLLOW_25_in_idList205
argument_list|)
expr_stmt|;
name|list_25
operator|.
name|add
argument_list|(
name|char_literal36
argument_list|)
expr_stmt|;
comment|// Bst.g:35:8: ( identifier )+
name|int
name|cnt3
init|=
literal|0
decl_stmt|;
name|loop3
label|:
do|do
block|{
name|int
name|alt3
init|=
literal|2
decl_stmt|;
name|int
name|LA3_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA3_0
operator|==
name|IDENTIFIER
operator|)
condition|)
block|{
name|alt3
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt3
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:35:8: identifier
block|{
name|pushFollow
argument_list|(
name|FOLLOW_identifier_in_idList207
argument_list|)
expr_stmt|;
name|identifier37
operator|=
name|identifier
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|list_identifier
operator|.
name|add
argument_list|(
name|identifier37
operator|.
name|tree
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
if|if
condition|(
name|cnt3
operator|>=
literal|1
condition|)
break|break
name|loop3
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|3
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt3
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|char_literal38
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|26
argument_list|,
name|FOLLOW_26_in_idList210
argument_list|)
expr_stmt|;
name|list_26
operator|.
name|add
argument_list|(
name|char_literal38
argument_list|)
expr_stmt|;
comment|// AST REWRITE
name|int
name|i_0
init|=
literal|0
decl_stmt|;
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
comment|// 35:24: -> ^( IDLIST ( identifier )+ )
block|{
comment|// Bst.g:35:27: ^( IDLIST ( identifier )+ )
block|{
name|Object
name|root_1
init|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
decl_stmt|;
name|root_1
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|adaptor
operator|.
name|create
argument_list|(
name|IDLIST
argument_list|,
literal|"IDLIST"
argument_list|)
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
comment|// Bst.g:35:36: ( identifier )+
block|{
name|int
name|n_1
init|=
name|list_identifier
operator|==
literal|null
condition|?
literal|0
else|:
name|list_identifier
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|n_1
operator|==
literal|0
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must have more than one element for (...)+ loops"
argument_list|)
throw|;
for|for
control|(
name|int
name|i_1
init|=
literal|0
init|;
name|i_1
operator|<
name|n_1
condition|;
name|i_1
operator|++
control|)
block|{
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_1
argument_list|,
name|list_identifier
operator|.
name|get
argument_list|(
name|i_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end idList
DECL|class|idList0_return
specifier|public
specifier|static
class|class
name|idList0_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start idList0
comment|// Bst.g:37:1: idList0 : '{' ( identifier )* '}' -> ^( IDLIST ( identifier )* ) ;
DECL|method|idList0 ()
specifier|public
name|idList0_return
name|idList0
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|idList0_return
name|retval
init|=
operator|new
name|idList0_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal39
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal41
init|=
literal|null
decl_stmt|;
name|identifier_return
name|identifier40
init|=
literal|null
decl_stmt|;
name|List
name|list_identifier
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|list_26
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|list_25
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Object
name|char_literal39_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal41_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Bst.g:38:4: ( '{' ( identifier )* '}' -> ^( IDLIST ( identifier )* ) )
comment|// Bst.g:38:4: '{' ( identifier )* '}'
block|{
name|char_literal39
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|25
argument_list|,
name|FOLLOW_25_in_idList0230
argument_list|)
expr_stmt|;
name|list_25
operator|.
name|add
argument_list|(
name|char_literal39
argument_list|)
expr_stmt|;
comment|// Bst.g:38:8: ( identifier )*
name|loop4
label|:
do|do
block|{
name|int
name|alt4
init|=
literal|2
decl_stmt|;
name|int
name|LA4_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA4_0
operator|==
name|IDENTIFIER
operator|)
condition|)
block|{
name|alt4
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt4
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:38:8: identifier
block|{
name|pushFollow
argument_list|(
name|FOLLOW_identifier_in_idList0232
argument_list|)
expr_stmt|;
name|identifier40
operator|=
name|identifier
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|list_identifier
operator|.
name|add
argument_list|(
name|identifier40
operator|.
name|tree
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop4
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|char_literal41
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|26
argument_list|,
name|FOLLOW_26_in_idList0235
argument_list|)
expr_stmt|;
name|list_26
operator|.
name|add
argument_list|(
name|char_literal41
argument_list|)
expr_stmt|;
comment|// AST REWRITE
name|int
name|i_0
init|=
literal|0
decl_stmt|;
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
comment|// 38:24: -> ^( IDLIST ( identifier )* )
block|{
comment|// Bst.g:38:27: ^( IDLIST ( identifier )* )
block|{
name|Object
name|root_1
init|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
decl_stmt|;
name|root_1
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|adaptor
operator|.
name|create
argument_list|(
name|IDLIST
argument_list|,
literal|"IDLIST"
argument_list|)
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
comment|// Bst.g:38:36: ( identifier )*
block|{
name|int
name|n_1
init|=
name|list_identifier
operator|==
literal|null
condition|?
literal|0
else|:
name|list_identifier
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i_1
init|=
literal|0
init|;
name|i_1
operator|<
name|n_1
condition|;
name|i_1
operator|++
control|)
block|{
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_1
argument_list|,
name|list_identifier
operator|.
name|get
argument_list|(
name|i_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end idList0
DECL|class|function_return
specifier|public
specifier|static
class|class
name|function_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start function
comment|// Bst.g:40:1: function : ( '<' | '>' | '=' | '+' | '-' | ':=' | '*' | identifier );
DECL|method|function ()
specifier|public
name|function_return
name|function
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|function_return
name|retval
init|=
operator|new
name|function_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal42
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal43
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal44
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal45
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal46
init|=
literal|null
decl_stmt|;
name|Token
name|string_literal47
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal48
init|=
literal|null
decl_stmt|;
name|identifier_return
name|identifier49
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal42_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal43_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal44_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal45_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal46_tree
init|=
literal|null
decl_stmt|;
name|Object
name|string_literal47_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal48_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Bst.g:41:4: ( '<' | '>' | '=' | '+' | '-' | ':=' | '*' | identifier )
name|int
name|alt5
init|=
literal|8
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|27
case|:
name|alt5
operator|=
literal|1
expr_stmt|;
break|break;
case|case
literal|28
case|:
name|alt5
operator|=
literal|2
expr_stmt|;
break|break;
case|case
literal|29
case|:
name|alt5
operator|=
literal|3
expr_stmt|;
break|break;
case|case
literal|30
case|:
name|alt5
operator|=
literal|4
expr_stmt|;
break|break;
case|case
literal|31
case|:
name|alt5
operator|=
literal|5
expr_stmt|;
break|break;
case|case
literal|32
case|:
name|alt5
operator|=
literal|6
expr_stmt|;
break|break;
case|case
literal|33
case|:
name|alt5
operator|=
literal|7
expr_stmt|;
break|break;
case|case
name|IDENTIFIER
case|:
name|alt5
operator|=
literal|8
expr_stmt|;
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|"40:1: function : ( '<' | '>' | '=' | '+' | '-' | ':=' | '*' | identifier );"
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt5
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:41:4: '<'
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal42
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|27
argument_list|,
name|FOLLOW_27_in_function254
argument_list|)
expr_stmt|;
name|char_literal42_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal42
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal42_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// Bst.g:41:10: '>'
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal43
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|28
argument_list|,
name|FOLLOW_28_in_function258
argument_list|)
expr_stmt|;
name|char_literal43_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal43
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal43_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// Bst.g:41:16: '='
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal44
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|29
argument_list|,
name|FOLLOW_29_in_function262
argument_list|)
expr_stmt|;
name|char_literal44_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal44
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal44_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// Bst.g:41:22: '+'
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal45
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|30
argument_list|,
name|FOLLOW_30_in_function266
argument_list|)
expr_stmt|;
name|char_literal45_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal45
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal45_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// Bst.g:41:28: '-'
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal46
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|31
argument_list|,
name|FOLLOW_31_in_function270
argument_list|)
expr_stmt|;
name|char_literal46_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal46
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal46_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// Bst.g:41:34: ':='
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|string_literal47
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|32
argument_list|,
name|FOLLOW_32_in_function274
argument_list|)
expr_stmt|;
name|string_literal47_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|string_literal47
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|string_literal47_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// Bst.g:41:41: '*'
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal48
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|33
argument_list|,
name|FOLLOW_33_in_function278
argument_list|)
expr_stmt|;
name|char_literal48_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal48
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal48_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// Bst.g:41:47: identifier
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_identifier_in_function282
argument_list|)
expr_stmt|;
name|identifier49
operator|=
name|identifier
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|identifier49
operator|.
name|tree
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end function
DECL|class|stack_return
specifier|public
specifier|static
class|class
name|stack_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start stack
comment|// Bst.g:43:1: stack : '{' ( stackitem )+ '}' -> ^( STACK ( stackitem )+ ) ;
DECL|method|stack ()
specifier|public
name|stack_return
name|stack
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|stack_return
name|retval
init|=
operator|new
name|stack_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal50
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal52
init|=
literal|null
decl_stmt|;
name|stackitem_return
name|stackitem51
init|=
literal|null
decl_stmt|;
name|List
name|list_stackitem
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|list_26
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|list_25
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Object
name|char_literal50_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal52_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Bst.g:44:4: ( '{' ( stackitem )+ '}' -> ^( STACK ( stackitem )+ ) )
comment|// Bst.g:44:4: '{' ( stackitem )+ '}'
block|{
name|char_literal50
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|25
argument_list|,
name|FOLLOW_25_in_stack293
argument_list|)
expr_stmt|;
name|list_25
operator|.
name|add
argument_list|(
name|char_literal50
argument_list|)
expr_stmt|;
comment|// Bst.g:44:8: ( stackitem )+
name|int
name|cnt6
init|=
literal|0
decl_stmt|;
name|loop6
label|:
do|do
block|{
name|int
name|alt6
init|=
literal|2
decl_stmt|;
name|int
name|LA6_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA6_0
operator|==
name|STRING
operator|||
operator|(
name|LA6_0
operator|>=
name|IDENTIFIER
operator|&&
name|LA6_0
operator|<=
name|QUOTED
operator|)
operator|||
name|LA6_0
operator|==
literal|25
operator|||
operator|(
name|LA6_0
operator|>=
literal|27
operator|&&
name|LA6_0
operator|<=
literal|33
operator|)
operator|)
condition|)
block|{
name|alt6
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt6
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:44:8: stackitem
block|{
name|pushFollow
argument_list|(
name|FOLLOW_stackitem_in_stack295
argument_list|)
expr_stmt|;
name|stackitem51
operator|=
name|stackitem
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|list_stackitem
operator|.
name|add
argument_list|(
name|stackitem51
operator|.
name|tree
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
if|if
condition|(
name|cnt6
operator|>=
literal|1
condition|)
break|break
name|loop6
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|6
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt6
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|char_literal52
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
literal|26
argument_list|,
name|FOLLOW_26_in_stack298
argument_list|)
expr_stmt|;
name|list_26
operator|.
name|add
argument_list|(
name|char_literal52
argument_list|)
expr_stmt|;
comment|// AST REWRITE
name|int
name|i_0
init|=
literal|0
decl_stmt|;
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
comment|// 44:23: -> ^( STACK ( stackitem )+ )
block|{
comment|// Bst.g:44:26: ^( STACK ( stackitem )+ )
block|{
name|Object
name|root_1
init|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
decl_stmt|;
name|root_1
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|adaptor
operator|.
name|create
argument_list|(
name|STACK
argument_list|,
literal|"STACK"
argument_list|)
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
comment|// Bst.g:44:34: ( stackitem )+
block|{
name|int
name|n_1
init|=
name|list_stackitem
operator|==
literal|null
condition|?
literal|0
else|:
name|list_stackitem
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|n_1
operator|==
literal|0
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must have more than one element for (...)+ loops"
argument_list|)
throw|;
for|for
control|(
name|int
name|i_1
init|=
literal|0
init|;
name|i_1
operator|<
name|n_1
condition|;
name|i_1
operator|++
control|)
block|{
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_1
argument_list|,
name|list_stackitem
operator|.
name|get
argument_list|(
name|i_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end stack
DECL|class|stackitem_return
specifier|public
specifier|static
class|class
name|stackitem_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start stackitem
comment|// Bst.g:46:1: stackitem : ( function | STRING | INTEGER | QUOTED | stack );
DECL|method|stackitem ()
specifier|public
name|stackitem_return
name|stackitem
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|stackitem_return
name|retval
init|=
operator|new
name|stackitem_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|STRING54
init|=
literal|null
decl_stmt|;
name|Token
name|INTEGER55
init|=
literal|null
decl_stmt|;
name|Token
name|QUOTED56
init|=
literal|null
decl_stmt|;
name|function_return
name|function53
init|=
literal|null
decl_stmt|;
name|stack_return
name|stack57
init|=
literal|null
decl_stmt|;
name|Object
name|STRING54_tree
init|=
literal|null
decl_stmt|;
name|Object
name|INTEGER55_tree
init|=
literal|null
decl_stmt|;
name|Object
name|QUOTED56_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Bst.g:47:4: ( function | STRING | INTEGER | QUOTED | stack )
name|int
name|alt7
init|=
literal|5
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|IDENTIFIER
case|:
case|case
literal|27
case|:
case|case
literal|28
case|:
case|case
literal|29
case|:
case|case
literal|30
case|:
case|case
literal|31
case|:
case|case
literal|32
case|:
case|case
literal|33
case|:
name|alt7
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|alt7
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|INTEGER
case|:
name|alt7
operator|=
literal|3
expr_stmt|;
break|break;
case|case
name|QUOTED
case|:
name|alt7
operator|=
literal|4
expr_stmt|;
break|break;
case|case
literal|25
case|:
name|alt7
operator|=
literal|5
expr_stmt|;
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|"46:1: stackitem : ( function | STRING | INTEGER | QUOTED | stack );"
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt7
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:47:4: function
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_function_in_stackitem317
argument_list|)
expr_stmt|;
name|function53
operator|=
name|function
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|function53
operator|.
name|tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// Bst.g:48:4: STRING
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|STRING54
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|STRING
argument_list|,
name|FOLLOW_STRING_in_stackitem322
argument_list|)
expr_stmt|;
name|STRING54_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|STRING54
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|STRING54_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// Bst.g:49:4: INTEGER
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|INTEGER55
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|INTEGER
argument_list|,
name|FOLLOW_INTEGER_in_stackitem328
argument_list|)
expr_stmt|;
name|INTEGER55_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|INTEGER55
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|INTEGER55_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// Bst.g:50:4: QUOTED
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|QUOTED56
operator|=
operator|(
name|Token
operator|)
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|input
argument_list|,
name|QUOTED
argument_list|,
name|FOLLOW_QUOTED_in_stackitem334
argument_list|)
expr_stmt|;
name|QUOTED56_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|QUOTED56
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|QUOTED56_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// Bst.g:51:4: stack
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_stack_in_stackitem339
argument_list|)
expr_stmt|;
name|stack57
operator|=
name|stack
argument_list|()
expr_stmt|;
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|stack57
operator|.
name|tree
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end stackitem
DECL|field|FOLLOW_commands_in_program45
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_commands_in_program45
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x000000000003EF42L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_STRINGS_in_commands65
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_STRINGS_in_commands65
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_idList_in_commands68
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_idList_in_commands68
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_INTEGERS_in_commands73
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_INTEGERS_in_commands73
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_idList_in_commands76
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_idList_in_commands76
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_FUNCTION_in_commands81
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_FUNCTION_in_commands81
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_id_in_commands84
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_id_in_commands84
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_stack_in_commands86
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_stack_in_commands86
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_MACRO_in_commands91
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_MACRO_in_commands91
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_id_in_commands94
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_id_in_commands94
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_25_in_commands96
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_25_in_commands96
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000001000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_STRING_in_commands99
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_STRING_in_commands99
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000004000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_26_in_commands101
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_26_in_commands101
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_READ_in_commands107
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_READ_in_commands107
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_EXECUTE_in_commands113
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_EXECUTE_in_commands113
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_25_in_commands116
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_25_in_commands116
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x00000003F8040000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_function_in_commands119
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_function_in_commands119
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000004000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_26_in_commands121
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_26_in_commands121
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_ITERATE_in_commands127
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_ITERATE_in_commands127
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_25_in_commands130
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_25_in_commands130
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x00000003F8040000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_function_in_commands133
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_function_in_commands133
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000004000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_26_in_commands135
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_26_in_commands135
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_REVERSE_in_commands141
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_REVERSE_in_commands141
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_25_in_commands144
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_25_in_commands144
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x00000003F8040000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_function_in_commands147
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_function_in_commands147
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000004000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_26_in_commands149
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_26_in_commands149
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_ENTRY_in_commands155
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_ENTRY_in_commands155
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_idList0_in_commands158
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_idList0_in_commands158
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_idList0_in_commands160
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_idList0_in_commands160
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000002000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_idList0_in_commands162
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_idList0_in_commands162
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_SORT_in_commands167
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_SORT_in_commands167
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_IDENTIFIER_in_identifier178
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_IDENTIFIER_in_identifier178
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_25_in_id188
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_25_in_id188
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000040000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_identifier_in_id191
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_identifier_in_id191
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000004000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_26_in_id193
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_26_in_id193
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_25_in_idList205
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_25_in_idList205
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000040000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_identifier_in_idList207
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_identifier_in_idList207
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000004040000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_26_in_idList210
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_26_in_idList210
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_25_in_idList0230
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_25_in_idList0230
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000004040000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_identifier_in_idList0232
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_identifier_in_idList0232
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000004040000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_26_in_idList0235
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_26_in_idList0235
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_27_in_function254
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_27_in_function254
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_28_in_function258
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_28_in_function258
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_29_in_function262
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_29_in_function262
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_30_in_function266
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_30_in_function266
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_31_in_function270
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_31_in_function270
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_32_in_function274
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_32_in_function274
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_33_in_function278
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_33_in_function278
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_identifier_in_function282
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_identifier_in_function282
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_25_in_stack293
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_25_in_stack293
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x00000003FA1C1000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_stackitem_in_stack295
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_stackitem_in_stack295
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x00000003FE1C1000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_26_in_stack298
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_26_in_stack298
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_function_in_stackitem317
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_function_in_stackitem317
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_STRING_in_stackitem322
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_STRING_in_stackitem322
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_INTEGER_in_stackitem328
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_INTEGER_in_stackitem328
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_QUOTED_in_stackitem334
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_QUOTED_in_stackitem334
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_stack_in_stackitem339
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_stack_in_stackitem339
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

