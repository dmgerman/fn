begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 3.4 C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g 2012-10-28 23:48:28
end_comment

begin_comment
comment|// Generated by ANTLR
end_comment

begin_package
DECL|package|net.sf.jabref.bst
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bst
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"all"
block|,
literal|"warnings"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|BstParser
specifier|public
class|class
name|BstParser
extends|extends
name|Parser
block|{
DECL|field|tokenNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|tokenNames
init|=
operator|new
name|String
index|[]
block|{
literal|"<invalid>"
block|,
literal|"<EOR>"
block|,
literal|"<DOWN>"
block|,
literal|"<UP>"
block|,
literal|"COMMANDS"
block|,
literal|"ENTRY"
block|,
literal|"EXECUTE"
block|,
literal|"FUNCTION"
block|,
literal|"IDENTIFIER"
block|,
literal|"IDLIST"
block|,
literal|"INTEGER"
block|,
literal|"INTEGERS"
block|,
literal|"ITERATE"
block|,
literal|"LETTER"
block|,
literal|"LINE_COMMENT"
block|,
literal|"MACRO"
block|,
literal|"NUMERAL"
block|,
literal|"QUOTED"
block|,
literal|"READ"
block|,
literal|"REVERSE"
block|,
literal|"SORT"
block|,
literal|"STACK"
block|,
literal|"STRING"
block|,
literal|"STRINGS"
block|,
literal|"WS"
block|,
literal|"'*'"
block|,
literal|"'+'"
block|,
literal|"'-'"
block|,
literal|"':='"
block|,
literal|"'<'"
block|,
literal|"'='"
block|,
literal|"'>'"
block|,
literal|"'{'"
block|,
literal|"'}'"
block|}
decl_stmt|;
DECL|field|EOF
specifier|public
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|T__25
specifier|public
specifier|static
specifier|final
name|int
name|T__25
init|=
literal|25
decl_stmt|;
DECL|field|T__26
specifier|public
specifier|static
specifier|final
name|int
name|T__26
init|=
literal|26
decl_stmt|;
DECL|field|T__27
specifier|public
specifier|static
specifier|final
name|int
name|T__27
init|=
literal|27
decl_stmt|;
DECL|field|T__28
specifier|public
specifier|static
specifier|final
name|int
name|T__28
init|=
literal|28
decl_stmt|;
DECL|field|T__29
specifier|public
specifier|static
specifier|final
name|int
name|T__29
init|=
literal|29
decl_stmt|;
DECL|field|T__30
specifier|public
specifier|static
specifier|final
name|int
name|T__30
init|=
literal|30
decl_stmt|;
DECL|field|T__31
specifier|public
specifier|static
specifier|final
name|int
name|T__31
init|=
literal|31
decl_stmt|;
DECL|field|T__32
specifier|public
specifier|static
specifier|final
name|int
name|T__32
init|=
literal|32
decl_stmt|;
DECL|field|T__33
specifier|public
specifier|static
specifier|final
name|int
name|T__33
init|=
literal|33
decl_stmt|;
DECL|field|COMMANDS
specifier|public
specifier|static
specifier|final
name|int
name|COMMANDS
init|=
literal|4
decl_stmt|;
DECL|field|ENTRY
specifier|public
specifier|static
specifier|final
name|int
name|ENTRY
init|=
literal|5
decl_stmt|;
DECL|field|EXECUTE
specifier|public
specifier|static
specifier|final
name|int
name|EXECUTE
init|=
literal|6
decl_stmt|;
DECL|field|FUNCTION
specifier|public
specifier|static
specifier|final
name|int
name|FUNCTION
init|=
literal|7
decl_stmt|;
DECL|field|IDENTIFIER
specifier|public
specifier|static
specifier|final
name|int
name|IDENTIFIER
init|=
literal|8
decl_stmt|;
DECL|field|IDLIST
specifier|public
specifier|static
specifier|final
name|int
name|IDLIST
init|=
literal|9
decl_stmt|;
DECL|field|INTEGER
specifier|public
specifier|static
specifier|final
name|int
name|INTEGER
init|=
literal|10
decl_stmt|;
DECL|field|INTEGERS
specifier|public
specifier|static
specifier|final
name|int
name|INTEGERS
init|=
literal|11
decl_stmt|;
DECL|field|ITERATE
specifier|public
specifier|static
specifier|final
name|int
name|ITERATE
init|=
literal|12
decl_stmt|;
DECL|field|LETTER
specifier|public
specifier|static
specifier|final
name|int
name|LETTER
init|=
literal|13
decl_stmt|;
DECL|field|LINE_COMMENT
specifier|public
specifier|static
specifier|final
name|int
name|LINE_COMMENT
init|=
literal|14
decl_stmt|;
DECL|field|MACRO
specifier|public
specifier|static
specifier|final
name|int
name|MACRO
init|=
literal|15
decl_stmt|;
DECL|field|NUMERAL
specifier|public
specifier|static
specifier|final
name|int
name|NUMERAL
init|=
literal|16
decl_stmt|;
DECL|field|QUOTED
specifier|public
specifier|static
specifier|final
name|int
name|QUOTED
init|=
literal|17
decl_stmt|;
DECL|field|READ
specifier|public
specifier|static
specifier|final
name|int
name|READ
init|=
literal|18
decl_stmt|;
DECL|field|REVERSE
specifier|public
specifier|static
specifier|final
name|int
name|REVERSE
init|=
literal|19
decl_stmt|;
DECL|field|SORT
specifier|public
specifier|static
specifier|final
name|int
name|SORT
init|=
literal|20
decl_stmt|;
DECL|field|STACK
specifier|public
specifier|static
specifier|final
name|int
name|STACK
init|=
literal|21
decl_stmt|;
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|22
decl_stmt|;
DECL|field|STRINGS
specifier|public
specifier|static
specifier|final
name|int
name|STRINGS
init|=
literal|23
decl_stmt|;
DECL|field|WS
specifier|public
specifier|static
specifier|final
name|int
name|WS
init|=
literal|24
decl_stmt|;
comment|// delegates
DECL|method|getDelegates ()
specifier|public
name|Parser
index|[]
name|getDelegates
parameter_list|()
block|{
return|return
operator|new
name|Parser
index|[]
block|{}
return|;
block|}
comment|// delegators
DECL|method|BstParser (TokenStream input)
specifier|public
name|BstParser
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
operator|new
name|RecognizerSharedState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|BstParser (TokenStream input, RecognizerSharedState state)
specifier|public
name|BstParser
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|RecognizerSharedState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
DECL|field|adaptor
specifier|protected
name|TreeAdaptor
name|adaptor
init|=
operator|new
name|CommonTreeAdaptor
argument_list|()
decl_stmt|;
DECL|method|setTreeAdaptor (TreeAdaptor adaptor)
specifier|public
name|void
name|setTreeAdaptor
parameter_list|(
name|TreeAdaptor
name|adaptor
parameter_list|)
block|{
name|this
operator|.
name|adaptor
operator|=
name|adaptor
expr_stmt|;
block|}
DECL|method|getTreeAdaptor ()
specifier|public
name|TreeAdaptor
name|getTreeAdaptor
parameter_list|()
block|{
return|return
name|adaptor
return|;
block|}
DECL|method|getTokenNames ()
specifier|public
name|String
index|[]
name|getTokenNames
parameter_list|()
block|{
return|return
name|BstParser
operator|.
name|tokenNames
return|;
block|}
DECL|method|getGrammarFileName ()
specifier|public
name|String
name|getGrammarFileName
parameter_list|()
block|{
return|return
literal|"C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g"
return|;
block|}
DECL|class|program_return
specifier|public
specifier|static
class|class
name|program_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "program"
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:22:1: program : ( commands )+ -> ^( COMMANDS ( commands )+ ) ;
DECL|method|program ()
specifier|public
specifier|final
name|BstParser
operator|.
name|program_return
name|program
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BstParser
operator|.
name|program_return
name|retval
init|=
operator|new
name|BstParser
operator|.
name|program_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|commands_return
name|commands1
init|=
literal|null
decl_stmt|;
name|RewriteRuleSubtreeStream
name|stream_commands
init|=
operator|new
name|RewriteRuleSubtreeStream
argument_list|(
name|adaptor
argument_list|,
literal|"rule commands"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:22:9: ( ( commands )+ -> ^( COMMANDS ( commands )+ ) )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:22:11: ( commands )+
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:22:11: ( commands )+
name|int
name|cnt1
init|=
literal|0
decl_stmt|;
name|loop1
label|:
do|do
block|{
name|int
name|alt1
init|=
literal|2
decl_stmt|;
name|int
name|LA1_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA1_0
operator|>=
name|ENTRY
operator|&&
name|LA1_0
operator|<=
name|FUNCTION
operator|)
operator|||
operator|(
name|LA1_0
operator|>=
name|INTEGERS
operator|&&
name|LA1_0
operator|<=
name|ITERATE
operator|)
operator|||
name|LA1_0
operator|==
name|MACRO
operator|||
operator|(
name|LA1_0
operator|>=
name|READ
operator|&&
name|LA1_0
operator|<=
name|SORT
operator|)
operator|||
name|LA1_0
operator|==
name|STRINGS
operator|)
condition|)
block|{
name|alt1
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt1
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:22:11: commands
block|{
name|pushFollow
argument_list|(
name|FOLLOW_commands_in_program62
argument_list|)
expr_stmt|;
name|commands1
operator|=
name|commands
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|stream_commands
operator|.
name|add
argument_list|(
name|commands1
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
if|if
condition|(
name|cnt1
operator|>=
literal|1
condition|)
break|break
name|loop1
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|1
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt1
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
comment|// AST REWRITE
comment|// elements: commands
comment|// token labels:
comment|// rule labels: retval
comment|// token list labels:
comment|// rule list labels:
comment|// wildcard labels:
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
name|RewriteRuleSubtreeStream
name|stream_retval
init|=
operator|new
name|RewriteRuleSubtreeStream
argument_list|(
name|adaptor
argument_list|,
literal|"rule retval"
argument_list|,
name|retval
operator|!=
literal|null
condition|?
name|retval
operator|.
name|tree
else|:
literal|null
argument_list|)
decl_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
comment|// 22:21: -> ^( COMMANDS ( commands )+ )
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:22:24: ^( COMMANDS ( commands )+ )
block|{
name|Object
name|root_1
init|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
decl_stmt|;
name|root_1
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|COMMANDS
argument_list|,
literal|"COMMANDS"
argument_list|)
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|stream_commands
operator|.
name|hasNext
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|RewriteEarlyExitException
argument_list|()
throw|;
block|}
while|while
condition|(
name|stream_commands
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_1
argument_list|,
name|stream_commands
operator|.
name|nextTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stream_commands
operator|.
name|reset
argument_list|()
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
block|}
block|}
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "program"
DECL|class|commands_return
specifier|public
specifier|static
class|class
name|commands_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "commands"
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:24:1: commands : ( STRINGS ^ idList | INTEGERS ^ idList | FUNCTION ^ id stack | MACRO ^ id '{' ! STRING '}' !| READ ^| EXECUTE ^ '{' ! function '}' !| ITERATE ^ '{' ! function '}' !| REVERSE ^ '{' ! function '}' !| ENTRY ^ idList0 idList0 idList0 | SORT ^);
DECL|method|commands ()
specifier|public
specifier|final
name|BstParser
operator|.
name|commands_return
name|commands
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BstParser
operator|.
name|commands_return
name|retval
init|=
operator|new
name|BstParser
operator|.
name|commands_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|STRINGS2
init|=
literal|null
decl_stmt|;
name|Token
name|INTEGERS4
init|=
literal|null
decl_stmt|;
name|Token
name|FUNCTION6
init|=
literal|null
decl_stmt|;
name|Token
name|MACRO9
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal11
init|=
literal|null
decl_stmt|;
name|Token
name|STRING12
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal13
init|=
literal|null
decl_stmt|;
name|Token
name|READ14
init|=
literal|null
decl_stmt|;
name|Token
name|EXECUTE15
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal16
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal18
init|=
literal|null
decl_stmt|;
name|Token
name|ITERATE19
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal20
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal22
init|=
literal|null
decl_stmt|;
name|Token
name|REVERSE23
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal24
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal26
init|=
literal|null
decl_stmt|;
name|Token
name|ENTRY27
init|=
literal|null
decl_stmt|;
name|Token
name|SORT31
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|idList_return
name|idList3
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|idList_return
name|idList5
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|id_return
name|id7
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|stack_return
name|stack8
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|id_return
name|id10
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|function_return
name|function17
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|function_return
name|function21
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|function_return
name|function25
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|idList0_return
name|idList028
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|idList0_return
name|idList029
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|idList0_return
name|idList030
init|=
literal|null
decl_stmt|;
name|Object
name|STRINGS2_tree
init|=
literal|null
decl_stmt|;
name|Object
name|INTEGERS4_tree
init|=
literal|null
decl_stmt|;
name|Object
name|FUNCTION6_tree
init|=
literal|null
decl_stmt|;
name|Object
name|MACRO9_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal11_tree
init|=
literal|null
decl_stmt|;
name|Object
name|STRING12_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal13_tree
init|=
literal|null
decl_stmt|;
name|Object
name|READ14_tree
init|=
literal|null
decl_stmt|;
name|Object
name|EXECUTE15_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal16_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal18_tree
init|=
literal|null
decl_stmt|;
name|Object
name|ITERATE19_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal20_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal22_tree
init|=
literal|null
decl_stmt|;
name|Object
name|REVERSE23_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal24_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal26_tree
init|=
literal|null
decl_stmt|;
name|Object
name|ENTRY27_tree
init|=
literal|null
decl_stmt|;
name|Object
name|SORT31_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:25:2: ( STRINGS ^ idList | INTEGERS ^ idList | FUNCTION ^ id stack | MACRO ^ id '{' ! STRING '}' !| READ ^| EXECUTE ^ '{' ! function '}' !| ITERATE ^ '{' ! function '}' !| REVERSE ^ '{' ! function '}' !| ENTRY ^ idList0 idList0 idList0 | SORT ^)
name|int
name|alt2
init|=
literal|10
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STRINGS
case|:
block|{
name|alt2
operator|=
literal|1
expr_stmt|;
block|}
break|break;
case|case
name|INTEGERS
case|:
block|{
name|alt2
operator|=
literal|2
expr_stmt|;
block|}
break|break;
case|case
name|FUNCTION
case|:
block|{
name|alt2
operator|=
literal|3
expr_stmt|;
block|}
break|break;
case|case
name|MACRO
case|:
block|{
name|alt2
operator|=
literal|4
expr_stmt|;
block|}
break|break;
case|case
name|READ
case|:
block|{
name|alt2
operator|=
literal|5
expr_stmt|;
block|}
break|break;
case|case
name|EXECUTE
case|:
block|{
name|alt2
operator|=
literal|6
expr_stmt|;
block|}
break|break;
case|case
name|ITERATE
case|:
block|{
name|alt2
operator|=
literal|7
expr_stmt|;
block|}
break|break;
case|case
name|REVERSE
case|:
block|{
name|alt2
operator|=
literal|8
expr_stmt|;
block|}
break|break;
case|case
name|ENTRY
case|:
block|{
name|alt2
operator|=
literal|9
expr_stmt|;
block|}
break|break;
case|case
name|SORT
case|:
block|{
name|alt2
operator|=
literal|10
expr_stmt|;
block|}
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt2
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:25:4: STRINGS ^ idList
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|STRINGS2
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|STRINGS
argument_list|,
name|FOLLOW_STRINGS_in_commands82
argument_list|)
expr_stmt|;
name|STRINGS2_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|STRINGS2
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|STRINGS2_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_idList_in_commands85
argument_list|)
expr_stmt|;
name|idList3
operator|=
name|idList
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|idList3
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:26:4: INTEGERS ^ idList
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|INTEGERS4
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|INTEGERS
argument_list|,
name|FOLLOW_INTEGERS_in_commands90
argument_list|)
expr_stmt|;
name|INTEGERS4_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|INTEGERS4
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|INTEGERS4_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_idList_in_commands93
argument_list|)
expr_stmt|;
name|idList5
operator|=
name|idList
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|idList5
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:27:4: FUNCTION ^ id stack
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|FUNCTION6
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|FUNCTION
argument_list|,
name|FOLLOW_FUNCTION_in_commands98
argument_list|)
expr_stmt|;
name|FUNCTION6_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|FUNCTION6
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|FUNCTION6_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_id_in_commands101
argument_list|)
expr_stmt|;
name|id7
operator|=
name|id
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|id7
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_stack_in_commands103
argument_list|)
expr_stmt|;
name|stack8
operator|=
name|stack
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|stack8
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:28:4: MACRO ^ id '{' ! STRING '}' !
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|MACRO9
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|MACRO
argument_list|,
name|FOLLOW_MACRO_in_commands108
argument_list|)
expr_stmt|;
name|MACRO9_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|MACRO9
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|MACRO9_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_id_in_commands111
argument_list|)
expr_stmt|;
name|id10
operator|=
name|id
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|id10
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|char_literal11
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|32
argument_list|,
name|FOLLOW_32_in_commands113
argument_list|)
expr_stmt|;
name|STRING12
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|STRING
argument_list|,
name|FOLLOW_STRING_in_commands116
argument_list|)
expr_stmt|;
name|STRING12_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|STRING12
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|STRING12_tree
argument_list|)
expr_stmt|;
name|char_literal13
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|33
argument_list|,
name|FOLLOW_33_in_commands118
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:29:4: READ ^
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|READ14
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|READ
argument_list|,
name|FOLLOW_READ_in_commands124
argument_list|)
expr_stmt|;
name|READ14_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|READ14
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|READ14_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:30:4: EXECUTE ^ '{' ! function '}' !
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|EXECUTE15
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|EXECUTE
argument_list|,
name|FOLLOW_EXECUTE_in_commands130
argument_list|)
expr_stmt|;
name|EXECUTE15_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|EXECUTE15
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|EXECUTE15_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|char_literal16
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|32
argument_list|,
name|FOLLOW_32_in_commands133
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_function_in_commands136
argument_list|)
expr_stmt|;
name|function17
operator|=
name|function
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|function17
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|char_literal18
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|33
argument_list|,
name|FOLLOW_33_in_commands138
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:31:4: ITERATE ^ '{' ! function '}' !
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|ITERATE19
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|ITERATE
argument_list|,
name|FOLLOW_ITERATE_in_commands144
argument_list|)
expr_stmt|;
name|ITERATE19_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|ITERATE19
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|ITERATE19_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|char_literal20
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|32
argument_list|,
name|FOLLOW_32_in_commands147
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_function_in_commands150
argument_list|)
expr_stmt|;
name|function21
operator|=
name|function
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|function21
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|char_literal22
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|33
argument_list|,
name|FOLLOW_33_in_commands152
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:32:4: REVERSE ^ '{' ! function '}' !
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|REVERSE23
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|REVERSE
argument_list|,
name|FOLLOW_REVERSE_in_commands158
argument_list|)
expr_stmt|;
name|REVERSE23_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|REVERSE23
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|REVERSE23_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|char_literal24
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|32
argument_list|,
name|FOLLOW_32_in_commands161
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_function_in_commands164
argument_list|)
expr_stmt|;
name|function25
operator|=
name|function
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|function25
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|char_literal26
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|33
argument_list|,
name|FOLLOW_33_in_commands166
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:33:4: ENTRY ^ idList0 idList0 idList0
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|ENTRY27
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|ENTRY
argument_list|,
name|FOLLOW_ENTRY_in_commands172
argument_list|)
expr_stmt|;
name|ENTRY27_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|ENTRY27
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|ENTRY27_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_idList0_in_commands175
argument_list|)
expr_stmt|;
name|idList028
operator|=
name|idList0
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|idList028
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_idList0_in_commands177
argument_list|)
expr_stmt|;
name|idList029
operator|=
name|idList0
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|idList029
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_idList0_in_commands179
argument_list|)
expr_stmt|;
name|idList030
operator|=
name|idList0
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|idList030
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:34:4: SORT ^
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|SORT31
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|SORT
argument_list|,
name|FOLLOW_SORT_in_commands184
argument_list|)
expr_stmt|;
name|SORT31_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|SORT31
argument_list|)
expr_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
name|SORT31_tree
argument_list|,
name|root_0
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "commands"
DECL|class|identifier_return
specifier|public
specifier|static
class|class
name|identifier_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "identifier"
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:36:1: identifier : IDENTIFIER ;
DECL|method|identifier ()
specifier|public
specifier|final
name|BstParser
operator|.
name|identifier_return
name|identifier
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BstParser
operator|.
name|identifier_return
name|retval
init|=
operator|new
name|BstParser
operator|.
name|identifier_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|IDENTIFIER32
init|=
literal|null
decl_stmt|;
name|Object
name|IDENTIFIER32_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:37:2: ( IDENTIFIER )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:37:4: IDENTIFIER
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|IDENTIFIER32
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|IDENTIFIER
argument_list|,
name|FOLLOW_IDENTIFIER_in_identifier195
argument_list|)
expr_stmt|;
name|IDENTIFIER32_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|IDENTIFIER32
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|IDENTIFIER32_tree
argument_list|)
expr_stmt|;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "identifier"
DECL|class|id_return
specifier|public
specifier|static
class|class
name|id_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "id"
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:39:1: id : '{' ! identifier '}' !;
DECL|method|id ()
specifier|public
specifier|final
name|BstParser
operator|.
name|id_return
name|id
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BstParser
operator|.
name|id_return
name|retval
init|=
operator|new
name|BstParser
operator|.
name|id_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal33
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal35
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|identifier_return
name|identifier34
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal33_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal35_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:40:2: ( '{' ! identifier '}' !)
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:40:4: '{' ! identifier '}' !
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal33
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|32
argument_list|,
name|FOLLOW_32_in_id205
argument_list|)
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_identifier_in_id208
argument_list|)
expr_stmt|;
name|identifier34
operator|=
name|identifier
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|identifier34
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|char_literal35
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|33
argument_list|,
name|FOLLOW_33_in_id210
argument_list|)
expr_stmt|;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "id"
DECL|class|idList_return
specifier|public
specifier|static
class|class
name|idList_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "idList"
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:42:1: idList : '{' ( identifier )+ '}' -> ^( IDLIST ( identifier )+ ) ;
DECL|method|idList ()
specifier|public
specifier|final
name|BstParser
operator|.
name|idList_return
name|idList
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BstParser
operator|.
name|idList_return
name|retval
init|=
operator|new
name|BstParser
operator|.
name|idList_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal36
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal38
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|identifier_return
name|identifier37
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal36_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal38_tree
init|=
literal|null
decl_stmt|;
name|RewriteRuleTokenStream
name|stream_32
init|=
operator|new
name|RewriteRuleTokenStream
argument_list|(
name|adaptor
argument_list|,
literal|"token 32"
argument_list|)
decl_stmt|;
name|RewriteRuleTokenStream
name|stream_33
init|=
operator|new
name|RewriteRuleTokenStream
argument_list|(
name|adaptor
argument_list|,
literal|"token 33"
argument_list|)
decl_stmt|;
name|RewriteRuleSubtreeStream
name|stream_identifier
init|=
operator|new
name|RewriteRuleSubtreeStream
argument_list|(
name|adaptor
argument_list|,
literal|"rule identifier"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:43:2: ( '{' ( identifier )+ '}' -> ^( IDLIST ( identifier )+ ) )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:43:4: '{' ( identifier )+ '}'
block|{
name|char_literal36
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|32
argument_list|,
name|FOLLOW_32_in_idList222
argument_list|)
expr_stmt|;
name|stream_32
operator|.
name|add
argument_list|(
name|char_literal36
argument_list|)
expr_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:43:8: ( identifier )+
name|int
name|cnt3
init|=
literal|0
decl_stmt|;
name|loop3
label|:
do|do
block|{
name|int
name|alt3
init|=
literal|2
decl_stmt|;
name|int
name|LA3_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA3_0
operator|==
name|IDENTIFIER
operator|)
condition|)
block|{
name|alt3
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt3
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:43:8: identifier
block|{
name|pushFollow
argument_list|(
name|FOLLOW_identifier_in_idList224
argument_list|)
expr_stmt|;
name|identifier37
operator|=
name|identifier
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|stream_identifier
operator|.
name|add
argument_list|(
name|identifier37
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
if|if
condition|(
name|cnt3
operator|>=
literal|1
condition|)
break|break
name|loop3
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|3
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt3
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|char_literal38
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|33
argument_list|,
name|FOLLOW_33_in_idList227
argument_list|)
expr_stmt|;
name|stream_33
operator|.
name|add
argument_list|(
name|char_literal38
argument_list|)
expr_stmt|;
comment|// AST REWRITE
comment|// elements: identifier
comment|// token labels:
comment|// rule labels: retval
comment|// token list labels:
comment|// rule list labels:
comment|// wildcard labels:
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
name|RewriteRuleSubtreeStream
name|stream_retval
init|=
operator|new
name|RewriteRuleSubtreeStream
argument_list|(
name|adaptor
argument_list|,
literal|"rule retval"
argument_list|,
name|retval
operator|!=
literal|null
condition|?
name|retval
operator|.
name|tree
else|:
literal|null
argument_list|)
decl_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
comment|// 43:24: -> ^( IDLIST ( identifier )+ )
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:43:27: ^( IDLIST ( identifier )+ )
block|{
name|Object
name|root_1
init|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
decl_stmt|;
name|root_1
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|IDLIST
argument_list|,
literal|"IDLIST"
argument_list|)
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|stream_identifier
operator|.
name|hasNext
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|RewriteEarlyExitException
argument_list|()
throw|;
block|}
while|while
condition|(
name|stream_identifier
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_1
argument_list|,
name|stream_identifier
operator|.
name|nextTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stream_identifier
operator|.
name|reset
argument_list|()
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
block|}
block|}
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "idList"
DECL|class|idList0_return
specifier|public
specifier|static
class|class
name|idList0_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "idList0"
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:45:1: idList0 : '{' ( identifier )* '}' -> ^( IDLIST ( identifier )* ) ;
DECL|method|idList0 ()
specifier|public
specifier|final
name|BstParser
operator|.
name|idList0_return
name|idList0
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BstParser
operator|.
name|idList0_return
name|retval
init|=
operator|new
name|BstParser
operator|.
name|idList0_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal39
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal41
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|identifier_return
name|identifier40
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal39_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal41_tree
init|=
literal|null
decl_stmt|;
name|RewriteRuleTokenStream
name|stream_32
init|=
operator|new
name|RewriteRuleTokenStream
argument_list|(
name|adaptor
argument_list|,
literal|"token 32"
argument_list|)
decl_stmt|;
name|RewriteRuleTokenStream
name|stream_33
init|=
operator|new
name|RewriteRuleTokenStream
argument_list|(
name|adaptor
argument_list|,
literal|"token 33"
argument_list|)
decl_stmt|;
name|RewriteRuleSubtreeStream
name|stream_identifier
init|=
operator|new
name|RewriteRuleSubtreeStream
argument_list|(
name|adaptor
argument_list|,
literal|"rule identifier"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:46:2: ( '{' ( identifier )* '}' -> ^( IDLIST ( identifier )* ) )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:46:4: '{' ( identifier )* '}'
block|{
name|char_literal39
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|32
argument_list|,
name|FOLLOW_32_in_idList0247
argument_list|)
expr_stmt|;
name|stream_32
operator|.
name|add
argument_list|(
name|char_literal39
argument_list|)
expr_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:46:8: ( identifier )*
name|loop4
label|:
do|do
block|{
name|int
name|alt4
init|=
literal|2
decl_stmt|;
name|int
name|LA4_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA4_0
operator|==
name|IDENTIFIER
operator|)
condition|)
block|{
name|alt4
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt4
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:46:8: identifier
block|{
name|pushFollow
argument_list|(
name|FOLLOW_identifier_in_idList0249
argument_list|)
expr_stmt|;
name|identifier40
operator|=
name|identifier
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|stream_identifier
operator|.
name|add
argument_list|(
name|identifier40
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop4
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|char_literal41
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|33
argument_list|,
name|FOLLOW_33_in_idList0252
argument_list|)
expr_stmt|;
name|stream_33
operator|.
name|add
argument_list|(
name|char_literal41
argument_list|)
expr_stmt|;
comment|// AST REWRITE
comment|// elements: identifier
comment|// token labels:
comment|// rule labels: retval
comment|// token list labels:
comment|// rule list labels:
comment|// wildcard labels:
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
name|RewriteRuleSubtreeStream
name|stream_retval
init|=
operator|new
name|RewriteRuleSubtreeStream
argument_list|(
name|adaptor
argument_list|,
literal|"rule retval"
argument_list|,
name|retval
operator|!=
literal|null
condition|?
name|retval
operator|.
name|tree
else|:
literal|null
argument_list|)
decl_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
comment|// 46:24: -> ^( IDLIST ( identifier )* )
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:46:27: ^( IDLIST ( identifier )* )
block|{
name|Object
name|root_1
init|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
decl_stmt|;
name|root_1
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|IDLIST
argument_list|,
literal|"IDLIST"
argument_list|)
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:46:36: ( identifier )*
while|while
condition|(
name|stream_identifier
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_1
argument_list|,
name|stream_identifier
operator|.
name|nextTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stream_identifier
operator|.
name|reset
argument_list|()
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
block|}
block|}
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "idList0"
DECL|class|function_return
specifier|public
specifier|static
class|class
name|function_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "function"
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:48:1: function : ( '<' | '>' | '=' | '+' | '-' | ':=' | '*' | identifier );
DECL|method|function ()
specifier|public
specifier|final
name|BstParser
operator|.
name|function_return
name|function
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BstParser
operator|.
name|function_return
name|retval
init|=
operator|new
name|BstParser
operator|.
name|function_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal42
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal43
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal44
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal45
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal46
init|=
literal|null
decl_stmt|;
name|Token
name|string_literal47
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal48
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|identifier_return
name|identifier49
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal42_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal43_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal44_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal45_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal46_tree
init|=
literal|null
decl_stmt|;
name|Object
name|string_literal47_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal48_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:49:2: ( '<' | '>' | '=' | '+' | '-' | ':=' | '*' | identifier )
name|int
name|alt5
init|=
literal|8
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|29
case|:
block|{
name|alt5
operator|=
literal|1
expr_stmt|;
block|}
break|break;
case|case
literal|31
case|:
block|{
name|alt5
operator|=
literal|2
expr_stmt|;
block|}
break|break;
case|case
literal|30
case|:
block|{
name|alt5
operator|=
literal|3
expr_stmt|;
block|}
break|break;
case|case
literal|26
case|:
block|{
name|alt5
operator|=
literal|4
expr_stmt|;
block|}
break|break;
case|case
literal|27
case|:
block|{
name|alt5
operator|=
literal|5
expr_stmt|;
block|}
break|break;
case|case
literal|28
case|:
block|{
name|alt5
operator|=
literal|6
expr_stmt|;
block|}
break|break;
case|case
literal|25
case|:
block|{
name|alt5
operator|=
literal|7
expr_stmt|;
block|}
break|break;
case|case
name|IDENTIFIER
case|:
block|{
name|alt5
operator|=
literal|8
expr_stmt|;
block|}
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt5
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:49:4: '<'
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal42
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|29
argument_list|,
name|FOLLOW_29_in_function271
argument_list|)
expr_stmt|;
name|char_literal42_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal42
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal42_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:49:10: '>'
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal43
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|31
argument_list|,
name|FOLLOW_31_in_function275
argument_list|)
expr_stmt|;
name|char_literal43_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal43
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal43_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:49:16: '='
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal44
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|30
argument_list|,
name|FOLLOW_30_in_function279
argument_list|)
expr_stmt|;
name|char_literal44_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal44
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal44_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:49:22: '+'
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal45
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|26
argument_list|,
name|FOLLOW_26_in_function283
argument_list|)
expr_stmt|;
name|char_literal45_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal45
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal45_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:49:28: '-'
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal46
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|27
argument_list|,
name|FOLLOW_27_in_function287
argument_list|)
expr_stmt|;
name|char_literal46_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal46
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal46_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:49:34: ':='
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|string_literal47
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|28
argument_list|,
name|FOLLOW_28_in_function291
argument_list|)
expr_stmt|;
name|string_literal47_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|string_literal47
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|string_literal47_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:49:41: '*'
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|char_literal48
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|25
argument_list|,
name|FOLLOW_25_in_function295
argument_list|)
expr_stmt|;
name|char_literal48_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|char_literal48
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|char_literal48_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:49:47: identifier
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_identifier_in_function299
argument_list|)
expr_stmt|;
name|identifier49
operator|=
name|identifier
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|identifier49
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "function"
DECL|class|stack_return
specifier|public
specifier|static
class|class
name|stack_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "stack"
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:51:1: stack : '{' ( stackitem )+ '}' -> ^( STACK ( stackitem )+ ) ;
DECL|method|stack ()
specifier|public
specifier|final
name|BstParser
operator|.
name|stack_return
name|stack
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BstParser
operator|.
name|stack_return
name|retval
init|=
operator|new
name|BstParser
operator|.
name|stack_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal50
init|=
literal|null
decl_stmt|;
name|Token
name|char_literal52
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|stackitem_return
name|stackitem51
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal50_tree
init|=
literal|null
decl_stmt|;
name|Object
name|char_literal52_tree
init|=
literal|null
decl_stmt|;
name|RewriteRuleTokenStream
name|stream_32
init|=
operator|new
name|RewriteRuleTokenStream
argument_list|(
name|adaptor
argument_list|,
literal|"token 32"
argument_list|)
decl_stmt|;
name|RewriteRuleTokenStream
name|stream_33
init|=
operator|new
name|RewriteRuleTokenStream
argument_list|(
name|adaptor
argument_list|,
literal|"token 33"
argument_list|)
decl_stmt|;
name|RewriteRuleSubtreeStream
name|stream_stackitem
init|=
operator|new
name|RewriteRuleSubtreeStream
argument_list|(
name|adaptor
argument_list|,
literal|"rule stackitem"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:52:2: ( '{' ( stackitem )+ '}' -> ^( STACK ( stackitem )+ ) )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:52:4: '{' ( stackitem )+ '}'
block|{
name|char_literal50
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|32
argument_list|,
name|FOLLOW_32_in_stack310
argument_list|)
expr_stmt|;
name|stream_32
operator|.
name|add
argument_list|(
name|char_literal50
argument_list|)
expr_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:52:8: ( stackitem )+
name|int
name|cnt6
init|=
literal|0
decl_stmt|;
name|loop6
label|:
do|do
block|{
name|int
name|alt6
init|=
literal|2
decl_stmt|;
name|int
name|LA6_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA6_0
operator|==
name|IDENTIFIER
operator|||
name|LA6_0
operator|==
name|INTEGER
operator|||
name|LA6_0
operator|==
name|QUOTED
operator|||
name|LA6_0
operator|==
name|STRING
operator|||
operator|(
name|LA6_0
operator|>=
literal|25
operator|&&
name|LA6_0
operator|<=
literal|32
operator|)
operator|)
condition|)
block|{
name|alt6
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt6
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:52:8: stackitem
block|{
name|pushFollow
argument_list|(
name|FOLLOW_stackitem_in_stack312
argument_list|)
expr_stmt|;
name|stackitem51
operator|=
name|stackitem
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|stream_stackitem
operator|.
name|add
argument_list|(
name|stackitem51
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
if|if
condition|(
name|cnt6
operator|>=
literal|1
condition|)
break|break
name|loop6
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|6
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt6
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|char_literal52
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
literal|33
argument_list|,
name|FOLLOW_33_in_stack315
argument_list|)
expr_stmt|;
name|stream_33
operator|.
name|add
argument_list|(
name|char_literal52
argument_list|)
expr_stmt|;
comment|// AST REWRITE
comment|// elements: stackitem
comment|// token labels:
comment|// rule labels: retval
comment|// token list labels:
comment|// rule list labels:
comment|// wildcard labels:
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
name|RewriteRuleSubtreeStream
name|stream_retval
init|=
operator|new
name|RewriteRuleSubtreeStream
argument_list|(
name|adaptor
argument_list|,
literal|"rule retval"
argument_list|,
name|retval
operator|!=
literal|null
condition|?
name|retval
operator|.
name|tree
else|:
literal|null
argument_list|)
decl_stmt|;
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
comment|// 52:23: -> ^( STACK ( stackitem )+ )
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:52:26: ^( STACK ( stackitem )+ )
block|{
name|Object
name|root_1
init|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
decl_stmt|;
name|root_1
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|becomeRoot
argument_list|(
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|STACK
argument_list|,
literal|"STACK"
argument_list|)
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|stream_stackitem
operator|.
name|hasNext
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|RewriteEarlyExitException
argument_list|()
throw|;
block|}
while|while
condition|(
name|stream_stackitem
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_1
argument_list|,
name|stream_stackitem
operator|.
name|nextTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stream_stackitem
operator|.
name|reset
argument_list|()
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|root_1
argument_list|)
expr_stmt|;
block|}
block|}
name|retval
operator|.
name|tree
operator|=
name|root_0
expr_stmt|;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "stack"
DECL|class|stackitem_return
specifier|public
specifier|static
class|class
name|stackitem_return
extends|extends
name|ParserRuleReturnScope
block|{
DECL|field|tree
name|Object
name|tree
decl_stmt|;
DECL|method|getTree ()
specifier|public
name|Object
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
block|}
empty_stmt|;
comment|// $ANTLR start "stackitem"
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:54:1: stackitem : ( function | STRING | INTEGER | QUOTED | stack );
DECL|method|stackitem ()
specifier|public
specifier|final
name|BstParser
operator|.
name|stackitem_return
name|stackitem
parameter_list|()
throws|throws
name|RecognitionException
block|{
name|BstParser
operator|.
name|stackitem_return
name|retval
init|=
operator|new
name|BstParser
operator|.
name|stackitem_return
argument_list|()
decl_stmt|;
name|retval
operator|.
name|start
operator|=
name|input
operator|.
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|root_0
init|=
literal|null
decl_stmt|;
name|Token
name|STRING54
init|=
literal|null
decl_stmt|;
name|Token
name|INTEGER55
init|=
literal|null
decl_stmt|;
name|Token
name|QUOTED56
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|function_return
name|function53
init|=
literal|null
decl_stmt|;
name|BstParser
operator|.
name|stack_return
name|stack57
init|=
literal|null
decl_stmt|;
name|Object
name|STRING54_tree
init|=
literal|null
decl_stmt|;
name|Object
name|INTEGER55_tree
init|=
literal|null
decl_stmt|;
name|Object
name|QUOTED56_tree
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:55:2: ( function | STRING | INTEGER | QUOTED | stack )
name|int
name|alt7
init|=
literal|5
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|IDENTIFIER
case|:
case|case
literal|25
case|:
case|case
literal|26
case|:
case|case
literal|27
case|:
case|case
literal|28
case|:
case|case
literal|29
case|:
case|case
literal|30
case|:
case|case
literal|31
case|:
block|{
name|alt7
operator|=
literal|1
expr_stmt|;
block|}
break|break;
case|case
name|STRING
case|:
block|{
name|alt7
operator|=
literal|2
expr_stmt|;
block|}
break|break;
case|case
name|INTEGER
case|:
block|{
name|alt7
operator|=
literal|3
expr_stmt|;
block|}
break|break;
case|case
name|QUOTED
case|:
block|{
name|alt7
operator|=
literal|4
expr_stmt|;
block|}
break|break;
case|case
literal|32
case|:
block|{
name|alt7
operator|=
literal|5
expr_stmt|;
block|}
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|""
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt7
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:55:4: function
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_function_in_stackitem334
argument_list|)
expr_stmt|;
name|function53
operator|=
name|function
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|function53
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:56:4: STRING
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|STRING54
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|STRING
argument_list|,
name|FOLLOW_STRING_in_stackitem339
argument_list|)
expr_stmt|;
name|STRING54_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|STRING54
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|STRING54_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:57:4: INTEGER
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|INTEGER55
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|INTEGER
argument_list|,
name|FOLLOW_INTEGER_in_stackitem345
argument_list|)
expr_stmt|;
name|INTEGER55_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|INTEGER55
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|INTEGER55_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:58:4: QUOTED
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|QUOTED56
operator|=
operator|(
name|Token
operator|)
name|match
argument_list|(
name|input
argument_list|,
name|QUOTED
argument_list|,
name|FOLLOW_QUOTED_in_stackitem351
argument_list|)
expr_stmt|;
name|QUOTED56_tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|create
argument_list|(
name|QUOTED56
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|QUOTED56_tree
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:59:4: stack
block|{
name|root_0
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|nil
argument_list|()
expr_stmt|;
name|pushFollow
argument_list|(
name|FOLLOW_stack_in_stackitem356
argument_list|)
expr_stmt|;
name|stack57
operator|=
name|stack
argument_list|()
expr_stmt|;
name|state
operator|.
name|_fsp
operator|--
expr_stmt|;
name|adaptor
operator|.
name|addChild
argument_list|(
name|root_0
argument_list|,
name|stack57
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|retval
operator|.
name|stop
operator|=
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|rulePostProcessing
argument_list|(
name|root_0
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setTokenBoundaries
argument_list|(
name|retval
operator|.
name|tree
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|retval
operator|.
name|stop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
name|reportError
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|input
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|retval
operator|.
name|tree
operator|=
operator|(
name|Object
operator|)
name|adaptor
operator|.
name|errorNode
argument_list|(
name|input
argument_list|,
name|retval
operator|.
name|start
argument_list|,
name|input
operator|.
name|LT
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
return|return
name|retval
return|;
block|}
comment|// $ANTLR end "stackitem"
comment|// Delegated rules
DECL|field|FOLLOW_commands_in_program62
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_commands_in_program62
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x00000000009C98E2L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_STRINGS_in_commands82
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_STRINGS_in_commands82
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_idList_in_commands85
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_idList_in_commands85
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_INTEGERS_in_commands90
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_INTEGERS_in_commands90
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_idList_in_commands93
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_idList_in_commands93
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_FUNCTION_in_commands98
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_FUNCTION_in_commands98
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_id_in_commands101
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_id_in_commands101
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_stack_in_commands103
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_stack_in_commands103
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_MACRO_in_commands108
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_MACRO_in_commands108
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_id_in_commands111
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_id_in_commands111
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_32_in_commands113
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_32_in_commands113
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000400000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_STRING_in_commands116
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_STRING_in_commands116
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000200000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_33_in_commands118
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_33_in_commands118
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_READ_in_commands124
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_READ_in_commands124
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_EXECUTE_in_commands130
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_EXECUTE_in_commands130
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_32_in_commands133
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_32_in_commands133
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x00000000FE000100L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_function_in_commands136
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_function_in_commands136
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000200000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_33_in_commands138
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_33_in_commands138
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_ITERATE_in_commands144
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_ITERATE_in_commands144
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_32_in_commands147
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_32_in_commands147
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x00000000FE000100L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_function_in_commands150
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_function_in_commands150
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000200000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_33_in_commands152
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_33_in_commands152
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_REVERSE_in_commands158
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_REVERSE_in_commands158
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_32_in_commands161
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_32_in_commands161
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x00000000FE000100L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_function_in_commands164
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_function_in_commands164
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000200000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_33_in_commands166
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_33_in_commands166
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_ENTRY_in_commands172
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_ENTRY_in_commands172
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_idList0_in_commands175
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_idList0_in_commands175
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_idList0_in_commands177
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_idList0_in_commands177
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000100000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_idList0_in_commands179
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_idList0_in_commands179
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_SORT_in_commands184
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_SORT_in_commands184
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_IDENTIFIER_in_identifier195
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_IDENTIFIER_in_identifier195
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_32_in_id205
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_32_in_id205
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000100L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_identifier_in_id208
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_identifier_in_id208
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000200000000L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_33_in_id210
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_33_in_id210
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_32_in_idList222
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_32_in_idList222
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000100L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_identifier_in_idList224
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_identifier_in_idList224
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000200000100L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_33_in_idList227
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_33_in_idList227
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_32_in_idList0247
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_32_in_idList0247
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000200000100L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_identifier_in_idList0249
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_identifier_in_idList0249
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000200000100L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_33_in_idList0252
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_33_in_idList0252
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_29_in_function271
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_29_in_function271
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_31_in_function275
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_31_in_function275
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_30_in_function279
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_30_in_function279
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_26_in_function283
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_26_in_function283
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_27_in_function287
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_27_in_function287
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_28_in_function291
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_28_in_function291
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_25_in_function295
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_25_in_function295
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_identifier_in_function299
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_identifier_in_function299
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_32_in_stack310
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_32_in_stack310
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x00000001FE420500L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_stackitem_in_stack312
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_stackitem_in_stack312
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x00000003FE420500L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_33_in_stack315
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_33_in_stack315
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_function_in_stackitem334
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_function_in_stackitem334
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_STRING_in_stackitem339
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_STRING_in_stackitem339
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_INTEGER_in_stackitem345
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_INTEGER_in_stackitem345
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_QUOTED_in_stackitem351
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_QUOTED_in_stackitem351
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
DECL|field|FOLLOW_stack_in_stackitem356
specifier|public
specifier|static
specifier|final
name|BitSet
name|FOLLOW_stack_in_stackitem356
init|=
operator|new
name|BitSet
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0x0000000000000002L
block|}
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

