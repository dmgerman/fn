begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.bst
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bst
package|;
end_package

begin_comment
comment|// $ANTLR 3.0b4 bst.g 2006-09-17 01:45:41
end_comment

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
DECL|class|BstLexer
specifier|public
class|class
name|BstLexer
extends|extends
name|Lexer
block|{
DECL|field|T29
specifier|public
specifier|static
specifier|final
name|int
name|T29
init|=
literal|29
decl_stmt|;
DECL|field|ENTRY
specifier|public
specifier|static
specifier|final
name|int
name|ENTRY
init|=
literal|6
decl_stmt|;
DECL|field|INTEGERS
specifier|public
specifier|static
specifier|final
name|int
name|INTEGERS
init|=
literal|9
decl_stmt|;
DECL|field|T36
specifier|public
specifier|static
specifier|final
name|int
name|T36
init|=
literal|36
decl_stmt|;
DECL|field|T58
specifier|public
specifier|static
specifier|final
name|int
name|T58
init|=
literal|58
decl_stmt|;
DECL|field|COMMANDS
specifier|public
specifier|static
specifier|final
name|int
name|COMMANDS
init|=
literal|7
decl_stmt|;
DECL|field|T35
specifier|public
specifier|static
specifier|final
name|int
name|T35
init|=
literal|35
decl_stmt|;
DECL|field|EXECUTE
specifier|public
specifier|static
specifier|final
name|int
name|EXECUTE
init|=
literal|14
decl_stmt|;
DECL|field|T61
specifier|public
specifier|static
specifier|final
name|int
name|T61
init|=
literal|61
decl_stmt|;
DECL|field|T45
specifier|public
specifier|static
specifier|final
name|int
name|T45
init|=
literal|45
decl_stmt|;
DECL|field|T34
specifier|public
specifier|static
specifier|final
name|int
name|T34
init|=
literal|34
decl_stmt|;
DECL|field|INTEGER
specifier|public
specifier|static
specifier|final
name|int
name|INTEGER
init|=
literal|19
decl_stmt|;
DECL|field|T25
specifier|public
specifier|static
specifier|final
name|int
name|T25
init|=
literal|25
decl_stmt|;
DECL|field|T37
specifier|public
specifier|static
specifier|final
name|int
name|T37
init|=
literal|37
decl_stmt|;
DECL|field|FUNCTION
specifier|public
specifier|static
specifier|final
name|int
name|FUNCTION
init|=
literal|10
decl_stmt|;
DECL|field|T26
specifier|public
specifier|static
specifier|final
name|int
name|T26
init|=
literal|26
decl_stmt|;
DECL|field|T32
specifier|public
specifier|static
specifier|final
name|int
name|T32
init|=
literal|32
decl_stmt|;
DECL|field|T51
specifier|public
specifier|static
specifier|final
name|int
name|T51
init|=
literal|51
decl_stmt|;
DECL|field|STRINGS
specifier|public
specifier|static
specifier|final
name|int
name|STRINGS
init|=
literal|8
decl_stmt|;
DECL|field|T46
specifier|public
specifier|static
specifier|final
name|int
name|T46
init|=
literal|46
decl_stmt|;
DECL|field|T38
specifier|public
specifier|static
specifier|final
name|int
name|T38
init|=
literal|38
decl_stmt|;
DECL|field|MACRO
specifier|public
specifier|static
specifier|final
name|int
name|MACRO
init|=
literal|11
decl_stmt|;
DECL|field|T41
specifier|public
specifier|static
specifier|final
name|int
name|T41
init|=
literal|41
decl_stmt|;
DECL|field|IDLIST
specifier|public
specifier|static
specifier|final
name|int
name|IDLIST
init|=
literal|4
decl_stmt|;
DECL|field|NUMERAL
specifier|public
specifier|static
specifier|final
name|int
name|NUMERAL
init|=
literal|22
decl_stmt|;
DECL|field|T39
specifier|public
specifier|static
specifier|final
name|int
name|T39
init|=
literal|39
decl_stmt|;
DECL|field|T62
specifier|public
specifier|static
specifier|final
name|int
name|T62
init|=
literal|62
decl_stmt|;
DECL|field|T44
specifier|public
specifier|static
specifier|final
name|int
name|T44
init|=
literal|44
decl_stmt|;
DECL|field|T55
specifier|public
specifier|static
specifier|final
name|int
name|T55
init|=
literal|55
decl_stmt|;
DECL|field|LETTER
specifier|public
specifier|static
specifier|final
name|int
name|LETTER
init|=
literal|21
decl_stmt|;
DECL|field|T33
specifier|public
specifier|static
specifier|final
name|int
name|T33
init|=
literal|33
decl_stmt|;
DECL|field|T50
specifier|public
specifier|static
specifier|final
name|int
name|T50
init|=
literal|50
decl_stmt|;
DECL|field|WS
specifier|public
specifier|static
specifier|final
name|int
name|WS
init|=
literal|23
decl_stmt|;
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|12
decl_stmt|;
DECL|field|T43
specifier|public
specifier|static
specifier|final
name|int
name|T43
init|=
literal|43
decl_stmt|;
DECL|field|T28
specifier|public
specifier|static
specifier|final
name|int
name|T28
init|=
literal|28
decl_stmt|;
DECL|field|T42
specifier|public
specifier|static
specifier|final
name|int
name|T42
init|=
literal|42
decl_stmt|;
DECL|field|T40
specifier|public
specifier|static
specifier|final
name|int
name|T40
init|=
literal|40
decl_stmt|;
DECL|field|T63
specifier|public
specifier|static
specifier|final
name|int
name|T63
init|=
literal|63
decl_stmt|;
DECL|field|T57
specifier|public
specifier|static
specifier|final
name|int
name|T57
init|=
literal|57
decl_stmt|;
DECL|field|LINE_COMMENT
specifier|public
specifier|static
specifier|final
name|int
name|LINE_COMMENT
init|=
literal|24
decl_stmt|;
DECL|field|SORT
specifier|public
specifier|static
specifier|final
name|int
name|SORT
init|=
literal|17
decl_stmt|;
DECL|field|T56
specifier|public
specifier|static
specifier|final
name|int
name|T56
init|=
literal|56
decl_stmt|;
DECL|field|STACK
specifier|public
specifier|static
specifier|final
name|int
name|STACK
init|=
literal|5
decl_stmt|;
DECL|field|REVERSE
specifier|public
specifier|static
specifier|final
name|int
name|REVERSE
init|=
literal|16
decl_stmt|;
DECL|field|QUOTED
specifier|public
specifier|static
specifier|final
name|int
name|QUOTED
init|=
literal|20
decl_stmt|;
DECL|field|T59
specifier|public
specifier|static
specifier|final
name|int
name|T59
init|=
literal|59
decl_stmt|;
DECL|field|ITERATE
specifier|public
specifier|static
specifier|final
name|int
name|ITERATE
init|=
literal|15
decl_stmt|;
DECL|field|T48
specifier|public
specifier|static
specifier|final
name|int
name|T48
init|=
literal|48
decl_stmt|;
DECL|field|T54
specifier|public
specifier|static
specifier|final
name|int
name|T54
init|=
literal|54
decl_stmt|;
DECL|field|EOF
specifier|public
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|T47
specifier|public
specifier|static
specifier|final
name|int
name|T47
init|=
literal|47
decl_stmt|;
DECL|field|Tokens
specifier|public
specifier|static
specifier|final
name|int
name|Tokens
init|=
literal|64
decl_stmt|;
DECL|field|T53
specifier|public
specifier|static
specifier|final
name|int
name|T53
init|=
literal|53
decl_stmt|;
DECL|field|T60
specifier|public
specifier|static
specifier|final
name|int
name|T60
init|=
literal|60
decl_stmt|;
DECL|field|T31
specifier|public
specifier|static
specifier|final
name|int
name|T31
init|=
literal|31
decl_stmt|;
DECL|field|T49
specifier|public
specifier|static
specifier|final
name|int
name|T49
init|=
literal|49
decl_stmt|;
DECL|field|IDENTIFIER
specifier|public
specifier|static
specifier|final
name|int
name|IDENTIFIER
init|=
literal|18
decl_stmt|;
DECL|field|T27
specifier|public
specifier|static
specifier|final
name|int
name|T27
init|=
literal|27
decl_stmt|;
DECL|field|T52
specifier|public
specifier|static
specifier|final
name|int
name|T52
init|=
literal|52
decl_stmt|;
DECL|field|T30
specifier|public
specifier|static
specifier|final
name|int
name|T30
init|=
literal|30
decl_stmt|;
DECL|field|READ
specifier|public
specifier|static
specifier|final
name|int
name|READ
init|=
literal|13
decl_stmt|;
DECL|method|BstLexer ()
specifier|public
name|BstLexer
parameter_list|()
block|{
empty_stmt|;
block|}
DECL|method|BstLexer (CharStream input)
specifier|public
name|BstLexer
parameter_list|(
name|CharStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|getGrammarFileName ()
specifier|public
name|String
name|getGrammarFileName
parameter_list|()
block|{
return|return
literal|"bst.g"
return|;
block|}
comment|// $ANTLR start T25
DECL|method|mT25 ()
specifier|public
name|void
name|mT25
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T25
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:3:7: ( '{' )
comment|// bst.g:3:7: '{'
block|{
name|match
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T25
comment|// $ANTLR start T26
DECL|method|mT26 ()
specifier|public
name|void
name|mT26
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T26
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:4:7: ( '}' )
comment|// bst.g:4:7: '}'
block|{
name|match
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T26
comment|// $ANTLR start T27
DECL|method|mT27 ()
specifier|public
name|void
name|mT27
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T27
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:5:7: ( '<' )
comment|// bst.g:5:7: '<'
block|{
name|match
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T27
comment|// $ANTLR start T28
DECL|method|mT28 ()
specifier|public
name|void
name|mT28
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T28
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:6:7: ( '>' )
comment|// bst.g:6:7: '>'
block|{
name|match
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T28
comment|// $ANTLR start T29
DECL|method|mT29 ()
specifier|public
name|void
name|mT29
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T29
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:7:7: ( '=' )
comment|// bst.g:7:7: '='
block|{
name|match
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T29
comment|// $ANTLR start T30
DECL|method|mT30 ()
specifier|public
name|void
name|mT30
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T30
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:8:7: ( '+' )
comment|// bst.g:8:7: '+'
block|{
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T30
comment|// $ANTLR start T31
DECL|method|mT31 ()
specifier|public
name|void
name|mT31
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T31
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:9:7: ( '-' )
comment|// bst.g:9:7: '-'
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T31
comment|// $ANTLR start T32
DECL|method|mT32 ()
specifier|public
name|void
name|mT32
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T32
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:10:7: ( ':=' )
comment|// bst.g:10:7: ':='
block|{
name|match
argument_list|(
literal|":="
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T32
comment|// $ANTLR start T33
DECL|method|mT33 ()
specifier|public
name|void
name|mT33
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T33
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:11:7: ( '*' )
comment|// bst.g:11:7: '*'
block|{
name|match
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T33
comment|// $ANTLR start T34
DECL|method|mT34 ()
specifier|public
name|void
name|mT34
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T34
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:12:7: ( 'add.period$' )
comment|// bst.g:12:7: 'add.period$'
block|{
name|match
argument_list|(
literal|"add.period$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T34
comment|// $ANTLR start T35
DECL|method|mT35 ()
specifier|public
name|void
name|mT35
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T35
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:13:7: ( 'call.type$' )
comment|// bst.g:13:7: 'call.type$'
block|{
name|match
argument_list|(
literal|"call.type$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T35
comment|// $ANTLR start T36
DECL|method|mT36 ()
specifier|public
name|void
name|mT36
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T36
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:14:7: ( 'change.case$' )
comment|// bst.g:14:7: 'change.case$'
block|{
name|match
argument_list|(
literal|"change.case$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T36
comment|// $ANTLR start T37
DECL|method|mT37 ()
specifier|public
name|void
name|mT37
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T37
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:15:7: ( 'chr.to.int$' )
comment|// bst.g:15:7: 'chr.to.int$'
block|{
name|match
argument_list|(
literal|"chr.to.int$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T37
comment|// $ANTLR start T38
DECL|method|mT38 ()
specifier|public
name|void
name|mT38
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T38
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:16:7: ( 'cite$' )
comment|// bst.g:16:7: 'cite$'
block|{
name|match
argument_list|(
literal|"cite$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T38
comment|// $ANTLR start T39
DECL|method|mT39 ()
specifier|public
name|void
name|mT39
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T39
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:17:7: ( 'duplicat$' )
comment|// bst.g:17:7: 'duplicat$'
block|{
name|match
argument_list|(
literal|"duplicat$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T39
comment|// $ANTLR start T40
DECL|method|mT40 ()
specifier|public
name|void
name|mT40
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T40
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:18:7: ( 'empty$' )
comment|// bst.g:18:7: 'empty$'
block|{
name|match
argument_list|(
literal|"empty$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T40
comment|// $ANTLR start T41
DECL|method|mT41 ()
specifier|public
name|void
name|mT41
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T41
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:19:7: ( 'format.name$' )
comment|// bst.g:19:7: 'format.name$'
block|{
name|match
argument_list|(
literal|"format.name$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T41
comment|// $ANTLR start T42
DECL|method|mT42 ()
specifier|public
name|void
name|mT42
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T42
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:20:7: ( 'if$' )
comment|// bst.g:20:7: 'if$'
block|{
name|match
argument_list|(
literal|"if$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T42
comment|// $ANTLR start T43
DECL|method|mT43 ()
specifier|public
name|void
name|mT43
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T43
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:21:7: ( 'int.to.chr$' )
comment|// bst.g:21:7: 'int.to.chr$'
block|{
name|match
argument_list|(
literal|"int.to.chr$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T43
comment|// $ANTLR start T44
DECL|method|mT44 ()
specifier|public
name|void
name|mT44
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T44
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:22:7: ( 'int.to.str$' )
comment|// bst.g:22:7: 'int.to.str$'
block|{
name|match
argument_list|(
literal|"int.to.str$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T44
comment|// $ANTLR start T45
DECL|method|mT45 ()
specifier|public
name|void
name|mT45
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T45
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:23:7: ( 'missing$' )
comment|// bst.g:23:7: 'missing$'
block|{
name|match
argument_list|(
literal|"missing$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T45
comment|// $ANTLR start T46
DECL|method|mT46 ()
specifier|public
name|void
name|mT46
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T46
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:24:7: ( 'newline$' )
comment|// bst.g:24:7: 'newline$'
block|{
name|match
argument_list|(
literal|"newline$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T46
comment|// $ANTLR start T47
DECL|method|mT47 ()
specifier|public
name|void
name|mT47
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T47
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:25:7: ( 'num.names$' )
comment|// bst.g:25:7: 'num.names$'
block|{
name|match
argument_list|(
literal|"num.names$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T47
comment|// $ANTLR start T48
DECL|method|mT48 ()
specifier|public
name|void
name|mT48
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T48
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:26:7: ( 'pop$' )
comment|// bst.g:26:7: 'pop$'
block|{
name|match
argument_list|(
literal|"pop$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T48
comment|// $ANTLR start T49
DECL|method|mT49 ()
specifier|public
name|void
name|mT49
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T49
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:27:7: ( 'preamble$' )
comment|// bst.g:27:7: 'preamble$'
block|{
name|match
argument_list|(
literal|"preamble$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T49
comment|// $ANTLR start T50
DECL|method|mT50 ()
specifier|public
name|void
name|mT50
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T50
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:28:7: ( 'purify$' )
comment|// bst.g:28:7: 'purify$'
block|{
name|match
argument_list|(
literal|"purify$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T50
comment|// $ANTLR start T51
DECL|method|mT51 ()
specifier|public
name|void
name|mT51
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T51
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:29:7: ( 'quote$' )
comment|// bst.g:29:7: 'quote$'
block|{
name|match
argument_list|(
literal|"quote$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T51
comment|// $ANTLR start T52
DECL|method|mT52 ()
specifier|public
name|void
name|mT52
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T52
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:30:7: ( 'skip$' )
comment|// bst.g:30:7: 'skip$'
block|{
name|match
argument_list|(
literal|"skip$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T52
comment|// $ANTLR start T53
DECL|method|mT53 ()
specifier|public
name|void
name|mT53
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T53
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:31:7: ( 'stack$' )
comment|// bst.g:31:7: 'stack$'
block|{
name|match
argument_list|(
literal|"stack$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T53
comment|// $ANTLR start T54
DECL|method|mT54 ()
specifier|public
name|void
name|mT54
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T54
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:32:7: ( 'substring$' )
comment|// bst.g:32:7: 'substring$'
block|{
name|match
argument_list|(
literal|"substring$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T54
comment|// $ANTLR start T55
DECL|method|mT55 ()
specifier|public
name|void
name|mT55
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T55
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:33:7: ( 'swap$' )
comment|// bst.g:33:7: 'swap$'
block|{
name|match
argument_list|(
literal|"swap$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T55
comment|// $ANTLR start T56
DECL|method|mT56 ()
specifier|public
name|void
name|mT56
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T56
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:34:7: ( 'text.length$' )
comment|// bst.g:34:7: 'text.length$'
block|{
name|match
argument_list|(
literal|"text.length$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T56
comment|// $ANTLR start T57
DECL|method|mT57 ()
specifier|public
name|void
name|mT57
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T57
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:35:7: ( 'text.prefix$' )
comment|// bst.g:35:7: 'text.prefix$'
block|{
name|match
argument_list|(
literal|"text.prefix$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T57
comment|// $ANTLR start T58
DECL|method|mT58 ()
specifier|public
name|void
name|mT58
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T58
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:36:7: ( 'top$' )
comment|// bst.g:36:7: 'top$'
block|{
name|match
argument_list|(
literal|"top$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T58
comment|// $ANTLR start T59
DECL|method|mT59 ()
specifier|public
name|void
name|mT59
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T59
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:37:7: ( 'type$' )
comment|// bst.g:37:7: 'type$'
block|{
name|match
argument_list|(
literal|"type$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T59
comment|// $ANTLR start T60
DECL|method|mT60 ()
specifier|public
name|void
name|mT60
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T60
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:38:7: ( 'warning$' )
comment|// bst.g:38:7: 'warning$'
block|{
name|match
argument_list|(
literal|"warning$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T60
comment|// $ANTLR start T61
DECL|method|mT61 ()
specifier|public
name|void
name|mT61
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T61
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:39:7: ( 'while$' )
comment|// bst.g:39:7: 'while$'
block|{
name|match
argument_list|(
literal|"while$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T61
comment|// $ANTLR start T62
DECL|method|mT62 ()
specifier|public
name|void
name|mT62
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T62
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:40:7: ( 'width$' )
comment|// bst.g:40:7: 'width$'
block|{
name|match
argument_list|(
literal|"width$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T62
comment|// $ANTLR start T63
DECL|method|mT63 ()
specifier|public
name|void
name|mT63
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|T63
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:41:7: ( 'write$' )
comment|// bst.g:41:7: 'write$'
block|{
name|match
argument_list|(
literal|"write$"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T63
comment|// $ANTLR start STRINGS
DECL|method|mSTRINGS ()
specifier|public
name|void
name|mSTRINGS
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|STRINGS
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:58:11: ( 'STRINGS' )
comment|// bst.g:58:11: 'STRINGS'
block|{
name|match
argument_list|(
literal|"STRINGS"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end STRINGS
comment|// $ANTLR start INTEGERS
DECL|method|mINTEGERS ()
specifier|public
name|void
name|mINTEGERS
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|INTEGERS
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:59:12: ( 'INTEGERS' )
comment|// bst.g:59:12: 'INTEGERS'
block|{
name|match
argument_list|(
literal|"INTEGERS"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end INTEGERS
comment|// $ANTLR start FUNCTION
DECL|method|mFUNCTION ()
specifier|public
name|void
name|mFUNCTION
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|FUNCTION
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:60:12: ( 'FUNCTION' )
comment|// bst.g:60:12: 'FUNCTION'
block|{
name|match
argument_list|(
literal|"FUNCTION"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end FUNCTION
comment|// $ANTLR start EXECUTE
DECL|method|mEXECUTE ()
specifier|public
name|void
name|mEXECUTE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|EXECUTE
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:61:11: ( 'EXECUTE' )
comment|// bst.g:61:11: 'EXECUTE'
block|{
name|match
argument_list|(
literal|"EXECUTE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end EXECUTE
comment|// $ANTLR start SORT
DECL|method|mSORT ()
specifier|public
name|void
name|mSORT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|SORT
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:62:8: ( 'SORT' )
comment|// bst.g:62:8: 'SORT'
block|{
name|match
argument_list|(
literal|"SORT"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end SORT
comment|// $ANTLR start ITERATE
DECL|method|mITERATE ()
specifier|public
name|void
name|mITERATE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|ITERATE
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:63:11: ( 'ITERATE' )
comment|// bst.g:63:11: 'ITERATE'
block|{
name|match
argument_list|(
literal|"ITERATE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end ITERATE
comment|// $ANTLR start REVERSE
DECL|method|mREVERSE ()
specifier|public
name|void
name|mREVERSE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|REVERSE
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:64:11: ( 'REVERSE' )
comment|// bst.g:64:11: 'REVERSE'
block|{
name|match
argument_list|(
literal|"REVERSE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end REVERSE
comment|// $ANTLR start ENTRY
DECL|method|mENTRY ()
specifier|public
name|void
name|mENTRY
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|ENTRY
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:65:9: ( 'ENTRY' )
comment|// bst.g:65:9: 'ENTRY'
block|{
name|match
argument_list|(
literal|"ENTRY"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end ENTRY
comment|// $ANTLR start READ
DECL|method|mREAD ()
specifier|public
name|void
name|mREAD
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|READ
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:66:8: ( 'READ' )
comment|// bst.g:66:8: 'READ'
block|{
name|match
argument_list|(
literal|"READ"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end READ
comment|// $ANTLR start MACRO
DECL|method|mMACRO ()
specifier|public
name|void
name|mMACRO
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|MACRO
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:67:9: ( 'MACRO' )
comment|// bst.g:67:9: 'MACRO'
block|{
name|match
argument_list|(
literal|"MACRO"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end MACRO
comment|// $ANTLR start QUOTED
DECL|method|mQUOTED ()
specifier|public
name|void
name|mQUOTED
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|QUOTED
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:70:4: ( '\\'' IDENTIFIER )
comment|// bst.g:70:4: '\\'' IDENTIFIER
block|{
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|mIDENTIFIER
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end QUOTED
comment|// $ANTLR start IDENTIFIER
DECL|method|mIDENTIFIER ()
specifier|public
name|void
name|mIDENTIFIER
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|IDENTIFIER
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:73:4: ( LETTER ( LETTER | NUMERAL )* )
comment|// bst.g:73:4: LETTER ( LETTER | NUMERAL )*
block|{
name|mLETTER
argument_list|()
expr_stmt|;
comment|// bst.g:73:11: ( LETTER | NUMERAL )*
name|loop1
label|:
do|do
block|{
name|int
name|alt1
init|=
literal|3
decl_stmt|;
name|int
name|LA1_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA1_0
operator|==
literal|'$'
operator|||
name|LA1_0
operator|==
literal|'.'
operator|||
operator|(
name|LA1_0
operator|>=
literal|'A'
operator|&&
name|LA1_0
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA1_0
operator|>=
literal|'a'
operator|&&
name|LA1_0
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt1
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA1_0
operator|>=
literal|'0'
operator|&&
name|LA1_0
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt1
operator|=
literal|2
expr_stmt|;
block|}
switch|switch
condition|(
name|alt1
condition|)
block|{
case|case
literal|1
case|:
comment|// bst.g:73:12: LETTER
block|{
name|mLETTER
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// bst.g:73:19: NUMERAL
block|{
name|mNUMERAL
argument_list|()
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop1
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end IDENTIFIER
comment|// $ANTLR start LETTER
DECL|method|mLETTER ()
specifier|public
name|void
name|mLETTER
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
comment|// bst.g:76:4: ( ('a'..'z'|'A'..'Z'|'.'|'$'))
comment|// bst.g:76:4: ('a'..'z'|'A'..'Z'|'.'|'$')
block|{
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'A'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'a'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'z'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end LETTER
comment|// $ANTLR start STRING
DECL|method|mSTRING ()
specifier|public
name|void
name|mSTRING
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|STRING
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:79:4: ( '\"' (~ '\"' )* '\"' )
comment|// bst.g:79:4: '\"' (~ '\"' )* '\"'
block|{
name|match
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
comment|// bst.g:79:8: (~ '\"' )*
name|loop2
label|:
do|do
block|{
name|int
name|alt2
init|=
literal|2
decl_stmt|;
name|int
name|LA2_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA2_0
operator|>=
literal|'\u0000'
operator|&&
name|LA2_0
operator|<=
literal|'!'
operator|)
operator|||
operator|(
name|LA2_0
operator|>=
literal|'#'
operator|&&
name|LA2_0
operator|<=
literal|'\uFFFE'
operator|)
operator|)
condition|)
block|{
name|alt2
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt2
condition|)
block|{
case|case
literal|1
case|:
comment|// bst.g:79:9: ~ '\"'
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'!'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'#'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\uFFFE'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
break|break
name|loop2
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|match
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end STRING
comment|// $ANTLR start INTEGER
DECL|method|mINTEGER ()
specifier|public
name|void
name|mINTEGER
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|INTEGER
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:82:4: ( '#' ( ('+'|'-'))? ( NUMERAL )+ )
comment|// bst.g:82:4: '#' ( ('+'|'-'))? ( NUMERAL )+
block|{
name|match
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
comment|// bst.g:82:8: ( ('+'|'-'))?
name|int
name|alt3
init|=
literal|2
decl_stmt|;
name|int
name|LA3_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA3_0
operator|==
literal|'+'
operator|||
name|LA3_0
operator|==
literal|'-'
operator|)
condition|)
block|{
name|alt3
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt3
condition|)
block|{
case|case
literal|1
case|:
comment|// bst.g:82:9: ('+'|'-')
block|{
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'+'
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
block|}
comment|// bst.g:82:19: ( NUMERAL )+
name|int
name|cnt4
init|=
literal|0
decl_stmt|;
name|loop4
label|:
do|do
block|{
name|int
name|alt4
init|=
literal|2
decl_stmt|;
name|int
name|LA4_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA4_0
operator|>=
literal|'0'
operator|&&
name|LA4_0
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt4
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt4
condition|)
block|{
case|case
literal|1
case|:
comment|// bst.g:82:19: NUMERAL
block|{
name|mNUMERAL
argument_list|()
expr_stmt|;
block|}
break|break;
default|default :
if|if
condition|(
name|cnt4
operator|>=
literal|1
condition|)
break|break
name|loop4
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|4
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt4
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end INTEGER
comment|// $ANTLR start NUMERAL
DECL|method|mNUMERAL ()
specifier|public
name|void
name|mNUMERAL
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
comment|// bst.g:85:4: ( ( '0' .. '9' ) )
comment|// bst.g:85:4: ( '0' .. '9' )
block|{
comment|// bst.g:85:4: ( '0' .. '9' )
comment|// bst.g:85:5: '0' .. '9'
block|{
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end NUMERAL
comment|// $ANTLR start WS
DECL|method|mWS ()
specifier|public
name|void
name|mWS
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|WS
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:88:4: ( ( (' '|'\\t'|'\\n'))+ )
comment|// bst.g:88:4: ( (' '|'\\t'|'\\n'))+
block|{
comment|// bst.g:88:4: ( (' '|'\\t'|'\\n'))+
name|int
name|cnt5
init|=
literal|0
decl_stmt|;
name|loop5
label|:
do|do
block|{
name|int
name|alt5
init|=
literal|2
decl_stmt|;
name|int
name|LA5_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA5_0
operator|>=
literal|'\t'
operator|&&
name|LA5_0
operator|<=
literal|'\n'
operator|)
operator|||
name|LA5_0
operator|==
literal|' '
operator|)
condition|)
block|{
name|alt5
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt5
condition|)
block|{
case|case
literal|1
case|:
comment|// bst.g:88:5: (' '|'\\t'|'\\n')
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\t'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\n'
operator|)
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
if|if
condition|(
name|cnt5
operator|>=
literal|1
condition|)
break|break
name|loop5
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|5
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt5
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|channel
operator|=
literal|99
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end WS
comment|// $ANTLR start LINE_COMMENT
DECL|method|mLINE_COMMENT ()
specifier|public
name|void
name|mLINE_COMMENT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|type
init|=
name|LINE_COMMENT
decl_stmt|;
name|int
name|start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// bst.g:91:7: ( '%' (~ ('\\n'|'\\r'))* ( '\\r' )? '\\n' )
comment|// bst.g:91:7: '%' (~ ('\\n'|'\\r'))* ( '\\r' )? '\\n'
block|{
name|match
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
comment|// bst.g:91:11: (~ ('\\n'|'\\r'))*
name|loop6
label|:
do|do
block|{
name|int
name|alt6
init|=
literal|2
decl_stmt|;
name|int
name|LA6_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA6_0
operator|>=
literal|'\u0000'
operator|&&
name|LA6_0
operator|<=
literal|'\t'
operator|)
operator|||
operator|(
name|LA6_0
operator|>=
literal|'\u000B'
operator|&&
name|LA6_0
operator|<=
literal|'\f'
operator|)
operator|||
operator|(
name|LA6_0
operator|>=
literal|'\u000E'
operator|&&
name|LA6_0
operator|<=
literal|'\uFFFE'
operator|)
operator|)
condition|)
block|{
name|alt6
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt6
condition|)
block|{
case|case
literal|1
case|:
comment|// bst.g:91:11: ~ ('\\n'|'\\r')
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\t'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u000B'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\f'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u000E'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\uFFFE'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
break|break
name|loop6
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
comment|// bst.g:91:25: ( '\\r' )?
name|int
name|alt7
init|=
literal|2
decl_stmt|;
name|int
name|LA7_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA7_0
operator|==
literal|'\r'
operator|)
condition|)
block|{
name|alt7
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt7
condition|)
block|{
case|case
literal|1
case|:
comment|// bst.g:91:25: '\\r'
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|channel
operator|=
literal|99
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|type
argument_list|,
name|line
argument_list|,
name|charPosition
argument_list|,
name|channel
argument_list|,
name|start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end LINE_COMMENT
DECL|method|mTokens ()
specifier|public
name|void
name|mTokens
parameter_list|()
throws|throws
name|RecognitionException
block|{
comment|// bst.g:1:10: ( T25 | T26 | T27 | T28 | T29 | T30 | T31 | T32 | T33 | T34 | T35 | T36 | T37 | T38 | T39 | T40 | T41 | T42 | T43 | T44 | T45 | T46 | T47 | T48 | T49 | T50 | T51 | T52 | T53 | T54 | T55 | T56 | T57 | T58 | T59 | T60 | T61 | T62 | T63 | STRINGS | INTEGERS | FUNCTION | EXECUTE | SORT | ITERATE | REVERSE | ENTRY | READ | MACRO | QUOTED | IDENTIFIER | STRING | INTEGER | WS | LINE_COMMENT )
name|int
name|alt8
init|=
literal|55
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'{'
case|:
name|alt8
operator|=
literal|1
expr_stmt|;
break|break;
case|case
literal|'}'
case|:
name|alt8
operator|=
literal|2
expr_stmt|;
break|break;
case|case
literal|'<'
case|:
name|alt8
operator|=
literal|3
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|alt8
operator|=
literal|4
expr_stmt|;
break|break;
case|case
literal|'='
case|:
name|alt8
operator|=
literal|5
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|alt8
operator|=
literal|6
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|alt8
operator|=
literal|7
expr_stmt|;
break|break;
case|case
literal|':'
case|:
name|alt8
operator|=
literal|8
expr_stmt|;
break|break;
case|case
literal|'*'
case|:
name|alt8
operator|=
literal|9
expr_stmt|;
break|break;
case|case
literal|'a'
case|:
name|int
name|LA8_10
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_10
operator|==
literal|'d'
operator|)
condition|)
block|{
name|int
name|LA8_35
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_35
operator|==
literal|'d'
operator|)
condition|)
block|{
name|int
name|LA8_71
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_71
operator|==
literal|'.'
operator|)
condition|)
block|{
name|int
name|LA8_109
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_109
operator|==
literal|'p'
operator|)
condition|)
block|{
name|int
name|LA8_147
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_147
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_184
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_184
operator|==
literal|'r'
operator|)
condition|)
block|{
name|int
name|LA8_218
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_218
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_246
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_246
operator|==
literal|'o'
operator|)
condition|)
block|{
name|int
name|LA8_269
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_269
operator|==
literal|'d'
operator|)
condition|)
block|{
name|int
name|LA8_287
init|=
name|input
operator|.
name|LA
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_287
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_300
init|=
name|input
operator|.
name|LA
argument_list|(
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_300
operator|==
literal|'$'
operator|||
name|LA8_300
operator|==
literal|'.'
operator|||
operator|(
name|LA8_300
operator|>=
literal|'0'
operator|&&
name|LA8_300
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_300
operator|>=
literal|'A'
operator|&&
name|LA8_300
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_300
operator|>=
literal|'a'
operator|&&
name|LA8_300
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|10
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'c'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'h'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|'a'
case|:
name|int
name|LA8_72
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_72
operator|==
literal|'n'
operator|)
condition|)
block|{
name|int
name|LA8_110
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_110
operator|==
literal|'g'
operator|)
condition|)
block|{
name|int
name|LA8_148
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_148
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_185
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_185
operator|==
literal|'.'
operator|)
condition|)
block|{
name|int
name|LA8_219
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_219
operator|==
literal|'c'
operator|)
condition|)
block|{
name|int
name|LA8_247
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_247
operator|==
literal|'a'
operator|)
condition|)
block|{
name|int
name|LA8_270
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_270
operator|==
literal|'s'
operator|)
condition|)
block|{
name|int
name|LA8_288
init|=
name|input
operator|.
name|LA
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_288
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_301
init|=
name|input
operator|.
name|LA
argument_list|(
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_301
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_312
init|=
name|input
operator|.
name|LA
argument_list|(
literal|13
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_312
operator|==
literal|'$'
operator|||
name|LA8_312
operator|==
literal|'.'
operator|||
operator|(
name|LA8_312
operator|>=
literal|'0'
operator|&&
name|LA8_312
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_312
operator|>=
literal|'A'
operator|&&
name|LA8_312
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_312
operator|>=
literal|'a'
operator|&&
name|LA8_312
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|12
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'r'
case|:
name|int
name|LA8_73
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_73
operator|==
literal|'.'
operator|)
condition|)
block|{
name|int
name|LA8_111
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_111
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_149
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_149
operator|==
literal|'o'
operator|)
condition|)
block|{
name|int
name|LA8_186
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_186
operator|==
literal|'.'
operator|)
condition|)
block|{
name|int
name|LA8_220
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_220
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_248
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_248
operator|==
literal|'n'
operator|)
condition|)
block|{
name|int
name|LA8_271
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_271
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_289
init|=
name|input
operator|.
name|LA
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_289
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_302
init|=
name|input
operator|.
name|LA
argument_list|(
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_302
operator|==
literal|'$'
operator|||
name|LA8_302
operator|==
literal|'.'
operator|||
operator|(
name|LA8_302
operator|>=
literal|'0'
operator|&&
name|LA8_302
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_302
operator|>=
literal|'A'
operator|&&
name|LA8_302
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_302
operator|>=
literal|'a'
operator|&&
name|LA8_302
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|13
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'i'
case|:
name|int
name|LA8_37
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_37
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_74
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_74
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_112
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_112
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_150
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_150
operator|==
literal|'$'
operator|||
name|LA8_150
operator|==
literal|'.'
operator|||
operator|(
name|LA8_150
operator|>=
literal|'0'
operator|&&
name|LA8_150
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_150
operator|>=
literal|'A'
operator|&&
name|LA8_150
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_150
operator|>=
literal|'a'
operator|&&
name|LA8_150
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|14
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'a'
case|:
name|int
name|LA8_38
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_38
operator|==
literal|'l'
operator|)
condition|)
block|{
name|int
name|LA8_75
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_75
operator|==
literal|'l'
operator|)
condition|)
block|{
name|int
name|LA8_113
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_113
operator|==
literal|'.'
operator|)
condition|)
block|{
name|int
name|LA8_151
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_151
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_188
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_188
operator|==
literal|'y'
operator|)
condition|)
block|{
name|int
name|LA8_221
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_221
operator|==
literal|'p'
operator|)
condition|)
block|{
name|int
name|LA8_249
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_249
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_272
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_272
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_290
init|=
name|input
operator|.
name|LA
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_290
operator|==
literal|'$'
operator|||
name|LA8_290
operator|==
literal|'.'
operator|||
operator|(
name|LA8_290
operator|>=
literal|'0'
operator|&&
name|LA8_290
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_290
operator|>=
literal|'A'
operator|&&
name|LA8_290
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_290
operator|>=
literal|'a'
operator|&&
name|LA8_290
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|11
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'d'
case|:
name|int
name|LA8_12
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_12
operator|==
literal|'u'
operator|)
condition|)
block|{
name|int
name|LA8_39
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_39
operator|==
literal|'p'
operator|)
condition|)
block|{
name|int
name|LA8_76
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_76
operator|==
literal|'l'
operator|)
condition|)
block|{
name|int
name|LA8_114
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_114
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_152
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_152
operator|==
literal|'c'
operator|)
condition|)
block|{
name|int
name|LA8_189
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_189
operator|==
literal|'a'
operator|)
condition|)
block|{
name|int
name|LA8_222
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_222
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_250
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_250
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_273
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_273
operator|==
literal|'$'
operator|||
name|LA8_273
operator|==
literal|'.'
operator|||
operator|(
name|LA8_273
operator|>=
literal|'0'
operator|&&
name|LA8_273
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_273
operator|>=
literal|'A'
operator|&&
name|LA8_273
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_273
operator|>=
literal|'a'
operator|&&
name|LA8_273
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|15
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'e'
case|:
name|int
name|LA8_13
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_13
operator|==
literal|'m'
operator|)
condition|)
block|{
name|int
name|LA8_40
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_40
operator|==
literal|'p'
operator|)
condition|)
block|{
name|int
name|LA8_77
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_77
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_115
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_115
operator|==
literal|'y'
operator|)
condition|)
block|{
name|int
name|LA8_153
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_153
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_190
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_190
operator|==
literal|'$'
operator|||
name|LA8_190
operator|==
literal|'.'
operator|||
operator|(
name|LA8_190
operator|>=
literal|'0'
operator|&&
name|LA8_190
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_190
operator|>=
literal|'A'
operator|&&
name|LA8_190
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_190
operator|>=
literal|'a'
operator|&&
name|LA8_190
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|16
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'f'
case|:
name|int
name|LA8_14
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_14
operator|==
literal|'o'
operator|)
condition|)
block|{
name|int
name|LA8_41
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_41
operator|==
literal|'r'
operator|)
condition|)
block|{
name|int
name|LA8_78
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_78
operator|==
literal|'m'
operator|)
condition|)
block|{
name|int
name|LA8_116
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_116
operator|==
literal|'a'
operator|)
condition|)
block|{
name|int
name|LA8_154
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_154
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_191
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_191
operator|==
literal|'.'
operator|)
condition|)
block|{
name|int
name|LA8_224
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_224
operator|==
literal|'n'
operator|)
condition|)
block|{
name|int
name|LA8_251
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_251
operator|==
literal|'a'
operator|)
condition|)
block|{
name|int
name|LA8_274
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_274
operator|==
literal|'m'
operator|)
condition|)
block|{
name|int
name|LA8_292
init|=
name|input
operator|.
name|LA
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_292
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_304
init|=
name|input
operator|.
name|LA
argument_list|(
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_304
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_314
init|=
name|input
operator|.
name|LA
argument_list|(
literal|13
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_314
operator|==
literal|'$'
operator|||
name|LA8_314
operator|==
literal|'.'
operator|||
operator|(
name|LA8_314
operator|>=
literal|'0'
operator|&&
name|LA8_314
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_314
operator|>=
literal|'A'
operator|&&
name|LA8_314
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_314
operator|>=
literal|'a'
operator|&&
name|LA8_314
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|17
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'i'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'f'
case|:
name|int
name|LA8_42
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_42
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_79
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_79
operator|==
literal|'$'
operator|||
name|LA8_79
operator|==
literal|'.'
operator|||
operator|(
name|LA8_79
operator|>=
literal|'0'
operator|&&
name|LA8_79
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_79
operator|>=
literal|'A'
operator|&&
name|LA8_79
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_79
operator|>=
literal|'a'
operator|&&
name|LA8_79
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|18
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'n'
case|:
name|int
name|LA8_43
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_43
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_80
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_80
operator|==
literal|'.'
operator|)
condition|)
block|{
name|int
name|LA8_118
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_118
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_155
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_155
operator|==
literal|'o'
operator|)
condition|)
block|{
name|int
name|LA8_192
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_192
operator|==
literal|'.'
operator|)
condition|)
block|{
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
condition|)
block|{
case|case
literal|'c'
case|:
name|int
name|LA8_252
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_252
operator|==
literal|'h'
operator|)
condition|)
block|{
name|int
name|LA8_275
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_275
operator|==
literal|'r'
operator|)
condition|)
block|{
name|int
name|LA8_293
init|=
name|input
operator|.
name|LA
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_293
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_305
init|=
name|input
operator|.
name|LA
argument_list|(
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_305
operator|==
literal|'$'
operator|||
name|LA8_305
operator|==
literal|'.'
operator|||
operator|(
name|LA8_305
operator|>=
literal|'0'
operator|&&
name|LA8_305
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_305
operator|>=
literal|'A'
operator|&&
name|LA8_305
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_305
operator|>=
literal|'a'
operator|&&
name|LA8_305
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|19
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'s'
case|:
name|int
name|LA8_253
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_253
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_276
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_276
operator|==
literal|'r'
operator|)
condition|)
block|{
name|int
name|LA8_294
init|=
name|input
operator|.
name|LA
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_294
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_306
init|=
name|input
operator|.
name|LA
argument_list|(
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_306
operator|==
literal|'$'
operator|||
name|LA8_306
operator|==
literal|'.'
operator|||
operator|(
name|LA8_306
operator|>=
literal|'0'
operator|&&
name|LA8_306
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_306
operator|>=
literal|'A'
operator|&&
name|LA8_306
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_306
operator|>=
literal|'a'
operator|&&
name|LA8_306
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|20
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'m'
case|:
name|int
name|LA8_16
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_16
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_44
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_44
operator|==
literal|'s'
operator|)
condition|)
block|{
name|int
name|LA8_81
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_81
operator|==
literal|'s'
operator|)
condition|)
block|{
name|int
name|LA8_119
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_119
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_156
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_156
operator|==
literal|'n'
operator|)
condition|)
block|{
name|int
name|LA8_193
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_193
operator|==
literal|'g'
operator|)
condition|)
block|{
name|int
name|LA8_226
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_226
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_254
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_254
operator|==
literal|'$'
operator|||
name|LA8_254
operator|==
literal|'.'
operator|||
operator|(
name|LA8_254
operator|>=
literal|'0'
operator|&&
name|LA8_254
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_254
operator|>=
literal|'A'
operator|&&
name|LA8_254
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_254
operator|>=
literal|'a'
operator|&&
name|LA8_254
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'n'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'u'
case|:
name|int
name|LA8_45
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_45
operator|==
literal|'m'
operator|)
condition|)
block|{
name|int
name|LA8_82
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_82
operator|==
literal|'.'
operator|)
condition|)
block|{
name|int
name|LA8_120
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_120
operator|==
literal|'n'
operator|)
condition|)
block|{
name|int
name|LA8_157
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_157
operator|==
literal|'a'
operator|)
condition|)
block|{
name|int
name|LA8_194
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_194
operator|==
literal|'m'
operator|)
condition|)
block|{
name|int
name|LA8_227
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_227
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_255
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_255
operator|==
literal|'s'
operator|)
condition|)
block|{
name|int
name|LA8_278
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_278
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_295
init|=
name|input
operator|.
name|LA
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_295
operator|==
literal|'$'
operator|||
name|LA8_295
operator|==
literal|'.'
operator|||
operator|(
name|LA8_295
operator|>=
literal|'0'
operator|&&
name|LA8_295
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_295
operator|>=
literal|'A'
operator|&&
name|LA8_295
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_295
operator|>=
literal|'a'
operator|&&
name|LA8_295
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|23
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'e'
case|:
name|int
name|LA8_46
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_46
operator|==
literal|'w'
operator|)
condition|)
block|{
name|int
name|LA8_83
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_83
operator|==
literal|'l'
operator|)
condition|)
block|{
name|int
name|LA8_121
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_121
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_158
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_158
operator|==
literal|'n'
operator|)
condition|)
block|{
name|int
name|LA8_195
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_195
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_228
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_228
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_256
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_256
operator|==
literal|'$'
operator|||
name|LA8_256
operator|==
literal|'.'
operator|||
operator|(
name|LA8_256
operator|>=
literal|'0'
operator|&&
name|LA8_256
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_256
operator|>=
literal|'A'
operator|&&
name|LA8_256
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_256
operator|>=
literal|'a'
operator|&&
name|LA8_256
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|22
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'p'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'u'
case|:
name|int
name|LA8_47
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_47
operator|==
literal|'r'
operator|)
condition|)
block|{
name|int
name|LA8_84
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_84
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_122
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_122
operator|==
literal|'f'
operator|)
condition|)
block|{
name|int
name|LA8_159
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_159
operator|==
literal|'y'
operator|)
condition|)
block|{
name|int
name|LA8_196
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_196
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_229
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_229
operator|==
literal|'$'
operator|||
name|LA8_229
operator|==
literal|'.'
operator|||
operator|(
name|LA8_229
operator|>=
literal|'0'
operator|&&
name|LA8_229
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_229
operator|>=
literal|'A'
operator|&&
name|LA8_229
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_229
operator|>=
literal|'a'
operator|&&
name|LA8_229
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|26
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'o'
case|:
name|int
name|LA8_48
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_48
operator|==
literal|'p'
operator|)
condition|)
block|{
name|int
name|LA8_85
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_85
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_123
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_123
operator|==
literal|'$'
operator|||
name|LA8_123
operator|==
literal|'.'
operator|||
operator|(
name|LA8_123
operator|>=
literal|'0'
operator|&&
name|LA8_123
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_123
operator|>=
literal|'A'
operator|&&
name|LA8_123
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_123
operator|>=
literal|'a'
operator|&&
name|LA8_123
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|24
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'r'
case|:
name|int
name|LA8_49
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_49
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_86
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_86
operator|==
literal|'a'
operator|)
condition|)
block|{
name|int
name|LA8_124
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_124
operator|==
literal|'m'
operator|)
condition|)
block|{
name|int
name|LA8_161
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_161
operator|==
literal|'b'
operator|)
condition|)
block|{
name|int
name|LA8_197
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_197
operator|==
literal|'l'
operator|)
condition|)
block|{
name|int
name|LA8_230
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_230
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_258
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_258
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_280
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_280
operator|==
literal|'$'
operator|||
name|LA8_280
operator|==
literal|'.'
operator|||
operator|(
name|LA8_280
operator|>=
literal|'0'
operator|&&
name|LA8_280
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_280
operator|>=
literal|'A'
operator|&&
name|LA8_280
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_280
operator|>=
literal|'a'
operator|&&
name|LA8_280
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|25
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'q'
case|:
name|int
name|LA8_19
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_19
operator|==
literal|'u'
operator|)
condition|)
block|{
name|int
name|LA8_50
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_50
operator|==
literal|'o'
operator|)
condition|)
block|{
name|int
name|LA8_87
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_87
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_125
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_125
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_162
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_162
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_198
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_198
operator|==
literal|'$'
operator|||
name|LA8_198
operator|==
literal|'.'
operator|||
operator|(
name|LA8_198
operator|>=
literal|'0'
operator|&&
name|LA8_198
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_198
operator|>=
literal|'A'
operator|&&
name|LA8_198
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_198
operator|>=
literal|'a'
operator|&&
name|LA8_198
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|27
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'s'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'w'
case|:
name|int
name|LA8_51
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_51
operator|==
literal|'a'
operator|)
condition|)
block|{
name|int
name|LA8_88
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_88
operator|==
literal|'p'
operator|)
condition|)
block|{
name|int
name|LA8_126
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_126
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_163
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_163
operator|==
literal|'$'
operator|||
name|LA8_163
operator|==
literal|'.'
operator|||
operator|(
name|LA8_163
operator|>=
literal|'0'
operator|&&
name|LA8_163
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_163
operator|>=
literal|'A'
operator|&&
name|LA8_163
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_163
operator|>=
literal|'a'
operator|&&
name|LA8_163
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|31
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'k'
case|:
name|int
name|LA8_52
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_52
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_89
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_89
operator|==
literal|'p'
operator|)
condition|)
block|{
name|int
name|LA8_127
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_127
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_164
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_164
operator|==
literal|'$'
operator|||
name|LA8_164
operator|==
literal|'.'
operator|||
operator|(
name|LA8_164
operator|>=
literal|'0'
operator|&&
name|LA8_164
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_164
operator|>=
literal|'A'
operator|&&
name|LA8_164
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_164
operator|>=
literal|'a'
operator|&&
name|LA8_164
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|28
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'t'
case|:
name|int
name|LA8_53
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_53
operator|==
literal|'a'
operator|)
condition|)
block|{
name|int
name|LA8_90
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_90
operator|==
literal|'c'
operator|)
condition|)
block|{
name|int
name|LA8_128
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_128
operator|==
literal|'k'
operator|)
condition|)
block|{
name|int
name|LA8_165
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_165
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_201
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_201
operator|==
literal|'$'
operator|||
name|LA8_201
operator|==
literal|'.'
operator|||
operator|(
name|LA8_201
operator|>=
literal|'0'
operator|&&
name|LA8_201
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_201
operator|>=
literal|'A'
operator|&&
name|LA8_201
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_201
operator|>=
literal|'a'
operator|&&
name|LA8_201
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|29
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'u'
case|:
name|int
name|LA8_54
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_54
operator|==
literal|'b'
operator|)
condition|)
block|{
name|int
name|LA8_91
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_91
operator|==
literal|'s'
operator|)
condition|)
block|{
name|int
name|LA8_129
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_129
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_166
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_166
operator|==
literal|'r'
operator|)
condition|)
block|{
name|int
name|LA8_202
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_202
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_233
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_233
operator|==
literal|'n'
operator|)
condition|)
block|{
name|int
name|LA8_259
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_259
operator|==
literal|'g'
operator|)
condition|)
block|{
name|int
name|LA8_281
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_281
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_297
init|=
name|input
operator|.
name|LA
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_297
operator|==
literal|'$'
operator|||
name|LA8_297
operator|==
literal|'.'
operator|||
operator|(
name|LA8_297
operator|>=
literal|'0'
operator|&&
name|LA8_297
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_297
operator|>=
literal|'A'
operator|&&
name|LA8_297
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_297
operator|>=
literal|'a'
operator|&&
name|LA8_297
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|30
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'t'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'y'
case|:
name|int
name|LA8_55
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_55
operator|==
literal|'p'
operator|)
condition|)
block|{
name|int
name|LA8_92
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_92
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_130
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_130
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_167
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_167
operator|==
literal|'$'
operator|||
name|LA8_167
operator|==
literal|'.'
operator|||
operator|(
name|LA8_167
operator|>=
literal|'0'
operator|&&
name|LA8_167
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_167
operator|>=
literal|'A'
operator|&&
name|LA8_167
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_167
operator|>=
literal|'a'
operator|&&
name|LA8_167
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|35
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'e'
case|:
name|int
name|LA8_56
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_56
operator|==
literal|'x'
operator|)
condition|)
block|{
name|int
name|LA8_93
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_93
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_131
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_131
operator|==
literal|'.'
operator|)
condition|)
block|{
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
condition|)
block|{
case|case
literal|'l'
case|:
name|int
name|LA8_204
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_204
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_234
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_234
operator|==
literal|'n'
operator|)
condition|)
block|{
name|int
name|LA8_260
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_260
operator|==
literal|'g'
operator|)
condition|)
block|{
name|int
name|LA8_282
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_282
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_298
init|=
name|input
operator|.
name|LA
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_298
operator|==
literal|'h'
operator|)
condition|)
block|{
name|int
name|LA8_309
init|=
name|input
operator|.
name|LA
argument_list|(
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_309
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_317
init|=
name|input
operator|.
name|LA
argument_list|(
literal|13
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_317
operator|==
literal|'$'
operator|||
name|LA8_317
operator|==
literal|'.'
operator|||
operator|(
name|LA8_317
operator|>=
literal|'0'
operator|&&
name|LA8_317
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_317
operator|>=
literal|'A'
operator|&&
name|LA8_317
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_317
operator|>=
literal|'a'
operator|&&
name|LA8_317
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|32
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'p'
case|:
name|int
name|LA8_205
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_205
operator|==
literal|'r'
operator|)
condition|)
block|{
name|int
name|LA8_235
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_235
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_261
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_261
operator|==
literal|'f'
operator|)
condition|)
block|{
name|int
name|LA8_283
init|=
name|input
operator|.
name|LA
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_283
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_299
init|=
name|input
operator|.
name|LA
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_299
operator|==
literal|'x'
operator|)
condition|)
block|{
name|int
name|LA8_310
init|=
name|input
operator|.
name|LA
argument_list|(
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_310
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_318
init|=
name|input
operator|.
name|LA
argument_list|(
literal|13
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_318
operator|==
literal|'$'
operator|||
name|LA8_318
operator|==
literal|'.'
operator|||
operator|(
name|LA8_318
operator|>=
literal|'0'
operator|&&
name|LA8_318
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_318
operator|>=
literal|'A'
operator|&&
name|LA8_318
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_318
operator|>=
literal|'a'
operator|&&
name|LA8_318
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|33
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'o'
case|:
name|int
name|LA8_57
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_57
operator|==
literal|'p'
operator|)
condition|)
block|{
name|int
name|LA8_94
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_94
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_132
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_132
operator|==
literal|'$'
operator|||
name|LA8_132
operator|==
literal|'.'
operator|||
operator|(
name|LA8_132
operator|>=
literal|'0'
operator|&&
name|LA8_132
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_132
operator|>=
literal|'A'
operator|&&
name|LA8_132
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_132
operator|>=
literal|'a'
operator|&&
name|LA8_132
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|34
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'w'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'a'
case|:
name|int
name|LA8_58
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_58
operator|==
literal|'r'
operator|)
condition|)
block|{
name|int
name|LA8_95
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_95
operator|==
literal|'n'
operator|)
condition|)
block|{
name|int
name|LA8_133
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_133
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_170
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_170
operator|==
literal|'n'
operator|)
condition|)
block|{
name|int
name|LA8_206
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_206
operator|==
literal|'g'
operator|)
condition|)
block|{
name|int
name|LA8_236
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_236
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_262
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_262
operator|==
literal|'$'
operator|||
name|LA8_262
operator|==
literal|'.'
operator|||
operator|(
name|LA8_262
operator|>=
literal|'0'
operator|&&
name|LA8_262
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_262
operator|>=
literal|'A'
operator|&&
name|LA8_262
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_262
operator|>=
literal|'a'
operator|&&
name|LA8_262
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|36
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'h'
case|:
name|int
name|LA8_59
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_59
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_96
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_96
operator|==
literal|'l'
operator|)
condition|)
block|{
name|int
name|LA8_134
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_134
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_171
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_171
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_207
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_207
operator|==
literal|'$'
operator|||
name|LA8_207
operator|==
literal|'.'
operator|||
operator|(
name|LA8_207
operator|>=
literal|'0'
operator|&&
name|LA8_207
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_207
operator|>=
literal|'A'
operator|&&
name|LA8_207
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_207
operator|>=
literal|'a'
operator|&&
name|LA8_207
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|37
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'r'
case|:
name|int
name|LA8_60
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_60
operator|==
literal|'i'
operator|)
condition|)
block|{
name|int
name|LA8_97
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_97
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_135
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_135
operator|==
literal|'e'
operator|)
condition|)
block|{
name|int
name|LA8_172
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_172
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_208
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_208
operator|==
literal|'$'
operator|||
name|LA8_208
operator|==
literal|'.'
operator|||
operator|(
name|LA8_208
operator|>=
literal|'0'
operator|&&
name|LA8_208
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_208
operator|>=
literal|'A'
operator|&&
name|LA8_208
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_208
operator|>=
literal|'a'
operator|&&
name|LA8_208
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|39
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'i'
case|:
name|int
name|LA8_61
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_61
operator|==
literal|'d'
operator|)
condition|)
block|{
name|int
name|LA8_98
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_98
operator|==
literal|'t'
operator|)
condition|)
block|{
name|int
name|LA8_136
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_136
operator|==
literal|'h'
operator|)
condition|)
block|{
name|int
name|LA8_173
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_173
operator|==
literal|'$'
operator|)
condition|)
block|{
name|int
name|LA8_209
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_209
operator|==
literal|'$'
operator|||
name|LA8_209
operator|==
literal|'.'
operator|||
operator|(
name|LA8_209
operator|>=
literal|'0'
operator|&&
name|LA8_209
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_209
operator|>=
literal|'A'
operator|&&
name|LA8_209
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_209
operator|>=
literal|'a'
operator|&&
name|LA8_209
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|38
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'S'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'O'
case|:
name|int
name|LA8_62
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_62
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_99
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_99
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_137
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_137
operator|==
literal|'$'
operator|||
name|LA8_137
operator|==
literal|'.'
operator|||
operator|(
name|LA8_137
operator|>=
literal|'0'
operator|&&
name|LA8_137
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_137
operator|>=
literal|'A'
operator|&&
name|LA8_137
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_137
operator|>=
literal|'a'
operator|&&
name|LA8_137
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|44
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'T'
case|:
name|int
name|LA8_63
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_63
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_100
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_100
operator|==
literal|'I'
operator|)
condition|)
block|{
name|int
name|LA8_138
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_138
operator|==
literal|'N'
operator|)
condition|)
block|{
name|int
name|LA8_175
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_175
operator|==
literal|'G'
operator|)
condition|)
block|{
name|int
name|LA8_210
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_210
operator|==
literal|'S'
operator|)
condition|)
block|{
name|int
name|LA8_240
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_240
operator|==
literal|'$'
operator|||
name|LA8_240
operator|==
literal|'.'
operator|||
operator|(
name|LA8_240
operator|>=
literal|'0'
operator|&&
name|LA8_240
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_240
operator|>=
literal|'A'
operator|&&
name|LA8_240
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_240
operator|>=
literal|'a'
operator|&&
name|LA8_240
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|40
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'I'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'T'
case|:
name|int
name|LA8_64
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_64
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_101
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_101
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_139
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_139
operator|==
literal|'A'
operator|)
condition|)
block|{
name|int
name|LA8_176
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_176
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_211
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_211
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_241
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_241
operator|==
literal|'$'
operator|||
name|LA8_241
operator|==
literal|'.'
operator|||
operator|(
name|LA8_241
operator|>=
literal|'0'
operator|&&
name|LA8_241
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_241
operator|>=
literal|'A'
operator|&&
name|LA8_241
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_241
operator|>=
literal|'a'
operator|&&
name|LA8_241
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|45
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'N'
case|:
name|int
name|LA8_65
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_65
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_102
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_102
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_140
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_140
operator|==
literal|'G'
operator|)
condition|)
block|{
name|int
name|LA8_177
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_177
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_212
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_212
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_242
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_242
operator|==
literal|'S'
operator|)
condition|)
block|{
name|int
name|LA8_265
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_265
operator|==
literal|'$'
operator|||
name|LA8_265
operator|==
literal|'.'
operator|||
operator|(
name|LA8_265
operator|>=
literal|'0'
operator|&&
name|LA8_265
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_265
operator|>=
literal|'A'
operator|&&
name|LA8_265
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_265
operator|>=
literal|'a'
operator|&&
name|LA8_265
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|41
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'F'
case|:
name|int
name|LA8_25
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_25
operator|==
literal|'U'
operator|)
condition|)
block|{
name|int
name|LA8_66
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_66
operator|==
literal|'N'
operator|)
condition|)
block|{
name|int
name|LA8_103
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_103
operator|==
literal|'C'
operator|)
condition|)
block|{
name|int
name|LA8_141
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_141
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_178
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_178
operator|==
literal|'I'
operator|)
condition|)
block|{
name|int
name|LA8_213
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_213
operator|==
literal|'O'
operator|)
condition|)
block|{
name|int
name|LA8_243
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_243
operator|==
literal|'N'
operator|)
condition|)
block|{
name|int
name|LA8_266
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_266
operator|==
literal|'$'
operator|||
name|LA8_266
operator|==
literal|'.'
operator|||
operator|(
name|LA8_266
operator|>=
literal|'0'
operator|&&
name|LA8_266
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_266
operator|>=
literal|'A'
operator|&&
name|LA8_266
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_266
operator|>=
literal|'a'
operator|&&
name|LA8_266
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|42
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'E'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'N'
case|:
name|int
name|LA8_67
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_67
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_104
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_104
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_142
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_142
operator|==
literal|'Y'
operator|)
condition|)
block|{
name|int
name|LA8_179
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_179
operator|==
literal|'$'
operator|||
name|LA8_179
operator|==
literal|'.'
operator|||
operator|(
name|LA8_179
operator|>=
literal|'0'
operator|&&
name|LA8_179
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_179
operator|>=
literal|'A'
operator|&&
name|LA8_179
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_179
operator|>=
literal|'a'
operator|&&
name|LA8_179
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|47
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'X'
case|:
name|int
name|LA8_68
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_68
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_105
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_105
operator|==
literal|'C'
operator|)
condition|)
block|{
name|int
name|LA8_143
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_143
operator|==
literal|'U'
operator|)
condition|)
block|{
name|int
name|LA8_180
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_180
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_215
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_215
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_244
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_244
operator|==
literal|'$'
operator|||
name|LA8_244
operator|==
literal|'.'
operator|||
operator|(
name|LA8_244
operator|>=
literal|'0'
operator|&&
name|LA8_244
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_244
operator|>=
literal|'A'
operator|&&
name|LA8_244
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_244
operator|>=
literal|'a'
operator|&&
name|LA8_244
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|43
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'R'
case|:
name|int
name|LA8_27
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_27
operator|==
literal|'E'
operator|)
condition|)
block|{
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|'V'
case|:
name|int
name|LA8_106
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_106
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_144
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_144
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_181
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_181
operator|==
literal|'S'
operator|)
condition|)
block|{
name|int
name|LA8_216
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_216
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_245
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_245
operator|==
literal|'$'
operator|||
name|LA8_245
operator|==
literal|'.'
operator|||
operator|(
name|LA8_245
operator|>=
literal|'0'
operator|&&
name|LA8_245
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_245
operator|>=
literal|'A'
operator|&&
name|LA8_245
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_245
operator|>=
literal|'a'
operator|&&
name|LA8_245
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|46
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'A'
case|:
name|int
name|LA8_107
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_107
operator|==
literal|'D'
operator|)
condition|)
block|{
name|int
name|LA8_145
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_145
operator|==
literal|'$'
operator|||
name|LA8_145
operator|==
literal|'.'
operator|||
operator|(
name|LA8_145
operator|>=
literal|'0'
operator|&&
name|LA8_145
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_145
operator|>=
literal|'A'
operator|&&
name|LA8_145
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_145
operator|>=
literal|'a'
operator|&&
name|LA8_145
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|48
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'M'
case|:
name|int
name|LA8_28
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_28
operator|==
literal|'A'
operator|)
condition|)
block|{
name|int
name|LA8_70
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_70
operator|==
literal|'C'
operator|)
condition|)
block|{
name|int
name|LA8_108
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_108
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_146
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_146
operator|==
literal|'O'
operator|)
condition|)
block|{
name|int
name|LA8_183
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_183
operator|==
literal|'$'
operator|||
name|LA8_183
operator|==
literal|'.'
operator|||
operator|(
name|LA8_183
operator|>=
literal|'0'
operator|&&
name|LA8_183
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_183
operator|>=
literal|'A'
operator|&&
name|LA8_183
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_183
operator|>=
literal|'a'
operator|&&
name|LA8_183
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|49
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|51
expr_stmt|;
block|}
break|break;
case|case
literal|'\''
case|:
name|alt8
operator|=
literal|50
expr_stmt|;
break|break;
case|case
literal|'$'
case|:
case|case
literal|'.'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'b'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'o'
case|:
case|case
literal|'r'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
name|alt8
operator|=
literal|51
expr_stmt|;
break|break;
case|case
literal|'\"'
case|:
name|alt8
operator|=
literal|52
expr_stmt|;
break|break;
case|case
literal|'#'
case|:
name|alt8
operator|=
literal|53
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|' '
case|:
name|alt8
operator|=
literal|54
expr_stmt|;
break|break;
case|case
literal|'%'
case|:
name|alt8
operator|=
literal|55
expr_stmt|;
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|"1:1: Tokens : ( T25 | T26 | T27 | T28 | T29 | T30 | T31 | T32 | T33 | T34 | T35 | T36 | T37 | T38 | T39 | T40 | T41 | T42 | T43 | T44 | T45 | T46 | T47 | T48 | T49 | T50 | T51 | T52 | T53 | T54 | T55 | T56 | T57 | T58 | T59 | T60 | T61 | T62 | T63 | STRINGS | INTEGERS | FUNCTION | EXECUTE | SORT | ITERATE | REVERSE | ENTRY | READ | MACRO | QUOTED | IDENTIFIER | STRING | INTEGER | WS | LINE_COMMENT );"
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt8
condition|)
block|{
case|case
literal|1
case|:
comment|// bst.g:1:10: T25
block|{
name|mT25
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// bst.g:1:14: T26
block|{
name|mT26
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// bst.g:1:18: T27
block|{
name|mT27
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// bst.g:1:22: T28
block|{
name|mT28
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// bst.g:1:26: T29
block|{
name|mT29
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// bst.g:1:30: T30
block|{
name|mT30
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// bst.g:1:34: T31
block|{
name|mT31
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// bst.g:1:38: T32
block|{
name|mT32
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// bst.g:1:42: T33
block|{
name|mT33
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// bst.g:1:46: T34
block|{
name|mT34
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
comment|// bst.g:1:50: T35
block|{
name|mT35
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// bst.g:1:54: T36
block|{
name|mT36
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|13
case|:
comment|// bst.g:1:58: T37
block|{
name|mT37
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|14
case|:
comment|// bst.g:1:62: T38
block|{
name|mT38
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|15
case|:
comment|// bst.g:1:66: T39
block|{
name|mT39
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|16
case|:
comment|// bst.g:1:70: T40
block|{
name|mT40
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|17
case|:
comment|// bst.g:1:74: T41
block|{
name|mT41
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|18
case|:
comment|// bst.g:1:78: T42
block|{
name|mT42
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|19
case|:
comment|// bst.g:1:82: T43
block|{
name|mT43
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|20
case|:
comment|// bst.g:1:86: T44
block|{
name|mT44
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|21
case|:
comment|// bst.g:1:90: T45
block|{
name|mT45
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|22
case|:
comment|// bst.g:1:94: T46
block|{
name|mT46
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|23
case|:
comment|// bst.g:1:98: T47
block|{
name|mT47
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|24
case|:
comment|// bst.g:1:102: T48
block|{
name|mT48
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|25
case|:
comment|// bst.g:1:106: T49
block|{
name|mT49
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|26
case|:
comment|// bst.g:1:110: T50
block|{
name|mT50
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|27
case|:
comment|// bst.g:1:114: T51
block|{
name|mT51
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|28
case|:
comment|// bst.g:1:118: T52
block|{
name|mT52
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|29
case|:
comment|// bst.g:1:122: T53
block|{
name|mT53
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|30
case|:
comment|// bst.g:1:126: T54
block|{
name|mT54
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|31
case|:
comment|// bst.g:1:130: T55
block|{
name|mT55
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|32
case|:
comment|// bst.g:1:134: T56
block|{
name|mT56
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|33
case|:
comment|// bst.g:1:138: T57
block|{
name|mT57
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|34
case|:
comment|// bst.g:1:142: T58
block|{
name|mT58
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|35
case|:
comment|// bst.g:1:146: T59
block|{
name|mT59
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|36
case|:
comment|// bst.g:1:150: T60
block|{
name|mT60
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|37
case|:
comment|// bst.g:1:154: T61
block|{
name|mT61
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|38
case|:
comment|// bst.g:1:158: T62
block|{
name|mT62
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|39
case|:
comment|// bst.g:1:162: T63
block|{
name|mT63
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|40
case|:
comment|// bst.g:1:166: STRINGS
block|{
name|mSTRINGS
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|41
case|:
comment|// bst.g:1:174: INTEGERS
block|{
name|mINTEGERS
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|42
case|:
comment|// bst.g:1:183: FUNCTION
block|{
name|mFUNCTION
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|43
case|:
comment|// bst.g:1:192: EXECUTE
block|{
name|mEXECUTE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|44
case|:
comment|// bst.g:1:200: SORT
block|{
name|mSORT
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|45
case|:
comment|// bst.g:1:205: ITERATE
block|{
name|mITERATE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|46
case|:
comment|// bst.g:1:213: REVERSE
block|{
name|mREVERSE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|47
case|:
comment|// bst.g:1:221: ENTRY
block|{
name|mENTRY
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|48
case|:
comment|// bst.g:1:227: READ
block|{
name|mREAD
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|49
case|:
comment|// bst.g:1:232: MACRO
block|{
name|mMACRO
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|50
case|:
comment|// bst.g:1:238: QUOTED
block|{
name|mQUOTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|51
case|:
comment|// bst.g:1:245: IDENTIFIER
block|{
name|mIDENTIFIER
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|52
case|:
comment|// bst.g:1:256: STRING
block|{
name|mSTRING
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|53
case|:
comment|// bst.g:1:263: INTEGER
block|{
name|mINTEGER
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|54
case|:
comment|// bst.g:1:271: WS
block|{
name|mWS
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|55
case|:
comment|// bst.g:1:274: LINE_COMMENT
block|{
name|mLINE_COMMENT
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
end_class

end_unit

