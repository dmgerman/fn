begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 3.4 C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g 2012-10-28 23:48:28
end_comment

begin_comment
comment|// Generated by ANTLR
end_comment

begin_package
DECL|package|net.sf.jabref.bst
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bst
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"all"
block|,
literal|"warnings"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|BstLexer
specifier|public
class|class
name|BstLexer
extends|extends
name|Lexer
block|{
DECL|field|EOF
specifier|public
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|T__25
specifier|public
specifier|static
specifier|final
name|int
name|T__25
init|=
literal|25
decl_stmt|;
DECL|field|T__26
specifier|public
specifier|static
specifier|final
name|int
name|T__26
init|=
literal|26
decl_stmt|;
DECL|field|T__27
specifier|public
specifier|static
specifier|final
name|int
name|T__27
init|=
literal|27
decl_stmt|;
DECL|field|T__28
specifier|public
specifier|static
specifier|final
name|int
name|T__28
init|=
literal|28
decl_stmt|;
DECL|field|T__29
specifier|public
specifier|static
specifier|final
name|int
name|T__29
init|=
literal|29
decl_stmt|;
DECL|field|T__30
specifier|public
specifier|static
specifier|final
name|int
name|T__30
init|=
literal|30
decl_stmt|;
DECL|field|T__31
specifier|public
specifier|static
specifier|final
name|int
name|T__31
init|=
literal|31
decl_stmt|;
DECL|field|T__32
specifier|public
specifier|static
specifier|final
name|int
name|T__32
init|=
literal|32
decl_stmt|;
DECL|field|T__33
specifier|public
specifier|static
specifier|final
name|int
name|T__33
init|=
literal|33
decl_stmt|;
DECL|field|COMMANDS
specifier|public
specifier|static
specifier|final
name|int
name|COMMANDS
init|=
literal|4
decl_stmt|;
DECL|field|ENTRY
specifier|public
specifier|static
specifier|final
name|int
name|ENTRY
init|=
literal|5
decl_stmt|;
DECL|field|EXECUTE
specifier|public
specifier|static
specifier|final
name|int
name|EXECUTE
init|=
literal|6
decl_stmt|;
DECL|field|FUNCTION
specifier|public
specifier|static
specifier|final
name|int
name|FUNCTION
init|=
literal|7
decl_stmt|;
DECL|field|IDENTIFIER
specifier|public
specifier|static
specifier|final
name|int
name|IDENTIFIER
init|=
literal|8
decl_stmt|;
DECL|field|IDLIST
specifier|public
specifier|static
specifier|final
name|int
name|IDLIST
init|=
literal|9
decl_stmt|;
DECL|field|INTEGER
specifier|public
specifier|static
specifier|final
name|int
name|INTEGER
init|=
literal|10
decl_stmt|;
DECL|field|INTEGERS
specifier|public
specifier|static
specifier|final
name|int
name|INTEGERS
init|=
literal|11
decl_stmt|;
DECL|field|ITERATE
specifier|public
specifier|static
specifier|final
name|int
name|ITERATE
init|=
literal|12
decl_stmt|;
DECL|field|LETTER
specifier|public
specifier|static
specifier|final
name|int
name|LETTER
init|=
literal|13
decl_stmt|;
DECL|field|LINE_COMMENT
specifier|public
specifier|static
specifier|final
name|int
name|LINE_COMMENT
init|=
literal|14
decl_stmt|;
DECL|field|MACRO
specifier|public
specifier|static
specifier|final
name|int
name|MACRO
init|=
literal|15
decl_stmt|;
DECL|field|NUMERAL
specifier|public
specifier|static
specifier|final
name|int
name|NUMERAL
init|=
literal|16
decl_stmt|;
DECL|field|QUOTED
specifier|public
specifier|static
specifier|final
name|int
name|QUOTED
init|=
literal|17
decl_stmt|;
DECL|field|READ
specifier|public
specifier|static
specifier|final
name|int
name|READ
init|=
literal|18
decl_stmt|;
DECL|field|REVERSE
specifier|public
specifier|static
specifier|final
name|int
name|REVERSE
init|=
literal|19
decl_stmt|;
DECL|field|SORT
specifier|public
specifier|static
specifier|final
name|int
name|SORT
init|=
literal|20
decl_stmt|;
DECL|field|STACK
specifier|public
specifier|static
specifier|final
name|int
name|STACK
init|=
literal|21
decl_stmt|;
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|22
decl_stmt|;
DECL|field|STRINGS
specifier|public
specifier|static
specifier|final
name|int
name|STRINGS
init|=
literal|23
decl_stmt|;
DECL|field|WS
specifier|public
specifier|static
specifier|final
name|int
name|WS
init|=
literal|24
decl_stmt|;
comment|// delegates
comment|// delegators
DECL|method|getDelegates ()
specifier|public
name|Lexer
index|[]
name|getDelegates
parameter_list|()
block|{
return|return
operator|new
name|Lexer
index|[]
block|{}
return|;
block|}
DECL|method|BstLexer ()
specifier|public
name|BstLexer
parameter_list|()
block|{}
DECL|method|BstLexer (CharStream input)
specifier|public
name|BstLexer
parameter_list|(
name|CharStream
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
operator|new
name|RecognizerSharedState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|BstLexer (CharStream input, RecognizerSharedState state)
specifier|public
name|BstLexer
parameter_list|(
name|CharStream
name|input
parameter_list|,
name|RecognizerSharedState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|getGrammarFileName ()
specifier|public
name|String
name|getGrammarFileName
parameter_list|()
block|{
return|return
literal|"C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g"
return|;
block|}
comment|// $ANTLR start "T__25"
DECL|method|mT__25 ()
specifier|public
specifier|final
name|void
name|mT__25
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|T__25
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:5:7: ( '*' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:5:9: '*'
block|{
name|match
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "T__25"
comment|// $ANTLR start "T__26"
DECL|method|mT__26 ()
specifier|public
specifier|final
name|void
name|mT__26
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|T__26
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:6:7: ( '+' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:6:9: '+'
block|{
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "T__26"
comment|// $ANTLR start "T__27"
DECL|method|mT__27 ()
specifier|public
specifier|final
name|void
name|mT__27
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|T__27
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:7:7: ( '-' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:7:9: '-'
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "T__27"
comment|// $ANTLR start "T__28"
DECL|method|mT__28 ()
specifier|public
specifier|final
name|void
name|mT__28
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|T__28
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:8:7: ( ':=' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:8:9: ':='
block|{
name|match
argument_list|(
literal|":="
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "T__28"
comment|// $ANTLR start "T__29"
DECL|method|mT__29 ()
specifier|public
specifier|final
name|void
name|mT__29
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|T__29
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:9:7: ( '<' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:9:9: '<'
block|{
name|match
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "T__29"
comment|// $ANTLR start "T__30"
DECL|method|mT__30 ()
specifier|public
specifier|final
name|void
name|mT__30
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|T__30
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:10:7: ( '=' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:10:9: '='
block|{
name|match
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "T__30"
comment|// $ANTLR start "T__31"
DECL|method|mT__31 ()
specifier|public
specifier|final
name|void
name|mT__31
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|T__31
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:11:7: ( '>' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:11:9: '>'
block|{
name|match
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "T__31"
comment|// $ANTLR start "T__32"
DECL|method|mT__32 ()
specifier|public
specifier|final
name|void
name|mT__32
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|T__32
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:12:7: ( '{' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:12:9: '{'
block|{
name|match
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "T__32"
comment|// $ANTLR start "T__33"
DECL|method|mT__33 ()
specifier|public
specifier|final
name|void
name|mT__33
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|T__33
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:13:7: ( '}' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:13:9: '}'
block|{
name|match
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "T__33"
comment|// $ANTLR start "STRINGS"
DECL|method|mSTRINGS ()
specifier|public
specifier|final
name|void
name|mSTRINGS
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|STRINGS
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:61:9: ( 'STRINGS' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:61:11: 'STRINGS'
block|{
name|match
argument_list|(
literal|"STRINGS"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "STRINGS"
comment|// $ANTLR start "INTEGERS"
DECL|method|mINTEGERS ()
specifier|public
specifier|final
name|void
name|mINTEGERS
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|INTEGERS
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:62:10: ( 'INTEGERS' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:62:12: 'INTEGERS'
block|{
name|match
argument_list|(
literal|"INTEGERS"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "INTEGERS"
comment|// $ANTLR start "FUNCTION"
DECL|method|mFUNCTION ()
specifier|public
specifier|final
name|void
name|mFUNCTION
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|FUNCTION
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:63:10: ( 'FUNCTION' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:63:12: 'FUNCTION'
block|{
name|match
argument_list|(
literal|"FUNCTION"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "FUNCTION"
comment|// $ANTLR start "EXECUTE"
DECL|method|mEXECUTE ()
specifier|public
specifier|final
name|void
name|mEXECUTE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|EXECUTE
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:64:9: ( 'EXECUTE' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:64:11: 'EXECUTE'
block|{
name|match
argument_list|(
literal|"EXECUTE"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "EXECUTE"
comment|// $ANTLR start "SORT"
DECL|method|mSORT ()
specifier|public
specifier|final
name|void
name|mSORT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|SORT
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:65:6: ( 'SORT' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:65:8: 'SORT'
block|{
name|match
argument_list|(
literal|"SORT"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "SORT"
comment|// $ANTLR start "ITERATE"
DECL|method|mITERATE ()
specifier|public
specifier|final
name|void
name|mITERATE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|ITERATE
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:66:9: ( 'ITERATE' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:66:11: 'ITERATE'
block|{
name|match
argument_list|(
literal|"ITERATE"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "ITERATE"
comment|// $ANTLR start "REVERSE"
DECL|method|mREVERSE ()
specifier|public
specifier|final
name|void
name|mREVERSE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|REVERSE
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:67:9: ( 'REVERSE' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:67:11: 'REVERSE'
block|{
name|match
argument_list|(
literal|"REVERSE"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "REVERSE"
comment|// $ANTLR start "ENTRY"
DECL|method|mENTRY ()
specifier|public
specifier|final
name|void
name|mENTRY
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|ENTRY
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:68:7: ( 'ENTRY' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:68:9: 'ENTRY'
block|{
name|match
argument_list|(
literal|"ENTRY"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "ENTRY"
comment|// $ANTLR start "READ"
DECL|method|mREAD ()
specifier|public
specifier|final
name|void
name|mREAD
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|READ
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:69:6: ( 'READ' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:69:8: 'READ'
block|{
name|match
argument_list|(
literal|"READ"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "READ"
comment|// $ANTLR start "MACRO"
DECL|method|mMACRO ()
specifier|public
specifier|final
name|void
name|mMACRO
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|MACRO
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:70:7: ( 'MACRO' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:70:9: 'MACRO'
block|{
name|match
argument_list|(
literal|"MACRO"
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "MACRO"
comment|// $ANTLR start "QUOTED"
DECL|method|mQUOTED ()
specifier|public
specifier|final
name|void
name|mQUOTED
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|QUOTED
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:73:2: ( '\\'' IDENTIFIER )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:73:4: '\\'' IDENTIFIER
block|{
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|mIDENTIFIER
argument_list|()
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "QUOTED"
comment|// $ANTLR start "IDENTIFIER"
DECL|method|mIDENTIFIER ()
specifier|public
specifier|final
name|void
name|mIDENTIFIER
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|IDENTIFIER
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:76:2: ( LETTER ( LETTER | NUMERAL )* )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:76:4: LETTER ( LETTER | NUMERAL )*
block|{
name|mLETTER
argument_list|()
expr_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:76:11: ( LETTER | NUMERAL )*
name|loop1
label|:
do|do
block|{
name|int
name|alt1
init|=
literal|2
decl_stmt|;
name|int
name|LA1_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA1_0
operator|==
literal|'$'
operator|||
name|LA1_0
operator|==
literal|'.'
operator|||
operator|(
name|LA1_0
operator|>=
literal|'0'
operator|&&
name|LA1_0
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA1_0
operator|>=
literal|'A'
operator|&&
name|LA1_0
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA1_0
operator|>=
literal|'a'
operator|&&
name|LA1_0
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt1
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt1
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:
block|{
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'A'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'a'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'z'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
break|break
name|loop1
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "IDENTIFIER"
comment|// $ANTLR start "LETTER"
DECL|method|mLETTER ()
specifier|public
specifier|final
name|void
name|mLETTER
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:79:2: ( ( 'a' .. 'z' | 'A' .. 'Z' | '.' | '$' ) )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:
block|{
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'A'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'a'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'z'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "LETTER"
comment|// $ANTLR start "STRING"
DECL|method|mSTRING ()
specifier|public
specifier|final
name|void
name|mSTRING
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|STRING
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:82:2: ( '\"' (~ ( '\"' ) )* '\"' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:82:4: '\"' (~ ( '\"' ) )* '\"'
block|{
name|match
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:82:8: (~ ( '\"' ) )*
name|loop2
label|:
do|do
block|{
name|int
name|alt2
init|=
literal|2
decl_stmt|;
name|int
name|LA2_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA2_0
operator|>=
literal|'\u0000'
operator|&&
name|LA2_0
operator|<=
literal|'!'
operator|)
operator|||
operator|(
name|LA2_0
operator|>=
literal|'#'
operator|&&
name|LA2_0
operator|<=
literal|'\uFFFF'
operator|)
operator|)
condition|)
block|{
name|alt2
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt2
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'!'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'#'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\uFFFF'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
break|break
name|loop2
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|match
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "STRING"
comment|// $ANTLR start "INTEGER"
DECL|method|mINTEGER ()
specifier|public
specifier|final
name|void
name|mINTEGER
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|INTEGER
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:85:2: ( '#' ( '+' | '-' )? ( NUMERAL )+ )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:85:4: '#' ( '+' | '-' )? ( NUMERAL )+
block|{
name|match
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:85:8: ( '+' | '-' )?
name|int
name|alt3
init|=
literal|2
decl_stmt|;
name|int
name|LA3_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA3_0
operator|==
literal|'+'
operator|||
name|LA3_0
operator|==
literal|'-'
operator|)
condition|)
block|{
name|alt3
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt3
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:
block|{
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'+'
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
block|}
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:85:19: ( NUMERAL )+
name|int
name|cnt4
init|=
literal|0
decl_stmt|;
name|loop4
label|:
do|do
block|{
name|int
name|alt4
init|=
literal|2
decl_stmt|;
name|int
name|LA4_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA4_0
operator|>=
literal|'0'
operator|&&
name|LA4_0
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt4
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt4
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
if|if
condition|(
name|cnt4
operator|>=
literal|1
condition|)
break|break
name|loop4
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|4
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt4
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "INTEGER"
comment|// $ANTLR start "NUMERAL"
DECL|method|mNUMERAL ()
specifier|public
specifier|final
name|void
name|mNUMERAL
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:88:2: ( ( '0' .. '9' ) )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "NUMERAL"
comment|// $ANTLR start "WS"
DECL|method|mWS ()
specifier|public
specifier|final
name|void
name|mWS
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|WS
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:91:2: ( ( ' ' | '\\t' | '\\n' )+ )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:91:4: ( ' ' | '\\t' | '\\n' )+
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:91:4: ( ' ' | '\\t' | '\\n' )+
name|int
name|cnt5
init|=
literal|0
decl_stmt|;
name|loop5
label|:
do|do
block|{
name|int
name|alt5
init|=
literal|2
decl_stmt|;
name|int
name|LA5_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA5_0
operator|>=
literal|'\t'
operator|&&
name|LA5_0
operator|<=
literal|'\n'
operator|)
operator|||
name|LA5_0
operator|==
literal|' '
operator|)
condition|)
block|{
name|alt5
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt5
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\t'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\n'
operator|)
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
if|if
condition|(
name|cnt5
operator|>=
literal|1
condition|)
break|break
name|loop5
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|5
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt5
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|_channel
operator|=
literal|99
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "WS"
comment|// $ANTLR start "LINE_COMMENT"
DECL|method|mLINE_COMMENT ()
specifier|public
specifier|final
name|void
name|mLINE_COMMENT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|int
name|_type
init|=
name|LINE_COMMENT
decl_stmt|;
name|int
name|_channel
init|=
name|DEFAULT_TOKEN_CHANNEL
decl_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:94:5: ( '%' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:94:7: '%' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
block|{
name|match
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:94:11: (~ ( '\\n' | '\\r' ) )*
name|loop6
label|:
do|do
block|{
name|int
name|alt6
init|=
literal|2
decl_stmt|;
name|int
name|LA6_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA6_0
operator|>=
literal|'\u0000'
operator|&&
name|LA6_0
operator|<=
literal|'\t'
operator|)
operator|||
operator|(
name|LA6_0
operator|>=
literal|'\u000B'
operator|&&
name|LA6_0
operator|<=
literal|'\f'
operator|)
operator|||
operator|(
name|LA6_0
operator|>=
literal|'\u000E'
operator|&&
name|LA6_0
operator|<=
literal|'\uFFFF'
operator|)
operator|)
condition|)
block|{
name|alt6
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt6
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\t'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u000B'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\f'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u000E'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\uFFFF'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
break|break
name|loop6
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:94:25: ( '\\r' )?
name|int
name|alt7
init|=
literal|2
decl_stmt|;
name|int
name|LA7_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA7_0
operator|==
literal|'\r'
operator|)
condition|)
block|{
name|alt7
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt7
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:94:25: '\\r'
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|_channel
operator|=
literal|99
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|_type
expr_stmt|;
name|state
operator|.
name|channel
operator|=
name|_channel
expr_stmt|;
block|}
finally|finally
block|{
comment|// do for sure before leaving
block|}
block|}
comment|// $ANTLR end "LINE_COMMENT"
DECL|method|mTokens ()
specifier|public
name|void
name|mTokens
parameter_list|()
throws|throws
name|RecognitionException
block|{
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:8: ( T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | STRINGS | INTEGERS | FUNCTION | EXECUTE | SORT | ITERATE | REVERSE | ENTRY | READ | MACRO | QUOTED | IDENTIFIER | STRING | INTEGER | WS | LINE_COMMENT )
name|int
name|alt8
init|=
literal|25
decl_stmt|;
name|alt8
operator|=
name|dfa8
operator|.
name|predict
argument_list|(
name|input
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|alt8
condition|)
block|{
case|case
literal|1
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:10: T__25
block|{
name|mT__25
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:16: T__26
block|{
name|mT__26
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:22: T__27
block|{
name|mT__27
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:28: T__28
block|{
name|mT__28
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:34: T__29
block|{
name|mT__29
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:40: T__30
block|{
name|mT__30
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:46: T__31
block|{
name|mT__31
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:52: T__32
block|{
name|mT__32
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:58: T__33
block|{
name|mT__33
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:64: STRINGS
block|{
name|mSTRINGS
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:72: INTEGERS
block|{
name|mINTEGERS
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:81: FUNCTION
block|{
name|mFUNCTION
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|13
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:90: EXECUTE
block|{
name|mEXECUTE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|14
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:98: SORT
block|{
name|mSORT
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|15
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:103: ITERATE
block|{
name|mITERATE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|16
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:111: REVERSE
block|{
name|mREVERSE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|17
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:119: ENTRY
block|{
name|mENTRY
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|18
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:125: READ
block|{
name|mREAD
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|19
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:130: MACRO
block|{
name|mMACRO
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|20
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:136: QUOTED
block|{
name|mQUOTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|21
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:143: IDENTIFIER
block|{
name|mIDENTIFIER
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|22
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:154: STRING
block|{
name|mSTRING
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|23
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:161: INTEGER
block|{
name|mINTEGER
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|24
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:169: WS
block|{
name|mWS
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|25
case|:
comment|// C:\\git-repos\\jabref\\jabref\\src\\java\\net\\sf\\jabref\\bst\\Bst.g:1:172: LINE_COMMENT
block|{
name|mLINE_COMMENT
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|field|dfa8
specifier|protected
name|DFA8
name|dfa8
init|=
operator|new
name|DFA8
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|DFA8_eotS
specifier|static
specifier|final
name|String
name|DFA8_eotS
init|=
literal|"\12\uffff\6\21\6\uffff\24\21\1\64\6\21\1\73\2\21\1\uffff\4\21\1"
operator|+
literal|"\102\1\21\1\uffff\1\104\5\21\1\uffff\1\21\1\uffff\1\113\1\21\1\115"
operator|+
literal|"\1\21\1\117\1\120\1\uffff\1\121\1\uffff\1\122\4\uffff"
decl_stmt|;
DECL|field|DFA8_eofS
specifier|static
specifier|final
name|String
name|DFA8_eofS
init|=
literal|"\123\uffff"
decl_stmt|;
DECL|field|DFA8_minS
specifier|static
specifier|final
name|String
name|DFA8_minS
init|=
literal|"\1\11\11\uffff\1\117\1\116\1\125\1\116\1\105\1\101\6\uffff\2\122"
operator|+
literal|"\1\124\1\105\1\116\1\105\1\124\1\101\1\103\1\111\1\124\1\105\1\122"
operator|+
literal|"\2\103\1\122\1\105\1\104\1\122\1\116\1\44\1\107\1\101\1\124\1\125"
operator|+
literal|"\1\131\1\122\1\44\1\117\1\107\1\uffff\1\105\1\124\1\111\1\124\1"
operator|+
literal|"\44\1\123\1\uffff\1\44\1\123\1\122\1\105\1\117\1\105\1\uffff\1\105"
operator|+
literal|"\1\uffff\1\44\1\123\1\44\1\116\2\44\1\uffff\1\44\1\uffff\1\44\4"
operator|+
literal|"\uffff"
decl_stmt|;
DECL|field|DFA8_maxS
specifier|static
specifier|final
name|String
name|DFA8_maxS
init|=
literal|"\1\175\11\uffff\2\124\1\125\1\130\1\105\1\101\6\uffff\2\122\1\124"
operator|+
literal|"\1\105\1\116\1\105\1\124\1\126\1\103\1\111\1\124\1\105\1\122\2\103"
operator|+
literal|"\1\122\1\105\1\104\1\122\1\116\1\172\1\107\1\101\1\124\1\125\1\131"
operator|+
literal|"\1\122\1\172\1\117\1\107\1\uffff\1\105\1\124\1\111\1\124\1\172\1"
operator|+
literal|"\123\1\uffff\1\172\1\123\1\122\1\105\1\117\1\105\1\uffff\1\105\1"
operator|+
literal|"\uffff\1\172\1\123\1\172\1\116\2\172\1\uffff\1\172\1\uffff\1\172"
operator|+
literal|"\4\uffff"
decl_stmt|;
DECL|field|DFA8_acceptS
specifier|static
specifier|final
name|String
name|DFA8_acceptS
init|=
literal|"\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\6\uffff\1\24\1\25"
operator|+
literal|"\1\26\1\27\1\30\1\31\36\uffff\1\16\6\uffff\1\22\6\uffff\1\21\1\uffff"
operator|+
literal|"\1\23\6\uffff\1\12\1\uffff\1\17\1\uffff\1\15\1\20\1\13\1\14"
decl_stmt|;
DECL|field|DFA8_specialS
specifier|static
specifier|final
name|String
name|DFA8_specialS
init|=
literal|"\123\uffff}>"
decl_stmt|;
DECL|field|DFA8_transitionS
specifier|static
specifier|final
name|String
index|[]
name|DFA8_transitionS
init|=
block|{
literal|"\2\24\25\uffff\1\24\1\uffff\1\22\1\23\1\21\1\25\1\uffff\1\20"
operator|+
literal|"\2\uffff\1\1\1\2\1\uffff\1\3\1\21\13\uffff\1\4\1\uffff\1\5\1"
operator|+
literal|"\6\1\7\2\uffff\4\21\1\15\1\14\2\21\1\13\3\21\1\17\4\21\1\16"
operator|+
literal|"\1\12\7\21\6\uffff\32\21\1\10\1\uffff\1\11"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|"\1\27\4\uffff\1\26"
block|,
literal|"\1\30\5\uffff\1\31"
block|,
literal|"\1\32"
block|,
literal|"\1\34\11\uffff\1\33"
block|,
literal|"\1\35"
block|,
literal|"\1\36"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|"\1\37"
block|,
literal|"\1\40"
block|,
literal|"\1\41"
block|,
literal|"\1\42"
block|,
literal|"\1\43"
block|,
literal|"\1\44"
block|,
literal|"\1\45"
block|,
literal|"\1\47\24\uffff\1\46"
block|,
literal|"\1\50"
block|,
literal|"\1\51"
block|,
literal|"\1\52"
block|,
literal|"\1\53"
block|,
literal|"\1\54"
block|,
literal|"\1\55"
block|,
literal|"\1\56"
block|,
literal|"\1\57"
block|,
literal|"\1\60"
block|,
literal|"\1\61"
block|,
literal|"\1\62"
block|,
literal|"\1\63"
block|,
literal|"\1\21\11\uffff\1\21\1\uffff\12\21\7\uffff\32\21\6\uffff\32"
operator|+
literal|"\21"
block|,
literal|"\1\65"
block|,
literal|"\1\66"
block|,
literal|"\1\67"
block|,
literal|"\1\70"
block|,
literal|"\1\71"
block|,
literal|"\1\72"
block|,
literal|"\1\21\11\uffff\1\21\1\uffff\12\21\7\uffff\32\21\6\uffff\32"
operator|+
literal|"\21"
block|,
literal|"\1\74"
block|,
literal|"\1\75"
block|,
literal|""
block|,
literal|"\1\76"
block|,
literal|"\1\77"
block|,
literal|"\1\100"
block|,
literal|"\1\101"
block|,
literal|"\1\21\11\uffff\1\21\1\uffff\12\21\7\uffff\32\21\6\uffff\32"
operator|+
literal|"\21"
block|,
literal|"\1\103"
block|,
literal|""
block|,
literal|"\1\21\11\uffff\1\21\1\uffff\12\21\7\uffff\32\21\6\uffff\32"
operator|+
literal|"\21"
block|,
literal|"\1\105"
block|,
literal|"\1\106"
block|,
literal|"\1\107"
block|,
literal|"\1\110"
block|,
literal|"\1\111"
block|,
literal|""
block|,
literal|"\1\112"
block|,
literal|""
block|,
literal|"\1\21\11\uffff\1\21\1\uffff\12\21\7\uffff\32\21\6\uffff\32"
operator|+
literal|"\21"
block|,
literal|"\1\114"
block|,
literal|"\1\21\11\uffff\1\21\1\uffff\12\21\7\uffff\32\21\6\uffff\32"
operator|+
literal|"\21"
block|,
literal|"\1\116"
block|,
literal|"\1\21\11\uffff\1\21\1\uffff\12\21\7\uffff\32\21\6\uffff\32"
operator|+
literal|"\21"
block|,
literal|"\1\21\11\uffff\1\21\1\uffff\12\21\7\uffff\32\21\6\uffff\32"
operator|+
literal|"\21"
block|,
literal|""
block|,
literal|"\1\21\11\uffff\1\21\1\uffff\12\21\7\uffff\32\21\6\uffff\32"
operator|+
literal|"\21"
block|,
literal|""
block|,
literal|"\1\21\11\uffff\1\21\1\uffff\12\21\7\uffff\32\21\6\uffff\32"
operator|+
literal|"\21"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
decl_stmt|;
DECL|field|DFA8_eot
specifier|static
specifier|final
name|short
index|[]
name|DFA8_eot
init|=
name|DFA
operator|.
name|unpackEncodedString
argument_list|(
name|DFA8_eotS
argument_list|)
decl_stmt|;
DECL|field|DFA8_eof
specifier|static
specifier|final
name|short
index|[]
name|DFA8_eof
init|=
name|DFA
operator|.
name|unpackEncodedString
argument_list|(
name|DFA8_eofS
argument_list|)
decl_stmt|;
DECL|field|DFA8_min
specifier|static
specifier|final
name|char
index|[]
name|DFA8_min
init|=
name|DFA
operator|.
name|unpackEncodedStringToUnsignedChars
argument_list|(
name|DFA8_minS
argument_list|)
decl_stmt|;
DECL|field|DFA8_max
specifier|static
specifier|final
name|char
index|[]
name|DFA8_max
init|=
name|DFA
operator|.
name|unpackEncodedStringToUnsignedChars
argument_list|(
name|DFA8_maxS
argument_list|)
decl_stmt|;
DECL|field|DFA8_accept
specifier|static
specifier|final
name|short
index|[]
name|DFA8_accept
init|=
name|DFA
operator|.
name|unpackEncodedString
argument_list|(
name|DFA8_acceptS
argument_list|)
decl_stmt|;
DECL|field|DFA8_special
specifier|static
specifier|final
name|short
index|[]
name|DFA8_special
init|=
name|DFA
operator|.
name|unpackEncodedString
argument_list|(
name|DFA8_specialS
argument_list|)
decl_stmt|;
DECL|field|DFA8_transition
specifier|static
specifier|final
name|short
index|[]
index|[]
name|DFA8_transition
decl_stmt|;
static|static
block|{
name|int
name|numStates
init|=
name|DFA8_transitionS
operator|.
name|length
decl_stmt|;
name|DFA8_transition
operator|=
operator|new
name|short
index|[
name|numStates
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStates
condition|;
name|i
operator|++
control|)
block|{
name|DFA8_transition
index|[
name|i
index|]
operator|=
name|DFA
operator|.
name|unpackEncodedString
argument_list|(
name|DFA8_transitionS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DFA8
class|class
name|DFA8
extends|extends
name|DFA
block|{
DECL|method|DFA8 (BaseRecognizer recognizer)
specifier|public
name|DFA8
parameter_list|(
name|BaseRecognizer
name|recognizer
parameter_list|)
block|{
name|this
operator|.
name|recognizer
operator|=
name|recognizer
expr_stmt|;
name|this
operator|.
name|decisionNumber
operator|=
literal|8
expr_stmt|;
name|this
operator|.
name|eot
operator|=
name|DFA8_eot
expr_stmt|;
name|this
operator|.
name|eof
operator|=
name|DFA8_eof
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|DFA8_min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|DFA8_max
expr_stmt|;
name|this
operator|.
name|accept
operator|=
name|DFA8_accept
expr_stmt|;
name|this
operator|.
name|special
operator|=
name|DFA8_special
expr_stmt|;
name|this
operator|.
name|transition
operator|=
name|DFA8_transition
expr_stmt|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"1:1: Tokens : ( T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | STRINGS | INTEGERS | FUNCTION | EXECUTE | SORT | ITERATE | REVERSE | ENTRY | READ | MACRO | QUOTED | IDENTIFIER | STRING | INTEGER | WS | LINE_COMMENT );"
return|;
block|}
block|}
block|}
end_class

end_unit

