begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.bst
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bst
package|;
end_package

begin_comment
comment|// $ANTLR 3.0b5 Bst.g 2006-11-23 23:20:24
end_comment

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|CharStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|EarlyExitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|Lexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|MismatchedSetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|NoViableAltException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|Token
import|;
end_import

begin_class
DECL|class|BstLexer
specifier|public
class|class
name|BstLexer
extends|extends
name|Lexer
block|{
DECL|field|LETTER
specifier|public
specifier|static
specifier|final
name|int
name|LETTER
init|=
literal|21
decl_stmt|;
DECL|field|T29
specifier|public
specifier|static
specifier|final
name|int
name|T29
init|=
literal|29
decl_stmt|;
DECL|field|T33
specifier|public
specifier|static
specifier|final
name|int
name|T33
init|=
literal|33
decl_stmt|;
DECL|field|INTEGERS
specifier|public
specifier|static
specifier|final
name|int
name|INTEGERS
init|=
literal|9
decl_stmt|;
DECL|field|ENTRY
specifier|public
specifier|static
specifier|final
name|int
name|ENTRY
init|=
literal|6
decl_stmt|;
DECL|field|WS
specifier|public
specifier|static
specifier|final
name|int
name|WS
init|=
literal|23
decl_stmt|;
DECL|field|COMMANDS
specifier|public
specifier|static
specifier|final
name|int
name|COMMANDS
init|=
literal|7
decl_stmt|;
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|12
decl_stmt|;
DECL|field|T28
specifier|public
specifier|static
specifier|final
name|int
name|T28
init|=
literal|28
decl_stmt|;
DECL|field|EXECUTE
specifier|public
specifier|static
specifier|final
name|int
name|EXECUTE
init|=
literal|14
decl_stmt|;
DECL|field|LINE_COMMENT
specifier|public
specifier|static
specifier|final
name|int
name|LINE_COMMENT
init|=
literal|24
decl_stmt|;
DECL|field|SORT
specifier|public
specifier|static
specifier|final
name|int
name|SORT
init|=
literal|17
decl_stmt|;
DECL|field|STACK
specifier|public
specifier|static
specifier|final
name|int
name|STACK
init|=
literal|5
decl_stmt|;
DECL|field|REVERSE
specifier|public
specifier|static
specifier|final
name|int
name|REVERSE
init|=
literal|16
decl_stmt|;
DECL|field|QUOTED
specifier|public
specifier|static
specifier|final
name|int
name|QUOTED
init|=
literal|20
decl_stmt|;
DECL|field|T25
specifier|public
specifier|static
specifier|final
name|int
name|T25
init|=
literal|25
decl_stmt|;
DECL|field|INTEGER
specifier|public
specifier|static
specifier|final
name|int
name|INTEGER
init|=
literal|19
decl_stmt|;
DECL|field|ITERATE
specifier|public
specifier|static
specifier|final
name|int
name|ITERATE
init|=
literal|15
decl_stmt|;
DECL|field|FUNCTION
specifier|public
specifier|static
specifier|final
name|int
name|FUNCTION
init|=
literal|10
decl_stmt|;
DECL|field|T26
specifier|public
specifier|static
specifier|final
name|int
name|T26
init|=
literal|26
decl_stmt|;
DECL|field|EOF
specifier|public
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|T32
specifier|public
specifier|static
specifier|final
name|int
name|T32
init|=
literal|32
decl_stmt|;
DECL|field|Tokens
specifier|public
specifier|static
specifier|final
name|int
name|Tokens
init|=
literal|34
decl_stmt|;
DECL|field|STRINGS
specifier|public
specifier|static
specifier|final
name|int
name|STRINGS
init|=
literal|8
decl_stmt|;
DECL|field|T31
specifier|public
specifier|static
specifier|final
name|int
name|T31
init|=
literal|31
decl_stmt|;
DECL|field|T27
specifier|public
specifier|static
specifier|final
name|int
name|T27
init|=
literal|27
decl_stmt|;
DECL|field|IDENTIFIER
specifier|public
specifier|static
specifier|final
name|int
name|IDENTIFIER
init|=
literal|18
decl_stmt|;
DECL|field|MACRO
specifier|public
specifier|static
specifier|final
name|int
name|MACRO
init|=
literal|11
decl_stmt|;
DECL|field|T30
specifier|public
specifier|static
specifier|final
name|int
name|T30
init|=
literal|30
decl_stmt|;
DECL|field|IDLIST
specifier|public
specifier|static
specifier|final
name|int
name|IDLIST
init|=
literal|4
decl_stmt|;
DECL|field|NUMERAL
specifier|public
specifier|static
specifier|final
name|int
name|NUMERAL
init|=
literal|22
decl_stmt|;
DECL|field|READ
specifier|public
specifier|static
specifier|final
name|int
name|READ
init|=
literal|13
decl_stmt|;
DECL|method|BstLexer ()
specifier|public
name|BstLexer
parameter_list|()
block|{              }
DECL|method|BstLexer (CharStream input)
specifier|public
name|BstLexer
parameter_list|(
name|CharStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|getGrammarFileName ()
specifier|public
name|String
name|getGrammarFileName
parameter_list|()
block|{
return|return
literal|"Bst.g"
return|;
block|}
comment|// $ANTLR start T25
DECL|method|mT25 ()
specifier|public
name|void
name|mT25
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|T25
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:3:7: ( '{' )
comment|// Bst.g:3:7: '{'
block|{
name|match
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T25
comment|// $ANTLR start T26
DECL|method|mT26 ()
specifier|public
name|void
name|mT26
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|T26
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:4:7: ( '}' )
comment|// Bst.g:4:7: '}'
block|{
name|match
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T26
comment|// $ANTLR start T27
DECL|method|mT27 ()
specifier|public
name|void
name|mT27
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|T27
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:5:7: ( '<' )
comment|// Bst.g:5:7: '<'
block|{
name|match
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T27
comment|// $ANTLR start T28
DECL|method|mT28 ()
specifier|public
name|void
name|mT28
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|T28
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:6:7: ( '>' )
comment|// Bst.g:6:7: '>'
block|{
name|match
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T28
comment|// $ANTLR start T29
DECL|method|mT29 ()
specifier|public
name|void
name|mT29
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|T29
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:7:7: ( '=' )
comment|// Bst.g:7:7: '='
block|{
name|match
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T29
comment|// $ANTLR start T30
DECL|method|mT30 ()
specifier|public
name|void
name|mT30
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|T30
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:8:7: ( '+' )
comment|// Bst.g:8:7: '+'
block|{
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T30
comment|// $ANTLR start T31
DECL|method|mT31 ()
specifier|public
name|void
name|mT31
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|T31
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:9:7: ( '-' )
comment|// Bst.g:9:7: '-'
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T31
comment|// $ANTLR start T32
DECL|method|mT32 ()
specifier|public
name|void
name|mT32
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|T32
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:10:7: ( ':=' )
comment|// Bst.g:10:7: ':='
block|{
name|match
argument_list|(
literal|":="
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T32
comment|// $ANTLR start T33
DECL|method|mT33 ()
specifier|public
name|void
name|mT33
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|T33
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:11:7: ( '*' )
comment|// Bst.g:11:7: '*'
block|{
name|match
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end T33
comment|// $ANTLR start STRINGS
DECL|method|mSTRINGS ()
specifier|public
name|void
name|mSTRINGS
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|STRINGS
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:53:11: ( 'STRINGS' )
comment|// Bst.g:53:11: 'STRINGS'
block|{
name|match
argument_list|(
literal|"STRINGS"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end STRINGS
comment|// $ANTLR start INTEGERS
DECL|method|mINTEGERS ()
specifier|public
name|void
name|mINTEGERS
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|INTEGERS
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:54:12: ( 'INTEGERS' )
comment|// Bst.g:54:12: 'INTEGERS'
block|{
name|match
argument_list|(
literal|"INTEGERS"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end INTEGERS
comment|// $ANTLR start FUNCTION
DECL|method|mFUNCTION ()
specifier|public
name|void
name|mFUNCTION
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|FUNCTION
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:55:12: ( 'FUNCTION' )
comment|// Bst.g:55:12: 'FUNCTION'
block|{
name|match
argument_list|(
literal|"FUNCTION"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end FUNCTION
comment|// $ANTLR start EXECUTE
DECL|method|mEXECUTE ()
specifier|public
name|void
name|mEXECUTE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|EXECUTE
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:56:11: ( 'EXECUTE' )
comment|// Bst.g:56:11: 'EXECUTE'
block|{
name|match
argument_list|(
literal|"EXECUTE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end EXECUTE
comment|// $ANTLR start SORT
DECL|method|mSORT ()
specifier|public
name|void
name|mSORT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|SORT
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:57:8: ( 'SORT' )
comment|// Bst.g:57:8: 'SORT'
block|{
name|match
argument_list|(
literal|"SORT"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end SORT
comment|// $ANTLR start ITERATE
DECL|method|mITERATE ()
specifier|public
name|void
name|mITERATE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|ITERATE
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:58:11: ( 'ITERATE' )
comment|// Bst.g:58:11: 'ITERATE'
block|{
name|match
argument_list|(
literal|"ITERATE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end ITERATE
comment|// $ANTLR start REVERSE
DECL|method|mREVERSE ()
specifier|public
name|void
name|mREVERSE
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|REVERSE
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:59:11: ( 'REVERSE' )
comment|// Bst.g:59:11: 'REVERSE'
block|{
name|match
argument_list|(
literal|"REVERSE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end REVERSE
comment|// $ANTLR start ENTRY
DECL|method|mENTRY ()
specifier|public
name|void
name|mENTRY
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|ENTRY
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:60:9: ( 'ENTRY' )
comment|// Bst.g:60:9: 'ENTRY'
block|{
name|match
argument_list|(
literal|"ENTRY"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end ENTRY
comment|// $ANTLR start READ
DECL|method|mREAD ()
specifier|public
name|void
name|mREAD
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|READ
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:61:8: ( 'READ' )
comment|// Bst.g:61:8: 'READ'
block|{
name|match
argument_list|(
literal|"READ"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end READ
comment|// $ANTLR start MACRO
DECL|method|mMACRO ()
specifier|public
name|void
name|mMACRO
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|MACRO
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:62:9: ( 'MACRO' )
comment|// Bst.g:62:9: 'MACRO'
block|{
name|match
argument_list|(
literal|"MACRO"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end MACRO
comment|// $ANTLR start QUOTED
DECL|method|mQUOTED ()
specifier|public
name|void
name|mQUOTED
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|QUOTED
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:65:4: ( '\\'' IDENTIFIER )
comment|// Bst.g:65:4: '\\'' IDENTIFIER
block|{
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|mIDENTIFIER
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end QUOTED
comment|// $ANTLR start IDENTIFIER
DECL|method|mIDENTIFIER ()
specifier|public
name|void
name|mIDENTIFIER
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|IDENTIFIER
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:68:4: ( LETTER ( LETTER | NUMERAL )* )
comment|// Bst.g:68:4: LETTER ( LETTER | NUMERAL )*
block|{
name|mLETTER
argument_list|()
expr_stmt|;
comment|// Bst.g:68:11: ( LETTER | NUMERAL )*
name|loop1
label|:
do|do
block|{
name|int
name|alt1
init|=
literal|3
decl_stmt|;
name|int
name|LA1_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA1_0
operator|==
literal|'$'
operator|||
name|LA1_0
operator|==
literal|'.'
operator|||
operator|(
name|LA1_0
operator|>=
literal|'A'
operator|&&
name|LA1_0
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA1_0
operator|>=
literal|'a'
operator|&&
name|LA1_0
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt1
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA1_0
operator|>=
literal|'0'
operator|&&
name|LA1_0
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt1
operator|=
literal|2
expr_stmt|;
block|}
switch|switch
condition|(
name|alt1
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:68:12: LETTER
block|{
name|mLETTER
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// Bst.g:68:19: NUMERAL
block|{
name|mNUMERAL
argument_list|()
expr_stmt|;
block|}
break|break;
default|default :
break|break
name|loop1
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end IDENTIFIER
comment|// $ANTLR start LETTER
DECL|method|mLETTER ()
specifier|public
name|void
name|mLETTER
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
comment|// Bst.g:71:4: ( ('a'..'z'|'A'..'Z'|'.'|'$'))
comment|// Bst.g:71:4: ('a'..'z'|'A'..'Z'|'.'|'$')
block|{
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'A'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'a'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'z'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end LETTER
comment|// $ANTLR start STRING
DECL|method|mSTRING ()
specifier|public
name|void
name|mSTRING
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|STRING
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:74:4: ( '\"' (~ '\"' )* '\"' )
comment|// Bst.g:74:4: '\"' (~ '\"' )* '\"'
block|{
name|match
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
comment|// Bst.g:74:8: (~ '\"' )*
name|loop2
label|:
do|do
block|{
name|int
name|alt2
init|=
literal|2
decl_stmt|;
name|int
name|LA2_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA2_0
operator|>=
literal|'\u0000'
operator|&&
name|LA2_0
operator|<=
literal|'!'
operator|)
operator|||
operator|(
name|LA2_0
operator|>=
literal|'#'
operator|&&
name|LA2_0
operator|<=
literal|'\uFFFE'
operator|)
operator|)
condition|)
block|{
name|alt2
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt2
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:74:9: ~ '\"'
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'!'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'#'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\uFFFE'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
break|break
name|loop2
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|match
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end STRING
comment|// $ANTLR start INTEGER
DECL|method|mINTEGER ()
specifier|public
name|void
name|mINTEGER
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|INTEGER
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:77:4: ( '#' ( ('+'|'-'))? ( NUMERAL )+ )
comment|// Bst.g:77:4: '#' ( ('+'|'-'))? ( NUMERAL )+
block|{
name|match
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
comment|// Bst.g:77:8: ( ('+'|'-'))?
name|int
name|alt3
init|=
literal|2
decl_stmt|;
name|int
name|LA3_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA3_0
operator|==
literal|'+'
operator|||
name|LA3_0
operator|==
literal|'-'
operator|)
condition|)
block|{
name|alt3
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt3
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:77:9: ('+'|'-')
block|{
if|if
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'+'
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
block|}
comment|// Bst.g:77:19: ( NUMERAL )+
name|int
name|cnt4
init|=
literal|0
decl_stmt|;
name|loop4
label|:
do|do
block|{
name|int
name|alt4
init|=
literal|2
decl_stmt|;
name|int
name|LA4_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA4_0
operator|>=
literal|'0'
operator|&&
name|LA4_0
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|alt4
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt4
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:77:19: NUMERAL
block|{
name|mNUMERAL
argument_list|()
expr_stmt|;
block|}
break|break;
default|default :
if|if
condition|(
name|cnt4
operator|>=
literal|1
condition|)
break|break
name|loop4
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|4
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt4
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end INTEGER
comment|// $ANTLR start NUMERAL
DECL|method|mNUMERAL ()
specifier|public
name|void
name|mNUMERAL
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
comment|// Bst.g:80:4: ( ( '0' .. '9' ) )
comment|// Bst.g:80:4: ( '0' .. '9' )
block|{
comment|// Bst.g:80:4: ( '0' .. '9' )
comment|// Bst.g:80:5: '0' .. '9'
block|{
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end NUMERAL
comment|// $ANTLR start WS
DECL|method|mWS ()
specifier|public
name|void
name|mWS
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|WS
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:82:9: ( ( (' '|'\\t'|'\\r'|'\\n'))+ )
comment|// Bst.g:82:9: ( (' '|'\\t'|'\\r'|'\\n'))+
block|{
comment|// Bst.g:82:9: ( (' '|'\\t'|'\\r'|'\\n'))+
name|int
name|cnt5
init|=
literal|0
decl_stmt|;
name|loop5
label|:
do|do
block|{
name|int
name|alt5
init|=
literal|2
decl_stmt|;
name|int
name|LA5_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA5_0
operator|>=
literal|'\t'
operator|&&
name|LA5_0
operator|<=
literal|'\n'
operator|)
operator|||
name|LA5_0
operator|==
literal|'\r'
operator|||
name|LA5_0
operator|==
literal|' '
operator|)
condition|)
block|{
name|alt5
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt5
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:82:13: (' '|'\\t'|'\\r'|'\\n')
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\t'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\n'
operator|)
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|||
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
if|if
condition|(
name|cnt5
operator|>=
literal|1
condition|)
break|break
name|loop5
break|;
name|EarlyExitException
name|eee
init|=
operator|new
name|EarlyExitException
argument_list|(
literal|5
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|eee
throw|;
block|}
name|cnt5
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|_channel
operator|=
name|HIDDEN
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end WS
comment|// $ANTLR start LINE_COMMENT
DECL|method|mLINE_COMMENT ()
specifier|public
name|void
name|mLINE_COMMENT
parameter_list|()
throws|throws
name|RecognitionException
block|{
try|try
block|{
name|ruleNestingLevel
operator|++
expr_stmt|;
name|int
name|_type
init|=
name|LINE_COMMENT
decl_stmt|;
name|int
name|_start
init|=
name|getCharIndex
argument_list|()
decl_stmt|;
name|int
name|_line
init|=
name|getLine
argument_list|()
decl_stmt|;
name|int
name|_charPosition
init|=
name|getCharPositionInLine
argument_list|()
decl_stmt|;
name|int
name|_channel
init|=
name|Token
operator|.
name|DEFAULT_CHANNEL
decl_stmt|;
comment|// Bst.g:90:7: ( '%' (~ ('\\n'|'\\r'))* ( '\\r' )? '\\n' )
comment|// Bst.g:90:7: '%' (~ ('\\n'|'\\r'))* ( '\\r' )? '\\n'
block|{
name|match
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
comment|// Bst.g:90:11: (~ ('\\n'|'\\r'))*
name|loop6
label|:
do|do
block|{
name|int
name|alt6
init|=
literal|2
decl_stmt|;
name|int
name|LA6_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA6_0
operator|>=
literal|'\u0000'
operator|&&
name|LA6_0
operator|<=
literal|'\t'
operator|)
operator|||
operator|(
name|LA6_0
operator|>=
literal|'\u000B'
operator|&&
name|LA6_0
operator|<=
literal|'\f'
operator|)
operator|||
operator|(
name|LA6_0
operator|>=
literal|'\u000E'
operator|&&
name|LA6_0
operator|<=
literal|'\uFFFE'
operator|)
operator|)
condition|)
block|{
name|alt6
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt6
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:90:11: ~ ('\\n'|'\\r')
block|{
if|if
condition|(
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\t'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u000B'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\f'
operator|)
operator|||
operator|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u000E'
operator|&&
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\uFFFE'
operator|)
condition|)
block|{
name|input
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|MismatchedSetException
name|mse
init|=
operator|new
name|MismatchedSetException
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|recover
argument_list|(
name|mse
argument_list|)
expr_stmt|;
throw|throw
name|mse
throw|;
block|}
block|}
break|break;
default|default :
break|break
name|loop6
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
comment|// Bst.g:90:25: ( '\\r' )?
name|int
name|alt7
init|=
literal|2
decl_stmt|;
name|int
name|LA7_0
init|=
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA7_0
operator|==
literal|'\r'
operator|)
condition|)
block|{
name|alt7
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|alt7
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:90:25: '\\r'
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|_channel
operator|=
name|HIDDEN
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
operator|&&
name|ruleNestingLevel
operator|==
literal|1
condition|)
block|{
name|emit
argument_list|(
name|_type
argument_list|,
name|_line
argument_list|,
name|_charPosition
argument_list|,
name|_channel
argument_list|,
name|_start
argument_list|,
name|getCharIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ruleNestingLevel
operator|--
expr_stmt|;
block|}
block|}
comment|// $ANTLR end LINE_COMMENT
DECL|method|mTokens ()
specifier|public
name|void
name|mTokens
parameter_list|()
throws|throws
name|RecognitionException
block|{
comment|// Bst.g:1:10: ( T25 | T26 | T27 | T28 | T29 | T30 | T31 | T32 | T33 | STRINGS | INTEGERS | FUNCTION | EXECUTE | SORT | ITERATE | REVERSE | ENTRY | READ | MACRO | QUOTED | IDENTIFIER | STRING | INTEGER | WS | LINE_COMMENT )
name|int
name|alt8
init|=
literal|25
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'{'
case|:
name|alt8
operator|=
literal|1
expr_stmt|;
break|break;
case|case
literal|'}'
case|:
name|alt8
operator|=
literal|2
expr_stmt|;
break|break;
case|case
literal|'<'
case|:
name|alt8
operator|=
literal|3
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|alt8
operator|=
literal|4
expr_stmt|;
break|break;
case|case
literal|'='
case|:
name|alt8
operator|=
literal|5
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|alt8
operator|=
literal|6
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|alt8
operator|=
literal|7
expr_stmt|;
break|break;
case|case
literal|':'
case|:
name|alt8
operator|=
literal|8
expr_stmt|;
break|break;
case|case
literal|'*'
case|:
name|alt8
operator|=
literal|9
expr_stmt|;
break|break;
case|case
literal|'S'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'T'
case|:
name|int
name|LA8_22
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_22
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_31
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_31
operator|==
literal|'I'
operator|)
condition|)
block|{
name|int
name|LA8_41
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_41
operator|==
literal|'N'
operator|)
condition|)
block|{
name|int
name|LA8_51
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_51
operator|==
literal|'G'
operator|)
condition|)
block|{
name|int
name|LA8_61
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_61
operator|==
literal|'S'
operator|)
condition|)
block|{
name|int
name|LA8_69
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_69
operator|==
literal|'$'
operator|||
name|LA8_69
operator|==
literal|'.'
operator|||
operator|(
name|LA8_69
operator|>=
literal|'0'
operator|&&
name|LA8_69
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_69
operator|>=
literal|'A'
operator|&&
name|LA8_69
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_69
operator|>=
literal|'a'
operator|&&
name|LA8_69
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|10
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
case|case
literal|'O'
case|:
name|int
name|LA8_23
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_23
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_32
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_32
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_42
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_42
operator|==
literal|'$'
operator|||
name|LA8_42
operator|==
literal|'.'
operator|||
operator|(
name|LA8_42
operator|>=
literal|'0'
operator|&&
name|LA8_42
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_42
operator|>=
literal|'A'
operator|&&
name|LA8_42
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_42
operator|>=
literal|'a'
operator|&&
name|LA8_42
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|14
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
case|case
literal|'I'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'T'
case|:
name|int
name|LA8_24
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_24
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_33
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_33
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_43
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_43
operator|==
literal|'A'
operator|)
condition|)
block|{
name|int
name|LA8_53
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_53
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_62
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_62
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_70
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_70
operator|==
literal|'$'
operator|||
name|LA8_70
operator|==
literal|'.'
operator|||
operator|(
name|LA8_70
operator|>=
literal|'0'
operator|&&
name|LA8_70
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_70
operator|>=
literal|'A'
operator|&&
name|LA8_70
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_70
operator|>=
literal|'a'
operator|&&
name|LA8_70
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|15
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
case|case
literal|'N'
case|:
name|int
name|LA8_25
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_25
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_34
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_34
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_44
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_44
operator|==
literal|'G'
operator|)
condition|)
block|{
name|int
name|LA8_54
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_54
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_63
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_63
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_71
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_71
operator|==
literal|'S'
operator|)
condition|)
block|{
name|int
name|LA8_77
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_77
operator|==
literal|'$'
operator|||
name|LA8_77
operator|==
literal|'.'
operator|||
operator|(
name|LA8_77
operator|>=
literal|'0'
operator|&&
name|LA8_77
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_77
operator|>=
literal|'A'
operator|&&
name|LA8_77
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_77
operator|>=
literal|'a'
operator|&&
name|LA8_77
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|11
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
case|case
literal|'F'
case|:
name|int
name|LA8_12
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_12
operator|==
literal|'U'
operator|)
condition|)
block|{
name|int
name|LA8_26
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_26
operator|==
literal|'N'
operator|)
condition|)
block|{
name|int
name|LA8_35
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_35
operator|==
literal|'C'
operator|)
condition|)
block|{
name|int
name|LA8_45
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_45
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_55
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_55
operator|==
literal|'I'
operator|)
condition|)
block|{
name|int
name|LA8_64
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_64
operator|==
literal|'O'
operator|)
condition|)
block|{
name|int
name|LA8_72
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_72
operator|==
literal|'N'
operator|)
condition|)
block|{
name|int
name|LA8_78
init|=
name|input
operator|.
name|LA
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_78
operator|==
literal|'$'
operator|||
name|LA8_78
operator|==
literal|'.'
operator|||
operator|(
name|LA8_78
operator|>=
literal|'0'
operator|&&
name|LA8_78
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_78
operator|>=
literal|'A'
operator|&&
name|LA8_78
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_78
operator|>=
literal|'a'
operator|&&
name|LA8_78
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|12
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
case|case
literal|'E'
case|:
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|'N'
case|:
name|int
name|LA8_27
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_27
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_36
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_36
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_46
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_46
operator|==
literal|'Y'
operator|)
condition|)
block|{
name|int
name|LA8_56
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_56
operator|==
literal|'$'
operator|||
name|LA8_56
operator|==
literal|'.'
operator|||
operator|(
name|LA8_56
operator|>=
literal|'0'
operator|&&
name|LA8_56
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_56
operator|>=
literal|'A'
operator|&&
name|LA8_56
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_56
operator|>=
literal|'a'
operator|&&
name|LA8_56
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|17
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
case|case
literal|'X'
case|:
name|int
name|LA8_28
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_28
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_37
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_37
operator|==
literal|'C'
operator|)
condition|)
block|{
name|int
name|LA8_47
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_47
operator|==
literal|'U'
operator|)
condition|)
block|{
name|int
name|LA8_57
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_57
operator|==
literal|'T'
operator|)
condition|)
block|{
name|int
name|LA8_66
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_66
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_73
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_73
operator|==
literal|'$'
operator|||
name|LA8_73
operator|==
literal|'.'
operator|||
operator|(
name|LA8_73
operator|>=
literal|'0'
operator|&&
name|LA8_73
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_73
operator|>=
literal|'A'
operator|&&
name|LA8_73
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_73
operator|>=
literal|'a'
operator|&&
name|LA8_73
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|13
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
case|case
literal|'R'
case|:
name|int
name|LA8_14
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_14
operator|==
literal|'E'
operator|)
condition|)
block|{
switch|switch
condition|(
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|'A'
case|:
name|int
name|LA8_38
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_38
operator|==
literal|'D'
operator|)
condition|)
block|{
name|int
name|LA8_48
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_48
operator|==
literal|'$'
operator|||
name|LA8_48
operator|==
literal|'.'
operator|||
operator|(
name|LA8_48
operator|>=
literal|'0'
operator|&&
name|LA8_48
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_48
operator|>=
literal|'A'
operator|&&
name|LA8_48
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_48
operator|>=
literal|'a'
operator|&&
name|LA8_48
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|18
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
case|case
literal|'V'
case|:
name|int
name|LA8_39
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_39
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_49
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_49
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_59
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_59
operator|==
literal|'S'
operator|)
condition|)
block|{
name|int
name|LA8_67
init|=
name|input
operator|.
name|LA
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_67
operator|==
literal|'E'
operator|)
condition|)
block|{
name|int
name|LA8_74
init|=
name|input
operator|.
name|LA
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_74
operator|==
literal|'$'
operator|||
name|LA8_74
operator|==
literal|'.'
operator|||
operator|(
name|LA8_74
operator|>=
literal|'0'
operator|&&
name|LA8_74
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_74
operator|>=
literal|'A'
operator|&&
name|LA8_74
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_74
operator|>=
literal|'a'
operator|&&
name|LA8_74
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|16
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
default|default:
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
case|case
literal|'M'
case|:
name|int
name|LA8_15
init|=
name|input
operator|.
name|LA
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_15
operator|==
literal|'A'
operator|)
condition|)
block|{
name|int
name|LA8_30
init|=
name|input
operator|.
name|LA
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_30
operator|==
literal|'C'
operator|)
condition|)
block|{
name|int
name|LA8_40
init|=
name|input
operator|.
name|LA
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_40
operator|==
literal|'R'
operator|)
condition|)
block|{
name|int
name|LA8_50
init|=
name|input
operator|.
name|LA
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_50
operator|==
literal|'O'
operator|)
condition|)
block|{
name|int
name|LA8_60
init|=
name|input
operator|.
name|LA
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|LA8_60
operator|==
literal|'$'
operator|||
name|LA8_60
operator|==
literal|'.'
operator|||
operator|(
name|LA8_60
operator|>=
literal|'0'
operator|&&
name|LA8_60
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|LA8_60
operator|>=
literal|'A'
operator|&&
name|LA8_60
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|LA8_60
operator|>=
literal|'a'
operator|&&
name|LA8_60
operator|<=
literal|'z'
operator|)
operator|)
condition|)
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
else|else
block|{
name|alt8
operator|=
literal|19
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
block|}
else|else
block|{
name|alt8
operator|=
literal|21
expr_stmt|;
block|}
break|break;
case|case
literal|'\''
case|:
name|alt8
operator|=
literal|20
expr_stmt|;
break|break;
case|case
literal|'$'
case|:
case|case
literal|'.'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
name|alt8
operator|=
literal|21
expr_stmt|;
break|break;
case|case
literal|'\"'
case|:
name|alt8
operator|=
literal|22
expr_stmt|;
break|break;
case|case
literal|'#'
case|:
name|alt8
operator|=
literal|23
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
name|alt8
operator|=
literal|24
expr_stmt|;
break|break;
case|case
literal|'%'
case|:
name|alt8
operator|=
literal|25
expr_stmt|;
break|break;
default|default:
name|NoViableAltException
name|nvae
init|=
operator|new
name|NoViableAltException
argument_list|(
literal|"1:1: Tokens : ( T25 | T26 | T27 | T28 | T29 | T30 | T31 | T32 | T33 | STRINGS | INTEGERS | FUNCTION | EXECUTE | SORT | ITERATE | REVERSE | ENTRY | READ | MACRO | QUOTED | IDENTIFIER | STRING | INTEGER | WS | LINE_COMMENT );"
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|input
argument_list|)
decl_stmt|;
throw|throw
name|nvae
throw|;
block|}
switch|switch
condition|(
name|alt8
condition|)
block|{
case|case
literal|1
case|:
comment|// Bst.g:1:10: T25
block|{
name|mT25
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// Bst.g:1:14: T26
block|{
name|mT26
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// Bst.g:1:18: T27
block|{
name|mT27
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// Bst.g:1:22: T28
block|{
name|mT28
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// Bst.g:1:26: T29
block|{
name|mT29
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// Bst.g:1:30: T30
block|{
name|mT30
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// Bst.g:1:34: T31
block|{
name|mT31
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// Bst.g:1:38: T32
block|{
name|mT32
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// Bst.g:1:42: T33
block|{
name|mT33
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// Bst.g:1:46: STRINGS
block|{
name|mSTRINGS
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
comment|// Bst.g:1:54: INTEGERS
block|{
name|mINTEGERS
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// Bst.g:1:63: FUNCTION
block|{
name|mFUNCTION
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|13
case|:
comment|// Bst.g:1:72: EXECUTE
block|{
name|mEXECUTE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|14
case|:
comment|// Bst.g:1:80: SORT
block|{
name|mSORT
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|15
case|:
comment|// Bst.g:1:85: ITERATE
block|{
name|mITERATE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|16
case|:
comment|// Bst.g:1:93: REVERSE
block|{
name|mREVERSE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|17
case|:
comment|// Bst.g:1:101: ENTRY
block|{
name|mENTRY
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|18
case|:
comment|// Bst.g:1:107: READ
block|{
name|mREAD
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|19
case|:
comment|// Bst.g:1:112: MACRO
block|{
name|mMACRO
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|20
case|:
comment|// Bst.g:1:118: QUOTED
block|{
name|mQUOTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|21
case|:
comment|// Bst.g:1:125: IDENTIFIER
block|{
name|mIDENTIFIER
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|22
case|:
comment|// Bst.g:1:136: STRING
block|{
name|mSTRING
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|23
case|:
comment|// Bst.g:1:143: INTEGER
block|{
name|mINTEGER
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|24
case|:
comment|// Bst.g:1:151: WS
block|{
name|mWS
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|25
case|:
comment|// Bst.g:1:154: LINE_COMMENT
block|{
name|mLINE_COMMENT
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
end_class

end_unit

