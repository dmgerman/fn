begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003  Nathan Dunn, Morten O. Alver  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_comment
comment|// This pane has all of the search-options available for a single bibtex
end_comment

begin_comment
comment|// category initially this is done with one category/field, but can be expanded
end_comment

begin_comment
comment|// via standard search expansion options, by adding more categoryies.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Will use java's regexp (standard) in each category.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Output can be a highlighting/sorting of the original table (so will need a
end_comment

begin_comment
comment|// reference to the table, obviously, with accessor methods), or a duplication
end_comment

begin_comment
comment|// of the table, or hiding performed directly on the original table.
end_comment

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_class
DECL|class|SearchPane
specifier|public
class|class
name|SearchPane
extends|extends
name|JDialog
block|{
DECL|field|searchButton
name|JButton
name|searchButton
init|=
literal|null
decl_stmt|;
DECL|field|searchField
name|JTextField
name|searchField
init|=
literal|null
decl_stmt|;
DECL|field|searchArea
name|JTextArea
name|searchArea
init|=
literal|null
decl_stmt|;
DECL|field|fields
name|Vector
name|fields
init|=
literal|null
decl_stmt|;
DECL|field|searchOptions
name|Hashtable
name|searchOptions
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
DECL|field|thisOwner
name|JabRefFrame
name|thisOwner
init|=
literal|null
decl_stmt|;
DECL|field|panel
name|BasePanel
name|panel
decl_stmt|;
DECL|field|prefs
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|helpAction
name|HelpAction
name|helpAction
decl_stmt|;
DECL|field|searchReq
DECL|field|searchOpt
DECL|field|searchGen
DECL|field|searchAll
DECL|field|caseSensitive
DECL|field|regExpSearch
name|JCheckBoxMenuItem
name|searchReq
decl_stmt|,
name|searchOpt
decl_stmt|,
name|searchGen
decl_stmt|,
name|searchAll
decl_stmt|,
name|caseSensitive
decl_stmt|,
name|regExpSearch
decl_stmt|;
DECL|field|settings
name|JPopupMenu
name|settings
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|openset
name|JButton
name|openset
init|=
operator|new
name|JButton
argument_list|(
literal|"Settings"
argument_list|)
decl_stmt|;
DECL|method|SearchPane (JabRefFrame owner, BasePanel panel, JabRefPreferences prefs, String title, boolean modal)
name|SearchPane
parameter_list|(
name|JabRefFrame
name|owner
parameter_list|,
name|BasePanel
name|panel
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|,
name|String
name|title
parameter_list|,
name|boolean
name|modal
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|Frame
operator|)
name|owner
argument_list|,
name|title
argument_list|,
name|modal
argument_list|)
expr_stmt|;
name|thisOwner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|helpAction
operator|=
operator|new
name|HelpAction
argument_list|(
name|thisOwner
operator|.
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|searchHelp
argument_list|,
literal|"Help"
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
comment|//setDefaultCloseOperation(HIDE_ON_CLOSE) ;
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|searchButton
operator|=
operator|new
name|JButton
argument_list|(
literal|"Search"
argument_list|)
expr_stmt|;
name|searchReq
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
literal|"Search required fields"
argument_list|,
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchReq"
argument_list|)
argument_list|)
expr_stmt|;
name|searchOpt
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
literal|"Search optional fields"
argument_list|,
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchOpt"
argument_list|)
argument_list|)
expr_stmt|;
name|searchGen
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
literal|"Search general fields"
argument_list|,
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchGen"
argument_list|)
argument_list|)
expr_stmt|;
name|searchAll
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
literal|"Search all fields"
argument_list|,
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchAll"
argument_list|)
argument_list|)
expr_stmt|;
name|regExpSearch
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
literal|"Use regular expressions"
argument_list|,
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"regExpSearch"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchAll
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|searchReq
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|searchOpt
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|searchGen
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|caseSensitive
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
literal|"Case sensitive"
argument_list|,
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"caseSensitiveSearch"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|caseSensitive
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|searchReq
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|searchOpt
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|searchGen
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|searchAll
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|regExpSearch
argument_list|)
expr_stmt|;
name|openset
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JButton
name|src
init|=
operator|(
name|JButton
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|settings
operator|.
name|show
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//        searchButton.setDefaultCapable(true) ;
comment|//        getRootPane().setDefaultButton(searchButton) ;
name|searchButton
operator|.
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|searchOptions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|searchOptions
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
name|searchField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|doSearch
argument_list|(
name|searchOptions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|addKeyListener
argument_list|(
operator|new
name|KeyAdapter
argument_list|()
block|{
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
name|int
name|keyStroke
init|=
name|e
operator|.
name|getKeyCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyStroke
operator|==
name|e
operator|.
name|VK_ENTER
condition|)
block|{
if|if
condition|(
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|searchOptions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|searchOptions
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
name|searchField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|doSearch
argument_list|(
name|searchOptions
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|keyStroke
operator|==
name|e
operator|.
name|VK_ESCAPE
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyStroke
operator|==
name|e
operator|.
name|VK_F1
condition|)
block|{
name|helpAction
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|searchField
operator|=
operator|new
name|JTextField
argument_list|(
literal|110
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|setMinimumSize
argument_list|(
name|GUIGlobals
operator|.
name|searchFieldSize
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|addKeyListener
argument_list|(
operator|new
name|KeyAdapter
argument_list|()
block|{
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
name|int
name|keyStroke
init|=
name|e
operator|.
name|getKeyCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyStroke
operator|==
name|e
operator|.
name|VK_ENTER
condition|)
block|{
if|if
condition|(
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|searchOptions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|searchOptions
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
name|searchField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|doSearch
argument_list|(
name|searchOptions
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|keyStroke
operator|==
name|e
operator|.
name|VK_ESCAPE
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyStroke
operator|==
name|e
operator|.
name|VK_F1
condition|)
block|{
name|helpAction
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|searchAll
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
name|boolean
name|set
init|=
operator|!
name|searchAll
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|searchReq
operator|.
name|setEnabled
argument_list|(
name|set
argument_list|)
expr_stmt|;
name|searchOpt
operator|.
name|setEnabled
argument_list|(
name|set
argument_list|)
expr_stmt|;
name|searchGen
operator|.
name|setEnabled
argument_list|(
name|set
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
comment|//        gbl.setConstraints(this,con);
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|searchField
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|searchField
argument_list|)
expr_stmt|;
comment|//con.anchor = GridBagConstraints.CENTER;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|searchButton
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|searchButton
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|openset
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|openset
argument_list|)
expr_stmt|;
comment|/*				          gbl.setConstraints(caseSensitive,con);         getContentPane().add(caseSensitive);  	con.insets = new Insets(10, 0, 0, 0);         gbl.setConstraints(searchReq,con);         getContentPane().add(searchReq);  	con.insets = new Insets(0, 0, 0, 0);         gbl.setConstraints(searchOpt,con);         getContentPane().add(searchOpt);          gbl.setConstraints(searchGen,con);         getContentPane().add(searchGen);  	con.insets = new Insets(10, 0, 0, 0);         gbl.setConstraints(searchAll,con);         getContentPane().add(searchAll);         				  */
name|setSize
argument_list|(
name|GUIGlobals
operator|.
name|searchPaneSize
argument_list|)
expr_stmt|;
name|setLocation
argument_list|(
name|prefs
operator|.
name|getInt
argument_list|(
literal|"searchPanePosX"
argument_list|)
argument_list|,
name|prefs
operator|.
name|getInt
argument_list|(
literal|"searchPanePosY"
argument_list|)
argument_list|)
expr_stmt|;
comment|//pack();
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
name|searchField
operator|.
name|select
argument_list|(
literal|0
argument_list|,
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//  runs a thread in DatabaseSearch
DECL|method|doSearch (Hashtable searchOptions)
specifier|public
name|void
name|doSearch
parameter_list|(
name|Hashtable
name|searchOptions
parameter_list|)
block|{
name|updatePrefs
argument_list|()
expr_stmt|;
comment|// Make sure the user's choices are recorded.
comment|// this is where we switch the search-type, if we want another
comment|// search-type as default
name|SearchRuleSet
name|searchRules
init|=
operator|new
name|SearchRuleSet
argument_list|()
decl_stmt|;
name|SearchRule
name|rule1
decl_stmt|;
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"regExpSearch"
argument_list|)
condition|)
name|rule1
operator|=
operator|new
name|RegExpRule
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
else|else
name|rule1
operator|=
operator|new
name|SimpleSearchRule
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|searchRules
operator|.
name|addRule
argument_list|(
name|rule1
argument_list|)
expr_stmt|;
name|DatabaseSearch
name|search
init|=
operator|new
name|DatabaseSearch
argument_list|(
name|searchOptions
argument_list|,
name|searchRules
argument_list|,
name|panel
argument_list|,
name|DatabaseSearch
operator|.
name|SEARCH
argument_list|)
decl_stmt|;
name|search
operator|.
name|start
argument_list|()
expr_stmt|;
name|searchField
operator|.
name|select
argument_list|(
literal|0
argument_list|,
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|updatePrefs ()
specifier|protected
name|void
name|updatePrefs
parameter_list|()
block|{
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchReq"
argument_list|,
name|searchReq
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchOpt"
argument_list|,
name|searchOpt
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchGen"
argument_list|,
name|searchGen
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchAll"
argument_list|,
name|searchAll
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"caseSensitiveSearch"
argument_list|,
name|caseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"regExpSearch"
argument_list|,
name|regExpSearch
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|protected
name|void
name|close
parameter_list|()
block|{
name|updatePrefs
argument_list|()
expr_stmt|;
name|prefs
operator|.
name|putInt
argument_list|(
literal|"searchPanePosX"
argument_list|,
name|getLocation
argument_list|()
operator|.
name|x
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putInt
argument_list|(
literal|"searchPanePosY"
argument_list|,
name|getLocation
argument_list|()
operator|.
name|x
argument_list|)
expr_stmt|;
name|panel
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

