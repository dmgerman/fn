begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TablePrefsTab
class|class
name|TablePrefsTab
extends|extends
name|JPanel
implements|implements
name|PrefsTab
block|{
DECL|field|_prefs
name|JabRefPreferences
name|_prefs
decl_stmt|;
DECL|field|_choices
specifier|private
name|String
index|[]
name|_choices
decl_stmt|;
DECL|field|_sel
specifier|private
name|Boolean
index|[]
name|_sel
decl_stmt|;
DECL|method|TablePrefsTab (JabRefPreferences prefs)
specifier|public
name|TablePrefsTab
parameter_list|(
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
name|_prefs
operator|=
name|prefs
expr_stmt|;
name|Boolean
index|[]
name|sel
init|=
operator|new
name|Boolean
index|[
name|GUIGlobals
operator|.
name|ALL_FIELDS
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|found
decl_stmt|;
name|_choices
operator|=
name|GUIGlobals
operator|.
name|ALL_FIELDS
expr_stmt|;
name|_sel
operator|=
name|sel
expr_stmt|;
name|String
index|[]
name|columns
init|=
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"columnNames"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_choices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columns
operator|.
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|columns
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|_choices
index|[
name|i
index|]
argument_list|)
condition|)
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|found
condition|)
name|sel
index|[
name|i
index|]
operator|=
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|sel
index|[
name|i
index|]
operator|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|TableModel
name|tm
init|=
operator|new
name|AbstractTableModel
argument_list|()
block|{
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
operator|(
name|_choices
operator|.
name|length
operator|-
literal|1
operator|)
operator|/
literal|2
return|;
block|}
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
return|return
name|_choices
index|[
name|row
index|]
return|;
case|case
literal|1
case|:
return|return
name|_sel
index|[
name|row
index|]
return|;
case|case
literal|2
case|:
return|return
name|_choices
index|[
name|getRowCount
argument_list|()
operator|+
name|row
index|]
return|;
case|case
literal|3
case|:
return|return
name|_sel
index|[
name|getRowCount
argument_list|()
operator|+
name|row
index|]
return|;
block|}
return|return
literal|null
return|;
comment|// Unreachable.
block|}
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
operator|(
name|column
operator|==
literal|0
operator|)
operator|||
operator|(
name|column
operator|==
literal|2
operator|)
condition|)
return|return
name|String
operator|.
name|class
return|;
else|else
return|return
name|Boolean
operator|.
name|class
return|;
block|}
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
operator|(
name|col
operator|==
literal|1
operator|)
operator|||
operator|(
name|col
operator|==
literal|3
operator|)
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|aValue
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
if|if
condition|(
name|columnIndex
operator|==
literal|1
condition|)
name|_sel
index|[
name|rowIndex
index|]
operator|=
operator|(
name|Boolean
operator|)
name|aValue
expr_stmt|;
if|if
condition|(
name|columnIndex
operator|==
literal|3
condition|)
name|_sel
index|[
name|getRowCount
argument_list|()
operator|+
name|rowIndex
index|]
operator|=
operator|(
name|Boolean
operator|)
name|aValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|JTable
name|table
init|=
operator|new
name|JTable
argument_list|(
name|tm
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowSelectionAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|table
operator|.
name|setColumnSelectionAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//table.getInputMap().put(GUIGlobals.exitDialog, "close");
comment|//table.getActionMap().put("close", new CancelAction());
name|TableColumnModel
name|cm
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|1
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|2
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|3
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{  	     }
block|}
end_class

end_unit

