begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TablePrefsTab
class|class
name|TablePrefsTab
extends|extends
name|JPanel
implements|implements
name|PrefsTab
block|{
DECL|field|_prefs
name|JabRefPreferences
name|_prefs
decl_stmt|;
DECL|field|_choices
specifier|private
name|String
index|[]
name|_choices
decl_stmt|;
DECL|field|_sel
specifier|private
name|Boolean
index|[]
name|_sel
decl_stmt|;
DECL|field|colorCodes
DECL|field|autoResizeMode
DECL|field|secDesc
DECL|field|terDesc
specifier|private
name|JCheckBox
name|colorCodes
decl_stmt|,
name|autoResizeMode
decl_stmt|,
name|secDesc
decl_stmt|,
name|terDesc
decl_stmt|;
DECL|field|gbl
specifier|private
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
specifier|private
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
specifier|private
name|JComboBox
DECL|field|secSort
name|secSort
init|=
operator|new
name|JComboBox
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
argument_list|)
decl_stmt|,
DECL|field|terSort
name|terSort
init|=
operator|new
name|JComboBox
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
argument_list|)
decl_stmt|;
DECL|field|tableFields
specifier|private
name|JTextArea
name|tableFields
init|=
operator|new
name|JTextArea
argument_list|()
decl_stmt|;
comment|/**      * Customization of external program paths.      *      * @param prefs a<code>JabRefPreferences</code> value      */
DECL|method|TablePrefsTab (JabRefPreferences prefs)
specifier|public
name|TablePrefsTab
parameter_list|(
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
name|_prefs
operator|=
name|prefs
expr_stmt|;
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|colorCodes
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Use color codes for required and optional fields"
argument_list|)
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"tableColorCodesOn"
argument_list|)
argument_list|)
expr_stmt|;
name|autoResizeMode
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Fit table horizontally on screen"
argument_list|)
argument_list|,
operator|(
name|_prefs
operator|.
name|getInt
argument_list|(
literal|"autoResizeMode"
argument_list|)
operator|==
name|JTable
operator|.
name|AUTO_RESIZE_ALL_COLUMNS
operator|)
argument_list|)
expr_stmt|;
name|secDesc
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Descending"
argument_list|)
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"secDescending"
argument_list|)
argument_list|)
expr_stmt|;
name|terDesc
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Descending"
argument_list|)
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"terDescending"
argument_list|)
argument_list|)
expr_stmt|;
name|JLabel
name|lab
decl_stmt|;
name|JPanel
name|upper
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|sort
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|upper
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|upper
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Table appearance"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
literal|"Sort options"
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|colorCodes
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|upper
operator|.
name|add
argument_list|(
name|colorCodes
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|autoResizeMode
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|upper
operator|.
name|add
argument_list|(
name|autoResizeMode
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|upper
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|upper
argument_list|)
expr_stmt|;
comment|// Set the correct value for the primary sort JComboBox.
name|String
name|sec
init|=
name|prefs
operator|.
name|get
argument_list|(
literal|"secSort"
argument_list|)
decl_stmt|,
name|ter
init|=
name|prefs
operator|.
name|get
argument_list|(
literal|"terSort"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|GUIGlobals
operator|.
name|ALL_FIELDS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sec
operator|.
name|equals
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|i
index|]
argument_list|)
condition|)
name|secSort
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|ter
operator|.
name|equals
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|i
index|]
argument_list|)
condition|)
name|terSort
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|lab
operator|=
operator|new
name|JLabel
argument_list|(
literal|"Secondary sort criterion"
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lab
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|lab
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|secSort
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|secSort
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|secDesc
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|secDesc
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
comment|//	con.anchor = GridBagConstraints.WEST;
comment|//	con.weightx = 0;
comment|//con.insets = new Insets(0,0,0,0);
comment|//	con.weightx = 1;
name|lab
operator|=
operator|new
name|JLabel
argument_list|(
literal|"Tertiary sort criterion"
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lab
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|lab
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
comment|//con.insets = new Insets(0,5,0,0);
name|gbl
operator|.
name|setConstraints
argument_list|(
name|terSort
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|terSort
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|terDesc
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|terDesc
argument_list|)
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|sort
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|sort
argument_list|)
expr_stmt|;
name|Boolean
index|[]
name|sel
init|=
operator|new
name|Boolean
index|[
name|GUIGlobals
operator|.
name|ALL_FIELDS
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|found
decl_stmt|;
name|_choices
operator|=
name|GUIGlobals
operator|.
name|ALL_FIELDS
expr_stmt|;
name|_sel
operator|=
name|sel
expr_stmt|;
name|String
index|[]
name|columns
init|=
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"columnNames"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_choices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columns
operator|.
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|columns
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|_choices
index|[
name|i
index|]
argument_list|)
condition|)
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|found
condition|)
name|sel
index|[
name|i
index|]
operator|=
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|sel
index|[
name|i
index|]
operator|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|TableModel
name|tm
init|=
operator|new
name|AbstractTableModel
argument_list|()
block|{
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
operator|(
name|_choices
operator|.
name|length
operator|-
literal|1
operator|)
operator|/
literal|2
return|;
block|}
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
return|return
name|_choices
index|[
name|row
index|]
return|;
case|case
literal|1
case|:
return|return
name|_sel
index|[
name|row
index|]
return|;
case|case
literal|2
case|:
return|return
name|_choices
index|[
name|getRowCount
argument_list|()
operator|+
name|row
index|]
return|;
case|case
literal|3
case|:
return|return
name|_sel
index|[
name|getRowCount
argument_list|()
operator|+
name|row
index|]
return|;
block|}
return|return
literal|null
return|;
comment|// Unreachable.
block|}
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
operator|(
name|column
operator|==
literal|0
operator|)
operator|||
operator|(
name|column
operator|==
literal|2
operator|)
condition|)
return|return
name|String
operator|.
name|class
return|;
else|else
return|return
name|Boolean
operator|.
name|class
return|;
block|}
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
operator|(
name|col
operator|==
literal|1
operator|)
operator|||
operator|(
name|col
operator|==
literal|3
operator|)
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|aValue
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
if|if
condition|(
name|columnIndex
operator|==
literal|1
condition|)
name|_sel
index|[
name|rowIndex
index|]
operator|=
operator|(
name|Boolean
operator|)
name|aValue
expr_stmt|;
if|if
condition|(
name|columnIndex
operator|==
literal|3
condition|)
name|_sel
index|[
name|getRowCount
argument_list|()
operator|+
name|rowIndex
index|]
operator|=
operator|(
name|Boolean
operator|)
name|aValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|JTable
name|table
init|=
operator|new
name|JTable
argument_list|(
name|tm
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowSelectionAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|table
operator|.
name|setColumnSelectionAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//table.getInputMap().put(GUIGlobals.exitDialog, "close");
comment|//table.getActionMap().put("close", new CancelAction());
name|JPanel
name|tablePanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|innerTablePanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|table
operator|.
name|setShowVerticalLines
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|innerTablePanel
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|)
expr_stmt|;
comment|//innerTablePanel.setBorder(BorderFactory.createLoweredBevelBorder());
name|tablePanel
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Visible fields"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|innerTablePanel
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|tablePanel
operator|.
name|add
argument_list|(
name|innerTablePanel
argument_list|)
expr_stmt|;
name|TableColumnModel
name|cm
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|1
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|2
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|3
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|tablePanel
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|tablePanel
argument_list|)
expr_stmt|;
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
name|tableFields
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
decl_stmt|;
comment|//gbl.setConstraints(sp, con);
comment|//add(sp);
block|}
DECL|method|getChoices ()
specifier|private
name|String
index|[]
name|getChoices
parameter_list|()
block|{
comment|// First we count how many checkboxes the user has selected.
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_sel
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|_sel
index|[
name|i
index|]
operator|.
name|booleanValue
argument_list|()
condition|)
name|count
operator|++
expr_stmt|;
comment|// Then we build the byte array.
name|String
index|[]
name|choices
init|=
operator|new
name|String
index|[
name|count
index|]
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_sel
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|_sel
index|[
name|i
index|]
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|choices
index|[
name|count
index|]
operator|=
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|i
index|]
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|choices
return|;
block|}
comment|/**      * Store changes to table preferences. This method is called when      * the user clicks Ok.      *      */
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{
name|_prefs
operator|.
name|putStringArray
argument_list|(
literal|"columnNames"
argument_list|,
name|getChoices
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"tableColorCodesOn"
argument_list|,
name|colorCodes
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putInt
argument_list|(
literal|"autoResizeMode"
argument_list|,
name|autoResizeMode
operator|.
name|isSelected
argument_list|()
condition|?
name|JTable
operator|.
name|AUTO_RESIZE_ALL_COLUMNS
else|:
name|JTable
operator|.
name|AUTO_RESIZE_OFF
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"secDescending"
argument_list|,
name|secDesc
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"terDescending"
argument_list|,
name|terDesc
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|put
argument_list|(
literal|"secSort"
argument_list|,
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|secSort
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|put
argument_list|(
literal|"terSort"
argument_list|,
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|terSort
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

