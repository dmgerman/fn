begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|factories
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TablePrefsTab
class|class
name|TablePrefsTab
extends|extends
name|JPanel
implements|implements
name|PrefsTab
block|{
DECL|field|_prefs
name|JabRefPreferences
name|_prefs
decl_stmt|;
DECL|field|_choices
specifier|private
name|String
index|[]
name|_choices
decl_stmt|;
DECL|field|_sel
specifier|private
name|Boolean
index|[]
name|_sel
decl_stmt|;
DECL|field|colorCodes
DECL|field|autoResizeMode
DECL|field|secDesc
DECL|field|terDesc
specifier|private
name|JCheckBox
name|colorCodes
decl_stmt|,
name|autoResizeMode
decl_stmt|,
name|secDesc
decl_stmt|,
name|terDesc
decl_stmt|,
DECL|field|antialias
DECL|field|pdfColumn
DECL|field|urlColumn
DECL|field|citeseerColumn
name|antialias
decl_stmt|,
name|pdfColumn
decl_stmt|,
name|urlColumn
decl_stmt|,
name|citeseerColumn
decl_stmt|;
DECL|field|namesAsIs
DECL|field|namesFf
DECL|field|namesFl
specifier|private
name|JRadioButton
name|namesAsIs
decl_stmt|,
name|namesFf
decl_stmt|,
name|namesFl
decl_stmt|;
DECL|field|gbl
specifier|private
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
specifier|private
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
specifier|private
name|JComboBox
DECL|field|secSort
name|secSort
init|=
operator|new
name|JComboBox
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
argument_list|)
decl_stmt|,
DECL|field|terSort
name|terSort
init|=
operator|new
name|JComboBox
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
argument_list|)
decl_stmt|;
DECL|field|secField
DECL|field|terField
DECL|field|fontSize
specifier|private
name|JTextField
name|secField
decl_stmt|,
name|terField
decl_stmt|,
name|fontSize
decl_stmt|;
DECL|field|fontButton
specifier|private
name|JButton
name|fontButton
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Set table font"
argument_list|)
argument_list|)
decl_stmt|;
comment|//menuFontButton = new JButton(Globals.lang("Set application font"));
DECL|field|tableChanged
specifier|private
name|boolean
name|tableChanged
init|=
literal|false
decl_stmt|;
DECL|field|font
DECL|field|menuFont
specifier|private
name|Font
name|font
init|=
name|GUIGlobals
operator|.
name|CURRENTFONT
decl_stmt|,
name|menuFont
decl_stmt|;
DECL|field|frame
specifier|private
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|oldMenuFontSize
specifier|private
name|int
name|oldMenuFontSize
decl_stmt|;
comment|/**      * Customization of external program paths.      *      * @param prefs a<code>JabRefPreferences</code> value      */
DECL|method|TablePrefsTab (JabRefPreferences prefs, JabRefFrame frame)
specifier|public
name|TablePrefsTab
parameter_list|(
name|JabRefPreferences
name|prefs
parameter_list|,
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|_prefs
operator|=
name|prefs
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|menuFont
operator|=
operator|new
name|Font
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"menuFontFamily"
argument_list|)
argument_list|,
name|prefs
operator|.
name|getInt
argument_list|(
literal|"menuFontStyle"
argument_list|)
argument_list|,
name|prefs
operator|.
name|getInt
argument_list|(
literal|"menuFontSize"
argument_list|)
argument_list|)
expr_stmt|;
name|colorCodes
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Color codes for required and optional fields"
argument_list|)
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"tableColorCodesOn"
argument_list|)
argument_list|)
expr_stmt|;
name|antialias
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Use antialiasing font in table"
argument_list|)
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"antialias"
argument_list|)
argument_list|)
expr_stmt|;
name|autoResizeMode
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Fit table horizontally on screen"
argument_list|)
argument_list|,
operator|(
name|_prefs
operator|.
name|getInt
argument_list|(
literal|"autoResizeMode"
argument_list|)
operator|==
name|JTable
operator|.
name|AUTO_RESIZE_ALL_COLUMNS
operator|)
argument_list|)
expr_stmt|;
name|namesAsIs
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show names unchanged"
argument_list|)
argument_list|)
expr_stmt|;
name|namesFf
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show 'Firstname Lastname'"
argument_list|)
argument_list|)
expr_stmt|;
name|namesFl
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show 'Lastname, Firstname'"
argument_list|)
argument_list|)
expr_stmt|;
name|pdfColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show PDF/PS column"
argument_list|)
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"pdfColumn"
argument_list|)
argument_list|)
expr_stmt|;
name|urlColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show URL/DOI column"
argument_list|)
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"urlColumn"
argument_list|)
argument_list|)
expr_stmt|;
name|citeseerColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show CiteSeer column"
argument_list|)
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"citeseerColumn"
argument_list|)
argument_list|)
expr_stmt|;
name|secField
operator|=
operator|new
name|JTextField
argument_list|(
name|_prefs
operator|.
name|get
argument_list|(
literal|"secSort"
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|terField
operator|=
operator|new
name|JTextField
argument_list|(
name|_prefs
operator|.
name|get
argument_list|(
literal|"terSort"
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|//fontSize = new JFormattedTextField(java.text.NumberFormat.getIntegerInstance());
name|fontSize
operator|=
operator|new
name|JTextField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fontSize
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|45
argument_list|,
name|fontSize
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|fontSize
operator|.
name|setText
argument_list|(
literal|""
operator|+
name|_prefs
operator|.
name|getInt
argument_list|(
literal|"menuFontSize"
argument_list|)
argument_list|)
expr_stmt|;
name|oldMenuFontSize
operator|=
name|_prefs
operator|.
name|getInt
argument_list|(
literal|"menuFontSize"
argument_list|)
expr_stmt|;
name|secSort
operator|.
name|insertItemAt
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"<select>"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|terSort
operator|.
name|insertItemAt
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"<select>"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|secSort
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|terSort
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|secSort
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|secSort
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|secField
operator|.
name|setText
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|secSort
operator|.
name|getSelectedIndex
argument_list|()
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|secSort
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|terSort
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|terSort
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|terField
operator|.
name|setText
argument_list|(
name|GUIGlobals
operator|.
name|ALL_FIELDS
index|[
name|terSort
operator|.
name|getSelectedIndex
argument_list|()
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|terSort
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|ButtonGroup
name|bg
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|namesAsIs
argument_list|)
expr_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|namesFf
argument_list|)
expr_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|namesFl
argument_list|)
expr_stmt|;
if|if
condition|(
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"namesAsIs"
argument_list|)
condition|)
name|namesAsIs
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"namesFf"
argument_list|)
condition|)
name|namesFf
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|namesFl
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|secDesc
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Descending"
argument_list|)
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"secDescending"
argument_list|)
argument_list|)
expr_stmt|;
name|terDesc
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Descending"
argument_list|)
argument_list|,
name|_prefs
operator|.
name|getBoolean
argument_list|(
literal|"terDescending"
argument_list|)
argument_list|)
expr_stmt|;
name|FormLayout
name|layout
init|=
operator|new
name|FormLayout
argument_list|(
literal|"1dlu, 8dlu, left:pref, 4dlu, fill:pref, 4dlu, fill:60dlu, 4dlu, fill:pref"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builder
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layout
argument_list|)
decl_stmt|;
name|JLabel
name|lab
decl_stmt|;
name|JPanel
name|pan
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|builder
operator|.
name|appendSeparator
argument_list|(
literal|"Special table columns"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pdfColumn
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|urlColumn
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|citeseerColumn
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|appendSeparator
argument_list|(
literal|"Format of author and editor names"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|namesAsIs
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|namesFf
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|namesFl
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|appendSeparator
argument_list|(
literal|"Sort options"
argument_list|)
expr_stmt|;
name|lab
operator|=
operator|new
name|JLabel
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Secondary sort criterion"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|lab
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|secSort
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|secField
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|secDesc
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|lab
operator|=
operator|new
name|JLabel
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Tertiary sort criterion"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|lab
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|terSort
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|terField
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|terDesc
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|appendSeparator
argument_list|(
literal|"Table appearance"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|colorCodes
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|autoResizeMode
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|antialias
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|fontButton
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
comment|//	builder.append(pan); builder.append(); builder.nextLine();
name|JPanel
name|upper
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|sort
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|namesp
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
name|iconCol
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|upper
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|namesp
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|iconCol
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
comment|/* 	con.gridwidth = GridBagConstraints.REMAINDER; 	con.fill = GridBagConstraints.NONE; 	con.anchor = GridBagConstraints.WEST; 	gbl.setConstraints(colorCodes, con); 	upper.add(colorCodes); 	gbl.setConstraints(autoResizeMode, con); 	upper.add(autoResizeMode);         gbl.setConstraints(antialias, con);         upper.add(antialias);         con.gridwidth = 1; 	lab = new JLabel(Globals.lang("Menu and label font size")); 	gbl.setConstraints(lab, con); 	upper.add(lab); 	Insets old = con.insets; 	con.insets = new Insets(0, 5, 0, 5); 	gbl.setConstraints(fontSize, con); 	upper.add(fontSize); 	con.insets = old;         con.gridwidth = GridBagConstraints.REMAINDER; 	lab = new JLabel("("+Globals.lang("non-Mac only")+")"); 	gbl.setConstraints(lab, con); 	upper.add(lab); 	//gbl.setConstraints(menuFontButton, con); 	//upper.add(menuFontButton); 	//con.anchor = GridBagConstraints.EAST;         con.gridwidth = GridBagConstraints.REMAINDER; 	gbl.setConstraints(fontButton, con); 	upper.add(fontButton); 	con.anchor = GridBagConstraints.WEST; 	con.fill = GridBagConstraints.BOTH;         con.gridwidth = 1;         con.gridheight = 2; 	gbl.setConstraints(upper, con); 	//add(upper);         con.gridheight = 1;         con.gridwidth = GridBagConstraints.REMAINDER;         gbl.setConstraints(pdfColumn, con);         iconCol.add(pdfColumn);         gbl.setConstraints(urlColumn, con);         iconCol.add(urlColumn);         gbl.setConstraints(citeseerColumn, con);         iconCol.add(citeseerColumn);         con.fill = GridBagConstraints.BOTH;         gbl.setConstraints(iconCol, con); 	add(iconCol);   	con.gridwidth = GridBagConstraints.REMAINDER; 	con.fill = GridBagConstraints.NONE; 	con.anchor = GridBagConstraints.WEST; 	gbl.setConstraints(namesAsIs, con); 	namesp.add(namesAsIs); 	gbl.setConstraints(namesFf, con); 	namesp.add(namesFf); 	gbl.setConstraints(namesFl, con); 	namesp.add(namesFl);         con.fill = GridBagConstraints.BOTH;         gbl.setConstraints(namesp, con); 	add(namesp);*/
comment|// Set the correct value for the primary sort JComboBox.
comment|/*String sec = prefs.get("secSort"), 	    ter = prefs.get("terSort"); 	for (int i=0; i<GUIGlobals.ALL_FIELDS.length; i++) { 	    if (sec.equals(GUIGlobals.ALL_FIELDS[i])) 		secSort.setSelectedIndex(i); 	    if (ter.equals(GUIGlobals.ALL_FIELDS[i])) 		terSort.setSelectedIndex(i); 	}  	lab = new JLabel(Globals.lang("Secondary sort criterion")); 	con.gridwidth = 1; 	con.insets = new Insets(0,5,0,0); 	gbl.setConstraints(lab, con); 	sort.add(lab); 	con.weightx = 1; 	gbl.setConstraints(secSort, con); 	sort.add(secSort);         gbl.setConstraints(secField, con);         sort.add(secField); 	con.gridwidth = GridBagConstraints.REMAINDER; 	gbl.setConstraints(secDesc, con); 	sort.add(secDesc);  	con.gridwidth = 1;   	lab = new JLabel(Globals.lang("Tertiary sort criterion")); 	gbl.setConstraints(lab, con); 	sort.add(lab); 	con.weightx = 0; 	//con.insets = new Insets(0,5,0,0);         gbl.setConstraints(terSort, con);         sort.add(terSort);         gbl.setConstraints(terField, con);         sort.add(terField); 	con.weightx = 1; 	con.gridwidth = GridBagConstraints.REMAINDER; 	gbl.setConstraints(terDesc, con); 	sort.add(terDesc);*/
name|fontButton
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// JDialog dl = new EntryCustomizationDialog(ths);
name|Font
name|f
init|=
operator|new
name|FontSelectorDialog
argument_list|(
literal|null
argument_list|,
name|GUIGlobals
operator|.
name|CURRENTFONT
argument_list|)
operator|.
name|getSelectedFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
return|return;
else|else
name|font
operator|=
name|f
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|/*menuFontButton.addActionListener(new ActionListener() { 		public void actionPerformed(ActionEvent e) { 		    Font f=new FontSelectorDialog 				(null, menuFont).getSelectedFont(); 			if(f==null) 			    return; 			else 			    menuFont = f; 		} 		});*/
name|pan
operator|=
name|builder
operator|.
name|getPanel
argument_list|()
expr_stmt|;
name|pan
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|pan
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
comment|/**      * Store changes to table preferences. This method is called when      * the user clicks Ok.      *      */
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"tableColorCodesOn"
argument_list|,
name|colorCodes
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"namesAsIs"
argument_list|,
name|namesAsIs
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"namesFf"
argument_list|,
name|namesFf
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"antialias"
argument_list|,
name|antialias
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"pdfColumn"
argument_list|,
name|pdfColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"urlColumn"
argument_list|,
name|urlColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"citeseerColumn"
argument_list|,
name|citeseerColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putInt
argument_list|(
literal|"autoResizeMode"
argument_list|,
name|autoResizeMode
operator|.
name|isSelected
argument_list|()
condition|?
name|JTable
operator|.
name|AUTO_RESIZE_ALL_COLUMNS
else|:
name|JTable
operator|.
name|AUTO_RESIZE_OFF
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"secDescending"
argument_list|,
name|secDesc
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putBoolean
argument_list|(
literal|"terDescending"
argument_list|,
name|terDesc
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
comment|//_prefs.put("secSort", GUIGlobals.ALL_FIELDS[secSort.getSelectedIndex()]);
comment|//_prefs.put("terSort", GUIGlobals.ALL_FIELDS[terSort.getSelectedIndex()]);
name|_prefs
operator|.
name|put
argument_list|(
literal|"secSort"
argument_list|,
name|secField
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|put
argument_list|(
literal|"terSort"
argument_list|,
name|terField
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
comment|// updatefont
name|_prefs
operator|.
name|put
argument_list|(
literal|"fontFamily"
argument_list|,
name|font
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putInt
argument_list|(
literal|"fontStyle"
argument_list|,
name|font
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
name|_prefs
operator|.
name|putInt
argument_list|(
literal|"fontSize"
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//_prefs.put("menuFontFamily", menuFont.getFamily());
comment|//_prefs.putInt("menuFontStyle", menuFont.getStyle());
comment|//_prefs.putInt("menuFontSize", menuFont.getSize());
try|try
block|{
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fontSize
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|oldMenuFontSize
condition|)
block|{
name|_prefs
operator|.
name|putInt
argument_list|(
literal|"menuFontSize"
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"You have changed the menu and label font size. "
operator|+
literal|"You must restart JabRef for this to come into effect."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Changed font settings"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|GUIGlobals
operator|.
name|CURRENTFONT
operator|=
name|font
expr_stmt|;
block|}
DECL|method|readyToClose ()
specifier|public
name|boolean
name|readyToClose
parameter_list|()
block|{
try|try
block|{
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fontSize
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
return|return
literal|true
return|;
comment|// Ok, the number was legal.
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"You must enter an integer value in the text field for"
argument_list|)
operator|+
literal|" '"
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Menu and label font size"
argument_list|)
operator|+
literal|"'"
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Changed font settings"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|/* 	Boolean[] sel = new Boolean[GUIGlobals.ALL_FIELDS.length]; 	boolean found; 	_choices = GUIGlobals.ALL_FIELDS; 	_sel = sel; 	String[] columns = prefs.getStringArray("columnNames"); 	for (int i=0; i<_choices.length; i++) { 	    found = false; 	    for (int j=0; j<columns.length; j++) 		if (columns[j].equals(_choices[i])) 		    found = true; 	    if (found) 		sel[i] = new Boolean(true); 	    else 		sel[i] = new Boolean(false); 	}  	TableModel tm = new AbstractTableModel() { 		public int getRowCount() { return (_choices.length-1)/2; } 		public int getColumnCount() { return 4; } 		public Object getValueAt(int row, int column) { 		    switch (column) { 		    case 0: 			return _choices[row]; 		    case 1: 			return _sel[row]; 		    case 2: 			return _choices[getRowCount()+row]; 		    case 3: 			return _sel[getRowCount()+row]; 		    } 		    return null; // Unreachable. 		} 		public Class getColumnClass(int column) { 		    if ((column == 0) || (column == 2)) return String.class; 		    else return Boolean.class; 		} 		public boolean isCellEditable(int row, int col) { 		    if ((col == 1) || (col == 3)) return true; 		    else return false; 		} 		public void setValueAt(Object aValue, int rowIndex, int columnIndex) { 		    if (columnIndex == 1) 			_sel[rowIndex] = (Boolean)aValue; 		    if (columnIndex == 3) 			_sel[getRowCount()+rowIndex] = (Boolean)aValue; 		}  	    };  	JTable table = new JTable(tm); 	table.setRowSelectionAllowed(false); 	table.setColumnSelectionAllowed(false); 	//table.getInputMap().put(GUIGlobals.exitDialog, "close"); 	//table.getActionMap().put("close", new CancelAction()); 	JPanel 	    tablePanel = new JPanel(), 	    innerTablePanel = new JPanel();  	table.setShowVerticalLines(false); 	innerTablePanel.setBorder(BorderFactory.createEtchedBorder()); 	//innerTablePanel.setBorder(BorderFactory.createLoweredBevelBorder()); 	innerTablePanel.add(table); 	tablePanel.add(innerTablePanel);   	TableColumnModel cm = table.getColumnModel(); 	cm.getColumn(0).setPreferredWidth(90); 	cm.getColumn(1).setPreferredWidth(25); 	cm.getColumn(2).setPreferredWidth(90); 	cm.getColumn(3).setPreferredWidth(25); 	*/
end_comment

end_unit

