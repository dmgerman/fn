begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.external
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class defines a type of external files that can be linked to from JabRef.  * The class contains enough information to provide an icon, a standard extension  * and a link to which application handles files of this type.  */
end_comment

begin_class
DECL|class|ExternalFileType
specifier|public
class|class
name|ExternalFileType
implements|implements
name|Comparable
block|{
DECL|field|name
DECL|field|extension
DECL|field|openWith
DECL|field|iconName
specifier|protected
name|String
name|name
decl_stmt|,
name|extension
decl_stmt|,
name|openWith
decl_stmt|,
name|iconName
decl_stmt|;
DECL|field|icon
specifier|protected
name|ImageIcon
name|icon
decl_stmt|;
DECL|method|ExternalFileType (String name, String extension, String openWith, String iconName)
specifier|public
name|ExternalFileType
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|extension
parameter_list|,
name|String
name|openWith
parameter_list|,
name|String
name|iconName
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|extension
operator|=
name|extension
expr_stmt|;
name|this
operator|.
name|openWith
operator|=
name|openWith
expr_stmt|;
name|this
operator|.
name|iconName
operator|=
name|iconName
expr_stmt|;
name|this
operator|.
name|icon
operator|=
name|GUIGlobals
operator|.
name|getImage
argument_list|(
name|iconName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct an ExternalFileType from a String array. This constructor is used when      * reading file type definitions from Preferences, where the available data types are      * limited. We assume that the array contains the same values as the main constructor,      * in the same order.      *      * TODO: The icon argument needs special treatment. At the moment, we assume that the fourth      * element of the array contains the icon keyword to be looked up in the current icon theme.      * To support icons found elsewhere on the file system we simply need to prefix the icon name      * with a marker.       *      * @param val Constructor arguments.      */
DECL|method|ExternalFileType (String[] val)
specifier|public
name|ExternalFileType
parameter_list|(
name|String
index|[]
name|val
parameter_list|)
block|{
if|if
condition|(
operator|(
name|val
operator|==
literal|null
operator|)
operator|||
operator|(
name|val
operator|.
name|length
operator|<
literal|4
operator|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot contruct ExternalFileType without four elements in String[] argument."
argument_list|)
throw|;
name|this
operator|.
name|name
operator|=
name|val
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|extension
operator|=
name|val
index|[
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|openWith
operator|=
name|val
index|[
literal|2
index|]
expr_stmt|;
name|this
operator|.
name|iconName
operator|=
name|val
index|[
literal|3
index|]
expr_stmt|;
name|this
operator|.
name|icon
operator|=
name|GUIGlobals
operator|.
name|getImage
argument_list|(
name|val
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return a String array representing this file type. This is used for storage into      * Preferences, and the same array can be used to construct the file type later,      * using the String[] constructor.      *      * @return A String[] containing all information about this file type.      */
DECL|method|getStringArrayRepresentation ()
specifier|public
name|String
index|[]
name|getStringArrayRepresentation
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|name
block|,
name|extension
block|,
name|openWith
block|,
name|iconName
block|}
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getExtension ()
specifier|public
name|String
name|getExtension
parameter_list|()
block|{
return|return
name|extension
return|;
block|}
DECL|method|setExtension (String extension)
specifier|public
name|void
name|setExtension
parameter_list|(
name|String
name|extension
parameter_list|)
block|{
name|this
operator|.
name|extension
operator|=
name|extension
expr_stmt|;
block|}
comment|/**      * Get the bibtex field name used to extension to this file type.      * Currently we assume that field name equals filename extension.      * @return The field name.      */
DECL|method|getFieldName ()
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|extension
return|;
block|}
DECL|method|getOpenWith ()
specifier|public
name|String
name|getOpenWith
parameter_list|()
block|{
return|return
name|openWith
return|;
block|}
DECL|method|setOpenWith (String openWith)
specifier|public
name|void
name|setOpenWith
parameter_list|(
name|String
name|openWith
parameter_list|)
block|{
name|this
operator|.
name|openWith
operator|=
name|openWith
expr_stmt|;
block|}
DECL|method|getIcon ()
specifier|public
name|ImageIcon
name|getIcon
parameter_list|()
block|{
return|return
name|icon
return|;
block|}
DECL|method|setIcon (ImageIcon icon)
specifier|public
name|void
name|setIcon
parameter_list|(
name|ImageIcon
name|icon
parameter_list|)
block|{
name|this
operator|.
name|icon
operator|=
name|icon
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
DECL|method|compareTo (Object o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|ExternalFileType
operator|)
name|o
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

