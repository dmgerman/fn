begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.external
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|MainTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class holds the functionality of autolinking to a file that's dropped  * onto an entry.  *  * Options for handling the files are:  * 1) Link to the file in its current position (disabled if the file is remote)  * 2) Copy the file to ??? directory, rename after bibtex key, and link  * 3) Move the file to ??? directory, rename after bibtex key, and link  */
end_comment

begin_class
DECL|class|DroppedFileHandler
specifier|public
class|class
name|DroppedFileHandler
block|{
DECL|field|frame
specifier|private
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|panel
specifier|private
name|BasePanel
name|panel
decl_stmt|;
specifier|private
name|JRadioButton
DECL|field|linkInPlace
name|linkInPlace
init|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Link from entry"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|copyRename
name|copyRename
init|=
operator|new
name|JRadioButton
argument_list|()
decl_stmt|,
DECL|field|moveRename
name|moveRename
init|=
operator|new
name|JRadioButton
argument_list|()
decl_stmt|;
DECL|field|optionsPanel
specifier|private
name|JPanel
name|optionsPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|method|DroppedFileHandler (JabRefFrame frame, BasePanel panel)
specifier|public
name|DroppedFileHandler
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanel
name|panel
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|ButtonGroup
name|grp
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|grp
operator|.
name|add
argument_list|(
name|linkInPlace
argument_list|)
expr_stmt|;
name|grp
operator|.
name|add
argument_list|(
name|copyRename
argument_list|)
expr_stmt|;
name|grp
operator|.
name|add
argument_list|(
name|moveRename
argument_list|)
expr_stmt|;
name|copyRename
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DefaultFormBuilder
name|builder
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|optionsPanel
argument_list|,
operator|new
name|FormLayout
argument_list|(
literal|"left:pref"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|linkInPlace
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|copyRename
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|moveRename
argument_list|)
expr_stmt|;
block|}
comment|/**      * Offer copy/move/linking options for a dragged external file. Perform the      * chosen operation, if any.      * @param fileName The name of the dragged file.      * @param fileType The FileType associated with the file.      * @param localFile Indicate whether this is a local file, or a remote file copied      *                  to a local temporary file.      * @param mainTable The MainTable the file was dragged to.      * @param dropRow The row where the file was dropped.      */
DECL|method|handleDroppedfile (String fileName, ExternalFileType fileType, boolean localFile, MainTable mainTable, int dropRow)
specifier|public
name|void
name|handleDroppedfile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|ExternalFileType
name|fileType
parameter_list|,
name|boolean
name|localFile
parameter_list|,
name|MainTable
name|mainTable
parameter_list|,
name|int
name|dropRow
parameter_list|)
block|{
name|linkInPlace
operator|.
name|setEnabled
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|localFile
operator|&&
name|linkInPlace
operator|.
name|isSelected
argument_list|()
condition|)
name|copyRename
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibtexEntry
name|entry
init|=
name|mainTable
operator|.
name|getEntryAt
argument_list|(
name|dropRow
argument_list|)
decl_stmt|;
name|String
name|destFilename
init|=
name|entry
operator|.
name|getCiteKey
argument_list|()
operator|+
literal|"."
operator|+
name|fileType
operator|.
name|getExtension
argument_list|()
decl_stmt|;
name|copyRename
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Copy to %0 directory, rename to '%1', and link from entry."
argument_list|,
name|fileType
operator|.
name|getName
argument_list|()
argument_list|,
name|destFilename
argument_list|)
argument_list|)
expr_stmt|;
name|moveRename
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Move to %0 directory, rename to '%1', and link from entry."
argument_list|,
name|fileType
operator|.
name|getName
argument_list|()
argument_list|,
name|destFilename
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|reply
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|optionsPanel
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Link to file"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|OK_CANCEL_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|!=
name|JOptionPane
operator|.
name|OK_OPTION
condition|)
return|return;
comment|// Ok, we're ready to go. See first if we need to do a file copy before
comment|// linking:
name|boolean
name|success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|linkInPlace
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|destFilename
operator|=
name|fileName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|copyRename
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|success
operator|=
name|doCopy
argument_list|(
name|fileName
argument_list|,
name|fileType
argument_list|,
name|destFilename
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|moveRename
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|success
operator|=
name|doRename
argument_list|(
name|fileName
argument_list|,
name|fileType
argument_list|,
name|destFilename
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|success
condition|)
block|{
name|doLink
argument_list|(
name|entry
argument_list|,
name|fileType
argument_list|,
name|destFilename
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Make a link to the file.      * @param entry The entry to link from.      * @param fileType The FileType associated with the file.      * @param filename The path to the file.      */
DECL|method|doLink (BibtexEntry entry, ExternalFileType fileType, String filename)
specifier|private
name|void
name|doLink
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|ExternalFileType
name|fileType
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|UndoableFieldChange
name|edit
init|=
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|fileType
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|fileType
operator|.
name|getFieldName
argument_list|()
argument_list|)
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|fileType
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|edit
argument_list|)
expr_stmt|;
block|}
comment|/**      * Move the given file to the base directory for its file type, and      * rename it to the given filename.      * @param fileName The name of the source file.      * @param fileType The FileType associated with the file.      * @param destFilename The destination filename.      * @return true if the operation succeeded.      */
DECL|method|doRename (String fileName, ExternalFileType fileType, String destFilename)
specifier|private
name|boolean
name|doRename
parameter_list|(
name|String
name|fileName
parameter_list|,
name|ExternalFileType
name|fileType
parameter_list|,
name|String
name|destFilename
parameter_list|)
block|{
name|String
name|dir
init|=
name|panel
operator|.
name|metaData
argument_list|()
operator|.
name|getFileDirectory
argument_list|(
name|fileType
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|dir
operator|==
literal|null
operator|)
operator|||
operator|!
operator|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// OOps, we don't know which directory to put it in, or the given dir
comment|// doesn't exist....
return|return
literal|false
return|;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|dir
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|destFilename
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|.
name|renameTo
argument_list|(
name|destFile
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Copy the given file to the base directory for its file type,      * and give it the given name.      * @param fileName The name of the source file.      * @param fileType The FileType associated with the file.      * @param toFile The destination filename.      * @return      */
DECL|method|doCopy (String fileName, ExternalFileType fileType, String toFile)
specifier|private
name|boolean
name|doCopy
parameter_list|(
name|String
name|fileName
parameter_list|,
name|ExternalFileType
name|fileType
parameter_list|,
name|String
name|toFile
parameter_list|)
block|{
name|String
name|dir
init|=
name|panel
operator|.
name|metaData
argument_list|()
operator|.
name|getFileDirectory
argument_list|(
name|fileType
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|dir
operator|==
literal|null
operator|)
operator|||
operator|!
operator|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// OOps, we don't know which directory to put it in, or the given dir
comment|// doesn't exist....
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"dir: "
operator|+
name|dir
operator|+
literal|"\t ext: "
operator|+
name|fileType
operator|.
name|getExtension
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|dir
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|toFile
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|destFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
literal|"'"
operator|+
name|destFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"exists.Overwrite?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"File exists"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
return|return
literal|false
return|;
block|}
try|try
block|{
name|Util
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|destFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

