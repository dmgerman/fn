begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.external
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_comment
comment|/**  * This action goes through all selected entries in the BasePanel, and attempts to autoset the  * given external file (pdf, ps, ...) based on the same algorithm used for the "Auto" button in  * EntryEditor.  */
end_comment

begin_class
DECL|class|AutoSetExternalFileForEntries
specifier|public
class|class
name|AutoSetExternalFileForEntries
extends|extends
name|AbstractWorker
block|{
DECL|field|fieldName
specifier|private
name|String
name|fieldName
decl_stmt|;
DECL|field|panel
specifier|private
name|BasePanel
name|panel
decl_stmt|;
DECL|field|sel
specifier|private
name|BibtexEntry
index|[]
name|sel
init|=
literal|null
decl_stmt|;
DECL|field|goOn
DECL|field|overWriteAllowed
specifier|private
name|boolean
name|goOn
init|=
literal|true
decl_stmt|,
name|overWriteAllowed
init|=
literal|true
decl_stmt|;
DECL|field|skipped
DECL|field|set
specifier|private
name|int
name|skipped
init|=
literal|0
decl_stmt|,
name|set
init|=
literal|0
decl_stmt|;
DECL|method|AutoSetExternalFileForEntries (BasePanel panel, String fieldName)
specifier|public
name|AutoSetExternalFileForEntries
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
block|}
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
comment|// Get selected entries, and make sure there are selected entries:
name|sel
operator|=
name|panel
operator|.
name|getSelectedEntries
argument_list|()
expr_stmt|;
if|if
condition|(
name|sel
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|goOn
operator|=
literal|false
expr_stmt|;
return|return;
block|}
comment|// Ask about rules for the operation:
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Autosetting %0 field..."
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|goOn
condition|)
return|return;
name|skipped
operator|=
literal|0
expr_stmt|;
name|set
operator|=
literal|0
expr_stmt|;
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Autoset %0 field"
argument_list|,
name|fieldName
argument_list|)
argument_list|)
decl_stmt|;
name|ExternalFilePanel
name|extPan
init|=
operator|new
name|ExternalFilePanel
argument_list|(
name|fieldName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FieldTextField
name|editor
init|=
operator|new
name|FieldTextField
argument_list|(
name|fieldName
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sel
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//System.out.println("Checking: "+sel[i].getField("author"));
specifier|final
name|Object
name|old
init|=
name|sel
index|[
name|i
index|]
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
comment|// If we are not allowed to overwrite the old field values, check that none is set:
if|if
condition|(
operator|!
name|overWriteAllowed
operator|&&
operator|(
name|old
operator|!=
literal|null
operator|)
operator|&&
operator|!
operator|(
operator|(
name|String
operator|)
name|old
operator|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|skipped
operator|++
expr_stmt|;
continue|continue;
block|}
else|else
block|{
comment|// Ok, do it:
name|extPan
operator|.
name|setEntry
argument_list|(
name|sel
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|editor
operator|.
name|setText
argument_list|(
operator|(
name|old
operator|!=
literal|null
operator|)
condition|?
operator|(
name|String
operator|)
name|old
else|:
literal|""
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
name|extPan
operator|.
name|autoSetFile
argument_list|(
name|fieldName
argument_list|,
name|editor
argument_list|)
decl_stmt|;
comment|// Wait for the autoset process to finish:
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// If something was found, set it:
if|if
condition|(
operator|!
name|editor
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|editor
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|old
argument_list|)
condition|)
block|{
comment|// Store an undo edit:
comment|//System.out.println("Setting: "+sel[i].getCiteKey()+" "+editor.getText());
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|sel
index|[
name|i
index|]
argument_list|,
name|fieldName
argument_list|,
name|old
argument_list|,
name|editor
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sel
index|[
name|i
index|]
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|editor
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|set
operator|>
literal|0
condition|)
block|{
comment|// Add the undo edit:
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
if|if
condition|(
operator|!
name|goOn
condition|)
return|return;
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Finished autosetting %0 field. Entries changed: %1."
argument_list|,
operator|new
name|String
index|[]
block|{
name|fieldName
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|set
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|set
operator|>
literal|0
condition|)
block|{
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|panel
operator|.
name|refreshTable
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

