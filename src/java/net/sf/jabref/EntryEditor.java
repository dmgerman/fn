begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Morten O. Alver, Nizar N. Batada  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
operator|.
name|LabelPatternUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|*
import|;
end_import

begin_class
DECL|class|EntryEditor
specifier|public
class|class
name|EntryEditor
extends|extends
name|JPanel
implements|implements
name|VetoableChangeListener
block|{
comment|/*      * GUI component that allows editing of the fields of a BibtexEntry.      * EntryTypeForm also registers itself as a VetoableChangeListener,      * receiving events whenever a field of the entry changes, enabling the      * text fields to update themselves if the change is made from somewhere      * else.      */
comment|// A reference to the entry this object works on.
DECL|field|entry
name|BibtexEntry
name|entry
decl_stmt|;
DECL|field|closeAction
name|CloseAction
name|closeAction
decl_stmt|;
comment|// The action concerned with closing the window.
DECL|field|deleteAction
name|DeleteAction
name|deleteAction
init|=
operator|new
name|DeleteAction
argument_list|()
decl_stmt|;
comment|// The action that deletes the current entry, and closes the editor.
DECL|field|copyKeyAction
name|CopyKeyAction
name|copyKeyAction
decl_stmt|;
comment|// The action concerned with copying the BibTeX key to the clipboard.
name|AbstractAction
DECL|field|nextEntryAction
name|nextEntryAction
init|=
operator|new
name|NextEntryAction
argument_list|()
decl_stmt|,
DECL|field|prevEntryAction
name|prevEntryAction
init|=
operator|new
name|PrevEntryAction
argument_list|()
decl_stmt|;
comment|// Actions for switching to next/previous entry.
DECL|field|storeFieldAction
name|StoreFieldAction
name|storeFieldAction
decl_stmt|;
comment|// The action concerned with storing a field value.
DECL|field|switchLeftAction
name|SwitchLeftAction
name|switchLeftAction
init|=
operator|new
name|SwitchLeftAction
argument_list|()
decl_stmt|;
DECL|field|switchRightAction
name|SwitchRightAction
name|switchRightAction
init|=
operator|new
name|SwitchRightAction
argument_list|()
decl_stmt|;
comment|// The actions concerned with switching the panels.
DECL|field|generateKeyAction
name|GenerateKeyAction
name|generateKeyAction
decl_stmt|;
comment|// The action which generates a bibtexkey for this entry.
DECL|field|saveDatabaseAction
name|SaveDatabaseAction
name|saveDatabaseAction
init|=
operator|new
name|SaveDatabaseAction
argument_list|()
decl_stmt|;
DECL|field|mainPanel
name|JPanel
name|mainPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
comment|// The area below the toolbar.
DECL|field|srcPanel
name|srcPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|reqPanel
name|FieldPanel
name|reqPanel
init|=
operator|new
name|FieldPanel
argument_list|()
decl_stmt|,
DECL|field|optPanel
name|optPanel
init|=
operator|new
name|FieldPanel
argument_list|()
decl_stmt|,
DECL|field|genPanel
name|genPanel
init|=
operator|new
name|FieldPanel
argument_list|()
decl_stmt|;
DECL|field|bibtexKey
name|JTextField
name|bibtexKey
decl_stmt|;
DECL|field|tf
name|FieldTextField
name|tf
decl_stmt|;
DECL|field|source
name|JTextArea
name|source
decl_stmt|;
DECL|field|tabbed
name|JTabbedPane
name|tabbed
init|=
operator|new
name|JTabbedPane
argument_list|()
decl_stmt|;
comment|//JTabbedPane.RIGHT);
DECL|field|gbl
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
DECL|field|lab
name|JLabel
name|lab
decl_stmt|;
DECL|field|frame
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|panel
name|BasePanel
name|panel
decl_stmt|;
DECL|field|ths
name|EntryEditor
name|ths
init|=
name|this
decl_stmt|;
DECL|field|updateSource
name|boolean
name|updateSource
init|=
literal|true
decl_stmt|;
comment|// This can be set to false to stop the source
comment|// text area from gettin updated. This is used in cases where the source
comment|// couldn't be parsed, and the user is given the option to edit it.
DECL|field|lastSourceAccepted
name|boolean
name|lastSourceAccepted
init|=
literal|true
decl_stmt|;
comment|// This indicates whether the last attempt
comment|// at parsing the source was successful. It is used to determine whether the
comment|// dialog should close; it should stay open if the user received an error
comment|// message about the source, whatever he or she chose to do about it.
DECL|field|lastSourceStringAccepted
name|String
name|lastSourceStringAccepted
init|=
literal|null
decl_stmt|;
comment|// This is used to prevent double
comment|// updates after editing source.
DECL|field|optW
DECL|field|reqW
DECL|field|genW
name|double
name|optW
init|=
literal|0
decl_stmt|,
name|reqW
init|=
literal|1
decl_stmt|,
name|genW
init|=
literal|0
decl_stmt|;
comment|// Variables for total weight of fields.
comment|// These values can be used to calculate the preferred height for the form.
comment|// reqW starts at 1 because it needs room for the bibtex key field.
DECL|field|sourceIndex
specifier|private
name|int
name|sourceIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|// The index the source panel has in tabbed.
comment|//private final int REQ=0, OPT=1, GEN=2, FIELD_WIDTH=40, FIELD_HEIGHT=2;
DECL|field|KEY_PROPERTY
specifier|private
specifier|final
name|String
name|KEY_PROPERTY
init|=
literal|"bibtexkey"
decl_stmt|;
DECL|field|prefs
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|helpAction
name|HelpAction
name|helpAction
decl_stmt|;
DECL|method|EntryEditor (JabRefFrame frame_, BasePanel panel_, BibtexEntry entry_, JabRefPreferences prefs_)
specifier|public
name|EntryEditor
parameter_list|(
name|JabRefFrame
name|frame_
parameter_list|,
name|BasePanel
name|panel_
parameter_list|,
name|BibtexEntry
name|entry_
parameter_list|,
name|JabRefPreferences
name|prefs_
parameter_list|)
block|{
comment|//super(frame_);
name|frame
operator|=
name|frame_
expr_stmt|;
name|panel
operator|=
name|panel_
expr_stmt|;
name|entry
operator|=
name|entry_
expr_stmt|;
name|prefs
operator|=
name|prefs_
expr_stmt|;
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|lightGray
argument_list|)
expr_stmt|;
comment|//Color.white);
name|entry
operator|.
name|addPropertyChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|//setTitle(entry.getType().getName());
comment|//setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
name|helpAction
operator|=
operator|new
name|HelpAction
argument_list|(
name|frame
operator|.
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|entryEditorHelp
argument_list|,
literal|"Help"
argument_list|)
expr_stmt|;
name|closeAction
operator|=
operator|new
name|CloseAction
argument_list|()
expr_stmt|;
name|copyKeyAction
operator|=
operator|new
name|CopyKeyAction
argument_list|()
expr_stmt|;
comment|//    generateKeyAction = new GenerateKeyAction(baseFrame,entry);
name|generateKeyAction
operator|=
operator|new
name|GenerateKeyAction
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|storeFieldAction
operator|=
operator|new
name|StoreFieldAction
argument_list|()
expr_stmt|;
name|BorderLayout
name|bl
init|=
operator|new
name|BorderLayout
argument_list|()
decl_stmt|;
comment|//bl.setVgap(5);
name|setLayout
argument_list|(
name|bl
argument_list|)
expr_stmt|;
name|setupToolBar
argument_list|()
expr_stmt|;
name|setupFieldPanels
argument_list|(
name|reqPanel
argument_list|,
name|optPanel
argument_list|,
name|genPanel
argument_list|)
expr_stmt|;
name|setupSourcePanel
argument_list|()
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Required fields"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|showReqIconFile
argument_list|)
argument_list|,
name|reqPanel
operator|.
name|getPane
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show required fields"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|entry
operator|.
name|getOptionalFields
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|entry
operator|.
name|getOptionalFields
argument_list|()
operator|.
name|length
operator|>=
literal|1
operator|)
condition|)
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Optional fields"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|showOptIconFile
argument_list|)
argument_list|,
name|optPanel
operator|.
name|getPane
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show optional fields"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|entry
operator|.
name|getGeneralFields
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|entry
operator|.
name|getGeneralFields
argument_list|()
operator|.
name|length
operator|>=
literal|1
operator|)
condition|)
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"General fields"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|showGenIconFile
argument_list|)
argument_list|,
name|genPanel
operator|.
name|getPane
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show general fields"
argument_list|)
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"BibTeX source"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|sourceIconFile
argument_list|)
argument_list|,
name|srcPanel
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show/edit BibTeX source"
argument_list|)
argument_list|)
expr_stmt|;
name|sourceIndex
operator|=
name|tabbed
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
expr_stmt|;
comment|// Set the sourceIndex variable.
name|tabbed
operator|.
name|addChangeListener
argument_list|(
operator|new
name|TabListener
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|tabbed
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
comment|//Util.pr("opt: "+optW+"  req:"+reqW);
name|int
name|prefHeight
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|genW
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|optW
argument_list|,
name|reqW
argument_list|)
argument_list|)
operator|*
name|GUIGlobals
operator|.
name|FORM_HEIGHT
index|[
name|prefs
operator|.
name|getInt
argument_list|(
literal|"entryTypeFormHeightFactor"
argument_list|)
index|]
argument_list|)
decl_stmt|;
name|setSize
argument_list|(
name|GUIGlobals
operator|.
name|FORM_WIDTH
index|[
name|prefs
operator|.
name|getInt
argument_list|(
literal|"entryTypeFormWidth"
argument_list|)
index|]
argument_list|,
name|prefHeight
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"defaultShowSource"
argument_list|)
condition|)
block|{
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
name|sourceIndex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupToolBar ()
specifier|private
name|void
name|setupToolBar
parameter_list|()
block|{
name|JToolBar
name|tlb
init|=
operator|new
name|JToolBar
argument_list|(
name|JToolBar
operator|.
name|VERTICAL
argument_list|)
decl_stmt|;
name|tlb
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// The toolbar carries all the key bindings that are valid for the whole
comment|// window.
comment|//tlb.setBackground(GUIGlobals.lightGray);//Color.white);
name|ActionMap
name|am
init|=
name|tlb
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|InputMap
name|im
init|=
name|tlb
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
decl_stmt|;
name|im
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|exitDialog
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
name|closeAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor: store field"
argument_list|)
argument_list|,
literal|"store"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"store"
argument_list|,
name|storeFieldAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|generateKeyStroke
argument_list|,
literal|"generateKey"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"generateKey"
argument_list|,
name|generateKeyAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor: previous panel"
argument_list|)
argument_list|,
literal|"left"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"left"
argument_list|,
name|switchLeftAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor: next panel"
argument_list|)
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"right"
argument_list|,
name|switchRightAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor: previous entry"
argument_list|)
argument_list|,
literal|"prev"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"prev"
argument_list|,
name|prevEntryAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor: next entry"
argument_list|)
argument_list|,
literal|"next"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"next"
argument_list|,
name|nextEntryAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|undoStroke
argument_list|,
literal|"undo"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"undo"
argument_list|,
name|undoAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|redoStroke
argument_list|,
literal|"redo"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"redo"
argument_list|,
name|redoAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|helpKeyStroke
argument_list|,
literal|"help"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"help"
argument_list|,
name|helpAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setFloatable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|closeAction
argument_list|)
expr_stmt|;
comment|//tlb.addSeparator();
comment|//tlb.add(copyKeyAction);
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|generateKeyAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
comment|//tlb.add(undoAction);
comment|//tlb.add(redoAction);
name|tlb
operator|.
name|add
argument_list|(
name|deleteAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|prevEntryAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|nextEntryAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|helpAction
argument_list|)
expr_stmt|;
name|Component
index|[]
name|comps
init|=
name|tlb
operator|.
name|getComponents
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|comps
operator|.
name|length
condition|;
name|i
operator|++
control|)
operator|(
operator|(
name|JComponent
operator|)
name|comps
index|[
name|i
index|]
operator|)
operator|.
name|setOpaque
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|tlb
argument_list|,
name|BorderLayout
operator|.
name|WEST
argument_list|)
expr_stmt|;
block|}
DECL|method|setupFieldPanels (FieldPanel req, FieldPanel opt, FieldPanel gen)
specifier|private
name|void
name|setupFieldPanels
parameter_list|(
name|FieldPanel
name|req
parameter_list|,
name|FieldPanel
name|opt
parameter_list|,
name|FieldPanel
name|gen
parameter_list|)
block|{
comment|// First we ask the BibtexEntry which fields are optional and
comment|// required.
name|String
index|[]
name|reqFields
init|=
name|entry
operator|.
name|getRequiredFields
argument_list|()
decl_stmt|,
name|optFields
init|=
name|entry
operator|.
name|getOptionalFields
argument_list|()
decl_stmt|,
comment|//        genFields = new String[] {"crossref", "url", "abstract", "comment"}; // May change...
name|genFields
init|=
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"generalFields"
argument_list|)
decl_stmt|;
comment|//entry.getGeneralFields() ;
if|if
condition|(
name|reqFields
operator|==
literal|null
condition|)
name|reqFields
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|optFields
operator|==
literal|null
condition|)
name|optFields
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|genFields
operator|==
literal|null
condition|)
name|genFields
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
name|int
name|iter
decl_stmt|,
name|rmax
decl_stmt|,
name|omax
decl_stmt|,
name|gmax
decl_stmt|;
name|rmax
operator|=
name|reqFields
operator|.
name|length
expr_stmt|;
name|omax
operator|=
name|optFields
operator|.
name|length
expr_stmt|;
name|gmax
operator|=
name|genFields
operator|.
name|length
expr_stmt|;
name|iter
operator|=
name|Math
operator|.
name|max
argument_list|(
name|rmax
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|omax
argument_list|,
name|gmax
argument_list|)
argument_list|)
expr_stmt|;
name|FieldTextArea
name|ta1
init|=
literal|null
decl_stmt|,
name|ta2
init|=
literal|null
decl_stmt|,
name|ta3
init|=
literal|null
decl_stmt|,
name|firstR
init|=
literal|null
decl_stmt|,
name|firstO
init|=
literal|null
decl_stmt|;
name|JComponent
name|ex1
init|=
literal|null
decl_stmt|,
name|ex2
init|=
literal|null
decl_stmt|,
name|ex3
init|=
literal|null
decl_stmt|;
name|String
name|stringContent
decl_stmt|;
name|Object
name|content
decl_stmt|;
name|req
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|opt
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|gen
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
comment|//FieldTextArea firstReq = null, firstOpt = null, firstGen = null;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iter
condition|;
name|i
operator|++
control|)
block|{
comment|// Constraints for the labels.
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
comment|//con.fill = GridBagConstraints.BOTH;
if|if
condition|(
name|i
operator|<
name|rmax
condition|)
block|{
if|if
condition|(
operator|(
name|content
operator|=
name|entry
operator|.
name|getField
argument_list|(
name|reqFields
index|[
name|i
index|]
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|stringContent
operator|=
name|content
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
name|stringContent
operator|=
literal|null
expr_stmt|;
name|ta1
operator|=
operator|new
name|FieldTextArea
argument_list|(
name|reqFields
index|[
name|i
index|]
argument_list|,
name|stringContent
argument_list|)
expr_stmt|;
name|ex1
operator|=
name|getExtra
argument_list|(
name|reqFields
index|[
name|i
index|]
argument_list|,
name|ta1
argument_list|)
expr_stmt|;
comment|/*if (i == 0) 		    firstReq = ta1; 		if ((i == rmax-1)&& (firstReq != null)) 		ta1.setNextFocusableComponent(firstReq);*/
name|setupJTextComponent
argument_list|(
name|ta1
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|firstR
operator|=
name|ta1
expr_stmt|;
name|req
operator|.
name|setActive
argument_list|(
name|ta1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|<
name|omax
condition|)
block|{
if|if
condition|(
operator|(
name|content
operator|=
name|entry
operator|.
name|getField
argument_list|(
name|optFields
index|[
name|i
index|]
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|stringContent
operator|=
name|content
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
name|stringContent
operator|=
literal|null
expr_stmt|;
name|ta2
operator|=
operator|new
name|FieldTextArea
argument_list|(
name|optFields
index|[
name|i
index|]
argument_list|,
name|stringContent
argument_list|)
expr_stmt|;
name|ex2
operator|=
name|getExtra
argument_list|(
name|optFields
index|[
name|i
index|]
argument_list|,
name|ta2
argument_list|)
expr_stmt|;
comment|/*if (i == 0) 		    firstOpt = ta1; 		if (i == omax-1) 		ta1.setNextFocusableComponent(firstOpt);*/
name|setupJTextComponent
argument_list|(
name|ta2
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|firstO
operator|=
name|ta2
expr_stmt|;
name|opt
operator|.
name|setActive
argument_list|(
name|ta2
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|<
name|gmax
condition|)
block|{
if|if
condition|(
operator|(
name|content
operator|=
name|entry
operator|.
name|getField
argument_list|(
name|genFields
index|[
name|i
index|]
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|stringContent
operator|=
name|content
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
name|stringContent
operator|=
literal|null
expr_stmt|;
name|ta3
operator|=
operator|new
name|FieldTextArea
argument_list|(
name|genFields
index|[
name|i
index|]
argument_list|,
name|stringContent
argument_list|)
expr_stmt|;
name|ex3
operator|=
name|getExtra
argument_list|(
name|genFields
index|[
name|i
index|]
argument_list|,
name|ta3
argument_list|)
expr_stmt|;
comment|/*if (i == 0) 		    firstGen = ta1; 		if (i == gmax-1) 		ta1.setNextFocusableComponent(firstGen);*/
name|setupJTextComponent
argument_list|(
name|ta3
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|firstO
operator|=
name|ta3
expr_stmt|;
name|gen
operator|.
name|setActive
argument_list|(
name|ta3
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|<
name|rmax
condition|)
block|{
name|gbl
operator|.
name|setConstraints
argument_list|(
name|ta1
operator|.
name|getLabel
argument_list|()
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|ta1
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|omax
condition|)
block|{
name|gbl
operator|.
name|setConstraints
argument_list|(
name|ta2
operator|.
name|getLabel
argument_list|()
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|opt
operator|.
name|add
argument_list|(
name|ta2
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|gmax
condition|)
block|{
name|gbl
operator|.
name|setConstraints
argument_list|(
name|ta3
operator|.
name|getLabel
argument_list|()
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|gen
operator|.
name|add
argument_list|(
name|ta3
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Constraints for the text fields.
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
comment|//con.fill = GridBagConstraints.BOTH;
if|if
condition|(
name|i
operator|<
name|rmax
condition|)
block|{
if|if
condition|(
name|ex1
operator|!=
literal|null
condition|)
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
else|else
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
name|GUIGlobals
operator|.
name|getFieldWeight
argument_list|(
name|reqFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|reqW
operator|+=
name|con
operator|.
name|weighty
expr_stmt|;
comment|//Util.pr(reqFields[i]+" "+con.weighty+"");
name|gbl
operator|.
name|setConstraints
argument_list|(
name|ta1
operator|.
name|getPane
argument_list|()
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|ta1
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex1
operator|!=
literal|null
condition|)
block|{
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|ex1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|ex1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|<
name|omax
condition|)
block|{
if|if
condition|(
name|ex2
operator|!=
literal|null
condition|)
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
else|else
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
name|GUIGlobals
operator|.
name|getFieldWeight
argument_list|(
name|optFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|optW
operator|+=
name|con
operator|.
name|weighty
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|ta2
operator|.
name|getPane
argument_list|()
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|opt
operator|.
name|add
argument_list|(
name|ta2
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex2
operator|!=
literal|null
condition|)
block|{
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|ex2
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|opt
operator|.
name|add
argument_list|(
name|ex2
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|<
name|gmax
condition|)
block|{
if|if
condition|(
name|ex3
operator|!=
literal|null
condition|)
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
else|else
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
name|GUIGlobals
operator|.
name|getFieldWeight
argument_list|(
name|genFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|genW
operator|+=
name|con
operator|.
name|weighty
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|ta3
operator|.
name|getPane
argument_list|()
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|gen
operator|.
name|add
argument_list|(
name|ta3
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex3
operator|!=
literal|null
condition|)
block|{
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
comment|//con.weighty = 1;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|ex3
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|gen
operator|.
name|add
argument_list|(
name|ex3
argument_list|)
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|CENTER
expr_stmt|;
block|}
block|}
block|}
comment|// Add the edit field for Bibtex-key.
name|con
operator|.
name|insets
operator|.
name|top
operator|+=
literal|25
expr_stmt|;
name|con
operator|.
name|insets
operator|.
name|bottom
operator|=
literal|10
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|SOUTHWEST
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|tf
operator|=
operator|new
name|FieldTextField
argument_list|(
name|KEY_PROPERTY
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getField
argument_list|(
name|KEY_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|tf
operator|.
name|getLabel
argument_list|()
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|tf
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
comment|//	con.anchor = GridBagConstraints.WEST;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|setupJTextComponent
argument_list|(
name|tf
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|tf
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|tf
argument_list|)
expr_stmt|;
block|}
comment|/**    * getExtra checks the field name against GUIGlobals.FIELD_EXTRAS. If the name    * has an entry, the proper component to be shown is created and returned.    * Otherwise, null is returned.    * In addition, e.g. listeners can be added to the field editor, even if no    * component is returned.    *    * @param string Field name    * @return Component to show, or null if none.    */
DECL|method|getExtra (String string, FieldEditor editor)
specifier|private
name|JComponent
name|getExtra
parameter_list|(
name|String
name|string
parameter_list|,
name|FieldEditor
name|editor
parameter_list|)
block|{
specifier|final
name|FieldEditor
name|ed
init|=
name|editor
decl_stmt|;
name|Object
name|o
init|=
name|GUIGlobals
operator|.
name|FIELD_EXTRAS
operator|.
name|get
argument_list|(
name|string
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|editor
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
comment|//if (o == null)
comment|//  return null;
name|String
name|s
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|(
name|s
operator|!=
literal|null
operator|)
operator|&&
name|s
operator|.
name|equals
argument_list|(
literal|"external"
argument_list|)
condition|)
block|{
comment|// Add external viewer listener for "pdf" and "url" fields.
operator|(
operator|(
name|JComponent
operator|)
name|editor
operator|)
operator|.
name|addMouseListener
argument_list|(
operator|new
name|ExternalViewerListener
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|panel
operator|.
name|metaData
operator|.
name|getData
argument_list|(
name|Globals
operator|.
name|SELECTOR_META_PREFIX
operator|+
name|editor
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|FieldContentSelector
name|ws
init|=
operator|new
name|FieldContentSelector
argument_list|(
name|this
argument_list|,
name|editor
argument_list|,
name|panel
operator|.
name|metaData
argument_list|)
decl_stmt|;
return|return
name|ws
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|s
operator|!=
literal|null
operator|)
operator|&&
name|s
operator|.
name|equals
argument_list|(
literal|"browse"
argument_list|)
condition|)
block|{
name|JButton
name|but
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Browse"
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|JComponent
operator|)
name|editor
operator|)
operator|.
name|addMouseListener
argument_list|(
operator|new
name|ExternalViewerListener
argument_list|()
argument_list|)
expr_stmt|;
name|but
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|lightGray
argument_list|)
expr_stmt|;
name|but
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JabRefFileChooser
name|chooser
init|=
operator|new
name|JabRefFileChooser
argument_list|(
operator|new
name|File
argument_list|(
name|ed
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ed
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|chooser
operator|.
name|setCurrentDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
name|fieldName
operator|+
name|Globals
operator|.
name|FILETYPE_PREFS_EXT
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//chooser.addChoosableFileFilter(new OpenFileFilter()); //nb nov2
name|int
name|returnVal
init|=
name|chooser
operator|.
name|showOpenDialog
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnVal
operator|==
name|JFileChooser
operator|.
name|APPROVE_OPTION
condition|)
block|{
name|File
name|newFile
init|=
name|chooser
operator|.
name|getSelectedFile
argument_list|()
decl_stmt|;
name|ed
operator|.
name|setText
argument_list|(
name|newFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|fieldName
operator|+
name|Globals
operator|.
name|FILETYPE_PREFS_EXT
argument_list|,
name|newFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|ed
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|but
return|;
block|}
else|else
return|return
literal|null
return|;
block|}
DECL|method|setupSourcePanel ()
specifier|private
name|void
name|setupSourcePanel
parameter_list|()
block|{
name|source
operator|=
operator|new
name|JTextArea
argument_list|()
block|{
specifier|public
name|void
name|paintComponent
parameter_list|(
name|Graphics
name|g
parameter_list|)
block|{
name|Graphics2D
name|g2
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
name|g2
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_ON
argument_list|)
expr_stmt|;
name|g2
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_RENDERING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_RENDER_QUALITY
argument_list|)
expr_stmt|;
name|super
operator|.
name|paintComponent
argument_list|(
name|g2
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|con
operator|=
operator|new
name|GridBagConstraints
argument_list|()
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|gridheight
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|srcPanel
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|source
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//prefs.getBoolean("enableSourceEditing"));
name|source
operator|.
name|setLineWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|source
operator|.
name|setTabSize
argument_list|(
name|GUIGlobals
operator|.
name|INDENT
argument_list|)
expr_stmt|;
name|setupJTextComponent
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
name|source
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
decl_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|sp
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|srcPanel
operator|.
name|add
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
DECL|method|updateSource ()
specifier|private
name|void
name|updateSource
parameter_list|()
block|{
if|if
condition|(
name|updateSource
condition|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|200
argument_list|)
decl_stmt|;
try|try
block|{
name|entry
operator|.
name|write
argument_list|(
name|sw
argument_list|,
operator|new
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|LatexFieldFormatter
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|srcString
init|=
name|sw
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|source
operator|.
name|setText
argument_list|(
name|srcString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|source
operator|.
name|setText
argument_list|(
literal|"Error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Correct the entry, and "
operator|+
literal|"reopen editor to display/edit source."
argument_list|)
expr_stmt|;
name|source
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setupJTextComponent (JTextComponent ta)
specifier|private
name|void
name|setupJTextComponent
parameter_list|(
name|JTextComponent
name|ta
parameter_list|)
block|{
comment|// Activate autocompletion if it should be used for this field.
comment|/* 	if ((ta instanceof FieldTextArea)&& 	    (prefs.getBoolean("autoComplete"))) { 	    FieldTextArea fta = (FieldTextArea)ta; 	    Completer comp = baseFrame.getAutoCompleter(fta.getFieldName()); 	    if (comp != null) 		fta.setAutoComplete(comp); 	} 	*/
comment|// Set up key bindings and focus listener for the FieldEditor.
name|InputMap
name|im
init|=
name|ta
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_FOCUSED
argument_list|)
decl_stmt|;
name|ActionMap
name|am
init|=
name|ta
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
comment|//im.put(KeyStroke.getKeyStroke(GUIGlobals.closeKey), "close");
comment|//am.put("close", closeAction);
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor: store field"
argument_list|)
argument_list|,
literal|"store"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"store"
argument_list|,
name|storeFieldAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|switchPanelLeft
argument_list|,
literal|"left"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"left"
argument_list|,
name|switchLeftAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|switchPanelRight
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"right"
argument_list|,
name|switchRightAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|helpKeyStroke
argument_list|,
literal|"help"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"help"
argument_list|,
name|helpAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Save"
argument_list|)
argument_list|,
literal|"save"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"save"
argument_list|,
name|saveDatabaseAction
argument_list|)
expr_stmt|;
try|try
block|{
name|HashSet
name|keys
init|=
operator|new
name|HashSet
argument_list|(
name|ta
operator|.
name|getFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|FORWARD_TRAVERSAL_KEYS
argument_list|)
argument_list|)
decl_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|AWTKeyStroke
operator|.
name|getAWTKeyStroke
argument_list|(
literal|"pressed TAB"
argument_list|)
argument_list|)
expr_stmt|;
name|ta
operator|.
name|setFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|FORWARD_TRAVERSAL_KEYS
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|keys
operator|=
operator|new
name|HashSet
argument_list|(
name|ta
operator|.
name|getFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|BACKWARD_TRAVERSAL_KEYS
argument_list|)
argument_list|)
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"shift pressed TAB"
argument_list|)
argument_list|)
expr_stmt|;
name|ta
operator|.
name|setFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|BACKWARD_TRAVERSAL_KEYS
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|ta
operator|.
name|addFocusListener
argument_list|(
operator|new
name|FieldListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|requestFocus ()
specifier|public
name|void
name|requestFocus
parameter_list|()
block|{
if|if
condition|(
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|instanceof
name|FieldPanel
condition|)
operator|(
operator|(
name|FieldPanel
operator|)
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|)
operator|.
name|activate
argument_list|()
expr_stmt|;
else|else
name|source
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
DECL|class|FieldListener
class|class
name|FieldListener
extends|extends
name|FocusAdapter
block|{
comment|/* 	 * Focus listener that fires the storeFieldAction when a FieldTextArea 	 * loses focus. 	 */
DECL|method|focusGained (FocusEvent e)
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
comment|//Util.pr("Gained focus "+e.getSource().toString().substring(0,30));
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|instanceof
name|FieldEditor
condition|)
block|{
name|FieldEditor
name|ta
init|=
operator|(
name|FieldEditor
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Component
name|parent
init|=
name|ta
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|parent
operator|instanceof
name|FieldPanel
operator|)
condition|)
block|{
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|FieldPanel
operator|)
name|parent
operator|)
operator|.
name|setActive
argument_list|(
name|ta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The source panel must have been chosen. Update it.
if|if
condition|(
name|panel
operator|.
name|baseChanged
condition|)
name|updateSource
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|focusLost (FocusEvent e)
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
comment|//Util.pr("Lost focus "+e.getSource().toString().substring(0,30));
if|if
condition|(
operator|!
name|e
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|e
operator|.
name|getSource
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|FieldPanel
class|class
name|FieldPanel
extends|extends
name|JPanel
block|{
comment|/* 	 * This extension to JPanel keeps a reference to its active 	 * field, on behalf of which it requests the focus when 	 * it is told to. 	 */
DECL|method|FieldPanel ()
specifier|public
name|FieldPanel
parameter_list|()
block|{
comment|//setBackground(Color.white);
block|}
DECL|field|activeField
name|FieldEditor
name|activeField
init|=
literal|null
decl_stmt|;
DECL|field|sp
name|JScrollPane
name|sp
decl_stmt|;
DECL|method|getPane ()
specifier|public
name|JComponent
name|getPane
parameter_list|()
block|{
return|return
name|this
return|;
comment|// Component to add. Return the scrollpane, if there is one.
block|}
DECL|method|setActive (FieldEditor c)
specifier|public
name|void
name|setActive
parameter_list|(
name|FieldEditor
name|c
parameter_list|)
block|{
name|activeField
operator|=
name|c
expr_stmt|;
block|}
DECL|method|getFields ()
specifier|public
name|Vector
name|getFields
parameter_list|()
block|{
name|Vector
name|textFields
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Component
index|[]
name|components
init|=
name|this
operator|.
name|getComponents
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|components
index|[
name|i
index|]
operator|instanceof
name|FieldEditor
condition|)
block|{
name|textFields
operator|.
name|add
argument_list|(
name|components
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|//else if ((components[i] instanceof JScrollPane)) {
comment|//    Util.pr(((JScrollPane)components[i]).getViewport().getComponent(0).toString().substring(0,50));
comment|//}
elseif|else
if|if
condition|(
name|components
index|[
name|i
index|]
operator|instanceof
name|JScrollPane
condition|)
block|{
name|textFields
operator|.
name|add
argument_list|(
operator|(
operator|(
name|JScrollPane
operator|)
name|components
index|[
name|i
index|]
operator|)
operator|.
name|getViewport
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|textFields
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"caught in getFields: "
operator|+
name|cce
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|activate ()
specifier|public
name|void
name|activate
parameter_list|()
block|{
if|if
condition|(
name|activeField
operator|!=
literal|null
condition|)
name|activeField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
else|else
name|tf
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
comment|//
block|}
block|}
DECL|class|TabListener
class|class
name|TabListener
implements|implements
name|ChangeListener
block|{
DECL|method|stateChanged (ChangeEvent e)
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|JTabbedPane
operator|)
name|e
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getSelectedIndex
argument_list|()
operator|!=
name|sourceIndex
condition|)
block|{
name|FieldPanel
name|fp
init|=
call|(
name|FieldPanel
call|)
argument_list|(
operator|(
operator|(
name|JTabbedPane
operator|)
name|e
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getSelectedComponent
argument_list|()
argument_list|)
decl_stmt|;
name|fp
operator|.
name|activate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|source
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|DeleteAction
class|class
name|DeleteAction
extends|extends
name|AbstractAction
block|{
DECL|method|DeleteAction ()
specifier|public
name|DeleteAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Delete"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|removeIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Delete entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|panel
operator|.
name|hideEntryEditor
argument_list|()
expr_stmt|;
name|panel
operator|.
name|database
operator|.
name|removeEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|panel
operator|.
name|refreshTable
argument_list|()
expr_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|panel
operator|.
name|database
argument_list|,
name|entry
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Deleted"
argument_list|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CloseAction
class|class
name|CloseAction
extends|extends
name|AbstractAction
block|{
DECL|method|CloseAction ()
specifier|public
name|CloseAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Close window"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|closeIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Close window"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|==
name|srcPanel
condition|)
block|{
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastSourceAccepted
condition|)
block|{
name|panel
operator|.
name|entryTypeFormClosing
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|hideEntryEditor
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|panel
operator|.
name|entryTypeFormClosing
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|hideEntryEditor
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|CopyKeyAction
class|class
name|CopyKeyAction
extends|extends
name|AbstractAction
block|{
DECL|method|CopyKeyAction ()
specifier|public
name|CopyKeyAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Copy BibTeX key to clipboard"
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|copyKeyIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
literal|"Copy BibTeX key to clipboard (Ctrl-K)"
argument_list|)
expr_stmt|;
comment|//putValue(MNEMONIC_KEY, GUIGlobals.copyKeyCode);
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|s
init|=
call|(
name|String
call|)
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|KEY_PROPERTY
argument_list|)
argument_list|)
decl_stmt|;
name|StringSelection
name|ss
init|=
operator|new
name|StringSelection
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|ss
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|StoreFieldAction
class|class
name|StoreFieldAction
extends|extends
name|AbstractAction
block|{
DECL|method|StoreFieldAction ()
specifier|public
name|StoreFieldAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Store field value"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
literal|"Store field value"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|instanceof
name|FieldTextArea
condition|)
block|{
name|String
name|toSet
init|=
literal|null
decl_stmt|;
name|FieldEditor
name|fe
init|=
operator|(
name|FieldEditor
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|boolean
name|set
decl_stmt|;
if|if
condition|(
name|fe
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|toSet
operator|=
name|fe
operator|.
name|getText
argument_list|()
expr_stmt|;
comment|// We check if the field has changed, since we don't want to mark the
comment|// base as changed unless we have a real change.
if|if
condition|(
name|toSet
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|set
operator|=
literal|false
expr_stmt|;
else|else
name|set
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|entry
operator|.
name|getField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|!=
literal|null
operator|)
operator|&&
name|toSet
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|set
operator|=
literal|false
expr_stmt|;
else|else
name|set
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|set
condition|)
try|try
block|{
comment|// The following statement attempts to write the
comment|// new contents into a StringWriter, and this will
comment|// cause an IOException if the field is not
comment|// properly formatted. If that happens, the field
comment|// is not stored and the textarea turns red.
if|if
condition|(
name|toSet
operator|!=
literal|null
condition|)
operator|(
operator|new
name|LatexFieldFormatter
argument_list|()
operator|)
operator|.
name|format
argument_list|(
name|toSet
argument_list|,
name|GUIGlobals
operator|.
name|isStandardField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|toSet
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|toSet
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|toSet
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|fe
operator|.
name|setLabelColor
argument_list|(
name|GUIGlobals
operator|.
name|validFieldColor
argument_list|)
expr_stmt|;
name|fe
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|validFieldBackground
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fe
operator|.
name|setLabelColor
argument_list|(
name|GUIGlobals
operator|.
name|nullFieldColor
argument_list|)
expr_stmt|;
name|fe
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|validFieldBackground
argument_list|)
expr_stmt|;
block|}
comment|// Add an UndoableFieldChange to the baseframe's undoManager.
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|oldValue
argument_list|,
name|toSet
argument_list|)
argument_list|)
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
name|panel
operator|.
name|refreshTable
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|frame
operator|.
name|output
argument_list|(
literal|"Invalid field format: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|fe
operator|.
name|setLabelColor
argument_list|(
name|GUIGlobals
operator|.
name|invalidFieldColor
argument_list|)
expr_stmt|;
name|fe
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|invalidFieldBackground
argument_list|)
expr_stmt|;
block|}
comment|/*catch (java.io.IOException ex2) { 		    fe.setLabelColor(GUIGlobals.invalidFieldColor); 		    fe.setBackground(GUIGlobals.invalidFieldBackground); 		    }*/
else|else
block|{
comment|// set == false
comment|// We set the field and label color.
name|fe
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|validFieldBackground
argument_list|)
expr_stmt|;
name|fe
operator|.
name|setLabelColor
argument_list|(
operator|(
name|toSet
operator|==
literal|null
operator|)
condition|?
name|GUIGlobals
operator|.
name|nullFieldColor
else|:
name|GUIGlobals
operator|.
name|validFieldColor
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|instanceof
name|FieldTextField
condition|)
block|{
comment|// Storage from bibtex key field.
name|FieldTextField
name|fe
init|=
operator|(
name|FieldTextField
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|String
name|oldValue
init|=
name|entry
operator|.
name|getCiteKey
argument_list|()
decl_stmt|,
name|newValue
init|=
name|fe
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|oldValue
operator|==
literal|null
operator|)
operator|&&
operator|(
name|newValue
operator|==
literal|null
operator|)
operator|)
operator|||
operator|(
operator|(
name|oldValue
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|newValue
operator|!=
literal|null
operator|)
operator|&&
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
operator|)
condition|)
return|return;
comment|// No change.
name|boolean
name|isDuplicate
init|=
name|panel
operator|.
name|database
operator|.
name|setCiteKeyForEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDuplicate
condition|)
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"duplicate bibtex key."
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Bibtex key is unique."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add an UndoableKeyChange to the baseframe's undoManager.
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableKeyChange
argument_list|(
name|panel
operator|.
name|database
argument_list|,
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|newValue
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|newValue
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|fe
operator|.
name|setLabelColor
argument_list|(
name|GUIGlobals
operator|.
name|validFieldColor
argument_list|)
expr_stmt|;
name|fe
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|validFieldBackground
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fe
operator|.
name|setLabelColor
argument_list|(
name|GUIGlobals
operator|.
name|nullFieldColor
argument_list|)
expr_stmt|;
name|fe
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|validFieldBackground
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|refreshTable
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|source
operator|.
name|isEditable
argument_list|()
operator|)
operator|&&
operator|(
name|source
operator|.
name|getText
argument_list|()
operator|!=
name|lastSourceStringAccepted
operator|)
condition|)
block|{
comment|// Store edited bibtex code.
name|BibtexParser
name|bp
init|=
operator|new
name|BibtexParser
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|StringReader
argument_list|(
name|source
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|BibtexDatabase
name|db
init|=
name|bp
operator|.
name|parse
argument_list|()
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"More than one entry found."
argument_list|)
throw|;
if|if
condition|(
name|db
operator|.
name|getEntryCount
argument_list|()
operator|<
literal|1
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No entries found."
argument_list|)
throw|;
name|NamedCompound
name|compound
init|=
operator|new
name|NamedCompound
argument_list|(
literal|"source edit"
argument_list|)
decl_stmt|;
name|BibtexEntry
name|nu
init|=
name|db
operator|.
name|getEntryById
argument_list|(
operator|(
name|String
operator|)
name|db
operator|.
name|getKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|entry
operator|.
name|getId
argument_list|()
decl_stmt|,
comment|//oldKey = entry.getCiteKey(),
name|newKey
init|=
name|nu
operator|.
name|getCiteKey
argument_list|()
decl_stmt|;
name|boolean
name|anyChanged
init|=
literal|false
decl_stmt|,
name|duplicateWarning
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|panel
operator|.
name|database
operator|.
name|setCiteKeyForEntry
argument_list|(
name|id
argument_list|,
name|newKey
argument_list|)
condition|)
name|duplicateWarning
operator|=
literal|true
expr_stmt|;
comment|// First, remove fields that the user have removed.
name|Object
index|[]
name|fields
init|=
name|entry
operator|.
name|getAllFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|GUIGlobals
operator|.
name|isWriteableField
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|nu
operator|.
name|getField
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|anyChanged
operator|=
literal|true
expr_stmt|;
block|}
comment|// Then set all fields that have been set by the user.
name|fields
operator|=
name|nu
operator|.
name|getAllFields
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|entry
operator|.
name|getField
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
name|nu
operator|.
name|getField
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|nu
operator|.
name|getField
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|nu
operator|.
name|getField
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|anyChanged
operator|=
literal|true
expr_stmt|;
block|}
name|compound
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyChanged
condition|)
return|return;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|compound
argument_list|)
expr_stmt|;
comment|/*if (((oldKey == null)&& (newKey != null)) || 			((oldKey != null)&& (newKey == null)) || 			((oldKey != null)&& (newKey != null)&& !oldKey.equals(newKey))) {  			 } */
if|if
condition|(
name|duplicateWarning
condition|)
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning: duplicate bibtex key."
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Stored entry"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|lastSourceStringAccepted
operator|=
name|source
operator|.
name|getText
argument_list|()
expr_stmt|;
name|updateAllFields
argument_list|()
expr_stmt|;
name|lastSourceAccepted
operator|=
literal|true
expr_stmt|;
name|updateSource
operator|=
literal|true
expr_stmt|;
name|panel
operator|.
name|refreshTable
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// The source couldn't be parsed, so the user is given an
comment|// error message, and the choice to keep or revert the contents
comment|// of the source text field.
name|updateSource
operator|=
literal|false
expr_stmt|;
name|lastSourceAccepted
operator|=
literal|false
expr_stmt|;
name|tabbed
operator|.
name|setSelectedComponent
argument_list|(
name|srcPanel
argument_list|)
expr_stmt|;
name|Object
index|[]
name|options
init|=
block|{
literal|"Edit"
block|,
literal|"Revert to original source"
block|}
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showOptionDialog
argument_list|(
name|frame
argument_list|,
literal|"Error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Problem with parsing entry"
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
name|options
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|0
condition|)
block|{
name|updateSource
operator|=
literal|true
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|SwitchLeftAction
class|class
name|SwitchLeftAction
extends|extends
name|AbstractAction
block|{
DECL|method|SwitchLeftAction ()
specifier|public
name|SwitchLeftAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Switch to the panel to the left"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|i
init|=
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
operator|(
name|i
operator|>
literal|0
condition|?
name|i
operator|-
literal|1
else|:
name|tabbed
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|instanceof
name|FieldPanel
condition|)
operator|(
operator|(
name|FieldPanel
operator|)
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|)
operator|.
name|activate
argument_list|()
expr_stmt|;
comment|// Set focus to the last used textfield.
block|}
block|}
DECL|class|SwitchRightAction
class|class
name|SwitchRightAction
extends|extends
name|AbstractAction
block|{
DECL|method|SwitchRightAction ()
specifier|public
name|SwitchRightAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Switch to the panel to the right"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|i
init|=
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
name|i
operator|<
name|tabbed
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
condition|?
name|i
operator|+
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|instanceof
name|FieldPanel
condition|)
operator|(
operator|(
name|FieldPanel
operator|)
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|)
operator|.
name|activate
argument_list|()
expr_stmt|;
comment|// Set focus to the last used textfield.
block|}
block|}
comment|/*     class ShowReqAction extends AbstractAction { 	public ShowReqAction() { 	    super("Show required", 		  new ImageIcon(GUIGlobals.showReqIconFile)); 	    putValue(SHORT_DESCRIPTION, "Show required fields"); 	    putValue(MNEMONIC_KEY, GUIGlobals.showReqKeyCode); 	}  	public void actionPerformed(ActionEvent e) { 	    //System.out.println("Show required fields"); 	    tabbed.setSelectedIndex(REQ); 	    reqPanel.activate(); // Set focus to the last used textfield. 	}     }      class ShowOptAction extends AbstractAction { 	public ShowOptAction() { 	    super("Show optional", 		  new ImageIcon(GUIGlobals.showOptIconFile)); 	    putValue(SHORT_DESCRIPTION, "Show optional fields"); 	    putValue(MNEMONIC_KEY, GUIGlobals.showOptKeyCode); 	}  	public void actionPerformed(ActionEvent e) { 	    tabbed.setSelectedIndex(OPT); 	    optPanel.activate(); // Set focus to the last used textfield. 	}     }       class ShowGenAction extends AbstractAction { 	public ShowGenAction() { 	    super("Show general", 		  new ImageIcon(GUIGlobals.showGenIconFile)); 	    putValue(SHORT_DESCRIPTION, "Show general fields"); 	    putValue(MNEMONIC_KEY, GUIGlobals.showGenKeyCode); 	}  	public void actionPerformed(ActionEvent e) { 	    tabbed.setSelectedIndex(GEN); 	    genPanel.activate(); // Set focus to the last used textfield. 	}     }     */
DECL|class|NextEntryAction
class|class
name|NextEntryAction
extends|extends
name|AbstractAction
block|{
DECL|method|NextEntryAction ()
specifier|public
name|NextEntryAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Next entry"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|downIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Next entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|thisRow
init|=
name|panel
operator|.
name|tableModel
operator|.
name|getNumberFromName
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|null
decl_stmt|;
name|int
name|newRow
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|thisRow
operator|+
literal|1
operator|<
name|panel
operator|.
name|database
operator|.
name|getEntryCount
argument_list|()
condition|)
name|newRow
operator|=
name|thisRow
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|thisRow
operator|>
literal|0
condition|)
name|newRow
operator|=
literal|0
expr_stmt|;
else|else
return|return;
comment|// newRow is still -1, so we can assume the database
comment|// has only one entry.
name|id
operator|=
name|panel
operator|.
name|tableModel
operator|.
name|getNameFromNumber
argument_list|(
name|newRow
argument_list|)
expr_stmt|;
name|switchTo
argument_list|(
name|id
argument_list|)
expr_stmt|;
specifier|final
name|int
name|nr
init|=
name|newRow
decl_stmt|;
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|scrollTo
argument_list|(
name|nr
argument_list|)
expr_stmt|;
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|PrevEntryAction
class|class
name|PrevEntryAction
extends|extends
name|AbstractAction
block|{
DECL|method|PrevEntryAction ()
specifier|public
name|PrevEntryAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Previous entry"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|upIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Previous entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|thisRow
init|=
name|panel
operator|.
name|tableModel
operator|.
name|getNumberFromName
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|null
decl_stmt|;
name|int
name|newRow
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|thisRow
operator|-
literal|1
operator|>=
literal|0
condition|)
name|newRow
operator|=
name|thisRow
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|thisRow
operator|!=
name|panel
operator|.
name|database
operator|.
name|getEntryCount
argument_list|()
operator|-
literal|1
condition|)
name|newRow
operator|=
name|panel
operator|.
name|database
operator|.
name|getEntryCount
argument_list|()
operator|-
literal|1
expr_stmt|;
else|else
return|return;
comment|// newRow is still -1, so we can assume the database
comment|// has only one entry.
name|id
operator|=
name|panel
operator|.
name|tableModel
operator|.
name|getNameFromNumber
argument_list|(
name|newRow
argument_list|)
expr_stmt|;
name|switchTo
argument_list|(
name|id
argument_list|)
expr_stmt|;
specifier|final
name|int
name|nr
init|=
name|newRow
decl_stmt|;
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|scrollTo
argument_list|(
name|nr
argument_list|)
expr_stmt|;
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|/**      * Centers the given row, and highlights it.      *      * @param row an<code>int</code> value      */
DECL|method|scrollTo (int row)
specifier|private
name|void
name|scrollTo
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|panel
operator|.
name|entryTable
operator|.
name|scrollToCenter
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|panel
operator|.
name|entryTable
operator|.
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|panel
operator|.
name|entryTable
operator|.
name|setColumnSelectionInterval
argument_list|(
literal|0
argument_list|,
name|panel
operator|.
name|entryTable
operator|.
name|getColumnCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Switches the entry for this editor to the one with the given      * id. If the target entry is of the same type as the current,      * field values are simply updated. Otherwise, a new editor      * created to replace this one.      *      * @param id a<code>String</code> value      */
DECL|method|switchTo (String id)
specifier|private
name|void
name|switchTo
parameter_list|(
name|String
name|id
parameter_list|)
block|{
comment|// Make sure the current edit is stored.
name|Component
name|comp
init|=
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|comp
operator|instanceof
name|FieldPanel
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|FieldPanel
operator|)
name|comp
operator|)
operator|.
name|activeField
operator|!=
literal|null
condition|)
block|{
comment|//Util.pr(((FieldPanel)comp).getText());
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
operator|(
operator|(
name|FieldPanel
operator|)
name|comp
operator|)
operator|.
name|activeField
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|BibtexEntry
name|be
init|=
name|panel
operator|.
name|database
operator|.
name|getEntryById
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// If the entry we are switching to is of the same type as
comment|// this one, we can make the switch more elegant by keeping this
comment|// same dialog, and updating it.
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|be
operator|.
name|getType
argument_list|()
condition|)
block|{
name|switchTo
argument_list|(
name|be
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|showEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the index of the active (visible) panel.      *      * @return an<code>int</code> value      */
DECL|method|getVisiblePanel ()
specifier|public
name|int
name|getVisiblePanel
parameter_list|()
block|{
return|return
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
return|;
block|}
comment|/**      * Sets the panel with the given index visible.      *      * @param i an<code>int</code> value      */
DECL|method|setVisiblePanel (int i)
specifier|public
name|void
name|setVisiblePanel
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
name|tabbed
operator|.
name|getTabCount
argument_list|()
condition|)
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
block|{
while|while
condition|(
name|i
operator|>=
name|tabbed
operator|.
name|getTabCount
argument_list|()
condition|)
name|i
operator|--
expr_stmt|;
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Updates this editor to show the given entry, regardless of      * type correspondence.      *      * @param be a<code>BibtexEntry</code> value      */
DECL|method|switchTo (BibtexEntry be)
specifier|public
name|void
name|switchTo
parameter_list|(
name|BibtexEntry
name|be
parameter_list|)
block|{
name|entry
operator|=
name|be
expr_stmt|;
name|updateAllFields
argument_list|()
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
if|if
condition|(
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|instanceof
name|FieldPanel
condition|)
operator|(
operator|(
name|FieldPanel
operator|)
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|)
operator|.
name|activate
argument_list|()
expr_stmt|;
else|else
operator|(
operator|(
name|JComponent
operator|)
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|)
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
DECL|class|GenerateKeyAction
class|class
name|GenerateKeyAction
extends|extends
name|AbstractAction
block|{
DECL|field|parent
name|JabRefFrame
name|parent
decl_stmt|;
DECL|field|selectedEntry
name|BibtexEntry
name|selectedEntry
decl_stmt|;
DECL|method|GenerateKeyAction (JabRefFrame parentFrame)
specifier|public
name|GenerateKeyAction
parameter_list|(
name|JabRefFrame
name|parentFrame
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Generate BibTeX key"
argument_list|)
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|genKeyIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parentFrame
expr_stmt|;
comment|//            selectedEntry = newEntry ;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Generate BibTeX key"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        putValue(MNEMONIC_KEY, GUIGlobals.showGenKeyCode);
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// 1. get Bitexentry for selected index (already have)
comment|// 2. run the LabelMaker by it
try|try
block|{
comment|// this updates the table automatically, on close, but not within the tab
name|Object
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|GUIGlobals
operator|.
name|KEY_FIELD
argument_list|)
decl_stmt|;
comment|//entry = frame.labelMaker.applyRule(entry, panel.database) ;
name|entry
operator|=
name|LabelPatternUtil
operator|.
name|makeLabel
argument_list|(
name|prefs
operator|.
name|getKeyPattern
argument_list|()
argument_list|,
name|panel
operator|.
name|database
argument_list|,
name|entry
argument_list|)
expr_stmt|;
comment|// Store undo information:
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableKeyChange
argument_list|(
name|panel
operator|.
name|database
argument_list|,
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|oldValue
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getField
argument_list|(
name|GUIGlobals
operator|.
name|KEY_FIELD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// here we update the field
name|String
name|bibtexKeyData
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|KEY_FIELD
argument_list|)
decl_stmt|;
comment|// set the field named for "bibtexkey"
name|setField
argument_list|(
name|Globals
operator|.
name|KEY_FIELD
argument_list|,
name|bibtexKeyData
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|panel
operator|.
name|refreshTable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error setting key: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|undoAction
name|UndoAction
name|undoAction
init|=
operator|new
name|UndoAction
argument_list|()
decl_stmt|;
DECL|class|UndoAction
class|class
name|UndoAction
extends|extends
name|AbstractAction
block|{
DECL|method|UndoAction ()
specifier|public
name|UndoAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Undo"
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|undoIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
literal|"Undo"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|panel
operator|.
name|runCommand
argument_list|(
literal|"undo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{}
block|}
block|}
DECL|field|redoAction
name|RedoAction
name|redoAction
init|=
operator|new
name|RedoAction
argument_list|()
decl_stmt|;
DECL|class|RedoAction
class|class
name|RedoAction
extends|extends
name|AbstractAction
block|{
DECL|method|RedoAction ()
specifier|public
name|RedoAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Undo"
argument_list|,
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|redoIconFile
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
literal|"Redo"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|panel
operator|.
name|runCommand
argument_list|(
literal|"redo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{}
block|}
block|}
DECL|class|SaveDatabaseAction
class|class
name|SaveDatabaseAction
extends|extends
name|AbstractAction
block|{
DECL|method|SaveDatabaseAction ()
specifier|public
name|SaveDatabaseAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Save database"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|Object
name|comp
init|=
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|comp
operator|instanceof
name|FieldPanel
condition|)
block|{
comment|// Normal panel.
name|FieldPanel
name|fp
init|=
operator|(
name|FieldPanel
operator|)
name|comp
decl_stmt|;
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|fp
operator|.
name|activeField
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Source panel.
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|comp
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|panel
operator|.
name|runCommand
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{}
block|}
block|}
DECL|method|setField (String fieldName, String newFieldData)
specifier|public
name|boolean
name|setField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|newFieldData
parameter_list|)
block|{
comment|// iterate through all tabs and fields within those tabs until we get
comment|// the appropriate field name.
comment|// Thanks to reflection, this shouldn't be too bad
comment|// search each panel individually
try|try
block|{
if|if
condition|(
name|setFieldInPanel
argument_list|(
name|reqPanel
argument_list|,
name|fieldName
argument_list|,
name|newFieldData
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|setFieldInPanel
argument_list|(
name|optPanel
argument_list|,
name|fieldName
argument_list|,
name|newFieldData
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|setFieldInPanel
argument_list|(
name|genPanel
argument_list|,
name|fieldName
argument_list|,
name|newFieldData
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"caught in setField: "
operator|+
name|cce
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|setFieldInPanel (FieldPanel pan, String fieldName, String newFieldData)
specifier|private
name|boolean
name|setFieldInPanel
parameter_list|(
name|FieldPanel
name|pan
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|newFieldData
parameter_list|)
throws|throws
name|ClassCastException
block|{
name|Vector
name|fields
init|=
name|pan
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|FieldEditor
operator|)
name|fields
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|FieldEditor
name|ed
init|=
operator|(
operator|(
name|FieldEditor
operator|)
name|fields
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
name|ed
operator|.
name|setText
argument_list|(
name|newFieldData
argument_list|)
expr_stmt|;
name|ed
operator|.
name|setLabelColor
argument_list|(
operator|(
operator|(
name|newFieldData
operator|==
literal|null
operator|)
operator|||
name|newFieldData
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|?
name|GUIGlobals
operator|.
name|nullFieldColor
else|:
name|GUIGlobals
operator|.
name|validFieldColor
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
comment|// Nothing found.
block|}
DECL|method|updateAllFields ()
specifier|private
name|void
name|updateAllFields
parameter_list|()
block|{
name|FieldPanel
index|[]
name|panels
init|=
operator|new
name|FieldPanel
index|[]
block|{
name|reqPanel
block|,
name|optPanel
block|,
name|genPanel
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|panels
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Vector
name|fields
init|=
name|panels
index|[
name|i
index|]
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|FieldEditor
name|ed
init|=
operator|(
name|FieldEditor
operator|)
name|fields
operator|.
name|elementAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Object
name|content
init|=
name|entry
operator|.
name|getField
argument_list|(
name|ed
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
name|ed
operator|.
name|setText
argument_list|(
name|content
operator|==
literal|null
condition|?
literal|""
else|:
name|content
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|.
name|setLabelColor
argument_list|(
name|content
operator|==
literal|null
condition|?
name|GUIGlobals
operator|.
name|nullFieldColor
else|:
name|GUIGlobals
operator|.
name|validFieldColor
argument_list|)
expr_stmt|;
comment|//if (ed.getFieldName().equals("year"))
comment|//    Util.pr(content.toString());
block|}
block|}
block|}
comment|// Update the JTextArea when a field has changed.
DECL|method|vetoableChange (PropertyChangeEvent e)
specifier|public
name|void
name|vetoableChange
parameter_list|(
name|PropertyChangeEvent
name|e
parameter_list|)
block|{
name|setField
argument_list|(
name|e
operator|.
name|getPropertyName
argument_list|()
argument_list|,
call|(
name|String
call|)
argument_list|(
name|e
operator|.
name|getNewValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Util.pr(e.getPropertyName());
block|}
DECL|class|ExternalViewerListener
class|class
name|ExternalViewerListener
extends|extends
name|MouseAdapter
block|{
DECL|method|mouseClicked (MouseEvent evt)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|evt
parameter_list|)
block|{
if|if
condition|(
name|evt
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|JTextComponent
name|tf
init|=
operator|(
name|JTextComponent
operator|)
name|evt
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|tf
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
return|return;
name|tf
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|String
name|link
init|=
name|tf
operator|.
name|getText
argument_list|()
decl_stmt|;
comment|// get selected ?  String 	getSelectedText()
name|Util
operator|.
name|openExternalViewer
argument_list|(
name|link
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

