begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003  Nathan Dunn   All programs in this directory and  subdirectories are published under the GNU General Public License as  described below.   This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or (at  your option) any later version.   This program is distributed in the hope that it will be useful, but  WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  General Public License for more details.   You should have received a copy of the GNU General Public License  along with this program; if not, write to the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA   Further information about the GNU GPL is available at:  http://www.gnu.org/copyleft/gpl.ja.html   */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_class
DECL|class|SearchRuleSet
specifier|public
class|class
name|SearchRuleSet
implements|implements
name|SearchRule
block|{
DECL|field|ruleSet
specifier|protected
name|Vector
argument_list|<
name|SearchRule
argument_list|>
name|ruleSet
init|=
operator|new
name|Vector
argument_list|<
name|SearchRule
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addRule (SearchRule newRule)
specifier|public
name|void
name|addRule
parameter_list|(
name|SearchRule
name|newRule
parameter_list|)
block|{
name|ruleSet
operator|.
name|add
argument_list|(
name|newRule
argument_list|)
expr_stmt|;
block|}
DECL|method|clearRules ()
specifier|public
name|void
name|clearRules
parameter_list|()
block|{
name|ruleSet
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|applyRule (Map<String, String> searchString, BibtexEntry bibtexEntry)
specifier|public
name|int
name|applyRule
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|searchString
parameter_list|,
name|BibtexEntry
name|bibtexEntry
parameter_list|)
throws|throws
name|PatternSyntaxException
block|{
name|int
name|score
init|=
literal|0
decl_stmt|;
name|Enumeration
argument_list|<
name|SearchRule
argument_list|>
name|e
init|=
name|ruleSet
operator|.
name|elements
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|score
operator|+=
name|e
operator|.
name|nextElement
argument_list|()
operator|.
name|applyRule
argument_list|(
name|searchString
argument_list|,
name|bibtexEntry
argument_list|)
expr_stmt|;
block|}
return|return
name|score
return|;
block|}
block|}
end_class

end_unit

