begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.autocompleter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|autocompleter
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|AuthorList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_comment
comment|/**  * Interpretes the given values as names and stores them in different  * permutations so we can complete by beginning with last name or first name.  *   * @author kahlert, cordes  *   */
end_comment

begin_class
DECL|class|NameFieldAutoCompleter
specifier|public
class|class
name|NameFieldAutoCompleter
extends|extends
name|AbstractAutoCompleter
block|{
DECL|field|_fieldName
specifier|private
name|String
name|_fieldName
decl_stmt|;
DECL|field|prefix
specifier|private
name|String
name|prefix
init|=
literal|""
decl_stmt|;
DECL|field|autoCompFF
DECL|field|autoCompLF
specifier|private
name|boolean
name|autoCompFF
decl_stmt|,
name|autoCompLF
decl_stmt|;
comment|/** 	 * @see AutoCompleterFactory 	 */
DECL|method|NameFieldAutoCompleter (String fieldName)
specifier|protected
name|NameFieldAutoCompleter
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoCompFF"
argument_list|)
condition|)
block|{
name|autoCompFF
operator|=
literal|true
expr_stmt|;
name|autoCompLF
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoCompLF"
argument_list|)
condition|)
block|{
name|autoCompFF
operator|=
literal|false
expr_stmt|;
name|autoCompLF
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|autoCompFF
operator|=
literal|true
expr_stmt|;
name|autoCompLF
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|isSingleUnitField ()
specifier|public
name|boolean
name|isSingleUnitField
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|addBibtexEntry (String fieldValue, BibtexEntry entry)
specifier|public
name|void
name|addBibtexEntry
parameter_list|(
name|String
name|fieldValue
parameter_list|,
name|BibtexEntry
name|entry
parameter_list|)
block|{
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
DECL|method|addBibtexEntry (BibtexEntry entry)
specifier|public
name|void
name|addBibtexEntry
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|String
name|fieldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|_fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldValue
operator|!=
literal|null
condition|)
block|{
name|AuthorList
name|authorList
init|=
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|fieldValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|authorList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|AuthorList
operator|.
name|Author
name|author
init|=
name|authorList
operator|.
name|getAuthor
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|autoCompLF
condition|)
block|{
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getLastFirst
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getLastFirst
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|autoCompFF
condition|)
block|{
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getFirstLast
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getFirstLast
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|complete (String str)
specifier|public
name|String
index|[]
name|complete
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|int
name|index
init|=
name|str
operator|.
name|lastIndexOf
argument_list|(
literal|" and "
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|prefix
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
operator|+
literal|5
argument_list|)
expr_stmt|;
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
name|prefix
operator|=
literal|""
expr_stmt|;
name|String
index|[]
name|res
init|=
name|super
operator|.
name|complete
argument_list|(
name|str
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
annotation|@
name|Override
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
block|}
end_class

end_unit

