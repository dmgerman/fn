begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2012 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.autocompleter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|autocompleter
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|AuthorList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_comment
comment|/**  * Interprets the given values as names and stores them in different  * permutations so we can complete by beginning with last name or first name.  *   * @author kahlert, cordes  *   */
end_comment

begin_class
DECL|class|NameFieldAutoCompleter
specifier|public
class|class
name|NameFieldAutoCompleter
extends|extends
name|AbstractAutoCompleter
block|{
DECL|field|fieldNames
specifier|private
name|String
index|[]
name|fieldNames
decl_stmt|;
DECL|field|lastNameOnlyAndSeparationBySpace
specifier|private
name|boolean
name|lastNameOnlyAndSeparationBySpace
decl_stmt|;
comment|// true if only last names should be completed and there is NO separation by " and ", but by " "
DECL|field|prefix
specifier|private
name|String
name|prefix
init|=
literal|""
decl_stmt|;
DECL|field|autoCompFF
DECL|field|autoCompLF
DECL|field|autoCompFullFirstOnly
DECL|field|autoCompShortFirstOnly
specifier|private
name|boolean
name|autoCompFF
decl_stmt|,
name|autoCompLF
decl_stmt|,
name|autoCompFullFirstOnly
decl_stmt|,
name|autoCompShortFirstOnly
decl_stmt|;
comment|/** 	 * @see AutoCompleterFactory 	 */
DECL|method|NameFieldAutoCompleter (String fieldName)
specifier|protected
name|NameFieldAutoCompleter
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|String
index|[]
block|{
name|fieldName
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|NameFieldAutoCompleter (String[] fieldNames, boolean lastNameOnlyAndSeparationBySpace)
specifier|public
name|NameFieldAutoCompleter
parameter_list|(
name|String
index|[]
name|fieldNames
parameter_list|,
name|boolean
name|lastNameOnlyAndSeparationBySpace
parameter_list|)
block|{
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
name|this
operator|.
name|lastNameOnlyAndSeparationBySpace
operator|=
name|lastNameOnlyAndSeparationBySpace
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoCompFF"
argument_list|)
condition|)
block|{
name|autoCompFF
operator|=
literal|true
expr_stmt|;
name|autoCompLF
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoCompLF"
argument_list|)
condition|)
block|{
name|autoCompFF
operator|=
literal|false
expr_stmt|;
name|autoCompLF
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|autoCompFF
operator|=
literal|true
expr_stmt|;
name|autoCompLF
operator|=
literal|true
expr_stmt|;
block|}
name|autoCompShortFirstOnly
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOCOMPLETE_FIRSTNAME_MODE
argument_list|)
operator|.
name|equals
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOCOMPLETE_FIRSTNAME_MODE_ONLY_ABBR
argument_list|)
expr_stmt|;
name|autoCompFullFirstOnly
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOCOMPLETE_FIRSTNAME_MODE
argument_list|)
operator|.
name|equals
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOCOMPLETE_FIRSTNAME_MODE_ONLY_FULL
argument_list|)
expr_stmt|;
block|}
DECL|method|isSingleUnitField ()
specifier|public
name|boolean
name|isSingleUnitField
parameter_list|()
block|{
comment|// quick hack
comment|// when used at entry fields (!this.lastNameOnlyAndSeparationBySpace), this is a single unit field
comment|// when used at the search form (this.lastNameOnlyAndSeparationBySpace), this is NOT a single unit field
comment|// reason: search keywords are separated by space.
comment|//    This is OK for last names without prefix. "Lastname" works perfectly.
comment|//    querying for "van der Lastname" can be interpreted as
comment|//      a) "van" "der" "Lastname"
comment|//      b) "van der Lastname" (autocompletion lastname)
return|return
operator|!
name|this
operator|.
name|lastNameOnlyAndSeparationBySpace
return|;
block|}
DECL|method|addBibtexEntry (BibtexEntry entry)
specifier|public
name|void
name|addBibtexEntry
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fieldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldValue
operator|!=
literal|null
condition|)
block|{
name|AuthorList
name|authorList
init|=
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|fieldValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|authorList
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|AuthorList
operator|.
name|Author
name|author
init|=
name|authorList
operator|.
name|getAuthor
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastNameOnlyAndSeparationBySpace
condition|)
block|{
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getLastOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|autoCompLF
condition|)
block|{
if|if
condition|(
name|autoCompShortFirstOnly
condition|)
block|{
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getLastFirst
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|autoCompFullFirstOnly
condition|)
block|{
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getLastFirst
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// JabRefPreferences.AUTOCOMPLETE_FIRSTNAME_MODE_BOTH
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getLastFirst
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getLastFirst
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|autoCompFF
condition|)
block|{
if|if
condition|(
name|autoCompShortFirstOnly
condition|)
block|{
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getFirstLast
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|autoCompFullFirstOnly
condition|)
block|{
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getFirstLast
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// JabRefPreferences.AUTOCOMPLETE_FIRSTNAME_MODE_BOTH
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getFirstLast
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|addWordToIndex
argument_list|(
name|author
operator|.
name|getFirstLast
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
comment|/** 	 * SIDE EFFECT: sets class variable prefix 	 * Delimiter: " and " 	 *  	 * @return String without prefix 	 */
DECL|method|determinePrefixAndReturnRemainder_AND (String str)
specifier|private
name|String
name|determinePrefixAndReturnRemainder_AND
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|int
name|index
init|=
name|str
operator|.
name|toLowerCase
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|" and "
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|prefix
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
operator|+
literal|5
argument_list|)
expr_stmt|;
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
comment|/** 	 * SIDE EFFECT: sets class variable prefix 	 * Delimiter: " " 	 *  	 * @return String without prefix 	 */
DECL|method|determinePrefixAndReturnRemainder_SPACE (String str)
specifier|private
name|String
name|determinePrefixAndReturnRemainder_SPACE
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|int
name|index
init|=
name|str
operator|.
name|lastIndexOf
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|prefix
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
DECL|method|complete (String str)
specifier|public
name|String
index|[]
name|complete
parameter_list|(
name|String
name|str
parameter_list|)
block|{
comment|// Normally, one would implement that using
comment|// class inheritance. But this seemed to overengineered
if|if
condition|(
name|this
operator|.
name|lastNameOnlyAndSeparationBySpace
condition|)
block|{
name|str
operator|=
name|determinePrefixAndReturnRemainder_SPACE
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
name|determinePrefixAndReturnRemainder_AND
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|res
init|=
name|super
operator|.
name|complete
argument_list|(
name|str
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|fieldNames
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
block|}
end_class

end_unit

