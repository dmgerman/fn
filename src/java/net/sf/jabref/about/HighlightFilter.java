begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * @(#)HighlightFilter.java	1.6 98/03/18  *  * Copyright (c) 1995-1997 Sun Microsystems, Inc. All Rights Reserved.  *  * Sun grants you ("Licensee") a non-exclusive, royalty free, license to use,  * modify and redistribute this software in source and binary code form,  * provided that i) this copyright notice and license appear on all copies of  * the software; and ii) Licensee does not utilize the software in a manner  * which is disparaging to Sun.  *  * This software is provided "AS IS," without a warranty of any kind. ALL  * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY  * IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR  * NON-INFRINGEMENT, ARE HEREBY EXCLUDED. SUN AND ITS LICENSORS SHALL NOT BE  * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING  * OR DISTRIBUTING THE SOFTWARE OR ITS DERIVATIVES. IN NO EVENT WILL SUN OR ITS  * LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT,  * INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER  * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF THE USE OF  * OR INABILITY TO USE SOFTWARE, EVEN IF SUN HAS BEEN ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGES.  *  * This software is not designed or intended for use in on-line control of  * aircraft, air traffic, aircraft navigation or aircraft communications; or in  * the design, construction, operation or maintenance of any nuclear  * facility. Licensee represents and warrants that it will not use or  * redistribute the Software for such purposes.  */
end_comment

begin_package
DECL|package|net.sf.jabref.about
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|about
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * An image filter to highlight an image by brightening or darkening  * the pixels in the images.  *  * @author 	Jim Graham  * @version 	1.6, 03/18/98  */
end_comment

begin_class
DECL|class|HighlightFilter
class|class
name|HighlightFilter
extends|extends
name|RGBImageFilter
block|{
DECL|field|brighter
name|boolean
name|brighter
decl_stmt|;
DECL|field|percent
name|int
name|percent
decl_stmt|;
DECL|field|middleX
specifier|private
name|int
name|middleX
decl_stmt|;
DECL|field|middleY
specifier|private
name|int
name|middleY
decl_stmt|;
DECL|field|dimX
specifier|private
name|int
name|dimX
decl_stmt|;
DECL|field|dimY
specifier|private
name|int
name|dimY
decl_stmt|;
DECL|field|distance
specifier|private
name|int
name|distance
init|=
literal|0
decl_stmt|;
DECL|field|startSize
specifier|private
name|int
name|startSize
init|=
literal|10
decl_stmt|;
DECL|field|white
specifier|private
name|int
name|white
init|=
name|Color
operator|.
name|white
operator|.
name|getRGB
argument_list|()
decl_stmt|;
DECL|field|black
specifier|private
name|int
name|black
init|=
name|Color
operator|.
name|black
operator|.
name|getRGB
argument_list|()
decl_stmt|;
DECL|method|HighlightFilter ( boolean b, int p )
specifier|public
name|HighlightFilter
parameter_list|(
name|boolean
name|b
parameter_list|,
name|int
name|p
parameter_list|)
block|{
name|brighter
operator|=
name|b
expr_stmt|;
name|percent
operator|=
name|p
expr_stmt|;
name|canFilterIndexColorModel
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|setMiddle (int x, int y)
specifier|public
name|void
name|setMiddle
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|middleX
operator|=
name|x
operator|/
literal|2
expr_stmt|;
name|middleY
operator|=
name|y
operator|/
literal|2
expr_stmt|;
name|dimX
operator|=
name|x
expr_stmt|;
name|dimY
operator|=
name|y
expr_stmt|;
name|distance
operator|=
name|startSize
expr_stmt|;
block|}
DECL|method|nextStep ()
specifier|public
specifier|final
name|void
name|nextStep
parameter_list|()
block|{
name|distance
operator|+=
name|distance
operator|/
literal|1.5
operator|+
literal|1
expr_stmt|;
block|}
DECL|method|isReady ()
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
name|boolean
name|back
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|dimX
operator|<
name|distance
operator|)
operator|&&
operator|(
name|dimY
operator|<
name|distance
operator|)
condition|)
name|back
operator|=
literal|true
expr_stmt|;
return|return
name|back
return|;
block|}
DECL|method|filterRGB ( int x, int y, int rgb )
specifier|public
specifier|final
name|int
name|filterRGB
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|rgb
parameter_list|)
block|{
name|int
name|back
init|=
name|rgb
decl_stmt|;
name|int
name|x1
init|=
name|x
operator|-
name|middleX
decl_stmt|;
name|int
name|y1
init|=
name|y
operator|-
name|middleY
decl_stmt|;
name|int
name|dist
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
literal|2
operator|*
name|x1
operator|*
name|y1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|dist
operator|<
name|distance
operator|)
operator|&&
operator|(
name|x
operator|!=
name|middleX
operator|)
operator|&&
operator|(
name|y
operator|!=
name|middleY
operator|)
operator|)
operator|||
operator|(
operator|(
operator|(
name|x
operator|==
name|middleX
operator|)
operator|||
operator|(
name|y
operator|==
name|middleY
operator|)
operator|)
operator|&&
operator|(
name|distance
operator|>
literal|30
operator|)
operator|)
condition|)
block|{
name|back
operator|=
name|white
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|dist
operator|==
name|distance
operator|)
operator|&&
operator|(
name|dist
operator|>
literal|20
operator|)
condition|)
comment|// Black border
block|{
name|back
operator|=
name|black
expr_stmt|;
block|}
return|return
name|back
return|;
block|}
block|}
end_class

end_unit

