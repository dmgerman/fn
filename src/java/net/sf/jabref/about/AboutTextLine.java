begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  animated about dialog  Copyright (C) 2005 Raik Nagel<kiar@users.sourceforge.net> All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * Redistributions of source code must retain the above copyright notice,   this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice,   this list of conditions and the following disclaimer in the documentation   and/or other materials provided with the distribution. * Neither the name of the author nor the names of its contributors may be   used to endorse or promote products derived from this software without   specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
end_comment

begin_comment
comment|// created by : r.nagel 05.05.2005
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// function : a animated line for about dialog
end_comment

begin_comment
comment|//
end_comment

begin_package
DECL|package|net.sf.jabref.about
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|about
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_comment
comment|// a single About Line
end_comment

begin_class
DECL|class|AboutTextLine
specifier|public
class|class
name|AboutTextLine
block|{
DECL|field|text
specifier|private
name|String
name|text
decl_stmt|;
DECL|field|direction
specifier|private
name|double
name|direction
index|[]
decl_stmt|;
DECL|field|pos
specifier|private
name|double
name|pos
index|[]
decl_stmt|;
DECL|field|speed
specifier|private
name|double
name|speed
decl_stmt|;
DECL|field|accel
specifier|private
name|double
name|accel
decl_stmt|;
DECL|field|tag
specifier|private
name|int
name|tag
decl_stmt|;
comment|// additional user information
DECL|field|font
specifier|private
name|Font
name|font
decl_stmt|;
DECL|field|color
specifier|private
name|Color
name|color
decl_stmt|;
DECL|field|visible
specifier|private
name|boolean
name|visible
decl_stmt|;
DECL|method|AboutTextLine (String txt)
specifier|public
name|AboutTextLine
parameter_list|(
name|String
name|txt
parameter_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|*
name|this
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
name|text
operator|=
name|txt
expr_stmt|;
name|pos
operator|=
operator|new
name|double
index|[
literal|2
index|]
expr_stmt|;
name|pos
index|[
literal|0
index|]
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
operator|*
literal|100.0
expr_stmt|;
name|pos
index|[
literal|1
index|]
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
operator|*
literal|100.0
expr_stmt|;
name|direction
operator|=
operator|new
name|double
index|[
literal|2
index|]
expr_stmt|;
name|direction
index|[
literal|0
index|]
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|direction
index|[
literal|1
index|]
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|accel
operator|=
literal|0.0
expr_stmt|;
name|speed
operator|=
literal|1.0
expr_stmt|;
name|tag
operator|=
literal|0
expr_stmt|;
name|color
operator|=
name|Color
operator|.
name|black
expr_stmt|;
name|visible
operator|=
literal|true
expr_stmt|;
name|font
operator|=
name|UIManager
operator|.
name|getFont
argument_list|(
literal|"Label.font"
argument_list|)
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------
DECL|method|performTimeStep (double time)
specifier|public
name|void
name|performTimeStep
parameter_list|(
name|double
name|time
parameter_list|)
block|{
name|accel
operator|=
name|accel
operator|*
name|time
expr_stmt|;
name|speed
operator|+=
name|accel
expr_stmt|;
name|double
name|move
init|=
name|speed
operator|*
name|time
decl_stmt|;
comment|//
name|pos
index|[
literal|0
index|]
operator|+=
operator|(
name|move
operator|*
name|direction
index|[
literal|0
index|]
operator|)
expr_stmt|;
name|pos
index|[
literal|1
index|]
operator|+=
operator|(
name|move
operator|*
name|direction
index|[
literal|1
index|]
operator|)
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|text
operator|+
literal|"<"
operator|+
name|pos
index|[
literal|0
index|]
operator|+
literal|", "
operator|+
name|pos
index|[
literal|1
index|]
operator|+
literal|">"
operator|+
literal|"<"
operator|+
name|direction
index|[
literal|0
index|]
operator|+
literal|", "
operator|+
name|direction
index|[
literal|1
index|]
operator|+
literal|">"
operator|)
return|;
block|}
comment|// ------------------------------------------------------------------------
DECL|method|getPosX ()
specifier|public
name|int
name|getPosX
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|pos
index|[
literal|0
index|]
return|;
block|}
DECL|method|getPosY ()
specifier|public
name|int
name|getPosY
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|pos
index|[
literal|1
index|]
return|;
block|}
DECL|method|getPos ()
specifier|public
name|double
index|[]
name|getPos
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
DECL|method|setPos (double posX, double posY)
specifier|public
name|void
name|setPos
parameter_list|(
name|double
name|posX
parameter_list|,
name|double
name|posY
parameter_list|)
block|{
name|this
operator|.
name|pos
index|[
literal|0
index|]
operator|=
name|posX
expr_stmt|;
name|this
operator|.
name|pos
index|[
literal|1
index|]
operator|=
name|posY
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
DECL|method|setText (String pText)
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|pText
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|pText
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------
DECL|method|getDirection ()
specifier|public
name|double
index|[]
name|getDirection
parameter_list|()
block|{
return|return
name|direction
return|;
block|}
DECL|method|setDirection (double dirX, double dirY)
specifier|public
name|void
name|setDirection
parameter_list|(
name|double
name|dirX
parameter_list|,
name|double
name|dirY
parameter_list|)
block|{
name|this
operator|.
name|direction
index|[
literal|0
index|]
operator|=
name|dirX
expr_stmt|;
name|this
operator|.
name|direction
index|[
literal|1
index|]
operator|=
name|dirY
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------
DECL|method|getSpeed ()
specifier|public
name|double
name|getSpeed
parameter_list|()
block|{
return|return
name|speed
return|;
block|}
DECL|method|setSpeed (double pSpeed)
specifier|public
name|void
name|setSpeed
parameter_list|(
name|double
name|pSpeed
parameter_list|)
block|{
name|this
operator|.
name|speed
operator|=
name|pSpeed
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------
DECL|method|getAccel ()
specifier|public
name|double
name|getAccel
parameter_list|()
block|{
return|return
name|accel
return|;
block|}
DECL|method|setAccel (double pAccel)
specifier|public
name|void
name|setAccel
parameter_list|(
name|double
name|pAccel
parameter_list|)
block|{
name|this
operator|.
name|accel
operator|=
name|pAccel
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------
DECL|method|getTag ()
specifier|public
name|int
name|getTag
parameter_list|()
block|{
return|return
name|tag
return|;
block|}
DECL|method|setTag (int pTag)
specifier|public
name|void
name|setTag
parameter_list|(
name|int
name|pTag
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|pTag
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------
DECL|method|getFont ()
specifier|public
name|Font
name|getFont
parameter_list|()
block|{
return|return
name|font
return|;
block|}
DECL|method|setFont (Font pFont)
specifier|public
name|void
name|setFont
parameter_list|(
name|Font
name|pFont
parameter_list|)
block|{
name|this
operator|.
name|font
operator|=
name|pFont
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------
DECL|method|getColor ()
specifier|public
name|Color
name|getColor
parameter_list|()
block|{
return|return
name|color
return|;
block|}
DECL|method|setColor (Color pColor)
specifier|public
name|void
name|setColor
parameter_list|(
name|Color
name|pColor
parameter_list|)
block|{
name|this
operator|.
name|color
operator|=
name|pColor
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------
DECL|method|getVisible ()
specifier|public
name|boolean
name|getVisible
parameter_list|()
block|{
return|return
name|visible
return|;
block|}
DECL|method|setVisible (boolean pVisible)
specifier|public
name|void
name|setVisible
parameter_list|(
name|boolean
name|pVisible
parameter_list|)
block|{
name|this
operator|.
name|visible
operator|=
name|pVisible
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------
comment|// ------------------------------------------------------------------------
block|}
end_class

end_unit

