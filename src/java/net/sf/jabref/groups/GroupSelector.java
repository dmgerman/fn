begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003 Morten O. Alver, Nizar N. Batada   All programs in this directory and  subdirectories are published under the GNU General Public License as  described below.   This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or (at  your option) any later version.   This program is distributed in the hope that it will be useful, but  WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  General Public License for more details.   You should have received a copy of the GNU General Public License  along with this program; if not, write to the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA   Further information about the GNU GPL is available at:  http://www.gnu.org/copyleft/gpl.ja.html   */
end_comment

begin_package
DECL|package|net.sf.jabref.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_class
DECL|class|GroupSelector
specifier|public
class|class
name|GroupSelector
extends|extends
name|SidePaneComponent
implements|implements
name|TreeSelectionListener
implements|,
name|ActionListener
implements|,
name|ErrorMessageDisplay
block|{
DECL|field|newButton
name|JButton
name|newButton
init|=
operator|new
name|JButton
argument_list|(
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|newSmallIconFile
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|helpButton
name|helpButton
init|=
operator|new
name|JButton
argument_list|(
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|helpSmallIconFile
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|refresh
name|refresh
init|=
operator|new
name|JButton
argument_list|(
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|refreshSmallIconFile
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|autoGroup
name|autoGroup
init|=
operator|new
name|JButton
argument_list|(
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|autoGroupIcon
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|openset
name|openset
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Settings"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|bgColor
name|Color
name|bgColor
init|=
name|Color
operator|.
name|white
decl_stmt|;
DECL|field|groupsTree
name|GroupsTree
name|groupsTree
decl_stmt|;
DECL|field|groupsTreeModel
name|DefaultTreeModel
name|groupsTreeModel
decl_stmt|;
DECL|field|groupsRoot
name|GroupTreeNode
name|groupsRoot
decl_stmt|;
DECL|field|sp
name|JScrollPane
name|sp
decl_stmt|;
DECL|field|gbl
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
DECL|field|frame
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|searchField
name|String
name|searchField
decl_stmt|;
DECL|field|groupsContextMenu
name|JPopupMenu
name|groupsContextMenu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|settings
name|JPopupMenu
name|settings
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|hideNonHits
DECL|field|grayOut
specifier|private
name|JRadioButtonMenuItem
name|hideNonHits
decl_stmt|,
name|grayOut
decl_stmt|;
DECL|field|groupModeUnion
name|JRadioButtonMenuItem
name|groupModeUnion
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Include subgroups"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|groupModeIntersection
name|JRadioButtonMenuItem
name|groupModeIntersection
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Intersection with supergroups"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|groupModeIndependent
name|JRadioButtonMenuItem
name|groupModeIndependent
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Independent"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|andCb
name|JRadioButtonMenuItem
name|andCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Intersection"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|orCb
name|JRadioButtonMenuItem
name|orCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Union"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|floatCb
name|JRadioButtonMenuItem
name|floatCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Float"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|highlCb
name|JRadioButtonMenuItem
name|highlCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Highlight"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|invCb
name|JCheckBoxMenuItem
name|invCb
init|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Inverted"
argument_list|)
argument_list|,
DECL|field|select
literal|false
argument_list|)
decl_stmt|,
name|select
init|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Select matches"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// JMenu
comment|// moreRow = new JMenuItem(Globals.lang("Size of groups interface (rows)"));
comment|// lessRow = new JMenuItem(Globals.lang("Show one less rows"));
DECL|field|groupModeGroup
name|ButtonGroup
name|groupModeGroup
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
DECL|field|bgr
name|ButtonGroup
name|bgr
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
DECL|field|visMode
name|ButtonGroup
name|visMode
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
DECL|field|nonHits
name|ButtonGroup
name|nonHits
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
DECL|field|expand
name|JButton
name|expand
init|=
operator|new
name|JButton
argument_list|(
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|downIconFile
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|reduce
name|reduce
init|=
operator|new
name|JButton
argument_list|(
operator|new
name|ImageIcon
argument_list|(
name|GUIGlobals
operator|.
name|upIconFile
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|manager
name|SidePaneManager
name|manager
decl_stmt|;
comment|/**      * The first element for each group defines which field to use for the      * quicksearch. The next two define the name and regexp for the group.      *       * @param groupData      *            The group meta data in raw format.      */
DECL|method|GroupSelector (JabRefFrame frame, SidePaneManager manager)
specifier|public
name|GroupSelector
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|SidePaneManager
name|manager
parameter_list|)
block|{
name|super
argument_list|(
name|manager
argument_list|,
name|GUIGlobals
operator|.
name|groupsIconFile
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Groups"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupsRoot
operator|=
operator|new
name|GroupTreeNode
argument_list|(
operator|new
name|AllEntriesGroup
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|hideNonHits
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Hide non-hits"
argument_list|)
argument_list|,
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"grayOutNonHits"
argument_list|)
argument_list|)
expr_stmt|;
name|grayOut
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Gray out non-hits"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"grayOutNonHits"
argument_list|)
argument_list|)
expr_stmt|;
name|nonHits
operator|.
name|add
argument_list|(
name|hideNonHits
argument_list|)
expr_stmt|;
name|nonHits
operator|.
name|add
argument_list|(
name|grayOut
argument_list|)
expr_stmt|;
name|floatCb
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"groupFloatSelections"
argument_list|,
name|floatCb
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"groupIntersectSelections"
argument_list|,
name|andCb
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|invCb
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"groupInvertSelections"
argument_list|,
name|invCb
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|select
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"groupSelectMatches"
argument_list|,
name|select
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|grayOut
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"grayOutNonHits"
argument_list|,
name|grayOut
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|groupModeIndependent
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"groupSubgroupIndependent"
argument_list|,
name|groupModeIndependent
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|groupModeIntersection
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"groupSubgroupIntersection"
argument_list|,
name|groupModeIntersection
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"groupFloatSelections"
argument_list|)
condition|)
block|{
name|floatCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|highlCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|highlCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|floatCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"groupIntersectSelections"
argument_list|)
condition|)
block|{
name|andCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|orCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|orCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//defaults.put("groupSubgroupIndependent", Boolean.FALSE);
comment|//defaults.put("groupSubgroupIntersection", Boolean.TRUE);
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"groupSubgroupIndependent"
argument_list|)
condition|)
block|{
name|groupModeIndependent
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|groupModeIntersection
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|groupModeUnion
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupModeIndependent
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"groupSubgroupIntersection"
argument_list|)
condition|)
block|{
name|groupModeIntersection
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|groupModeUnion
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupModeIntersection
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|groupModeUnion
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|invCb
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"groupInvertSelections"
argument_list|)
argument_list|)
expr_stmt|;
name|select
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"groupSelectMatches"
argument_list|)
argument_list|)
expr_stmt|;
name|openset
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|groupModeUnion
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|groupModeIntersection
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|groupModeIndependent
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|andCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|orCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|invCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|highlCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|floatCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|select
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|grayOut
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|hideNonHits
argument_list|)
expr_stmt|;
comment|// settings.add(moreRow);
comment|// settings.add(lessRow);
name|openset
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|isVisible
argument_list|()
condition|)
block|{
comment|// System.out.println("oee");
comment|// settings.setVisible(false);
block|}
else|else
block|{
name|JButton
name|src
init|=
operator|(
name|JButton
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|settings
operator|.
name|show
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|openset
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|expand
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|i
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"groupsVisibleRows"
argument_list|)
operator|+
literal|1
decl_stmt|;
name|groupsTree
operator|.
name|setVisibleRowCount
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|groupsTree
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|GroupSelector
operator|.
name|this
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|GroupSelector
operator|.
name|this
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
literal|"groupsVisibleRows"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|i
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"groupsVisibleRows"
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|1
condition|)
name|i
operator|=
literal|1
expr_stmt|;
name|groupsTree
operator|.
name|setVisibleRowCount
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|groupsTree
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|GroupSelector
operator|.
name|this
operator|.
name|revalidate
argument_list|()
expr_stmt|;
comment|// _panel.sidePaneManager.revalidate();
name|GroupSelector
operator|.
name|this
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
literal|"groupsVisibleRows"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Dimension
name|butDim
init|=
operator|new
name|Dimension
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|Dimension
name|butDim2
init|=
operator|new
name|Dimension
argument_list|(
literal|40
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|newButton
operator|.
name|setPreferredSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|newButton
operator|.
name|setMinimumSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|refresh
operator|.
name|setPreferredSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|refresh
operator|.
name|setMinimumSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|helpButton
operator|.
name|setPreferredSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|helpButton
operator|.
name|setMinimumSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|autoGroup
operator|.
name|setPreferredSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|autoGroup
operator|.
name|setMinimumSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|openset
operator|.
name|setPreferredSize
argument_list|(
name|butDim2
argument_list|)
expr_stmt|;
name|openset
operator|.
name|setMinimumSize
argument_list|(
name|butDim2
argument_list|)
expr_stmt|;
name|expand
operator|.
name|setPreferredSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|expand
operator|.
name|setMinimumSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|setPreferredSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|setMinimumSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|Insets
name|butIns
init|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|helpButton
operator|.
name|setMargin
argument_list|(
name|butIns
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|setMargin
argument_list|(
name|butIns
argument_list|)
expr_stmt|;
name|expand
operator|.
name|setMargin
argument_list|(
name|butIns
argument_list|)
expr_stmt|;
name|openset
operator|.
name|setMargin
argument_list|(
name|butIns
argument_list|)
expr_stmt|;
name|newButton
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|refresh
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|orCb
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|invCb
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|autoGroup
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|newButton
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"New group"
argument_list|)
argument_list|)
expr_stmt|;
name|refresh
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Refresh view"
argument_list|)
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Display only entries belonging to all selected"
operator|+
literal|" groups."
argument_list|)
argument_list|)
expr_stmt|;
name|orCb
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Display all entries belonging to one or more "
operator|+
literal|"of the selected groups."
argument_list|)
argument_list|)
expr_stmt|;
name|autoGroup
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Automatically create groups for database."
argument_list|)
argument_list|)
expr_stmt|;
name|invCb
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show entries *not* in group selection"
argument_list|)
argument_list|)
expr_stmt|;
name|floatCb
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Move entries in group selection to the top"
argument_list|)
argument_list|)
expr_stmt|;
name|highlCb
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Gray out entries not in group selection"
argument_list|)
argument_list|)
expr_stmt|;
name|select
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Select entries in group selection"
argument_list|)
argument_list|)
expr_stmt|;
name|expand
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show one more row"
argument_list|)
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show one less rows"
argument_list|)
argument_list|)
expr_stmt|;
name|groupModeGroup
operator|.
name|add
argument_list|(
name|groupModeUnion
argument_list|)
expr_stmt|;
name|groupModeGroup
operator|.
name|add
argument_list|(
name|groupModeIntersection
argument_list|)
expr_stmt|;
name|groupModeGroup
operator|.
name|add
argument_list|(
name|groupModeIndependent
argument_list|)
expr_stmt|;
name|bgr
operator|.
name|add
argument_list|(
name|andCb
argument_list|)
expr_stmt|;
name|bgr
operator|.
name|add
argument_list|(
name|orCb
argument_list|)
expr_stmt|;
name|visMode
operator|.
name|add
argument_list|(
name|floatCb
argument_list|)
expr_stmt|;
name|visMode
operator|.
name|add
argument_list|(
name|highlCb
argument_list|)
expr_stmt|;
name|JPanel
name|main
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|main
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
comment|/*SidePaneHeader header = new SidePaneHeader("Groups",                 GUIGlobals.groupsIconFile, this);         con.gridwidth = GridBagConstraints.REMAINDER;         gbl.setConstraints(header, con);         main.add(header);*/
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
comment|//con.insets = new Insets(0, 0, 2, 0);
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
comment|//con.insets = new Insets(1, 1, 1, 1);
name|gbl
operator|.
name|setConstraints
argument_list|(
name|newButton
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|newButton
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|refresh
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|refresh
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|autoGroup
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|autoGroup
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|HelpAction
name|helpAction
init|=
operator|new
name|HelpAction
argument_list|(
name|frame
operator|.
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|groupsHelp
argument_list|,
literal|"Help on groups"
argument_list|)
decl_stmt|;
name|helpButton
operator|.
name|addActionListener
argument_list|(
name|helpAction
argument_list|)
expr_stmt|;
name|helpButton
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Help on groups"
argument_list|)
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|helpButton
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|helpButton
argument_list|)
expr_stmt|;
comment|// header.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.red));
comment|// helpButton.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.red));
name|groupsTree
operator|=
operator|new
name|GroupsTree
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|addTreeSelectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|setModel
argument_list|(
name|groupsTreeModel
operator|=
operator|new
name|DefaultTreeModel
argument_list|(
name|groupsRoot
argument_list|)
argument_list|)
expr_stmt|;
name|sp
operator|=
operator|new
name|JScrollPane
argument_list|(
name|groupsTree
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_AS_NEEDED
argument_list|)
expr_stmt|;
name|revalidateGroups
argument_list|()
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|sp
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|JPanel
name|pan
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|GridBagLayout
name|gb
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|pan
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|pan
operator|.
name|setLayout
argument_list|(
name|gb
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|gb
operator|.
name|setConstraints
argument_list|(
name|openset
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|pan
operator|.
name|add
argument_list|(
name|openset
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|gb
operator|.
name|setConstraints
argument_list|(
name|expand
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|pan
operator|.
name|add
argument_list|(
name|expand
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gb
operator|.
name|setConstraints
argument_list|(
name|reduce
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|pan
operator|.
name|add
argument_list|(
name|reduce
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|main
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|main
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|definePopup
argument_list|()
expr_stmt|;
block|}
DECL|method|definePopup ()
specifier|private
name|void
name|definePopup
parameter_list|()
block|{
comment|// These key bindings are just to have the shortcuts displayed
comment|// in the popup menu. The actual keystroke processing is in
comment|// BasePanel (entryTable.addKeyListener(...)).
name|moveNodeUpAction
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_UP
argument_list|,
name|KeyEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|)
expr_stmt|;
name|moveNodeDownAction
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_DOWN
argument_list|,
name|KeyEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|)
expr_stmt|;
name|moveNodeLeftAction
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_LEFT
argument_list|,
name|KeyEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|)
expr_stmt|;
name|moveNodeRightAction
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_RIGHT
argument_list|,
name|KeyEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|addGroupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|addSubgroupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|editGroupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|removeGroupAndSubgroupsAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|removeGroupKeepSubgroupsAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|moveSubmenu
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|expandSubtreeAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|collapseSubtreeAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|showOverlappingGroupsAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|clearHighlightAction
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|add
argument_list|(
name|moveNodeUpAction
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|add
argument_list|(
name|moveNodeDownAction
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|add
argument_list|(
name|moveNodeLeftAction
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|add
argument_list|(
name|moveNodeRightAction
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
name|showPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
name|showPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|TreePath
name|path
init|=
name|groupsTree
operator|.
name|getPathForLocation
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|x
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return;
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
comment|// the root node is "AllEntries" and cannot be edited
if|if
condition|(
name|node
operator|.
name|isRoot
argument_list|()
condition|)
return|return;
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
operator|&&
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON1
condition|)
block|{
comment|// edit
name|editGroupAction
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// dummy event
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|showPopup (MouseEvent e)
specifier|private
name|void
name|showPopup
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
specifier|final
name|TreePath
name|path
init|=
name|groupsTree
operator|.
name|getPathForLocation
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|x
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|y
argument_list|)
decl_stmt|;
name|addGroupAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|addSubgroupAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|editGroupAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|removeGroupAndSubgroupsAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|removeGroupKeepSubgroupsAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|expandSubtreeAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|collapseSubtreeAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|showOverlappingGroupsAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
comment|// some path dependent enabling/disabling
name|groupsTree
operator|.
name|setSelectionPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|AbstractGroup
name|group
init|=
name|node
operator|.
name|getGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|instanceof
name|AllEntriesGroup
condition|)
block|{
name|editGroupAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addGroupAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|removeGroupAndSubgroupsAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|removeGroupKeepSubgroupsAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editGroupAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addGroupAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|removeGroupAndSubgroupsAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|removeGroupKeepSubgroupsAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|moveNodeUpAction
operator|.
name|setEnabled
argument_list|(
name|node
operator|.
name|canMoveUp
argument_list|()
argument_list|)
expr_stmt|;
name|moveNodeDownAction
operator|.
name|setEnabled
argument_list|(
name|node
operator|.
name|canMoveDown
argument_list|()
argument_list|)
expr_stmt|;
name|moveNodeLeftAction
operator|.
name|setEnabled
argument_list|(
name|node
operator|.
name|canMoveLeft
argument_list|()
argument_list|)
expr_stmt|;
name|moveNodeRightAction
operator|.
name|setEnabled
argument_list|(
name|node
operator|.
name|canMoveRight
argument_list|()
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|setEnabled
argument_list|(
name|moveNodeUpAction
operator|.
name|isEnabled
argument_list|()
operator|||
name|moveNodeDownAction
operator|.
name|isEnabled
argument_list|()
operator|||
name|moveNodeLeftAction
operator|.
name|isEnabled
argument_list|()
operator|||
name|moveNodeRightAction
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|groupsContextMenu
operator|.
name|show
argument_list|(
name|groupsTree
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|x
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
DECL|method|valueChanged (TreeSelectionEvent e)
specifier|public
name|void
name|valueChanged
parameter_list|(
name|TreeSelectionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
comment|// sorry, we're closed!
return|return;
comment|// ignore this event
specifier|final
name|TreePath
index|[]
name|selection
init|=
name|groupsTree
operator|.
name|getSelectionPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|selection
operator|==
literal|null
operator|||
name|selection
operator|.
name|length
operator|==
literal|0
operator|||
operator|(
name|selection
operator|.
name|length
operator|==
literal|1
operator|&&
operator|(
operator|(
name|GroupTreeNode
operator|)
name|selection
index|[
literal|0
index|]
operator|.
name|getLastPathComponent
argument_list|()
operator|)
operator|.
name|getGroup
argument_list|()
operator|instanceof
name|AllEntriesGroup
operator|)
condition|)
block|{
name|panel
operator|.
name|stopShowingGroup
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Displaying no groups"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|AndOrSearchRuleSet
name|searchRules
init|=
operator|new
name|AndOrSearchRuleSet
argument_list|(
name|andCb
operator|.
name|isSelected
argument_list|()
argument_list|,
name|invCb
operator|.
name|isSelected
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|groupMode
decl_stmt|;
if|if
condition|(
name|groupModeUnion
operator|.
name|isSelected
argument_list|()
condition|)
name|groupMode
operator|=
name|GroupTreeNode
operator|.
name|GROUP_UNION_CHILDREN
expr_stmt|;
elseif|else
if|if
condition|(
name|groupModeIntersection
operator|.
name|isSelected
argument_list|()
condition|)
name|groupMode
operator|=
name|GroupTreeNode
operator|.
name|GROUP_INTERSECTION_PARENT
expr_stmt|;
else|else
name|groupMode
operator|=
name|GroupTreeNode
operator|.
name|GROUP_ITSELF
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selection
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|searchRules
operator|.
name|addRule
argument_list|(
operator|(
operator|(
name|GroupTreeNode
operator|)
name|selection
index|[
name|i
index|]
operator|.
name|getLastPathComponent
argument_list|()
operator|)
operator|.
name|getSearchRule
argument_list|(
name|groupMode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Hashtable
name|searchOptions
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|searchOptions
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|DatabaseSearch
name|search
init|=
operator|new
name|DatabaseSearch
argument_list|(
name|this
argument_list|,
name|searchOptions
argument_list|,
name|searchRules
argument_list|,
name|panel
argument_list|,
name|Globals
operator|.
name|GROUPSEARCH
argument_list|,
name|floatCb
operator|.
name|isSelected
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"grayOutNonHits"
argument_list|)
argument_list|,
comment|/* true, */
name|select
operator|.
name|isSelected
argument_list|()
argument_list|)
decl_stmt|;
name|search
operator|.
name|start
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Updated group selection"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|/**       * Revalidate the groups tree (e.g. after the data stored in the model has      * been changed) and set the specified selection and expansion state. */
DECL|method|revalidateGroups (TreePath[] selectionPaths, Enumeration expandedNodes)
specifier|public
name|void
name|revalidateGroups
parameter_list|(
name|TreePath
index|[]
name|selectionPaths
parameter_list|,
name|Enumeration
name|expandedNodes
parameter_list|)
block|{
name|groupsTreeModel
operator|.
name|reload
argument_list|()
expr_stmt|;
name|groupsTree
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
if|if
condition|(
name|selectionPaths
operator|!=
literal|null
condition|)
block|{
name|groupsTree
operator|.
name|setSelectionPaths
argument_list|(
name|selectionPaths
argument_list|)
expr_stmt|;
block|}
comment|// tree is completely collapsed here
if|if
condition|(
name|expandedNodes
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|expandedNodes
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|groupsTree
operator|.
name|expandPath
argument_list|(
operator|(
name|TreePath
operator|)
name|expandedNodes
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|groupsTree
operator|.
name|revalidate
argument_list|()
expr_stmt|;
block|}
comment|/**       * Revalidate the groups tree (e.g. after the data stored in the model has      * been changed) and maintain the current selection and expansion state. */
DECL|method|revalidateGroups ()
specifier|public
name|void
name|revalidateGroups
parameter_list|()
block|{
name|revalidateGroups
argument_list|(
name|groupsTree
operator|.
name|getSelectionPaths
argument_list|()
argument_list|,
name|getExpandedPaths
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|refresh
condition|)
block|{
name|valueChanged
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|newButton
condition|)
block|{
name|GroupDialog
name|gd
init|=
operator|new
name|GroupDialog
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|gd
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|gd
operator|.
name|okPressed
argument_list|()
condition|)
block|{
name|AbstractGroup
name|newGroup
init|=
name|gd
operator|.
name|getResultingGroup
argument_list|()
decl_stmt|;
name|GroupTreeNode
name|newNode
init|=
operator|new
name|GroupTreeNode
argument_list|(
name|newGroup
argument_list|)
decl_stmt|;
name|groupsRoot
operator|.
name|add
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|revalidateGroups
argument_list|()
expr_stmt|;
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|GroupSelector
operator|.
name|this
argument_list|,
name|groupsRoot
argument_list|,
name|newNode
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|ADD_NODE
argument_list|)
decl_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Created_group_\"%0\"."
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|autoGroup
condition|)
block|{
name|AutoGroupDialog
name|gd
init|=
operator|new
name|AutoGroupDialog
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|GroupSelector
operator|.
name|this
argument_list|,
name|groupsRoot
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"groupsDefaultField"
argument_list|)
argument_list|,
literal|" .,"
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|gd
operator|.
name|show
argument_list|()
expr_stmt|;
comment|// gd does the operation itself
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|instanceof
name|JCheckBox
condition|)
block|{
name|valueChanged
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|componentOpening ()
specifier|public
name|void
name|componentOpening
parameter_list|()
block|{
name|valueChanged
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|componentClosing ()
specifier|public
name|void
name|componentClosing
parameter_list|()
block|{
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
comment|// panel may be null if no file is open any more
name|panel
operator|.
name|stopShowingGroup
argument_list|()
expr_stmt|;
name|frame
operator|.
name|groupToggle
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|setGroups (GroupTreeNode groupsRoot)
specifier|public
name|void
name|setGroups
parameter_list|(
name|GroupTreeNode
name|groupsRoot
parameter_list|)
block|{
name|groupsTree
operator|.
name|setModel
argument_list|(
name|groupsTreeModel
operator|=
operator|new
name|DefaultTreeModel
argument_list|(
name|groupsRoot
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupsRoot
operator|=
name|groupsRoot
expr_stmt|;
block|}
comment|/**      * Adds the specified node as a child of the current root. The group      * contained in<b>newGroups</b> must not be of type AllEntriesGroup, since      * every tree has exactly one AllEntriesGroup (its root). The<b>newGroups      *</b> are inserted directly, i.e. they are not deepCopy()'d.      */
DECL|method|addGroups (GroupTreeNode newGroups, CompoundEdit ce)
specifier|public
name|void
name|addGroups
parameter_list|(
name|GroupTreeNode
name|newGroups
parameter_list|,
name|CompoundEdit
name|ce
parameter_list|)
block|{
comment|// ensure that there are never two instances of AllEntriesGroup
if|if
condition|(
name|newGroups
operator|.
name|getGroup
argument_list|()
operator|instanceof
name|AllEntriesGroup
condition|)
return|return;
comment|// JZTODO: output something...
name|groupsRoot
operator|.
name|add
argument_list|(
name|newGroups
argument_list|)
expr_stmt|;
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|this
argument_list|,
name|groupsRoot
argument_list|,
name|newGroups
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|ADD_NODE
argument_list|)
decl_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
block|}
comment|/** This action can also be evoked by double-clicking, thus it's a field. */
DECL|field|editGroupAction
specifier|final
name|AbstractAction
name|editGroupAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Edit group"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|groupsTree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
specifier|final
name|AbstractGroup
name|oldGroup
init|=
name|node
operator|.
name|getGroup
argument_list|()
decl_stmt|;
specifier|final
name|GroupDialog
name|gd
init|=
operator|new
name|GroupDialog
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|oldGroup
argument_list|)
decl_stmt|;
name|gd
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|gd
operator|.
name|okPressed
argument_list|()
condition|)
block|{
name|AbstractGroup
name|newGroup
init|=
name|gd
operator|.
name|getResultingGroup
argument_list|()
decl_stmt|;
name|UndoableModifyGroup
name|undo
init|=
operator|new
name|UndoableModifyGroup
argument_list|(
name|GroupSelector
operator|.
name|this
argument_list|,
name|groupsRoot
argument_list|,
name|node
argument_list|,
name|newGroup
argument_list|)
decl_stmt|;
name|node
operator|.
name|setGroup
argument_list|(
name|newGroup
argument_list|)
expr_stmt|;
name|revalidateGroups
argument_list|()
expr_stmt|;
comment|// Store undo information.
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Modified group \"%0\"."
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
DECL|field|addGroupAction
specifier|final
name|AbstractAction
name|addGroupAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Add Group"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|groupsTree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
specifier|final
name|GroupDialog
name|gd
init|=
operator|new
name|GroupDialog
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|gd
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|gd
operator|.
name|okPressed
argument_list|()
condition|)
return|return;
comment|// ignore
specifier|final
name|AbstractGroup
name|newGroup
init|=
name|gd
operator|.
name|getResultingGroup
argument_list|()
decl_stmt|;
specifier|final
name|GroupTreeNode
name|newNode
init|=
operator|new
name|GroupTreeNode
argument_list|(
name|newGroup
argument_list|)
decl_stmt|;
operator|(
operator|(
name|GroupTreeNode
operator|)
name|node
operator|.
name|getParent
argument_list|()
operator|)
operator|.
name|insert
argument_list|(
name|newNode
argument_list|,
name|node
operator|.
name|getParent
argument_list|()
operator|.
name|getIndex
argument_list|(
name|node
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|GroupSelector
operator|.
name|this
argument_list|,
name|groupsRoot
argument_list|,
name|newNode
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|ADD_NODE
argument_list|)
decl_stmt|;
name|revalidateGroups
argument_list|()
expr_stmt|;
name|groupsTree
operator|.
name|expandPath
argument_list|(
operator|new
name|TreePath
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Store undo information.
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Added group \"%0\"."
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|addSubgroupAction
specifier|final
name|AbstractAction
name|addSubgroupAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Add Subgroup"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|groupsTree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
specifier|final
name|GroupDialog
name|gd
init|=
operator|new
name|GroupDialog
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|gd
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|gd
operator|.
name|okPressed
argument_list|()
condition|)
return|return;
comment|// ignore
specifier|final
name|AbstractGroup
name|newGroup
init|=
name|gd
operator|.
name|getResultingGroup
argument_list|()
decl_stmt|;
specifier|final
name|GroupTreeNode
name|newNode
init|=
operator|new
name|GroupTreeNode
argument_list|(
name|newGroup
argument_list|)
decl_stmt|;
name|node
operator|.
name|add
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|GroupSelector
operator|.
name|this
argument_list|,
name|groupsRoot
argument_list|,
name|newNode
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|ADD_NODE
argument_list|)
decl_stmt|;
name|revalidateGroups
argument_list|()
expr_stmt|;
name|groupsTree
operator|.
name|expandPath
argument_list|(
operator|new
name|TreePath
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Store undo information.
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Added group \"%0\"."
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|removeGroupAndSubgroupsAction
specifier|final
name|AbstractAction
name|removeGroupAndSubgroupsAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Remove group and subgroups"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|groupsTree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
specifier|final
name|AbstractGroup
name|group
init|=
name|node
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|int
name|conf
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Remove group \"%0\" and its subgroups?"
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Remove group and subgroups"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
specifier|final
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|GroupSelector
operator|.
name|this
argument_list|,
name|groupsRoot
argument_list|,
name|node
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|REMOVE_NODE_AND_CHILDREN
argument_list|)
decl_stmt|;
name|node
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
name|revalidateGroups
argument_list|()
expr_stmt|;
comment|// Store undo information.
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Removed group \"%0\" and its subgroups."
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
DECL|field|removeGroupKeepSubgroupsAction
specifier|final
name|AbstractAction
name|removeGroupKeepSubgroupsAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Remove group, keep subgroups"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|groupsTree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
specifier|final
name|AbstractGroup
name|group
init|=
name|node
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|int
name|conf
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Remove group \"%0\"?"
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Remove group"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
specifier|final
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|GroupSelector
operator|.
name|this
argument_list|,
name|groupsRoot
argument_list|,
name|node
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|REMOVE_NODE_KEEP_CHILDREN
argument_list|)
decl_stmt|;
specifier|final
name|GroupTreeNode
name|parent
init|=
operator|(
name|GroupTreeNode
operator|)
name|node
operator|.
name|getParent
argument_list|()
decl_stmt|;
specifier|final
name|int
name|childIndex
init|=
name|parent
operator|.
name|getIndex
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|node
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
while|while
condition|(
name|node
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
condition|)
name|parent
operator|.
name|insert
argument_list|(
operator|(
name|GroupTreeNode
operator|)
name|node
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|childIndex
argument_list|)
expr_stmt|;
name|revalidateGroups
argument_list|()
expr_stmt|;
comment|// Store undo information.
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Removed group \"%0\"."
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
DECL|method|getSelectionPath ()
specifier|public
name|TreePath
name|getSelectionPath
parameter_list|()
block|{
return|return
name|groupsTree
operator|.
name|getSelectionPath
argument_list|()
return|;
block|}
comment|//  JZTODO lyrics
DECL|field|showOverlappingGroupsAction
specifier|public
specifier|final
name|AbstractAction
name|showOverlappingGroupsAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show overlapping groups"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ae
parameter_list|)
block|{
specifier|final
name|TreePath
name|path
init|=
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return;
specifier|final
name|GroupTreeNode
name|selectedNode
init|=
operator|(
name|GroupTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|GroupTreeNode
name|node
decl_stmt|;
name|BibtexEntry
name|entry
decl_stmt|;
name|Vector
name|vec
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|final
name|Collection
name|entries
init|=
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|groupsRoot
operator|.
name|depthFirstEnumeration
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|node
operator|=
operator|(
name|GroupTreeNode
operator|)
name|e
operator|.
name|nextElement
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
operator|(
name|BibtexEntry
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
operator|&&
name|selectedNode
operator|.
name|getGroup
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|vec
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|groupsTree
operator|.
name|setHighlight2Cells
argument_list|(
name|vec
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|//  JZTODO lyrics
DECL|field|clearHighlightAction
specifier|public
specifier|final
name|AbstractAction
name|clearHighlightAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Clear highlight"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ae
parameter_list|)
block|{
name|groupsTree
operator|.
name|setHighlight2Cells
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|expandSubtreeAction
specifier|final
name|AbstractAction
name|expandSubtreeAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Expand subtree"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ae
parameter_list|)
block|{
specifier|final
name|TreePath
name|path
init|=
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return;
specifier|final
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|node
operator|.
name|depthFirstEnumeration
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|groupsTree
operator|.
name|expandPath
argument_list|(
operator|new
name|TreePath
argument_list|(
operator|(
operator|(
name|GroupTreeNode
operator|)
name|e
operator|.
name|nextElement
argument_list|()
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|revalidateGroups
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|//  JZTODO lyrics
DECL|field|collapseSubtreeAction
specifier|final
name|AbstractAction
name|collapseSubtreeAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Collapse subtree"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ae
parameter_list|)
block|{
specifier|final
name|TreePath
name|path
init|=
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return;
specifier|final
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|node
operator|.
name|depthFirstEnumeration
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|groupsTree
operator|.
name|collapsePath
argument_list|(
operator|new
name|TreePath
argument_list|(
operator|(
operator|(
name|GroupTreeNode
operator|)
name|e
operator|.
name|nextElement
argument_list|()
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|revalidateGroups
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|moveNodeUpAction
specifier|final
name|AbstractAction
name|moveNodeUpAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Up"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|TreePath
name|path
init|=
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return;
specifier|final
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|moveNodeUp
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|moveNodeDownAction
specifier|final
name|AbstractAction
name|moveNodeDownAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Down"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|TreePath
name|path
init|=
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return;
specifier|final
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|moveNodeDown
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|moveNodeLeftAction
specifier|final
name|AbstractAction
name|moveNodeLeftAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Left"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|TreePath
name|path
init|=
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return;
specifier|final
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|moveNodeLeft
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|moveNodeRightAction
specifier|final
name|AbstractAction
name|moveNodeRightAction
init|=
operator|new
name|AbstractAction
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Right"
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|TreePath
name|path
init|=
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return;
specifier|final
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|moveNodeRight
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**      * @param node The node to move      * @return true if move was successful, false if not.      */
DECL|method|moveNodeUp (GroupTreeNode node)
specifier|public
name|boolean
name|moveNodeUp
parameter_list|(
name|GroupTreeNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|groupsTree
operator|.
name|getSelectionCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please select exactly one group to move."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
name|AbstractUndoableEdit
name|undo
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|canMoveUp
argument_list|()
operator|||
operator|(
name|undo
operator|=
name|node
operator|.
name|moveUp
argument_list|(
name|GroupSelector
operator|.
name|this
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cannot move group \"%0\" up."
argument_list|,
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
comment|// update of selection/expansion state not required
comment|// when moving amongst siblings (no path is invalidated)
name|revalidateGroups
argument_list|()
expr_stmt|;
name|concludeMoveGroup
argument_list|(
name|undo
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * @param node The node to move      * @return true if move was successful, false if not.      */
DECL|method|moveNodeDown (GroupTreeNode node)
specifier|public
name|boolean
name|moveNodeDown
parameter_list|(
name|GroupTreeNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|groupsTree
operator|.
name|getSelectionCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please select exactly one group to move."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
name|AbstractUndoableEdit
name|undo
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|canMoveDown
argument_list|()
operator|||
operator|(
name|undo
operator|=
name|node
operator|.
name|moveDown
argument_list|(
name|GroupSelector
operator|.
name|this
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cannot move group \"%0\" down."
argument_list|,
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
comment|// update of selection/expansion state not required
comment|// when moving amongst siblings (no path is invalidated)
name|revalidateGroups
argument_list|()
expr_stmt|;
name|concludeMoveGroup
argument_list|(
name|undo
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * @param node The node to move      * @return true if move was successful, false if not.      */
DECL|method|moveNodeLeft (GroupTreeNode node)
specifier|public
name|boolean
name|moveNodeLeft
parameter_list|(
name|GroupTreeNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|groupsTree
operator|.
name|getSelectionCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please select exactly one group to move."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
name|AbstractUndoableEdit
name|undo
init|=
literal|null
decl_stmt|;
name|Enumeration
name|expandedPaths
init|=
name|getExpandedPaths
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|canMoveLeft
argument_list|()
operator|||
operator|(
name|undo
operator|=
name|node
operator|.
name|moveLeft
argument_list|(
name|GroupSelector
operator|.
name|this
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cannot move group \"%0\" left."
argument_list|,
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
comment|// update selection/expansion state
name|revalidateGroups
argument_list|(
operator|new
name|TreePath
index|[]
block|{
operator|new
name|TreePath
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
block|}
argument_list|,
name|groupsTree
operator|.
name|refreshPaths
argument_list|(
name|expandedPaths
argument_list|)
argument_list|)
expr_stmt|;
name|concludeMoveGroup
argument_list|(
name|undo
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * @param node The node to move      * @return true if move was successful, false if not.      */
DECL|method|moveNodeRight (GroupTreeNode node)
specifier|public
name|boolean
name|moveNodeRight
parameter_list|(
name|GroupTreeNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|groupsTree
operator|.
name|getSelectionCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please select exactly one group to move."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
name|AbstractUndoableEdit
name|undo
init|=
literal|null
decl_stmt|;
name|Enumeration
name|expandedPaths
init|=
name|getExpandedPaths
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|canMoveRight
argument_list|()
operator|||
operator|(
name|undo
operator|=
name|node
operator|.
name|moveRight
argument_list|(
name|GroupSelector
operator|.
name|this
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cannot move group \"%0\" right."
argument_list|,
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
comment|// update selection/expansion state
name|revalidateGroups
argument_list|(
operator|new
name|TreePath
index|[]
block|{
operator|new
name|TreePath
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
block|}
argument_list|,
name|groupsTree
operator|.
name|refreshPaths
argument_list|(
name|expandedPaths
argument_list|)
argument_list|)
expr_stmt|;
name|concludeMoveGroup
argument_list|(
name|undo
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Concludes the moving of a group tree node by storing the specified      * undo information, marking the change, and setting the status line.      * @param undo Undo information for the move operation.       * @param node The node that has been moved.      */
DECL|method|concludeMoveGroup (AbstractUndoableEdit undo, GroupTreeNode node)
specifier|public
name|void
name|concludeMoveGroup
parameter_list|(
name|AbstractUndoableEdit
name|undo
parameter_list|,
name|GroupTreeNode
name|node
parameter_list|)
block|{
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Moved group \"%0\"."
argument_list|,
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|concludeAssignment (AbstractUndoableEdit undo, GroupTreeNode node, int assignedEntries)
specifier|public
name|void
name|concludeAssignment
parameter_list|(
name|AbstractUndoableEdit
name|undo
parameter_list|,
name|GroupTreeNode
name|node
parameter_list|,
name|int
name|assignedEntries
parameter_list|)
block|{
if|if
condition|(
name|undo
operator|==
literal|null
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The group \"%0\" already contains the selection."
argument_list|,
operator|new
name|String
index|[]
block|{
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
specifier|final
name|String
name|groupName
init|=
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignedEntries
operator|==
literal|1
condition|)
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Assigned 1 entry to group \"%0\"."
argument_list|,
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Assigned %0 entries to group \"%1\"."
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|assignedEntries
argument_list|)
argument_list|,
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|moveSubmenu
name|JMenu
name|moveSubmenu
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Move"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|getGroupTreeRoot ()
specifier|public
name|GroupTreeNode
name|getGroupTreeRoot
parameter_list|()
block|{
return|return
name|groupsRoot
return|;
block|}
DECL|method|getExpandedPaths ()
specifier|public
name|Enumeration
name|getExpandedPaths
parameter_list|()
block|{
return|return
name|groupsTree
operator|.
name|getExpandedDescendants
argument_list|(
operator|new
name|TreePath
argument_list|(
name|groupsRoot
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** panel may be null to indicate that no file is currently open. */
DECL|method|setActiveBasePanel (BasePanel panel)
specifier|public
name|void
name|setActiveBasePanel
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|super
operator|.
name|setActiveBasePanel
argument_list|(
name|panel
argument_list|)
expr_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
comment|// hide groups
name|frame
operator|.
name|sidePaneManager
operator|.
name|ensureNotVisible
argument_list|(
literal|"groups"
argument_list|)
expr_stmt|;
return|return;
block|}
name|MetaData
name|metaData
init|=
name|panel
operator|.
name|metaData
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaData
operator|.
name|getGroups
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setGroups
argument_list|(
name|metaData
operator|.
name|getGroups
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|groupsRoot
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
comment|// groups were defined
name|frame
operator|.
name|sidePaneManager
operator|.
name|ensureVisible
argument_list|(
literal|"groups"
argument_list|)
expr_stmt|;
name|frame
operator|.
name|groupToggle
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|GroupTreeNode
name|newGroupsRoot
init|=
operator|new
name|GroupTreeNode
argument_list|(
operator|new
name|AllEntriesGroup
argument_list|()
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|setGroups
argument_list|(
name|newGroupsRoot
argument_list|)
expr_stmt|;
name|setGroups
argument_list|(
name|newGroupsRoot
argument_list|)
expr_stmt|;
block|}
name|validateTree
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method is required by the ErrorMessageDisplay interface, and lets this class      * serve as a callback for regular expression exceptions happening in DatabaseSearch.      * @param errorMessage      */
DECL|method|reportError (String errorMessage)
specifier|public
name|void
name|reportError
parameter_list|(
name|String
name|errorMessage
parameter_list|)
block|{
comment|// this should never happen, since regular expressions are checked for
comment|// correctness by the edit group dialog, and no other errors should
comment|// occur in a search
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error in group search: "
operator|+
name|errorMessage
operator|+
literal|". Please report this on www.sf.net/projects/jabref"
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is required by the ErrorMessageDisplay interface, and lets this class      * serve as a callback for regular expression exceptions happening in DatabaseSearch.      * @param errorMessage      */
DECL|method|reportError (String errorMessage, Exception exception)
specifier|public
name|void
name|reportError
parameter_list|(
name|String
name|errorMessage
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
name|reportError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
block|}
comment|/**      * Highlight all groups that contain any/all of the specified entries.       */
DECL|method|showMatchingGroups (BibtexEntry[] entries, boolean requireAll)
specifier|public
name|void
name|showMatchingGroups
parameter_list|(
name|BibtexEntry
index|[]
name|entries
parameter_list|,
name|boolean
name|requireAll
parameter_list|)
block|{
name|GroupTreeNode
name|node
decl_stmt|;
name|AbstractGroup
name|group
decl_stmt|;
name|Vector
name|vec
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|groupsRoot
operator|.
name|preorderEnumeration
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|node
operator|=
operator|(
name|GroupTreeNode
operator|)
name|e
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|group
operator|=
name|node
operator|.
name|getGroup
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|requireAll
condition|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|contains
argument_list|(
name|entries
index|[
name|i
index|]
argument_list|)
condition|)
break|break;
block|}
else|else
block|{
if|if
condition|(
name|group
operator|.
name|contains
argument_list|(
name|entries
index|[
name|i
index|]
argument_list|)
condition|)
name|vec
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|groupsTree
operator|.
name|setHighlight2Cells
argument_list|(
name|vec
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure that all highlighted nodes are visible
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vec
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|node
operator|=
call|(
name|GroupTreeNode
call|)
argument_list|(
operator|(
name|GroupTreeNode
operator|)
name|vec
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|getParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
name|groupsTree
operator|.
name|expandPath
argument_list|(
operator|new
name|TreePath
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|groupsTree
operator|.
name|revalidate
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

