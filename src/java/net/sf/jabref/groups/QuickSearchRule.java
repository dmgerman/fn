begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Morten O. Alver, Nizar N. Batada  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|SearchRule
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_class
DECL|class|QuickSearchRule
specifier|public
class|class
name|QuickSearchRule
implements|implements
name|SearchRule
block|{
DECL|field|field
name|String
name|field
decl_stmt|;
DECL|field|pattern
DECL|field|hardPattern
name|Pattern
name|pattern
decl_stmt|,
name|hardPattern
decl_stmt|;
DECL|method|QuickSearchRule (String field, String searchString)
specifier|public
name|QuickSearchRule
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|searchString
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|int
name|flags
init|=
name|Pattern
operator|.
name|CASE_INSENSITIVE
decl_stmt|;
name|hardPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|searchString
argument_list|,
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|searchString
operator|.
name|matches
argument_list|(
literal|"\\.\\*"
argument_list|)
condition|)
block|{
name|searchString
operator|=
literal|".*"
operator|+
name|searchString
operator|+
literal|".*"
expr_stmt|;
block|}
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|searchString
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
DECL|method|applyRule (Hashtable searchOptions, BibtexEntry bibtexEntry)
specifier|public
name|int
name|applyRule
parameter_list|(
name|Hashtable
name|searchOptions
parameter_list|,
name|BibtexEntry
name|bibtexEntry
parameter_list|)
block|{
name|int
name|score
init|=
literal|0
decl_stmt|;
name|String
name|content
init|=
operator|(
name|String
operator|)
name|bibtexEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|content
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|pattern
operator|.
name|matcher
argument_list|(
name|content
argument_list|)
operator|.
name|matches
argument_list|()
operator|)
condition|)
block|{
name|score
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|score
return|;
block|}
comment|/**      * Removes matches of searchString in the entry's field.      */
DECL|method|removeMatches (BibtexEntry bibtexEntry)
specifier|public
name|void
name|removeMatches
parameter_list|(
name|BibtexEntry
name|bibtexEntry
parameter_list|)
block|{
name|String
name|content
init|=
operator|(
name|String
operator|)
name|bibtexEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|split
init|=
name|hardPattern
operator|.
name|split
argument_list|(
name|content
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|split
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|split
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|bibtexEntry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
operator|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|sb
operator|.
name|toString
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

