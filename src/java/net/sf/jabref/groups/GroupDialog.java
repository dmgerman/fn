begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003 Morten O. Alver, Nizar N. Batada   All programs in this directory and  subdirectories are published under the GNU General Public License as  described below.   This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or (at  your option) any later version.   This program is distributed in the hope that it will be useful, but  WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  General Public License for more details.   You should have received a copy of the GNU General Public License  along with this program; if not, write to the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA   Further information about the GNU GPL is available at:  http://www.gnu.org/copyleft/gpl.ja.html   */
end_comment

begin_package
DECL|package|net.sf.jabref.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|AbstractUndoableEdit
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Dialog for creating or modifying groups. Operates directly on the Vector  * containing group information.  */
end_comment

begin_class
DECL|class|GroupDialog
class|class
name|GroupDialog
extends|extends
name|JDialog
block|{
DECL|field|INDEX_EXPLICITGROUP
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_EXPLICITGROUP
init|=
literal|0
decl_stmt|;
DECL|field|INDEX_KEYWORDGROUP
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_KEYWORDGROUP
init|=
literal|1
decl_stmt|;
DECL|field|INDEX_SEARCHGROUP
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_SEARCHGROUP
init|=
literal|2
decl_stmt|;
DECL|field|TEXTFIELD_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|TEXTFIELD_LENGTH
init|=
literal|30
decl_stmt|;
comment|// for all types
DECL|field|m_name
specifier|private
name|JTextField
name|m_name
init|=
operator|new
name|JTextField
argument_list|(
name|TEXTFIELD_LENGTH
argument_list|)
decl_stmt|;
DECL|field|m_explicitRadioButton
specifier|private
name|JRadioButton
name|m_explicitRadioButton
init|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Statically group entries by manual assignment"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|m_keywordsRadioButton
specifier|private
name|JRadioButton
name|m_keywordsRadioButton
init|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Dynamically group entries by searching a field for a keyword"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|m_searchRadioButton
specifier|private
name|JRadioButton
name|m_searchRadioButton
init|=
operator|new
name|JRadioButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Dynamically group entries by a free-form search expression"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|m_independentButton
specifier|private
name|JRadioButton
name|m_independentButton
init|=
operator|new
name|JRadioButton
argument_list|(
comment|// JZTODO lyrics
name|Globals
operator|.
name|lang
argument_list|(
literal|"Independent group: When selected, view only this group's entries"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|m_intersectionButton
specifier|private
name|JRadioButton
name|m_intersectionButton
init|=
operator|new
name|JRadioButton
argument_list|(
comment|// JZTODO lyrics
name|Globals
operator|.
name|lang
argument_list|(
literal|"Refine supergroup: When selected, view entries contained in both this group and its supergroup"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|m_unionButton
specifier|private
name|JRadioButton
name|m_unionButton
init|=
operator|new
name|JRadioButton
argument_list|(
comment|// JZTODO lyrics
name|Globals
operator|.
name|lang
argument_list|(
literal|"Include subgroups: When selected, view entries contained in this group or its subgroups"
argument_list|)
argument_list|)
decl_stmt|;
comment|// for KeywordGroup
DECL|field|m_kgSearchField
specifier|private
name|JTextField
name|m_kgSearchField
init|=
operator|new
name|JTextField
argument_list|(
name|TEXTFIELD_LENGTH
argument_list|)
decl_stmt|;
DECL|field|m_kgSearchTerm
specifier|private
name|FieldTextField
name|m_kgSearchTerm
init|=
operator|new
name|FieldTextField
argument_list|(
literal|"keywords"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|m_kgCaseSensitive
specifier|private
name|JCheckBox
name|m_kgCaseSensitive
init|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Case sensitive"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|m_kgRegExp
specifier|private
name|JCheckBox
name|m_kgRegExp
init|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Regular Expression"
argument_list|)
argument_list|)
decl_stmt|;
comment|// for SearchGroup
DECL|field|m_sgSearchExpression
specifier|private
name|JTextField
name|m_sgSearchExpression
init|=
operator|new
name|JTextField
argument_list|(
name|TEXTFIELD_LENGTH
argument_list|)
decl_stmt|;
DECL|field|m_sgCaseSensitive
specifier|private
name|JCheckBox
name|m_sgCaseSensitive
init|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Case sensitive"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|m_sgRegExp
specifier|private
name|JCheckBox
name|m_sgRegExp
init|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Regular Expression"
argument_list|)
argument_list|)
decl_stmt|;
comment|// for all types
DECL|field|m_ok
specifier|private
name|JButton
name|m_ok
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Ok"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|m_cancel
specifier|private
name|JButton
name|m_cancel
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|m_optionsPanel
specifier|private
name|JPanel
name|m_optionsPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|m_description
specifier|private
name|JLabel
name|m_description
init|=
operator|new
name|JLabel
argument_list|()
block|{
specifier|public
name|Dimension
name|getPreferredSize
parameter_list|()
block|{
name|Dimension
name|d
init|=
name|super
operator|.
name|getPreferredSize
argument_list|()
decl_stmt|;
comment|// width must be smaller than width of enclosing JScrollPane
comment|// to prevent a horizontal scroll bar
name|d
operator|.
name|width
operator|=
literal|1
expr_stmt|;
return|return
name|d
return|;
block|}
block|}
decl_stmt|;
DECL|field|m_okPressed
specifier|private
name|boolean
name|m_okPressed
init|=
literal|false
decl_stmt|;
DECL|field|m_parent
specifier|private
specifier|final
name|JabRefFrame
name|m_parent
decl_stmt|;
DECL|field|m_basePanel
specifier|private
specifier|final
name|BasePanel
name|m_basePanel
decl_stmt|;
DECL|field|m_resultingGroup
specifier|private
name|AbstractGroup
name|m_resultingGroup
decl_stmt|;
DECL|field|m_undoAddPreviousEntires
specifier|private
name|AbstractUndoableEdit
name|m_undoAddPreviousEntires
init|=
literal|null
decl_stmt|;
DECL|field|m_editedGroup
specifier|private
specifier|final
name|AbstractGroup
name|m_editedGroup
decl_stmt|;
DECL|field|m_optionsLayout
specifier|private
name|CardLayout
name|m_optionsLayout
init|=
operator|new
name|CardLayout
argument_list|()
decl_stmt|;
comment|/** 	 * Shows a group add/edit dialog. 	 *  	 * @param jabrefFrame 	 *            The parent frame. 	 * @param defaultField 	 *            The default grouping field. 	 * @param editedGroup 	 *            The group being edited, or null if a new group is to be 	 *            created. 	 */
DECL|method|GroupDialog (JabRefFrame jabrefFrame, BasePanel basePanel, AbstractGroup editedGroup)
specifier|public
name|GroupDialog
parameter_list|(
name|JabRefFrame
name|jabrefFrame
parameter_list|,
name|BasePanel
name|basePanel
parameter_list|,
name|AbstractGroup
name|editedGroup
parameter_list|)
block|{
name|super
argument_list|(
name|jabrefFrame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Edit group"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|m_basePanel
operator|=
name|basePanel
expr_stmt|;
name|m_parent
operator|=
name|jabrefFrame
expr_stmt|;
name|m_editedGroup
operator|=
name|editedGroup
expr_stmt|;
comment|// set default values (overwritten if editedGroup != null)
name|m_kgSearchField
operator|.
name|setText
argument_list|(
name|jabrefFrame
operator|.
name|prefs
argument_list|()
operator|.
name|get
argument_list|(
literal|"groupsDefaultField"
argument_list|)
argument_list|)
expr_stmt|;
comment|// configure elements
name|ButtonGroup
name|groupType
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|groupType
operator|.
name|add
argument_list|(
name|m_explicitRadioButton
argument_list|)
expr_stmt|;
name|groupType
operator|.
name|add
argument_list|(
name|m_keywordsRadioButton
argument_list|)
expr_stmt|;
name|groupType
operator|.
name|add
argument_list|(
name|m_searchRadioButton
argument_list|)
expr_stmt|;
name|ButtonGroup
name|groupHierarchy
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|groupHierarchy
operator|.
name|add
argument_list|(
name|m_independentButton
argument_list|)
expr_stmt|;
name|groupHierarchy
operator|.
name|add
argument_list|(
name|m_intersectionButton
argument_list|)
expr_stmt|;
name|groupHierarchy
operator|.
name|add
argument_list|(
name|m_unionButton
argument_list|)
expr_stmt|;
name|m_description
operator|.
name|setVerticalAlignment
argument_list|(
name|JLabel
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|getRootPane
argument_list|()
operator|.
name|setDefaultButton
argument_list|(
name|m_ok
argument_list|)
expr_stmt|;
comment|// build individual layout cards for each group
name|m_optionsPanel
operator|.
name|setLayout
argument_list|(
name|m_optionsLayout
argument_list|)
expr_stmt|;
comment|// ... for explicit group
name|m_optionsPanel
operator|.
name|add
argument_list|(
operator|new
name|JPanel
argument_list|()
argument_list|,
literal|""
operator|+
name|INDEX_EXPLICITGROUP
argument_list|)
expr_stmt|;
comment|// ... for keyword group
name|FormLayout
name|layoutKG
init|=
operator|new
name|FormLayout
argument_list|(
literal|"right:pref, 4dlu, fill:1dlu:grow, 2dlu, left:pref"
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builderKG
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layoutKG
argument_list|)
decl_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Field"
argument_list|)
argument_list|)
expr_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|m_kgSearchField
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builderKG
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|m_kgSearchTerm
argument_list|)
expr_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
operator|new
name|FieldContentSelector
argument_list|(
name|m_parent
argument_list|,
name|m_basePanel
argument_list|,
name|this
argument_list|,
name|m_kgSearchTerm
argument_list|,
name|m_basePanel
operator|.
name|metaData
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|builderKG
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|m_kgCaseSensitive
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builderKG
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|m_kgRegExp
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|m_optionsPanel
operator|.
name|add
argument_list|(
name|builderKG
operator|.
name|getPanel
argument_list|()
argument_list|,
literal|""
operator|+
name|INDEX_KEYWORDGROUP
argument_list|)
expr_stmt|;
comment|// ... for search group
name|FormLayout
name|layoutSG
init|=
operator|new
name|FormLayout
argument_list|(
literal|"right:pref, 4dlu, fill:1dlu:grow"
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builderSG
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layoutSG
argument_list|)
decl_stmt|;
name|builderSG
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search expression"
argument_list|)
argument_list|)
expr_stmt|;
name|builderSG
operator|.
name|append
argument_list|(
name|m_sgSearchExpression
argument_list|)
expr_stmt|;
name|builderSG
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderSG
operator|.
name|append
argument_list|(
name|m_sgCaseSensitive
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builderSG
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderSG
operator|.
name|append
argument_list|(
name|m_sgRegExp
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|m_optionsPanel
operator|.
name|add
argument_list|(
name|builderSG
operator|.
name|getPanel
argument_list|()
argument_list|,
literal|""
operator|+
name|INDEX_SEARCHGROUP
argument_list|)
expr_stmt|;
comment|// ... for buttons panel
name|FormLayout
name|layoutBP
init|=
operator|new
name|FormLayout
argument_list|(
literal|"pref, 4dlu, pref"
argument_list|,
literal|"p"
argument_list|)
decl_stmt|;
name|layoutBP
operator|.
name|setColumnGroups
argument_list|(
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|3
block|}
block|}
argument_list|)
expr_stmt|;
name|DefaultFormBuilder
name|builderBP
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layoutBP
argument_list|)
decl_stmt|;
name|builderBP
operator|.
name|append
argument_list|(
name|m_ok
argument_list|)
expr_stmt|;
name|builderBP
operator|.
name|add
argument_list|(
name|m_cancel
argument_list|)
expr_stmt|;
comment|// create layout
name|FormLayout
name|layoutAll
init|=
operator|new
name|FormLayout
argument_list|(
literal|"right:pref, 4dlu, fill:600px, 4dlu, fill:pref"
argument_list|,
literal|"p, 3dlu, p, 3dlu, p, 0dlu, p, 0dlu, p, 3dlu, p, 3dlu, p, "
operator|+
literal|"0dlu, p, 0dlu, p, 3dlu, p, 3dlu, "
operator|+
literal|"p, 3dlu, p, 3dlu, top:80dlu, 9dlu, p, , 9dlu, p"
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builderAll
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layoutAll
argument_list|)
decl_stmt|;
name|builderAll
operator|.
name|setDefaultDialogBorder
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|appendSeparator
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"General"
argument_list|)
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Name"
argument_list|)
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|m_name
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|m_explicitRadioButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|m_keywordsRadioButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|m_searchRadioButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|appendSeparator
argument_list|(
literal|"Hierarchical Context"
argument_list|)
expr_stmt|;
comment|// JZTODO lyrics
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|m_independentButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|m_intersectionButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|m_unionButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|appendSeparator
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Options"
argument_list|)
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|m_optionsPanel
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|appendSeparator
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Description"
argument_list|)
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
name|m_description
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_AS_NEEDED
argument_list|)
block|{
specifier|public
name|Dimension
name|getPreferredSize
parameter_list|()
block|{
return|return
name|getMaximumSize
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|sp
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|appendSeparator
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|CellConstraints
name|cc
init|=
operator|new
name|CellConstraints
argument_list|()
decl_stmt|;
name|builderAll
operator|.
name|add
argument_list|(
name|builderBP
operator|.
name|getPanel
argument_list|()
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
name|builderAll
operator|.
name|getColumn
argument_list|()
argument_list|,
name|builderAll
operator|.
name|getRow
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|"center, fill"
argument_list|)
argument_list|)
expr_stmt|;
name|Container
name|cp
init|=
name|getContentPane
argument_list|()
decl_stmt|;
name|cp
operator|.
name|setLayout
argument_list|(
operator|new
name|BoxLayout
argument_list|(
name|cp
argument_list|,
name|BoxLayout
operator|.
name|Y_AXIS
argument_list|)
argument_list|)
expr_stmt|;
name|cp
operator|.
name|add
argument_list|(
name|builderAll
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
name|setResizable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|updateComponents
argument_list|()
expr_stmt|;
name|setLayoutForSelectedGroup
argument_list|()
expr_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|this
argument_list|,
name|m_parent
argument_list|)
expr_stmt|;
comment|// add listeners
name|ItemListener
name|radioButtonItemListener
init|=
operator|new
name|ItemListener
argument_list|()
block|{
specifier|public
name|void
name|itemStateChanged
parameter_list|(
name|ItemEvent
name|e
parameter_list|)
block|{
name|setLayoutForSelectedGroup
argument_list|()
expr_stmt|;
name|updateComponents
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|m_explicitRadioButton
operator|.
name|addItemListener
argument_list|(
name|radioButtonItemListener
argument_list|)
expr_stmt|;
name|m_keywordsRadioButton
operator|.
name|addItemListener
argument_list|(
name|radioButtonItemListener
argument_list|)
expr_stmt|;
name|m_searchRadioButton
operator|.
name|addItemListener
argument_list|(
name|radioButtonItemListener
argument_list|)
expr_stmt|;
name|m_cancel
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|m_ok
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|m_okPressed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|m_explicitRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
if|if
condition|(
name|m_editedGroup
operator|instanceof
name|ExplicitGroup
condition|)
block|{
comment|// keep assignments from possible previous ExplicitGroup
name|m_resultingGroup
operator|=
name|m_editedGroup
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
name|m_resultingGroup
operator|.
name|setName
argument_list|(
name|m_name
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|m_resultingGroup
operator|.
name|setHierarchicalContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_resultingGroup
operator|=
operator|new
name|ExplicitGroup
argument_list|(
name|m_name
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_editedGroup
operator|!=
literal|null
condition|)
name|addPreviousEntries
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|m_keywordsRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// regex is correct, otherwise OK would have been disabled
comment|// therefore I don't catch anything here
name|m_resultingGroup
operator|=
operator|new
name|KeywordGroup
argument_list|(
name|m_name
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|m_kgSearchField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|m_kgSearchTerm
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|m_kgCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|m_kgRegExp
operator|.
name|isSelected
argument_list|()
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|m_editedGroup
operator|instanceof
name|ExplicitGroup
operator|||
name|m_editedGroup
operator|instanceof
name|SearchGroup
operator|)
operator|&&
name|m_resultingGroup
operator|.
name|supportsAdd
argument_list|()
condition|)
block|{
name|addPreviousEntries
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|m_searchRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
try|try
block|{
comment|// regex is correct, otherwise OK would have been
comment|// disabled
comment|// therefore I don't catch anything here
name|m_resultingGroup
operator|=
operator|new
name|SearchGroup
argument_list|(
name|m_name
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|m_sgSearchExpression
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|m_sgCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|m_sgRegExp
operator|.
name|isSelected
argument_list|()
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|// should never happen
block|}
block|}
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CaretListener
name|caretListener
init|=
operator|new
name|CaretListener
argument_list|()
block|{
specifier|public
name|void
name|caretUpdate
parameter_list|(
name|CaretEvent
name|e
parameter_list|)
block|{
name|updateComponents
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ItemListener
name|itemListener
init|=
operator|new
name|ItemListener
argument_list|()
block|{
specifier|public
name|void
name|itemStateChanged
parameter_list|(
name|ItemEvent
name|e
parameter_list|)
block|{
name|updateComponents
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|m_name
operator|.
name|addCaretListener
argument_list|(
name|caretListener
argument_list|)
expr_stmt|;
name|m_kgSearchField
operator|.
name|addCaretListener
argument_list|(
name|caretListener
argument_list|)
expr_stmt|;
name|m_kgSearchTerm
operator|.
name|addCaretListener
argument_list|(
name|caretListener
argument_list|)
expr_stmt|;
name|m_kgCaseSensitive
operator|.
name|addItemListener
argument_list|(
name|itemListener
argument_list|)
expr_stmt|;
name|m_kgRegExp
operator|.
name|addItemListener
argument_list|(
name|itemListener
argument_list|)
expr_stmt|;
name|m_sgSearchExpression
operator|.
name|addCaretListener
argument_list|(
name|caretListener
argument_list|)
expr_stmt|;
name|m_sgRegExp
operator|.
name|addItemListener
argument_list|(
name|itemListener
argument_list|)
expr_stmt|;
name|m_sgCaseSensitive
operator|.
name|addItemListener
argument_list|(
name|itemListener
argument_list|)
expr_stmt|;
comment|// configure for current type
if|if
condition|(
name|editedGroup
operator|instanceof
name|KeywordGroup
condition|)
block|{
name|KeywordGroup
name|group
init|=
operator|(
name|KeywordGroup
operator|)
name|editedGroup
decl_stmt|;
name|m_name
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|m_kgSearchField
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchField
argument_list|()
argument_list|)
expr_stmt|;
name|m_kgSearchTerm
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchExpression
argument_list|()
argument_list|)
expr_stmt|;
name|m_kgCaseSensitive
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isCaseSensitive
argument_list|()
argument_list|)
expr_stmt|;
name|m_kgRegExp
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isRegExp
argument_list|()
argument_list|)
expr_stmt|;
name|m_keywordsRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|editedGroup
operator|.
name|getHierarchicalContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|editedGroup
operator|instanceof
name|SearchGroup
condition|)
block|{
name|SearchGroup
name|group
init|=
operator|(
name|SearchGroup
operator|)
name|editedGroup
decl_stmt|;
name|m_name
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|m_sgSearchExpression
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchExpression
argument_list|()
argument_list|)
expr_stmt|;
name|m_sgCaseSensitive
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isCaseSensitive
argument_list|()
argument_list|)
expr_stmt|;
name|m_sgRegExp
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isRegExp
argument_list|()
argument_list|)
expr_stmt|;
name|m_searchRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|editedGroup
operator|.
name|getHierarchicalContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|editedGroup
operator|instanceof
name|ExplicitGroup
condition|)
block|{
name|m_name
operator|.
name|setText
argument_list|(
name|editedGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|m_explicitRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|editedGroup
operator|.
name|getHierarchicalContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// creating new group -> defaults!
name|m_explicitRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|AbstractGroup
operator|.
name|INDEPENDENT
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|okPressed ()
specifier|public
name|boolean
name|okPressed
parameter_list|()
block|{
return|return
name|m_okPressed
return|;
block|}
DECL|method|getResultingGroup ()
specifier|public
name|AbstractGroup
name|getResultingGroup
parameter_list|()
block|{
return|return
name|m_resultingGroup
return|;
block|}
DECL|method|setLayoutForSelectedGroup ()
specifier|private
name|void
name|setLayoutForSelectedGroup
parameter_list|()
block|{
if|if
condition|(
name|m_explicitRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
name|m_optionsLayout
operator|.
name|show
argument_list|(
name|m_optionsPanel
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|INDEX_EXPLICITGROUP
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|m_keywordsRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
name|m_optionsLayout
operator|.
name|show
argument_list|(
name|m_optionsPanel
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|INDEX_KEYWORDGROUP
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|m_searchRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
name|m_optionsLayout
operator|.
name|show
argument_list|(
name|m_optionsPanel
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|INDEX_SEARCHGROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateComponents ()
specifier|private
name|void
name|updateComponents
parameter_list|()
block|{
comment|// all groups need a name
name|boolean
name|okEnabled
init|=
name|m_name
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|okEnabled
condition|)
block|{
name|setDescription
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please enter a name for the group."
argument_list|)
argument_list|)
expr_stmt|;
name|m_ok
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|s1
decl_stmt|,
name|s2
decl_stmt|;
if|if
condition|(
name|m_keywordsRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|s1
operator|=
name|m_kgSearchField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|okEnabled
operator|=
name|okEnabled
operator|&&
name|s1
operator|.
name|matches
argument_list|(
literal|"\\w+"
argument_list|)
expr_stmt|;
name|s2
operator|=
name|m_kgSearchTerm
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|okEnabled
operator|=
name|okEnabled
operator|&&
name|s2
operator|.
name|length
argument_list|()
operator|>
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|okEnabled
condition|)
block|{
name|setDescription
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please enter the field to search (e.g.<b>keywords</b>) and the keyword to search it for (e.g.<b>electrical</b>)."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|m_kgRegExp
operator|.
name|isSelected
argument_list|()
condition|)
block|{
try|try
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|setDescription
argument_list|(
name|KeywordGroup
operator|.
name|getDescriptionForPreview
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|m_kgCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|m_kgRegExp
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|okEnabled
operator|=
literal|false
expr_stmt|;
name|setDescription
argument_list|(
name|formatRegExException
argument_list|(
name|s2
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setDescription
argument_list|(
name|KeywordGroup
operator|.
name|getDescriptionForPreview
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|m_kgCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|m_kgRegExp
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|setNameFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_searchRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|s1
operator|=
name|m_sgSearchExpression
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|okEnabled
operator|=
name|okEnabled
operator|&
name|s1
operator|.
name|length
argument_list|()
operator|>
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|okEnabled
condition|)
block|{
name|setDescription
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please enter a search term. For example, to search all fields for<b>Smith</b>, enter%c<p>"
operator|+
literal|"<tt>smith</tt><p>"
operator|+
literal|"To search the field<b>Author</b> for<b>Smith</b> and the field<b>Title</b> for<b>electrical</b>, enter%c<p>"
operator|+
literal|"<tt>author%esmith and title%eelectrical</tt>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AST
name|ast
init|=
name|SearchExpressionParser
operator|.
name|checkSyntax
argument_list|(
name|s1
argument_list|,
name|m_sgCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|m_sgRegExp
operator|.
name|isSelected
argument_list|()
argument_list|)
decl_stmt|;
name|setDescription
argument_list|(
name|SearchGroup
operator|.
name|getDescriptionForPreview
argument_list|(
name|s1
argument_list|,
name|ast
argument_list|,
name|m_sgCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|m_sgRegExp
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_sgRegExp
operator|.
name|isSelected
argument_list|()
condition|)
block|{
try|try
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|s1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|okEnabled
operator|=
literal|false
expr_stmt|;
name|setDescription
argument_list|(
name|formatRegExException
argument_list|(
name|s1
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setNameFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_explicitRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|setDescription
argument_list|(
name|ExplicitGroup
operator|.
name|getDescriptionForPreview
argument_list|()
argument_list|)
expr_stmt|;
name|setNameFontItalic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|m_ok
operator|.
name|setEnabled
argument_list|(
name|okEnabled
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * This is used when a group is converted and the new group supports 	 * explicit adding of entries: All entries that match the previous group are 	 * added to the new group. 	 */
DECL|method|addPreviousEntries ()
specifier|private
name|void
name|addPreviousEntries
parameter_list|()
block|{
comment|// JZTODO lyrics...
name|int
name|i
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|m_basePanel
operator|.
name|frame
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Assign the original group's entries to this group?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Change of Grouping Method"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
return|return;
name|BibtexEntry
name|entry
decl_stmt|;
name|Vector
name|vec
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|m_basePanel
operator|.
name|database
argument_list|()
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
operator|(
name|BibtexEntry
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_editedGroup
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
name|vec
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|vec
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|BibtexEntry
index|[]
name|entries
init|=
operator|new
name|BibtexEntry
index|[
name|vec
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|vec
operator|.
name|toArray
argument_list|(
name|entries
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|warnAssignmentSideEffects
argument_list|(
operator|new
name|AbstractGroup
index|[]
block|{
name|m_resultingGroup
block|}
operator|,
name|entries
operator|,
name|m_basePanel
operator|.
name|getDatabase
argument_list|()
operator|,
name|this
block|)
block|)
function|return;
comment|// the undo information for a conversion to an ExplicitGroup is
comment|// contained completely in the UndoableModifyGroup object.
if|if
condition|(
operator|!
operator|(
name|m_resultingGroup
operator|instanceof
name|ExplicitGroup
operator|)
condition|)
name|m_undoAddPreviousEntires
operator|=
name|m_resultingGroup
operator|.
name|add
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
unit|}  	protected
DECL|method|setDescription (String description)
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|m_description
operator|.
name|setText
argument_list|(
literal|"<html>"
operator|+
name|description
operator|+
literal|"</html>"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|formatRegExException (String regExp, Exception e)
specifier|protected
name|String
name|formatRegExException
parameter_list|(
name|String
name|regExp
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|String
index|[]
name|sa
init|=
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sa
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Util
operator|.
name|quoteForHTML
argument_list|(
name|sa
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"The regular expression<b>%0</b> is invalid%c"
argument_list|,
name|Util
operator|.
name|quoteForHTML
argument_list|(
name|regExp
argument_list|)
argument_list|)
operator|+
literal|"<p><tt>"
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|"</tt>"
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|PatternSyntaxException
operator|)
condition|)
return|return
name|s
return|;
name|int
name|lastNewline
init|=
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|"<br>"
argument_list|)
decl_stmt|;
name|int
name|hat
init|=
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|"^"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastNewline
operator|>=
literal|0
operator|&&
name|hat
operator|>=
literal|0
operator|&&
name|hat
operator|>
name|lastNewline
condition|)
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastNewline
operator|+
literal|4
argument_list|)
operator|+
name|s
operator|.
name|substring
argument_list|(
name|lastNewline
operator|+
literal|4
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
return|;
return|return
name|s
return|;
block|}
end_function

begin_comment
comment|/** 	 * Returns an undo object for adding the edited group's entries to the new 	 * group, or null if this did not occur. 	 */
end_comment

begin_function
DECL|method|getUndoForAddPreviousEntries ()
specifier|public
name|AbstractUndoableEdit
name|getUndoForAddPreviousEntries
parameter_list|()
block|{
return|return
name|m_undoAddPreviousEntires
return|;
block|}
end_function

begin_comment
comment|/** Sets the font of the name entry field. */
end_comment

begin_function
DECL|method|setNameFontItalic (boolean italic)
specifier|protected
name|void
name|setNameFontItalic
parameter_list|(
name|boolean
name|italic
parameter_list|)
block|{
name|Font
name|f
init|=
name|m_name
operator|.
name|getFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isItalic
argument_list|()
operator|!=
name|italic
condition|)
block|{
name|f
operator|=
name|f
operator|.
name|deriveFont
argument_list|(
name|italic
condition|?
name|Font
operator|.
name|ITALIC
else|:
name|Font
operator|.
name|PLAIN
argument_list|)
expr_stmt|;
name|m_name
operator|.
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/** 	 * Returns the int representing the selected hierarchical group context. 	 */
end_comment

begin_function
DECL|method|getContext ()
specifier|protected
name|int
name|getContext
parameter_list|()
block|{
if|if
condition|(
name|m_independentButton
operator|.
name|isSelected
argument_list|()
condition|)
return|return
name|AbstractGroup
operator|.
name|INDEPENDENT
return|;
if|if
condition|(
name|m_intersectionButton
operator|.
name|isSelected
argument_list|()
condition|)
return|return
name|AbstractGroup
operator|.
name|REFINING
return|;
if|if
condition|(
name|m_unionButton
operator|.
name|isSelected
argument_list|()
condition|)
return|return
name|AbstractGroup
operator|.
name|INCLUDING
return|;
return|return
name|AbstractGroup
operator|.
name|INDEPENDENT
return|;
comment|// default
block|}
end_function

begin_function
DECL|method|setContext (int context)
specifier|protected
name|void
name|setContext
parameter_list|(
name|int
name|context
parameter_list|)
block|{
switch|switch
condition|(
name|context
condition|)
block|{
case|case
name|AbstractGroup
operator|.
name|REFINING
case|:
name|m_intersectionButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
case|case
name|AbstractGroup
operator|.
name|INCLUDING
case|:
name|m_unionButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
case|case
name|AbstractGroup
operator|.
name|INDEPENDENT
case|:
default|default:
name|m_independentButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_function

unit|}
end_unit

