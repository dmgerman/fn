begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Morten O. Alver, Nizar N. Batada  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_class
DECL|class|UndoableAddOrRemoveGroup
class|class
name|UndoableAddOrRemoveGroup
extends|extends
name|AbstractUndoableEdit
block|{
DECL|field|groups
specifier|private
name|Vector
name|groups
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
DECL|field|addition
specifier|private
name|boolean
name|addition
decl_stmt|;
DECL|field|name
DECL|field|regexp
DECL|field|field
specifier|private
name|String
name|name
decl_stmt|,
name|regexp
decl_stmt|,
name|field
decl_stmt|;
DECL|field|gs
specifier|private
name|GroupSelector
name|gs
decl_stmt|;
DECL|method|UndoableAddOrRemoveGroup (GroupSelector gs, Vector groups, int index, boolean addition, String field, String name, String regexp)
specifier|public
name|UndoableAddOrRemoveGroup
parameter_list|(
name|GroupSelector
name|gs
parameter_list|,
name|Vector
name|groups
parameter_list|,
name|int
name|index
parameter_list|,
name|boolean
name|addition
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|regexp
parameter_list|)
block|{
name|this
operator|.
name|gs
operator|=
name|gs
expr_stmt|;
name|this
operator|.
name|addition
operator|=
name|addition
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|regexp
operator|=
name|regexp
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|getUndoPresentationName ()
specifier|public
name|String
name|getUndoPresentationName
parameter_list|()
block|{
return|return
literal|"Undo: "
operator|+
operator|(
name|addition
condition|?
literal|"add group"
else|:
literal|"remove group"
operator|)
return|;
block|}
DECL|method|getRedoPresentationName ()
specifier|public
name|String
name|getRedoPresentationName
parameter_list|()
block|{
return|return
literal|"Redo: "
operator|+
operator|(
name|addition
condition|?
literal|"add group"
else|:
literal|"remove group"
operator|)
return|;
block|}
DECL|method|undo ()
specifier|public
name|void
name|undo
parameter_list|()
block|{
name|super
operator|.
name|undo
argument_list|()
expr_stmt|;
name|doOperation
argument_list|(
operator|!
name|addition
argument_list|)
expr_stmt|;
block|}
DECL|method|redo ()
specifier|public
name|void
name|redo
parameter_list|()
block|{
name|super
operator|.
name|redo
argument_list|()
expr_stmt|;
name|doOperation
argument_list|(
name|addition
argument_list|)
expr_stmt|;
block|}
DECL|method|doOperation (boolean add)
specifier|private
name|void
name|doOperation
parameter_list|(
name|boolean
name|add
parameter_list|)
block|{
if|if
condition|(
name|add
condition|)
block|{
name|groups
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remove
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|GroupSelector
operator|.
name|DIM
condition|;
name|i
operator|++
control|)
name|groups
operator|.
name|removeElementAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|gs
operator|.
name|revalidateList
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

