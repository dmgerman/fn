begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A node in the groups tree that holds exactly one AbstractGroup.  *   * @author zieren  */
end_comment

begin_class
DECL|class|GroupTreeNode
specifier|public
class|class
name|GroupTreeNode
extends|extends
name|DefaultMutableTreeNode
block|{
DECL|field|GROUP_UNION_CHILDREN
specifier|public
specifier|static
specifier|final
name|int
name|GROUP_UNION_CHILDREN
init|=
literal|0
decl_stmt|;
DECL|field|GROUP_INTERSECTION_PARENT
specifier|public
specifier|static
specifier|final
name|int
name|GROUP_INTERSECTION_PARENT
init|=
literal|1
decl_stmt|;
DECL|field|GROUP_ITSELF
specifier|public
specifier|static
specifier|final
name|int
name|GROUP_ITSELF
init|=
literal|2
decl_stmt|;
comment|/**      * Creates this node and associates the specified group with it.      */
DECL|method|GroupTreeNode (AbstractGroup group)
specifier|public
name|GroupTreeNode
parameter_list|(
name|AbstractGroup
name|group
parameter_list|)
block|{
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return The group associated with this node.      */
DECL|method|getGroup ()
specifier|public
name|AbstractGroup
name|getGroup
parameter_list|()
block|{
return|return
operator|(
name|AbstractGroup
operator|)
name|getUserObject
argument_list|()
return|;
block|}
comment|/**      * Associates the specified group with this node.      */
DECL|method|setGroup (AbstractGroup group)
specifier|public
name|void
name|setGroup
parameter_list|(
name|AbstractGroup
name|group
parameter_list|)
block|{
name|setUserObject
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a textual representation of this node and its children. This      * representation contains both the tree structure and the textual      * representations of the group associated with each node. It thus allows a      * complete reconstruction of this object and its children.      */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|getChildCount
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Util
operator|.
name|quote
argument_list|(
name|getGroup
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"(),;"
argument_list|,
literal|'\\'
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getChildCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
operator|+
name|getChildAt
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getChildCount
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Parses the textual representation obtained from GroupTreeNode.toString()      * and recreates that node and all of its children from it.      *       * @throws Exception      *             When a group could not be recreated      */
DECL|method|fromString (String s, BibtexDatabase db)
specifier|public
specifier|static
name|GroupTreeNode
name|fromString
parameter_list|(
name|String
name|s
parameter_list|,
name|BibtexDatabase
name|db
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupTreeNode
name|root
init|=
literal|null
decl_stmt|;
name|GroupTreeNode
name|newNode
decl_stmt|;
name|int
name|i
decl_stmt|;
name|String
name|g
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|String
name|subtree
init|=
name|getSubtree
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|newNode
operator|=
name|fromString
argument_list|(
name|subtree
argument_list|,
name|db
argument_list|)
expr_stmt|;
comment|// continue after this subtree by removing it
comment|// and the leading/trailing braces, and
comment|// the comma (that makes 3) that always trails it
comment|// unless it's at the end of s anyway.
name|i
operator|=
literal|3
operator|+
name|subtree
operator|.
name|length
argument_list|()
expr_stmt|;
name|s
operator|=
name|i
operator|>=
name|s
operator|.
name|length
argument_list|()
condition|?
literal|""
else|:
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|i
operator|=
name|indexOfUnquoted
argument_list|(
name|s
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|g
operator|=
name|i
operator|<
literal|0
condition|?
name|s
else|:
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
else|else
name|s
operator|=
literal|""
expr_stmt|;
name|newNode
operator|=
operator|new
name|GroupTreeNode
argument_list|(
name|AbstractGroup
operator|.
name|fromString
argument_list|(
name|Util
operator|.
name|unquote
argument_list|(
name|g
argument_list|,
literal|'\\'
argument_list|)
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|==
literal|null
condition|)
comment|// first node will be root
name|root
operator|=
name|newNode
expr_stmt|;
else|else
name|root
operator|.
name|add
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
return|return
name|root
return|;
block|}
comment|/**      * Returns the substring delimited by a pair of matching braces, with the      * first brace at index 0. Quoted characters are skipped.      *       * @return the matching substring, or "" if not found.      */
DECL|method|getSubtree (String s)
specifier|private
specifier|static
name|String
name|getSubtree
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
name|int
name|level
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
case|case
literal|'\\'
case|:
operator|++
name|i
expr_stmt|;
break|break;
case|case
literal|'('
case|:
operator|++
name|level
expr_stmt|;
break|break;
case|case
literal|')'
case|:
operator|--
name|level
expr_stmt|;
if|if
condition|(
name|level
operator|==
literal|0
condition|)
return|return
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
return|;
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|""
return|;
block|}
comment|/**      * Returns the index of the first occurence of c, skipping quoted special      * characters (escape character: '\\').      *       * @param s      *            The String to search in.      * @param c      *            The character to search      * @return The index of the first unescaped occurence of c in s, or -1 if      *         not found.      */
DECL|method|indexOfUnquoted (String s, char c)
specifier|private
specifier|static
name|int
name|indexOfUnquoted
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|c
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'\\'
condition|)
block|{
operator|++
name|i
expr_stmt|;
comment|// skip quoted special
block|}
else|else
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
name|c
condition|)
return|return
name|i
return|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Creates a deep copy of this node and all of its children, including all      * groups.      *       * @return This object's deep copy.      */
DECL|method|deepCopy ()
specifier|public
name|GroupTreeNode
name|deepCopy
parameter_list|()
block|{
name|GroupTreeNode
name|copy
init|=
operator|new
name|GroupTreeNode
argument_list|(
name|getGroup
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getChildCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|copy
operator|.
name|add
argument_list|(
operator|(
operator|(
name|GroupTreeNode
operator|)
name|getChildAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
comment|/**      * @return An indexed path from the root node to this node. The elements in      *         the returned array represent the child index of each node in the      *         path. If this node is the root node, the returned array has zero      *         elements.      */
DECL|method|getIndexedPath ()
specifier|public
name|int
index|[]
name|getIndexedPath
parameter_list|()
block|{
name|TreeNode
index|[]
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|int
index|[]
name|indexedPath
init|=
operator|new
name|int
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|path
operator|.
name|length
condition|;
operator|++
name|i
control|)
name|indexedPath
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|path
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getIndex
argument_list|(
name|path
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|indexedPath
return|;
block|}
comment|/**      * @param indexedPath      *            A sequence of child indices that describe a path from this      *            node to one of its desendants. Be aware that if<b>indexedPath      *</b> was obtained by getIndexedPath(), this node should      *            usually be the root node.      * @return The descendant found by evaluating<b>indexedPath</b>. If the      *         path could not be traversed completely (i.e. one of the child      *         indices did not exist), null will be returned.      */
DECL|method|getDescendant (int[] indexedPath)
specifier|public
name|GroupTreeNode
name|getDescendant
parameter_list|(
name|int
index|[]
name|indexedPath
parameter_list|)
block|{
name|GroupTreeNode
name|cursor
init|=
name|this
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexedPath
operator|.
name|length
operator|&&
name|cursor
operator|!=
literal|null
condition|;
operator|++
name|i
control|)
name|cursor
operator|=
operator|(
name|GroupTreeNode
operator|)
name|cursor
operator|.
name|getChildAt
argument_list|(
name|indexedPath
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|cursor
return|;
block|}
comment|/**      * A GroupTreeNode can create a SearchRule that finds elements contained in      * its own group (GROUP_ITSELF), or the union of those elements in its own      * group and its children's groups (recursively) (GROUP_UNION_CHILDREN), or      * the intersection of the elements in its own group and its parent's group      * (GROUP_INTERSECTION_PARENT).      *       * @return A SearchRule that finds the desired elements.      */
DECL|method|getSearchRule (int searchMode)
specifier|public
name|SearchRule
name|getSearchRule
parameter_list|(
name|int
name|searchMode
parameter_list|)
block|{
if|if
condition|(
name|searchMode
operator|==
name|GROUP_ITSELF
condition|)
return|return
name|getGroup
argument_list|()
operator|.
name|getSearchRule
argument_list|()
return|;
name|AndOrSearchRuleSet
name|searchRule
init|=
operator|new
name|AndOrSearchRuleSet
argument_list|(
name|searchMode
operator|==
name|GROUP_INTERSECTION_PARENT
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|searchRule
operator|.
name|addRule
argument_list|(
name|getGroup
argument_list|()
operator|.
name|getSearchRule
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchMode
operator|==
name|GROUP_UNION_CHILDREN
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getChildCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|searchRule
operator|.
name|addRule
argument_list|(
operator|(
operator|(
name|GroupTreeNode
operator|)
name|getChildAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getSearchRule
argument_list|(
name|searchMode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchMode
operator|==
name|GROUP_INTERSECTION_PARENT
operator|&&
operator|!
name|isRoot
argument_list|()
condition|)
block|{
name|searchRule
operator|.
name|addRule
argument_list|(
operator|(
operator|(
name|GroupTreeNode
operator|)
name|getParent
argument_list|()
operator|)
operator|.
name|getSearchRule
argument_list|(
name|searchMode
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|searchRule
return|;
block|}
comment|/**      * Scans the subtree rooted at this node.      *       * @return All groups that contain the specified entry.      */
DECL|method|getMatchingGroups (BibtexEntry entry)
specifier|public
name|AbstractGroup
index|[]
name|getMatchingGroups
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
name|Vector
name|matchingGroups
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Enumeration
name|e
init|=
name|preorderEnumeration
argument_list|()
decl_stmt|;
name|AbstractGroup
name|group
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|group
operator|=
operator|(
operator|(
name|GroupTreeNode
operator|)
name|e
operator|.
name|nextElement
argument_list|()
operator|)
operator|.
name|getGroup
argument_list|()
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|contains
argument_list|(
literal|null
argument_list|,
name|entry
argument_list|)
condition|)
comment|// first argument is never used
name|matchingGroups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|AbstractGroup
index|[]
name|matchingGroupsArray
init|=
operator|new
name|AbstractGroup
index|[
name|matchingGroups
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
operator|(
name|AbstractGroup
index|[]
operator|)
name|matchingGroups
operator|.
name|toArray
argument_list|(
name|matchingGroupsArray
argument_list|)
return|;
block|}
block|}
end_class

end_unit

