begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  All programs in this directory and subdirectories are published under the   GNU General Public License as described below.   This program is free software; you can redistribute it and/or modify it   under the terms of the GNU General Public License as published by the Free   Software Foundation; either version 2 of the License, or (at your option)   any later version.   This program is distributed in the hope that it will be useful, but WITHOUT   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for   more details.   You should have received a copy of the GNU General Public License along   with this program; if not, write to the Free Software Foundation, Inc., 59   Temple Place, Suite 330, Boston, MA 02111-1307 USA   Further information about the GNU GPL is available at:  http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DnDConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|InputEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|EntryTable
import|;
end_import

begin_class
DECL|class|EntryTableTransferHandler
specifier|public
class|class
name|EntryTableTransferHandler
extends|extends
name|TransferHandler
block|{
DECL|field|entryTable
specifier|protected
specifier|final
name|EntryTable
name|entryTable
decl_stmt|;
DECL|method|EntryTableTransferHandler (EntryTable entryTable)
specifier|public
name|EntryTableTransferHandler
parameter_list|(
name|EntryTable
name|entryTable
parameter_list|)
block|{
name|this
operator|.
name|entryTable
operator|=
name|entryTable
expr_stmt|;
block|}
DECL|method|getSourceActions (JComponent c)
specifier|public
name|int
name|getSourceActions
parameter_list|(
name|JComponent
name|c
parameter_list|)
block|{
return|return
name|DnDConstants
operator|.
name|ACTION_LINK
return|;
block|}
DECL|method|createTransferable (JComponent c)
specifier|public
name|Transferable
name|createTransferable
parameter_list|(
name|JComponent
name|c
parameter_list|)
block|{
return|return
operator|new
name|TransferableEntrySelection
argument_list|(
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
argument_list|)
return|;
block|}
comment|// add-ons -----------------------
DECL|method|importData (JComponent comp, Transferable t)
specifier|public
name|boolean
name|importData
parameter_list|(
name|JComponent
name|comp
parameter_list|,
name|Transferable
name|t
parameter_list|)
block|{
comment|// for accepting drags (we don't to that)
return|return
literal|false
return|;
block|}
DECL|method|canImport (JComponent comp, DataFlavor[] transferFlavors)
specifier|public
name|boolean
name|canImport
parameter_list|(
name|JComponent
name|comp
parameter_list|,
name|DataFlavor
index|[]
name|transferFlavors
parameter_list|)
block|{
comment|// for accepting drags (we don't to that)
return|return
literal|false
return|;
block|}
DECL|method|exportAsDrag (JComponent comp, InputEvent e, int action)
specifier|public
name|void
name|exportAsDrag
parameter_list|(
name|JComponent
name|comp
parameter_list|,
name|InputEvent
name|e
parameter_list|,
name|int
name|action
parameter_list|)
block|{
comment|// action is always LINK
name|super
operator|.
name|exportAsDrag
argument_list|(
name|comp
argument_list|,
name|e
argument_list|,
name|DnDConstants
operator|.
name|ACTION_LINK
argument_list|)
expr_stmt|;
block|}
DECL|method|exportDone (JComponent source, Transferable data, int action)
specifier|protected
name|void
name|exportDone
parameter_list|(
name|JComponent
name|source
parameter_list|,
name|Transferable
name|data
parameter_list|,
name|int
name|action
parameter_list|)
block|{
comment|// default implementation is OK
name|super
operator|.
name|exportDone
argument_list|(
name|source
argument_list|,
name|data
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
DECL|method|exportToClipboard (JComponent comp, Clipboard clip, int action)
specifier|public
name|void
name|exportToClipboard
parameter_list|(
name|JComponent
name|comp
parameter_list|,
name|Clipboard
name|clip
parameter_list|,
name|int
name|action
parameter_list|)
block|{
comment|// default implementation is OK
name|super
operator|.
name|exportToClipboard
argument_list|(
name|comp
argument_list|,
name|clip
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

