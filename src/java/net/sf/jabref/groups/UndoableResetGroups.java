begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Morten O. Alver, Nizar N. Batada  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_class
DECL|class|UndoableResetGroups
class|class
name|UndoableResetGroups
extends|extends
name|AbstractUndoableEdit
block|{
DECL|field|groups
specifier|private
name|Vector
name|groups
decl_stmt|;
DECL|field|originalGroups
specifier|private
name|Vector
name|originalGroups
decl_stmt|;
DECL|field|gs
specifier|private
name|GroupSelector
name|gs
decl_stmt|;
DECL|field|revalidate
specifier|private
name|boolean
name|revalidate
init|=
literal|true
decl_stmt|;
DECL|method|UndoableResetGroups (GroupSelector gs, Vector groups)
specifier|public
name|UndoableResetGroups
parameter_list|(
name|GroupSelector
name|gs
parameter_list|,
name|Vector
name|groups
parameter_list|)
block|{
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
name|this
operator|.
name|originalGroups
operator|=
operator|(
name|Vector
operator|)
name|groups
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|gs
operator|=
name|gs
expr_stmt|;
block|}
DECL|method|getUndoPresentationName ()
specifier|public
name|String
name|getUndoPresentationName
parameter_list|()
block|{
return|return
literal|"Undo: clear group"
return|;
block|}
DECL|method|getRedoPresentationName ()
specifier|public
name|String
name|getRedoPresentationName
parameter_list|()
block|{
return|return
literal|"Redo: clear group"
return|;
block|}
DECL|method|undo ()
specifier|public
name|void
name|undo
parameter_list|()
block|{
name|super
operator|.
name|undo
argument_list|()
expr_stmt|;
name|groups
operator|.
name|addAll
argument_list|(
name|originalGroups
argument_list|)
expr_stmt|;
if|if
condition|(
name|revalidate
condition|)
name|gs
operator|.
name|revalidateList
argument_list|()
expr_stmt|;
block|}
DECL|method|redo ()
specifier|public
name|void
name|redo
parameter_list|()
block|{
name|super
operator|.
name|redo
argument_list|()
expr_stmt|;
name|groups
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|revalidate
condition|)
name|gs
operator|.
name|revalidateList
argument_list|()
expr_stmt|;
block|}
comment|/**      * Call this method to decide if the group list should be immediately      * revalidated by this operation. Default is true.      *      * @param val a<code>boolean</code> value      */
DECL|method|setRevalidate (boolean val)
specifier|public
name|void
name|setRevalidate
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|revalidate
operator|=
name|val
expr_stmt|;
block|}
block|}
end_class

end_unit

