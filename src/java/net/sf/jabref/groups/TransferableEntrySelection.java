begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* All programs in this directory and subdirectories are published under the  GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it  under the terms of the GNU General Public License as published by the Free  Software Foundation; either version 2 of the License, or (at your option)  any later version.  This program is distributed in the hope that it will be useful, but WITHOUT  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  more details.  You should have received a copy of the GNU General Public License along  with this program; if not, write to the Free Software Foundation, Inc., 59  Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html */
end_comment

begin_package
DECL|package|net.sf.jabref.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_class
DECL|class|TransferableEntrySelection
specifier|public
class|class
name|TransferableEntrySelection
implements|implements
name|Transferable
block|{
DECL|field|flavor
specifier|public
specifier|static
name|DataFlavor
name|flavor
decl_stmt|;
DECL|field|flavors
specifier|public
specifier|static
name|DataFlavor
index|[]
name|flavors
decl_stmt|;
DECL|field|selectedEntries
specifier|public
specifier|final
name|BibtexEntry
index|[]
name|selectedEntries
decl_stmt|;
DECL|method|TransferableEntrySelection (BibtexEntry[] selectedEntries)
specifier|public
name|TransferableEntrySelection
parameter_list|(
name|BibtexEntry
index|[]
name|selectedEntries
parameter_list|)
block|{
name|this
operator|.
name|selectedEntries
operator|=
name|selectedEntries
expr_stmt|;
try|try
block|{
name|flavor
operator|=
operator|new
name|DataFlavor
argument_list|(
name|DataFlavor
operator|.
name|javaJVMLocalObjectMimeType
operator|+
literal|";class=net.sf.jabref.groups.TransferableEntrySelection"
argument_list|)
expr_stmt|;
name|flavors
operator|=
operator|new
name|DataFlavor
index|[]
block|{
name|flavor
block|}
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// never happens
block|}
block|}
DECL|method|getTransferDataFlavors ()
specifier|public
name|DataFlavor
index|[]
name|getTransferDataFlavors
parameter_list|()
block|{
return|return
name|flavors
return|;
block|}
DECL|method|isDataFlavorSupported (DataFlavor someFlavor)
specifier|public
name|boolean
name|isDataFlavorSupported
parameter_list|(
name|DataFlavor
name|someFlavor
parameter_list|)
block|{
return|return
name|someFlavor
operator|.
name|equals
argument_list|(
name|flavor
argument_list|)
return|;
block|}
DECL|method|getTransferData (DataFlavor someFlavor)
specifier|public
name|Object
name|getTransferData
parameter_list|(
name|DataFlavor
name|someFlavor
parameter_list|)
throws|throws
name|UnsupportedFlavorException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|isDataFlavorSupported
argument_list|(
name|someFlavor
argument_list|)
condition|)
throw|throw
operator|new
name|UnsupportedFlavorException
argument_list|(
name|someFlavor
argument_list|)
throw|;
return|return
name|this
return|;
block|}
DECL|method|getSelection ()
specifier|public
name|BibtexEntry
index|[]
name|getSelection
parameter_list|()
block|{
return|return
name|selectedEntries
return|;
block|}
block|}
end_class

end_unit

