begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author zieren  *  * TODO To change the template for this generated type comment go to  * Window - Preferences - Java - Code Style - Code Templates  */
end_comment

begin_class
DECL|class|ExplicitGroup
specifier|public
class|class
name|ExplicitGroup
extends|extends
name|AbstractGroup
implements|implements
name|SearchRule
block|{
DECL|field|ID
specifier|public
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"ExplicitGroup:"
decl_stmt|;
DECL|field|m_entries
specifier|private
name|Set
name|m_entries
decl_stmt|;
DECL|field|m_name
specifier|private
name|String
name|m_name
decl_stmt|;
DECL|method|ExplicitGroup (String name)
specifier|public
name|ExplicitGroup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|m_name
operator|=
name|name
expr_stmt|;
name|m_entries
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
block|}
DECL|method|fromString (String s)
specifier|public
specifier|static
name|AbstractGroup
name|fromString
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|startsWith
argument_list|(
name|ID
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Internal error: ExplicitGroup cannot be created from \""
operator|+
name|s
operator|+
literal|"\""
argument_list|)
throw|;
name|QuotedStringTokenizer
name|tok
init|=
operator|new
name|QuotedStringTokenizer
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|ID
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|SEPARATOR
argument_list|,
name|QUOTE_CHAR
argument_list|)
decl_stmt|;
name|ExplicitGroup
name|newGroup
init|=
operator|new
name|ExplicitGroup
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
name|newGroup
operator|.
name|m_entries
operator|.
name|add
argument_list|(
name|Util
operator|.
name|unquote
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|,
name|QUOTE_CHAR
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|newGroup
return|;
block|}
DECL|method|getSearchRule ()
specifier|public
name|SearchRule
name|getSearchRule
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|m_name
return|;
block|}
DECL|method|supportsAdd ()
specifier|public
name|boolean
name|supportsAdd
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|supportsRemove ()
specifier|public
name|boolean
name|supportsRemove
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|addSelection (BasePanel basePanel)
specifier|public
name|void
name|addSelection
parameter_list|(
name|BasePanel
name|basePanel
parameter_list|)
block|{
name|BibtexEntry
index|[]
name|bes
init|=
name|basePanel
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|Object
name|bibtexkey
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|bibtexkey
operator|=
name|bes
index|[
name|i
index|]
operator|.
name|getField
argument_list|(
literal|"bibtexkey"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtexkey
operator|!=
literal|null
condition|)
comment|// JZTODO : report if null
name|m_entries
operator|.
name|add
argument_list|(
name|bibtexkey
argument_list|)
expr_stmt|;
block|}
comment|// JZTODO undo information
block|}
DECL|method|removeSelection (BasePanel basePanel)
specifier|public
name|void
name|removeSelection
parameter_list|(
name|BasePanel
name|basePanel
parameter_list|)
block|{
name|BibtexEntry
index|[]
name|bes
init|=
name|basePanel
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|Object
name|bibtexkey
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|bibtexkey
operator|=
name|bes
index|[
name|i
index|]
operator|.
name|getField
argument_list|(
literal|"bibtexkey"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtexkey
operator|!=
literal|null
condition|)
comment|// JZTODO : report if null
name|m_entries
operator|.
name|remove
argument_list|(
name|bibtexkey
argument_list|)
expr_stmt|;
block|}
comment|// JZTODO undo information
block|}
DECL|method|contains (Map searchOptions, BibtexEntry entry)
specifier|public
name|int
name|contains
parameter_list|(
name|Map
name|searchOptions
parameter_list|,
name|BibtexEntry
name|entry
parameter_list|)
block|{
return|return
name|m_entries
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"bibtexkey"
argument_list|)
argument_list|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
DECL|method|applyRule (Map searchStrings, BibtexEntry bibtexEntry)
specifier|public
name|int
name|applyRule
parameter_list|(
name|Map
name|searchStrings
parameter_list|,
name|BibtexEntry
name|bibtexEntry
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|searchStrings
argument_list|,
name|bibtexEntry
argument_list|)
return|;
block|}
DECL|method|deepCopy ()
specifier|public
name|AbstractGroup
name|deepCopy
parameter_list|()
block|{
name|ExplicitGroup
name|copy
init|=
operator|new
name|ExplicitGroup
argument_list|(
name|m_name
argument_list|)
decl_stmt|;
name|copy
operator|.
name|m_entries
operator|.
name|addAll
argument_list|(
name|m_entries
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ExplicitGroup
operator|)
condition|)
return|return
literal|false
return|;
name|ExplicitGroup
name|other
init|=
operator|(
name|ExplicitGroup
operator|)
name|o
decl_stmt|;
return|return
name|other
operator|.
name|m_name
operator|.
name|equals
argument_list|(
name|m_name
argument_list|)
operator|&&
name|other
operator|.
name|m_entries
operator|.
name|equals
argument_list|(
name|m_entries
argument_list|)
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ID
operator|+
name|Util
operator|.
name|quote
argument_list|(
name|m_name
argument_list|,
name|SEPARATOR
argument_list|,
name|QUOTE_CHAR
argument_list|)
operator|+
name|SEPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|m_entries
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Util
operator|.
name|quote
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|SEPARATOR
argument_list|,
name|QUOTE_CHAR
argument_list|)
operator|+
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

