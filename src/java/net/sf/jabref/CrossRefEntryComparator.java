begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Nizar N. Batada, Morten O. Alver  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Compares Bibtex entries based on their 'crossref' fields. Entries including  * this field are deemed smaller than entries without this field. This serves  * the purpose of always placing referenced entries after referring entries in  * the .bib file. After this criterion comes comparisons of individual fields.  */
end_comment

begin_class
DECL|class|CrossRefEntryComparator
specifier|public
class|class
name|CrossRefEntryComparator
implements|implements
name|Comparator
block|{
DECL|field|crossRefField
specifier|private
name|String
name|crossRefField
init|=
literal|"crossref"
decl_stmt|;
DECL|method|compare (Object o1, Object o2)
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
throws|throws
name|ClassCastException
block|{
if|if
condition|(
operator|!
operator|(
name|o1
operator|instanceof
name|BibtexEntry
operator|)
operator|||
operator|!
operator|(
name|o2
operator|instanceof
name|BibtexEntry
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Trouble comparing objects. This shouldn't happen."
argument_list|)
throw|;
name|BibtexEntry
name|e1
init|=
operator|(
name|BibtexEntry
operator|)
name|o1
decl_stmt|,
name|e2
init|=
operator|(
name|BibtexEntry
operator|)
name|o2
decl_stmt|;
name|Object
name|f1
init|=
name|e1
operator|.
name|getField
argument_list|(
name|crossRefField
argument_list|)
decl_stmt|,
name|f2
init|=
name|e2
operator|.
name|getField
argument_list|(
name|crossRefField
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|f1
operator|==
literal|null
operator|)
operator|&&
operator|(
name|f2
operator|==
literal|null
operator|)
condition|)
return|return
literal|0
return|;
comment|//secComparator.compare(e1, e2);
if|if
condition|(
operator|(
name|f1
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|f2
operator|!=
literal|null
operator|)
condition|)
return|return
literal|0
return|;
comment|//secComparator.compare(e1, e2);
if|if
condition|(
name|f1
operator|!=
literal|null
condition|)
return|return
operator|-
literal|1
return|;
else|else
return|return
literal|1
return|;
block|}
block|}
end_class

end_unit

