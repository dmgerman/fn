begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.net
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|net
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|ImportFormatReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|CookieHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ProgressMonitorInputStream
import|;
end_import

begin_comment
comment|/**  * @author Erik Putrycz erik.putrycz-at-nrc-cnrc.gc.ca  */
end_comment

begin_class
DECL|class|URLDownload
specifier|public
class|class
name|URLDownload
block|{
DECL|field|source
specifier|private
name|URL
name|source
decl_stmt|;
DECL|field|con
specifier|private
name|URLConnection
name|con
init|=
literal|null
decl_stmt|;
DECL|field|dest
specifier|private
name|File
name|dest
decl_stmt|;
DECL|field|parent
specifier|private
name|Component
name|parent
decl_stmt|;
DECL|field|mimeType
specifier|private
name|String
name|mimeType
init|=
literal|null
decl_stmt|;
DECL|field|content
specifier|private
name|String
name|content
init|=
literal|null
decl_stmt|;
DECL|field|cm
specifier|private
name|CookieHandler
name|cm
decl_stmt|;
comment|/**      * URL download to a string. After construction, call download() and then getStringContent().      * @param _source The URL to download.      */
DECL|method|URLDownload (URL _source)
specifier|public
name|URLDownload
parameter_list|(
name|URL
name|_source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|_source
expr_stmt|;
name|this
operator|.
name|dest
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|setCookieHandler
argument_list|()
expr_stmt|;
block|}
comment|/**      * URL download to a file. After construction, call download().      * @param _parent Parent component.      * @param _source The URL to download.      * @param _dest The file to download into.      */
DECL|method|URLDownload (Component _parent, URL _source, File _dest)
specifier|public
name|URLDownload
parameter_list|(
name|Component
name|_parent
parameter_list|,
name|URL
name|_source
parameter_list|,
name|File
name|_dest
parameter_list|)
block|{
name|source
operator|=
name|_source
expr_stmt|;
name|dest
operator|=
name|_dest
expr_stmt|;
name|parent
operator|=
name|_parent
expr_stmt|;
name|setCookieHandler
argument_list|()
expr_stmt|;
block|}
DECL|method|setCookieHandler ()
specifier|private
name|void
name|setCookieHandler
parameter_list|()
block|{
try|try
block|{
comment|// This should set up JabRef to receive cookies properly
if|if
condition|(
operator|(
name|cm
operator|=
name|CookieHandler
operator|.
name|getDefault
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
name|cm
operator|=
operator|new
name|CookieHandlerImpl
argument_list|()
expr_stmt|;
name|CookieHandler
operator|.
name|setDefault
argument_list|(
name|cm
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
comment|// Setting or getting the system default cookie handler is forbidden
comment|// In this case cookie handling is not possible.
block|}
block|}
DECL|method|getMimeType ()
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|mimeType
return|;
block|}
DECL|method|getURLConnection ()
specifier|public
name|URLConnection
name|getURLConnection
parameter_list|()
block|{
return|return
name|con
return|;
block|}
comment|/**      * This method can be used after download() has been called, to get the contents      * of the download, provided this URLDownload was created with the constructor      * that takes no File argument.      */
DECL|method|getStringContent ()
specifier|public
name|String
name|getStringContent
parameter_list|()
block|{
return|return
name|content
return|;
block|}
DECL|method|openConnectionOnly ()
specifier|public
name|void
name|openConnectionOnly
parameter_list|()
throws|throws
name|IOException
block|{
name|con
operator|=
name|source
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|setRequestProperty
argument_list|(
literal|"User-Agent"
argument_list|,
literal|"Jabref"
argument_list|)
expr_stmt|;
name|mimeType
operator|=
name|con
operator|.
name|getContentType
argument_list|()
expr_stmt|;
block|}
DECL|method|download ()
specifier|public
name|void
name|download
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|con
operator|==
literal|null
condition|)
block|{
name|con
operator|=
name|source
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|setRequestProperty
argument_list|(
literal|"User-Agent"
argument_list|,
literal|"Jabref"
argument_list|)
expr_stmt|;
name|mimeType
operator|=
name|con
operator|.
name|getContentType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dest
operator|!=
literal|null
condition|)
name|downloadToFile
argument_list|()
expr_stmt|;
else|else
name|downloadToString
argument_list|()
expr_stmt|;
block|}
DECL|method|downloadToString ()
specifier|protected
name|void
name|downloadToString
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|input
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|con
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Writer
name|output
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{               }
block|}
name|content
operator|=
name|output
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|downloadToFile ()
specifier|protected
name|void
name|downloadToFile
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|input
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|con
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|output
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{               }
block|}
block|}
DECL|method|copy (InputStream in, OutputStream out)
specifier|public
name|void
name|copy
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|_in
init|=
operator|new
name|ProgressMonitorInputStream
argument_list|(
name|parent
argument_list|,
literal|"Downloading "
operator|+
name|source
operator|.
name|toString
argument_list|()
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|bytesRead
init|=
name|_in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|==
operator|-
literal|1
condition|)
break|break;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copy (InputStream in, Writer out)
specifier|public
name|void
name|copy
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|_in
init|=
operator|new
name|ProgressMonitorInputStream
argument_list|(
name|parent
argument_list|,
literal|"Downloading "
operator|+
name|source
operator|.
name|toString
argument_list|()
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|BufferedReader
name|read
init|=
operator|new
name|BufferedReader
argument_list|(
name|ImportFormatReader
operator|.
name|getReaderDefaultEncoding
argument_list|(
name|_in
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|read
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

