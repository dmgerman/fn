begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.remote
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRef
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|ImportInspectionDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: alver  * Date: Aug 14, 2005  * Time: 8:11:58 PM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
DECL|class|RemoteListener
specifier|public
class|class
name|RemoteListener
extends|extends
name|Thread
implements|implements
name|ImportInspectionDialog
operator|.
name|CallBack
block|{
DECL|field|jabref
specifier|private
name|JabRef
name|jabref
decl_stmt|;
DECL|field|socket
specifier|private
name|ServerSocket
name|socket
decl_stmt|;
DECL|field|active
DECL|field|toStop
specifier|private
name|boolean
name|active
init|=
literal|true
decl_stmt|,
name|toStop
init|=
literal|false
decl_stmt|;
DECL|field|IDENTIFIER
specifier|private
specifier|static
specifier|final
name|String
name|IDENTIFIER
init|=
literal|"jabref"
decl_stmt|;
DECL|method|RemoteListener (JabRef jabref, ServerSocket socket)
specifier|public
name|RemoteListener
parameter_list|(
name|JabRef
name|jabref
parameter_list|,
name|ServerSocket
name|socket
parameter_list|)
block|{
name|this
operator|.
name|jabref
operator|=
name|jabref
expr_stmt|;
name|this
operator|.
name|socket
operator|=
name|socket
expr_stmt|;
block|}
DECL|method|disable ()
specifier|public
name|void
name|disable
parameter_list|()
block|{
name|toStop
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|active
condition|)
block|{
try|try
block|{
name|Socket
name|newSocket
init|=
name|socket
operator|.
name|accept
argument_list|()
decl_stmt|;
name|newSocket
operator|.
name|setSoTimeout
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|toStop
condition|)
block|{
name|active
operator|=
literal|false
expr_stmt|;
return|return;
block|}
comment|//byte[] address = socket.getInetAddress().getAddress();
comment|//System.out.println("Connection: "+address[0]+" "+address[1]+" "+address[2]+" "+address[3]);
name|OutputStream
name|out
init|=
name|newSocket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
name|newSocket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|IDENTIFIER
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|int
name|c
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
literal|'\0'
operator|)
operator|&&
operator|(
name|c
operator|>=
literal|0
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|args
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|Vector
name|loaded
init|=
name|jabref
operator|.
name|processArguments
argument_list|(
name|args
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
operator|(
name|ParserResult
operator|)
name|loaded
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pr
operator|.
name|toOpenTab
argument_list|()
condition|)
block|{
name|jabref
operator|.
name|jrf
operator|.
name|addTab
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|pr
operator|.
name|getFile
argument_list|()
argument_list|,
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
operator|(
name|i
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Add the entries to the open tab.
name|BasePanel
name|panel
init|=
name|jabref
operator|.
name|jrf
operator|.
name|basePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
comment|// There is no open tab to add to, so we create a new tab:
name|jabref
operator|.
name|jrf
operator|.
name|addTab
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|pr
operator|.
name|getFile
argument_list|()
argument_list|,
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
operator|(
name|i
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
name|entries
init|=
operator|new
name|ArrayList
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|)
decl_stmt|;
name|jabref
operator|.
name|jrf
operator|.
name|addImportedEntries
argument_list|(
name|panel
argument_list|,
name|entries
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|newSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|ex
parameter_list|)
block|{
comment|//System.out.println("timeout");
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|newSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketException
name|ex
parameter_list|)
block|{
name|active
operator|=
literal|false
expr_stmt|;
comment|//ex.printStackTrace();
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|openRemoteListener (JabRef jabref)
specifier|public
specifier|static
name|RemoteListener
name|openRemoteListener
parameter_list|(
name|JabRef
name|jabref
parameter_list|)
block|{
try|try
block|{
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"remoteServerPort"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|127
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|RemoteListener
name|listener
init|=
operator|new
name|RemoteListener
argument_list|(
name|jabref
argument_list|,
name|socket
argument_list|)
decl_stmt|;
return|return
name|listener
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Address already in use"
argument_list|)
condition|)
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Attempt to send command line arguments to already running JabRef instance.      * @param args Command line arguments.      * @return true if successful, false otherwise.      */
DECL|method|sendToActiveJabRefInstance (String[] args)
specifier|public
specifier|static
name|boolean
name|sendToActiveJabRefInstance
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|InetAddress
name|local
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
name|local
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"remoteServerPort"
argument_list|)
argument_list|)
decl_stmt|;
name|socket
operator|.
name|setSoTimeout
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|socket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|out
init|=
name|socket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
literal|'\0'
operator|)
operator|&&
operator|(
name|c
operator|>=
literal|0
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Connection timed out."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|IDENTIFIER
operator|.
name|equals
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|error
init|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cannot use port %0 for remote operation; another "
operator|+
literal|"application may be using it. Try specifying another port."
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"remoteServerPort"
argument_list|)
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|args
index|[
name|i
index|]
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// This method is called by the dialog when the user has selected the
comment|// wanted entries, and clicked Ok. The callback object can update status
comment|// line etc.
DECL|method|done (int entriesImported)
specifier|public
name|void
name|done
parameter_list|(
name|int
name|entriesImported
parameter_list|)
block|{
name|jabref
operator|.
name|jrf
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Imported entries"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This method is called by the dialog when the user has cancelled the import.
DECL|method|cancelled ()
specifier|public
name|void
name|cancelled
parameter_list|()
block|{      }
comment|// This method is called by the dialog when the user has cancelled or
comment|// signalled a stop. It is expected that any long-running fetch operations
comment|// will stop after this method is called.
DECL|method|stopFetching ()
specifier|public
name|void
name|stopFetching
parameter_list|()
block|{      }
block|}
end_class

end_unit

