begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on 09-Dec-2003  */
end_comment

begin_package
DECL|package|net.sf.jabref.labelPattern
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
package|;
end_package

begin_comment
comment|/*  * Created on 09-Dec-2003  */
end_comment

begin_comment
comment|/**   * How this works:   * The fields used to autogeneratr keys are stored in an ArrayList   * with the first item of the list being a string representation of    * the key pattern and the second item the spacer character.   * The order of the fields in the autogenerated key will match the   * order of the fields in the ArrayList.   *   * Each entry type will have its own corrosponding ArrayList, to handle   * this, we will have a Hashtable where an entry type> ArrayList.   * There will be a default KP, which will parent a userdefined KP.   *    * Upon generatring keys we will itentify the type of entry, fetch   * the proper Array, store the spacer in a temp. String. By reading the   * field in the Array, the proper value will be fetched and stored in a   * StringBuffer, with the spacer between each field.   *    * Btw. we wont allow for keys like [auth][year]_[pages], is this a    * problem?   *   *   * @author Ulrik Stervbo (ulriks AT ruc.dk)  */
end_comment

begin_comment
comment|//public class DefaultLabelPatterns extends ListResourceBundle{
end_comment

begin_class
DECL|class|DefaultLabelPatterns
specifier|public
class|class
name|DefaultLabelPatterns
extends|extends
name|LabelPattern
block|{
DECL|method|DefaultLabelPatterns ()
specifier|public
name|DefaultLabelPatterns
parameter_list|()
block|{
name|addLabelPattern
argument_list|(
literal|"article"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"book"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"booklet"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"conference"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"inbook"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"incollection"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"inproceedings"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"manual"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"mastersthesis"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"misc"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"phdthesis"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"proceedings"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"techreport"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
name|addLabelPattern
argument_list|(
literal|"unpublished"
argument_list|,
literal|"[author]_[year]"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

