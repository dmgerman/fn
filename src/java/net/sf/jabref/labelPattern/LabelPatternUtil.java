begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on 13-Dec-2003  */
end_comment

begin_package
DECL|package|net.sf.jabref.labelPattern
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|ImportFormatReader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  *   * @author Ulrik Stervbo (ulriks AT ruc.dk)  */
end_comment

begin_comment
comment|/**  * This is the utility class of the LabelPattern package.  * @author Ulrik Stervbo (ulriks AT ruc.dk)  */
end_comment

begin_class
DECL|class|LabelPatternUtil
specifier|public
class|class
name|LabelPatternUtil
block|{
comment|//this is SO crappy, but i have no idea of converting unicode into a String
comment|// the content of the AL is build with the buildLetters()
DECL|field|letters
specifier|private
specifier|static
name|ArrayList
name|letters
init|=
name|builtLetters
argument_list|()
decl_stmt|;
DECL|field|_db
specifier|private
specifier|static
name|BibtexDatabase
name|_db
decl_stmt|;
comment|/** 	 * This method takes a string of the form [field1]spacer[field2]spacer[field3]..., 	 * where the fields are the (required) fields of a BibTex entry. The string is split 	 * into firlds and spacers by recognizing the [ and ]. 	 *   	 * @param keyPattern a<code>String</code> 	 * @return an<code>ArrayList</code> The first item of the list 	 * is a string representation of the key pattern (the parameter), 	 * the second item is the spacer character (a<code>String</code>). 	 */
DECL|method|split (String labelPattern)
specifier|public
specifier|static
name|ArrayList
name|split
parameter_list|(
name|String
name|labelPattern
parameter_list|)
block|{
comment|// A holder for fields of the entry to be used for the key
name|ArrayList
name|_alist
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// Regular expresion for identifying the fields
name|Pattern
name|pi
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\[\\w*\\]"
argument_list|)
decl_stmt|;
comment|// Regular expresion for identifying the spacer
name|Pattern
name|ps
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\].()*\\["
argument_list|)
decl_stmt|;
comment|// The matcher for the field
name|Matcher
name|mi
init|=
name|pi
operator|.
name|matcher
argument_list|(
name|labelPattern
argument_list|)
decl_stmt|;
comment|// The matcher for the spacer char
name|Matcher
name|ms
init|=
name|ps
operator|.
name|matcher
argument_list|(
name|labelPattern
argument_list|)
decl_stmt|;
comment|// Before we do anything, we add the parameter to the ArrayLIst
name|_alist
operator|.
name|add
argument_list|(
name|labelPattern
argument_list|)
expr_stmt|;
comment|// If we can find the spacer character
if|if
condition|(
name|ms
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|t_spacer
init|=
name|ms
operator|.
name|group
argument_list|()
decl_stmt|;
comment|// Remove the `]' and `[' at the ends
comment|// We cant imagine a spacer of omre than one character.
name|t_spacer
operator|=
name|t_spacer
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|_alist
operator|.
name|add
argument_list|(
name|t_spacer
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|mi
operator|.
name|find
argument_list|()
condition|)
block|{
comment|// Get the matched string
name|String
name|t_str
init|=
name|mi
operator|.
name|group
argument_list|()
decl_stmt|;
name|int
name|_sindex
init|=
literal|1
decl_stmt|;
name|int
name|_eindex
init|=
name|t_str
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// Remove the `[' and `]' at the ends
name|t_str
operator|=
name|t_str
operator|.
name|substring
argument_list|(
name|_sindex
argument_list|,
name|_eindex
argument_list|)
expr_stmt|;
name|_alist
operator|.
name|add
argument_list|(
name|t_str
argument_list|)
expr_stmt|;
block|}
return|return
name|_alist
return|;
block|}
comment|/** 	 * Generates a BibTeX label according to the pattern for a given entry type, and 	 * returns the<code>Bibtexentry</code> with the unique label. 	 * @param table a<code>LabelPattern</code> 	 * @param database a<code>BibtexDatabase</code> 	 * @param entryId a<code>String</code> 	 * @return modified Bibtexentry 	 */
DECL|method|makeLabel (LabelPattern table, BibtexDatabase database, BibtexEntry _entry)
specifier|public
specifier|static
name|BibtexEntry
name|makeLabel
parameter_list|(
name|LabelPattern
name|table
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|,
name|BibtexEntry
name|_entry
parameter_list|)
block|{
name|_db
operator|=
name|database
expr_stmt|;
comment|//BibtexEntry _entry = _db.getEntryById(entryId);
name|ArrayList
name|_al
decl_stmt|;
name|String
name|_spacer
decl_stmt|,
name|_label
decl_stmt|;
name|StringBuffer
name|_sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
comment|// get the type of entry
name|String
name|_type
init|=
name|_entry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// Get the arrayList corrosponding to the type
name|_al
operator|=
name|table
operator|.
name|getValue
argument_list|(
name|_type
argument_list|)
expr_stmt|;
name|int
name|_alSize
init|=
name|_al
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// get the pacer (first item is the string version of the key pattern)
comment|// the second is the spacer, the third, fourth and so forth are fields
name|_spacer
operator|=
name|_al
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|_alSize
condition|;
name|i
operator|++
control|)
block|{
comment|// hmmmm..... the fields have different format...
comment|//TODO deal with different format for the fields :-)
name|String
name|_field
init|=
name|_al
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|_field
operator|.
name|equals
argument_list|(
literal|"author"
argument_list|)
condition|)
block|{
name|_sb
operator|.
name|append
argument_list|(
name|firstAuthor
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|_field
operator|.
name|equals
argument_list|(
literal|"editor"
argument_list|)
condition|)
block|{
name|_sb
operator|.
name|append
argument_list|(
name|firstAuthor
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|_field
operator|.
name|equals
argument_list|(
literal|"firstpage"
argument_list|)
condition|)
block|{
name|_sb
operator|.
name|append
argument_list|(
name|firstPage
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|_field
operator|.
name|equals
argument_list|(
literal|"lastpage"
argument_list|)
condition|)
block|{
name|_sb
operator|.
name|append
argument_list|(
name|lastPage
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// we havent seen any special demands
else|else
block|{
name|_sb
operator|.
name|append
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
name|_al
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|_alSize
operator|-
literal|1
condition|)
block|{
comment|// It is not the space before the last field
name|_sb
operator|.
name|append
argument_list|(
name|_spacer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/** 		 * Edited by Morten Alver 2004.02.04. 		 * 		 * We now have a system for easing key duplicate prevention, so 		 * I am changing this method to conform to it. 		 *     		 // here we make sure the key is unique		 		   _label = makeLabelUnique(_sb.toString());				 		   _entry.setField(Globals.KEY_FIELD, _label);		 		   return _entry; 		*/
comment|// Remove all illegal characters from the key.
name|_label
operator|=
name|Util
operator|.
name|checkLegalKey
argument_list|(
name|_sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try new keys until we get a unique one:
if|if
condition|(
name|_db
operator|.
name|setCiteKeyForEntry
argument_list|(
name|_entry
operator|.
name|getId
argument_list|()
argument_list|,
name|_label
argument_list|)
condition|)
block|{
name|char
name|c
init|=
literal|'b'
decl_stmt|;
name|String
name|modKey
init|=
name|_label
operator|+
literal|"a"
decl_stmt|;
while|while
condition|(
name|_db
operator|.
name|setCiteKeyForEntry
argument_list|(
name|_entry
operator|.
name|getId
argument_list|()
argument_list|,
name|modKey
argument_list|)
condition|)
name|modKey
operator|=
name|_label
operator|+
operator|(
call|(
name|char
call|)
argument_list|(
name|c
operator|++
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|_entry
return|;
comment|/** End of edit, Morten Alver 2004.02.04.  */
block|}
comment|/** 	 * This method returns a truely unique label (in the BibtexDatabase), by taking a  	 * label and add the letters a-z until a unique key is found. 	 * @param key a<code>String</code> 	 * @return a unique label 	 */
DECL|method|makeLabelUnique (String label)
specifier|public
specifier|static
name|String
name|makeLabelUnique
parameter_list|(
name|String
name|label
parameter_list|)
block|{
comment|// First I tried to make this recursive, but had to give up. I needed to
comment|// do too many chacks of different kinds.
name|String
name|_orgLabel
init|=
name|label
decl_stmt|;
name|String
name|_newLabel
init|=
name|label
decl_stmt|;
name|int
name|lettersSize
init|=
name|letters
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lettersSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isLabelUnique
argument_list|(
name|_newLabel
argument_list|)
condition|)
block|{
comment|// Hurray! the key is unique! lets get outta here
break|break;
block|}
else|else
block|{
comment|// though luck! lets add a new letter...
name|_newLabel
operator|=
name|_orgLabel
operator|+
name|letters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|_newLabel
return|;
block|}
comment|/** 	 * Tests whether a given label is unique. 	 * @param label a<code>String</code> 	 * @return<code>true</code> if and only if the<code>label</code> is unique 	 */
DECL|method|isLabelUnique (String label)
specifier|public
specifier|static
name|boolean
name|isLabelUnique
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|boolean
name|_isUnique
init|=
literal|true
decl_stmt|;
name|BibtexEntry
name|_entry
decl_stmt|;
name|int
name|_dbSize
init|=
name|_db
operator|.
name|getEntryCount
argument_list|()
decl_stmt|;
comment|// run through the whole DB and check the key field
comment|// if this could be made recursive I would be very happy
comment|// it kinda sux that we have to run through the whole db.
comment|// The idea here is that if we meet NO match, the _duplicate
comment|// field will be true
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_dbSize
condition|;
name|i
operator|++
control|)
block|{
name|_entry
operator|=
name|_db
operator|.
name|getEntryById
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// oh my! there is a match! we better set the uniqueness to false
comment|// and leave this for-loop all together
if|if
condition|(
name|_entry
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|KEY_FIELD
argument_list|)
operator|.
name|equals
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|_isUnique
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
return|return
name|_isUnique
return|;
block|}
comment|/** 	 * Gets the last name of the first author/editor 	 * @param authorField a<code>String</code> 	 * @return the sur name of an author/editor 	 */
DECL|method|firstAuthor (String authorField)
specifier|private
specifier|static
name|String
name|firstAuthor
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|String
name|author
init|=
literal|""
decl_stmt|;
comment|// This code was part of 'ApplyRule' in 'ArticleLabelRule'
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// if author is empty
if|if
condition|(
name|tokens
index|[
literal|0
index|]
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
operator|>
literal|0
condition|)
name|tokens
index|[
literal|0
index|]
operator|=
name|ImportFormatReader
operator|.
name|fixAuthor
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// convert lastname, firstname to firstname lastname
name|String
index|[]
name|firstAuthor
init|=
name|tokens
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// lastname, firstname
name|author
operator|+=
name|firstAuthor
index|[
name|firstAuthor
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
return|return
name|author
return|;
block|}
comment|/** 	 * Split the pages field into two and return the first one 	 * @param pages a<code>String</code> 	 * @return the first page number 	 */
DECL|method|firstPage (String pages)
specifier|private
specifier|static
name|String
name|firstPage
parameter_list|(
name|String
name|pages
parameter_list|)
block|{
name|String
index|[]
name|_pages
init|=
name|pages
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
return|return
name|_pages
index|[
literal|0
index|]
return|;
block|}
comment|/** 	 * Split the pages field into two and return the last one 	 * @param pages a<code>String</code> 	 * @return the last page number 	 */
DECL|method|lastPage (String pages)
specifier|private
specifier|static
name|String
name|lastPage
parameter_list|(
name|String
name|pages
parameter_list|)
block|{
name|String
index|[]
name|_pages
init|=
name|pages
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
return|return
name|_pages
index|[
literal|1
index|]
return|;
block|}
comment|/** 	 * I<b>HATE</b> this method!! I looked and looked but couldn't find a way to  	 * turn 61 (or in real unicode 0061) into the letter 'a' - crap! 	 * @return an<code>ArrayList</code> which shouldn't be!! 	 */
DECL|method|builtLetters ()
specifier|private
specifier|static
name|ArrayList
name|builtLetters
parameter_list|()
block|{
name|ArrayList
name|_letters
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"g"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"h"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"j"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"l"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"m"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"o"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"q"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"r"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"t"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"u"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"v"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
return|return
name|_letters
return|;
block|}
block|}
end_class

end_unit

