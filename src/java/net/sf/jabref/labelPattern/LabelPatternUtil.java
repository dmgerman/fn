begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.labelPattern
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
operator|.
name|RemoveLatexCommands
import|;
end_import

begin_comment
comment|/**  *  * @author Ulrik Stervbo (ulriks AT ruc.dk)  */
end_comment

begin_comment
comment|/**  * This is the utility class of the LabelPattern package.  * @author Ulrik Stervbo (ulriks AT ruc.dk)  */
end_comment

begin_class
DECL|class|LabelPatternUtil
specifier|public
class|class
name|LabelPatternUtil
block|{
comment|// All single characters that we can use for extending a key to make it unique:
DECL|field|CHARS
specifier|private
specifier|static
name|String
name|CHARS
init|=
literal|"abcdefghijklmnopqrstuvwxyz"
decl_stmt|;
DECL|field|DEFAULT_LABELPATTERN
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|DEFAULT_LABELPATTERN
decl_stmt|;
static|static
block|{
name|updateDefaultPattern
argument_list|()
expr_stmt|;
block|}
DECL|field|_db
specifier|private
specifier|static
name|BibtexDatabase
name|_db
decl_stmt|;
DECL|method|updateDefaultPattern ()
specifier|public
specifier|static
name|void
name|updateDefaultPattern
parameter_list|()
block|{
name|DEFAULT_LABELPATTERN
operator|=
name|split
argument_list|(
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
literal|"defaultLabelPattern"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method takes a string of the form [field1]spacer[field2]spacer[field3]...,      * where the fields are the (required) fields of a BibTex entry. The string is split      * into fields and spacers by recognizing the [ and ].      *      * @param labelPattern a<code>String</code>      * @return an<code>ArrayList</code> The first item of the list      * is a string representation of the key pattern (the parameter),      * the second item is the spacer character (a<code>String</code>).      */
DECL|method|split (String labelPattern)
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|split
parameter_list|(
name|String
name|labelPattern
parameter_list|)
block|{
comment|// A holder for fields of the entry to be used for the key
name|ArrayList
argument_list|<
name|String
argument_list|>
name|_alist
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Before we do anything, we add the parameter to the ArrayLIst
name|_alist
operator|.
name|add
argument_list|(
name|labelPattern
argument_list|)
expr_stmt|;
comment|//String[] ss = labelPattern.split("\\[|\\]");
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|labelPattern
argument_list|,
literal|"[]"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|_alist
operator|.
name|add
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|_alist
return|;
comment|/*        // Regular expresion for identifying the fields        Pattern pi = Pattern.compile("\\[\\w*\\]");        // Regular expresion for identifying the spacer        Pattern ps = Pattern.compile("\\].()*\\[");         // The matcher for the field        Matcher mi = pi.matcher(labelPattern);        // The matcher for the spacer char        Matcher ms = ps.matcher(labelPattern);         // Before we do anything, we add the parameter to the ArrayLIst        _alist.add(labelPattern);         // If we can find the spacer character        if(ms.find()){      String t_spacer = ms.group();       // Remove the `]' and `[' at the ends       // We cant imagine a spacer of omre than one character.       t_spacer = t_spacer.substring(1,2);       _alist.add(t_spacer);        }         while(mi.find()){      // Get the matched string      String t_str = mi.group();       int _sindex = 1;       int _eindex = t_str.length() -1;       // Remove the `[' and `]' at the ends       t_str = t_str.substring(_sindex, _eindex);      _alist.add(t_str);        }         return _alist;*/
block|}
comment|/**      * Generates a BibTeX label according to the pattern for a given entry type, and      * returns the<code>Bibtexentry</code> with the unique label.      * @param table a<code>LabelPattern</code>      * @param database a<code>BibtexDatabase</code>      * @param _entry a<code>BibtexEntry</code>      * @return modified Bibtexentry      */
DECL|method|makeLabel (LabelPattern table, BibtexDatabase database, BibtexEntry _entry)
specifier|public
specifier|static
name|BibtexEntry
name|makeLabel
parameter_list|(
name|LabelPattern
name|table
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|,
name|BibtexEntry
name|_entry
parameter_list|)
block|{
name|_db
operator|=
name|database
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|_al
decl_stmt|;
name|String
name|_label
decl_stmt|;
name|StringBuffer
name|_sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|forceUpper
init|=
literal|false
decl_stmt|,
name|forceLower
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// get the type of entry
name|String
name|_type
init|=
name|_entry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// Get the arrayList corresponding to the type
name|_al
operator|=
name|table
operator|.
name|getValue
argument_list|(
name|_type
argument_list|)
expr_stmt|;
name|int
name|_alSize
init|=
name|_al
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|field
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|_alSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|val
init|=
name|_al
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"["
argument_list|)
condition|)
block|{
name|field
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"]"
argument_list|)
condition|)
block|{
name|field
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
condition|)
block|{
comment|/*                      * Edited by Seb Wills<saw27@mrao.cam.ac.uk> on 13-Apr-2004                      * Added new pseudo-fields "shortyear" and "veryshorttitle",                      * and and ":lower" modifier for all fields (in a way easily                      * extended to other modifiers). Helpfile                      * help/LabelPatterns.html updated accordingly.                      */
comment|// check whether there is a modifier on the end such as
comment|// ":lower"
comment|// String modifier = null;
name|String
index|[]
name|parts
init|=
name|parseFieldMarker
argument_list|(
name|val
argument_list|)
decl_stmt|;
comment|//val.split(":");
name|String
name|label
init|=
name|makeLabel
argument_list|(
name|_entry
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// apply modifier if present
if|if
condition|(
name|parts
operator|.
name|length
operator|>
literal|1
condition|)
name|label
operator|=
name|applyModifiers
argument_list|(
name|label
argument_list|,
name|parts
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|_sb
operator|.
name|append
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_sb
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Remove all illegal characters from the key.
name|_label
operator|=
name|Util
operator|.
name|checkLegalKey
argument_list|(
name|_sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Patch by Toralf Senger:
comment|// Remove Regular Expressions while generating Keys
name|String
name|regex
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"KeyPatternRegex"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|regex
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|regex
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|String
name|replacement
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"KeyPatternReplacement"
argument_list|)
decl_stmt|;
name|_label
operator|=
name|_label
operator|.
name|replaceAll
argument_list|(
name|regex
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|forceUpper
condition|)
block|{
name|_label
operator|=
name|_label
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|forceLower
condition|)
block|{
name|_label
operator|=
name|_label
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|String
name|oldKey
init|=
name|_entry
operator|.
name|getCiteKey
argument_list|()
decl_stmt|;
name|int
name|occurences
init|=
name|_db
operator|.
name|getNumberOfKeyOccurences
argument_list|(
name|_label
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|oldKey
operator|!=
literal|null
operator|)
operator|&&
name|oldKey
operator|.
name|equals
argument_list|(
name|_label
argument_list|)
condition|)
name|occurences
operator|--
expr_stmt|;
comment|// No change, so we can accept one dupe.
name|boolean
name|alwaysAddLetter
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"keyGenAlwaysAddLetter"
argument_list|)
decl_stmt|,
name|firstLetterA
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"keyGenFirstLetterA"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|alwaysAddLetter
operator|&&
operator|(
name|occurences
operator|==
literal|0
operator|)
condition|)
block|{
comment|// No dupes found, so we can just go ahead.
if|if
condition|(
operator|!
name|_label
operator|.
name|equals
argument_list|(
name|oldKey
argument_list|)
condition|)
name|_db
operator|.
name|setCiteKeyForEntry
argument_list|(
name|_entry
operator|.
name|getId
argument_list|()
argument_list|,
name|_label
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The key is already in use, so we must modify it.
name|int
name|number
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|alwaysAddLetter
operator|&&
operator|!
name|firstLetterA
condition|)
name|number
operator|=
literal|1
expr_stmt|;
name|String
name|moddedKey
init|=
name|_label
operator|+
name|getAddition
argument_list|(
name|number
argument_list|)
decl_stmt|;
name|occurences
operator|=
name|_db
operator|.
name|getNumberOfKeyOccurences
argument_list|(
name|moddedKey
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|oldKey
operator|!=
literal|null
operator|)
operator|&&
name|oldKey
operator|.
name|equals
argument_list|(
name|moddedKey
argument_list|)
condition|)
name|occurences
operator|--
expr_stmt|;
while|while
condition|(
name|occurences
operator|>
literal|0
condition|)
block|{
name|number
operator|++
expr_stmt|;
name|moddedKey
operator|=
name|_label
operator|+
name|getAddition
argument_list|(
name|number
argument_list|)
expr_stmt|;
name|occurences
operator|=
name|_db
operator|.
name|getNumberOfKeyOccurences
argument_list|(
name|moddedKey
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|oldKey
operator|!=
literal|null
operator|)
operator|&&
name|oldKey
operator|.
name|equals
argument_list|(
name|moddedKey
argument_list|)
condition|)
name|occurences
operator|--
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|moddedKey
operator|.
name|equals
argument_list|(
name|oldKey
argument_list|)
condition|)
block|{
name|_db
operator|.
name|setCiteKeyForEntry
argument_list|(
name|_entry
operator|.
name|getId
argument_list|()
argument_list|,
name|moddedKey
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|_entry
return|;
comment|/** End of edit, Morten Alver 2004.02.04.  */
block|}
comment|/**      * Applies modifiers to a label generated based on a field marker.      * @param label The generated label.      * @param parts String array containing the modifiers.      * @param offset The number of initial items in the modifiers array to skip.      * @return The modified label.      */
DECL|method|applyModifiers (String label, String[] parts, int offset)
specifier|public
specifier|static
name|String
name|applyModifiers
parameter_list|(
name|String
name|label
parameter_list|,
name|String
index|[]
name|parts
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|parts
operator|.
name|length
operator|>
name|offset
condition|)
for|for
control|(
name|int
name|j
init|=
name|offset
init|;
name|j
operator|<
name|parts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|modifier
init|=
name|parts
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|modifier
operator|.
name|equals
argument_list|(
literal|"lower"
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|modifier
operator|.
name|equals
argument_list|(
literal|"upper"
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|modifier
operator|.
name|equals
argument_list|(
literal|"abbr"
argument_list|)
condition|)
block|{
comment|// Abbreviate - that is,
comment|// System.out.println(_sbvalue.toString());
name|StringBuffer
name|abbr
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|words
init|=
name|label
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[\\{\\}']"
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|"[\\(\\) \r\n\"]"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|word
init|=
literal|0
init|;
name|word
operator|<
name|words
operator|.
name|length
condition|;
name|word
operator|++
control|)
if|if
condition|(
name|words
index|[
name|word
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|abbr
operator|.
name|append
argument_list|(
name|words
index|[
name|word
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|=
name|abbr
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|modifier
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
operator|&&
name|modifier
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
comment|// Alternate text modifier in parentheses. Should be inserted if
comment|// the label is empty:
if|if
condition|(
name|label
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|(
name|modifier
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|)
condition|)
return|return
name|modifier
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|modifier
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"Key generator warning: unknown modifier '"
operator|+
name|modifier
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|label
return|;
block|}
DECL|method|makeLabel (BibtexEntry _entry, String val)
specifier|public
specifier|static
name|String
name|makeLabel
parameter_list|(
name|BibtexEntry
name|_entry
parameter_list|,
name|String
name|val
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|val
operator|.
name|startsWith
argument_list|(
literal|"auth"
argument_list|)
operator|||
name|val
operator|.
name|startsWith
argument_list|(
literal|"pureauth"
argument_list|)
condition|)
block|{
comment|/*                  * For label code "auth...": if there is no author, but there                  * are editor(s) (e.g. for an Edited Book), use the editor(s)                  * instead. (saw27@mrao.cam.ac.uk). This is what most people                  * want, but in case somebody really needs a field which expands                  * to nothing if there is no author (e.g. someone who uses both                  * "auth" and "ed" in the same label), we provide an alternative                  * form "pureauth..." which does not do this fallback                  * substitution of editor.                  */
name|String
name|authString
init|=
name|_entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|startsWith
argument_list|(
literal|"pure"
argument_list|)
condition|)
block|{
comment|// remove the "pure" prefix so the remaining
comment|// code in this section functions correctly
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|authString
operator|==
literal|null
operator|||
name|authString
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|authString
operator|=
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Gather all author-related checks, so we don't
comment|// have to check all the time.
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"auth"
argument_list|)
condition|)
block|{
return|return
name|firstAuthor
argument_list|(
name|authString
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"authors"
argument_list|)
condition|)
block|{
return|return
name|allAuthors
argument_list|(
name|authString
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"authorsAlpha"
argument_list|)
condition|)
block|{
return|return
name|authorsAlpha
argument_list|(
name|authString
argument_list|)
return|;
block|}
comment|// Last author's last name
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"authorLast"
argument_list|)
condition|)
block|{
return|return
name|lastAuthor
argument_list|(
name|authString
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"authorIni"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|oneAuthorPlusIni
argument_list|(
name|authString
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"authIni[\\d]+"
argument_list|)
condition|)
block|{
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|authIniN
argument_list|(
name|authString
argument_list|,
name|num
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"auth.auth.ea"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|authAuthEa
argument_list|(
name|authString
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"auth.etal"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|authEtal
argument_list|(
name|authString
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"authshort"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|authshort
argument_list|(
name|authString
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"auth[\\d]+_[\\d]+"
argument_list|)
condition|)
block|{
name|String
index|[]
name|nums
init|=
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|authN_M
argument_list|(
name|authString
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|1
index|]
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"auth\\d+"
argument_list|)
condition|)
block|{
comment|// authN. First N chars of the first author's last
comment|// name.
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fa
init|=
name|firstAuthor
argument_list|(
name|authString
argument_list|)
decl_stmt|;
if|if
condition|(
name|fa
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|num
operator|>
name|fa
operator|.
name|length
argument_list|()
condition|)
name|num
operator|=
name|fa
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|fa
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|num
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"authors\\d+"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|NAuthors
argument_list|(
name|authString
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
else|else
block|{
comment|// This "auth" business was a dead end, so just
comment|// use it literally:
return|return
name|getField
argument_list|(
name|_entry
argument_list|,
name|val
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|startsWith
argument_list|(
literal|"ed"
argument_list|)
condition|)
block|{
comment|// Gather all markers starting with "ed" here, so we
comment|// don't have to check all the time.
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"edtr"
argument_list|)
condition|)
block|{
return|return
name|firstAuthor
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"editors"
argument_list|)
condition|)
block|{
return|return
name|allAuthors
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
comment|// Last author's last name
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"editorLast"
argument_list|)
condition|)
block|{
return|return
name|lastAuthor
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"editorIni"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|oneAuthorPlusIni
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"edtrIni[\\d]+"
argument_list|)
condition|)
block|{
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|authIniN
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|num
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"edtr[\\d]+_[\\d]+"
argument_list|)
condition|)
block|{
name|String
index|[]
name|nums
init|=
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|authN_M
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|1
index|]
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"edtr.edtr.ea"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|authAuthEa
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"edtrshort"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|authshort
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
comment|// authN. First N chars of the first author's last
comment|// name.
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"edtr\\d+"
argument_list|)
condition|)
block|{
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fa
init|=
name|firstAuthor
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fa
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|num
operator|>
name|fa
operator|.
name|length
argument_list|()
condition|)
name|num
operator|=
name|fa
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|fa
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|num
argument_list|)
return|;
block|}
else|else
block|{
comment|// This "ed" business was a dead end, so just
comment|// use it literally:
return|return
name|getField
argument_list|(
name|_entry
argument_list|,
name|val
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"firstpage"
argument_list|)
condition|)
block|{
return|return
name|firstPage
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"lastpage"
argument_list|)
condition|)
block|{
return|return
name|lastPage
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"shorttitle"
argument_list|)
condition|)
block|{
return|return
name|getTitleWords
argument_list|(
literal|3
argument_list|,
name|_entry
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"shortyear"
argument_list|)
condition|)
block|{
name|String
name|ss
init|=
name|_entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|startsWith
argument_list|(
literal|"in"
argument_list|)
operator|||
name|ss
operator|.
name|startsWith
argument_list|(
literal|"sub"
argument_list|)
condition|)
block|{
return|return
literal|"IP"
return|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
return|return
name|ss
operator|.
name|substring
argument_list|(
name|ss
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ss
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"veryshorttitle"
argument_list|)
condition|)
block|{
return|return
name|getTitleWords
argument_list|(
literal|1
argument_list|,
name|_entry
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"keyword\\d+"
argument_list|)
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|kw
init|=
name|getField
argument_list|(
name|_entry
argument_list|,
literal|"keywords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|kw
operator|!=
literal|null
condition|)
block|{
comment|// TODO: merge this functionality with Util.getSeparatedKeywords
name|String
index|[]
name|keywords
init|=
name|kw
operator|.
name|split
argument_list|(
literal|"[,;]\\s*"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|num
operator|>
literal|0
operator|)
operator|&&
operator|(
name|num
operator|<
name|keywords
operator|.
name|length
operator|)
condition|)
name|sb
operator|.
name|append
argument_list|(
name|keywords
index|[
name|num
operator|-
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
comment|// we haven't seen any special demands
return|return
name|getField
argument_list|(
name|_entry
argument_list|,
name|val
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
comment|/**      * Look up a field of a BibtexEntry, returning its String value, or an      * empty string if it isn't set.      * @param entry The entry.      * @param field The field to look up.      * @return The field value.      */
DECL|method|getField (BibtexEntry entry, String field)
specifier|private
specifier|static
name|String
name|getField
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|Object
name|o
init|=
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|o
operator|!=
literal|null
condition|?
operator|(
name|String
operator|)
name|o
else|:
literal|""
return|;
block|}
comment|/**      * Computes an appendix to a BibTeX key that could make it unique. We use      * a-z for numbers 0-25, and then aa-az, ba-bz, etc.      *       * @param number      *            The appendix number.      * @return The String to append.      */
DECL|method|getAddition (int number)
specifier|private
specifier|static
name|String
name|getAddition
parameter_list|(
name|int
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>=
name|CHARS
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|lastChar
init|=
name|number
operator|%
name|CHARS
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|getAddition
argument_list|(
name|number
operator|/
name|CHARS
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
name|CHARS
operator|.
name|substring
argument_list|(
name|lastChar
argument_list|,
name|lastChar
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
return|return
name|CHARS
operator|.
name|substring
argument_list|(
name|number
argument_list|,
name|number
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|getTitleWords (int number, BibtexEntry _entry)
specifier|static
name|String
name|getTitleWords
parameter_list|(
name|int
name|number
parameter_list|,
name|BibtexEntry
name|_entry
parameter_list|)
block|{
name|String
name|ss
init|=
operator|(
operator|new
name|RemoveLatexCommands
argument_list|()
operator|)
operator|.
name|format
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuffer
name|_sbvalue
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|,
name|current
decl_stmt|;
name|int
name|piv
init|=
literal|0
decl_stmt|,
name|words
init|=
literal|0
decl_stmt|;
comment|// sorry for being English-centric. I guess these
comment|// words should really be an editable preference.
name|mainl
label|:
while|while
condition|(
operator|(
name|piv
operator|<
name|ss
operator|.
name|length
argument_list|()
operator|)
operator|&&
operator|(
name|words
operator|<
name|number
operator|)
condition|)
block|{
name|current
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
comment|// Get the next word:
while|while
condition|(
operator|(
name|piv
operator|<
name|ss
operator|.
name|length
argument_list|()
operator|)
operator|&&
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|ss
operator|.
name|charAt
argument_list|(
name|piv
argument_list|)
argument_list|)
operator|&&
operator|(
name|ss
operator|.
name|charAt
argument_list|(
name|piv
argument_list|)
operator|!=
literal|'-'
operator|)
condition|)
block|{
name|current
operator|.
name|append
argument_list|(
name|ss
operator|.
name|charAt
argument_list|(
name|piv
argument_list|)
argument_list|)
expr_stmt|;
name|piv
operator|++
expr_stmt|;
comment|//System.out.println(".. "+piv+" '"+current.toString()+"'");
block|}
name|piv
operator|++
expr_stmt|;
comment|// Check if it is ok:
name|String
name|word
init|=
name|current
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|word
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue
name|mainl
continue|;
for|for
control|(
name|int
name|_i
init|=
literal|0
init|;
name|_i
operator|<
name|Globals
operator|.
name|SKIP_WORDS
operator|.
name|length
condition|;
name|_i
operator|++
control|)
block|{
if|if
condition|(
name|word
operator|.
name|equalsIgnoreCase
argument_list|(
name|Globals
operator|.
name|SKIP_WORDS
index|[
name|_i
index|]
argument_list|)
condition|)
block|{
continue|continue
name|mainl
continue|;
block|}
block|}
comment|// If we get here, the word was accepted.
if|if
condition|(
name|_sbvalue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|_sbvalue
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|_sbvalue
operator|.
name|append
argument_list|(
name|word
argument_list|)
expr_stmt|;
name|words
operator|++
expr_stmt|;
block|}
return|return
name|_sbvalue
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|keepLettersAndDigitsOnly (String in)
specifier|static
name|String
name|keepLettersAndDigitsOnly
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Tests whether a given label is unique.      * @param label a<code>String</code>      * @return<code>true</code> if and only if the<code>label</code> is unique      */
DECL|method|isLabelUnique (String label)
specifier|public
specifier|static
name|boolean
name|isLabelUnique
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|boolean
name|_isUnique
init|=
literal|true
decl_stmt|;
name|BibtexEntry
name|_entry
decl_stmt|;
name|int
name|_dbSize
init|=
name|_db
operator|.
name|getEntryCount
argument_list|()
decl_stmt|;
comment|// run through the whole DB and check the key field
comment|// if this could be made recursive I would be very happy
comment|// it kinda sux that we have to run through the whole db.
comment|// The idea here is that if we meet NO match, the _duplicate
comment|// field will be true
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_dbSize
condition|;
name|i
operator|++
control|)
block|{
name|_entry
operator|=
name|_db
operator|.
name|getEntryById
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// oh my! there is a match! we better set the uniqueness to false
comment|// and leave this for-loop all together
if|if
condition|(
name|_entry
operator|.
name|getField
argument_list|(
name|BibtexFields
operator|.
name|KEY_FIELD
argument_list|)
operator|.
name|equals
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|_isUnique
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
return|return
name|_isUnique
return|;
block|}
comment|/**      * Gets the last name of the first author/editor      *       * @param authorField      *            a<code>String</code>      * @return the surname of an author/editor or "" if no author was found      *    This method is guaranteed to never return null.      *       * @throws NullPointerException      *             if authorField == null      */
DECL|method|firstAuthor (String authorField)
specifier|public
specifier|static
name|String
name|firstAuthor
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|AuthorList
name|al
init|=
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|authorField
argument_list|)
decl_stmt|;
if|if
condition|(
name|al
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|""
return|;
name|String
name|s
init|=
name|al
operator|.
name|getAuthor
argument_list|(
literal|0
argument_list|)
operator|.
name|getLast
argument_list|()
decl_stmt|;
return|return
name|s
operator|!=
literal|null
condition|?
name|s
else|:
literal|""
return|;
block|}
comment|/**      * Gets the von part and the last name of the first author/editor      *      * @param authorField      *            a<code>String</code>      * @return the von part and surname of an author/editor or "" if no author was found.      *  This method is guaranteed to never return null.      *      * @throws NullPointerException      *             if authorField == null      */
DECL|method|firstAuthorVonAndLast (String authorField)
specifier|public
specifier|static
name|String
name|firstAuthorVonAndLast
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|AuthorList
name|al
init|=
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|authorField
argument_list|)
decl_stmt|;
if|if
condition|(
name|al
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|""
return|;
name|String
name|s
init|=
name|al
operator|.
name|getAuthor
argument_list|(
literal|0
argument_list|)
operator|.
name|getVon
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|al
operator|.
name|getAuthor
argument_list|(
literal|0
argument_list|)
operator|.
name|getLast
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Gets the last name of the last author/editor      * @param authorField a<code>String</code>      * @return the sur name of an author/editor      */
DECL|method|lastAuthor (String authorField)
specifier|private
specifier|static
name|String
name|lastAuthor
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|String
index|[]
name|tokens
init|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// if author is empty
name|String
index|[]
name|lastAuthor
init|=
name|tokens
index|[
name|tokens
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
return|return
name|lastAuthor
index|[
literal|0
index|]
return|;
block|}
else|else
return|return
literal|""
return|;
block|}
comment|/**      * Gets the last name of all authors/editors      * @param authorField a<code>String</code>      * @return the sur name of all authors/editors      */
DECL|method|allAuthors (String authorField)
specifier|private
specifier|static
name|String
name|allAuthors
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|String
name|author
init|=
literal|""
decl_stmt|;
comment|// This code was part of 'ApplyRule' in 'ArticleLabelRule'
name|String
index|[]
name|tokens
init|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|length
operator|>
name|i
condition|)
block|{
comment|// convert lastname, firstname to firstname lastname
name|String
index|[]
name|firstAuthor
init|=
name|tokens
index|[
name|i
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// lastname, firstname
name|author
operator|+=
name|firstAuthor
index|[
literal|0
index|]
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|author
return|;
block|}
comment|/**      * Returns the authors according to the BibTeX-alpha-Style      * @param authorField string containing the value of the author field      * @return the initials of all authornames      */
DECL|method|authorsAlpha (String authorField)
specifier|private
specifier|static
name|String
name|authorsAlpha
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|String
name|authors
init|=
literal|""
decl_stmt|;
name|String
name|fixedAuthors
init|=
name|AuthorList
operator|.
name|fixAuthor_lastNameOnlyCommas
argument_list|(
name|authorField
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// drop the "and" before the last author
comment|// -> makes processing easier
name|fixedAuthors
operator|=
name|fixedAuthors
operator|.
name|replace
argument_list|(
literal|" and "
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
name|String
index|[]
name|tokens
init|=
name|fixedAuthors
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|max
init|=
operator|(
name|tokens
operator|.
name|length
operator|>
literal|4
condition|?
literal|3
else|:
name|tokens
operator|.
name|length
operator|)
decl_stmt|;
if|if
condition|(
name|max
operator|==
literal|1
condition|)
block|{
name|String
index|[]
name|firstAuthor
init|=
name|tokens
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// take first letter of any "prefixes" (e.g. van der Aalst -> vd)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|firstAuthor
operator|.
name|length
operator|-
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|authors
operator|=
name|authors
operator|.
name|concat
argument_list|(
name|firstAuthor
index|[
name|j
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// append last part of last name completely
name|authors
operator|=
name|authors
operator|.
name|concat
argument_list|(
name|firstAuthor
index|[
name|firstAuthor
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|3
argument_list|,
name|firstAuthor
index|[
name|firstAuthor
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
comment|// replace all whitespaces by " "
comment|// split the lastname at " "
name|String
index|[]
name|curAuthor
init|=
name|tokens
index|[
name|i
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|curAuthor
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// use first character of each part of lastname
name|authors
operator|=
name|authors
operator|.
name|concat
argument_list|(
name|curAuthor
index|[
name|j
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|4
condition|)
block|{
name|authors
operator|=
name|authors
operator|.
name|concat
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|authors
return|;
block|}
comment|/**      * Gets the surnames of the first N authors and appends EtAl if there are more than N authors      * @param authorField a<code>String</code>      * @param n the number of desired authors      * @return Gets the surnames of the first N authors and appends EtAl if there are more than N authors      */
DECL|method|NAuthors (String authorField, int n)
specifier|private
specifier|static
name|String
name|NAuthors
parameter_list|(
name|String
name|authorField
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|String
name|author
init|=
literal|""
decl_stmt|;
comment|// This code was part of 'ApplyRule' in 'ArticleLabelRule'
name|String
index|[]
name|tokens
init|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|length
operator|>
name|i
operator|&&
name|i
operator|<
name|n
condition|)
block|{
comment|// convert lastname, firstname to firstname lastname
name|String
index|[]
name|firstAuthor
init|=
name|tokens
index|[
name|i
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// lastname, firstname
name|author
operator|+=
name|firstAuthor
index|[
literal|0
index|]
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|.
name|length
operator|<=
name|n
condition|)
return|return
name|author
return|;
return|return
name|author
operator|+=
literal|"EtAl"
return|;
block|}
comment|/**      * Gets the first part of the last name of the first      * author/editor, and appends the last name initial of the      * remaining authors/editors.      * @param authorField a<code>String</code>      * @return the sur name of all authors/editors      */
DECL|method|oneAuthorPlusIni (String authorField)
specifier|private
specifier|static
name|String
name|oneAuthorPlusIni
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
specifier|final
name|int
name|CHARS_OF_FIRST
init|=
literal|5
decl_stmt|;
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|String
name|author
init|=
literal|""
decl_stmt|;
comment|// This code was part of 'ApplyRule' in 'ArticleLabelRule'
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|author
return|;
block|}
name|String
index|[]
name|firstAuthor
init|=
name|tokens
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|author
operator|=
name|firstAuthor
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|CHARS_OF_FIRST
argument_list|,
name|firstAuthor
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|tokens
operator|.
name|length
operator|>
name|i
condition|)
block|{
comment|// convert lastname, firstname to firstname lastname
name|author
operator|+=
name|tokens
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|author
return|;
block|}
comment|/**      * auth.auth.ea format:      * Isaac Newton and James Maxwell and Albert Einstein (1960)      * Isaac Newton and James Maxwell (1960)      *  give:      * Newton.Maxwell.ea      * Newton.Maxwell      */
DECL|method|authAuthEa (String authorField)
specifier|private
specifier|static
name|String
name|authAuthEa
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|StringBuffer
name|author
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|author
operator|.
name|append
argument_list|(
operator|(
name|tokens
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>=
literal|2
condition|)
name|author
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|tokens
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|2
condition|)
name|author
operator|.
name|append
argument_list|(
literal|".ea"
argument_list|)
expr_stmt|;
return|return
name|author
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * auth.etal format:      * Isaac Newton and James Maxwell and Albert Einstein (1960)      * Isaac Newton and James Maxwell (1960)      *  give:      * Newton.etal      * Newton.Maxwell      */
DECL|method|authEtal (String authorField)
specifier|private
specifier|static
name|String
name|authEtal
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|StringBuffer
name|author
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|author
operator|.
name|append
argument_list|(
operator|(
name|tokens
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|2
condition|)
name|author
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|tokens
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|2
condition|)
name|author
operator|.
name|append
argument_list|(
literal|".etal"
argument_list|)
expr_stmt|;
return|return
name|author
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * The first N characters of the Mth author/editor.      */
DECL|method|authN_M (String authorField, int n, int m)
specifier|private
specifier|static
name|String
name|authN_M
parameter_list|(
name|String
name|authorField
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|m
parameter_list|)
block|{
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|tokens
operator|.
name|length
operator|<=
name|m
operator|)
operator|||
operator|(
name|n
operator|<
literal|0
operator|)
operator|||
operator|(
name|m
operator|<
literal|0
operator|)
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|lastName
init|=
operator|(
name|tokens
index|[
name|m
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastName
operator|.
name|length
argument_list|()
operator|<=
name|n
condition|)
return|return
name|lastName
return|;
else|else
return|return
name|lastName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/**      * authshort format:      * added by Kolja Brix, kbx@users.sourceforge.net      *      * given author names      *       *   Isaac Newton and James Maxwell and Albert Einstein and N. Bohr      *       *   Isaac Newton and James Maxwell and Albert Einstein      *         *   Isaac Newton and James Maxwell      *         *   Isaac Newton      *       * yield      *       *   NME+      *         *   NME      *         *   NM      *         *   Newton      */
DECL|method|authshort (String authorField)
specifier|private
specifier|static
name|String
name|authshort
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|StringBuffer
name|author
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|author
operator|.
name|append
argument_list|(
name|authN_M
argument_list|(
name|authorField
argument_list|,
name|authorField
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokens
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
while|while
condition|(
name|tokens
operator|.
name|length
operator|>
name|i
operator|&&
name|i
operator|<
literal|3
condition|)
block|{
name|author
operator|.
name|append
argument_list|(
name|authN_M
argument_list|(
name|authorField
argument_list|,
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|3
condition|)
name|author
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
return|return
name|author
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * authIniN format:      *       * Each author gets (N div #authors) chars, the remaining (N mod #authors)      * chars are equally distributed to the authors first in the row.      *       * If (N< #authors), only the first N authors get mentioned.      *       * For example if      *       * a) I. Newton and J. Maxwell and A. Einstein and N. Bohr (..)      *       * b) I. Newton and J. Maxwell and A. Einstein      *       * c) I. Newton and J. Maxwell      *       * d) I. Newton      *       * authIni4 gives: a) NMEB, b) NeME, c) NeMa, d) Newt      *       * @param authorField      *            The authors to format.      *       * @param n      *            The maximum number of characters this string will be long. A      *            negative number or zero will lead to "" be returned.      *       * @throws NullPointerException      *             if authorField is null and n> 0      */
DECL|method|authIniN (String authorField, int n)
specifier|public
specifier|static
name|String
name|authIniN
parameter_list|(
name|String
name|authorField
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
return|return
literal|""
return|;
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|StringBuffer
name|author
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|charsAll
init|=
name|n
operator|/
name|tokens
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|author
operator|.
name|toString
argument_list|()
return|;
block|}
while|while
condition|(
name|tokens
operator|.
name|length
operator|>
name|i
condition|)
block|{
if|if
condition|(
name|i
operator|<
operator|(
name|n
operator|%
name|tokens
operator|.
name|length
operator|)
condition|)
block|{
name|author
operator|.
name|append
argument_list|(
name|authN_M
argument_list|(
name|authorField
argument_list|,
name|charsAll
operator|+
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|author
operator|.
name|append
argument_list|(
name|authN_M
argument_list|(
name|authorField
argument_list|,
name|charsAll
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|author
operator|.
name|length
argument_list|()
operator|<=
name|n
condition|)
return|return
name|author
operator|.
name|toString
argument_list|()
return|;
else|else
return|return
name|author
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/**      * Split the pages field into separate numbers and return the lowest      *       * @param pages      *            (may not be null) a pages string such as 42--111 or      *            7,41,73--97 or 43+      *       * @return the first page number or "" if no number is found in the string      *       * @throws NullPointerException      *             if pages is null      */
DECL|method|firstPage (String pages)
specifier|public
specifier|static
name|String
name|firstPage
parameter_list|(
name|String
name|pages
parameter_list|)
block|{
name|String
index|[]
name|_pages
init|=
name|pages
operator|.
name|split
argument_list|(
literal|"\\D+"
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|_pages
control|)
block|{
if|if
condition|(
name|n
operator|.
name|matches
argument_list|(
literal|"\\d+"
argument_list|)
condition|)
name|result
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|n
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
return|return
literal|""
return|;
else|else
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**      * Split the pages field into separate numbers and return the highest      *       * @param pages      *            a pages string such as 42--111 or 7,41,73--97 or 43+      *       * @return the first page number or "" if no number is found in the string      *       * @throws NullPointerException      *             if pages is null.      */
DECL|method|lastPage (String pages)
specifier|public
specifier|static
name|String
name|lastPage
parameter_list|(
name|String
name|pages
parameter_list|)
block|{
name|String
index|[]
name|_pages
init|=
name|pages
operator|.
name|split
argument_list|(
literal|"\\D+"
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|_pages
control|)
block|{
if|if
condition|(
name|n
operator|.
name|matches
argument_list|(
literal|"\\d+"
argument_list|)
condition|)
name|result
operator|=
name|Math
operator|.
name|max
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|n
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
return|return
literal|""
return|;
else|else
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**          * Parse a field marker with modifiers, possibly containing a parenthesised modifier,          * as well as escaped colons and parentheses.          * @param arg The argument string.          * @return An array of strings representing the parts of the marker          */
DECL|method|parseFieldMarker (String arg)
specifier|public
specifier|static
name|String
index|[]
name|parseFieldMarker
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|current
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|escaped
init|=
literal|false
decl_stmt|;
name|int
name|inParenthesis
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arg
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|!
name|escaped
operator|&&
operator|(
name|inParenthesis
operator|==
literal|0
operator|)
condition|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|current
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'('
operator|)
operator|&&
operator|!
name|escaped
condition|)
block|{
name|inParenthesis
operator|++
expr_stmt|;
name|current
operator|.
name|append
argument_list|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|')'
operator|)
operator|&&
operator|!
name|escaped
operator|&&
operator|(
name|inParenthesis
operator|>
literal|0
operator|)
condition|)
block|{
name|inParenthesis
operator|--
expr_stmt|;
name|current
operator|.
name|append
argument_list|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
name|escaped
condition|)
block|{
name|escaped
operator|=
literal|false
expr_stmt|;
name|current
operator|.
name|append
argument_list|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|escaped
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|escaped
condition|)
block|{
name|current
operator|.
name|append
argument_list|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|escaped
operator|=
literal|false
expr_stmt|;
block|}
else|else
name|current
operator|.
name|append
argument_list|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parts
operator|.
name|add
argument_list|(
name|current
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|parts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

