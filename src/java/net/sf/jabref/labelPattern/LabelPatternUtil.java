begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on 13-Dec-2003  */
end_comment

begin_package
DECL|package|net.sf.jabref.labelPattern
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|ImportFormatReader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
operator|.
name|RemoveLatexCommands
import|;
end_import

begin_comment
comment|/**  *  * @author Ulrik Stervbo (ulriks AT ruc.dk)  */
end_comment

begin_comment
comment|/**  * This is the utility class of the LabelPattern package.  * @author Ulrik Stervbo (ulriks AT ruc.dk)  */
end_comment

begin_class
DECL|class|LabelPatternUtil
specifier|public
class|class
name|LabelPatternUtil
block|{
comment|//this is SO crappy, but i have no idea of converting unicode into a String
comment|// the content of the AL is build with the buildLetters()
DECL|field|letters
specifier|private
specifier|static
name|ArrayList
name|letters
init|=
name|builtLetters
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_LABELPATTERN
specifier|public
specifier|static
name|ArrayList
name|DEFAULT_LABELPATTERN
init|=
name|split
argument_list|(
literal|"[auth][year]"
argument_list|)
decl_stmt|;
DECL|field|_db
specifier|private
specifier|static
name|BibtexDatabase
name|_db
decl_stmt|;
comment|/**    * This method takes a string of the form [field1]spacer[field2]spacer[field3]...,    * where the fields are the (required) fields of a BibTex entry. The string is split    * into firlds and spacers by recognizing the [ and ].    *    * @param keyPattern a<code>String</code>    * @return an<code>ArrayList</code> The first item of the list    * is a string representation of the key pattern (the parameter),    * the second item is the spacer character (a<code>String</code>).    */
DECL|method|split (String labelPattern)
specifier|public
specifier|static
name|ArrayList
name|split
parameter_list|(
name|String
name|labelPattern
parameter_list|)
block|{
comment|// A holder for fields of the entry to be used for the key
name|ArrayList
name|_alist
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// Before we do anything, we add the parameter to the ArrayLIst
name|_alist
operator|.
name|add
argument_list|(
name|labelPattern
argument_list|)
expr_stmt|;
comment|//String[] ss = labelPattern.split("\\[|\\]");
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|labelPattern
argument_list|,
literal|"[]"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|_alist
operator|.
name|add
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|_alist
return|;
comment|/*        // Regular expresion for identifying the fields        Pattern pi = Pattern.compile("\\[\\w*\\]");        // Regular expresion for identifying the spacer        Pattern ps = Pattern.compile("\\].()*\\[");         // The matcher for the field        Matcher mi = pi.matcher(labelPattern);        // The matcher for the spacer char        Matcher ms = ps.matcher(labelPattern);         // Before we do anything, we add the parameter to the ArrayLIst        _alist.add(labelPattern);         // If we can find the spacer character        if(ms.find()){      String t_spacer = ms.group();       // Remove the `]' and `[' at the ends       // We cant imagine a spacer of omre than one character.       t_spacer = t_spacer.substring(1,2);       _alist.add(t_spacer);        }         while(mi.find()){      // Get the matched string      String t_str = mi.group();       int _sindex = 1;       int _eindex = t_str.length() -1;       // Remove the `[' and `]' at the ends       t_str = t_str.substring(_sindex, _eindex);      _alist.add(t_str);        }         return _alist;*/
block|}
comment|/**    * Generates a BibTeX label according to the pattern for a given entry type, and    * returns the<code>Bibtexentry</code> with the unique label.    * @param table a<code>LabelPattern</code>    * @param database a<code>BibtexDatabase</code>    * @param entryId a<code>String</code>    * @return modified Bibtexentry    */
DECL|method|makeLabel (LabelPattern table, BibtexDatabase database, BibtexEntry _entry)
specifier|public
specifier|static
name|BibtexEntry
name|makeLabel
parameter_list|(
name|LabelPattern
name|table
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|,
name|BibtexEntry
name|_entry
parameter_list|)
block|{
name|_db
operator|=
name|database
expr_stmt|;
name|ArrayList
name|_al
decl_stmt|;
name|String
name|_spacer
decl_stmt|,
name|_label
decl_stmt|;
name|StringBuffer
name|_sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|forceUpper
init|=
literal|false
decl_stmt|,
name|forceLower
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// get the type of entry
name|String
name|_type
init|=
name|_entry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// Get the arrayList corrosponding to the type
name|_al
operator|=
name|table
operator|.
name|getValue
argument_list|(
name|_type
argument_list|)
expr_stmt|;
name|int
name|_alSize
init|=
name|_al
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|field
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|_alSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|val
init|=
name|_al
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"["
argument_list|)
condition|)
block|{
name|field
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"]"
argument_list|)
condition|)
block|{
name|field
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
condition|)
block|{
comment|/* Edited by Seb Wills<saw27@mrao.cam.ac.uk> on 13-Apr-2004 	       Added new pseudo-fields "shortyear" and "veryshorttitle", and 	       and ":lower" modifier for all fields (in a way easily extended to other modifiers). 	       Helpfile help/LabelPatterns.html updated accordingly. 	    */
comment|// check whether there is a modifier on the end such as ":lower"
name|String
name|modifier
init|=
literal|null
decl_stmt|;
name|int
name|_mi
init|=
name|val
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|_mi
operator|!=
operator|-
literal|1
operator|&&
name|_mi
operator|!=
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|&&
name|_mi
operator|!=
literal|0
condition|)
block|{
comment|// ":" is in val and isn't first or last character
name|modifier
operator|=
name|val
operator|.
name|substring
argument_list|(
name|_mi
operator|+
literal|1
argument_list|)
expr_stmt|;
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|_mi
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|_sbvalue
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
comment|/*if (val.equals("uppercase")) { 		    forceUpper = true; 		} 		else if (val.equals("lowercase")) { 		    forceLower = true; 		    }*/
if|if
condition|(
name|val
operator|.
name|startsWith
argument_list|(
literal|"auth"
argument_list|)
condition|)
block|{
comment|// Gather all author-related checks, so we don't have to check all all the time.
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"auth"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|firstAuthor
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"authors"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|allAuthors
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"authorIni"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|oneAuthorPlusIni
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"auth.auth.ea"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|authAuthEa
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"auth[\\d]+_[\\d]+"
argument_list|)
condition|)
block|{
name|String
index|[]
name|nums
init|=
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|_sbvalue
operator|.
name|append
argument_list|(
name|authN_M
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|1
index|]
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// authN.  First N chars of the first author's last name.
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"auth\\d+"
argument_list|)
condition|)
block|{
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fa
init|=
name|firstAuthor
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|>
name|fa
operator|.
name|length
argument_list|()
condition|)
name|num
operator|=
name|fa
operator|.
name|length
argument_list|()
expr_stmt|;
name|_sbvalue
operator|.
name|append
argument_list|(
name|fa
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|num
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This "auth" business was a dead end, so just use it literally:
name|_sbvalue
operator|.
name|append
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
name|val
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|startsWith
argument_list|(
literal|"ed"
argument_list|)
condition|)
block|{
comment|// Gather all markers starting with "ed" here, so we don't have to check all all the time.
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"edtr"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|firstAuthor
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"editors"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|allAuthors
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"editorIni"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|oneAuthorPlusIni
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"edtr[\\d]+_[\\d]+"
argument_list|)
condition|)
block|{
name|String
index|[]
name|nums
init|=
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|_sbvalue
operator|.
name|append
argument_list|(
name|authN_M
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|1
index|]
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"edtr.edtr.ea"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|authAuthEa
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// authN.  First N chars of the first author's last name.
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"edtr\\d+"
argument_list|)
condition|)
block|{
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fa
init|=
name|firstAuthor
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|>
name|fa
operator|.
name|length
argument_list|()
condition|)
name|num
operator|=
name|fa
operator|.
name|length
argument_list|()
expr_stmt|;
name|_sbvalue
operator|.
name|append
argument_list|(
name|fa
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|num
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This "ed" business was a dead end, so just use it literally:
name|_sbvalue
operator|.
name|append
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
name|val
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"firstpage"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|firstPage
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"lastpage"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|lastPage
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"shorttitle"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|getTitleWords
argument_list|(
literal|3
argument_list|,
name|_entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"shortyear"
argument_list|)
condition|)
block|{
name|String
name|ss
init|=
name|_entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|ss
operator|.
name|substring
argument_list|(
name|ss
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"veryshorttitle"
argument_list|)
condition|)
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|getTitleWords
argument_list|(
literal|1
argument_list|,
name|_entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// we havent seen any special demands
else|else
block|{
name|_sbvalue
operator|.
name|append
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
name|val
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"Key generator warning: field '"
operator|+
name|val
operator|+
literal|"' empty."
argument_list|)
expr_stmt|;
block|}
comment|// apply modifier if present
if|if
condition|(
name|modifier
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|modifier
operator|.
name|equals
argument_list|(
literal|"lower"
argument_list|)
condition|)
block|{
name|_sb
operator|.
name|append
argument_list|(
name|_sbvalue
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"Key generator warning: unknown modifier '"
operator|+
name|modifier
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no modifier
name|_sb
operator|.
name|append
argument_list|(
name|_sbvalue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|_sb
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**      * Edited by Morten Alver 2004.02.04.      *      * We now have a system for easing key duplicate prevention, so      * I am changing this method to conform to it.      *          // here we make sure the key is unique        _label = makeLabelUnique(_sb.toString());        _entry.setField(Globals.KEY_FIELD, _label);        return _entry;      */
comment|// Remove all illegal characters from the key.
name|_label
operator|=
name|Util
operator|.
name|checkLegalKey
argument_list|(
name|_sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceUpper
condition|)
block|{
name|_label
operator|=
name|_label
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|forceLower
condition|)
block|{
name|_label
operator|=
name|_label
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|// Try new keys until we get a unique one:
block|}
if|if
condition|(
name|_db
operator|.
name|setCiteKeyForEntry
argument_list|(
name|_entry
operator|.
name|getId
argument_list|()
argument_list|,
name|_label
argument_list|)
condition|)
block|{
name|char
name|c
init|=
literal|'b'
decl_stmt|;
name|String
name|modKey
init|=
name|_label
operator|+
literal|"a"
decl_stmt|;
while|while
condition|(
name|_db
operator|.
name|setCiteKeyForEntry
argument_list|(
name|_entry
operator|.
name|getId
argument_list|()
argument_list|,
name|modKey
argument_list|)
condition|)
block|{
name|modKey
operator|=
name|_label
operator|+
operator|(
call|(
name|char
call|)
argument_list|(
name|c
operator|++
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
return|return
name|_entry
return|;
comment|/** End of edit, Morten Alver 2004.02.04.  */
block|}
DECL|method|getTitleWords (int number, BibtexEntry _entry)
specifier|static
name|String
name|getTitleWords
parameter_list|(
name|int
name|number
parameter_list|,
name|BibtexEntry
name|_entry
parameter_list|)
block|{
name|String
name|ss
init|=
operator|(
operator|new
name|RemoveLatexCommands
argument_list|()
operator|)
operator|.
name|format
argument_list|(
name|_entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuffer
name|_sbvalue
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|,
name|current
decl_stmt|;
name|int
name|piv
init|=
literal|0
decl_stmt|,
name|words
init|=
literal|0
decl_stmt|;
comment|// sorry for being English-centric. I guess these
comment|// words should really be an editable preference.
name|mainl
label|:
while|while
condition|(
operator|(
name|piv
operator|<
name|ss
operator|.
name|length
argument_list|()
operator|)
operator|&&
operator|(
name|words
operator|<
name|number
operator|)
condition|)
block|{
name|current
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
comment|// Get the next word:
while|while
condition|(
operator|(
name|piv
operator|<
name|ss
operator|.
name|length
argument_list|()
operator|)
operator|&&
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|ss
operator|.
name|charAt
argument_list|(
name|piv
argument_list|)
argument_list|)
condition|)
block|{
name|current
operator|.
name|append
argument_list|(
name|ss
operator|.
name|charAt
argument_list|(
name|piv
argument_list|)
argument_list|)
expr_stmt|;
name|piv
operator|++
expr_stmt|;
comment|//System.out.println(".. "+piv+" '"+current.toString()+"'");
block|}
name|piv
operator|++
expr_stmt|;
comment|// Check if it is ok:
name|String
name|word
init|=
name|current
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|word
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue
name|mainl
continue|;
for|for
control|(
name|int
name|_i
init|=
literal|0
init|;
name|_i
operator|<
name|Globals
operator|.
name|SKIP_WORDS
operator|.
name|length
condition|;
name|_i
operator|++
control|)
block|{
if|if
condition|(
name|word
operator|.
name|equalsIgnoreCase
argument_list|(
name|Globals
operator|.
name|SKIP_WORDS
index|[
name|_i
index|]
argument_list|)
condition|)
block|{
continue|continue
name|mainl
continue|;
block|}
block|}
comment|// If we get here, the word was accepted.
if|if
condition|(
name|_sbvalue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|_sbvalue
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|_sbvalue
operator|.
name|append
argument_list|(
name|word
argument_list|)
expr_stmt|;
name|words
operator|++
expr_stmt|;
block|}
return|return
name|_sbvalue
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * This method returns a truely unique label (in the BibtexDatabase), by taking a    * label and add the letters a-z until a unique key is found.    * @param key a<code>String</code>    * @return a unique label    */
DECL|method|makeLabelUnique (String label)
specifier|public
specifier|static
name|String
name|makeLabelUnique
parameter_list|(
name|String
name|label
parameter_list|)
block|{
comment|// First I tried to make this recursive, but had to give up. I needed to
comment|// do too many chacks of different kinds.
name|String
name|_orgLabel
init|=
name|label
decl_stmt|;
name|String
name|_newLabel
init|=
name|label
decl_stmt|;
name|int
name|lettersSize
init|=
name|letters
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lettersSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isLabelUnique
argument_list|(
name|_newLabel
argument_list|)
condition|)
block|{
comment|// Hurray! the key is unique! lets get outta here
break|break;
block|}
else|else
block|{
comment|// though luck! lets add a new letter...
name|_newLabel
operator|=
name|_orgLabel
operator|+
name|letters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|_newLabel
return|;
block|}
comment|/**    * Tests whether a given label is unique.    * @param label a<code>String</code>    * @return<code>true</code> if and only if the<code>label</code> is unique    */
DECL|method|isLabelUnique (String label)
specifier|public
specifier|static
name|boolean
name|isLabelUnique
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|boolean
name|_isUnique
init|=
literal|true
decl_stmt|;
name|BibtexEntry
name|_entry
decl_stmt|;
name|int
name|_dbSize
init|=
name|_db
operator|.
name|getEntryCount
argument_list|()
decl_stmt|;
comment|// run through the whole DB and check the key field
comment|// if this could be made recursive I would be very happy
comment|// it kinda sux that we have to run through the whole db.
comment|// The idea here is that if we meet NO match, the _duplicate
comment|// field will be true
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_dbSize
condition|;
name|i
operator|++
control|)
block|{
name|_entry
operator|=
name|_db
operator|.
name|getEntryById
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// oh my! there is a match! we better set the uniqueness to false
comment|// and leave this for-loop all together
if|if
condition|(
name|_entry
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|KEY_FIELD
argument_list|)
operator|.
name|equals
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|_isUnique
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
return|return
name|_isUnique
return|;
block|}
comment|/**    * Gets the last name of the first author/editor    * @param authorField a<code>String</code>    * @return the sur name of an author/editor    */
DECL|method|firstAuthor (String authorField)
specifier|private
specifier|static
name|String
name|firstAuthor
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|String
name|author
init|=
literal|""
decl_stmt|;
comment|// This code was part of 'ApplyRule' in 'ArticleLabelRule'
name|String
index|[]
name|tokens
init|=
name|ImportFormatReader
operator|.
name|fixAuthor_lastnameFirst
argument_list|(
name|authorField
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// if author is empty
name|String
index|[]
name|firstAuthor
init|=
name|tokens
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|author
operator|+=
name|firstAuthor
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|author
return|;
block|}
comment|/**    * Gets the last name of all authors/editors    * @param authorField a<code>String</code>    * @return the sur name of all authors/editors    */
DECL|method|allAuthors (String authorField)
specifier|private
specifier|static
name|String
name|allAuthors
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|String
name|author
init|=
literal|""
decl_stmt|;
comment|// This code was part of 'ApplyRule' in 'ArticleLabelRule'
name|String
index|[]
name|tokens
init|=
name|ImportFormatReader
operator|.
name|fixAuthor_lastnameFirst
argument_list|(
name|authorField
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|length
operator|>
name|i
condition|)
block|{
comment|// convert lastname, firstname to firstname lastname
name|String
index|[]
name|firstAuthor
init|=
name|tokens
index|[
name|i
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// lastname, firstname
name|author
operator|+=
name|firstAuthor
index|[
literal|0
index|]
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|author
return|;
block|}
comment|/**    * Gets the first part of the last name of the first    * author/editor, and appends the last name initial of the    * remaining authors/editors.    * @param authorField a<code>String</code>    * @return the sur name of all authors/editors    */
DECL|method|oneAuthorPlusIni (String authorField)
specifier|private
specifier|static
name|String
name|oneAuthorPlusIni
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
specifier|final
name|int
name|CHARS_OF_FIRST
init|=
literal|5
decl_stmt|;
name|authorField
operator|=
name|ImportFormatReader
operator|.
name|fixAuthor_lastnameFirst
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|String
name|author
init|=
literal|""
decl_stmt|;
comment|// This code was part of 'ApplyRule' in 'ArticleLabelRule'
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|author
return|;
block|}
name|String
index|[]
name|firstAuthor
init|=
name|tokens
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|author
operator|=
name|firstAuthor
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|CHARS_OF_FIRST
argument_list|,
name|firstAuthor
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|tokens
operator|.
name|length
operator|>
name|i
condition|)
block|{
comment|// convert lastname, firstname to firstname lastname
name|author
operator|+=
name|tokens
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|author
return|;
block|}
comment|/**    * auth.auth.ea format:    * Isaac Newton and James Maxwell and Albert Einstein (1960)    * Isaac Newton and James Maxwell (1960)    *  give:    * Newton.Maxwell.ea    * Newton.Maxwell    */
DECL|method|authAuthEa (String authorField)
specifier|private
specifier|static
name|String
name|authAuthEa
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|authorField
operator|=
name|ImportFormatReader
operator|.
name|fixAuthor_lastnameFirst
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|StringBuffer
name|author
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|author
operator|.
name|append
argument_list|(
operator|(
name|tokens
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>=
literal|2
condition|)
name|author
operator|.
name|append
argument_list|(
literal|"."
operator|+
operator|(
name|tokens
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|2
condition|)
name|author
operator|.
name|append
argument_list|(
literal|".ea"
argument_list|)
expr_stmt|;
return|return
name|author
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * The first N characters of the Mth author/editor.    */
DECL|method|authN_M (String authorField, int n, int m)
specifier|private
specifier|static
name|String
name|authN_M
parameter_list|(
name|String
name|authorField
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|m
parameter_list|)
block|{
name|authorField
operator|=
name|ImportFormatReader
operator|.
name|fixAuthor_lastnameFirst
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|StringBuffer
name|author
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|tokens
operator|.
name|length
operator|<=
name|m
operator|)
operator|||
operator|(
name|n
operator|<
literal|0
operator|)
operator|||
operator|(
name|m
operator|<
literal|0
operator|)
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|lastName
init|=
operator|(
name|tokens
index|[
name|m
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|//System.out.println(lastName);
if|if
condition|(
name|lastName
operator|.
name|length
argument_list|()
operator|<=
name|n
condition|)
return|return
name|lastName
return|;
else|else
return|return
name|lastName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/**    * Split the pages field into two and return the first one    * @param pages a<code>String</code>    * @return the first page number    */
DECL|method|firstPage (String pages)
specifier|private
specifier|static
name|String
name|firstPage
parameter_list|(
name|String
name|pages
parameter_list|)
block|{
name|String
index|[]
name|_pages
init|=
name|pages
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
return|return
name|_pages
index|[
literal|0
index|]
return|;
block|}
comment|/**    * Split the pages field into two and return the last one    * @param pages a<code>String</code>    * @return the last page number    */
DECL|method|lastPage (String pages)
specifier|private
specifier|static
name|String
name|lastPage
parameter_list|(
name|String
name|pages
parameter_list|)
block|{
name|String
index|[]
name|_pages
init|=
name|pages
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
return|return
name|_pages
index|[
literal|1
index|]
return|;
block|}
comment|/**    * I<b>HATE</b> this method!! I looked and looked but couldn't find a way to    * turn 61 (or in real unicode 0061) into the letter 'a' - crap!    * @return an<code>ArrayList</code> which shouldn't be!!    */
DECL|method|builtLetters ()
specifier|private
specifier|static
name|ArrayList
name|builtLetters
parameter_list|()
block|{
name|ArrayList
name|_letters
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"g"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"h"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"j"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"l"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"m"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"o"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"q"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"r"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"t"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"u"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"v"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|_letters
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
return|return
name|_letters
return|;
block|}
block|}
end_class

end_unit

