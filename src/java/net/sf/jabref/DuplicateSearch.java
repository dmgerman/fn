begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableRemoveEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_class
DECL|class|DuplicateSearch
specifier|public
class|class
name|DuplicateSearch
extends|extends
name|Thread
block|{
DECL|field|panel
name|BasePanel
name|panel
decl_stmt|;
DECL|field|bes
name|BibtexEntry
index|[]
name|bes
decl_stmt|;
DECL|field|duplicates
name|Vector
name|duplicates
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
DECL|method|DuplicateSearch (BasePanel bp)
specifier|public
name|DuplicateSearch
parameter_list|(
name|BasePanel
name|bp
parameter_list|)
block|{
name|panel
operator|=
name|bp
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|NamedCompound
name|ce
init|=
literal|null
decl_stmt|;
name|int
name|dupl
init|=
literal|0
decl_stmt|;
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Searching for duplicates..."
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|keys
init|=
name|panel
operator|.
name|database
operator|.
name|getKeySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|keys
operator|==
literal|null
operator|)
operator|||
operator|(
name|keys
operator|.
name|length
operator|<
literal|2
operator|)
condition|)
return|return;
name|bes
operator|=
operator|new
name|BibtexEntry
index|[
name|keys
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|bes
index|[
name|i
index|]
operator|=
name|panel
operator|.
name|database
operator|.
name|getEntryById
argument_list|(
operator|(
name|String
operator|)
name|keys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SearcherThread
name|st
init|=
operator|new
name|SearcherThread
argument_list|()
decl_stmt|;
name|st
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|current
init|=
literal|0
decl_stmt|;
name|DuplicateResolverDialog
name|drd
init|=
literal|null
decl_stmt|;
name|loop
label|:
while|while
condition|(
operator|!
name|st
operator|.
name|finished
argument_list|()
operator|||
operator|(
name|current
operator|<
name|duplicates
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|current
operator|>=
name|duplicates
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// No more duplicates to resolve, but search is still in progress. Sleep a little.
try|try
block|{
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{}
continue|continue
name|loop
continue|;
block|}
name|BibtexEntry
index|[]
name|be
init|=
operator|(
name|BibtexEntry
index|[]
operator|)
name|duplicates
operator|.
name|get
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|current
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|panel
operator|.
name|database
operator|.
name|getEntryById
argument_list|(
name|be
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|panel
operator|.
name|database
operator|.
name|getEntryById
argument_list|(
name|be
index|[
literal|1
index|]
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|drd
operator|==
literal|null
condition|)
block|{
name|drd
operator|=
operator|new
name|DuplicateResolverDialog
argument_list|(
name|panel
operator|.
name|frame
argument_list|,
name|be
index|[
literal|0
index|]
argument_list|,
name|be
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|drd
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
else|else
name|drd
operator|.
name|setEntries
argument_list|(
name|be
index|[
literal|0
index|]
argument_list|,
name|be
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
while|while
condition|(
name|drd
operator|.
name|isBlocking
argument_list|()
condition|)
block|{
try|try
block|{
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{}
block|}
name|int
name|answer
init|=
name|drd
operator|.
name|getSelected
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|DuplicateResolverDialog
operator|.
name|KEEP_UPPER
condition|)
block|{
if|if
condition|(
name|ce
operator|==
literal|null
condition|)
name|ce
operator|=
operator|new
name|NamedCompound
argument_list|(
literal|"duplicate removal"
argument_list|)
expr_stmt|;
name|panel
operator|.
name|database
operator|.
name|removeEntry
argument_list|(
name|be
index|[
literal|1
index|]
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|refreshTable
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|panel
operator|.
name|database
argument_list|,
name|be
index|[
literal|1
index|]
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
name|DuplicateResolverDialog
operator|.
name|KEEP_LOWER
condition|)
block|{
if|if
condition|(
name|ce
operator|==
literal|null
condition|)
name|ce
operator|=
operator|new
name|NamedCompound
argument_list|(
literal|"duplicate removal"
argument_list|)
expr_stmt|;
name|panel
operator|.
name|database
operator|.
name|removeEntry
argument_list|(
name|be
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|refreshTable
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|panel
operator|.
name|database
argument_list|,
name|be
index|[
literal|0
index|]
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dupl
operator|++
expr_stmt|;
comment|//Util.pr("---------------------------------------------------");
comment|//Util.pr("--> "+i+" and "+j+" ...");
comment|//Util.pr("---------------------------------------------------");
block|}
name|drd
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|drd
operator|!=
literal|null
condition|)
name|drd
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Duplicate pairs found"
argument_list|)
operator|+
literal|": "
operator|+
name|dupl
argument_list|)
expr_stmt|;
if|if
condition|(
name|ce
operator|!=
literal|null
condition|)
block|{
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
comment|//Util.pr("ox");
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
comment|//markBaseChanged();
comment|//refreshTable();
block|}
block|}
DECL|class|SearcherThread
class|class
name|SearcherThread
extends|extends
name|Thread
block|{
DECL|field|finished
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|bes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|boolean
name|eq
init|=
name|Util
operator|.
name|isDuplicate
argument_list|(
name|bes
index|[
name|i
index|]
argument_list|,
name|bes
index|[
name|j
index|]
argument_list|,
name|Globals
operator|.
name|duplicateThreshold
argument_list|)
decl_stmt|;
comment|// If (suspected) duplicates, add them to the duplicates vector.
if|if
condition|(
name|eq
condition|)
block|{
name|duplicates
operator|.
name|add
argument_list|(
operator|new
name|BibtexEntry
index|[]
block|{
name|bes
index|[
name|i
index|]
block|,
name|bes
index|[
name|j
index|]
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|finished
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|finished ()
specifier|public
name|boolean
name|finished
parameter_list|()
block|{
return|return
name|finished
return|;
block|}
block|}
block|}
end_class

end_unit

