begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2012 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.specialfields
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyChangeEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyVetoException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|VetoableChangeListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRef
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_comment
comment|/**  * Listener triggering   *  * an update of keywords if special field has been updated  *  * an update of special fields if keywords have been updated   */
end_comment

begin_class
DECL|class|SpecialFieldUpdateListener
specifier|public
class|class
name|SpecialFieldUpdateListener
implements|implements
name|VetoableChangeListener
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
name|SpecialFieldUpdateListener
name|INSTANCE
init|=
literal|null
decl_stmt|;
comment|// vetoableChange is also called if we call SpecialFieldsUtils.importKeywords
comment|// therefore, we have to avoid cyclic calls...
DECL|field|noUpdate
specifier|private
specifier|static
name|boolean
name|noUpdate
init|=
literal|false
decl_stmt|;
DECL|method|vetoableChange (PropertyChangeEvent e)
specifier|public
name|void
name|vetoableChange
parameter_list|(
name|PropertyChangeEvent
name|e
parameter_list|)
throws|throws
name|PropertyVetoException
block|{
if|if
condition|(
name|noUpdate
condition|)
return|return;
specifier|final
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|e
operator|.
name|getPropertyName
argument_list|()
decl_stmt|;
comment|// Source editor cycles through all entries
comment|// if we immediately updated the fields, the entry editor would detect a subsequent change as a user change
comment|// and re-fire this event
comment|// e.g., "keyword = {prio1}, priority = {prio2}" and a change at keyword to prio3 would not succeed.
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Generating an instance of a NamedCompound and adding it as edit is a quick hack.
comment|// The current infrastructure does not foresee to pass a named component to the vetoable change
comment|// A "good" infrastructure would offer update listeners after calling the VetoableChangeListeners
comment|// The parameters for them would offer a named component where the methods could add edits.
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"keywords"
argument_list|)
condition|)
block|{
name|NamedCompound
name|nc
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Synchronized special fields based on keywords"
argument_list|)
argument_list|)
decl_stmt|;
name|noUpdate
operator|=
literal|true
expr_stmt|;
name|SpecialFieldsUtils
operator|.
name|syncSpecialFieldsFromKeywords
argument_list|(
name|entry
argument_list|,
name|nc
argument_list|)
expr_stmt|;
name|JabRef
operator|.
name|jrf
operator|.
name|basePanel
argument_list|()
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|JabRef
operator|.
name|jrf
operator|.
name|basePanel
argument_list|()
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
name|noUpdate
operator|=
literal|false
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SpecialField
name|field
init|=
name|SpecialFieldsUtils
operator|.
name|getSpecialFieldInstanceFromFieldName
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|NamedCompound
name|nc
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Synchronized keywords from special fields"
argument_list|)
argument_list|)
decl_stmt|;
name|noUpdate
operator|=
literal|true
expr_stmt|;
name|SpecialFieldsUtils
operator|.
name|syncKeywordsFromSpecialFields
argument_list|(
name|entry
argument_list|,
name|nc
argument_list|)
expr_stmt|;
name|JabRef
operator|.
name|jrf
operator|.
name|basePanel
argument_list|()
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|JabRef
operator|.
name|jrf
operator|.
name|basePanel
argument_list|()
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
name|noUpdate
operator|=
literal|false
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getInstance ()
specifier|public
specifier|static
name|SpecialFieldUpdateListener
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|SpecialFieldUpdateListener
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
return|return
name|INSTANCE
return|;
block|}
block|}
end_class

end_unit

