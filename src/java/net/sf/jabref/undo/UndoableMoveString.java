begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Nizar N. Batada, Morten O. Alver  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref.undo
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_class
DECL|class|UndoableMoveString
specifier|public
class|class
name|UndoableMoveString
extends|extends
name|AbstractUndoableEdit
block|{
DECL|field|panel
specifier|private
name|BasePanel
name|panel
decl_stmt|;
DECL|field|base
specifier|private
name|BibtexDatabase
name|base
decl_stmt|;
DECL|field|up
specifier|private
name|boolean
name|up
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|method|UndoableMoveString (BasePanel panel, BibtexDatabase base, int pos, boolean up)
specifier|public
name|UndoableMoveString
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|BibtexDatabase
name|base
parameter_list|,
name|int
name|pos
parameter_list|,
name|boolean
name|up
parameter_list|)
block|{
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
name|this
operator|.
name|up
operator|=
name|up
expr_stmt|;
block|}
DECL|method|getUndoPresentationName ()
specifier|public
name|String
name|getUndoPresentationName
parameter_list|()
block|{
return|return
literal|"Undo: move string "
operator|+
operator|(
name|up
condition|?
literal|"up"
else|:
literal|"down"
operator|)
return|;
block|}
DECL|method|getRedoPresentationName ()
specifier|public
name|String
name|getRedoPresentationName
parameter_list|()
block|{
return|return
literal|"Redo: move string "
operator|+
operator|(
name|up
condition|?
literal|"up"
else|:
literal|"down"
operator|)
return|;
block|}
DECL|method|undo ()
specifier|public
name|void
name|undo
parameter_list|()
block|{
name|super
operator|.
name|undo
argument_list|()
expr_stmt|;
comment|// Revert the change.
name|panel
operator|.
name|assureStringDialogNotEditing
argument_list|()
expr_stmt|;
name|moveString
argument_list|(
operator|!
name|up
argument_list|,
operator|(
name|up
condition|?
name|pos
operator|-
literal|1
else|:
name|pos
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|updateStringDialog
argument_list|()
expr_stmt|;
block|}
DECL|method|redo ()
specifier|public
name|void
name|redo
parameter_list|()
block|{
name|super
operator|.
name|redo
argument_list|()
expr_stmt|;
comment|// Redo the change.
name|panel
operator|.
name|assureStringDialogNotEditing
argument_list|()
expr_stmt|;
name|moveString
argument_list|(
name|up
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|panel
operator|.
name|updateStringDialog
argument_list|()
expr_stmt|;
block|}
DECL|method|moveString (boolean up, int pos)
specifier|private
name|void
name|moveString
parameter_list|(
name|boolean
name|up
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|BibtexString
name|bs
init|=
name|base
operator|.
name|getString
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|base
operator|.
name|removeString
argument_list|(
name|pos
argument_list|)
expr_stmt|;
try|try
block|{
name|base
operator|.
name|addString
argument_list|(
name|bs
argument_list|,
operator|(
name|up
condition|?
name|pos
operator|-
literal|1
else|:
name|pos
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

