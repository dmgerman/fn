begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Nizar N. Batada, Morten O. Alver  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|*
import|;
end_import

begin_comment
comment|//import net.sf.jabref.groups.QuickSearchRule;
end_comment

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|*
import|;
end_import

begin_class
DECL|class|BasePanel
specifier|public
class|class
name|BasePanel
extends|extends
name|JSplitPane
implements|implements
name|MouseListener
block|{
comment|//, ClipboardOwner {
DECL|field|ths
name|BasePanel
name|ths
init|=
name|this
decl_stmt|;
DECL|field|frame
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|database
name|BibtexDatabase
name|database
decl_stmt|;
DECL|field|prefs
name|JabRefPreferences
name|prefs
decl_stmt|;
comment|// The database shown in this panel.
DECL|field|file
name|File
name|file
init|=
literal|null
decl_stmt|,
DECL|field|fileToOpen
name|fileToOpen
init|=
literal|null
decl_stmt|;
comment|// The filename of the database.
comment|//Hashtable autoCompleters = new Hashtable();
comment|// Hashtable that holds as keys the names of the fields where
comment|// autocomplete is active, and references to the autocompleter objects.
comment|// The undo manager.
DECL|field|undoManager
specifier|public
name|CountingUndoManager
name|undoManager
init|=
operator|new
name|CountingUndoManager
argument_list|()
decl_stmt|;
DECL|field|undoAction
name|UndoAction
name|undoAction
init|=
operator|new
name|UndoAction
argument_list|()
decl_stmt|;
DECL|field|redoAction
name|RedoAction
name|redoAction
init|=
operator|new
name|RedoAction
argument_list|()
decl_stmt|;
comment|//ExampleFileFilter fileFilter;
comment|// File filter for .bib files.
DECL|field|baseChanged
name|boolean
name|baseChanged
init|=
literal|false
decl_stmt|;
comment|// Used to track whether the base has changed since last save.
DECL|field|tableModel
name|EntryTableModel
name|tableModel
init|=
literal|null
decl_stmt|;
DECL|field|entryTable
name|EntryTable
name|entryTable
init|=
literal|null
decl_stmt|;
DECL|field|entryTypeForms
name|HashMap
name|entryTypeForms
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Hashmap to keep track of which entries currently have open
comment|// EntryTypeForm dialogs.
DECL|field|preambleEditor
name|PreambleEditor
name|preambleEditor
init|=
literal|null
decl_stmt|;
comment|// Keeps track of the preamble dialog if it is open.
DECL|field|stringDialog
name|StringDialog
name|stringDialog
init|=
literal|null
decl_stmt|;
comment|// Keeps track of the string dialog if it is open.
comment|//SearchPane searchDialog = null;
comment|// The search pane.
DECL|field|showingSearchResults
name|boolean
name|showingSearchResults
init|=
literal|false
decl_stmt|,
DECL|field|showingGroup
name|showingGroup
init|=
literal|false
decl_stmt|;
comment|// The sidepane manager takes care of populating the sidepane.
DECL|field|sidePaneManager
name|SidePaneManager
name|sidePaneManager
decl_stmt|;
comment|// MetaData parses, keeps and writes meta data.
DECL|field|metaData
name|MetaData
name|metaData
decl_stmt|;
DECL|field|actions
specifier|private
name|HashMap
name|actions
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|method|BasePanel (JabRefFrame frame, JabRefPreferences prefs)
specifier|public
name|BasePanel
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
name|database
operator|=
operator|new
name|BibtexDatabase
argument_list|()
expr_stmt|;
name|metaData
operator|=
operator|new
name|MetaData
argument_list|()
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|setupActions
argument_list|()
expr_stmt|;
name|setupMainPanel
argument_list|()
expr_stmt|;
block|}
DECL|method|BasePanel (JabRefFrame frame, BibtexDatabase db, File file, HashMap meta, JabRefPreferences prefs)
specifier|public
name|BasePanel
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BibtexDatabase
name|db
parameter_list|,
name|File
name|file
parameter_list|,
name|HashMap
name|meta
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
name|super
argument_list|(
name|JSplitPane
operator|.
name|HORIZONTAL_SPLIT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|database
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|parseMetaData
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|setupActions
argument_list|()
expr_stmt|;
name|setupMainPanel
argument_list|()
expr_stmt|;
comment|/*if (prefs.getBoolean("autoComplete")) { 	    db.setCompleters(autoCompleters); 	    }*/
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
comment|/**      * BaseAction is used to define actions that are called from the      * base frame through runCommand(). runCommand() finds the      * appropriate BaseAction object, and runs its action() method.      */
DECL|class|BaseAction
specifier|abstract
class|class
name|BaseAction
block|{
DECL|method|action ()
specifier|abstract
name|void
name|action
parameter_list|()
function_decl|;
block|}
DECL|method|setupActions ()
specifier|private
name|void
name|setupActions
parameter_list|()
block|{
name|actions
operator|.
name|put
argument_list|(
literal|"undo"
argument_list|,
name|undoAction
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"redo"
argument_list|,
name|redoAction
argument_list|)
expr_stmt|;
comment|// The action for opening an entry editor.
name|actions
operator|.
name|put
argument_list|(
literal|"edit"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|int
name|clickedOn
init|=
operator|-
literal|1
decl_stmt|;
comment|// We demand that one and only one row is selected.
if|if
condition|(
name|entryTable
operator|.
name|getSelectedRowCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|clickedOn
operator|=
name|entryTable
operator|.
name|getSelectedRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clickedOn
operator|>=
literal|0
condition|)
block|{
name|String
name|id
init|=
name|tableModel
operator|.
name|getNameFromNumber
argument_list|(
name|clickedOn
argument_list|)
decl_stmt|;
comment|// First we check that no editor is already open for this
comment|// entry.
if|if
condition|(
operator|!
name|entryTypeForms
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|BibtexEntry
name|be
init|=
name|database
operator|.
name|getEntryById
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|EntryTypeForm
name|form
init|=
operator|new
name|EntryTypeForm
argument_list|(
name|frame
argument_list|,
name|ths
argument_list|,
name|be
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|form
argument_list|,
name|frame
argument_list|)
expr_stmt|;
comment|// We want to center the editor.
name|form
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entryTypeForms
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|form
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
call|(
name|EntryTypeForm
call|)
argument_list|(
name|entryTypeForms
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
operator|)
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for saving a database.
name|actions
operator|.
name|put
argument_list|(
literal|"save"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
name|runCommand
argument_list|(
literal|"saveAs"
argument_list|)
expr_stmt|;
else|else
block|{
try|try
block|{
name|FileActions
operator|.
name|saveDatabase
argument_list|(
name|database
argument_list|,
name|metaData
argument_list|,
name|file
argument_list|,
name|prefs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|undoManager
operator|.
name|markUnchanged
argument_list|()
expr_stmt|;
comment|// (Only) after a successful save the following
comment|// statement marks that the base is unchanged
comment|// since last save:
name|baseChanged
operator|=
literal|false
expr_stmt|;
name|frame
operator|.
name|setTabTitle
argument_list|(
name|ths
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saved database"
argument_list|)
operator|+
literal|" '"
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|specificEntry
argument_list|()
condition|)
block|{
comment|// Error occured during processing of
comment|// be. Highlight it:
name|int
name|row
init|=
name|tableModel
operator|.
name|getNumberFromName
argument_list|(
name|ex
operator|.
name|getEntry
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|,
name|topShow
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|row
operator|-
literal|3
argument_list|)
decl_stmt|;
comment|//Util.pr(""+row);
name|entryTable
operator|.
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|setColumnSelectionInterval
argument_list|(
literal|0
argument_list|,
name|entryTable
operator|.
name|getColumnCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|scrollTo
argument_list|(
name|topShow
argument_list|)
expr_stmt|;
block|}
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not save file"
argument_list|)
operator|+
literal|".\n"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save database"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"saveAs"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|JFileChooser
name|chooser
init|=
operator|new
name|JFileChooser
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
argument_list|)
decl_stmt|;
name|Util
operator|.
name|pr
argument_list|(
literal|"BasePanel: must set file filter"
argument_list|)
expr_stmt|;
comment|//chooser.setFileFilter(fileFilter);
name|int
name|returnVal
init|=
name|chooser
operator|.
name|showSaveDialog
argument_list|(
name|frame
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnVal
operator|==
name|JFileChooser
operator|.
name|APPROVE_OPTION
condition|)
block|{
name|String
name|name
init|=
name|chooser
operator|.
name|getSelectedFile
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|,
name|path
init|=
name|chooser
operator|.
name|getSelectedFile
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|endsWith
argument_list|(
literal|".bib"
argument_list|)
condition|)
name|name
operator|=
name|name
operator|+
literal|".bib"
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
operator|(
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
literal|"File '"
operator|+
name|name
operator|+
literal|"' exists. Overwrite?"
argument_list|,
literal|"Save database"
argument_list|,
name|JOptionPane
operator|.
name|OK_CANCEL_OPTION
argument_list|)
operator|==
name|JOptionPane
operator|.
name|OK_OPTION
operator|)
condition|)
block|{
name|runCommand
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
literal|"workingDirectory"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
name|file
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// Cancelled.
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for opening the preamble editor
name|actions
operator|.
name|put
argument_list|(
literal|"editPreamble"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
if|if
condition|(
name|preambleEditor
operator|==
literal|null
condition|)
block|{
name|PreambleEditor
name|form
init|=
operator|new
name|PreambleEditor
argument_list|(
name|frame
argument_list|,
name|ths
argument_list|,
name|database
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|form
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|form
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|preambleEditor
operator|=
name|form
expr_stmt|;
block|}
else|else
block|{
name|preambleEditor
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for opening the string editor
name|actions
operator|.
name|put
argument_list|(
literal|"editStrings"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
if|if
condition|(
name|stringDialog
operator|==
literal|null
condition|)
block|{
name|StringDialog
name|form
init|=
operator|new
name|StringDialog
argument_list|(
name|frame
argument_list|,
name|ths
argument_list|,
name|database
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|form
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|form
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stringDialog
operator|=
name|form
expr_stmt|;
block|}
else|else
block|{
name|stringDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for toggling the groups interface
name|actions
operator|.
name|put
argument_list|(
literal|"toggleGroups"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|sidePaneManager
operator|.
name|togglePanel
argument_list|(
literal|"groups"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is called from JabRefFrame is a database specific      * action is requested by the user. Runs the command if it is      * defined, or prints an error message to the standard error      * stream.     */
DECL|method|runCommand (String command)
specifier|public
name|void
name|runCommand
parameter_list|(
name|String
name|command
parameter_list|)
block|{
if|if
condition|(
name|actions
operator|.
name|get
argument_list|(
name|command
argument_list|)
operator|==
literal|null
condition|)
name|Util
operator|.
name|pr
argument_list|(
literal|"No action defined for'"
operator|+
name|command
operator|+
literal|"'"
argument_list|)
expr_stmt|;
else|else
operator|(
operator|(
name|BaseAction
operator|)
name|actions
operator|.
name|get
argument_list|(
name|command
argument_list|)
operator|)
operator|.
name|action
argument_list|()
expr_stmt|;
block|}
DECL|method|setupMainPanel ()
specifier|public
name|void
name|setupMainPanel
parameter_list|()
block|{
name|tableModel
operator|=
operator|new
name|EntryTableModel
argument_list|(
name|frame
argument_list|,
name|this
argument_list|,
name|database
argument_list|)
expr_stmt|;
name|entryTable
operator|=
operator|new
name|EntryTable
argument_list|(
name|tableModel
argument_list|,
name|frame
operator|.
name|prefs
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|addMouseListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|copyStroke
argument_list|,
literal|"copy"
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|GUIGlobals
operator|.
name|pasteStroke
argument_list|,
literal|"paste"
argument_list|)
expr_stmt|;
comment|//entryTable.getActionMap().put("copy", copyAction);
comment|//entryTable.getActionMap().put("paste", pasteAction);
name|Util
operator|.
name|pr
argument_list|(
literal|"BasePanel: must set bindings for copy and paste."
argument_list|)
expr_stmt|;
comment|// Set the right-click menu for the entry table.
comment|//RightClickMenu rcm = new RightClickMenu(this, metaData);
comment|//entryTable.setRightClickMenu(rcm);
name|Util
operator|.
name|pr
argument_list|(
literal|"BasePanel: must add right click menu"
argument_list|)
expr_stmt|;
name|setRightComponent
argument_list|(
name|entryTable
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|=
operator|new
name|SidePaneManager
argument_list|(
name|frame
argument_list|,
name|this
argument_list|,
name|prefs
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|populatePanel
argument_list|()
expr_stmt|;
comment|//mainPanel.setDividerLocation(GUIGlobals.SPLIT_PANE_DIVIDER_LOCATION);
name|setDividerSize
argument_list|(
name|GUIGlobals
operator|.
name|SPLIT_PANE_DIVIDER_SIZE
argument_list|)
expr_stmt|;
name|setResizeWeight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|revalidate
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method is called after a database has been parsed. The      * hashmap contains the contents of all comments in the .bib file      * that started with the meta flag (GUIGlobals.META_FLAG).      * In this method, the meta data are input to their respective      * handlers.      */
DECL|method|parseMetaData (HashMap meta)
specifier|public
name|void
name|parseMetaData
parameter_list|(
name|HashMap
name|meta
parameter_list|)
block|{
name|metaData
operator|=
operator|new
name|MetaData
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshTable ()
specifier|public
name|void
name|refreshTable
parameter_list|()
block|{
comment|// This method is called by EntryTypeForm when a field value is
comment|// stored. The table is scheduled for repaint.
name|tableModel
operator|.
name|remap
argument_list|()
expr_stmt|;
name|entryTable
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|entryTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
DECL|method|updatePreamble ()
specifier|public
name|void
name|updatePreamble
parameter_list|()
block|{
if|if
condition|(
name|preambleEditor
operator|!=
literal|null
condition|)
name|preambleEditor
operator|.
name|updatePreamble
argument_list|()
expr_stmt|;
block|}
DECL|method|assureStringDialogNotEditing ()
specifier|public
name|void
name|assureStringDialogNotEditing
parameter_list|()
block|{
name|Util
operator|.
name|pr
argument_list|(
literal|"BasePanel: there is no stringDialog."
argument_list|)
expr_stmt|;
comment|/* 	if (stringDialog != null) 	    stringDialog.assureNotEditing(); 	*/
block|}
DECL|method|updateStringDialog ()
specifier|public
name|void
name|updateStringDialog
parameter_list|()
block|{
name|Util
operator|.
name|pr
argument_list|(
literal|"BasePanel: there is no stringDialog."
argument_list|)
expr_stmt|;
comment|/* 	if (stringDialog != null) 	    stringDialog.refreshTable(); 	*/
block|}
DECL|method|markBaseChanged ()
specifier|public
name|void
name|markBaseChanged
parameter_list|()
block|{
name|baseChanged
operator|=
literal|true
expr_stmt|;
comment|// Put an asterix behind the file name to indicate the
comment|// database has changed.
name|String
name|oldTitle
init|=
name|frame
operator|.
name|getTabTitle
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldTitle
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
condition|)
name|frame
operator|.
name|setTabTitle
argument_list|(
name|this
argument_list|,
name|oldTitle
operator|+
literal|"*"
argument_list|)
expr_stmt|;
comment|// If the status line states that the base has been saved, we
comment|// remove this message, since it is no longer relevant. If a
comment|// different message is shown, we leave it.
if|if
condition|(
name|frame
operator|.
name|statusLine
operator|.
name|getText
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Saved database"
argument_list|)
condition|)
name|frame
operator|.
name|output
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
DECL|method|markChangedOrUnChanged ()
specifier|public
specifier|synchronized
name|void
name|markChangedOrUnChanged
parameter_list|()
block|{
if|if
condition|(
name|undoManager
operator|.
name|hasChanged
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|baseChanged
condition|)
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|baseChanged
condition|)
block|{
name|baseChanged
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
name|frame
operator|.
name|setTabTitle
argument_list|(
name|ths
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|frame
operator|.
name|setTabTitle
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"untitled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|showSearchResults (String searchValueField)
specifier|public
name|void
name|showSearchResults
parameter_list|(
name|String
name|searchValueField
parameter_list|)
block|{
comment|//Util.pr("BasePanel: must show search results.");
comment|//entryTable.scrollTo(0);
if|if
condition|(
name|searchValueField
operator|==
name|Globals
operator|.
name|SEARCH
condition|)
name|showingSearchResults
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|searchValueField
operator|==
name|Globals
operator|.
name|GROUPSEARCH
condition|)
name|showingGroup
operator|=
literal|true
expr_stmt|;
name|entryTable
operator|.
name|setShowingSearchResults
argument_list|(
name|showingSearchResults
argument_list|,
name|showingGroup
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|entryTable
operator|.
name|scrollTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
DECL|method|stopShowingSearchResults ()
specifier|public
name|void
name|stopShowingSearchResults
parameter_list|()
block|{
name|showingSearchResults
operator|=
literal|false
expr_stmt|;
name|entryTable
operator|.
name|setShowingSearchResults
argument_list|(
name|showingSearchResults
argument_list|,
name|showingGroup
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
DECL|method|stopShowingGroup ()
specifier|public
name|void
name|stopShowingGroup
parameter_list|()
block|{
name|showingGroup
operator|=
literal|false
expr_stmt|;
name|entryTable
operator|.
name|setShowingSearchResults
argument_list|(
name|showingSearchResults
argument_list|,
name|showingGroup
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
DECL|method|getTableModel ()
specifier|protected
name|EntryTableModel
name|getTableModel
parameter_list|()
block|{
return|return
name|tableModel
return|;
block|}
DECL|method|getDatabase ()
specifier|protected
name|BibtexDatabase
name|getDatabase
parameter_list|()
block|{
return|return
name|database
return|;
block|}
DECL|method|entryTypeFormClosing (String id)
specifier|public
name|void
name|entryTypeFormClosing
parameter_list|(
name|String
name|id
parameter_list|)
block|{
comment|// Called by EntryTypeForm when closing.
name|entryTypeForms
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|preambleEditorClosing ()
specifier|public
name|void
name|preambleEditorClosing
parameter_list|()
block|{
name|preambleEditor
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|stringsClosing ()
specifier|public
name|void
name|stringsClosing
parameter_list|()
block|{
name|stringDialog
operator|=
literal|null
expr_stmt|;
block|}
comment|// The action for copying selected entries.
comment|/*     CopyAction copyAction = new CopyAction(this);     class CopyAction extends AbstractAction { 	BibtexBaseFrame parent; 	public CopyAction(BibtexBaseFrame parent_) { 	    super("Copy", 		  new ImageIcon(GUIGlobals.copyIconFile)); 	    putValue(SHORT_DESCRIPTION, "Copy"); 	    parent = parent_; 	}     	public void actionPerformed(ActionEvent e) { 	    BibtexEntry[] bes = entryTable.getSelectedEntries();  	    // Entries are copied if only the first or multiple 	    // columns are selected. 	    if ((bes != null)&& (bes.length> 0)) { 		TransferableBibtexEntry trbe = new TransferableBibtexEntry(bes); 		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(trbe, parent); 		output("Copied "+(bes.length>1 ? bes.length+" entries." : "1 entry.")); 	    } else { 		// The user maybe selected a single cell. 		int[] rows = entryTable.getSelectedRows(), 		    cols = entryTable.getSelectedColumns(); 		if ((cols.length == 1)&& (rows.length == 1)) { 		    // Copy single value. 		    Object o = tableModel.getValueAt(rows[0], cols[0]); 		    if (o != null) { 			StringSelection ss = new StringSelection(o.toString()); 			Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, parent); 			output("Copied cell contents."); 		    } 		} 	    } 	}     }      // The action for pasting entries.     PasteAction pasteAction = new PasteAction();     class PasteAction extends AbstractAction { 	public PasteAction() { 	    super("Paste", 		  new ImageIcon(GUIGlobals.pasteIconFile)); 	    putValue(SHORT_DESCRIPTION, "Paste"); 	}     	public void actionPerformed(ActionEvent e) { 	    // We pick an object from the clipboard, check if it exists, and if it is a set of entries. 	    Transferable content = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null); 	    if (content != null) { 		DataFlavor[] flavor = content.getTransferDataFlavors(); 		if ((flavor != null)&& (flavor.length> 0)&& flavor[0].equals(TransferableBibtexEntry.entryFlavor)) { 		    // We have determined that the clipboard data is a set of entries. 		    BibtexEntry[] bes = null; 		    try { 			bes = (BibtexEntry[])(content.getTransferData(TransferableBibtexEntry.entryFlavor)); 		    } catch (UnsupportedFlavorException ex) { 		    } catch (IOException ex) {}  		    if ((bes != null)&& (bes.length> 0)) { 			NamedCompound ce = new NamedCompound 			    (bes.length> 1 ? "paste entries" : "paste entry"); 			for (int i=0; i<bes.length; i++) { 			    try {  				BibtexEntry be = (BibtexEntry)(bes[i].clone()); 				// We have to clone the entries, since the pasted 				// entries must exist independently of the copied 				// ones. 				be.setId(Util.createID(be.getType(), database)); 				database.insertEntry(be); 				ce.addEdit(new UndoableInsertEntry 					   (database, be, entryTypeForms)); 			    } catch (KeyCollisionException ex) { 				Util.pr("KeyCollisionException... this shouldn't happen."); 			    } 			} 			ce.end(); 			undoManager.addEdit(ce); 			tableModel.remap(); 			entryTable.clearSelection(); 			entryTable.revalidate(); 			output("Pasted "+(bes.length>1 ? bes.length+" entries." : "1 entry.")); 			refreshTable(); 			markBaseChanged(); 		    } 		} 		if ((flavor != null)&& (flavor.length> 0)&& flavor[0].equals(DataFlavor.stringFlavor)) {  		    // We have determined that the clipboard data is a string. 		    int[] rows = entryTable.getSelectedRows(), 			cols = entryTable.getSelectedColumns(); 		    if ((cols != null)&& (cols.length == 1)&& (cols[0] != 0)&& (rows != null)&& (rows.length == 1)) { 			try { 			    tableModel.setValueAt((String)(content.getTransferData(DataFlavor.stringFlavor)), rows[0], cols[0]); 			    refreshTable(); 			    markBaseChanged();			    			    output("Pasted cell contents"); 			} catch (UnsupportedFlavorException ex) { 			} catch (IOException ex) { 			} catch (IllegalArgumentException ex) { 			    output("Can't paste."); 			} 		    } 		} 	    } 	}     }  */
DECL|class|UndoAction
class|class
name|UndoAction
extends|extends
name|BaseAction
block|{
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
try|try
block|{
name|String
name|name
init|=
name|undoManager
operator|.
name|getUndoPresentationName
argument_list|()
decl_stmt|;
name|undoManager
operator|.
name|undo
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CannotUndoException
name|ex
parameter_list|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Nothing to undo"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|// After everything, enable/disable the undo/redo actions
comment|// appropriately.
comment|//updateUndoState();
comment|//redoAction.updateRedoState();
name|markChangedOrUnChanged
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RedoAction
class|class
name|RedoAction
extends|extends
name|BaseAction
block|{
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
try|try
block|{
name|String
name|name
init|=
name|undoManager
operator|.
name|getRedoPresentationName
argument_list|()
decl_stmt|;
name|undoManager
operator|.
name|redo
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CannotRedoException
name|ex
parameter_list|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Nothing to redo"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|// After everything, enable/disable the undo/redo actions
comment|// appropriately.
comment|//updateRedoState();
comment|//undoAction.updateUndoState();
name|markChangedOrUnChanged
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|mouseClicked (MouseEvent e)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// Intercepts mouse clicks from the JTable showing the base contents.
comment|// A double click on an entry should open the entry's editor.
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|runCommand
argument_list|(
literal|"edit"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mouseEntered (MouseEvent e)
specifier|public
name|void
name|mouseEntered
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{}
DECL|method|mouseExited (MouseEvent e)
specifier|public
name|void
name|mouseExited
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{}
DECL|method|mousePressed (MouseEvent e)
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{}
DECL|method|mouseReleased (MouseEvent e)
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{}
comment|// Method pertaining to the ClipboardOwner interface.
DECL|method|lostOwnership (Clipboard clipboard, Transferable contents)
specifier|public
name|void
name|lostOwnership
parameter_list|(
name|Clipboard
name|clipboard
parameter_list|,
name|Transferable
name|contents
parameter_list|)
block|{}
block|}
end_class

end_unit

