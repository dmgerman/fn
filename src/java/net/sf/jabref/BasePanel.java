begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Morten O. Alver and Nizar N. Batada  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html    */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|collab
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|PushToLyx
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|AutoSetExternalFileForEntries
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
operator|.
name|LabelPatternUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|text
operator|.
name|gui
operator|.
name|TextInputDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|ImportInspectionDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|uif_lite
operator|.
name|component
operator|.
name|UIFSplitPane
import|;
end_import

begin_class
DECL|class|BasePanel
specifier|public
class|class
name|BasePanel
extends|extends
name|JPanel
implements|implements
name|ClipboardOwner
implements|,
name|FileUpdateListener
block|{
DECL|field|tmp
name|boolean
name|tmp
init|=
literal|true
decl_stmt|;
DECL|field|contentPane
name|UIFSplitPane
name|contentPane
init|=
operator|new
name|UIFSplitPane
argument_list|()
decl_stmt|;
DECL|field|splitPane
name|JSplitPane
name|splitPane
decl_stmt|;
comment|//BibtexEntry testE = new BibtexEntry("tt");
DECL|field|previewPanel
name|PreviewPanel
index|[]
name|previewPanel
init|=
literal|null
decl_stmt|;
DECL|field|activePreview
name|int
name|activePreview
init|=
literal|1
decl_stmt|;
DECL|field|previewActive
name|boolean
name|previewActive
init|=
literal|true
decl_stmt|;
DECL|field|frame
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|database
name|BibtexDatabase
name|database
decl_stmt|;
DECL|field|prefs
name|JabRefPreferences
name|prefs
decl_stmt|;
comment|// The database shown in this panel.
DECL|field|file
name|File
name|file
init|=
literal|null
decl_stmt|,
DECL|field|fileToOpen
name|fileToOpen
init|=
literal|null
decl_stmt|;
comment|// The filename of the database.
DECL|field|fileMonitorHandle
name|String
name|fileMonitorHandle
init|=
literal|null
decl_stmt|;
DECL|field|saving
DECL|field|updatedExternally
name|boolean
name|saving
init|=
literal|false
decl_stmt|,
name|updatedExternally
init|=
literal|false
decl_stmt|;
DECL|field|encoding
specifier|private
name|String
name|encoding
init|=
literal|null
decl_stmt|;
DECL|field|gbl
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
comment|//Hashtable autoCompleters = new Hashtable();
comment|// Hashtable that holds as keys the names of the fields where
comment|// autocomplete is active, and references to the autocompleter objects.
comment|// The undo manager.
DECL|field|undoManager
specifier|public
name|CountingUndoManager
name|undoManager
init|=
operator|new
name|CountingUndoManager
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|undoAction
name|UndoAction
name|undoAction
init|=
operator|new
name|UndoAction
argument_list|()
decl_stmt|;
DECL|field|redoAction
name|RedoAction
name|redoAction
init|=
operator|new
name|RedoAction
argument_list|()
decl_stmt|;
comment|//ExampleFileFilter fileFilter;
comment|// File filter for .bib files.
DECL|field|baseChanged
DECL|field|nonUndoableChange
name|boolean
name|baseChanged
init|=
literal|false
decl_stmt|,
name|nonUndoableChange
init|=
literal|false
decl_stmt|;
comment|// Used to track whether the base has changed since last save.
DECL|field|tableModel
name|EntryTableModel
name|tableModel
init|=
literal|null
decl_stmt|;
DECL|field|entryTable
specifier|public
name|EntryTable
name|entryTable
init|=
literal|null
decl_stmt|;
DECL|field|rcm
specifier|public
name|RightClickMenu
name|rcm
decl_stmt|;
DECL|field|showing
name|BibtexEntry
name|showing
init|=
literal|null
decl_stmt|;
comment|// To indicate which entry is currently shown.
DECL|field|entryEditors
specifier|public
name|HashMap
name|entryEditors
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// To contain instantiated entry editors. This is to save time
comment|// in switching between entries.
comment|//HashMap entryTypeForms = new HashMap();
comment|// Hashmap to keep track of which entries currently have open
comment|// EntryTypeForm dialogs.
DECL|field|preambleEditor
name|PreambleEditor
name|preambleEditor
init|=
literal|null
decl_stmt|;
comment|// Keeps track of the preamble dialog if it is open.
DECL|field|stringDialog
name|StringDialog
name|stringDialog
init|=
literal|null
decl_stmt|;
comment|// Keeps track of the string dialog if it is open.
comment|/**      * The group selector component for this database. Instantiated by the      * SidePaneManager if necessary, or from this class if merging groups from a      * different database.      */
comment|//GroupSelector groupSelector;
DECL|field|sortingBySearchResults
name|boolean
name|sortingBySearchResults
init|=
literal|false
decl_stmt|,
DECL|field|coloringBySearchResults
name|coloringBySearchResults
init|=
literal|false
decl_stmt|,
DECL|field|hidingNonHits
name|hidingNonHits
init|=
literal|false
decl_stmt|,
DECL|field|sortingByGroup
name|sortingByGroup
init|=
literal|false
decl_stmt|,
DECL|field|sortingByCiteSeerResults
name|sortingByCiteSeerResults
init|=
literal|false
decl_stmt|,
DECL|field|coloringByGroup
name|coloringByGroup
init|=
literal|false
decl_stmt|;
comment|//previewEnabled = Globals.prefs.getBoolean("previewEnabled");
DECL|field|lastSearchHits
name|int
name|lastSearchHits
init|=
operator|-
literal|1
decl_stmt|;
comment|// The number of hits in the latest search.
comment|// Potential use in hiding non-hits completely.
comment|// MetaData parses, keeps and writes meta data.
DECL|field|metaData
name|MetaData
name|metaData
decl_stmt|;
DECL|field|fieldExtras
name|HashMap
name|fieldExtras
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|//## keep track of all keys for duplicate key warning and unique key generation
comment|//private HashMap allKeys  = new HashMap();	// use a map instead of a set since i need to know how many of each key is inthere
DECL|field|suppressOutput
specifier|private
name|boolean
name|suppressOutput
init|=
literal|false
decl_stmt|;
DECL|field|actions
specifier|private
name|HashMap
name|actions
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|field|sidePaneManager
specifier|private
name|SidePaneManager
name|sidePaneManager
decl_stmt|;
DECL|method|BasePanel (JabRefFrame frame, JabRefPreferences prefs)
specifier|public
name|BasePanel
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
comment|//super(JSplitPane.HORIZONTAL_SPLIT, true);
name|this
operator|.
name|sidePaneManager
operator|=
name|Globals
operator|.
name|sidePaneManager
expr_stmt|;
name|database
operator|=
operator|new
name|BibtexDatabase
argument_list|()
expr_stmt|;
name|metaData
operator|=
operator|new
name|MetaData
argument_list|()
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|instantiatePreviews
argument_list|()
expr_stmt|;
name|setupActions
argument_list|()
expr_stmt|;
name|setupMainPanel
argument_list|()
expr_stmt|;
block|}
DECL|method|BasePanel (JabRefFrame frame, BibtexDatabase db, File file, HashMap meta, JabRefPreferences prefs)
specifier|public
name|BasePanel
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BibtexDatabase
name|db
parameter_list|,
name|File
name|file
parameter_list|,
name|HashMap
name|meta
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
comment|//super(JSplitPane.HORIZONTAL_SPLIT, true);
name|this
operator|.
name|sidePaneManager
operator|=
name|Globals
operator|.
name|sidePaneManager
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|database
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
name|parseMetaData
argument_list|(
name|meta
argument_list|)
expr_stmt|;
else|else
name|metaData
operator|=
operator|new
name|MetaData
argument_list|()
expr_stmt|;
name|instantiatePreviews
argument_list|()
expr_stmt|;
name|setupActions
argument_list|()
expr_stmt|;
name|setupMainPanel
argument_list|()
expr_stmt|;
comment|/*if (prefs.getBoolean("autoComplete")) {             db.setCompleters(autoCompleters);             }*/
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
comment|// Register so we get notifications about outside changes to the file.
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
try|try
block|{
name|fileMonitorHandle
operator|=
name|Globals
operator|.
name|fileUpdateMonitor
operator|.
name|addUpdateListener
argument_list|(
name|this
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{         }
block|}
DECL|method|instantiatePreviews ()
specifier|private
name|void
name|instantiatePreviews
parameter_list|()
block|{
name|previewPanel
operator|=
operator|new
name|PreviewPanel
index|[]
block|{
operator|new
name|PreviewPanel
argument_list|(
name|database
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"preview0"
argument_list|)
argument_list|)
block|,
operator|new
name|PreviewPanel
argument_list|(
name|database
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"preview1"
argument_list|)
argument_list|)
block|}
expr_stmt|;
block|}
DECL|method|database ()
specifier|public
name|BibtexDatabase
name|database
parameter_list|()
block|{
return|return
name|database
return|;
block|}
DECL|method|metaData ()
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|metaData
return|;
block|}
DECL|method|file ()
specifier|public
name|File
name|file
parameter_list|()
block|{
return|return
name|file
return|;
block|}
DECL|method|frame ()
specifier|public
name|JabRefFrame
name|frame
parameter_list|()
block|{
return|return
name|frame
return|;
block|}
DECL|method|prefs ()
specifier|public
name|JabRefPreferences
name|prefs
parameter_list|()
block|{
return|return
name|prefs
return|;
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
DECL|method|output (String s)
specifier|public
name|void
name|output
parameter_list|(
name|String
name|s
parameter_list|)
block|{
comment|//Util.pr("\""+s+"\""+(SwingUtilities.isEventDispatchThread()));
if|if
condition|(
operator|!
name|suppressOutput
condition|)
name|frame
operator|.
name|output
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setupActions ()
specifier|private
name|void
name|setupActions
parameter_list|()
block|{
name|actions
operator|.
name|put
argument_list|(
literal|"undo"
argument_list|,
name|undoAction
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"redo"
argument_list|,
name|redoAction
argument_list|)
expr_stmt|;
comment|// The action for opening an entry editor.
name|actions
operator|.
name|put
argument_list|(
literal|"edit"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
if|if
condition|(
name|isShowingEditor
argument_list|()
condition|)
block|{
operator|new
name|FocusRequester
argument_list|(
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|frame
operator|.
name|block
argument_list|()
expr_stmt|;
comment|//(new Thread() {
comment|//public void run() {
name|int
name|clickedOn
init|=
operator|-
literal|1
decl_stmt|;
comment|// We demand that one and only one row is selected.
if|if
condition|(
name|entryTable
operator|.
name|getSelectedRowCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|clickedOn
operator|=
name|entryTable
operator|.
name|getSelectedRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clickedOn
operator|>=
literal|0
condition|)
block|{
name|String
name|id
init|=
name|tableModel
operator|.
name|getIdForRow
argument_list|(
name|clickedOn
argument_list|)
decl_stmt|;
name|BibtexEntry
name|be
init|=
name|database
operator|.
name|getEntryById
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|showEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
if|if
condition|(
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
operator|!=
literal|null
condition|)
block|{
operator|new
name|FocusRequester
argument_list|(
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for saving a database.
name|actions
operator|.
name|put
argument_list|(
literal|"save"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
name|runCommand
argument_list|(
literal|"saveAs"
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|updatedExternally
operator|||
name|Globals
operator|.
name|fileUpdateMonitor
operator|.
name|hasBeenModified
argument_list|(
name|fileMonitorHandle
argument_list|)
condition|)
block|{
name|String
index|[]
name|opts
init|=
operator|new
name|String
index|[]
block|{
name|Globals
operator|.
name|lang
argument_list|(
literal|"Review changes"
argument_list|)
block|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save"
argument_list|)
block|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
block|}
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showOptionDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"File has been updated externally. "
operator|+
literal|"What do you want to do?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"File updated externally"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_CANCEL_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|,
literal|null
argument_list|,
name|opts
argument_list|,
name|opts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|/*  int choice = JOptionPane.showConfirmDialog(frame, Globals.lang("File has been updated externally. "                             +"Are you sure you want to save?"), Globals.lang("File updated externally"),                                                                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);*/
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CANCEL_OPTION
condition|)
return|return;
elseif|else
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
name|ChangeScanner
name|scanner
init|=
operator|new
name|ChangeScanner
argument_list|(
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
decl_stmt|;
comment|//, panel.database(), panel.metaData());
comment|//try {
name|scanner
operator|.
name|changeScan
argument_list|(
name|file
argument_list|()
argument_list|)
expr_stmt|;
name|setUpdatedExternally
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sidePaneManager
operator|.
name|hideAway
argument_list|(
literal|"fileUpdate"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//} catch (IOException ex) {
comment|//    ex.printStackTrace();
comment|//}
return|return;
block|}
block|}
name|saving
operator|=
literal|true
expr_stmt|;
name|saveDatabase
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Util.pr("Testing resolve string... BasePanel line 237");
comment|//Util.pr("Resolve aq: "+database.resolveString("aq"));
comment|//Util.pr("Resolve text: "+database.resolveForStrings("A text which refers to the string #aq# and #billball#, hurra."));
try|try
block|{
name|Globals
operator|.
name|fileUpdateMonitor
operator|.
name|updateTimeStamp
argument_list|(
name|fileMonitorHandle
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// This means the file has not yet been registered, which is the case
comment|// when doing a "Save as". Maybe we should change the monitor so no
comment|// exception is cast.
block|}
name|saving
operator|=
literal|false
expr_stmt|;
name|undoManager
operator|.
name|markUnchanged
argument_list|()
expr_stmt|;
comment|// (Only) after a successful save the following
comment|// statement marks that the base is unchanged
comment|// since last save:
name|nonUndoableChange
operator|=
literal|false
expr_stmt|;
name|baseChanged
operator|=
literal|false
expr_stmt|;
name|updatedExternally
operator|=
literal|false
expr_stmt|;
name|frame
operator|.
name|setTabTitle
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saved database"
argument_list|)
operator|+
literal|" '"
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"saveAs"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|chosenFile
init|=
name|Globals
operator|.
name|getNewFile
argument_list|(
name|frame
argument_list|,
name|prefs
argument_list|,
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
argument_list|)
argument_list|,
literal|".bib"
argument_list|,
name|JFileChooser
operator|.
name|SAVE_DIALOG
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenFile
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|chosenFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
operator|(
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
literal|"'"
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"exists. Overwrite file?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save database"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|OK_CANCEL_OPTION
argument_list|)
operator|==
name|JOptionPane
operator|.
name|OK_OPTION
operator|)
condition|)
block|{
name|runCommand
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
comment|// Register so we get notifications about outside changes to the file.
try|try
block|{
name|fileMonitorHandle
operator|=
name|Globals
operator|.
name|fileUpdateMonitor
operator|.
name|addUpdateListener
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|prefs
operator|.
name|put
argument_list|(
literal|"workingDirectory"
argument_list|,
name|file
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|.
name|getFileHistory
argument_list|()
operator|.
name|newFile
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|file
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"saveSelectedAs"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|chosenFile
init|=
name|Globals
operator|.
name|getNewFile
argument_list|(
name|frame
argument_list|,
name|prefs
argument_list|,
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
argument_list|)
argument_list|,
literal|".bib"
argument_list|,
name|JFileChooser
operator|.
name|SAVE_DIALOG
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenFile
operator|!=
literal|null
condition|)
block|{
name|File
name|expFile
init|=
operator|new
name|File
argument_list|(
name|chosenFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expFile
operator|.
name|exists
argument_list|()
operator|||
operator|(
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
literal|"'"
operator|+
name|expFile
operator|.
name|getName
argument_list|()
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"exists. Overwrite file?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save database"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|OK_CANCEL_OPTION
argument_list|)
operator|==
name|JOptionPane
operator|.
name|OK_OPTION
operator|)
condition|)
block|{
name|saveDatabase
argument_list|(
name|expFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//runCommand("save");
name|frame
operator|.
name|getFileHistory
argument_list|()
operator|.
name|newFile
argument_list|(
name|expFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saved selected to"
argument_list|)
operator|+
literal|" '"
operator|+
name|expFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for copying selected entries.
name|actions
operator|.
name|put
argument_list|(
literal|"copy"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|bes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|bes
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|TransferableBibtexEntry
name|trbe
init|=
operator|new
name|TransferableBibtexEntry
argument_list|(
name|bes
argument_list|)
decl_stmt|;
comment|// ! look at ClipBoardManager
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|trbe
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Copied"
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|bes
operator|.
name|length
operator|>
literal|1
condition|?
name|bes
operator|.
name|length
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
else|:
literal|"1 "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|+
literal|"."
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The user maybe selected a single cell.
name|int
index|[]
name|rows
init|=
name|entryTable
operator|.
name|getSelectedRows
argument_list|()
decl_stmt|,
name|cols
init|=
name|entryTable
operator|.
name|getSelectedColumns
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|cols
operator|.
name|length
operator|==
literal|1
operator|)
operator|&&
operator|(
name|rows
operator|.
name|length
operator|==
literal|1
operator|)
condition|)
block|{
comment|// Copy single value.
name|Object
name|o
init|=
name|tableModel
operator|.
name|getValueAt
argument_list|(
name|rows
index|[
literal|0
index|]
argument_list|,
name|cols
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|StringSelection
name|ss
init|=
operator|new
name|StringSelection
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|ss
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Copied cell contents"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"cut"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
throws|throws
name|Throwable
block|{
name|runCommand
argument_list|(
literal|"copy"
argument_list|)
expr_stmt|;
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|int
name|row0
init|=
name|entryTable
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|bes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|bes
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
comment|// Create a CompoundEdit to make the action undoable.
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|bes
operator|.
name|length
operator|>
literal|1
condition|?
literal|"cut entries"
else|:
literal|"cut entry"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Loop through the array of entries, and delete them.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|database
operator|.
name|removeEntry
argument_list|(
name|bes
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ensureNotShowing
argument_list|(
name|bes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|database
argument_list|,
name|bes
index|[
name|i
index|]
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cut_pr"
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|bes
operator|.
name|length
operator|>
literal|1
condition|?
name|bes
operator|.
name|length
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
comment|// Reselect the entry in the first prev. selected position:
if|if
condition|(
name|row0
operator|>=
name|entryTable
operator|.
name|getRowCount
argument_list|()
condition|)
name|row0
operator|=
name|entryTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|row0
operator|>=
literal|0
condition|)
name|entryTable
operator|.
name|addRowSelectionInterval
argument_list|(
name|row0
argument_list|,
name|row0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"delete"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|int
name|row0
init|=
name|entryTable
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|bes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|bes
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
comment|//&& (database.getEntryCount()> 0)&& (entryTable.getSelectedRow()< database.getEntryCount())) {
name|boolean
name|goOn
init|=
name|showDeleteConfirmationDialog
argument_list|(
name|bes
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|goOn
condition|)
block|{
comment|// This is a hack to avoid the action being called twice,
comment|// feel free to fix it...
return|return;
comment|//entryTable.clearSelection();
block|}
else|else
block|{
comment|// Create a CompoundEdit to make the action undoable.
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|bes
operator|.
name|length
operator|>
literal|1
condition|?
literal|"delete entries"
else|:
literal|"delete entry"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Loop through the array of entries, and delete them.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|database
operator|.
name|removeEntry
argument_list|(
name|bes
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ensureNotShowing
argument_list|(
name|bes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|database
argument_list|,
name|bes
index|[
name|i
index|]
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|refreshTable
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Deleted"
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|bes
operator|.
name|length
operator|>
literal|1
condition|?
name|bes
operator|.
name|length
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
comment|//entryTable.clearSelection();
comment|// Reselect the entry in the first prev. selected position:
if|if
condition|(
name|row0
operator|>=
name|entryTable
operator|.
name|getRowCount
argument_list|()
condition|)
name|row0
operator|=
name|entryTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|row0
operator|>=
literal|0
condition|)
block|{
specifier|final
name|int
name|toSel
init|=
name|row0
decl_stmt|;
comment|//
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|entryTable
operator|.
name|addRowSelectionInterval
argument_list|(
name|toSel
argument_list|,
name|toSel
argument_list|)
expr_stmt|;
comment|//entryTable.ensureVisible(toSel);
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for pasting entries or cell contents.
comment|// Edited by Seb Wills<saw27@mrao.cam.ac.uk> on 14-Apr-04:
comment|//  - more robust detection of available content flavors (doesn't only look at first one offered)
comment|//  - support for parsing string-flavor clipboard contents which are bibtex entries.
comment|//    This allows you to (a) paste entire bibtex entries from a text editor, web browser, etc
comment|//                       (b) copy and paste entries between multiple instances of JabRef (since
comment|//         only the text representation seems to get as far as the X clipboard, at least on my system)
name|actions
operator|.
name|put
argument_list|(
literal|"paste"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
comment|// Get clipboard contents, and see if TransferableBibtexEntry is among the content flavors offered
name|Transferable
name|content
init|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|getContents
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|BibtexEntry
index|[]
name|bes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|isDataFlavorSupported
argument_list|(
name|TransferableBibtexEntry
operator|.
name|entryFlavor
argument_list|)
condition|)
block|{
comment|// We have determined that the clipboard data is a set of entries.
try|try
block|{
name|bes
operator|=
operator|(
name|BibtexEntry
index|[]
operator|)
operator|(
name|content
operator|.
name|getTransferData
argument_list|(
name|TransferableBibtexEntry
operator|.
name|entryFlavor
argument_list|)
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFlavorException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|content
operator|.
name|isDataFlavorSupported
argument_list|(
name|DataFlavor
operator|.
name|stringFlavor
argument_list|)
condition|)
block|{
comment|// We have determined that no TransferableBibtexEntry is available, but
comment|// there is a string, which we will handle according to context:
name|int
index|[]
name|rows
init|=
name|entryTable
operator|.
name|getSelectedRows
argument_list|()
decl_stmt|,
name|cols
init|=
name|entryTable
operator|.
name|getSelectedColumns
argument_list|()
decl_stmt|;
name|Util
operator|.
name|pr
argument_list|(
name|rows
operator|.
name|length
operator|+
literal|" x "
operator|+
name|cols
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|cols
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|cols
operator|.
name|length
operator|==
literal|1
operator|)
operator|&&
operator|(
name|cols
index|[
literal|0
index|]
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|rows
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|rows
operator|.
name|length
operator|==
literal|1
operator|)
condition|)
block|{
comment|// A single cell is highlighted, so paste the string straight into it without parsing
try|try
block|{
name|tableModel
operator|.
name|setValueAt
argument_list|(
call|(
name|String
call|)
argument_list|(
name|content
operator|.
name|getTransferData
argument_list|(
name|DataFlavor
operator|.
name|stringFlavor
argument_list|)
argument_list|)
argument_list|,
name|rows
index|[
literal|0
index|]
argument_list|,
name|cols
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|output
argument_list|(
literal|"Pasted cell contents"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFlavorException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|output
argument_list|(
literal|"Can't paste."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no single cell is selected, so try parsing the clipboard contents as bibtex entries instead
try|try
block|{
name|BibtexParser
name|bp
init|=
operator|new
name|BibtexParser
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|StringReader
argument_list|(
call|(
name|String
call|)
argument_list|(
name|content
operator|.
name|getTransferData
argument_list|(
name|DataFlavor
operator|.
name|stringFlavor
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|db
init|=
name|bp
operator|.
name|parse
argument_list|()
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|Util
operator|.
name|pr
argument_list|(
literal|"Parsed "
operator|+
name|db
operator|.
name|getEntryCount
argument_list|()
operator|+
literal|" entries from clipboard text"
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Set
name|keySet
init|=
name|db
operator|.
name|getKeySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|keySet
operator|!=
literal|null
condition|)
block|{
comment|// Copy references to the entries into a BibtexEntry array.
comment|// Could import directly from db, but going via bes allows re-use
comment|// of the same pasting code as used for TransferableBibtexEntries
name|bes
operator|=
operator|new
name|BibtexEntry
index|[
name|db
operator|.
name|getEntryCount
argument_list|()
index|]
expr_stmt|;
name|Iterator
name|it
init|=
name|keySet
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|bes
index|[
name|i
index|]
operator|=
name|db
operator|.
name|getEntryById
argument_list|(
call|(
name|String
call|)
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*else {                                     String cont = (String)(content.getTransferData(DataFlavor.stringFlavor));                                     Util.pr("----------------\n"+cont+"\n---------------------");                                     TextAnalyzer ta = new TextAnalyzer(cont);                                       output(Globals.lang("Unable to parse clipboard text as Bibtex entries."));                                       }*/
block|}
catch|catch
parameter_list|(
name|UnsupportedFlavorException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// finally we paste in the entries (if any), which either came from TransferableBibtexEntries
comment|// or were parsed from a string
if|if
condition|(
operator|(
name|bes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|bes
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|bes
operator|.
name|length
operator|>
literal|1
condition|?
literal|"paste entries"
else|:
literal|"paste entry"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|BibtexEntry
name|be
init|=
call|(
name|BibtexEntry
call|)
argument_list|(
name|bes
index|[
name|i
index|]
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
comment|// We have to clone the
comment|// entries, since the pasted
comment|// entries must exist
comment|// independently of the copied
comment|// ones.
name|be
operator|.
name|setId
argument_list|(
name|Util
operator|.
name|createNeutralId
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|database
argument_list|,
name|be
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{
name|Util
operator|.
name|pr
argument_list|(
literal|"KeyCollisionException... this shouldn't happen."
argument_list|)
expr_stmt|;
block|}
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|tableModel
operator|.
name|remap
argument_list|()
expr_stmt|;
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|entryTable
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Pasted"
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|bes
operator|.
name|length
operator|>
literal|1
condition|?
name|bes
operator|.
name|length
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
else|:
literal|"1 "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*Util.pr(flavor.length+"");                           Util.pr(flavor[0].toString());                           Util.pr(flavor[1].toString());                           Util.pr(flavor[2].toString());                           Util.pr(flavor[3].toString());                           Util.pr(flavor[4].toString());                        */
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"selectAll"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|entryTable
operator|.
name|selectAll
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for opening the preamble editor
name|actions
operator|.
name|put
argument_list|(
literal|"editPreamble"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
if|if
condition|(
name|preambleEditor
operator|==
literal|null
condition|)
block|{
name|PreambleEditor
name|form
init|=
operator|new
name|PreambleEditor
argument_list|(
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|,
name|database
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|form
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|form
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|preambleEditor
operator|=
name|form
expr_stmt|;
block|}
else|else
block|{
name|preambleEditor
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for opening the string editor
name|actions
operator|.
name|put
argument_list|(
literal|"editStrings"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
if|if
condition|(
name|stringDialog
operator|==
literal|null
condition|)
block|{
name|StringDialog
name|form
init|=
operator|new
name|StringDialog
argument_list|(
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|,
name|database
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|form
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|form
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stringDialog
operator|=
name|form
expr_stmt|;
block|}
else|else
block|{
name|stringDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for toggling the groups interface
name|actions
operator|.
name|put
argument_list|(
literal|"toggleGroups"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|sidePaneManager
operator|.
name|togglePanel
argument_list|(
literal|"groups"
argument_list|)
expr_stmt|;
name|frame
operator|.
name|groupToggle
operator|.
name|setSelected
argument_list|(
name|sidePaneManager
operator|.
name|isPanelVisible
argument_list|(
literal|"groups"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for pushing citations to an open Lyx/Kile instance:
name|actions
operator|.
name|put
argument_list|(
literal|"pushToLyX"
argument_list|,
operator|new
name|PushToLyx
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"pushToWinEdt"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
specifier|final
name|int
index|[]
name|rows
init|=
name|entryTable
operator|.
name|getSelectedRows
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numSelected
init|=
name|rows
operator|.
name|length
decl_stmt|;
comment|// Globals.logger("Pushing " +numSelected+(numSelected>1? " entries" : "entry") + " to WinEdt");
comment|//Util.pr("tre");
if|if
condition|(
name|numSelected
operator|>
literal|0
condition|)
block|{
name|Thread
name|pushThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|winEdt
init|=
name|prefs
operator|.
name|get
argument_list|(
literal|"winEdtPath"
argument_list|)
decl_stmt|;
comment|//winEdt = "osascript";
try|try
block|{
name|StringBuffer
name|toSend
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"\"[InsText('\\cite{"
argument_list|)
decl_stmt|;
comment|//StringBuffer toSend = new StringBuffer
comment|//    ("-e 'tell application \"iTeXMac\" to insert \"\\\\cite{");
comment|//if (tmp)
comment|//  toSend = new StringBuffer
comment|//    ("-e 'tell application \"TeXShop\" to set the selection of the front document to \"\\\\cite{");
name|String
name|citeKey
init|=
literal|""
decl_stmt|,
name|message
init|=
literal|""
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSelected
condition|;
name|i
operator|++
control|)
block|{
name|BibtexEntry
name|bes
init|=
name|database
operator|.
name|getEntryById
argument_list|(
name|tableModel
operator|.
name|getIdForRow
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|citeKey
operator|=
operator|(
name|String
operator|)
name|bes
operator|.
name|getField
argument_list|(
name|GUIGlobals
operator|.
name|KEY_FIELD
argument_list|)
expr_stmt|;
comment|// if the key is empty we give a warning and ignore this entry
if|if
condition|(
name|citeKey
operator|==
literal|null
operator|||
name|citeKey
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|first
condition|)
block|{
name|toSend
operator|.
name|append
argument_list|(
name|citeKey
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
name|toSend
operator|.
name|append
argument_list|(
literal|","
operator|+
name|citeKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|message
operator|+=
literal|", "
expr_stmt|;
name|message
operator|+=
operator|(
literal|1
operator|+
name|rows
index|[
name|i
index|]
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|first
condition|)
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please define BibTeX key first"
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|toSend
operator|.
name|append
argument_list|(
literal|"}');]\""
argument_list|)
expr_stmt|;
comment|//if (!tmp)
comment|//  toSend.append("}\" in the text of the front document'");
comment|//else
comment|//  toSend.append("}\"'");
comment|//tmp = !tmp;
comment|//System.out.println("Running command: "+winEdt + " " + toSend.toString());
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|winEdt
operator|+
literal|" "
operator|+
name|toSend
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Pushed the citations for the following rows to"
argument_list|)
operator|+
literal|"WinEdt: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|excep
parameter_list|)
block|{
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not call executable"
argument_list|)
operator|+
literal|" '"
operator|+
name|winEdt
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|excep
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|pushThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for auto-generating keys.
name|actions
operator|.
name|put
argument_list|(
literal|"makeKey"
argument_list|,
operator|new
name|AbstractWorker
argument_list|()
block|{
comment|//int[] rows;
name|List
name|entries
decl_stmt|;
name|int
name|numSelected
decl_stmt|;
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
comment|// Run first, in EDT:
specifier|public
name|void
name|init
parameter_list|()
block|{
name|entries
operator|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getSelectedEntries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//rows = entryTable.getSelectedRows() ;
comment|//numSelected = rows.length ;
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// None selected. Inform the user to select entries first.
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"First select the entries you want keys to be generated for."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Autogenerate BibTeX key"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
return|return ;
block|}
name|frame
operator|.
name|block
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Generating BibTeX key for"
argument_list|)
operator|+
literal|" "
operator|+
name|numSelected
operator|+
literal|" "
operator|+
operator|(
name|numSelected
operator|>
literal|1
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
block|}
comment|// Run second, on a different thread:
specifier|public
name|void
name|run
parameter_list|()
block|{
name|BibtexEntry
name|bes
init|=
literal|null
decl_stmt|;
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"autogenerate keys"
argument_list|)
argument_list|)
decl_stmt|;
comment|//BibtexEntry be;
name|Object
name|oldValue
decl_stmt|;
name|boolean
name|hasShownWarning
init|=
literal|false
decl_stmt|;
comment|// First check if any entries have keys set already. If so, possibly remove
comment|// them from consideration, or warn about overwriting keys.
name|loop
label|:
for|for
control|(
name|Iterator
name|i
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|bes
operator|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|bes
operator|.
name|getField
argument_list|(
name|GUIGlobals
operator|.
name|KEY_FIELD
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"avoidOverwritingKey"
argument_list|)
condition|)
comment|// Rmove the entry, because its key is already set:
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"warnBeforeOverwritingKey"
argument_list|)
condition|)
block|{
comment|// Ask if the user wants to cancel the operation:
name|CheckBoxMessage
name|cbm
init|=
operator|new
name|CheckBoxMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"One or more keys will be overwritten. Continue?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Disable this confirmation dialog"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|cbm
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Overwrite keys"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|cbm
operator|.
name|isSelected
argument_list|()
condition|)
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"warnBeforeOverwritingKey"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
block|{
comment|// Ok, break off the operation.
name|cancelled
operator|=
literal|true
expr_stmt|;
return|return;
block|}
comment|// No need to check more entries, because the user has already confirmed
comment|// that it's ok to overwrite keys:
break|break
name|loop
break|;
block|}
block|}
block|}
name|HashMap
name|oldvals
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Iterate again, removing already set keys. This is skipped if overwriting
comment|// is disabled, since all entries with keys set will have been removed.
if|if
condition|(
operator|!
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"avoidOverwritingKey"
argument_list|)
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|bes
operator|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// Store the old value:
name|oldvals
operator|.
name|put
argument_list|(
name|bes
argument_list|,
name|bes
operator|.
name|getField
argument_list|(
name|GUIGlobals
operator|.
name|KEY_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|database
operator|.
name|setCiteKeyForEntry
argument_list|(
name|bes
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Finally, set the new keys:
for|for
control|(
name|Iterator
name|i
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|bes
operator|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|bes
operator|=
name|LabelPatternUtil
operator|.
name|makeLabel
argument_list|(
name|prefs
operator|.
name|getKeyPattern
argument_list|()
argument_list|,
name|database
argument_list|,
name|bes
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableKeyChange
argument_list|(
name|database
argument_list|,
name|bes
operator|.
name|getId
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|oldvals
operator|.
name|get
argument_list|(
name|bes
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|bes
operator|.
name|getField
argument_list|(
name|GUIGlobals
operator|.
name|KEY_FIELD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
comment|// Run third, on EDT:
specifier|public
name|void
name|update
parameter_list|()
block|{
if|if
condition|(
name|cancelled
condition|)
block|{
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
return|return;
block|}
name|markBaseChanged
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|numSelected
operator|=
name|entries
operator|.
name|size
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Generated BibTeX key for"
argument_list|)
operator|+
literal|" "
operator|+
name|numSelected
operator|+
literal|" "
operator|+
operator|(
name|numSelected
operator|!=
literal|1
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"search"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
comment|//sidePaneManager.togglePanel("search");
name|sidePaneManager
operator|.
name|ensureVisible
argument_list|(
literal|"search"
argument_list|)
expr_stmt|;
comment|//boolean on = sidePaneManager.isPanelVisible("search");
name|frame
operator|.
name|searchToggle
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|true
condition|)
name|frame
operator|.
name|searchManager
operator|.
name|startSearch
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"toggleSearch"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
comment|//sidePaneManager.togglePanel("search");
name|sidePaneManager
operator|.
name|togglePanel
argument_list|(
literal|"search"
argument_list|)
expr_stmt|;
name|boolean
name|on
init|=
name|sidePaneManager
operator|.
name|isPanelVisible
argument_list|(
literal|"search"
argument_list|)
decl_stmt|;
name|frame
operator|.
name|searchToggle
operator|.
name|setSelected
argument_list|(
name|on
argument_list|)
expr_stmt|;
if|if
condition|(
name|on
condition|)
name|frame
operator|.
name|searchManager
operator|.
name|startSearch
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"incSearch"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|sidePaneManager
operator|.
name|ensureVisible
argument_list|(
literal|"search"
argument_list|)
expr_stmt|;
name|frame
operator|.
name|searchToggle
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|frame
operator|.
name|searchManager
operator|.
name|startIncrementalSearch
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for copying the selected entry's key.
name|actions
operator|.
name|put
argument_list|(
literal|"copyKey"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|bes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|bes
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|storeCurrentEdit
argument_list|()
expr_stmt|;
comment|//String[] keys = new String[bes.length];
name|Vector
name|keys
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
comment|// Collect all non-null keys.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|bes
index|[
name|i
index|]
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|KEY_FIELD
argument_list|)
operator|!=
literal|null
condition|)
name|keys
operator|.
name|add
argument_list|(
name|bes
index|[
name|i
index|]
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|KEY_FIELD
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|output
argument_list|(
literal|"None of the selected entries have BibTeX keys."
argument_list|)
expr_stmt|;
return|return;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
operator|(
name|String
operator|)
name|keys
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|keys
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringSelection
name|ss
init|=
operator|new
name|StringSelection
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|ss
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|==
name|bes
operator|.
name|length
condition|)
comment|// All entries had keys.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
operator|(
name|bes
operator|.
name|length
operator|>
literal|1
operator|)
condition|?
literal|"Copied keys"
else|:
literal|"Copied key"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
else|else
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
operator|(
name|bes
operator|.
name|length
operator|-
name|keys
operator|.
name|size
argument_list|()
operator|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"out of"
argument_list|)
operator|+
literal|" "
operator|+
name|bes
operator|.
name|length
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries have undefined BibTeX key"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action for copying a cite for the selected entry.
name|actions
operator|.
name|put
argument_list|(
literal|"copyCiteKey"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|bes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|bes
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|storeCurrentEdit
argument_list|()
expr_stmt|;
comment|//String[] keys = new String[bes.length];
name|Vector
name|keys
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
comment|// Collect all non-null keys.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|bes
index|[
name|i
index|]
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|KEY_FIELD
argument_list|)
operator|!=
literal|null
condition|)
name|keys
operator|.
name|add
argument_list|(
name|bes
index|[
name|i
index|]
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|KEY_FIELD
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|output
argument_list|(
literal|"None of the selected entries have BibTeX keys."
argument_list|)
expr_stmt|;
return|return;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
operator|(
name|String
operator|)
name|keys
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|keys
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringSelection
name|ss
init|=
operator|new
name|StringSelection
argument_list|(
literal|"\\cite{"
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|ss
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|==
name|bes
operator|.
name|length
condition|)
comment|// All entries had keys.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
operator|(
name|bes
operator|.
name|length
operator|>
literal|1
operator|)
condition|?
literal|"Copied keys"
else|:
literal|"Copied key"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
else|else
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
operator|(
name|bes
operator|.
name|length
operator|-
name|keys
operator|.
name|size
argument_list|()
operator|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"out of"
argument_list|)
operator|+
literal|" "
operator|+
name|bes
operator|.
name|length
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries have undefined BibTeX key"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"mergeDatabase"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
specifier|final
name|MergeDialog
name|md
init|=
operator|new
name|MergeDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Append database"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|md
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
name|md
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|.
name|okPressed
condition|)
block|{
name|String
name|chosenFile
init|=
name|Globals
operator|.
name|getNewFile
argument_list|(
name|frame
argument_list|,
name|prefs
argument_list|,
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"workingDirectory"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|JFileChooser
operator|.
name|OPEN_DIALOG
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|/*JFileChooser chooser = (prefs.get("workingDirectory") == null) ?                       new JabRefFileChooser((File)null) :                       new JabRefFileChooser(new File(prefs.get("workingDirectory")));                   chooser.addChoosableFileFilter( new OpenFileFilter() );//nb nov2                   int returnVal = chooser.showOpenDialog(BasePanel.this);*/
if|if
condition|(
name|chosenFile
operator|==
literal|null
condition|)
return|return;
name|fileToOpen
operator|=
operator|new
name|File
argument_list|(
name|chosenFile
argument_list|)
expr_stmt|;
comment|// Run the actual open in a thread to prevent the program
comment|// locking until the file is loaded.
if|if
condition|(
name|fileToOpen
operator|!=
literal|null
condition|)
block|{
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|openIt
argument_list|(
name|md
operator|.
name|importEntries
argument_list|()
argument_list|,
name|md
operator|.
name|importStrings
argument_list|()
argument_list|,
name|md
operator|.
name|importGroups
argument_list|()
argument_list|,
name|md
operator|.
name|importSelectorWords
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|frame
operator|.
name|getFileHistory
argument_list|()
operator|.
name|newFile
argument_list|(
name|fileToOpen
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|openIt
parameter_list|(
name|boolean
name|importEntries
parameter_list|,
name|boolean
name|importStrings
parameter_list|,
name|boolean
name|importGroups
parameter_list|,
name|boolean
name|importSelectorWords
parameter_list|)
block|{
if|if
condition|(
operator|(
name|fileToOpen
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|fileToOpen
operator|.
name|exists
argument_list|()
operator|)
condition|)
block|{
try|try
block|{
name|prefs
operator|.
name|put
argument_list|(
literal|"workingDirectory"
argument_list|,
name|fileToOpen
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should this be done _after_ we know it was successfully opened?
name|String
name|encoding
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
name|ImportFormatReader
operator|.
name|loadDatabase
argument_list|(
name|fileToOpen
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|mergeFromBibtex
argument_list|(
name|pr
argument_list|,
name|importEntries
argument_list|,
name|importStrings
argument_list|,
name|importGroups
argument_list|,
name|importSelectorWords
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Imported from database"
argument_list|)
operator|+
literal|" '"
operator|+
name|fileToOpen
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|fileToOpen
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Open database"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"openFile"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|String
name|field
init|=
literal|"ps"
decl_stmt|;
if|if
condition|(
operator|(
name|bes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|bes
operator|.
name|length
operator|==
literal|1
operator|)
condition|)
block|{
name|Object
name|link
init|=
name|bes
index|[
literal|0
index|]
operator|.
name|getField
argument_list|(
literal|"ps"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bes
index|[
literal|0
index|]
operator|.
name|getField
argument_list|(
literal|"pdf"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|link
operator|=
name|bes
index|[
literal|0
index|]
operator|.
name|getField
argument_list|(
literal|"pdf"
argument_list|)
expr_stmt|;
name|field
operator|=
literal|"pdf"
expr_stmt|;
block|}
name|String
name|filepath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|link
operator|!=
literal|null
condition|)
block|{
name|filepath
operator|=
name|link
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// see if we can fall back to a filename based on the bibtex key
name|String
name|basefile
decl_stmt|;
name|Object
name|key
init|=
name|bes
index|[
literal|0
index|]
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|KEY_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|basefile
operator|=
name|key
operator|.
name|toString
argument_list|()
expr_stmt|;
name|String
name|dir
init|=
name|prefs
operator|.
name|get
argument_list|(
literal|"pdfDirectory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|endsWith
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
condition|)
block|{
name|basefile
operator|=
name|dir
operator|+
name|basefile
expr_stmt|;
block|}
else|else
block|{
name|basefile
operator|=
name|dir
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|basefile
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|typesToTry
init|=
operator|new
name|String
index|[]
block|{
literal|"html"
block|,
literal|"ps"
block|,
literal|"pdf"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typesToTry
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|basefile
operator|+
literal|"."
operator|+
name|typesToTry
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|field
operator|=
name|typesToTry
index|[
name|i
index|]
expr_stmt|;
name|filepath
operator|=
name|f
operator|.
name|getPath
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|filepath
operator|!=
literal|null
condition|)
block|{
comment|//output(Globals.lang("Calling external viewer..."));
try|try
block|{
name|Util
operator|.
name|openExternalViewer
argument_list|(
name|filepath
argument_list|,
name|field
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"External viewer called"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No pdf or ps defined, and no file matching Bibtex key found"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No entries or multiple entries selected."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"openUrl"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|String
name|field
init|=
literal|"doi"
decl_stmt|;
if|if
condition|(
operator|(
name|bes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|bes
operator|.
name|length
operator|==
literal|1
operator|)
condition|)
block|{
name|Object
name|link
init|=
name|bes
index|[
literal|0
index|]
operator|.
name|getField
argument_list|(
literal|"doi"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bes
index|[
literal|0
index|]
operator|.
name|getField
argument_list|(
literal|"url"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|link
operator|=
name|bes
index|[
literal|0
index|]
operator|.
name|getField
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|field
operator|=
literal|"url"
expr_stmt|;
block|}
if|if
condition|(
name|link
operator|!=
literal|null
condition|)
block|{
comment|//output(Globals.lang("Calling external viewer..."));
try|try
block|{
name|Util
operator|.
name|openExternalViewer
argument_list|(
name|link
operator|.
name|toString
argument_list|()
argument_list|,
name|field
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"External viewer called"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error: check your External viewer settings in Preferences"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No url defined"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No entries or multiple entries selected."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"replaceAll"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|ReplaceStringDialog
name|rsd
init|=
operator|new
name|ReplaceStringDialog
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|rsd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rsd
operator|.
name|okPressed
argument_list|()
condition|)
return|return;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Replace string"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rsd
operator|.
name|selOnly
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|database
operator|.
name|getKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|counter
operator|+=
name|rsd
operator|.
name|replace
argument_list|(
name|database
operator|.
name|getEntryById
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|counter
operator|+=
name|rsd
operator|.
name|replace
argument_list|(
name|bes
index|[
name|i
index|]
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Replaced"
argument_list|)
operator|+
literal|" "
operator|+
name|counter
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
name|counter
operator|==
literal|1
condition|?
literal|"occurence"
else|:
literal|"occurences"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|>
literal|0
condition|)
block|{
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"dupliCheck"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|DuplicateSearch
name|ds
init|=
operator|new
name|DuplicateSearch
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|)
decl_stmt|;
name|ds
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"strictDupliCheck"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|StrictDuplicateSearch
name|ds
init|=
operator|new
name|StrictDuplicateSearch
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|)
decl_stmt|;
name|ds
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"plainTextImport"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
comment|// get Type of new entry
name|EntryTypeDialog
name|etd
init|=
operator|new
name|EntryTypeDialog
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|etd
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
name|etd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibtexEntryType
name|tp
init|=
name|etd
operator|.
name|getChoice
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
return|return;
name|String
name|id
init|=
name|Util
operator|.
name|createNeutralId
argument_list|()
decl_stmt|;
name|BibtexEntry
name|bibEntry
init|=
operator|new
name|BibtexEntry
argument_list|(
name|id
argument_list|,
name|tp
argument_list|)
decl_stmt|;
name|TextInputDialog
name|tidialog
init|=
operator|new
name|TextInputDialog
argument_list|(
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|,
literal|"import"
argument_list|,
literal|true
argument_list|,
name|bibEntry
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|tidialog
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
name|tidialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|tidialog
operator|.
name|okPressed
argument_list|()
condition|)
block|{
name|insertEntry
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The action starts the "import from plain text" dialog
name|actions
operator|.
name|put
argument_list|(
literal|"importPlainText"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|BibtexEntry
name|bibEntry
init|=
literal|null
decl_stmt|;
comment|// try to get the first marked entry
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|bes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|bes
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
name|bibEntry
operator|=
name|bes
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|bibEntry
operator|!=
literal|null
condition|)
block|{
comment|// Create an UndoableInsertEntry object.
name|undoManager
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|database
argument_list|,
name|bibEntry
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|TextInputDialog
name|tidialog
init|=
operator|new
name|TextInputDialog
argument_list|(
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|,
literal|"import"
argument_list|,
literal|true
argument_list|,
name|bibEntry
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|tidialog
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
name|tidialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|tidialog
operator|.
name|okPressed
argument_list|()
condition|)
block|{
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"changed "
argument_list|)
operator|+
literal|" '"
operator|+
name|bibEntry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|int
name|row
init|=
name|tableModel
operator|.
name|getNumberFromName
argument_list|(
name|bibEntry
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|entryTable
operator|.
name|scrollTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
comment|// The database just changed.
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoOpenForm"
argument_list|)
condition|)
block|{
name|showEntry
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"markEntries"
argument_list|,
operator|new
name|AbstractWorker
argument_list|()
block|{
specifier|private
name|int
name|besLength
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Mark entries"
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|besLength
operator|=
name|bes
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|bes
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|bes
index|[
name|i
index|]
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|MARKED
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|o
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|o
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
operator|)
condition|)
continue|continue;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|bes
index|[
name|i
index|]
argument_list|,
name|Globals
operator|.
name|MARKED
argument_list|,
name|bes
index|[
name|i
index|]
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|MARKED
argument_list|)
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|bes
index|[
name|i
index|]
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|MARKED
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
name|markBaseChanged
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Marked selected"
argument_list|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
name|besLength
operator|>
literal|0
condition|?
literal|"entry"
else|:
literal|"entries"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"unmarkEntries"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
try|try
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unmark entries"
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|bes
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|bes
index|[
name|i
index|]
argument_list|,
name|Globals
operator|.
name|MARKED
argument_list|,
name|bes
index|[
name|i
index|]
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|MARKED
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|bes
index|[
name|i
index|]
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|MARKED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unmarked selected"
argument_list|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
name|bes
operator|.
name|length
operator|>
literal|0
condition|?
literal|"entry"
else|:
literal|"entries"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"unmarkAll"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unmark all"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
name|keySet
init|=
name|database
operator|.
name|getKeySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|keySet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|be
init|=
name|database
operator|.
name|getEntryById
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|be
argument_list|,
name|Globals
operator|.
name|MARKED
argument_list|,
name|be
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|MARKED
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|be
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|MARKED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"togglePreview"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|boolean
name|enabled
init|=
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"previewEnabled"
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"previewEnabled"
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|enabled
condition|)
name|hidePreview
argument_list|()
expr_stmt|;
else|else
block|{
name|updateViewToSelected
argument_list|()
expr_stmt|;
block|}
name|frame
operator|.
name|previewToggle
operator|.
name|setSelected
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"toggleHighlightGroupsMatchingAny"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|boolean
name|enabled
init|=
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"highlightGroupsMatchingAny"
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"highlightGroupsMatchingAny"
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
name|frame
operator|.
name|highlightAny
operator|.
name|setSelected
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|frame
operator|.
name|highlightAll
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"highlightGroupsMatchingAll"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|entryTable
operator|.
name|groupsHighlightListener
operator|.
name|valueChanged
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"toggleHighlightGroupsMatchingAll"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|boolean
name|enabled
init|=
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"highlightGroupsMatchingAll"
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"highlightGroupsMatchingAll"
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
name|frame
operator|.
name|highlightAll
operator|.
name|setSelected
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|frame
operator|.
name|highlightAny
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"highlightGroupsMatchingAny"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|entryTable
operator|.
name|groupsHighlightListener
operator|.
name|valueChanged
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"switchPreview"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
if|if
condition|(
name|activePreview
operator|<
name|previewPanel
operator|.
name|length
operator|-
literal|1
condition|)
name|activePreview
operator|++
expr_stmt|;
else|else
name|activePreview
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"previewEnabled"
argument_list|)
condition|)
name|hidePreview
argument_list|()
expr_stmt|;
else|else
block|{
comment|//BibtexEntry[] bes = entryTable.getSelectedEntries();
comment|//if ((bes != null)&& (bes.length> 0))
name|updateViewToSelected
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"manageSelectors"
argument_list|,
operator|new
name|BaseAction
argument_list|()
block|{
specifier|public
name|void
name|action
parameter_list|()
block|{
name|ContentSelectorDialog2
name|csd
init|=
operator|new
name|ContentSelectorDialog2
argument_list|(
name|frame
argument_list|,
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|,
literal|false
argument_list|,
name|metaData
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|csd
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|csd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"exportToClipboard"
argument_list|,
operator|new
name|AbstractWorker
argument_list|()
block|{
name|String
name|message
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|entryTable
operator|.
name|getSelectedRowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|message
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"No entries selected"
argument_list|)
operator|+
literal|"."
expr_stmt|;
name|getCallBack
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Make a list of possible formats:
name|Map
name|formats
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|formats
operator|.
name|put
argument_list|(
literal|"BibTeXML"
argument_list|,
literal|"bibtexml"
argument_list|)
expr_stmt|;
name|formats
operator|.
name|put
argument_list|(
literal|"DocBook"
argument_list|,
literal|"docbook"
argument_list|)
expr_stmt|;
name|formats
operator|.
name|put
argument_list|(
literal|"HTML"
argument_list|,
literal|"html"
argument_list|)
expr_stmt|;
name|formats
operator|.
name|put
argument_list|(
literal|"RTF (Harvard)"
argument_list|,
literal|"harvard/harvard"
argument_list|)
expr_stmt|;
name|formats
operator|.
name|put
argument_list|(
literal|"Simple HTML"
argument_list|,
literal|"simplehtml"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefs
operator|.
name|customExports
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
operator|(
name|prefs
operator|.
name|customExports
operator|.
name|getElementAt
argument_list|(
name|i
argument_list|)
operator|)
index|[
literal|0
index|]
decl_stmt|;
name|formats
operator|.
name|put
argument_list|(
name|o
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|array
init|=
name|formats
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|JList
name|list
init|=
operator|new
name|JList
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|list
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|setSelectionInterval
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|setSelectionMode
argument_list|(
name|ListSelectionModel
operator|.
name|SINGLE_SELECTION
argument_list|)
expr_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showOptionDialog
argument_list|(
name|frame
argument_list|,
name|list
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Select format"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|Globals
operator|.
name|lang
argument_list|(
literal|"Ok"
argument_list|)
block|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
block|}
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Ok"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
return|return;
name|String
name|lfName
init|=
call|(
name|String
call|)
argument_list|(
name|formats
operator|.
name|get
argument_list|(
name|list
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|custom
init|=
operator|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
operator|>=
name|Globals
operator|.
name|STANDARD_EXPORT_COUNT
operator|)
decl_stmt|;
name|String
name|dir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|custom
condition|)
block|{
name|int
name|index
init|=
name|list
operator|.
name|getSelectedIndex
argument_list|()
operator|-
name|Globals
operator|.
name|STANDARD_EXPORT_COUNT
decl_stmt|;
name|dir
operator|=
call|(
name|String
call|)
argument_list|(
name|prefs
operator|.
name|customExports
operator|.
name|getElementAt
argument_list|(
name|index
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|lfName
operator|=
name|f
operator|.
name|getName
argument_list|()
expr_stmt|;
name|lfName
operator|=
name|lfName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lfName
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove file name - we want the directory only.
name|dir
operator|=
name|f
operator|.
name|getParent
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|format
init|=
name|lfName
decl_stmt|,
name|directory
init|=
name|dir
decl_stmt|;
try|try
block|{
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|FileActions
operator|.
name|exportEntries
argument_list|(
name|database
argument_list|,
name|bes
argument_list|,
name|format
argument_list|,
name|custom
argument_list|,
name|directory
argument_list|,
name|sw
argument_list|)
expr_stmt|;
name|ClipboardOwner
name|owner
init|=
operator|new
name|ClipboardOwner
argument_list|()
block|{
specifier|public
name|void
name|lostOwnership
parameter_list|(
name|Clipboard
name|clipboard
parameter_list|,
name|Transferable
name|content
parameter_list|)
block|{}
block|}
decl_stmt|;
comment|//StringSelection ss = new StringSelection(sw.toString());
name|RtfSelection
name|rs
init|=
operator|new
name|RtfSelection
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|rs
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|message
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Entries exported to clipboard"
argument_list|)
operator|+
literal|": "
operator|+
name|bes
operator|.
name|length
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
name|output
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
operator|new
name|AbstractWorker
argument_list|()
block|{
specifier|public
name|void
name|init
parameter_list|()
block|{
name|output
argument_list|(
literal|"Downloading."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|//net.sf.jabref.journals.JournalList.downloadJournalList(frame);
block|}
block|}
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"autoSetPdf"
argument_list|,
operator|new
name|AutoSetExternalFileForEntries
argument_list|(
name|this
argument_list|,
literal|"pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
literal|"autoSetPs"
argument_list|,
operator|new
name|AutoSetExternalFileForEntries
argument_list|(
name|this
argument_list|,
literal|"ps"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is called from JabRefFrame is a database specific      * action is requested by the user. Runs the command if it is      * defined, or prints an error message to the standard error      * stream.      *      * @param _command The name of the command to run.     */
DECL|method|runCommand (String _command)
specifier|public
name|void
name|runCommand
parameter_list|(
name|String
name|_command
parameter_list|)
block|{
specifier|final
name|String
name|command
init|=
name|_command
decl_stmt|;
comment|//(new Thread() {
comment|//  public void run() {
if|if
condition|(
name|actions
operator|.
name|get
argument_list|(
name|command
argument_list|)
operator|==
literal|null
condition|)
name|Util
operator|.
name|pr
argument_list|(
literal|"No action defined for'"
operator|+
name|command
operator|+
literal|"'"
argument_list|)
expr_stmt|;
else|else
block|{
name|Object
name|o
init|=
name|actions
operator|.
name|get
argument_list|(
name|command
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|o
operator|instanceof
name|BaseAction
condition|)
operator|(
operator|(
name|BaseAction
operator|)
name|o
operator|)
operator|.
name|action
argument_list|()
expr_stmt|;
else|else
block|{
comment|// This part uses Spin's features:
name|Worker
name|wrk
init|=
operator|(
operator|(
name|AbstractWorker
operator|)
name|o
operator|)
operator|.
name|getWorker
argument_list|()
decl_stmt|;
comment|// The Worker returned by getWorker() has been wrapped
comment|// by Spin.off(), which makes its methods be run in
comment|// a different thread from the EDT.
name|CallBack
name|clb
init|=
operator|(
operator|(
name|AbstractWorker
operator|)
name|o
operator|)
operator|.
name|getCallBack
argument_list|()
decl_stmt|;
operator|(
operator|(
name|AbstractWorker
operator|)
name|o
operator|)
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// This method runs in this same thread, the EDT.
comment|// Useful for initial GUI actions, like printing a message.
comment|// The CallBack returned by getCallBack() has been wrapped
comment|// by Spin.over(), which makes its methods be run on
comment|// the EDT.
name|wrk
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Runs the potentially time-consuming action
comment|// without freezing the GUI. The magic is that THIS line
comment|// of execution will not continue until run() is finished.
name|clb
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Runs the update() method on the EDT.
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// If the action has blocked the JabRefFrame before crashing, we need to unblock it.
comment|// The call to unblock will simply hide the glasspane, so there is no harm in calling
comment|// it even if the frame hasn't been blocked.
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|//  }
comment|//}).start();
block|}
DECL|method|saveDatabase (File file, boolean selectedOnly)
specifier|private
name|void
name|saveDatabase
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|selectedOnly
parameter_list|)
throws|throws
name|SaveException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|selectedOnly
condition|)
name|FileActions
operator|.
name|saveDatabase
argument_list|(
name|database
argument_list|,
name|metaData
argument_list|,
name|file
argument_list|,
name|prefs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|FileActions
operator|.
name|savePartOfDatabase
argument_list|(
name|database
argument_list|,
name|metaData
argument_list|,
name|file
argument_list|,
name|prefs
argument_list|,
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
argument_list|,
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|specificEntry
argument_list|()
condition|)
block|{
comment|// Error occured during processing of
comment|// be. Highlight it:
name|int
name|row
init|=
name|tableModel
operator|.
name|getNumberFromName
argument_list|(
name|ex
operator|.
name|getEntry
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|,
name|topShow
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|row
operator|-
literal|3
argument_list|)
decl_stmt|;
comment|//Util.pr(""+row);
name|entryTable
operator|.
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|setColumnSelectionInterval
argument_list|(
literal|0
argument_list|,
name|entryTable
operator|.
name|getColumnCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|scrollTo
argument_list|(
name|topShow
argument_list|)
expr_stmt|;
name|showEntry
argument_list|(
name|ex
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not save file"
argument_list|)
operator|+
literal|".\n"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Save database"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SaveException
argument_list|(
literal|"rt"
argument_list|)
throw|;
block|}
block|}
comment|/**      * This method is called from JabRefFrame when the user wants to      * create a new entry. If the argument is null, the user is      * prompted for an entry type.      *      * @param type The type of the entry to create.      */
DECL|method|newEntry (BibtexEntryType type)
specifier|public
name|void
name|newEntry
parameter_list|(
name|BibtexEntryType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
comment|// Find out what type is wanted.
name|EntryTypeDialog
name|etd
init|=
operator|new
name|EntryTypeDialog
argument_list|(
name|frame
argument_list|)
decl_stmt|;
comment|// We want to center the dialog, to make it look nicer.
name|Util
operator|.
name|placeDialog
argument_list|(
name|etd
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|etd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|=
name|etd
operator|.
name|getChoice
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
comment|// Only if the dialog was not cancelled.
name|String
name|id
init|=
name|Util
operator|.
name|createNeutralId
argument_list|()
decl_stmt|;
name|BibtexEntry
name|be
init|=
operator|new
name|BibtexEntry
argument_list|(
name|id
argument_list|,
name|type
argument_list|)
decl_stmt|;
try|try
block|{
name|database
operator|.
name|insertEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
comment|// Set owner/timestamp if options are enabled:
name|ArrayList
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|be
argument_list|)
expr_stmt|;
name|Util
operator|.
name|setAutomaticFields
argument_list|(
name|list
argument_list|)
expr_stmt|;
comment|// Create an UndoableInsertEntry object.
name|undoManager
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|database
argument_list|,
name|be
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Added new"
argument_list|)
operator|+
literal|" '"
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
specifier|final
name|int
name|row
init|=
name|tableModel
operator|.
name|getNumberFromName
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|//Util.pr(""+row);
comment|//entryTable.clearSelection();
name|highlightEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
comment|// The database just changed.
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoOpenForm"
argument_list|)
condition|)
block|{
name|showEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
comment|/*                     SwingUtilities.invokeLater(new Thread() {                         public void run() {                             entryTable.revalidate();                             entryTable.setRowSelectionInterval(row, row);                             entryTable.scrollTo(row);                                 }                     });*/
comment|//EntryTypeForm etf = new EntryTypeForm(frame, BasePanel.this, be, prefs);
comment|//Util.placeDialog(etf, frame);
comment|//etf.setVisible(true);
comment|//entryTypeForms.put(id, etf);
block|}
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{
name|Util
operator|.
name|pr
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|mergeFromBibtex (ParserResult pr, boolean importEntries, boolean importStrings, boolean importGroups, boolean importSelectorWords)
specifier|public
name|void
name|mergeFromBibtex
parameter_list|(
name|ParserResult
name|pr
parameter_list|,
name|boolean
name|importEntries
parameter_list|,
name|boolean
name|importStrings
parameter_list|,
name|boolean
name|importGroups
parameter_list|,
name|boolean
name|importSelectorWords
parameter_list|)
throws|throws
name|KeyCollisionException
block|{
name|BibtexDatabase
name|fromDatabase
init|=
name|pr
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|ArrayList
name|appendedEntries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ArrayList
name|originalEntries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|BibtexEntry
name|originalEntry
decl_stmt|;
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Append database"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
name|meta
init|=
operator|new
name|MetaData
argument_list|(
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|importEntries
condition|)
block|{
comment|// Add entries
name|Iterator
name|i
init|=
name|fromDatabase
operator|.
name|getKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|originalEntry
operator|=
name|fromDatabase
operator|.
name|getEntryById
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|be
init|=
call|(
name|BibtexEntry
call|)
argument_list|(
name|originalEntry
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
name|be
operator|.
name|setId
argument_list|(
name|Util
operator|.
name|createNeutralId
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
name|appendedEntries
operator|.
name|add
argument_list|(
name|be
argument_list|)
expr_stmt|;
name|originalEntries
operator|.
name|add
argument_list|(
name|originalEntry
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|database
argument_list|,
name|be
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|importStrings
condition|)
block|{
name|BibtexString
name|bs
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|Iterator
name|i
init|=
name|fromDatabase
operator|.
name|getStringKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|bs
operator|=
call|(
name|BibtexString
call|)
argument_list|(
name|fromDatabase
operator|.
name|getString
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|database
operator|.
name|hasStringLabel
argument_list|(
name|bs
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|//pos = toDatabase.getStringCount();
name|database
operator|.
name|addString
argument_list|(
name|bs
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertString
argument_list|(
name|this
argument_list|,
name|database
argument_list|,
name|bs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|importGroups
condition|)
block|{
name|GroupTreeNode
name|newGroups
init|=
name|metaData
argument_list|()
operator|.
name|getGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|newGroups
operator|!=
literal|null
condition|)
block|{
comment|// ensure that there is always only one AllEntriesGroup
if|if
condition|(
name|newGroups
operator|.
name|getGroup
argument_list|()
operator|instanceof
name|AllEntriesGroup
condition|)
block|{
comment|// create a dummy group
name|ExplicitGroup
name|group
init|=
operator|new
name|ExplicitGroup
argument_list|(
literal|"Imported"
argument_list|,
name|AbstractGroup
operator|.
name|INDEPENDENT
argument_list|)
decl_stmt|;
comment|// JZTODO lyrics
name|newGroups
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|appendedEntries
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|group
operator|.
name|addEntry
argument_list|(
operator|(
name|BibtexEntry
operator|)
name|appendedEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// groupsSelector is always created, even when no groups
comment|// have been defined. therefore, no check for null is
comment|// required here
name|frame
operator|.
name|groupSelector
operator|.
name|addGroups
argument_list|(
name|newGroups
argument_list|,
name|ce
argument_list|)
expr_stmt|;
comment|// for explicit groups, the entries copied to the mother fromDatabase have to
comment|// be "reassigned", i.e. the old reference is removed and the reference
comment|// to the new fromDatabase is added.
name|GroupTreeNode
name|node
decl_stmt|;
name|ExplicitGroup
name|group
decl_stmt|;
name|BibtexEntry
name|entry
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|newGroups
operator|.
name|preorderEnumeration
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|node
operator|=
operator|(
name|GroupTreeNode
operator|)
name|e
operator|.
name|nextElement
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|node
operator|.
name|getGroup
argument_list|()
operator|instanceof
name|ExplicitGroup
operator|)
condition|)
continue|continue;
name|group
operator|=
operator|(
name|ExplicitGroup
operator|)
name|node
operator|.
name|getGroup
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalEntries
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|entry
operator|=
operator|(
name|BibtexEntry
operator|)
name|originalEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|group
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|group
operator|.
name|addEntry
argument_list|(
operator|(
name|BibtexEntry
operator|)
name|appendedEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|frame
operator|.
name|groupSelector
operator|.
name|revalidateGroups
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|importSelectorWords
condition|)
block|{
name|Iterator
name|i
init|=
name|meta
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|Globals
operator|.
name|SELECTOR_META_PREFIX
argument_list|)
condition|)
block|{
name|metaData
argument_list|()
operator|.
name|putData
argument_list|(
name|s
argument_list|,
name|meta
operator|.
name|getData
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method is called from JabRefFrame when the user wants to      * create a new entry.      * @param bibEntry The new entry.      */
DECL|method|insertEntry (BibtexEntry bibEntry)
specifier|public
name|void
name|insertEntry
parameter_list|(
name|BibtexEntry
name|bibEntry
parameter_list|)
block|{
if|if
condition|(
name|bibEntry
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|database
operator|.
name|insertEntry
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useOwner"
argument_list|)
condition|)
comment|// Set owner field to default value
name|bibEntry
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|OWNER
argument_list|,
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultOwner"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create an UndoableInsertEntry object.
name|undoManager
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|database
argument_list|,
name|bibEntry
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Added new"
argument_list|)
operator|+
literal|" '"
operator|+
name|bibEntry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|int
name|row
init|=
name|tableModel
operator|.
name|getNumberFromName
argument_list|(
name|bibEntry
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|entryTable
operator|.
name|scrollTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
comment|// The database just changed.
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoOpenForm"
argument_list|)
condition|)
block|{
name|showEntry
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{
name|Util
operator|.
name|pr
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setupTable ()
specifier|public
name|void
name|setupTable
parameter_list|()
block|{
name|tableModel
operator|=
operator|new
name|EntryTableModel
argument_list|(
name|frame
argument_list|,
name|this
argument_list|,
name|database
argument_list|)
expr_stmt|;
name|entryTable
operator|=
operator|new
name|EntryTable
argument_list|(
name|tableModel
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|,
name|frame
operator|.
name|prefs
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"cut"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|runCommand
argument_list|(
literal|"cut"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"copy"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|runCommand
argument_list|(
literal|"copy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"paste"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|runCommand
argument_list|(
literal|"paste"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|/*         entryTable.getInputMap().put(prefs.getKey("Edit entry"), "Edit");         entryTable.getActionMap().put("Edit", new AbstractAction() {                 public void actionPerformed(ActionEvent e) {                     Util.pr("eueo");                     try { runCommand("edit");                     } catch (Throwable ex) {                         ex.printStackTrace();                     }                 }             });         */
name|entryTable
operator|.
name|addKeyListener
argument_list|(
operator|new
name|KeyAdapter
argument_list|()
block|{
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
specifier|final
name|int
name|keyCode
init|=
name|e
operator|.
name|getKeyCode
argument_list|()
decl_stmt|;
specifier|final
name|TreePath
name|path
init|=
name|frame
operator|.
name|groupSelector
operator|.
name|getSelectionPath
argument_list|()
decl_stmt|;
specifier|final
name|GroupTreeNode
name|node
init|=
name|path
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|GroupTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isControlDown
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|keyCode
condition|)
block|{
comment|// The up/down/left/rightkeystrokes are displayed in the
comment|// GroupSelector's popup menu, so if they are to be changed,
comment|// edit GroupSelector.java accordingly!
case|case
name|KeyEvent
operator|.
name|VK_UP
case|:
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
name|frame
operator|.
name|groupSelector
operator|.
name|moveNodeUp
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_DOWN
case|:
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
name|frame
operator|.
name|groupSelector
operator|.
name|moveNodeDown
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_LEFT
case|:
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
name|frame
operator|.
name|groupSelector
operator|.
name|moveNodeLeft
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_RIGHT
case|:
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
name|frame
operator|.
name|groupSelector
operator|.
name|moveNodeRight
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_PAGE_DOWN
case|:
name|frame
operator|.
name|nextTab
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_PAGE_UP
case|:
name|frame
operator|.
name|prevTab
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|keyCode
operator|==
name|KeyEvent
operator|.
name|VK_ENTER
condition|)
block|{
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
try|try
block|{
name|runCommand
argument_list|(
literal|"edit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*else if(keyCode == KeyEvent.VK_DELETE){                         try { runCommand("delete");                         } catch (Throwable ex) {                             ex.printStackTrace();                         }                     } */
comment|/*                     if (((e.getKeyCode() == KeyEvent.VK_DOWN) || (e.getKeyCode() == KeyEvent.VK_UP))&& (e.getModifiers() == 0)) {                        Util.pr(entryTable.getSelectedRow()+"");                     }*/
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Set the right-click menu for the entry table.
comment|//rcm = new RightClickMenu(this, metaData);
name|entryTable
operator|.
name|setRightClickMenu
argument_list|(
name|rcm
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|splitPane
operator|.
name|getDividerLocation
argument_list|()
decl_stmt|;
name|splitPane
operator|.
name|setTopComponent
argument_list|(
name|entryTable
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|setDividerLocation
argument_list|(
name|pos
argument_list|)
expr_stmt|;
comment|//splitPane.revalidate();
block|}
DECL|method|setupMainPanel ()
specifier|public
name|void
name|setupMainPanel
parameter_list|()
block|{
comment|//splitPane = new com.jgoodies.uif_lite.component.UIFSplitPane(JSplitPane.VERTICAL_SPLIT);
name|splitPane
operator|=
operator|new
name|JSplitPane
argument_list|(
name|JSplitPane
operator|.
name|VERTICAL_SPLIT
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|setDividerSize
argument_list|(
name|GUIGlobals
operator|.
name|SPLIT_PANE_DIVIDER_SIZE
argument_list|)
expr_stmt|;
comment|// We replace the default FocusTraversalPolicy with a subclass
comment|// that only allows FieldEditor components to gain keyboard focus,
comment|// if there is an entry editor open.
comment|/*splitPane.setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() {                 protected boolean accept(Component c) {                     Util.pr("jaa");                     if (showing == null)                         return super.accept(c);                     else                         return (super.accept(c)&&                                 (c instanceof FieldEditor));                 }                 });*/
name|setupTable
argument_list|()
expr_stmt|;
comment|// If an entry is currently being shown, make sure it stays shown,
comment|// otherwise set the bottom component to null.
if|if
condition|(
name|showing
operator|==
literal|null
condition|)
block|{
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
name|previewPanel
index|[
name|activePreview
index|]
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|previewPanel
index|[
name|activePreview
index|]
operator|!=
literal|null
operator|)
operator|&&
name|previewPanel
index|[
name|activePreview
index|]
operator|.
name|hasEntry
argument_list|()
condition|)
block|{
comment|//splitPane.setDividerLocation(splitPane.getHeight()-GUIGlobals.PREVIEW_HEIGHT[activePreview]);
specifier|final
name|int
name|prevSize
init|=
name|GUIGlobals
operator|.
name|PREVIEW_PANEL_HEIGHT
decl_stmt|;
comment|//Math.min(splitPane.getHeight()/2, previewPanel[activePreview].getPreferredSize().height
comment|//                      + GUIGlobals.PREVIEW_PANEL_PADDING);
comment|//            Util.pr(""+prevSize+" "+(splitPane.getHeight()/2)+" "+previewPanel[activePreview].getPreferredSize().height);
name|splitPane
operator|.
name|setDividerLocation
argument_list|(
name|splitPane
operator|.
name|getHeight
argument_list|()
operator|-
name|prevSize
argument_list|)
expr_stmt|;
block|}
else|else
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
name|showEntry
argument_list|(
name|showing
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|splitPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
comment|//add(contentPane, BorderLayout.CENTER);
comment|//add(sidePaneManager.getPanel(), BorderLayout.WEST);
comment|//add(splitPane, BorderLayout.CENTER);
comment|//setLayout(gbl);
comment|//con.fill = GridBagConstraints.BOTH;
comment|//con.weighty = 1;
comment|//con.weightx = 0;
comment|//gbl.setConstraints(sidePaneManager.getPanel(), con);
comment|//con.weightx = 1;
comment|//gbl.setConstraints(splitPane, con);
comment|//mainPanel.setDividerLocation(GUIGlobals.SPLIT_PANE_DIVIDER_LOCATION);
comment|//setDividerSize(GUIGlobals.SPLIT_PANE_DIVIDER_SIZE);
comment|//setResizeWeight(0);
name|revalidate
argument_list|()
expr_stmt|;
block|}
DECL|method|setDivider ()
specifier|public
name|void
name|setDivider
parameter_list|()
block|{
comment|//contentPane.setDividerLocation(-1);
block|}
comment|/**      * This method is called after a database has been parsed. The      * hashmap contains the contents of all comments in the .bib file      * that started with the meta flag (GUIGlobals.META_FLAG).      * In this method, the meta data are input to their respective      * handlers.      *      * @param meta Metadata to input.      */
DECL|method|parseMetaData (HashMap meta)
specifier|public
name|void
name|parseMetaData
parameter_list|(
name|HashMap
name|meta
parameter_list|)
block|{
name|metaData
operator|=
operator|new
name|MetaData
argument_list|(
name|meta
argument_list|,
name|database
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshTable ()
specifier|public
name|void
name|refreshTable
parameter_list|()
block|{
comment|//System.out.println("hiding="+hidingNonHits+"\tlastHits="+lastSearchHits);
comment|// This method is called by EntryTypeForm when a field value is
comment|// stored. The table is scheduled for repaint.
name|entryTable
operator|.
name|assureNotEditing
argument_list|()
expr_stmt|;
comment|//entryTable.invalidate();
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|hidingNonHits
condition|)
name|tableModel
operator|.
name|update
argument_list|(
name|lastSearchHits
argument_list|)
expr_stmt|;
else|else
name|tableModel
operator|.
name|update
argument_list|()
expr_stmt|;
comment|//tableModel.remap();
if|if
condition|(
operator|(
name|bes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|bes
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
name|selectEntries
argument_list|(
name|bes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//long toc = System.currentTimeMillis();
comment|//	Util.pr("Refresh took: "+(toc-tic)+" ms");
block|}
DECL|method|updatePreamble ()
specifier|public
name|void
name|updatePreamble
parameter_list|()
block|{
if|if
condition|(
name|preambleEditor
operator|!=
literal|null
condition|)
name|preambleEditor
operator|.
name|updatePreamble
argument_list|()
expr_stmt|;
block|}
DECL|method|assureStringDialogNotEditing ()
specifier|public
name|void
name|assureStringDialogNotEditing
parameter_list|()
block|{
if|if
condition|(
name|stringDialog
operator|!=
literal|null
condition|)
name|stringDialog
operator|.
name|assureNotEditing
argument_list|()
expr_stmt|;
block|}
DECL|method|updateStringDialog ()
specifier|public
name|void
name|updateStringDialog
parameter_list|()
block|{
if|if
condition|(
name|stringDialog
operator|!=
literal|null
condition|)
name|stringDialog
operator|.
name|refreshTable
argument_list|()
expr_stmt|;
block|}
DECL|method|updateEntryPreviewToRow (BibtexEntry e)
specifier|public
name|void
name|updateEntryPreviewToRow
parameter_list|(
name|BibtexEntry
name|e
parameter_list|)
block|{      }
DECL|method|updateViewToSelected ()
specifier|public
name|void
name|updateViewToSelected
parameter_list|()
block|{
comment|// First, if the entry editor is visible, we should update it to the selected entry.
name|BibtexEntry
name|be
init|=
name|entryTable
operator|.
name|getActiveEntry
argument_list|()
decl_stmt|;
comment|/*BibtexEntry[] bes = entryTable.getSelectedEntries();       if ((bes != null)&& (bes.length> 0))         be = bes[0];*/
comment|//System.out.println("BasePanel.updateViewToSelected(): be="+be);
if|if
condition|(
name|be
operator|==
literal|null
condition|)
return|return;
comment|//System.out.println("BasePanel.updateViewToSelected(): showing="+showing);
if|if
condition|(
name|showing
operator|!=
literal|null
condition|)
block|{
name|showEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// If no entry editor is visible we must either instantiate a new preview panel or update the one we have.
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"previewEnabled"
argument_list|)
operator|||
name|be
operator|==
literal|null
condition|)
block|{
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
comment|// Do nothing if previews are disabled.
block|}
comment|//      if (previewPanel[activePreview] == null) {
name|boolean
name|newPreviewPanel
init|=
name|previewPanel
index|[
name|activePreview
index|]
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|newPreviewPanel
condition|)
block|{
name|previewPanel
index|[
name|activePreview
index|]
operator|=
operator|new
name|PreviewPanel
argument_list|(
name|database
argument_list|,
name|be
argument_list|,
name|prefs
operator|.
name|get
argument_list|(
literal|"preview"
operator|+
name|activePreview
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|previewPanel
index|[
name|activePreview
index|]
operator|.
name|setEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
comment|//splitPane.setDividerLocation(splitPane.getHeight()-GUIGlobals.PREVIEW_HEIGHT[activePreview]);
comment|//Util.pr(""+prevSize+" "+(splitPane.getHeight()/2)+" "+previewPanel[activePreview].getPreferredSize().height);
comment|//splitPane.setDividerLocation(splitPane.getHeight() - prevSize);
comment|//splitPane.resetToPreferredSizes();
comment|//previewPanel[activePreview].getPane().invalidate();
name|boolean
name|resizePreview
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
operator|==
literal|null
operator|||
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
operator|!=
name|previewPanel
index|[
name|activePreview
index|]
operator|.
name|getPane
argument_list|()
condition|)
block|{
name|resizePreview
operator|=
literal|true
expr_stmt|;
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
name|previewPanel
index|[
name|activePreview
index|]
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|resizePreview
condition|)
name|resizePreview
operator|=
name|previewPanel
index|[
name|activePreview
index|]
operator|.
name|getPane
argument_list|()
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|height
operator|>=
name|splitPane
operator|.
name|getHeight
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|resizePreview
condition|)
block|{
if|if
condition|(
name|splitPane
operator|.
name|getDividerLocation
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|resizePreview
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newPreviewPanel
operator|||
name|resizePreview
condition|)
block|{
name|int
name|prevSize
decl_stmt|;
comment|//if(resizePreview) //prevSize = splitPane.getHeight()/2;
comment|//else {
name|prevSize
operator|=
name|GUIGlobals
operator|.
name|PREVIEW_PANEL_HEIGHT
expr_stmt|;
comment|//Math.max(150, previewPanel[activePreview].getPane().getPreferredSize().height)
comment|//GUIGlobals.PREVIEW_PANEL_PADDING;
comment|//}
name|splitPane
operator|.
name|setDividerLocation
argument_list|(
name|splitPane
operator|.
name|getHeight
argument_list|()
operator|-
name|prevSize
argument_list|)
expr_stmt|;
block|}
comment|/*int prevSize = Math.min(splitPane.getHeight()/2, previewPanel[activePreview].getPane().getPreferredSize().height                             + GUIGlobals.PREVIEW_PANEL_PADDING);*/
comment|//splitPane.setDividerLocation(splitPane.getHeight() - prevSize);
block|}
comment|/**      * Stores the source view in the entry editor, if one is open, has the source view      * selected and the source has been edited.      * @return boolean false if there is a validation error in the source panel, true otherwise.      */
DECL|method|entryEditorAllowsChange ()
specifier|public
name|boolean
name|entryEditorAllowsChange
parameter_list|()
block|{
name|Component
name|c
init|=
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|c
operator|instanceof
name|EntryEditor
operator|)
condition|)
block|{
return|return
operator|(
operator|(
name|EntryEditor
operator|)
name|c
operator|)
operator|.
name|lastSourceAccepted
argument_list|()
return|;
block|}
else|else
return|return
literal|true
return|;
block|}
DECL|method|moveFocusToEntryEditor ()
specifier|public
name|void
name|moveFocusToEntryEditor
parameter_list|()
block|{
name|Component
name|c
init|=
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|c
operator|instanceof
name|EntryEditor
operator|)
condition|)
block|{
operator|new
name|FocusRequester
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Ensure that no preview is shown. Called when preview is turned off. Must chech if      * a preview is in fact visible before doing anything rash.      */
DECL|method|hidePreview ()
specifier|public
name|void
name|hidePreview
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"previewEnabled"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Component
name|c
init|=
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|!=
literal|null
operator|)
operator|&&
operator|!
operator|(
name|c
operator|instanceof
name|EntryEditor
operator|)
condition|)
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|isShowingEditor ()
specifier|public
name|boolean
name|isShowingEditor
parameter_list|()
block|{
return|return
operator|(
operator|(
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
operator|instanceof
name|EntryEditor
operator|)
operator|)
return|;
block|}
DECL|method|showEntry (final BibtexEntry be)
specifier|public
name|void
name|showEntry
parameter_list|(
specifier|final
name|BibtexEntry
name|be
parameter_list|)
block|{
if|if
condition|(
name|showing
operator|==
name|be
condition|)
block|{
if|if
condition|(
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// This is the special occasion when showing is set to an
comment|// entry, but no entry editor is in fact shown. This happens
comment|// after Preferences dialog is closed, and it means that we
comment|// must make sure the same entry is shown again. We do this by
comment|// setting showing to null, and recursively calling this method.
name|showing
operator|=
literal|null
expr_stmt|;
name|showEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The correct entry is already being shown. Make sure the editor
comment|// is updated.
operator|(
operator|(
name|EntryEditor
operator|)
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
operator|)
operator|.
name|updateAllFields
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|EntryEditor
name|form
decl_stmt|;
name|int
name|divLoc
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|visName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|showing
operator|!=
literal|null
condition|)
block|{
name|visName
operator|=
operator|(
operator|(
name|EntryEditor
operator|)
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
operator|)
operator|.
name|getVisiblePanelName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|showing
operator|!=
literal|null
condition|)
name|divLoc
operator|=
name|splitPane
operator|.
name|getDividerLocation
argument_list|()
expr_stmt|;
if|if
condition|(
name|entryEditors
operator|.
name|containsKey
argument_list|(
name|be
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// We already have an editor for this entry type.
name|form
operator|=
operator|(
name|EntryEditor
operator|)
name|entryEditors
operator|.
name|get
argument_list|(
operator|(
name|be
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|switchTo
argument_list|(
name|be
argument_list|)
expr_stmt|;
if|if
condition|(
name|visName
operator|!=
literal|null
condition|)
name|form
operator|.
name|setVisiblePanel
argument_list|(
name|visName
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
name|form
argument_list|)
expr_stmt|;
comment|//highlightEntry(be);
block|}
else|else
block|{
comment|// We must instantiate a new editor for this type.
name|form
operator|=
operator|new
name|EntryEditor
argument_list|(
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|,
name|be
argument_list|)
expr_stmt|;
if|if
condition|(
name|visName
operator|!=
literal|null
condition|)
name|form
operator|.
name|setVisiblePanel
argument_list|(
name|visName
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
name|form
argument_list|)
expr_stmt|;
comment|//highlightEntry(be);
name|entryEditors
operator|.
name|put
argument_list|(
name|be
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|form
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|divLoc
operator|>
literal|0
condition|)
block|{
name|splitPane
operator|.
name|setDividerLocation
argument_list|(
name|divLoc
argument_list|)
expr_stmt|;
block|}
else|else
name|splitPane
operator|.
name|setDividerLocation
argument_list|(
name|GUIGlobals
operator|.
name|VERTICAL_DIVIDER_LOCATION
argument_list|)
expr_stmt|;
comment|//new FocusRequester(form);
comment|//form.requestFocus();
name|showing
operator|=
name|be
expr_stmt|;
name|setEntryEditorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Make sure it is enabled.
block|}
comment|/**      * Closes the entry editor.      * Set showing to null, and call updateViewToSelected.      */
DECL|method|hideEntryEditor ()
specifier|public
name|void
name|hideEntryEditor
parameter_list|()
block|{
name|BibtexEntry
name|be
init|=
name|showing
decl_stmt|;
name|showing
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|be
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entryTable
operator|.
name|getSelectedRows
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|int
name|row
init|=
name|tableModel
operator|.
name|getNumberFromName
argument_list|(
name|be
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|<
name|tableModel
operator|.
name|getRowCount
argument_list|()
condition|)
name|entryTable
operator|.
name|addRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
name|updateViewToSelected
argument_list|()
expr_stmt|;
block|}
operator|new
name|FocusRequester
argument_list|(
name|entryTable
argument_list|)
expr_stmt|;
comment|/*splitPane.setBottomComponent(previewPanel);         if (previewPanel != null)           splitPane.setDividerLocation(splitPane.getHeight()-GUIGlobals.PREVIEW_HEIGHT);  */
block|}
comment|/**      * This method selects the given entry, and scrolls it into view in the table.      * If an entryEditor is shown, it is given focus afterwards.      */
DECL|method|highlightEntry (final BibtexEntry be)
specifier|public
name|void
name|highlightEntry
parameter_list|(
specifier|final
name|BibtexEntry
name|be
parameter_list|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|entryTable
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|int
name|row
init|=
name|tableModel
operator|.
name|getNumberFromName
argument_list|(
name|be
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
block|{
name|entryTable
operator|.
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|//entryTable.setActiveRow(row);
name|entryTable
operator|.
name|ensureVisible
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|Component
name|comp
init|=
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
decl_stmt|;
comment|//if (comp instanceof EntryEditor)
comment|//     comp.requestFocus();
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method selects the given enties.      * If an entryEditor is shown, it is given focus afterwards.      */
DECL|method|selectEntries (final BibtexEntry[] bes, final int toScrollTo)
specifier|public
name|void
name|selectEntries
parameter_list|(
specifier|final
name|BibtexEntry
index|[]
name|bes
parameter_list|,
specifier|final
name|int
name|toScrollTo
parameter_list|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|rowToScrollTo
init|=
literal|0
decl_stmt|;
name|entryTable
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|loop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bes
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue
name|loop
continue|;
name|int
name|row
init|=
name|tableModel
operator|.
name|getNumberFromName
argument_list|(
name|bes
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|toScrollTo
condition|)
name|rowToScrollTo
operator|=
name|row
expr_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
name|entryTable
operator|.
name|addRowSelectionIntervalQuietly
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
name|entryTable
operator|.
name|ensureVisible
argument_list|(
name|rowToScrollTo
argument_list|)
expr_stmt|;
name|Component
name|comp
init|=
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
decl_stmt|;
comment|//if (comp instanceof EntryEditor)
comment|//    comp.requestFocus();
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Closes the entry editor if it is showing the given entry.      *      * @param be a<code>BibtexEntry</code> value      */
DECL|method|ensureNotShowing (BibtexEntry be)
specifier|public
name|void
name|ensureNotShowing
parameter_list|(
name|BibtexEntry
name|be
parameter_list|)
block|{
if|if
condition|(
name|showing
operator|==
name|be
condition|)
block|{
name|hideEntryEditor
argument_list|()
expr_stmt|;
name|showing
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|updateEntryEditorIfShowing ()
specifier|public
name|void
name|updateEntryEditorIfShowing
parameter_list|()
block|{
if|if
condition|(
name|isShowingEditor
argument_list|()
condition|)
block|{
name|EntryEditor
name|editor
init|=
operator|(
name|EntryEditor
operator|)
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|editor
operator|.
name|getType
argument_list|()
operator|!=
name|editor
operator|.
name|entry
operator|.
name|getType
argument_list|()
condition|)
block|{
comment|// The entry has changed type, so we must get a new editor.
name|showing
operator|=
literal|null
expr_stmt|;
name|showEntry
argument_list|(
name|editor
operator|.
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|.
name|updateAllFields
argument_list|()
expr_stmt|;
name|editor
operator|.
name|updateSource
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * If an entry editor is showing, make sure its currently focused field      * stores its changes, if any.      */
DECL|method|storeCurrentEdit ()
specifier|public
name|void
name|storeCurrentEdit
parameter_list|()
block|{
if|if
condition|(
name|isShowingEditor
argument_list|()
condition|)
block|{
name|EntryEditor
name|editor
init|=
operator|(
name|EntryEditor
operator|)
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
decl_stmt|;
name|editor
operator|.
name|storeCurrentEdit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This method iterates through all existing entry editors in this      * BasePanel, telling each to update all its instances of      * FieldContentSelector. This is done to ensure that the list of words      * in each selector is up-to-date after the user has made changes in      * the Manage dialog.      */
DECL|method|updateAllContentSelectors ()
specifier|public
name|void
name|updateAllContentSelectors
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|entryEditors
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|EntryEditor
name|ed
init|=
operator|(
name|EntryEditor
operator|)
name|entryEditors
operator|.
name|get
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|ed
operator|.
name|updateAllContentSelectors
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|rebuildAllEntryEditors ()
specifier|public
name|void
name|rebuildAllEntryEditors
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|entryEditors
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|EntryEditor
name|ed
init|=
operator|(
name|EntryEditor
operator|)
name|entryEditors
operator|.
name|get
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|ed
operator|.
name|rebuildPanels
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|markBaseChanged ()
specifier|public
name|void
name|markBaseChanged
parameter_list|()
block|{
name|baseChanged
operator|=
literal|true
expr_stmt|;
comment|// Put an asterix behind the file name to indicate the
comment|// database has changed.
name|String
name|oldTitle
init|=
name|frame
operator|.
name|getTabTitle
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldTitle
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
condition|)
name|frame
operator|.
name|setTabTitle
argument_list|(
name|this
argument_list|,
name|oldTitle
operator|+
literal|"*"
argument_list|)
expr_stmt|;
comment|// If the status line states that the base has been saved, we
comment|// remove this message, since it is no longer relevant. If a
comment|// different message is shown, we leave it.
if|if
condition|(
name|frame
operator|.
name|statusLine
operator|.
name|getText
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Saved database"
argument_list|)
condition|)
name|frame
operator|.
name|output
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
DECL|method|markNonUndoableBaseChanged ()
specifier|public
name|void
name|markNonUndoableBaseChanged
parameter_list|()
block|{
name|nonUndoableChange
operator|=
literal|true
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
DECL|method|markChangedOrUnChanged ()
specifier|public
specifier|synchronized
name|void
name|markChangedOrUnChanged
parameter_list|()
block|{
if|if
condition|(
name|undoManager
operator|.
name|hasChanged
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|baseChanged
condition|)
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|baseChanged
operator|&&
operator|!
name|nonUndoableChange
condition|)
block|{
name|baseChanged
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
name|frame
operator|.
name|setTabTitle
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|frame
operator|.
name|setTabTitle
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"untitled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Shows either normal search results or group search, depending      * on the searchValueField. This is done by reordering entries and      * graying out non-hits.      *      * @param searchValueField Which field to show search for: Globals.SEARCH or      * Globals.GROUPSEARCH.      *      */
DECL|method|showSearchResults (String searchValueField, boolean reorder, boolean grayOut, boolean select, int numberOfHits)
specifier|public
name|void
name|showSearchResults
parameter_list|(
name|String
name|searchValueField
parameter_list|,
name|boolean
name|reorder
parameter_list|,
name|boolean
name|grayOut
parameter_list|,
name|boolean
name|select
parameter_list|,
name|int
name|numberOfHits
parameter_list|)
block|{
comment|//entryTable.scrollTo(0);
name|entryTable
operator|.
name|invalidate
argument_list|()
expr_stmt|;
if|if
condition|(
name|searchValueField
operator|==
name|Globals
operator|.
name|GROUPSEARCH
condition|)
block|{
name|sortingByGroup
operator|=
name|reorder
expr_stmt|;
name|coloringByGroup
operator|=
name|grayOut
expr_stmt|;
block|}
comment|// Workaround to compensate for not being able to hide non-hits
comment|// properly while showing groups. The problem is that we don't
comment|// know how many hits there are - the number reported includes
comment|// hits outside of the current group selection.
comment|/*if (sortingByGroup) { 	    grayOut = true; 	    }*/
if|if
condition|(
name|searchValueField
operator|==
name|Globals
operator|.
name|SEARCH
condition|)
block|{
name|sortingBySearchResults
operator|=
name|reorder
expr_stmt|;
name|coloringBySearchResults
operator|=
name|grayOut
expr_stmt|;
block|}
if|if
condition|(
name|searchValueField
operator|==
name|Globals
operator|.
name|GROUPSEARCH
condition|)
block|{
name|lastSearchHits
operator|=
name|numberOfHits
expr_stmt|;
name|hidingNonHits
operator|=
name|reorder
operator|&&
operator|!
name|grayOut
expr_stmt|;
comment|//System.out.println("BasePanel: hidingNonHits="+hidingNonHits);
block|}
comment|// We either gray out, or hide, non-hits.
name|tableModel
operator|.
name|remap
argument_list|()
expr_stmt|;
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
if|if
condition|(
name|select
condition|)
block|{
name|selectResults
argument_list|(
name|searchValueField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reorder
condition|)
name|entryTable
operator|.
name|scrollTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//entryTable.revalidate();
comment|//entryTable.repaint();
block|}
comment|/**      * Selects all entries with a non-zero value in the field      * @param<code>String</code> field name.      */
DECL|method|selectResults (String field)
specifier|public
name|void
name|selectResults
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|LinkedList
name|intervals
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|int
name|prevStart
init|=
operator|-
literal|1
decl_stmt|,
name|prevToSel
init|=
literal|0
decl_stmt|;
comment|// First we build a list of intervals to select, without touching the table.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entryTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
call|(
name|String
call|)
argument_list|(
name|database
operator|.
name|getEntryById
argument_list|(
name|tableModel
operator|.
name|getIdForRow
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|value
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
if|if
condition|(
name|prevStart
operator|<
literal|0
condition|)
name|prevStart
operator|=
name|i
expr_stmt|;
name|prevToSel
operator|=
name|i
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prevStart
operator|>=
literal|0
condition|)
block|{
name|intervals
operator|.
name|add
argument_list|(
operator|new
name|int
index|[]
block|{
name|prevStart
block|,
name|prevToSel
block|}
argument_list|)
expr_stmt|;
name|prevStart
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|// Then select those intervals, if any.
if|if
condition|(
name|intervals
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|entryTable
operator|.
name|setSelectionListenerEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|intervals
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
index|[]
name|interval
init|=
operator|(
name|int
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|entryTable
operator|.
name|addRowSelectionInterval
argument_list|(
name|interval
index|[
literal|0
index|]
argument_list|,
name|interval
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|entryTable
operator|.
name|setSelectionListenerEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Selects a single entry, and scrolls the table to center it.      *      * @param pos Current position of entry to select.      *      */
DECL|method|selectSingleEntry (int pos)
specifier|public
name|void
name|selectSingleEntry
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|entryTable
operator|.
name|addRowSelectionInterval
argument_list|(
name|pos
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|scrollToCenter
argument_list|(
name|pos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|stopShowingSearchResults ()
specifier|public
name|void
name|stopShowingSearchResults
parameter_list|()
block|{
name|sortingBySearchResults
operator|=
literal|false
expr_stmt|;
name|coloringBySearchResults
operator|=
literal|false
expr_stmt|;
comment|//hidingNonHits = false;
comment|/* entryTable.setShowingSearchResults(showingSearchResults,         showingGroup);        */
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|tableModel
operator|.
name|remap
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|entryTable
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
DECL|method|stopShowingGroup ()
specifier|public
name|void
name|stopShowingGroup
parameter_list|()
block|{
name|sortingByGroup
operator|=
literal|false
expr_stmt|;
name|coloringByGroup
operator|=
literal|false
expr_stmt|;
name|hidingNonHits
operator|=
literal|false
expr_stmt|;
comment|/*       entryTable.setShowingSearchResults(showingSearchResults,                                          showingGroup);*/
name|entryTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|tableModel
operator|.
name|remap
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
DECL|method|getTableModel ()
specifier|public
name|EntryTableModel
name|getTableModel
parameter_list|()
block|{
return|return
name|tableModel
return|;
block|}
DECL|method|isEntriesSelected ()
specifier|public
name|boolean
name|isEntriesSelected
parameter_list|()
block|{
return|return
name|entryTable
operator|.
name|getSelectedRows
argument_list|()
operator|.
name|length
operator|>
literal|0
return|;
block|}
DECL|method|getDatabase ()
specifier|public
name|BibtexDatabase
name|getDatabase
parameter_list|()
block|{
return|return
name|database
return|;
block|}
DECL|method|preambleEditorClosing ()
specifier|public
name|void
name|preambleEditorClosing
parameter_list|()
block|{
name|preambleEditor
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|stringsClosing ()
specifier|public
name|void
name|stringsClosing
parameter_list|()
block|{
name|stringDialog
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|changeType (BibtexEntry entry, BibtexEntryType type)
specifier|public
name|void
name|changeType
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexEntryType
name|type
parameter_list|)
block|{
name|changeType
argument_list|(
operator|new
name|BibtexEntry
index|[]
block|{
name|entry
block|}
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|changeType (BibtexEntryType type)
specifier|public
name|void
name|changeType
parameter_list|(
name|BibtexEntryType
name|type
parameter_list|)
block|{
name|BibtexEntry
index|[]
name|bes
init|=
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|changeType
argument_list|(
name|bes
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|changeType (BibtexEntry[] bes, BibtexEntryType type)
specifier|public
name|void
name|changeType
parameter_list|(
name|BibtexEntry
index|[]
name|bes
parameter_list|,
name|BibtexEntryType
name|type
parameter_list|)
block|{
if|if
condition|(
operator|(
name|bes
operator|==
literal|null
operator|)
operator|||
operator|(
name|bes
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|output
argument_list|(
literal|"First select the entries you wish to change type "
operator|+
literal|"for."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|bes
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|int
name|choice
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|this
argument_list|,
literal|"Multiple entries selected. Do you want to change"
operator|+
literal|"\nthe type of all these to '"
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"'?"
argument_list|,
literal|"Change type"
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|choice
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
return|return;
block|}
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"change type"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableChangeType
argument_list|(
name|bes
index|[
name|i
index|]
argument_list|,
name|bes
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|bes
index|[
name|i
index|]
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Changed type to"
argument_list|)
operator|+
literal|" '"
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"for"
argument_list|)
operator|+
literal|" "
operator|+
name|bes
operator|.
name|length
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
block|}
DECL|method|showDeleteConfirmationDialog (int numberOfEntries)
specifier|public
name|boolean
name|showDeleteConfirmationDialog
parameter_list|(
name|int
name|numberOfEntries
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"confirmDelete"
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Really delete the selected"
argument_list|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|+
literal|"?"
decl_stmt|,
name|title
init|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Delete entry"
argument_list|)
decl_stmt|;
if|if
condition|(
name|numberOfEntries
operator|>
literal|1
condition|)
block|{
name|msg
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Really delete the selected"
argument_list|)
operator|+
literal|" "
operator|+
name|numberOfEntries
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
operator|+
literal|"?"
expr_stmt|;
name|title
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Delete multiple entries"
argument_list|)
expr_stmt|;
block|}
name|CheckBoxMessage
name|cb
init|=
operator|new
name|CheckBoxMessage
argument_list|(
name|msg
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Disable this confirmation dialog"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|cb
argument_list|,
name|title
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cb
operator|.
name|isSelected
argument_list|()
condition|)
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"confirmDelete"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
operator|)
return|;
block|}
else|else
return|return
literal|true
return|;
block|}
DECL|class|UndoAction
class|class
name|UndoAction
extends|extends
name|BaseAction
block|{
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
try|try
block|{
name|String
name|name
init|=
name|undoManager
operator|.
name|getUndoPresentationName
argument_list|()
decl_stmt|;
name|undoManager
operator|.
name|undo
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CannotUndoException
name|ex
parameter_list|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Nothing to undo"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|// After everything, enable/disable the undo/redo actions
comment|// appropriately.
comment|//updateUndoState();
comment|//redoAction.updateRedoState();
name|markChangedOrUnChanged
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RedoAction
class|class
name|RedoAction
extends|extends
name|BaseAction
block|{
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
try|try
block|{
name|String
name|name
init|=
name|undoManager
operator|.
name|getRedoPresentationName
argument_list|()
decl_stmt|;
name|undoManager
operator|.
name|redo
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CannotRedoException
name|ex
parameter_list|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Nothing to redo"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|// After everything, enable/disable the undo/redo actions
comment|// appropriately.
comment|//updateRedoState();
comment|//undoAction.updateUndoState();
name|markChangedOrUnChanged
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Method pertaining to the ClipboardOwner interface.
DECL|method|lostOwnership (Clipboard clipboard, Transferable contents)
specifier|public
name|void
name|lostOwnership
parameter_list|(
name|Clipboard
name|clipboard
parameter_list|,
name|Transferable
name|contents
parameter_list|)
block|{}
DECL|method|setEntryEditorEnabled (boolean enabled)
specifier|public
name|void
name|setEntryEditorEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
operator|(
name|showing
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
operator|instanceof
name|EntryEditor
operator|)
condition|)
block|{
name|EntryEditor
name|ed
init|=
operator|(
name|EntryEditor
operator|)
name|splitPane
operator|.
name|getBottomComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|ed
operator|.
name|isEnabled
argument_list|()
operator|!=
name|enabled
condition|)
name|ed
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fileMonitorHandle ()
specifier|public
name|String
name|fileMonitorHandle
parameter_list|()
block|{
return|return
name|fileMonitorHandle
return|;
block|}
DECL|method|fileUpdated ()
specifier|public
name|void
name|fileUpdated
parameter_list|()
block|{
if|if
condition|(
name|saving
condition|)
return|return;
comment|// We are just saving the file, so this message is most likely due
comment|// to bad timing. If not, we'll handle it on the next polling.
comment|//Util.pr("File '"+file.getPath()+"' has been modified.");
name|updatedExternally
operator|=
literal|true
expr_stmt|;
comment|// Adding the sidepane component is Swing work, so we must do this in the Swing
comment|// thread:
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Test: running scan automatically in background
name|ChangeScanner
name|scanner
init|=
operator|new
name|ChangeScanner
argument_list|(
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|changeScan
argument_list|(
name|BasePanel
operator|.
name|this
operator|.
name|file
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|scanner
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scanner
operator|.
name|changesFound
argument_list|()
condition|)
block|{
name|FileUpdatePanel
name|pan
init|=
operator|new
name|FileUpdatePanel
argument_list|(
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|,
name|sidePaneManager
argument_list|,
name|file
argument_list|,
name|scanner
argument_list|)
decl_stmt|;
name|sidePaneManager
operator|.
name|add
argument_list|(
literal|"fileUpdate"
argument_list|,
name|pan
argument_list|)
expr_stmt|;
name|setUpdatedExternally
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//scanner.displayResult();
block|}
else|else
block|{
name|setUpdatedExternally
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//System.out.println("No changes found.");
block|}
block|}
block|}
decl_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
DECL|method|fileRemoved ()
specifier|public
name|void
name|fileRemoved
parameter_list|()
block|{
name|Util
operator|.
name|pr
argument_list|(
literal|"File '"
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|"' has been deleted."
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
if|if
condition|(
name|fileMonitorHandle
operator|!=
literal|null
condition|)
name|Globals
operator|.
name|fileUpdateMonitor
operator|.
name|removeUpdateListener
argument_list|(
name|fileMonitorHandle
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpdatedExternally (boolean b)
specifier|public
name|void
name|setUpdatedExternally
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|updatedExternally
operator|=
name|b
expr_stmt|;
block|}
DECL|method|addEntryTableSelectionListener (ListSelectionListener listener)
specifier|public
name|void
name|addEntryTableSelectionListener
parameter_list|(
name|ListSelectionListener
name|listener
parameter_list|)
block|{
name|entryTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|addListSelectionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|getSelectedEntries ()
specifier|public
name|BibtexEntry
index|[]
name|getSelectedEntries
parameter_list|()
block|{
return|return
name|entryTable
operator|.
name|getSelectedEntries
argument_list|()
return|;
block|}
DECL|method|getGroupSelector ()
specifier|public
name|GroupSelector
name|getGroupSelector
parameter_list|()
block|{
return|return
name|frame
operator|.
name|groupSelector
return|;
block|}
block|}
end_class

end_unit

