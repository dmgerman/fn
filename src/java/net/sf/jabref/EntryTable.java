begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Nizar N. Batada, Morten O. Alver  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|*
import|;
end_import

begin_class
DECL|class|EntryTable
specifier|public
class|class
name|EntryTable
extends|extends
name|JTable
block|{
DECL|field|PREFERRED_WIDTH
DECL|field|PREFERRED_HEIGHT
specifier|final
name|int
name|PREFERRED_WIDTH
init|=
literal|400
decl_stmt|,
name|PREFERRED_HEIGHT
init|=
literal|30
decl_stmt|;
DECL|field|sp
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
operator|(
name|JTable
operator|)
name|this
argument_list|)
decl_stmt|;
DECL|field|rightClickMenu
name|JPopupMenu
name|rightClickMenu
init|=
literal|null
decl_stmt|;
DECL|field|tableModel
name|EntryTableModel
name|tableModel
decl_stmt|;
DECL|field|prefs
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|showingSearchResults
specifier|protected
name|boolean
name|showingSearchResults
init|=
literal|false
decl_stmt|,
DECL|field|showingGroup
name|showingGroup
init|=
literal|false
decl_stmt|;
DECL|field|ths
specifier|private
name|EntryTable
name|ths
init|=
name|this
decl_stmt|;
DECL|method|EntryTable (EntryTableModel tm_, JabRefPreferences prefs_)
specifier|public
name|EntryTable
parameter_list|(
name|EntryTableModel
name|tm_
parameter_list|,
name|JabRefPreferences
name|prefs_
parameter_list|)
block|{
name|super
argument_list|(
name|tm_
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableModel
operator|=
name|tm_
expr_stmt|;
name|prefs
operator|=
name|prefs_
expr_stmt|;
name|getTableHeader
argument_list|()
operator|.
name|setReorderingAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// To prevent color bugs. Must be fixed.
name|setShowVerticalLines
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setShowHorizontalLines
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//setColumnSelectionAllowed(true);
name|setColumnSelectionAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setRowSelectionAllowed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setAutoResizeMode
argument_list|(
name|prefs
operator|.
name|getInt
argument_list|(
literal|"autoResizeMode"
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultCellEditor
name|dce
init|=
operator|new
name|DefaultCellEditor
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
decl_stmt|;
name|dce
operator|.
name|setClickCountToStart
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|setDefaultEditor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|dce
argument_list|)
expr_stmt|;
name|getTableHeader
argument_list|()
operator|.
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|int
name|col
init|=
name|getTableHeader
argument_list|()
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|>
literal|0
condition|)
block|{
comment|// A valid column, but not the first.
name|String
name|s
init|=
name|tableModel
operator|.
name|getColumnName
argument_list|(
name|col
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"priSort"
argument_list|)
argument_list|)
condition|)
name|prefs
operator|.
name|put
argument_list|(
literal|"priSort"
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// ... or change sort direction
else|else
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"priDescending"
argument_list|,
operator|!
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"priDescending"
argument_list|)
argument_list|)
expr_stmt|;
name|tableModel
operator|.
name|remap
argument_list|()
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON3
condition|)
block|{
if|if
condition|(
name|rightClickMenu
operator|!=
literal|null
condition|)
name|rightClickMenu
operator|.
name|show
argument_list|(
name|ths
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|setWidths
argument_list|()
expr_stmt|;
name|sp
operator|.
name|getViewport
argument_list|()
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|tableBackground
argument_list|)
expr_stmt|;
name|updateFont
argument_list|()
expr_stmt|;
block|}
DECL|method|setWidths ()
specifier|public
name|void
name|setWidths
parameter_list|()
block|{
comment|// Setting column widths:
name|TableColumnModel
name|cm
init|=
name|getColumnModel
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getModel
argument_list|()
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|GUIGlobals
operator|.
name|getPreferredFieldLength
argument_list|(
name|getModel
argument_list|()
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPane ()
specifier|public
name|JScrollPane
name|getPane
parameter_list|()
block|{
return|return
name|sp
return|;
block|}
DECL|method|setShowingSearchResults (boolean search, boolean group)
specifier|public
name|void
name|setShowingSearchResults
parameter_list|(
name|boolean
name|search
parameter_list|,
name|boolean
name|group
parameter_list|)
block|{
name|showingSearchResults
operator|=
name|search
expr_stmt|;
name|showingGroup
operator|=
name|group
expr_stmt|;
block|}
DECL|method|setRightClickMenu (JPopupMenu rcm)
specifier|public
name|void
name|setRightClickMenu
parameter_list|(
name|JPopupMenu
name|rcm
parameter_list|)
block|{
name|rightClickMenu
operator|=
name|rcm
expr_stmt|;
block|}
DECL|method|getCellRenderer (int row, int column)
specifier|public
name|TableCellRenderer
name|getCellRenderer
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
comment|// This method asks the table model whether the given cell represents a
comment|// required or optional field, and returns the appropriate renderer.
name|int
name|score
init|=
operator|-
literal|3
decl_stmt|;
if|if
condition|(
operator|!
name|showingSearchResults
operator|||
name|tableModel
operator|.
name|nonZeroField
argument_list|(
name|row
argument_list|,
name|Globals
operator|.
name|SEARCH
argument_list|)
condition|)
name|score
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|showingGroup
operator|||
name|tableModel
operator|.
name|nonZeroField
argument_list|(
name|row
argument_list|,
name|Globals
operator|.
name|GROUPSEARCH
argument_list|)
condition|)
name|score
operator|+=
literal|2
expr_stmt|;
comment|// Now, a grayed out renderer is for entries with -1, and
comment|// a very grayed out one for entries with -2
if|if
condition|(
name|score
operator|<
operator|-
literal|1
condition|)
return|return
name|veryGrayedOutRenderer
return|;
if|if
condition|(
name|score
operator|==
operator|-
literal|1
condition|)
return|return
name|grayedOutRenderer
return|;
if|if
condition|(
operator|!
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"tableColorCodesOn"
argument_list|)
condition|)
return|return
name|defRenderer
return|;
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
comment|// Return a renderer with red background if the entry is incomplete.
if|if
condition|(
name|tableModel
operator|.
name|isComplete
argument_list|(
name|row
argument_list|)
condition|)
return|return
name|defRenderer
return|;
else|else
block|{
if|if
condition|(
name|tableModel
operator|.
name|hasCrossRef
argument_list|(
name|row
argument_list|)
condition|)
return|return
name|maybeIncRenderer
return|;
else|else
return|return
name|incRenderer
return|;
block|}
comment|//return (tableModel.isComplete(row) ? defRenderer: incRenderer);
block|}
name|int
name|status
decl_stmt|;
try|try
block|{
comment|// This try clause is here to contain a bug.
name|status
operator|=
name|tableModel
operator|.
name|getCellStatus
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|ex
parameter_list|)
block|{
return|return
name|defRenderer
return|;
comment|// This should not occur.
block|}
comment|//if (column == 1)
comment|//    Util.pr(""+status);
if|if
condition|(
name|status
operator|==
name|EntryTableModel
operator|.
name|REQUIRED
condition|)
return|return
name|reqRenderer
return|;
elseif|else
if|if
condition|(
name|status
operator|==
name|EntryTableModel
operator|.
name|OPTIONAL
condition|)
return|return
name|optRenderer
return|;
else|else
return|return
name|defRenderer
return|;
block|}
DECL|method|scrollTo (int y)
specifier|public
name|void
name|scrollTo
parameter_list|(
name|int
name|y
parameter_list|)
block|{
name|JScrollBar
name|scb
init|=
name|sp
operator|.
name|getVerticalScrollBar
argument_list|()
decl_stmt|;
name|scb
operator|.
name|setValue
argument_list|(
name|y
operator|*
name|scb
operator|.
name|getUnitIncrement
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getSelectedEntries ()
specifier|public
name|BibtexEntry
index|[]
name|getSelectedEntries
parameter_list|()
block|{
name|BibtexEntry
index|[]
name|bes
init|=
literal|null
decl_stmt|;
name|int
index|[]
name|rows
init|=
name|getSelectedRows
argument_list|()
decl_stmt|;
comment|//int[] cols = getSelectedColumns();
comment|// Entries are selected if only the first or multiple
comment|// columns are selected.
comment|//if (((cols.length == 1)&& (cols[0] == 0)) ||
comment|//(cols.length> 1)) { // entryTable.getColumnCount())) {
if|if
condition|(
name|rows
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|bes
operator|=
operator|new
name|BibtexEntry
index|[
name|rows
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bes
index|[
name|i
index|]
operator|=
name|tableModel
operator|.
name|db
operator|.
name|getEntryById
argument_list|(
name|tableModel
operator|.
name|getNameFromNumber
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bes
return|;
block|}
comment|// The following classes define the renderers used to render required
comment|// and optional fields in the table. The purpose of these renderers is
comment|// to visualize which fields are needed for each entry.
DECL|field|defRenderer
specifier|private
name|DefaultTableCellRenderer
name|defRenderer
init|=
operator|new
name|DefaultTableCellRenderer
argument_list|()
decl_stmt|;
DECL|field|reqRenderer
specifier|private
name|RequiredRenderer
name|reqRenderer
init|=
operator|new
name|RequiredRenderer
argument_list|()
decl_stmt|;
DECL|field|optRenderer
specifier|private
name|OptionalRenderer
name|optRenderer
init|=
operator|new
name|OptionalRenderer
argument_list|()
decl_stmt|;
DECL|field|incRenderer
specifier|private
name|IncompleteEntryRenderer
name|incRenderer
init|=
operator|new
name|IncompleteEntryRenderer
argument_list|()
decl_stmt|;
DECL|field|grayedOutRenderer
specifier|private
name|GrayedOutRenderer
name|grayedOutRenderer
init|=
operator|new
name|GrayedOutRenderer
argument_list|()
decl_stmt|;
DECL|field|veryGrayedOutRenderer
specifier|private
name|VeryGrayedOutRenderer
name|veryGrayedOutRenderer
init|=
operator|new
name|VeryGrayedOutRenderer
argument_list|()
decl_stmt|;
specifier|private
name|MaybeIncompleteEntryRenderer
DECL|field|maybeIncRenderer
name|maybeIncRenderer
init|=
operator|new
name|MaybeIncompleteEntryRenderer
argument_list|()
decl_stmt|;
DECL|class|RequiredRenderer
specifier|public
class|class
name|RequiredRenderer
extends|extends
name|DefaultTableCellRenderer
block|{
DECL|method|RequiredRenderer ()
specifier|public
name|RequiredRenderer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|tableReqFieldBackground
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|OptionalRenderer
specifier|public
class|class
name|OptionalRenderer
extends|extends
name|DefaultTableCellRenderer
block|{
DECL|method|OptionalRenderer ()
specifier|public
name|OptionalRenderer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|tableOptFieldBackground
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IncompleteEntryRenderer
specifier|public
class|class
name|IncompleteEntryRenderer
extends|extends
name|DefaultTableCellRenderer
block|{
DECL|method|IncompleteEntryRenderer ()
specifier|public
name|IncompleteEntryRenderer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|tableIncompleteEntryBackground
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MaybeIncompleteEntryRenderer
specifier|public
class|class
name|MaybeIncompleteEntryRenderer
extends|extends
name|DefaultTableCellRenderer
block|{
DECL|method|MaybeIncompleteEntryRenderer ()
specifier|public
name|MaybeIncompleteEntryRenderer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|maybeIncompleteEntryBackground
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|GrayedOutRenderer
specifier|public
class|class
name|GrayedOutRenderer
extends|extends
name|DefaultTableCellRenderer
block|{
DECL|method|GrayedOutRenderer ()
specifier|public
name|GrayedOutRenderer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|grayedOutBackground
argument_list|)
expr_stmt|;
name|setForeground
argument_list|(
name|GUIGlobals
operator|.
name|grayedOutText
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|VeryGrayedOutRenderer
specifier|public
class|class
name|VeryGrayedOutRenderer
extends|extends
name|DefaultTableCellRenderer
block|{
DECL|method|VeryGrayedOutRenderer ()
specifier|public
name|VeryGrayedOutRenderer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|veryGrayedOutBackground
argument_list|)
expr_stmt|;
name|setForeground
argument_list|(
name|GUIGlobals
operator|.
name|veryGrayedOutText
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|scrollToCenter ( int rowIndex, int vColIndex)
specifier|public
name|void
name|scrollToCenter
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|vColIndex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|this
operator|.
name|getParent
argument_list|()
operator|instanceof
name|JViewport
operator|)
condition|)
block|{
return|return;
block|}
name|JViewport
name|viewport
init|=
operator|(
name|JViewport
operator|)
name|this
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// This rectangle is relative to the table where the
comment|// northwest corner of cell (0,0) is always (0,0).
name|Rectangle
name|rect
init|=
name|this
operator|.
name|getCellRect
argument_list|(
name|rowIndex
argument_list|,
name|vColIndex
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// The location of the view relative to the table
name|Rectangle
name|viewRect
init|=
name|viewport
operator|.
name|getViewRect
argument_list|()
decl_stmt|;
comment|// Translate the cell location so that it is relative
comment|// to the view, assuming the northwest corner of the
comment|// view is (0,0).
name|rect
operator|.
name|setLocation
argument_list|(
name|rect
operator|.
name|x
operator|-
name|viewRect
operator|.
name|x
argument_list|,
name|rect
operator|.
name|y
operator|-
name|viewRect
operator|.
name|y
argument_list|)
expr_stmt|;
comment|// Calculate location of rect if it were at the center of view
name|int
name|centerX
init|=
operator|(
name|viewRect
operator|.
name|width
operator|-
name|rect
operator|.
name|width
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|centerY
init|=
operator|(
name|viewRect
operator|.
name|height
operator|-
name|rect
operator|.
name|height
operator|)
operator|/
literal|2
decl_stmt|;
comment|// Fake the location of the cell so that scrollRectToVisible
comment|// will move the cell to the center
if|if
condition|(
name|rect
operator|.
name|x
operator|<
name|centerX
condition|)
block|{
name|centerX
operator|=
operator|-
name|centerX
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|y
operator|<
name|centerY
condition|)
block|{
name|centerY
operator|=
operator|-
name|centerY
expr_stmt|;
block|}
name|rect
operator|.
name|translate
argument_list|(
name|centerX
argument_list|,
name|centerY
argument_list|)
expr_stmt|;
comment|// Scroll the area into view.
name|viewport
operator|.
name|scrollRectToVisible
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|revalidate
argument_list|()
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
block|}
comment|/**    * updateFont    */
DECL|method|updateFont ()
specifier|public
name|void
name|updateFont
parameter_list|()
block|{
name|setFont
argument_list|(
name|GUIGlobals
operator|.
name|CURRENTFONT
argument_list|)
expr_stmt|;
name|setRowHeight
argument_list|(
literal|4
operator|+
name|GUIGlobals
operator|.
name|CURRENTFONT
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

