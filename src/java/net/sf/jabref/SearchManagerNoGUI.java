begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Integer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Math
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  * @author Silberer, Zirn  */
end_comment

begin_class
DECL|class|SearchManagerNoGUI
specifier|public
class|class
name|SearchManagerNoGUI
block|{
DECL|field|searchTerm
specifier|private
name|String
name|searchTerm
decl_stmt|;
DECL|field|database
DECL|field|base
specifier|private
name|BibtexDatabase
name|database
decl_stmt|,
name|base
init|=
literal|null
decl_stmt|;
DECL|field|searchOptions
name|Hashtable
name|searchOptions
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
DECL|method|SearchManagerNoGUI (String term, BibtexDatabase dataBase)
specifier|public
name|SearchManagerNoGUI
parameter_list|(
name|String
name|term
parameter_list|,
name|BibtexDatabase
name|dataBase
parameter_list|)
block|{
name|searchTerm
operator|=
name|term
expr_stmt|;
name|database
operator|=
name|dataBase
expr_stmt|;
block|}
DECL|method|getDBfromMatches ()
specifier|public
name|BibtexDatabase
name|getDBfromMatches
parameter_list|()
block|{
name|int
name|hits
init|=
literal|0
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"search term: "
operator|+
name|searchTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|specifiedYears
argument_list|()
condition|)
block|{
name|searchTerm
operator|=
name|fieldYear
argument_list|()
expr_stmt|;
block|}
name|searchOptions
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
name|searchTerm
argument_list|)
expr_stmt|;
name|SearchRuleSet
name|searchRules
init|=
operator|new
name|SearchRuleSet
argument_list|()
decl_stmt|;
name|SearchRule
name|rule1
decl_stmt|;
name|rule1
operator|=
operator|new
name|BasicSearch
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"caseSensitiveSearch"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"regExpSearch"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|rule1
operator|=
operator|new
name|SearchExpression
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|,
name|searchOptions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{          }
name|searchRules
operator|.
name|addRule
argument_list|(
name|rule1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|searchRules
operator|.
name|validateSearchStrings
argument_list|(
name|searchOptions
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search failed: illegal search expression"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|base
return|;
block|}
name|Collection
name|entries
init|=
name|database
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|Vector
name|matchEntries
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|hit
init|=
name|searchRules
operator|.
name|applyRule
argument_list|(
name|searchOptions
argument_list|,
name|entry
argument_list|)
operator|>
literal|0
decl_stmt|;
name|entry
operator|.
name|setSearchHit
argument_list|(
name|hit
argument_list|)
expr_stmt|;
if|if
condition|(
name|hit
condition|)
block|{
name|hits
operator|++
expr_stmt|;
name|matchEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|matchEntries
operator|!=
literal|null
condition|)
block|{
name|base
operator|=
name|ImportFormatReader
operator|.
name|createDatabase
argument_list|(
name|matchEntries
argument_list|)
expr_stmt|;
block|}
return|return
name|base
return|;
block|}
comment|//end getDBfromMatches()
DECL|method|specifiedYears ()
specifier|private
name|boolean
name|specifiedYears
parameter_list|()
block|{
return|return
name|searchTerm
operator|.
name|matches
argument_list|(
literal|"year=[0-9]{4}-[0-9]{4}"
argument_list|)
return|;
block|}
DECL|method|fieldYear ()
specifier|private
name|String
name|fieldYear
parameter_list|()
block|{
name|String
name|regPt1
init|=
literal|""
decl_stmt|,
name|regPt2
init|=
literal|""
decl_stmt|;
name|String
name|completeReg
init|=
literal|null
decl_stmt|;
name|boolean
name|reg1Set
init|=
literal|false
decl_stmt|,
name|reg2Set
init|=
literal|false
decl_stmt|;
comment|//if beginning of timeframe is BEFORE and end of timeframe is AFTER turn of the century
name|String
index|[]
name|searchTermsToPr
init|=
name|searchTerm
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|String
name|field
init|=
name|searchTermsToPr
index|[
literal|0
index|]
decl_stmt|;
name|String
index|[]
name|years
init|=
name|searchTermsToPr
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
name|int
name|year1
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|years
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|year2
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|years
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|year1
operator|<
literal|2000
operator|&&
name|year2
operator|>=
literal|2000
condition|)
block|{
comment|//for 199.
name|regPt1
operator|=
literal|"199+["
operator|+
name|years
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
operator|+
literal|"-9]"
expr_stmt|;
name|reg1Set
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|year1
operator|<
literal|2000
condition|)
block|{
name|regPt1
operator|=
literal|"199+["
operator|+
name|years
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
operator|+
literal|"-"
operator|+
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|years
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
literal|9
argument_list|)
operator|+
literal|"]"
expr_stmt|;
name|reg1Set
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|years
index|[
literal|1
index|]
argument_list|)
operator|>=
literal|2000
operator|&&
name|year1
operator|<
literal|2000
condition|)
block|{
comment|//for 200.
name|regPt2
operator|=
literal|"200+[0-"
operator|+
name|years
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
operator|+
literal|"]"
expr_stmt|;
name|reg2Set
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|year2
operator|>=
literal|2000
condition|)
block|{
name|regPt2
operator|=
literal|"200+["
operator|+
name|years
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
operator|+
literal|"-"
operator|+
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|years
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
literal|9
argument_list|)
operator|+
literal|"]"
expr_stmt|;
name|reg2Set
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reg1Set
operator|&&
name|reg2Set
condition|)
block|{
name|completeReg
operator|=
name|field
operator|+
literal|"="
operator|+
name|regPt1
operator|+
literal|"|"
operator|+
name|regPt2
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|reg1Set
condition|)
block|{
name|completeReg
operator|=
name|field
operator|+
literal|"="
operator|+
name|regPt1
expr_stmt|;
block|}
if|if
condition|(
name|reg2Set
condition|)
block|{
name|completeReg
operator|=
name|field
operator|+
literal|"="
operator|+
name|regPt2
expr_stmt|;
block|}
block|}
return|return
name|completeReg
return|;
block|}
block|}
end_class

end_unit

