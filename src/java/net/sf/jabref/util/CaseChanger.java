begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
package|;
end_package

begin_comment
comment|/* Mp3dings - manage mp3 meta-information  * Copyright (C) 2003 Moritz Ringler  * $Id$  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_comment
comment|/** Class used to manage case changing  * @author Moritz Ringler  * @version $Revision$ ($Date$)  */
end_comment

begin_class
DECL|class|CaseChanger
specifier|public
class|class
name|CaseChanger
block|{
comment|/** Lowercase */
DECL|field|LOWER
specifier|public
specifier|final
specifier|static
name|int
name|LOWER
init|=
literal|0
decl_stmt|;
comment|/** Uppercase */
DECL|field|UPPER
specifier|public
specifier|final
specifier|static
name|int
name|UPPER
init|=
literal|1
decl_stmt|;
comment|/** First letter of string uppercase */
DECL|field|UPPER_FIRST
specifier|public
specifier|final
specifier|static
name|int
name|UPPER_FIRST
init|=
literal|2
decl_stmt|;
comment|/** First letter of each word uppercase */
DECL|field|UPPER_EACH_FIRST
specifier|public
specifier|final
specifier|static
name|int
name|UPPER_EACH_FIRST
init|=
literal|3
decl_stmt|;
DECL|field|UF_MATCHER
specifier|private
specifier|final
specifier|static
name|Matcher
name|UF_MATCHER
init|=
comment|//Pattern.compile("(?i)\\b\\w").matcher("");
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\b\\w"
argument_list|)
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
comment|/* you can add more modes here */
DECL|field|numModes
specifier|private
specifier|final
specifier|static
name|int
name|numModes
init|=
literal|4
decl_stmt|;
DECL|field|modeNames
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|modeNames
init|=
block|{
literal|"lower"
block|,
literal|"UPPER"
block|,
literal|"Upper first"
block|,
literal|"Upper Each First"
block|}
decl_stmt|;
DECL|method|CaseChanger ()
specifier|public
name|CaseChanger
parameter_list|()
block|{     }
comment|/** Gets the name of a case changing mode      * @param mode by default one of LOWER, UPPER, UPPER_FIRST or      * UPPER_EACH_FIRST      */
DECL|method|getModeName (int mode)
specifier|public
name|String
name|getModeName
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
return|return
name|modeNames
index|[
name|mode
index|]
return|;
block|}
comment|/** Gets the names of all available case changing modes */
DECL|method|getModeNames ()
specifier|public
name|String
index|[]
name|getModeNames
parameter_list|()
block|{
return|return
name|modeNames
return|;
block|}
comment|/** Gets the number of available case changing modes */
DECL|method|getNumModes ()
specifier|public
name|int
name|getNumModes
parameter_list|()
block|{
return|return
name|numModes
return|;
block|}
comment|/** Changes the case of the specified strings.      *  wrapper for {@link #changeCase(String input, int mode)}      * @see  #changeCase(String input, int mode)      */
DECL|method|changeCase (String[] input,int mode)
specifier|public
name|String
index|[]
name|changeCase
parameter_list|(
name|String
index|[]
name|input
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|int
name|n
init|=
name|input
operator|.
name|length
decl_stmt|;
name|String
index|[]
name|output
init|=
operator|new
name|String
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|output
index|[
name|i
index|]
operator|=
name|changeCase
argument_list|(
name|input
index|[
name|i
index|]
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
comment|/** Changes the case of the specified string      * @param input String to change      * @param mode by default one of LOWER, UPPER, UPPER_FIRST or      * UPPER_EACH_FIRST      * @return casechanged string      */
DECL|method|changeCase (String input, int mode)
specifier|public
name|String
name|changeCase
parameter_list|(
name|String
name|input
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|UPPER
case|:
return|return
name|input
operator|.
name|toUpperCase
argument_list|()
return|;
case|case
name|LOWER
case|:
return|return
name|input
operator|.
name|toLowerCase
argument_list|()
return|;
case|case
name|UPPER_FIRST
case|:
name|String
name|s
init|=
name|input
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|UF_MATCHER
operator|.
name|reset
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|UF_MATCHER
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|UF_MATCHER
operator|.
name|replaceFirst
argument_list|(
name|UF_MATCHER
operator|.
name|group
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|input
return|;
block|}
case|case
name|UPPER_EACH_FIRST
case|:
name|s
operator|=
name|input
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|UF_MATCHER
operator|.
name|reset
argument_list|(
name|s
argument_list|)
expr_stmt|;
while|while
condition|(
name|UF_MATCHER
operator|.
name|find
argument_list|()
condition|)
block|{
name|UF_MATCHER
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
name|UF_MATCHER
operator|.
name|group
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|found
condition|)
block|{
name|UF_MATCHER
operator|.
name|appendTail
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|input
return|;
block|}
default|default:
return|return
name|input
return|;
block|}
block|}
block|}
end_class

end_unit

