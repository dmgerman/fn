begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 JabRef project  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Preferences dialog. Contains a TabbedPane, and tabs will be defined  * in separate classes. Tabs MUST implement the PrefsTab interface,  * since this dialog will call the storeSettings() method of all tabs  * when the user presses ok.  *  * With this design, it should be very easy to add new tabs later.  *  */
end_comment

begin_class
DECL|class|PrefsDialog2
specifier|public
class|class
name|PrefsDialog2
extends|extends
name|JDialog
block|{
DECL|field|_prefs
specifier|private
name|JabRefPreferences
name|_prefs
decl_stmt|;
DECL|field|upper
name|JPanel
name|upper
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|,
DECL|field|lower
name|lower
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|gbl
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
DECL|field|tabbed
name|JTabbedPane
name|tabbed
init|=
operator|new
name|JTabbedPane
argument_list|()
decl_stmt|;
DECL|field|frame
name|JabRefFrame
name|frame
decl_stmt|;
DECL|method|PrefsDialog2 (JabRefFrame parent, JabRefPreferences prefs)
specifier|public
name|PrefsDialog2
parameter_list|(
name|JabRefFrame
name|parent
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"JabRef preferences"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_prefs
operator|=
name|prefs
expr_stmt|;
name|frame
operator|=
name|parent
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|tabbed
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|tabbed
argument_list|)
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridheight
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lower
argument_list|,
name|con
argument_list|)
expr_stmt|;
comment|//lower.setBackground(GUIGlobals.lightGray);
comment|//getContentPane().setBackground(GUIGlobals.lightGray);
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|lower
argument_list|)
expr_stmt|;
comment|// ----------------------------------------------------------------
comment|// Add tabs to tabbed here. Remember, tabs must implement PrefsTab.
comment|// ----------------------------------------------------------------
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"General"
argument_list|)
argument_list|,
operator|new
name|GeneralTab
argument_list|(
name|frame
argument_list|,
name|_prefs
argument_list|)
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Appearance"
argument_list|)
argument_list|,
operator|new
name|TablePrefsTab
argument_list|(
name|_prefs
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
comment|//tabbed.addTab(Globals.lang("External programs"), new ExternalProgramsTab(_prefs));
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Key pattern"
argument_list|)
argument_list|,
operator|new
name|TabLabelPattern
argument_list|(
name|_prefs
argument_list|,
name|parent
operator|.
name|helpDiag
argument_list|)
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Entry preview"
argument_list|)
argument_list|,
operator|new
name|PreviewPrefsTab
argument_list|(
name|_prefs
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|ON_MAC
condition|)
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Advanced"
argument_list|)
argument_list|,
operator|new
name|AdvancedTab
argument_list|(
name|_prefs
argument_list|,
name|parent
operator|.
name|helpDiag
argument_list|)
argument_list|)
expr_stmt|;
name|JButton
name|ok
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Ok"
argument_list|)
argument_list|)
decl_stmt|,
name|cancel
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
name|ok
operator|.
name|addActionListener
argument_list|(
operator|new
name|OkAction
argument_list|()
argument_list|)
expr_stmt|;
name|CancelAction
name|cancelAction
init|=
operator|new
name|CancelAction
argument_list|()
decl_stmt|;
name|cancel
operator|.
name|addActionListener
argument_list|(
name|cancelAction
argument_list|)
expr_stmt|;
name|lower
operator|.
name|add
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|lower
operator|.
name|add
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
comment|// Key bindings:
name|ActionMap
name|am
init|=
name|tabbed
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|InputMap
name|im
init|=
name|tabbed
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
decl_stmt|;
name|im
operator|.
name|put
argument_list|(
name|frame
operator|.
name|prefs
argument_list|()
operator|.
name|getKey
argument_list|(
literal|"Close dialog"
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
name|cancelAction
argument_list|)
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
comment|//setSize(440, 500);
block|}
DECL|class|OkAction
class|class
name|OkAction
extends|extends
name|AbstractAction
block|{
DECL|method|OkAction ()
specifier|public
name|OkAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Ok"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|AbstractWorker
name|worker
init|=
operator|new
name|AbstractWorker
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// First check that all tabs are ready to close:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbed
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|PrefsTab
operator|)
name|tabbed
operator|.
name|getComponentAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|readyToClose
argument_list|()
condition|)
return|return;
comment|// If not, break off.
block|}
comment|// Then store settings and close:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbed
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|PrefsTab
operator|)
name|tabbed
operator|.
name|getComponentAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|storeSettings
argument_list|()
expr_stmt|;
block|}
comment|//try { Thread.sleep(3000); } catch (InterruptedException ex) {}
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
name|dispose
argument_list|()
expr_stmt|;
name|frame
operator|.
name|setupAllTables
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Preferences recorded."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|worker
operator|.
name|getWorker
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
name|worker
operator|.
name|getCallBack
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CancelAction
class|class
name|CancelAction
extends|extends
name|AbstractAction
block|{
DECL|method|CancelAction ()
specifier|public
name|CancelAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Cancel"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
comment|// Just close dialog without recording changes.
comment|/*(new Thread() {               public void run() {                } 	      }).start();*/
block|}
block|}
block|}
end_class

end_unit

