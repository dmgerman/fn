begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* (C) 2003 Nizar N. Batada, Morten O. Alver   All programs in this directory and  subdirectories are published under the GNU General Public License as  described below.   This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or (at  your option) any later version.   This program is distributed in the hope that it will be useful, but  WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  General Public License for more details.   You should have received a copy of the GNU General Public License  along with this program; if not, write to the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA   Further information about the GNU GPL is available at:  http://www.gnu.org/copyleft/gpl.ja.html   */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FileDialog
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Toolkit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFileChooser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|collab
operator|.
name|FileUpdateMonitor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|ImportFormatReader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|journals
operator|.
name|JournalAbbreviations
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|ErrorConsole
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|TBuildInfo
import|;
end_import

begin_class
DECL|class|Globals
specifier|public
class|class
name|Globals
block|{
DECL|field|SHORTCUT_MASK
specifier|public
specifier|static
name|int
name|SHORTCUT_MASK
decl_stmt|,
comment|// =
comment|// Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
DECL|field|FUTURE_YEAR
name|FUTURE_YEAR
init|=
literal|2050
decl_stmt|,
comment|// Needs to give a year definitely in the future.
comment|// Used for guessing the
comment|// year field when parsing textual data. :-)
DECL|field|STANDARD_EXPORT_COUNT
name|STANDARD_EXPORT_COUNT
init|=
literal|5
decl_stmt|,
comment|// The number of standard export formats.
DECL|field|METADATA_LINE_LENGTH
name|METADATA_LINE_LENGTH
init|=
literal|70
decl_stmt|;
comment|// The line length used to wrap metadata.
DECL|field|resourcePrefix
DECL|field|menuResourcePrefix
specifier|private
specifier|static
name|String
name|resourcePrefix
init|=
literal|"resource/JabRef"
decl_stmt|,
name|menuResourcePrefix
init|=
literal|"resource/Menu"
decl_stmt|,
DECL|field|integrityResourcePrefix
name|integrityResourcePrefix
init|=
literal|"resource/IntegrityMessage"
decl_stmt|;
DECL|field|buildInfos
specifier|private
specifier|static
specifier|final
name|String
name|buildInfos
init|=
literal|"/resource/build.properties"
decl_stmt|;
comment|/* 	 * some extra field definitions 	 */
DECL|field|additionalFields
specifier|public
specifier|static
specifier|final
name|String
name|additionalFields
init|=
literal|"/resource/fields/fields.xml"
decl_stmt|;
DECL|field|messages
DECL|field|menuTitles
DECL|field|intMessages
specifier|public
specifier|static
name|ResourceBundle
name|messages
decl_stmt|,
name|menuTitles
decl_stmt|,
name|intMessages
decl_stmt|;
DECL|field|fileUpdateMonitor
specifier|public
specifier|static
name|FileUpdateMonitor
name|fileUpdateMonitor
init|=
operator|new
name|FileUpdateMonitor
argument_list|()
decl_stmt|;
DECL|field|importFormatReader
specifier|public
specifier|static
name|ImportFormatReader
name|importFormatReader
init|=
operator|new
name|ImportFormatReader
argument_list|()
decl_stmt|;
DECL|field|errorConsole
specifier|public
specifier|static
name|ErrorConsole
name|errorConsole
decl_stmt|;
DECL|field|VERSION
DECL|field|BUILD
DECL|field|BUILD_DATE
specifier|public
specifier|static
name|String
name|VERSION
decl_stmt|,
name|BUILD
decl_stmt|,
name|BUILD_DATE
decl_stmt|;
static|static
block|{
name|TBuildInfo
name|bi
init|=
operator|new
name|TBuildInfo
argument_list|(
name|buildInfos
argument_list|)
decl_stmt|;
name|VERSION
operator|=
name|bi
operator|.
name|getBUILD_VERSION
argument_list|()
expr_stmt|;
name|BUILD
operator|=
name|bi
operator|.
name|getBUILD_NUMBER
argument_list|()
expr_stmt|;
name|BUILD_DATE
operator|=
name|bi
operator|.
name|getBUILD_DATE
argument_list|()
expr_stmt|;
comment|// TODO: Error console initialization here. When should it be used?
name|errorConsole
operator|=
name|ErrorConsole
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
DECL|field|locale
specifier|public
specifier|static
name|Locale
name|locale
decl_stmt|;
DECL|field|FILETYPE_PREFS_EXT
DECL|field|SELECTOR_META_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|FILETYPE_PREFS_EXT
init|=
literal|"_dir"
decl_stmt|,
name|SELECTOR_META_PREFIX
init|=
literal|"selector_"
decl_stmt|,
DECL|field|LAYOUT_PREFIX
DECL|field|MAC
name|LAYOUT_PREFIX
init|=
literal|"/resource/layout/"
decl_stmt|,
name|MAC
init|=
literal|"Mac OS X"
decl_stmt|,
DECL|field|DOI_LOOKUP_PREFIX
DECL|field|NONE
name|DOI_LOOKUP_PREFIX
init|=
literal|"http://dx.doi.org/"
decl_stmt|,
name|NONE
init|=
literal|"_non__"
decl_stmt|,
DECL|field|FORMATTER_PACKAGE
name|FORMATTER_PACKAGE
init|=
literal|"net.sf.jabref.export.layout.format."
decl_stmt|;
DECL|field|duplicateThreshold
specifier|public
specifier|static
name|float
name|duplicateThreshold
init|=
literal|0.75f
decl_stmt|;
DECL|field|consoleHandler
specifier|private
specifier|static
name|Handler
name|consoleHandler
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|ConsoleHandler
argument_list|()
decl_stmt|;
DECL|field|ENCODINGS
DECL|field|ALL_ENCODINGS
specifier|public
specifier|static
name|String
index|[]
name|ENCODINGS
decl_stmt|,
name|ALL_ENCODINGS
init|=
comment|// (String[])
comment|// Charset.availableCharsets().keySet().toArray(new
comment|// String[]{});
operator|new
name|String
index|[]
block|{
literal|"ISO8859_1"
block|,
literal|"UTF8"
block|,
literal|"UTF-16"
block|,
literal|"ASCII"
block|,
literal|"Cp1250"
block|,
literal|"Cp1251"
block|,
literal|"Cp1252"
block|,
literal|"Cp1253"
block|,
literal|"Cp1254"
block|,
literal|"Cp1257"
block|,
literal|"SJIS"
block|,
literal|"EUC_JP"
block|,
comment|// Added Japanese encodings.
literal|"Big5"
block|,
literal|"Big5_HKSCS"
block|,
literal|"GBK"
block|,
literal|"ISO8859_2"
block|,
literal|"ISO8859_3"
block|,
literal|"ISO8859_4"
block|,
literal|"ISO8859_5"
block|,
literal|"ISO8859_6"
block|,
literal|"ISO8859_7"
block|,
literal|"ISO8859_8"
block|,
literal|"ISO8859_9"
block|,
literal|"ISO8859_13"
block|,
literal|"ISO8859_15"
block|}
decl_stmt|;
DECL|field|ENCODING_NAMES_LOOKUP
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ENCODING_NAMES_LOOKUP
decl_stmt|;
comment|// String array that maps from month number to month string label:
DECL|field|MONTHS
specifier|public
specifier|static
name|String
index|[]
name|MONTHS
init|=
operator|new
name|String
index|[]
block|{
literal|"jan"
block|,
literal|"feb"
block|,
literal|"mar"
block|,
literal|"apr"
block|,
literal|"may"
block|,
literal|"jun"
block|,
literal|"jul"
block|,
literal|"aug"
block|,
literal|"sep"
block|,
literal|"oct"
block|,
literal|"nov"
block|,
literal|"dec"
block|}
decl_stmt|;
comment|// Map that maps from month string labels to
DECL|field|MONTH_STRINGS
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|MONTH_STRINGS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"jan"
argument_list|,
literal|"January"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"feb"
argument_list|,
literal|"February"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"mar"
argument_list|,
literal|"March"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"apr"
argument_list|,
literal|"April"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"may"
argument_list|,
literal|"May"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"jun"
argument_list|,
literal|"June"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"jul"
argument_list|,
literal|"July"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"aug"
argument_list|,
literal|"August"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"sep"
argument_list|,
literal|"September"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"oct"
argument_list|,
literal|"October"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"nov"
argument_list|,
literal|"November"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"dec"
argument_list|,
literal|"December"
argument_list|)
expr_stmt|;
comment|// Build list of encodings, by filtering out all that are not supported
comment|// on this system:
name|List
argument_list|<
name|String
argument_list|>
name|encodings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ALL_ENCODINGS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Charset
operator|.
name|isSupported
argument_list|(
name|ALL_ENCODINGS
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|encodings
operator|.
name|add
argument_list|(
name|ALL_ENCODINGS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|ENCODINGS
operator|=
name|encodings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Build a map for translating Java encoding names into common encoding names:
name|ENCODING_NAMES_LOOKUP
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1250"
argument_list|,
literal|"windows-1250"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1251"
argument_list|,
literal|"windows-1251"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1252"
argument_list|,
literal|"windows-1252"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1253"
argument_list|,
literal|"windows-1253"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1254"
argument_list|,
literal|"windows-1254"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1257"
argument_list|,
literal|"windows-1257"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_1"
argument_list|,
literal|"ISO-8859-1"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_2"
argument_list|,
literal|"ISO-8859-2"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_3"
argument_list|,
literal|"ISO-8859-3"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_4"
argument_list|,
literal|"ISO-8859-4"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_5"
argument_list|,
literal|"ISO-8859-5"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_6"
argument_list|,
literal|"ISO-8859-6"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_7"
argument_list|,
literal|"ISO-8859-7"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_8"
argument_list|,
literal|"ISO-8859-8"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_9"
argument_list|,
literal|"ISO-8859-9"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_13"
argument_list|,
literal|"ISO-8859-13"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_15"
argument_list|,
literal|"ISO-8859-15"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"KOI8_R"
argument_list|,
literal|"KOI8-R"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"UTF8"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"UTF-16"
argument_list|,
literal|"UTF-16"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"SJIS"
argument_list|,
literal|"Shift_JIS"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"GBK"
argument_list|,
literal|"GBK"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Big5_HKSCS"
argument_list|,
literal|"Big5-HKSCS"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Big5"
argument_list|,
literal|"Big5"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"EUC_JP"
argument_list|,
literal|"EUC-JP"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ASCII"
argument_list|,
literal|"US-ASCII"
argument_list|)
expr_stmt|;
block|}
DECL|field|focusListener
specifier|public
specifier|static
name|GlobalFocusListener
name|focusListener
init|=
operator|new
name|GlobalFocusListener
argument_list|()
decl_stmt|;
DECL|field|prefs
specifier|public
specifier|static
name|JabRefPreferences
name|prefs
init|=
literal|null
decl_stmt|;
DECL|field|helpDiag
specifier|public
specifier|static
name|HelpDialog
name|helpDiag
init|=
literal|null
decl_stmt|;
DECL|field|osName
specifier|public
specifier|static
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|,
literal|"def"
argument_list|)
decl_stmt|;
DECL|field|ON_MAC
DECL|field|ON_WIN
specifier|public
specifier|static
name|boolean
name|ON_MAC
init|=
operator|(
name|osName
operator|.
name|equals
argument_list|(
name|MAC
argument_list|)
operator|)
decl_stmt|,
name|ON_WIN
init|=
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
DECL|field|SKIP_WORDS
specifier|public
specifier|static
name|String
index|[]
name|SKIP_WORDS
init|=
block|{
literal|"a"
block|,
literal|"an"
block|,
literal|"the"
block|,
literal|"for"
block|,
literal|"on"
block|}
decl_stmt|;
DECL|field|sidePaneManager
specifier|public
specifier|static
name|SidePaneManager
name|sidePaneManager
decl_stmt|;
DECL|field|NEWLINE
specifier|public
specifier|static
specifier|final
name|String
name|NEWLINE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|NEWLINE_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|NEWLINE_LENGTH
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// Instantiate logger:
comment|// TODO: Doesn't work in Java 5:
comment|// private static Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
DECL|field|logger
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|global
decl_stmt|;
comment|/** 	 * true if we have unix newlines 	 */
DECL|field|UNIX_NEWLINE
specifier|public
specifier|static
specifier|final
name|boolean
name|UNIX_NEWLINE
init|=
name|NEWLINE
operator|.
name|equals
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
comment|/** 	 * 	"Fieldname" to indicate that a field should be treated as a bibtex  	 * string. Used when writing database to file. 	 */
DECL|field|BIBTEX_STRING
specifier|public
specifier|static
specifier|final
name|String
name|BIBTEX_STRING
init|=
literal|"__string"
decl_stmt|;
DECL|method|logger (String s)
specifier|public
specifier|static
name|void
name|logger
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|turnOffLogging ()
specifier|public
specifier|static
name|void
name|turnOffLogging
parameter_list|()
block|{
comment|// only log exceptions
name|logger
operator|.
name|setLevel
argument_list|(
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
operator|.
name|SEVERE
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Should be only called once 	 */
DECL|method|turnOnConsoleLogging ()
specifier|public
specifier|static
name|void
name|turnOnConsoleLogging
parameter_list|()
block|{
name|logger
operator|.
name|addHandler
argument_list|(
name|consoleHandler
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Should be only called once 	 */
DECL|method|turnOnFileLogging ()
specifier|public
specifier|static
name|void
name|turnOnFileLogging
parameter_list|()
block|{
name|logger
operator|.
name|setLevel
argument_list|(
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
name|handler
decl_stmt|;
name|handler
operator|=
operator|new
name|ConsoleHandler
argument_list|()
expr_stmt|;
name|logger
operator|.
name|addHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setFilter
argument_list|(
operator|new
name|Filter
argument_list|()
block|{
comment|// select what gets logged
specifier|public
name|boolean
name|isLoggable
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setLanguage (String language, String country)
specifier|public
specifier|static
name|void
name|setLanguage
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|country
parameter_list|)
block|{
name|locale
operator|=
operator|new
name|Locale
argument_list|(
name|language
argument_list|,
name|country
argument_list|)
expr_stmt|;
name|messages
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|resourcePrefix
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|menuTitles
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|menuResourcePrefix
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|intMessages
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|integrityResourcePrefix
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|Locale
operator|.
name|setDefault
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|javax
operator|.
name|swing
operator|.
name|JComponent
operator|.
name|setDefaultLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
DECL|field|journalAbbrev
specifier|public
specifier|static
name|JournalAbbreviations
name|journalAbbrev
decl_stmt|;
DECL|method|lang (String key, String[] params)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|,
name|String
index|[]
name|params
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Globals
operator|.
name|messages
operator|!=
literal|null
condition|)
name|translation
operator|=
name|Globals
operator|.
name|messages
operator|.
name|getString
argument_list|(
name|key
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
comment|//logger("Warning: could not get translation for \"" + key + "\"");
block|}
if|if
condition|(
name|translation
operator|==
literal|null
condition|)
name|translation
operator|=
name|key
expr_stmt|;
if|if
condition|(
operator|(
name|translation
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|translation
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
name|translation
operator|=
name|translation
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
literal|false
decl_stmt|;
name|char
name|c
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|translation
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|c
operator|=
name|translation
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'%'
condition|)
block|{
name|b
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<=
name|params
operator|.
name|length
condition|)
name|sb
operator|.
name|append
argument_list|(
name|params
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// append literally (for quoting) or insert special
comment|// symbol
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'c'
case|:
comment|// colon
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
comment|// equal
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// anything else, e.g. %
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|key
return|;
block|}
DECL|method|lang (String key)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|lang
argument_list|(
name|key
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
return|;
block|}
DECL|method|lang (String key, String s1)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
return|return
name|lang
argument_list|(
name|key
argument_list|,
operator|new
name|String
index|[]
block|{
name|s1
block|}
argument_list|)
return|;
block|}
DECL|method|lang (String key, String s1, String s2)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|lang
argument_list|(
name|key
argument_list|,
operator|new
name|String
index|[]
block|{
name|s1
block|,
name|s2
block|}
argument_list|)
return|;
block|}
DECL|method|lang (String key, String s1, String s2, String s3)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|,
name|String
name|s3
parameter_list|)
block|{
return|return
name|lang
argument_list|(
name|key
argument_list|,
operator|new
name|String
index|[]
block|{
name|s1
block|,
name|s2
block|,
name|s3
block|}
argument_list|)
return|;
block|}
DECL|method|menuTitle (String key)
specifier|public
specifier|static
name|String
name|menuTitle
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Globals
operator|.
name|messages
operator|!=
literal|null
condition|)
block|{
name|translation
operator|=
name|Globals
operator|.
name|menuTitles
operator|.
name|getString
argument_list|(
name|key
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
name|translation
operator|=
name|key
expr_stmt|;
comment|//System.err.println("Warning: could not get menu item translation for \""
comment|//+ key + "\"");
block|}
if|if
condition|(
operator|(
name|translation
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|translation
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
return|return
name|translation
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
DECL|method|getIntegrityMessage (String key)
specifier|public
specifier|static
name|String
name|getIntegrityMessage
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Globals
operator|.
name|intMessages
operator|!=
literal|null
condition|)
block|{
name|translation
operator|=
name|Globals
operator|.
name|intMessages
operator|.
name|getString
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
name|translation
operator|=
name|key
expr_stmt|;
comment|// System.err.println("Warning: could not get menu item translation
comment|// for \""
comment|// + key + "\"");
block|}
if|if
condition|(
operator|(
name|translation
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|translation
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
return|return
name|translation
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
comment|// ============================================================
comment|// Using the hashmap of entry types found in BibtexEntryType
comment|// ============================================================
DECL|method|getEntryType (String type)
specifier|public
specifier|static
name|BibtexEntryType
name|getEntryType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
comment|// decide which entryType object to return
name|Object
name|o
init|=
name|BibtexEntryType
operator|.
name|ALL_TYPES
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|BibtexEntryType
operator|)
name|o
return|;
block|}
else|else
block|{
return|return
name|BibtexEntryType
operator|.
name|OTHER
return|;
block|}
comment|/* 		 * if(type.equals("article")) return BibtexEntryType.ARTICLE; else 		 * if(type.equals("book")) return BibtexEntryType.BOOK; else 		 * if(type.equals("inproceedings")) return 		 * BibtexEntryType.INPROCEEDINGS; 		 */
block|}
comment|/** 	 * Will return the names of multiple files selected in the given directory 	 * and the given extensions. 	 *  	 * Will return an empty String array if no entry is found. 	 *  	 * @param owner 	 * @param directory 	 * @param extension 	 * @param updateWorkingdirectory 	 * @return an array of selected file paths, or an empty array if no selection is made. 	 */
DECL|method|getMultipleFiles (JFrame owner, File directory, String extension, boolean updateWorkingdirectory)
specifier|public
specifier|static
name|String
index|[]
name|getMultipleFiles
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|boolean
name|updateWorkingdirectory
parameter_list|)
block|{
name|OpenFileFilter
name|off
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|extension
operator|==
literal|null
condition|)
name|off
operator|=
operator|new
name|OpenFileFilter
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|extension
operator|.
name|equals
argument_list|(
name|NONE
argument_list|)
condition|)
name|off
operator|=
operator|new
name|OpenFileFilter
argument_list|(
name|extension
argument_list|)
expr_stmt|;
name|Object
name|files
init|=
name|getNewFileImpl
argument_list|(
name|owner
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
literal|null
argument_list|,
name|off
argument_list|,
name|JFileChooser
operator|.
name|OPEN_DIALOG
argument_list|,
name|updateWorkingdirectory
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|instanceof
name|String
index|[]
condition|)
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|files
return|;
block|}
comment|// Fix for:
comment|// http://sourceforge.net/tracker/index.php?func=detail&aid=1538769&group_id=92314&atid=600306
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|files
block|}
return|;
block|}
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
DECL|method|getNewFile (JFrame owner, File directory, String extension, int dialogType, boolean updateWorkingDirectory)
specifier|public
specifier|static
name|String
name|getNewFile
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|)
block|{
return|return
name|getNewFile
argument_list|(
name|owner
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
literal|null
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getNewFile (JFrame owner, File directory, String extension, int dialogType, boolean updateWorkingDirectory, JComponent accessory)
specifier|public
specifier|static
name|String
name|getNewFile
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|,
name|JComponent
name|accessory
parameter_list|)
block|{
return|return
name|getNewFile
argument_list|(
name|owner
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
literal|null
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
literal|false
argument_list|,
name|accessory
argument_list|)
return|;
block|}
DECL|method|getNewFile (JFrame owner, File directory, String extension, String description, int dialogType, boolean updateWorkingDirectory)
specifier|public
specifier|static
name|String
name|getNewFile
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|String
name|description
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|)
block|{
return|return
name|getNewFile
argument_list|(
name|owner
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
name|description
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getNewDir (JFrame owner, File directory, String extension, int dialogType, boolean updateWorkingDirectory)
specifier|public
specifier|static
name|String
name|getNewDir
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|)
block|{
return|return
name|getNewFile
argument_list|(
name|owner
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
literal|null
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getNewDir (JFrame owner, File directory, String extension, String description, int dialogType, boolean updateWorkingDirectory)
specifier|public
specifier|static
name|String
name|getNewDir
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|String
name|description
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|)
block|{
return|return
name|getNewFile
argument_list|(
name|owner
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
name|description
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getNewFile (JFrame owner, File directory, String extension, String description, int dialogType, boolean updateWorkingDirectory, boolean dirOnly, JComponent accessory)
specifier|private
specifier|static
name|String
name|getNewFile
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|String
name|description
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|,
name|boolean
name|dirOnly
parameter_list|,
name|JComponent
name|accessory
parameter_list|)
block|{
name|OpenFileFilter
name|off
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|extension
operator|==
literal|null
condition|)
name|off
operator|=
operator|new
name|OpenFileFilter
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|extension
operator|.
name|equals
argument_list|(
name|NONE
argument_list|)
condition|)
name|off
operator|=
operator|new
name|OpenFileFilter
argument_list|(
name|extension
argument_list|)
expr_stmt|;
return|return
operator|(
name|String
operator|)
name|getNewFileImpl
argument_list|(
name|owner
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
name|description
argument_list|,
name|off
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
name|dirOnly
argument_list|,
literal|false
argument_list|,
name|accessory
argument_list|)
return|;
block|}
DECL|method|getNewFileImpl (JFrame owner, File directory, String extension, String description, OpenFileFilter off, int dialogType, boolean updateWorkingDirectory, boolean dirOnly, boolean multipleSelection, JComponent accessory)
specifier|private
specifier|static
name|Object
name|getNewFileImpl
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|String
name|description
parameter_list|,
name|OpenFileFilter
name|off
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|,
name|boolean
name|dirOnly
parameter_list|,
name|boolean
name|multipleSelection
parameter_list|,
name|JComponent
name|accessory
parameter_list|)
block|{
comment|// Added the !dirOnly condition below as a workaround to the native file dialog
comment|// not supporting directory selection:
if|if
condition|(
operator|!
name|dirOnly
operator|&&
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useNativeFileDialogOnMac"
argument_list|)
condition|)
block|{
return|return
name|getNewFileForMac
argument_list|(
name|owner
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
name|dirOnly
argument_list|,
name|off
argument_list|)
return|;
block|}
name|JFileChooser
name|fc
decl_stmt|;
try|try
block|{
name|fc
operator|=
operator|new
name|JabRefFileChooser
argument_list|(
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
name|accessory
operator|!=
literal|null
condition|)
name|fc
operator|.
name|setAccessory
argument_list|(
name|accessory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InternalError
name|errl
parameter_list|)
block|{
comment|// This try/catch clause was added because a user reported an
comment|// InternalError getting thrown on WinNT, presumably because of a
comment|// bug in JGoodies Windows PLAF. This clause can be removed if the
comment|// bug is fixed, but for now we just resort to the native file
comment|// dialog, using the same method as is always used on Mac:
return|return
name|getNewFileForMac
argument_list|(
name|owner
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
name|dirOnly
argument_list|,
name|off
argument_list|)
return|;
block|}
if|if
condition|(
name|dirOnly
condition|)
block|{
name|fc
operator|.
name|setFileSelectionMode
argument_list|(
name|JFileChooser
operator|.
name|DIRECTORIES_ONLY
argument_list|)
expr_stmt|;
block|}
name|fc
operator|.
name|setMultiSelectionEnabled
argument_list|(
name|multipleSelection
argument_list|)
expr_stmt|;
name|fc
operator|.
name|addChoosableFileFilter
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setDialogType
argument_list|(
name|dialogType
argument_list|)
expr_stmt|;
name|int
name|dialogResult
decl_stmt|;
if|if
condition|(
name|dialogType
operator|==
name|JFileChooser
operator|.
name|OPEN_DIALOG
condition|)
block|{
name|dialogResult
operator|=
name|fc
operator|.
name|showOpenDialog
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dialogType
operator|==
name|JFileChooser
operator|.
name|SAVE_DIALOG
condition|)
block|{
name|dialogResult
operator|=
name|fc
operator|.
name|showSaveDialog
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dialogResult
operator|=
name|fc
operator|.
name|showDialog
argument_list|(
name|owner
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
comment|// the getSelectedFile method returns a valid fileselection
comment|// (if something is selected) indepentently from dialog return status
if|if
condition|(
name|dialogResult
operator|!=
name|JFileChooser
operator|.
name|APPROVE_OPTION
condition|)
return|return
literal|null
return|;
comment|// okay button
name|File
name|selectedFile
init|=
name|fc
operator|.
name|getSelectedFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedFile
operator|==
literal|null
condition|)
block|{
comment|// cancel
return|return
literal|null
return|;
block|}
comment|// If this is a save dialog, and the user has not chosen "All files" as
comment|// filter
comment|// we enforce the given extension. But only if extension is not null.
if|if
condition|(
operator|(
name|extension
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dialogType
operator|==
name|JFileChooser
operator|.
name|SAVE_DIALOG
operator|)
operator|&&
operator|(
name|fc
operator|.
name|getFileFilter
argument_list|()
operator|==
name|off
operator|)
operator|&&
operator|!
name|off
operator|.
name|accept
argument_list|(
name|selectedFile
argument_list|)
condition|)
block|{
comment|// add the first extension if there are multiple extensions
name|selectedFile
operator|=
operator|new
name|File
argument_list|(
name|selectedFile
operator|.
name|getPath
argument_list|()
operator|+
name|extension
operator|.
name|split
argument_list|(
literal|"[, ]+"
argument_list|,
literal|0
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateWorkingDirectory
condition|)
block|{
name|prefs
operator|.
name|put
argument_list|(
literal|"workingDirectory"
argument_list|,
name|selectedFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|multipleSelection
condition|)
return|return
name|selectedFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
else|else
block|{
name|File
index|[]
name|files
init|=
name|fc
operator|.
name|getSelectedFiles
argument_list|()
decl_stmt|;
name|String
index|[]
name|filenames
init|=
operator|new
name|String
index|[
name|files
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|filenames
index|[
name|i
index|]
operator|=
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
return|return
name|filenames
return|;
block|}
block|}
DECL|method|getNewFileForMac (JFrame owner, File directory, String extensions, int dialogType, boolean updateWorkingDirectory, boolean dirOnly, FilenameFilter filter)
specifier|private
specifier|static
name|String
name|getNewFileForMac
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extensions
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|,
name|boolean
name|dirOnly
parameter_list|,
name|FilenameFilter
name|filter
parameter_list|)
block|{
name|FileDialog
name|fc
init|=
operator|new
name|FileDialog
argument_list|(
name|owner
argument_list|)
decl_stmt|;
comment|// fc.setFilenameFilter(filter);
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
name|fc
operator|.
name|setDirectory
argument_list|(
name|directory
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dialogType
operator|==
name|JFileChooser
operator|.
name|OPEN_DIALOG
condition|)
block|{
name|fc
operator|.
name|setMode
argument_list|(
name|FileDialog
operator|.
name|LOAD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fc
operator|.
name|setMode
argument_list|(
name|FileDialog
operator|.
name|SAVE
argument_list|)
expr_stmt|;
block|}
name|fc
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// fc.show(); -> deprecated since 1.5
if|if
condition|(
name|fc
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
literal|"workingDirectory"
argument_list|,
name|fc
operator|.
name|getDirectory
argument_list|()
operator|+
name|fc
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fc
operator|.
name|getDirectory
argument_list|()
operator|+
name|fc
operator|.
name|getFile
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|field|SPECIAL_COMMAND_CHARS
specifier|public
specifier|static
name|String
name|SPECIAL_COMMAND_CHARS
init|=
literal|"\"`^~'c"
decl_stmt|;
DECL|field|HTML_CHARS
DECL|field|HTMLCHARS
specifier|public
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|HTML_CHARS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|,
name|HTMLCHARS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|,
DECL|field|XML_CHARS
DECL|field|ASCII2XML_CHARS
DECL|field|UNICODE_CHARS
name|XML_CHARS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|,
name|ASCII2XML_CHARS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|,
name|UNICODE_CHARS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|,
DECL|field|RTFCHARS
DECL|field|URL_CHARS
name|RTFCHARS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|,
name|URL_CHARS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// System.out.println(journalAbbrev.getAbbreviatedName("Journal of Fish
comment|// Biology", true));
comment|// System.out.println(journalAbbrev.getAbbreviatedName("Journal of Fish
comment|// Biology", false));
comment|// System.out.println(journalAbbrev.getFullName("Aquaculture Eng."));
comment|/* 		 * for (Iterator i=journalAbbrev.fullNameIterator(); i.hasNext();) { 		 * String s = (String)i.next(); 		 * System.out.println(journalAbbrev.getFullName(s)+" : 		 * "+journalAbbrev.getAbbreviatedName(s, true)); } 		 */
comment|// Start the thread that monitors file time stamps.
comment|// Util.pr("Starting FileUpdateMonitor thread. Globals line 293.");
name|fileUpdateMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|SHORTCUT_MASK
operator|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getMenuShortcutKeyMask
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{  		}
comment|// Special characters in URLs need to be replaced to ensure that the URL
comment|// opens properly on all platforms:
name|URL_CHARS
operator|.
name|put
argument_list|(
literal|"<"
argument_list|,
literal|"%3c"
argument_list|)
expr_stmt|;
name|URL_CHARS
operator|.
name|put
argument_list|(
literal|">"
argument_list|,
literal|"%3e"
argument_list|)
expr_stmt|;
name|URL_CHARS
operator|.
name|put
argument_list|(
literal|"("
argument_list|,
literal|"%28"
argument_list|)
expr_stmt|;
name|URL_CHARS
operator|.
name|put
argument_list|(
literal|")"
argument_list|,
literal|"%29"
argument_list|)
expr_stmt|;
name|URL_CHARS
operator|.
name|put
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
expr_stmt|;
name|URL_CHARS
operator|.
name|put
argument_list|(
literal|"&"
argument_list|,
literal|"%26"
argument_list|)
expr_stmt|;
name|URL_CHARS
operator|.
name|put
argument_list|(
literal|"$"
argument_list|,
literal|"%24"
argument_list|)
expr_stmt|;
comment|// HTMLCHARS.put("\"a", "&auml;");
comment|// HTMLCHARS.put("\"A", "&Auml;");
comment|// HTMLCHARS.put("\"e", "&euml;");
comment|// HTMLCHARS.put("\"E", "&Euml;");
comment|// HTMLCHARS.put("\"i", "&iuml;");
comment|// HTMLCHARS.put("\"I", "&Iuml;");
comment|// HTMLCHARS.put("\"o", "&ouml;");
comment|// HTMLCHARS.put("\"O", "&Ouml;");
comment|// HTMLCHARS.put("\"u", "&uuml;");
comment|// HTMLCHARS.put("\"U", "&Uuml;");
comment|// HTMLCHARS.put("`a", "&agrave;");
comment|// HTMLCHARS.put("`A", "&Agrave;");
comment|// HTMLCHARS.put("`e", "&egrave;");
comment|// HTMLCHARS.put("`E", "&Egrave;");
comment|// HTMLCHARS.put("`i", "&igrave;");
comment|// HTMLCHARS.put("`I", "&Igrave;");
comment|// HTMLCHARS.put("`o", "&ograve;");
comment|// HTMLCHARS.put("`O", "&Ograve;");
comment|// HTMLCHARS.put("`u", "&ugrave;");
comment|// HTMLCHARS.put("`U", "&Ugrave;");
comment|// HTMLCHARS.put("'e", "&eacute;");
comment|// HTMLCHARS.put("'E", "&Eacute;");
comment|// HTMLCHARS.put("'i", "&iacute;");
comment|// HTMLCHARS.put("'I", "&Iacute;");
comment|// HTMLCHARS.put("'o", "&oacute;");
comment|// HTMLCHARS.put("'O", "&Oacute;");
comment|// HTMLCHARS.put("'u", "&uacute;");
comment|// HTMLCHARS.put("'U", "&Uacute;");
comment|// HTMLCHARS.put("'a", "&aacute;");
comment|// HTMLCHARS.put("'A", "&Aacute;");
comment|// HTMLCHARS.put("^a", "&ocirc;");
comment|// HTMLCHARS.put("^A", "&Ocirc;");
comment|// HTMLCHARS.put("^o", "&ocirc;");
comment|// HTMLCHARS.put("^O", "&Ocirc;");
comment|// HTMLCHARS.put("^u", "&ucirc;");
comment|// HTMLCHARS.put("^U", "&Ucirc;");
comment|// HTMLCHARS.put("^e", "&ecirc;");
comment|// HTMLCHARS.put("^E", "&Ecirc;");
comment|// HTMLCHARS.put("^i", "&icirc;");
comment|// HTMLCHARS.put("^I", "&Icirc;");
comment|// HTMLCHARS.put("~o", "&otilde;");
comment|// HTMLCHARS.put("~O", "&Otilde;");
comment|// HTMLCHARS.put("~n", "&ntilde;");
comment|// HTMLCHARS.put("~N", "&Ntilde;");
comment|// HTMLCHARS.put("~a", "&atilde;");
comment|// HTMLCHARS.put("~A", "&Atilde;");
comment|// HTMLCHARS.put("cc", "&ccedil;");
comment|// HTMLCHARS.put("cC", "&Ccedil;");
comment|// Following character definitions contributed by Ervin Kolenovic:
comment|// HTML named entities from #192 - #255 (UNICODE Latin-1)
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`A"
argument_list|,
literal|"&Agrave;"
argument_list|)
expr_stmt|;
comment|// #192
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'A"
argument_list|,
literal|"&Aacute;"
argument_list|)
expr_stmt|;
comment|// #193
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^A"
argument_list|,
literal|"&Acirc;"
argument_list|)
expr_stmt|;
comment|// #194
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~A"
argument_list|,
literal|"&Atilde;"
argument_list|)
expr_stmt|;
comment|// #195
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"A"
argument_list|,
literal|"&Auml;"
argument_list|)
expr_stmt|;
comment|// #196
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"AA"
argument_list|,
literal|"&Aring;"
argument_list|)
expr_stmt|;
comment|// #197
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"AE"
argument_list|,
literal|"&AElig;"
argument_list|)
expr_stmt|;
comment|// #198
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cC"
argument_list|,
literal|"&Ccedil;"
argument_list|)
expr_stmt|;
comment|// #199
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`E"
argument_list|,
literal|"&Egrave;"
argument_list|)
expr_stmt|;
comment|// #200
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'E"
argument_list|,
literal|"&Eacute;"
argument_list|)
expr_stmt|;
comment|// #201
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^E"
argument_list|,
literal|"&Ecirc;"
argument_list|)
expr_stmt|;
comment|// #202
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"E"
argument_list|,
literal|"&Euml;"
argument_list|)
expr_stmt|;
comment|// #203
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`I"
argument_list|,
literal|"&Igrave;"
argument_list|)
expr_stmt|;
comment|// #204
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'I"
argument_list|,
literal|"&Iacute;"
argument_list|)
expr_stmt|;
comment|// #205
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^I"
argument_list|,
literal|"&Icirc;"
argument_list|)
expr_stmt|;
comment|// #206
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"I"
argument_list|,
literal|"&Iuml;"
argument_list|)
expr_stmt|;
comment|// #207
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"DH"
argument_list|,
literal|"&ETH;"
argument_list|)
expr_stmt|;
comment|// #208
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~N"
argument_list|,
literal|"&Ntilde;"
argument_list|)
expr_stmt|;
comment|// #209
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`O"
argument_list|,
literal|"&Ograve;"
argument_list|)
expr_stmt|;
comment|// #210
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'O"
argument_list|,
literal|"&Oacute;"
argument_list|)
expr_stmt|;
comment|// #211
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^O"
argument_list|,
literal|"&Ocirc;"
argument_list|)
expr_stmt|;
comment|// #212
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~O"
argument_list|,
literal|"&Otilde;"
argument_list|)
expr_stmt|;
comment|// #213
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"O"
argument_list|,
literal|"&Ouml;"
argument_list|)
expr_stmt|;
comment|// #214
comment|// According to ISO 8859-1 the "\times" symbol should be placed here
comment|// (#215).
comment|// Omitting this, because it is a mathematical symbol.
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"O"
argument_list|,
literal|"&Oslash;"
argument_list|)
expr_stmt|;
comment|// #216
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`U"
argument_list|,
literal|"&Ugrave;"
argument_list|)
expr_stmt|;
comment|// #217
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'U"
argument_list|,
literal|"&Uacute;"
argument_list|)
expr_stmt|;
comment|// #218
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^U"
argument_list|,
literal|"&Ucirc;"
argument_list|)
expr_stmt|;
comment|// #219
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"U"
argument_list|,
literal|"&Uuml;"
argument_list|)
expr_stmt|;
comment|// #220
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'Y"
argument_list|,
literal|"&Yacute;"
argument_list|)
expr_stmt|;
comment|// #221
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"TH"
argument_list|,
literal|"&THORN;"
argument_list|)
expr_stmt|;
comment|// #222
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ss"
argument_list|,
literal|"&szlig;"
argument_list|)
expr_stmt|;
comment|// #223
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`a"
argument_list|,
literal|"&agrave;"
argument_list|)
expr_stmt|;
comment|// #224
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'a"
argument_list|,
literal|"&aacute;"
argument_list|)
expr_stmt|;
comment|// #225
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^a"
argument_list|,
literal|"&acirc;"
argument_list|)
expr_stmt|;
comment|// #226
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~a"
argument_list|,
literal|"&atilde;"
argument_list|)
expr_stmt|;
comment|// #227
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"a"
argument_list|,
literal|"&auml;"
argument_list|)
expr_stmt|;
comment|// #228
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"aa"
argument_list|,
literal|"&aring;"
argument_list|)
expr_stmt|;
comment|// #229
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ae"
argument_list|,
literal|"&aelig;"
argument_list|)
expr_stmt|;
comment|// #230
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cc"
argument_list|,
literal|"&ccedil;"
argument_list|)
expr_stmt|;
comment|// #231
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`e"
argument_list|,
literal|"&egrave;"
argument_list|)
expr_stmt|;
comment|// #232
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'e"
argument_list|,
literal|"&eacute;"
argument_list|)
expr_stmt|;
comment|// #233
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^e"
argument_list|,
literal|"&ecirc;"
argument_list|)
expr_stmt|;
comment|// #234
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"e"
argument_list|,
literal|"&euml;"
argument_list|)
expr_stmt|;
comment|// #235
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`i"
argument_list|,
literal|"&igrave;"
argument_list|)
expr_stmt|;
comment|// #236
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'i"
argument_list|,
literal|"&iacute;"
argument_list|)
expr_stmt|;
comment|// #237
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^i"
argument_list|,
literal|"&icirc;"
argument_list|)
expr_stmt|;
comment|// #238
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"i"
argument_list|,
literal|"&iuml;"
argument_list|)
expr_stmt|;
comment|// #239
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"dh"
argument_list|,
literal|"&eth;"
argument_list|)
expr_stmt|;
comment|// #240
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~n"
argument_list|,
literal|"&ntilde;"
argument_list|)
expr_stmt|;
comment|// #241
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`o"
argument_list|,
literal|"&ograve;"
argument_list|)
expr_stmt|;
comment|// #242
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'o"
argument_list|,
literal|"&oacute;"
argument_list|)
expr_stmt|;
comment|// #243
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^o"
argument_list|,
literal|"&ocirc;"
argument_list|)
expr_stmt|;
comment|// #244
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~o"
argument_list|,
literal|"&otilde;"
argument_list|)
expr_stmt|;
comment|// #245
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"o"
argument_list|,
literal|"&ouml;"
argument_list|)
expr_stmt|;
comment|// #246
comment|// According to ISO 8859-1 the "\div" symbol should be placed here
comment|// (#247).
comment|// Omitting this, because it is a mathematical symbol.
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"o"
argument_list|,
literal|"&oslash;"
argument_list|)
expr_stmt|;
comment|// #248
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`u"
argument_list|,
literal|"&ugrave;"
argument_list|)
expr_stmt|;
comment|// #249
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'u"
argument_list|,
literal|"&uacute;"
argument_list|)
expr_stmt|;
comment|// #250
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^u"
argument_list|,
literal|"&ucirc;"
argument_list|)
expr_stmt|;
comment|// #251
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"u"
argument_list|,
literal|"&uuml;"
argument_list|)
expr_stmt|;
comment|// #252
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'y"
argument_list|,
literal|"&yacute;"
argument_list|)
expr_stmt|;
comment|// #253
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"th"
argument_list|,
literal|"&thorn;"
argument_list|)
expr_stmt|;
comment|// #254
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"y"
argument_list|,
literal|"&yuml;"
argument_list|)
expr_stmt|;
comment|// #255
comment|// HTML special characters without names (UNICODE Latin Extended-A),
comment|// indicated by UNICODE number
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"=A"
argument_list|,
literal|"&#256;"
argument_list|)
expr_stmt|;
comment|// "Amacr"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"=a"
argument_list|,
literal|"&#257;"
argument_list|)
expr_stmt|;
comment|// "amacr"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"uA"
argument_list|,
literal|"&#258;"
argument_list|)
expr_stmt|;
comment|// "Abreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ua"
argument_list|,
literal|"&#259;"
argument_list|)
expr_stmt|;
comment|// "abreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"kA"
argument_list|,
literal|"&#260;"
argument_list|)
expr_stmt|;
comment|// "Aogon"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ka"
argument_list|,
literal|"&#261;"
argument_list|)
expr_stmt|;
comment|// "aogon"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'C"
argument_list|,
literal|"&#262;"
argument_list|)
expr_stmt|;
comment|// "Cacute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'c"
argument_list|,
literal|"&#263;"
argument_list|)
expr_stmt|;
comment|// "cacute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^C"
argument_list|,
literal|"&#264;"
argument_list|)
expr_stmt|;
comment|// "Ccirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^c"
argument_list|,
literal|"&#265;"
argument_list|)
expr_stmt|;
comment|// "ccirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|".C"
argument_list|,
literal|"&#266;"
argument_list|)
expr_stmt|;
comment|// "Cdot"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|".c"
argument_list|,
literal|"&#267;"
argument_list|)
expr_stmt|;
comment|// "cdot"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vC"
argument_list|,
literal|"&#268;"
argument_list|)
expr_stmt|;
comment|// "Ccaron"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vc"
argument_list|,
literal|"&#269;"
argument_list|)
expr_stmt|;
comment|// "ccaron"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vD"
argument_list|,
literal|"&#270;"
argument_list|)
expr_stmt|;
comment|// "Dcaron"
comment|// Symbol #271 (dï¿½) has no special Latex command
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"DJ"
argument_list|,
literal|"&#272;"
argument_list|)
expr_stmt|;
comment|// "Dstrok"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"dj"
argument_list|,
literal|"&#273;"
argument_list|)
expr_stmt|;
comment|// "dstrok"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"=E"
argument_list|,
literal|"&#274;"
argument_list|)
expr_stmt|;
comment|// "Emacr"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"=e"
argument_list|,
literal|"&#275;"
argument_list|)
expr_stmt|;
comment|// "emacr"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"uE"
argument_list|,
literal|"&#276;"
argument_list|)
expr_stmt|;
comment|// "Ebreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ue"
argument_list|,
literal|"&#277;"
argument_list|)
expr_stmt|;
comment|// "ebreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|".E"
argument_list|,
literal|"&#278;"
argument_list|)
expr_stmt|;
comment|// "Edot"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|".e"
argument_list|,
literal|"&#279;"
argument_list|)
expr_stmt|;
comment|// "edot"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"kE"
argument_list|,
literal|"&#280;"
argument_list|)
expr_stmt|;
comment|// "Eogon"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ke"
argument_list|,
literal|"&#281;"
argument_list|)
expr_stmt|;
comment|// "eogon"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vE"
argument_list|,
literal|"&#282;"
argument_list|)
expr_stmt|;
comment|// "Ecaron"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ve"
argument_list|,
literal|"&#283;"
argument_list|)
expr_stmt|;
comment|// "ecaron"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^G"
argument_list|,
literal|"&#284;"
argument_list|)
expr_stmt|;
comment|// "Gcirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^g"
argument_list|,
literal|"&#285;"
argument_list|)
expr_stmt|;
comment|// "gcirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"uG"
argument_list|,
literal|"&#286;"
argument_list|)
expr_stmt|;
comment|// "Gbreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ug"
argument_list|,
literal|"&#287;"
argument_list|)
expr_stmt|;
comment|// "gbreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|".G"
argument_list|,
literal|"&#288;"
argument_list|)
expr_stmt|;
comment|// "Gdot"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|".g"
argument_list|,
literal|"&#289;"
argument_list|)
expr_stmt|;
comment|// "gdot"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cG"
argument_list|,
literal|"&#290;"
argument_list|)
expr_stmt|;
comment|// "Gcedil"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'g"
argument_list|,
literal|"&#291;"
argument_list|)
expr_stmt|;
comment|// "gacute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^H"
argument_list|,
literal|"&#292;"
argument_list|)
expr_stmt|;
comment|// "Hcirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^h"
argument_list|,
literal|"&#293;"
argument_list|)
expr_stmt|;
comment|// "hcirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"Hstrok"
argument_list|,
literal|"&#294;"
argument_list|)
expr_stmt|;
comment|// "Hstrok"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"hstrok"
argument_list|,
literal|"&#295;"
argument_list|)
expr_stmt|;
comment|// "hstrok"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~I"
argument_list|,
literal|"&#296;"
argument_list|)
expr_stmt|;
comment|// "Itilde"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~i"
argument_list|,
literal|"&#297;"
argument_list|)
expr_stmt|;
comment|// "itilde"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"=I"
argument_list|,
literal|"&#298;"
argument_list|)
expr_stmt|;
comment|// "Imacr"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"=i"
argument_list|,
literal|"&#299;"
argument_list|)
expr_stmt|;
comment|// "imacr"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"uI"
argument_list|,
literal|"&#300;"
argument_list|)
expr_stmt|;
comment|// "Ibreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ui"
argument_list|,
literal|"&#301;"
argument_list|)
expr_stmt|;
comment|// "ibreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"kI"
argument_list|,
literal|"&#302;"
argument_list|)
expr_stmt|;
comment|// "Iogon"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ki"
argument_list|,
literal|"&#303;"
argument_list|)
expr_stmt|;
comment|// "iogon"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|".I"
argument_list|,
literal|"&#304;"
argument_list|)
expr_stmt|;
comment|// "Idot"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"i"
argument_list|,
literal|"&#305;"
argument_list|)
expr_stmt|;
comment|// "inodot"
comment|// Symbol #306 (IJ) has no special Latex command
comment|// Symbol #307 (ij) has no special Latex command
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^J"
argument_list|,
literal|"&#308;"
argument_list|)
expr_stmt|;
comment|// "Jcirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^j"
argument_list|,
literal|"&#309;"
argument_list|)
expr_stmt|;
comment|// "jcirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cK"
argument_list|,
literal|"&#310;"
argument_list|)
expr_stmt|;
comment|// "Kcedil"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ck"
argument_list|,
literal|"&#311;"
argument_list|)
expr_stmt|;
comment|// "kcedil"
comment|// Symbol #312 (k) has no special Latex command
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'L"
argument_list|,
literal|"&#313;"
argument_list|)
expr_stmt|;
comment|// "Lacute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'l"
argument_list|,
literal|"&#314;"
argument_list|)
expr_stmt|;
comment|// "lacute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cL"
argument_list|,
literal|"&#315;"
argument_list|)
expr_stmt|;
comment|// "Lcedil"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cl"
argument_list|,
literal|"&#316;"
argument_list|)
expr_stmt|;
comment|// "lcedil"
comment|// Symbol #317 (Lï¿½) has no special Latex command
comment|// Symbol #318 (lï¿½) has no special Latex command
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"Lmidot"
argument_list|,
literal|"&#319;"
argument_list|)
expr_stmt|;
comment|// "Lmidot"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"lmidot"
argument_list|,
literal|"&#320;"
argument_list|)
expr_stmt|;
comment|// "lmidot"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"L"
argument_list|,
literal|"&#321;"
argument_list|)
expr_stmt|;
comment|// "Lstrok"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"l"
argument_list|,
literal|"&#322;"
argument_list|)
expr_stmt|;
comment|// "lstrok"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'N"
argument_list|,
literal|"&#323;"
argument_list|)
expr_stmt|;
comment|// "Nacute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'n"
argument_list|,
literal|"&#324;"
argument_list|)
expr_stmt|;
comment|// "nacute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cN"
argument_list|,
literal|"&#325;"
argument_list|)
expr_stmt|;
comment|// "Ncedil"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cn"
argument_list|,
literal|"&#326;"
argument_list|)
expr_stmt|;
comment|// "ncedil"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vN"
argument_list|,
literal|"&#327;"
argument_list|)
expr_stmt|;
comment|// "Ncaron"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vn"
argument_list|,
literal|"&#328;"
argument_list|)
expr_stmt|;
comment|// "ncaron"
comment|// Symbol #329 (ï¿½n) has no special Latex command
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"NG"
argument_list|,
literal|"&#330;"
argument_list|)
expr_stmt|;
comment|// "ENG"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ng"
argument_list|,
literal|"&#331;"
argument_list|)
expr_stmt|;
comment|// "eng"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"=O"
argument_list|,
literal|"&#332;"
argument_list|)
expr_stmt|;
comment|// "Omacr"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"=o"
argument_list|,
literal|"&#333;"
argument_list|)
expr_stmt|;
comment|// "omacr"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"uO"
argument_list|,
literal|"&#334;"
argument_list|)
expr_stmt|;
comment|// "Obreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"uo"
argument_list|,
literal|"&#335;"
argument_list|)
expr_stmt|;
comment|// "obreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"HO"
argument_list|,
literal|"&#336;"
argument_list|)
expr_stmt|;
comment|// "Odblac"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"Ho"
argument_list|,
literal|"&#337;"
argument_list|)
expr_stmt|;
comment|// "odblac"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"OE"
argument_list|,
literal|"&#338;"
argument_list|)
expr_stmt|;
comment|// "OElig"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"oe"
argument_list|,
literal|"&#339;"
argument_list|)
expr_stmt|;
comment|// "oelig"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'R"
argument_list|,
literal|"&#340;"
argument_list|)
expr_stmt|;
comment|// "Racute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'r"
argument_list|,
literal|"&#341;"
argument_list|)
expr_stmt|;
comment|// "racute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cR"
argument_list|,
literal|"&#342;"
argument_list|)
expr_stmt|;
comment|// "Rcedil"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cr"
argument_list|,
literal|"&#343;"
argument_list|)
expr_stmt|;
comment|// "rcedil"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vR"
argument_list|,
literal|"&#344;"
argument_list|)
expr_stmt|;
comment|// "Rcaron"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vr"
argument_list|,
literal|"&#345;"
argument_list|)
expr_stmt|;
comment|// "rcaron"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'S"
argument_list|,
literal|"&#346;"
argument_list|)
expr_stmt|;
comment|// "Sacute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'s"
argument_list|,
literal|"&#347;"
argument_list|)
expr_stmt|;
comment|// "sacute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^S"
argument_list|,
literal|"&#348;"
argument_list|)
expr_stmt|;
comment|// "Scirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^s"
argument_list|,
literal|"&#349;"
argument_list|)
expr_stmt|;
comment|// "scirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cS"
argument_list|,
literal|"&#350;"
argument_list|)
expr_stmt|;
comment|// "Scedil"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cs"
argument_list|,
literal|"&#351;"
argument_list|)
expr_stmt|;
comment|// "scedil"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vS"
argument_list|,
literal|"&#352;"
argument_list|)
expr_stmt|;
comment|// "Scaron"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vs"
argument_list|,
literal|"&#353;"
argument_list|)
expr_stmt|;
comment|// "scaron"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cT"
argument_list|,
literal|"&#354;"
argument_list|)
expr_stmt|;
comment|// "Tcedil"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ct"
argument_list|,
literal|"&#355;"
argument_list|)
expr_stmt|;
comment|// "tcedil"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vT"
argument_list|,
literal|"&#356;"
argument_list|)
expr_stmt|;
comment|// "Tcaron"
comment|// Symbol #357 (tï¿½) has no special Latex command
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"Tstrok"
argument_list|,
literal|"&#358;"
argument_list|)
expr_stmt|;
comment|// "Tstrok"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"tstrok"
argument_list|,
literal|"&#359;"
argument_list|)
expr_stmt|;
comment|// "tstrok"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~U"
argument_list|,
literal|"&#360;"
argument_list|)
expr_stmt|;
comment|// "Utilde"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~u"
argument_list|,
literal|"&#361;"
argument_list|)
expr_stmt|;
comment|// "utilde"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"=U"
argument_list|,
literal|"&#362;"
argument_list|)
expr_stmt|;
comment|// "Umacr"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"=u"
argument_list|,
literal|"&#363;"
argument_list|)
expr_stmt|;
comment|// "umacr"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"uU"
argument_list|,
literal|"&#364;"
argument_list|)
expr_stmt|;
comment|// "Ubreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"uu"
argument_list|,
literal|"&#365;"
argument_list|)
expr_stmt|;
comment|// "ubreve"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"rU"
argument_list|,
literal|"&#366;"
argument_list|)
expr_stmt|;
comment|// "Uring"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ru"
argument_list|,
literal|"&#367;"
argument_list|)
expr_stmt|;
comment|// "uring"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"HU"
argument_list|,
literal|"&#368;"
argument_list|)
expr_stmt|;
comment|// "Odblac"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"Hu"
argument_list|,
literal|"&#369;"
argument_list|)
expr_stmt|;
comment|// "odblac"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"kU"
argument_list|,
literal|"&#370;"
argument_list|)
expr_stmt|;
comment|// "Uogon"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"ku"
argument_list|,
literal|"&#371;"
argument_list|)
expr_stmt|;
comment|// "uogon"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^W"
argument_list|,
literal|"&#372;"
argument_list|)
expr_stmt|;
comment|// "Wcirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^w"
argument_list|,
literal|"&#373;"
argument_list|)
expr_stmt|;
comment|// "wcirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^Y"
argument_list|,
literal|"&#374;"
argument_list|)
expr_stmt|;
comment|// "Ycirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^y"
argument_list|,
literal|"&#375;"
argument_list|)
expr_stmt|;
comment|// "ycirc"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"Y"
argument_list|,
literal|"&#376;"
argument_list|)
expr_stmt|;
comment|// "Yuml"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'Z"
argument_list|,
literal|"&#377;"
argument_list|)
expr_stmt|;
comment|// "Zacute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'z"
argument_list|,
literal|"&#378;"
argument_list|)
expr_stmt|;
comment|// "zacute"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|".Z"
argument_list|,
literal|"&#379;"
argument_list|)
expr_stmt|;
comment|// "Zdot"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|".z"
argument_list|,
literal|"&#380;"
argument_list|)
expr_stmt|;
comment|// "zdot"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vZ"
argument_list|,
literal|"&#381;"
argument_list|)
expr_stmt|;
comment|// "Zcaron"
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"vz"
argument_list|,
literal|"&#382;"
argument_list|)
expr_stmt|;
comment|// "zcaron"
comment|// Symbol #383 (f) has no special Latex command
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"%"
argument_list|,
literal|"%"
argument_list|)
expr_stmt|;
comment|// percent sign
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{a\\}\\}"
argument_list|,
literal|"&#x00E4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{A\\}\\}"
argument_list|,
literal|"&#x00C4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{e\\}\\}"
argument_list|,
literal|"&#x00EB;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{E\\}\\}"
argument_list|,
literal|"&#x00CB;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{i\\}\\}"
argument_list|,
literal|"&#x00EF;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{I\\}\\}"
argument_list|,
literal|"&#x00CF;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{o\\}\\}"
argument_list|,
literal|"&#x00F6;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{O\\}\\}"
argument_list|,
literal|"&#x00D6;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{u\\}\\}"
argument_list|,
literal|"&#x00FC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{U\\}\\}"
argument_list|,
literal|"&#x00DC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{e\\}\\}"
argument_list|,
literal|"&#x00E8;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{E\\}\\}"
argument_list|,
literal|"&#x00C8;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{i\\}\\}"
argument_list|,
literal|"&#x00EC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{I\\}\\}"
argument_list|,
literal|"&#x00CC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{o\\}\\}"
argument_list|,
literal|"&#x00F2;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{O\\}\\}"
argument_list|,
literal|"&#x00D2;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{u\\}\\}"
argument_list|,
literal|"&#x00F9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{U\\}\\}"
argument_list|,
literal|"&#x00D9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'\\{e\\}\\}"
argument_list|,
literal|"&#x00E9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{E\\}\\}"
argument_list|,
literal|"&#x00C9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{i\\}\\}"
argument_list|,
literal|"&#x00ED;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{I\\}\\}"
argument_list|,
literal|"&#x00CD;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{o\\}\\}"
argument_list|,
literal|"&#x00F3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{O\\}\\}"
argument_list|,
literal|"&#x00D3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{u\\}\\}"
argument_list|,
literal|"&#x00FA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{U\\}\\}"
argument_list|,
literal|"&#x00DA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{a\\}\\}"
argument_list|,
literal|"&#x00E1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{A\\}\\}"
argument_list|,
literal|"&#x00C1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{o\\}\\}"
argument_list|,
literal|"&#x00F4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{O\\}\\}"
argument_list|,
literal|"&#x00D4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{u\\}\\}"
argument_list|,
literal|"&#x00F9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{U\\}\\}"
argument_list|,
literal|"&#x00D9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{e\\}\\}"
argument_list|,
literal|"&#x00EA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{E\\}\\}"
argument_list|,
literal|"&#x00CA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{i\\}\\}"
argument_list|,
literal|"&#x00EE;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{I\\}\\}"
argument_list|,
literal|"&#x00CE;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{o\\}\\}"
argument_list|,
literal|"&#x00F5;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{O\\}\\}"
argument_list|,
literal|"&#x00D5;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{n\\}\\}"
argument_list|,
literal|"&#x00F1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{N\\}\\}"
argument_list|,
literal|"&#x00D1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{a\\}\\}"
argument_list|,
literal|"&#x00E3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{A\\}\\}"
argument_list|,
literal|"&#x00C3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"a\\}"
argument_list|,
literal|"&#x00E4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"A\\}"
argument_list|,
literal|"&#x00C4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"e\\}"
argument_list|,
literal|"&#x00EB;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"E\\}"
argument_list|,
literal|"&#x00CB;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"i\\}"
argument_list|,
literal|"&#x00EF;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"I\\}"
argument_list|,
literal|"&#x00CF;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"o\\}"
argument_list|,
literal|"&#x00F6;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"O\\}"
argument_list|,
literal|"&#x00D6;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"u\\}"
argument_list|,
literal|"&#x00FC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"U\\}"
argument_list|,
literal|"&#x00DC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`e\\}"
argument_list|,
literal|"&#x00E8;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`E\\}"
argument_list|,
literal|"&#x00C8;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`i\\}"
argument_list|,
literal|"&#x00EC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`I\\}"
argument_list|,
literal|"&#x00CC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`o\\}"
argument_list|,
literal|"&#x00F2;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`O\\}"
argument_list|,
literal|"&#x00D2;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`u\\}"
argument_list|,
literal|"&#x00F9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`U\\}"
argument_list|,
literal|"&#x00D9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'e\\}"
argument_list|,
literal|"&#x00E9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'E\\}"
argument_list|,
literal|"&#x00C9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'i\\}"
argument_list|,
literal|"&#x00ED;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'I\\}"
argument_list|,
literal|"&#x00CD;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'o\\}"
argument_list|,
literal|"&#x00F3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'O\\}"
argument_list|,
literal|"&#x00D3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'u\\}"
argument_list|,
literal|"&#x00FA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'U\\}"
argument_list|,
literal|"&#x00DA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'a\\}"
argument_list|,
literal|"&#x00E1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'A\\}"
argument_list|,
literal|"&#x00C1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^a\\}"
argument_list|,
literal|"&#x00F4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^A\\}"
argument_list|,
literal|"&#x00D4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^o\\}"
argument_list|,
literal|"&#x00F4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^O\\}"
argument_list|,
literal|"&#x00D4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^u\\}"
argument_list|,
literal|"&#x00F9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^U\\}"
argument_list|,
literal|"&#x00D9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^e\\}"
argument_list|,
literal|"&#x00EA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^E\\}"
argument_list|,
literal|"&#x00CA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^i\\}"
argument_list|,
literal|"&#x00EE;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^I\\}"
argument_list|,
literal|"&#x00CE;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~o\\}"
argument_list|,
literal|"&#x00F5;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~O\\}"
argument_list|,
literal|"&#x00D5;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~n\\}"
argument_list|,
literal|"&#x00F1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~N\\}"
argument_list|,
literal|"&#x00D1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~a\\}"
argument_list|,
literal|"&#x00E3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~A\\}"
argument_list|,
literal|"&#x00C3;"
argument_list|)
expr_stmt|;
name|ASCII2XML_CHARS
operator|.
name|put
argument_list|(
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
expr_stmt|;
name|ASCII2XML_CHARS
operator|.
name|put
argument_list|(
literal|"\""
argument_list|,
literal|"&quot;"
argument_list|)
expr_stmt|;
name|ASCII2XML_CHARS
operator|.
name|put
argument_list|(
literal|">"
argument_list|,
literal|"&gt;"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C0"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C1"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C2"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C3"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C4"
argument_list|,
literal|"Ae"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C5"
argument_list|,
literal|"Aa"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C6"
argument_list|,
literal|"Ae"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C7"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C8"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C9"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CA"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CB"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CC"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CD"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CE"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CF"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D0"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D1"
argument_list|,
literal|"N"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D2"
argument_list|,
literal|"O"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D3"
argument_list|,
literal|"O"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D4"
argument_list|,
literal|"O"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D5"
argument_list|,
literal|"O"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D6"
argument_list|,
literal|"Oe"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D8"
argument_list|,
literal|"Oe"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D9"
argument_list|,
literal|"U"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00DA"
argument_list|,
literal|"U"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00DB"
argument_list|,
literal|"U"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00DC"
argument_list|,
literal|"Ue"
argument_list|)
expr_stmt|;
comment|// U umlaut ..
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00DD"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00DF"
argument_list|,
literal|"ss"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E0"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E1"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E2"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E3"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E4"
argument_list|,
literal|"ae"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E5"
argument_list|,
literal|"aa"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E6"
argument_list|,
literal|"ae"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E7"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E8"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E9"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00EA"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00EB"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00EC"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00ED"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00EE"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00EF"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F0"
argument_list|,
literal|"o"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F1"
argument_list|,
literal|"n"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F2"
argument_list|,
literal|"o"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F3"
argument_list|,
literal|"o"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F4"
argument_list|,
literal|"o"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F5"
argument_list|,
literal|"o"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F6"
argument_list|,
literal|"oe"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F8"
argument_list|,
literal|"oe"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F9"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00FA"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00FB"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00FC"
argument_list|,
literal|"ue"
argument_list|)
expr_stmt|;
comment|// u umlaut...
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00FD"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00FF"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0100"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0101"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0102"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0103"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0104"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0105"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0106"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0107"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0108"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0109"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010A"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010B"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010C"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010D"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010E"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010F"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0110"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0111"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0112"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0113"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0114"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0115"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0116"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0117"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0118"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0119"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011A"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011B"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011C"
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011D"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011E"
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011F"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0120"
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0121"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0122"
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0123"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0124"
argument_list|,
literal|"H"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0125"
argument_list|,
literal|"h"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0127"
argument_list|,
literal|"h"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0128"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0129"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u012A"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u012B"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u012C"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u012D"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
comment|// UNICODE_CHARS.put("\u0100", "");
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`a"
argument_list|,
literal|"\\'e0"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`e"
argument_list|,
literal|"\\'e8"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`i"
argument_list|,
literal|"\\'ec"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`o"
argument_list|,
literal|"\\'f2"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`u"
argument_list|,
literal|"\\'f9"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?a"
argument_list|,
literal|"\\'e1"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?e"
argument_list|,
literal|"\\'e9"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?i"
argument_list|,
literal|"\\'ed"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?o"
argument_list|,
literal|"\\'f3"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?u"
argument_list|,
literal|"\\'fa"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^a"
argument_list|,
literal|"\\'e2"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^e"
argument_list|,
literal|"\\'ea"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^i"
argument_list|,
literal|"\\'ee"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^o"
argument_list|,
literal|"\\'f4"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^u"
argument_list|,
literal|"\\'fa"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"a"
argument_list|,
literal|"\\'e4"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"e"
argument_list|,
literal|"\\'eb"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"i"
argument_list|,
literal|"\\'ef"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"o"
argument_list|,
literal|"\\'f6"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"u"
argument_list|,
literal|"\\u252u"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"~n"
argument_list|,
literal|"\\'f1"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`A"
argument_list|,
literal|"\\'c0"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`E"
argument_list|,
literal|"\\'c8"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`I"
argument_list|,
literal|"\\'cc"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`O"
argument_list|,
literal|"\\'d2"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`U"
argument_list|,
literal|"\\'d9"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?A"
argument_list|,
literal|"\\'c1"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?E"
argument_list|,
literal|"\\'c9"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?I"
argument_list|,
literal|"\\'cd"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?O"
argument_list|,
literal|"\\'d3"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?U"
argument_list|,
literal|"\\'da"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^A"
argument_list|,
literal|"\\'c2"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^E"
argument_list|,
literal|"\\'ca"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^I"
argument_list|,
literal|"\\'ce"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^O"
argument_list|,
literal|"\\'d4"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^U"
argument_list|,
literal|"\\'db"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"A"
argument_list|,
literal|"\\'c4"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"E"
argument_list|,
literal|"\\'cb"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"I"
argument_list|,
literal|"\\'cf"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"O"
argument_list|,
literal|"\\'d6"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"U"
argument_list|,
literal|"\\'dc"
argument_list|)
expr_stmt|;
comment|// Use UNICODE characters for RTF-Chars which can not be found in the
comment|// standard codepage
comment|// RTFCHARS.put("`A", "\\u192"); // "Agrave" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'A"
argument_list|,
literal|"\\u193A"
argument_list|)
expr_stmt|;
comment|// "Aacute"
comment|// RTFCHARS.put("^A", "\\u194"); // "Acirc" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"~A"
argument_list|,
literal|"\\u195A"
argument_list|)
expr_stmt|;
comment|// "Atilde"
comment|// RTFCHARS.put("\"A", "\\u196"); // "Auml" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"AA"
argument_list|,
literal|"\\u197A"
argument_list|)
expr_stmt|;
comment|// "Aring"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"AE"
argument_list|,
literal|"{\\uc2\\u198AE}"
argument_list|)
expr_stmt|;
comment|// "AElig"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cC"
argument_list|,
literal|"\\u199C"
argument_list|)
expr_stmt|;
comment|// "Ccedil"
comment|// RTFCHARS.put("`E", "\\u200"); // "Egrave" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'E"
argument_list|,
literal|"\\u201E"
argument_list|)
expr_stmt|;
comment|// "Eacute"
comment|// RTFCHARS.put("^E", "\\u202"); // "Ecirc" exists in standard
comment|// codepage
comment|// RTFCHARS.put("\"E", "\\u203"); // "Euml" exists in standard
comment|// codepage
comment|// RTFCHARS.put("`I", "\\u204"); // "Igrave" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'I"
argument_list|,
literal|"\\u205I"
argument_list|)
expr_stmt|;
comment|// "Iacute"
comment|// RTFCHARS.put("^I", "\\u206"); // "Icirc" exists in standard
comment|// codepage
comment|// RTFCHARS.put("\"I", "\\u207"); // "Iuml" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"DH"
argument_list|,
literal|"\\u208D"
argument_list|)
expr_stmt|;
comment|// "ETH"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"~N"
argument_list|,
literal|"\\u209N"
argument_list|)
expr_stmt|;
comment|// "Ntilde"
comment|// RTFCHARS.put("`O", "\\u210"); // "Ograve" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'O"
argument_list|,
literal|"\\u211O"
argument_list|)
expr_stmt|;
comment|// "Oacute"
comment|// RTFCHARS.put("^O", "\\u212"); // "Ocirc" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"~O"
argument_list|,
literal|"\\u213O"
argument_list|)
expr_stmt|;
comment|// "Otilde"
comment|// RTFCHARS.put("\"O", "\\u214"); // "Ouml" exists in standard
comment|// codepage
comment|// According to ISO 8859-1 the "\times" symbol should be placed here
comment|// (#215).
comment|// Omitting this, because it is a mathematical symbol.
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"O"
argument_list|,
literal|"\\u216O"
argument_list|)
expr_stmt|;
comment|// "Oslash"
comment|// RTFCHARS.put("`U", "\\u217"); // "Ugrave" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'U"
argument_list|,
literal|"\\u218U"
argument_list|)
expr_stmt|;
comment|// "Uacute"
comment|// RTFCHARS.put("^U", "\\u219"); // "Ucirc" exists in standard
comment|// codepage
comment|// RTFCHARS.put("\"U", "\\u220"); // "Uuml" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'Y"
argument_list|,
literal|"\\u221Y"
argument_list|)
expr_stmt|;
comment|// "Yacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"TH"
argument_list|,
literal|"{\\uc2\\u222TH}"
argument_list|)
expr_stmt|;
comment|// "THORN"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ss"
argument_list|,
literal|"{\\uc2\\u223ss"
argument_list|)
expr_stmt|;
comment|// "szlig"
comment|// RTFCHARS.put("`a", "\\u224"); // "agrave" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'a"
argument_list|,
literal|"\\u225a"
argument_list|)
expr_stmt|;
comment|// "aacute"
comment|// RTFCHARS.put("^a", "\\u226"); // "acirc" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"~a"
argument_list|,
literal|"\\u227a"
argument_list|)
expr_stmt|;
comment|// "atilde"
comment|// RTFCHARS.put("\"a", "\\u228"); // "auml" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"aa"
argument_list|,
literal|"\\u229a"
argument_list|)
expr_stmt|;
comment|// "aring"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ae"
argument_list|,
literal|"{\\uc2\\u230ae}"
argument_list|)
expr_stmt|;
comment|// "aelig"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cc"
argument_list|,
literal|"\\u231c"
argument_list|)
expr_stmt|;
comment|// "ccedil"
comment|// RTFCHARS.put("`e", "\\u232"); // "egrave" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'e"
argument_list|,
literal|"\\u233e"
argument_list|)
expr_stmt|;
comment|// "eacute"
comment|// RTFCHARS.put("^e", "\\u234"); // "ecirc" exists in standard
comment|// codepage
comment|// RTFCHARS.put("\"e", "\\u235"); // "euml" exists in standard
comment|// codepage
comment|// RTFCHARS.put("`i", "\\u236"); // "igrave" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'i"
argument_list|,
literal|"\\u237i"
argument_list|)
expr_stmt|;
comment|// "iacute"
comment|// RTFCHARS.put("^i", "\\u238"); // "icirc" exists in standard
comment|// codepage
comment|// RTFCHARS.put("\"i", "\\u239"); // "iuml" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"dh"
argument_list|,
literal|"\\u240d"
argument_list|)
expr_stmt|;
comment|// "eth"
comment|// RTFCHARS.put("~n", "\\u241"); // "ntilde" exists in standard
comment|// codepage
comment|// RTFCHARS.put("`o", "\\u242"); // "ograve" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'o"
argument_list|,
literal|"\\u243o"
argument_list|)
expr_stmt|;
comment|// "oacute"
comment|// RTFCHARS.put("^o", "\\u244"); // "ocirc" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"~o"
argument_list|,
literal|"\\u245o"
argument_list|)
expr_stmt|;
comment|// "otilde"
comment|// RTFCHARS.put("\"o", "\\u246"); // "ouml" exists in standard
comment|// codepage
comment|// According to ISO 8859-1 the "\div" symbol should be placed here
comment|// (#247).
comment|// Omitting this, because it is a mathematical symbol.
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"o"
argument_list|,
literal|"\\u248o"
argument_list|)
expr_stmt|;
comment|// "oslash"
comment|// RTFCHARS.put("`u", "\\u249"); // "ugrave" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'u"
argument_list|,
literal|"\\u250u"
argument_list|)
expr_stmt|;
comment|// "uacute"
comment|// RTFCHARS.put("^u", "\\u251"); // "ucirc" exists in standard
comment|// codepage
comment|// RTFCHARS.put("\"u", "\\u252"); // "uuml" exists in standard
comment|// codepage
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'y"
argument_list|,
literal|"\\u253y"
argument_list|)
expr_stmt|;
comment|// "yacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"th"
argument_list|,
literal|"{\\uc2\\u254th}"
argument_list|)
expr_stmt|;
comment|// "thorn"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"y"
argument_list|,
literal|"\\u255y"
argument_list|)
expr_stmt|;
comment|// "yuml"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"=A"
argument_list|,
literal|"\\u256A"
argument_list|)
expr_stmt|;
comment|// "Amacr"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"=a"
argument_list|,
literal|"\\u257a"
argument_list|)
expr_stmt|;
comment|// "amacr"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"uA"
argument_list|,
literal|"\\u258A"
argument_list|)
expr_stmt|;
comment|// "Abreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ua"
argument_list|,
literal|"\\u259a"
argument_list|)
expr_stmt|;
comment|// "abreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"kA"
argument_list|,
literal|"\\u260A"
argument_list|)
expr_stmt|;
comment|// "Aogon"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ka"
argument_list|,
literal|"\\u261a"
argument_list|)
expr_stmt|;
comment|// "aogon"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'C"
argument_list|,
literal|"\\u262C"
argument_list|)
expr_stmt|;
comment|// "Cacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'c"
argument_list|,
literal|"\\u263c"
argument_list|)
expr_stmt|;
comment|// "cacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^C"
argument_list|,
literal|"\\u264C"
argument_list|)
expr_stmt|;
comment|// "Ccirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^c"
argument_list|,
literal|"\\u265c"
argument_list|)
expr_stmt|;
comment|// "ccirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|".C"
argument_list|,
literal|"\\u266C"
argument_list|)
expr_stmt|;
comment|// "Cdot"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|".c"
argument_list|,
literal|"\\u267c"
argument_list|)
expr_stmt|;
comment|// "cdot"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vC"
argument_list|,
literal|"\\u268C"
argument_list|)
expr_stmt|;
comment|// "Ccaron"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vc"
argument_list|,
literal|"\\u269c"
argument_list|)
expr_stmt|;
comment|// "ccaron"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vD"
argument_list|,
literal|"\\u270D"
argument_list|)
expr_stmt|;
comment|// "Dcaron"
comment|// Symbol #271 (dï¿½) has no special Latex command
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"DJ"
argument_list|,
literal|"\\u272D"
argument_list|)
expr_stmt|;
comment|// "Dstrok"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"dj"
argument_list|,
literal|"\\u273d"
argument_list|)
expr_stmt|;
comment|// "dstrok"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"=E"
argument_list|,
literal|"\\u274E"
argument_list|)
expr_stmt|;
comment|// "Emacr"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"=e"
argument_list|,
literal|"\\u275e"
argument_list|)
expr_stmt|;
comment|// "emacr"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"uE"
argument_list|,
literal|"\\u276E"
argument_list|)
expr_stmt|;
comment|// "Ebreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ue"
argument_list|,
literal|"\\u277e"
argument_list|)
expr_stmt|;
comment|// "ebreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|".E"
argument_list|,
literal|"\\u278E"
argument_list|)
expr_stmt|;
comment|// "Edot"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|".e"
argument_list|,
literal|"\\u279e"
argument_list|)
expr_stmt|;
comment|// "edot"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"kE"
argument_list|,
literal|"\\u280E"
argument_list|)
expr_stmt|;
comment|// "Eogon"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ke"
argument_list|,
literal|"\\u281e"
argument_list|)
expr_stmt|;
comment|// "eogon"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vE"
argument_list|,
literal|"\\u282E"
argument_list|)
expr_stmt|;
comment|// "Ecaron"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ve"
argument_list|,
literal|"\\u283e"
argument_list|)
expr_stmt|;
comment|// "ecaron"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^G"
argument_list|,
literal|"\\u284G"
argument_list|)
expr_stmt|;
comment|// "Gcirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^g"
argument_list|,
literal|"\\u285g"
argument_list|)
expr_stmt|;
comment|// "gcirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"uG"
argument_list|,
literal|"\\u286G"
argument_list|)
expr_stmt|;
comment|// "Gbreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ug"
argument_list|,
literal|"\\u287g"
argument_list|)
expr_stmt|;
comment|// "gbreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|".G"
argument_list|,
literal|"\\u288G"
argument_list|)
expr_stmt|;
comment|// "Gdot"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|".g"
argument_list|,
literal|"\\u289g"
argument_list|)
expr_stmt|;
comment|// "gdot"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cG"
argument_list|,
literal|"\\u290G"
argument_list|)
expr_stmt|;
comment|// "Gcedil"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'g"
argument_list|,
literal|"\\u291g"
argument_list|)
expr_stmt|;
comment|// "gacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^H"
argument_list|,
literal|"\\u292H"
argument_list|)
expr_stmt|;
comment|// "Hcirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^h"
argument_list|,
literal|"\\u293h"
argument_list|)
expr_stmt|;
comment|// "hcirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"Hstrok"
argument_list|,
literal|"\\u294H"
argument_list|)
expr_stmt|;
comment|// "Hstrok"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"hstrok"
argument_list|,
literal|"\\u295h"
argument_list|)
expr_stmt|;
comment|// "hstrok"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"~I"
argument_list|,
literal|"\\u296I"
argument_list|)
expr_stmt|;
comment|// "Itilde"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"~i"
argument_list|,
literal|"\\u297i"
argument_list|)
expr_stmt|;
comment|// "itilde"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"=I"
argument_list|,
literal|"\\u298I"
argument_list|)
expr_stmt|;
comment|// "Imacr"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"=i"
argument_list|,
literal|"\\u299i"
argument_list|)
expr_stmt|;
comment|// "imacr"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"uI"
argument_list|,
literal|"\\u300I"
argument_list|)
expr_stmt|;
comment|// "Ibreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ui"
argument_list|,
literal|"\\u301i"
argument_list|)
expr_stmt|;
comment|// "ibreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"kI"
argument_list|,
literal|"\\u302I"
argument_list|)
expr_stmt|;
comment|// "Iogon"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ki"
argument_list|,
literal|"\\u303i"
argument_list|)
expr_stmt|;
comment|// "iogon"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|".I"
argument_list|,
literal|"\\u304I"
argument_list|)
expr_stmt|;
comment|// "Idot"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"i"
argument_list|,
literal|"\\u305i"
argument_list|)
expr_stmt|;
comment|// "inodot"
comment|// Symbol #306 (IJ) has no special Latex command
comment|// Symbol #307 (ij) has no special Latex command
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^J"
argument_list|,
literal|"\\u308J"
argument_list|)
expr_stmt|;
comment|// "Jcirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^j"
argument_list|,
literal|"\\u309j"
argument_list|)
expr_stmt|;
comment|// "jcirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cK"
argument_list|,
literal|"\\u310K"
argument_list|)
expr_stmt|;
comment|// "Kcedil"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ck"
argument_list|,
literal|"\\u311k"
argument_list|)
expr_stmt|;
comment|// "kcedil"
comment|// Symbol #312 (k) has no special Latex command
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'L"
argument_list|,
literal|"\\u313L"
argument_list|)
expr_stmt|;
comment|// "Lacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'l"
argument_list|,
literal|"\\u314l"
argument_list|)
expr_stmt|;
comment|// "lacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cL"
argument_list|,
literal|"\\u315L"
argument_list|)
expr_stmt|;
comment|// "Lcedil"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cl"
argument_list|,
literal|"\\u316l"
argument_list|)
expr_stmt|;
comment|// "lcedil"
comment|// Symbol #317 (Lï¿½) has no special Latex command
comment|// Symbol #318 (lï¿½) has no special Latex command
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"Lmidot"
argument_list|,
literal|"\\u319L"
argument_list|)
expr_stmt|;
comment|// "Lmidot"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"lmidot"
argument_list|,
literal|"\\u320l"
argument_list|)
expr_stmt|;
comment|// "lmidot"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"L"
argument_list|,
literal|"\\u321L"
argument_list|)
expr_stmt|;
comment|// "Lstrok"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"l"
argument_list|,
literal|"\\u322l"
argument_list|)
expr_stmt|;
comment|// "lstrok"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'N"
argument_list|,
literal|"\\u323N"
argument_list|)
expr_stmt|;
comment|// "Nacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'n"
argument_list|,
literal|"\\u324n"
argument_list|)
expr_stmt|;
comment|// "nacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cN"
argument_list|,
literal|"\\u325N"
argument_list|)
expr_stmt|;
comment|// "Ncedil"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cn"
argument_list|,
literal|"\\u326n"
argument_list|)
expr_stmt|;
comment|// "ncedil"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vN"
argument_list|,
literal|"\\u327N"
argument_list|)
expr_stmt|;
comment|// "Ncaron"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vn"
argument_list|,
literal|"\\u328n"
argument_list|)
expr_stmt|;
comment|// "ncaron"
comment|// Symbol #329 (ï¿½n) has no special Latex command
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"NG"
argument_list|,
literal|"\\u330G"
argument_list|)
expr_stmt|;
comment|// "ENG"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ng"
argument_list|,
literal|"\\u331g"
argument_list|)
expr_stmt|;
comment|// "eng"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"=O"
argument_list|,
literal|"\\u332O"
argument_list|)
expr_stmt|;
comment|// "Omacr"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"=o"
argument_list|,
literal|"\\u333o"
argument_list|)
expr_stmt|;
comment|// "omacr"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"uO"
argument_list|,
literal|"\\u334O"
argument_list|)
expr_stmt|;
comment|// "Obreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"uo"
argument_list|,
literal|"\\u335o"
argument_list|)
expr_stmt|;
comment|// "obreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"HO"
argument_list|,
literal|"\\u336?"
argument_list|)
expr_stmt|;
comment|// "Odblac"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"Ho"
argument_list|,
literal|"\\u337?"
argument_list|)
expr_stmt|;
comment|// "odblac"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"OE"
argument_list|,
literal|"{\\uc2\\u338OE}"
argument_list|)
expr_stmt|;
comment|// "OElig"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"oe"
argument_list|,
literal|"{\\uc2\\u339oe}"
argument_list|)
expr_stmt|;
comment|// "oelig"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'R"
argument_list|,
literal|"\\u340R"
argument_list|)
expr_stmt|;
comment|// "Racute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'r"
argument_list|,
literal|"\\u341r"
argument_list|)
expr_stmt|;
comment|// "racute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cR"
argument_list|,
literal|"\\u342R"
argument_list|)
expr_stmt|;
comment|// "Rcedil"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cr"
argument_list|,
literal|"\\u343r"
argument_list|)
expr_stmt|;
comment|// "rcedil"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vR"
argument_list|,
literal|"\\u344R"
argument_list|)
expr_stmt|;
comment|// "Rcaron"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vr"
argument_list|,
literal|"\\u345r"
argument_list|)
expr_stmt|;
comment|// "rcaron"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'S"
argument_list|,
literal|"\\u346S"
argument_list|)
expr_stmt|;
comment|// "Sacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'s"
argument_list|,
literal|"\\u347s"
argument_list|)
expr_stmt|;
comment|// "sacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^S"
argument_list|,
literal|"\\u348S"
argument_list|)
expr_stmt|;
comment|// "Scirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^s"
argument_list|,
literal|"\\u349s"
argument_list|)
expr_stmt|;
comment|// "scirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cS"
argument_list|,
literal|"\\u350S"
argument_list|)
expr_stmt|;
comment|// "Scedil"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cs"
argument_list|,
literal|"\\u351s"
argument_list|)
expr_stmt|;
comment|// "scedil"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vS"
argument_list|,
literal|"\\u352S"
argument_list|)
expr_stmt|;
comment|// "Scaron"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vs"
argument_list|,
literal|"\\u353s"
argument_list|)
expr_stmt|;
comment|// "scaron"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"cT"
argument_list|,
literal|"\\u354T"
argument_list|)
expr_stmt|;
comment|// "Tcedil"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ct"
argument_list|,
literal|"\\u355t"
argument_list|)
expr_stmt|;
comment|// "tcedil"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vT"
argument_list|,
literal|"\\u356T"
argument_list|)
expr_stmt|;
comment|// "Tcaron"
comment|// Symbol #357 (tï¿½) has no special Latex command
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"Tstrok"
argument_list|,
literal|"\\u358T"
argument_list|)
expr_stmt|;
comment|// "Tstrok"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"tstrok"
argument_list|,
literal|"\\u359t"
argument_list|)
expr_stmt|;
comment|// "tstrok"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"~U"
argument_list|,
literal|"\\u360U"
argument_list|)
expr_stmt|;
comment|// "Utilde"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"~u"
argument_list|,
literal|"\\u361u"
argument_list|)
expr_stmt|;
comment|// "utilde"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"=U"
argument_list|,
literal|"\\u362U"
argument_list|)
expr_stmt|;
comment|// "Umacr"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"=u"
argument_list|,
literal|"\\u363u"
argument_list|)
expr_stmt|;
comment|// "umacr"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"uU"
argument_list|,
literal|"\\u364U"
argument_list|)
expr_stmt|;
comment|// "Ubreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"uu"
argument_list|,
literal|"\\u365u"
argument_list|)
expr_stmt|;
comment|// "ubreve"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"rU"
argument_list|,
literal|"\\u366U"
argument_list|)
expr_stmt|;
comment|// "Uring"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ru"
argument_list|,
literal|"\\u367u"
argument_list|)
expr_stmt|;
comment|// "uring"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"HU"
argument_list|,
literal|"\\u368?"
argument_list|)
expr_stmt|;
comment|// "Odblac"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"Hu"
argument_list|,
literal|"\\u369?"
argument_list|)
expr_stmt|;
comment|// "odblac"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"kU"
argument_list|,
literal|"\\u370U"
argument_list|)
expr_stmt|;
comment|// "Uogon"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"ku"
argument_list|,
literal|"\\u371u"
argument_list|)
expr_stmt|;
comment|// "uogon"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^W"
argument_list|,
literal|"\\u372W"
argument_list|)
expr_stmt|;
comment|// "Wcirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^w"
argument_list|,
literal|"\\u373w"
argument_list|)
expr_stmt|;
comment|// "wcirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^Y"
argument_list|,
literal|"\\u374Y"
argument_list|)
expr_stmt|;
comment|// "Ycirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^y"
argument_list|,
literal|"\\u375y"
argument_list|)
expr_stmt|;
comment|// "ycirc"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"Y"
argument_list|,
literal|"\\u376Y"
argument_list|)
expr_stmt|;
comment|// "Yuml"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'Z"
argument_list|,
literal|"\\u377Z"
argument_list|)
expr_stmt|;
comment|// "Zacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"'z"
argument_list|,
literal|"\\u378z"
argument_list|)
expr_stmt|;
comment|// "zacute"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|".Z"
argument_list|,
literal|"\\u379Z"
argument_list|)
expr_stmt|;
comment|// "Zdot"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|".z"
argument_list|,
literal|"\\u380z"
argument_list|)
expr_stmt|;
comment|// "zdot"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vZ"
argument_list|,
literal|"\\u381Z"
argument_list|)
expr_stmt|;
comment|// "Zcaron"
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"vz"
argument_list|,
literal|"\\u382z"
argument_list|)
expr_stmt|;
comment|// "zcaron"
comment|// Symbol #383 (f) has no special Latex command
comment|// XML_CHARS.put("\\u00E1", "&#x00E1;");
block|}
DECL|method|initializeJournalNames ()
specifier|public
specifier|static
name|void
name|initializeJournalNames
parameter_list|()
block|{
name|journalAbbrev
operator|=
operator|new
name|JournalAbbreviations
argument_list|()
expr_stmt|;
comment|// "/resource/journalList.txt");
comment|// Read external lists, if any (in reverse order, so the upper lists
comment|// override the lower):
name|String
index|[]
name|lists
init|=
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"externalJournalLists"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|lists
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|lists
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|lists
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
try|try
block|{
name|journalAbbrev
operator|.
name|readJournalList
argument_list|(
operator|new
name|File
argument_list|(
name|lists
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// The file couldn't be found... should we tell anyone?
name|Globals
operator|.
name|logger
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Read personal list, if set up:
if|if
condition|(
name|prefs
operator|.
name|get
argument_list|(
literal|"personalJournalList"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|journalAbbrev
operator|.
name|readJournalList
argument_list|(
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"personalJournalList"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"Personal journal list file '"
operator|+
name|prefs
operator|.
name|get
argument_list|(
literal|"personalJournalList"
argument_list|)
operator|+
literal|"' not found."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

