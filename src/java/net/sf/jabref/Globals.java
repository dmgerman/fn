begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* (C) 2003 Nizar N. Batada, Morten O. Alver   All programs in this directory and  subdirectories are published under the GNU General Public License as  described below.   This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or (at  your option) any later version.   This program is distributed in the hope that it will be useful, but  WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  General Public License for more details.   You should have received a copy of the GNU General Public License  along with this program; if not, write to the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA   Further information about the GNU GPL is available at:  http://www.gnu.org/copyleft/gpl.ja.html   */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|collab
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|journals
operator|.
name|JournalAbbreviations
import|;
end_import

begin_class
DECL|class|Globals
specifier|public
class|class
name|Globals
block|{
DECL|field|SHORTCUT_MASK
specifier|public
specifier|static
name|int
name|SHORTCUT_MASK
decl_stmt|,
comment|// = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
DECL|field|FUTURE_YEAR
name|FUTURE_YEAR
init|=
literal|2050
decl_stmt|,
comment|// Needs to give a year definitely in the future. Used for guessing the
comment|// year field when parsing textual data.  :-)
DECL|field|STANDARD_EXPORT_COUNT
name|STANDARD_EXPORT_COUNT
init|=
literal|5
decl_stmt|,
comment|// The number of standard export formats.
DECL|field|METADATA_LINE_LENGTH
name|METADATA_LINE_LENGTH
init|=
literal|70
decl_stmt|;
comment|// The line length used to wrap metadata.
DECL|field|resourcePrefix
specifier|private
specifier|static
name|String
name|resourcePrefix
init|=
literal|"resource/JabRef"
decl_stmt|,
DECL|field|menuResourcePrefix
name|menuResourcePrefix
init|=
literal|"resource/Menu"
decl_stmt|,
DECL|field|integrityResourcePrefix
name|integrityResourcePrefix
init|=
literal|"resource/IntegrityMessage"
decl_stmt|;
DECL|field|buildInfos
specifier|private
specifier|static
specifier|final
name|String
name|buildInfos
init|=
literal|"/resource/build.properties"
decl_stmt|;
DECL|field|logfile
specifier|private
specifier|static
name|String
name|logfile
init|=
literal|"jabref.log"
decl_stmt|;
DECL|field|messages
DECL|field|menuTitles
DECL|field|intMessages
specifier|public
specifier|static
name|ResourceBundle
name|messages
decl_stmt|,
name|menuTitles
decl_stmt|,
name|intMessages
decl_stmt|;
DECL|field|fileUpdateMonitor
specifier|public
specifier|static
name|FileUpdateMonitor
name|fileUpdateMonitor
init|=
operator|new
name|FileUpdateMonitor
argument_list|()
decl_stmt|;
DECL|field|importFormatReader
specifier|public
specifier|static
name|ImportFormatReader
name|importFormatReader
init|=
operator|new
name|ImportFormatReader
argument_list|()
decl_stmt|;
DECL|field|tableCache
specifier|private
specifier|final
specifier|static
name|Map
name|tableCache
init|=
operator|new
name|WeakHashMap
argument_list|()
decl_stmt|;
DECL|field|VERSION
specifier|public
specifier|static
name|String
name|VERSION
decl_stmt|,
DECL|field|BUILD
name|BUILD
decl_stmt|,
DECL|field|BUILD_DATE
name|BUILD_DATE
decl_stmt|;
static|static
block|{
name|TBuildInfo
name|bi
init|=
operator|new
name|TBuildInfo
argument_list|(
name|buildInfos
argument_list|)
decl_stmt|;
name|VERSION
operator|=
name|bi
operator|.
name|getBUILD_VERSION
argument_list|()
expr_stmt|;
name|BUILD
operator|=
name|bi
operator|.
name|getBUILD_NUMBER
argument_list|()
expr_stmt|;
name|BUILD_DATE
operator|=
name|bi
operator|.
name|getBUILD_DATE
argument_list|()
expr_stmt|;
block|}
comment|//public static ResourceBundle preferences = ResourceBundle.getBundle("resource/defaultPrefs");
DECL|field|locale
specifier|public
specifier|static
name|Locale
name|locale
decl_stmt|;
DECL|field|FILETYPE_PREFS_EXT
specifier|public
specifier|static
specifier|final
name|String
name|FILETYPE_PREFS_EXT
init|=
literal|"_dir"
decl_stmt|,
DECL|field|SELECTOR_META_PREFIX
name|SELECTOR_META_PREFIX
init|=
literal|"selector_"
decl_stmt|,
DECL|field|LAYOUT_PREFIX
name|LAYOUT_PREFIX
init|=
literal|"/resource/layout/"
decl_stmt|,
DECL|field|MAC
name|MAC
init|=
literal|"Mac OS X"
decl_stmt|,
DECL|field|DOI_LOOKUP_PREFIX
name|DOI_LOOKUP_PREFIX
init|=
literal|"http://dx.doi.org/"
decl_stmt|,
DECL|field|NONE
name|NONE
init|=
literal|"_non__"
decl_stmt|,
DECL|field|FORMATTER_PACKAGE
name|FORMATTER_PACKAGE
init|=
literal|"net.sf.jabref.export.layout.format."
decl_stmt|;
DECL|field|duplicateThreshold
specifier|public
specifier|static
name|float
name|duplicateThreshold
init|=
literal|0.75f
decl_stmt|;
DECL|field|consoleHandler
specifier|private
specifier|static
name|Handler
name|consoleHandler
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|ConsoleHandler
argument_list|()
decl_stmt|;
DECL|field|ENCODINGS
specifier|public
specifier|static
name|String
index|[]
name|ENCODINGS
init|=
operator|new
name|String
index|[]
block|{
literal|"ISO8859_1"
block|,
literal|"UTF8"
block|,
literal|"UTF-16"
block|,
literal|"ASCII"
block|,
literal|"Cp1250"
block|,
literal|"Cp1251"
block|,
literal|"Cp1252"
block|,
literal|"Cp1253"
block|,
literal|"Cp1254"
block|,
literal|"Cp1257"
block|,
literal|"JIS"
block|,
literal|"SJIS"
block|,
literal|"EUC-JP"
block|,
comment|// Added Japanese encodings.
literal|"Big5"
block|,
literal|"Big5_HKSCS"
block|,
literal|"GBK"
block|,
literal|"ISO8859_2"
block|,
literal|"ISO8859_3"
block|,
literal|"ISO8859_4"
block|,
literal|"ISO8859_5"
block|,
literal|"ISO8859_6"
block|,
literal|"ISO8859_7"
block|,
literal|"ISO8859_8"
block|,
literal|"ISO8859_9"
block|,
literal|"ISO8859_13"
block|,
literal|"ISO8859_15"
block|}
decl_stmt|;
comment|// String array that maps from month number to month string label:
DECL|field|MONTHS
specifier|public
specifier|static
name|String
index|[]
name|MONTHS
init|=
operator|new
name|String
index|[]
block|{
literal|"jan"
block|,
literal|"feb"
block|,
literal|"mar"
block|,
literal|"apr"
block|,
literal|"may"
block|,
literal|"jun"
block|,
literal|"jul"
block|,
literal|"aug"
block|,
literal|"sep"
block|,
literal|"oct"
block|,
literal|"nov"
block|,
literal|"dec"
block|}
decl_stmt|;
comment|// Map that maps from month string labels to
DECL|field|MONTH_STRINGS
specifier|public
specifier|static
name|Map
name|MONTH_STRINGS
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
static|static
block|{
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"jan"
argument_list|,
literal|"January"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"feb"
argument_list|,
literal|"February"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"mar"
argument_list|,
literal|"March"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"apr"
argument_list|,
literal|"April"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"may"
argument_list|,
literal|"May"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"jun"
argument_list|,
literal|"June"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"jul"
argument_list|,
literal|"July"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"aug"
argument_list|,
literal|"August"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"sep"
argument_list|,
literal|"September"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"oct"
argument_list|,
literal|"October"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"nov"
argument_list|,
literal|"November"
argument_list|)
expr_stmt|;
name|MONTH_STRINGS
operator|.
name|put
argument_list|(
literal|"dec"
argument_list|,
literal|"December"
argument_list|)
expr_stmt|;
block|}
DECL|field|focusListener
specifier|public
specifier|static
name|GlobalFocusListener
name|focusListener
init|=
operator|new
name|GlobalFocusListener
argument_list|()
decl_stmt|;
DECL|field|prefs
specifier|public
specifier|static
name|JabRefPreferences
name|prefs
init|=
literal|null
decl_stmt|;
DECL|field|helpDiag
specifier|public
specifier|static
name|HelpDialog
name|helpDiag
init|=
literal|null
decl_stmt|;
DECL|field|osName
specifier|public
specifier|static
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|,
literal|"def"
argument_list|)
decl_stmt|;
DECL|field|ON_MAC
specifier|public
specifier|static
name|boolean
name|ON_MAC
init|=
operator|(
name|osName
operator|.
name|equals
argument_list|(
name|MAC
argument_list|)
operator|)
decl_stmt|,
DECL|field|ON_WIN
name|ON_WIN
init|=
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
DECL|field|SKIP_WORDS
specifier|public
specifier|static
name|String
index|[]
name|SKIP_WORDS
init|=
block|{
literal|"a"
block|,
literal|"an"
block|,
literal|"the"
block|,
literal|"for"
block|,
literal|"on"
block|}
decl_stmt|;
DECL|field|sidePaneManager
specifier|public
specifier|static
name|SidePaneManager
name|sidePaneManager
decl_stmt|;
DECL|field|NEWLINE
specifier|public
specifier|static
specifier|final
name|String
name|NEWLINE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|UNIX_NEWLINE
specifier|public
specifier|static
specifier|final
name|boolean
name|UNIX_NEWLINE
init|=
name|NEWLINE
operator|.
name|equals
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
comment|// true if we have unix newlines.
DECL|method|logger (String s)
specifier|public
specifier|static
name|void
name|logger
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|Logger
operator|.
name|global
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|turnOffLogging ()
specifier|public
specifier|static
name|void
name|turnOffLogging
parameter_list|()
block|{
comment|// only log exceptions
name|Logger
operator|.
name|global
operator|.
name|setLevel
argument_list|(
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
operator|.
name|SEVERE
argument_list|)
expr_stmt|;
block|}
comment|// should be only called once
DECL|method|turnOnConsoleLogging ()
specifier|public
specifier|static
name|void
name|turnOnConsoleLogging
parameter_list|()
block|{
name|Logger
operator|.
name|global
operator|.
name|addHandler
argument_list|(
name|consoleHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|turnOnFileLogging ()
specifier|public
specifier|static
name|void
name|turnOnFileLogging
parameter_list|()
block|{
name|Logger
operator|.
name|global
operator|.
name|setLevel
argument_list|(
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
name|handler
decl_stmt|;
name|handler
operator|=
operator|new
name|ConsoleHandler
argument_list|()
expr_stmt|;
comment|/*try {       handler = new FileHandler(logfile); // this will overwrite     }     catch (IOException e) { //can't open log file so use console         e.printStackTrace();      } */
name|Logger
operator|.
name|global
operator|.
name|addHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setFilter
argument_list|(
operator|new
name|Filter
argument_list|()
block|{
comment|// select what gets logged
specifier|public
name|boolean
name|isLoggable
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * String constants.    */
specifier|public
specifier|static
specifier|final
name|String
DECL|field|KEY_FIELD
name|KEY_FIELD
init|=
literal|"bibtexkey"
decl_stmt|,
DECL|field|SEARCH
name|SEARCH
init|=
literal|"__search"
decl_stmt|,
DECL|field|GROUPSEARCH
name|GROUPSEARCH
init|=
literal|"__groupsearch"
decl_stmt|,
DECL|field|MARKED
name|MARKED
init|=
literal|"__markedentry"
decl_stmt|,
DECL|field|OWNER
name|OWNER
init|=
literal|"owner"
decl_stmt|,
comment|// Using this when I have no database open when I read
comment|// non bibtex file formats (used byte ImportFormatReader.java
DECL|field|DEFAULT_BIBTEXENTRY_ID
name|DEFAULT_BIBTEXENTRY_ID
init|=
literal|"__ID"
decl_stmt|;
DECL|method|setLanguage (String language, String country)
specifier|public
specifier|static
name|void
name|setLanguage
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|country
parameter_list|)
block|{
name|locale
operator|=
operator|new
name|Locale
argument_list|(
name|language
argument_list|,
name|country
argument_list|)
expr_stmt|;
name|messages
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|resourcePrefix
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|menuTitles
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|menuResourcePrefix
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|intMessages
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|integrityResourcePrefix
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|Locale
operator|.
name|setDefault
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|javax
operator|.
name|swing
operator|.
name|JComponent
operator|.
name|setDefaultLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the cached value from the tableChache WeakHashMap.    */
DECL|method|getCached (String text)
specifier|public
specifier|static
name|String
name|getCached
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Object
name|res
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|text
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|res
return|;
block|}
comment|/**    * Caches a new value in the tableCache WeakHashMap.    */
DECL|method|cache (String text, String textProcessed)
specifier|public
specifier|static
name|void
name|cache
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|textProcessed
parameter_list|)
block|{
name|tableCache
operator|.
name|put
argument_list|(
name|text
argument_list|,
name|textProcessed
argument_list|)
expr_stmt|;
comment|//System.out.println(tableCache.size());
block|}
DECL|field|journalAbbrev
specifier|public
specifier|static
name|JournalAbbreviations
name|journalAbbrev
decl_stmt|;
DECL|method|lang (String key, String[] params)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|,
name|String
index|[]
name|params
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Globals
operator|.
name|messages
operator|!=
literal|null
condition|)
block|{
name|translation
operator|=
name|Globals
operator|.
name|messages
operator|.
name|getString
argument_list|(
name|key
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
name|translation
operator|=
name|key
expr_stmt|;
comment|/*logger("Warning: could not get translation for \""                          + key + "\"");*/
block|}
if|if
condition|(
operator|(
name|translation
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|translation
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
name|translation
operator|=
name|translation
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
literal|false
decl_stmt|;
name|char
name|c
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|translation
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|c
operator|=
name|translation
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'%'
condition|)
block|{
name|b
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<=
name|params
operator|.
name|length
condition|)
name|sb
operator|.
name|append
argument_list|(
name|params
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// append literally (for quoting) or insert special symbol
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'c'
case|:
comment|// colon
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
comment|// equal
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// anything else, e.g. %
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|key
return|;
block|}
DECL|method|lang (String key)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|lang
argument_list|(
name|key
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
return|;
block|}
DECL|method|lang (String key, String s1)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
return|return
name|lang
argument_list|(
name|key
argument_list|,
operator|new
name|String
index|[]
block|{
name|s1
block|}
argument_list|)
return|;
block|}
DECL|method|lang (String key, String s1, String s2)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|lang
argument_list|(
name|key
argument_list|,
operator|new
name|String
index|[]
block|{
name|s1
block|,
name|s2
block|}
argument_list|)
return|;
block|}
DECL|method|lang (String key, String s1, String s2, String s3)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|,
name|String
name|s3
parameter_list|)
block|{
return|return
name|lang
argument_list|(
name|key
argument_list|,
operator|new
name|String
index|[]
block|{
name|s1
block|,
name|s2
block|,
name|s3
block|}
argument_list|)
return|;
block|}
DECL|method|menuTitle (String key)
specifier|public
specifier|static
name|String
name|menuTitle
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Globals
operator|.
name|messages
operator|!=
literal|null
condition|)
block|{
name|translation
operator|=
name|Globals
operator|.
name|menuTitles
operator|.
name|getString
argument_list|(
name|key
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
name|translation
operator|=
name|key
expr_stmt|;
comment|//      System.err.println("Warning: could not get menu item translation for \""
comment|//                         + key + "\"");
block|}
if|if
condition|(
operator|(
name|translation
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|translation
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
return|return
name|translation
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
DECL|method|getIntegrityMessage (String key)
specifier|public
specifier|static
name|String
name|getIntegrityMessage
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Globals
operator|.
name|intMessages
operator|!=
literal|null
condition|)
block|{
name|translation
operator|=
name|Globals
operator|.
name|intMessages
operator|.
name|getString
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
name|translation
operator|=
name|key
expr_stmt|;
comment|//      System.err.println("Warning: could not get menu item translation for \""
comment|//                         + key + "\"");
block|}
if|if
condition|(
operator|(
name|translation
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|translation
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
return|return
name|translation
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
comment|//============================================================
comment|// Using the hashmap of entry types found in BibtexEntryType
comment|//============================================================
DECL|method|getEntryType (String type)
specifier|public
specifier|static
name|BibtexEntryType
name|getEntryType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
comment|// decide which entryType object to return
name|Object
name|o
init|=
name|BibtexEntryType
operator|.
name|ALL_TYPES
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|BibtexEntryType
operator|)
name|o
return|;
block|}
else|else
block|{
return|return
name|BibtexEntryType
operator|.
name|OTHER
return|;
block|}
comment|/*       if(type.equals("article"))         return BibtexEntryType.ARTICLE;       else if(type.equals("book"))         return BibtexEntryType.BOOK;       else if(type.equals("inproceedings"))         return BibtexEntryType.INPROCEEDINGS;      */
block|}
comment|/**      * This method provides the correct opening brace to use when writing a field      * to BibTeX format.      * @return A String containing the braces to use.      */
DECL|method|getOpeningBrace ()
specifier|public
specifier|static
name|String
name|getOpeningBrace
parameter_list|()
block|{
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoDoubleBraces"
argument_list|)
condition|)
return|return
literal|"{{"
return|;
else|else
return|return
literal|"{"
return|;
block|}
comment|/**      * This method provides the correct closing brace to use when writing a field      * to BibTeX format.      * @return A String containing the braces to use.      */
DECL|method|getClosingBrace ()
specifier|public
specifier|static
name|String
name|getClosingBrace
parameter_list|()
block|{
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoDoubleBraces"
argument_list|)
condition|)
return|return
literal|"}}"
return|;
else|else
return|return
literal|"}"
return|;
block|}
comment|/*    public static void setupKeyBindings(JabRefPreferences prefs) {     }*/
DECL|method|getNewFile (JFrame owner, JabRefPreferences prefs, File directory, String extension, int dialogType, boolean updateWorkingDirectory)
specifier|public
specifier|static
name|String
name|getNewFile
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|)
block|{
return|return
name|getNewFile
argument_list|(
name|owner
argument_list|,
name|prefs
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getNewFile (JFrame owner, JabRefPreferences prefs, File directory, String extension, OpenFileFilter off, int dialogType, boolean updateWorkingDirectory)
specifier|public
specifier|static
name|String
name|getNewFile
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|OpenFileFilter
name|off
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|)
block|{
return|return
name|getNewFile
argument_list|(
name|owner
argument_list|,
name|prefs
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
name|off
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getNewDir (JFrame owner, JabRefPreferences prefs, File directory, String extension, int dialogType, boolean updateWorkingDirectory)
specifier|public
specifier|static
name|String
name|getNewDir
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|)
block|{
return|return
name|getNewFile
argument_list|(
name|owner
argument_list|,
name|prefs
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getNewFile (JFrame owner, JabRefPreferences prefs, File directory, String extension, int dialogType, boolean updateWorkingDirectory, boolean dirOnly)
specifier|private
specifier|static
name|String
name|getNewFile
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|,
name|boolean
name|dirOnly
parameter_list|)
block|{
name|OpenFileFilter
name|off
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|extension
operator|==
literal|null
condition|)
name|off
operator|=
operator|new
name|OpenFileFilter
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|extension
operator|.
name|equals
argument_list|(
name|NONE
argument_list|)
condition|)
name|off
operator|=
operator|new
name|OpenFileFilter
argument_list|(
name|extension
argument_list|)
expr_stmt|;
return|return
name|getNewFile
argument_list|(
name|owner
argument_list|,
name|prefs
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
name|off
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
name|dirOnly
argument_list|)
return|;
block|}
DECL|method|getNewFile (JFrame owner, JabRefPreferences prefs, File directory, String extension, OpenFileFilter off, int dialogType, boolean updateWorkingDirectory, boolean dirOnly)
specifier|private
specifier|static
name|String
name|getNewFile
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extension
parameter_list|,
name|OpenFileFilter
name|off
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|,
name|boolean
name|dirOnly
parameter_list|)
block|{
if|if
condition|(
name|ON_MAC
condition|)
block|{
return|return
name|getNewFileForMac
argument_list|(
name|owner
argument_list|,
name|prefs
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
name|dirOnly
argument_list|,
name|off
argument_list|)
return|;
block|}
name|JFileChooser
name|fc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fc
operator|=
operator|new
name|JabRefFileChooser
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InternalError
name|errl
parameter_list|)
block|{
comment|// This try/catch clause was added because a user reported an
comment|// InternalError getting thrown on WinNT, presumably because of a
comment|// bug in JGoodies Windows PLAF. This clause can be removed if the
comment|// bug is fixed, but for now we just resort to the native file
comment|// dialog, using the same method as is always used on Mac:
return|return
name|getNewFileForMac
argument_list|(
name|owner
argument_list|,
name|prefs
argument_list|,
name|directory
argument_list|,
name|extension
argument_list|,
name|dialogType
argument_list|,
name|updateWorkingDirectory
argument_list|,
name|dirOnly
argument_list|,
name|off
argument_list|)
return|;
block|}
if|if
condition|(
name|dirOnly
condition|)
block|{
name|fc
operator|.
name|setFileSelectionMode
argument_list|(
name|JFileChooser
operator|.
name|DIRECTORIES_ONLY
argument_list|)
expr_stmt|;
block|}
name|fc
operator|.
name|addChoosableFileFilter
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setDialogType
argument_list|(
name|dialogType
argument_list|)
expr_stmt|;
name|int
name|dialogResult
init|=
name|JFileChooser
operator|.
name|CANCEL_OPTION
decl_stmt|;
if|if
condition|(
name|dialogType
operator|==
name|JFileChooser
operator|.
name|OPEN_DIALOG
condition|)
block|{
name|dialogResult
operator|=
name|fc
operator|.
name|showOpenDialog
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dialogResult
operator|=
name|fc
operator|.
name|showSaveDialog
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// the getSelectedFile method returns a valid fileselection
comment|// (if something is selected) indepentently from dialog return status
if|if
condition|(
name|dialogResult
operator|!=
name|JFileChooser
operator|.
name|APPROVE_OPTION
condition|)
return|return
literal|null
return|;
comment|// okay button
name|File
name|selectedFile
init|=
name|fc
operator|.
name|getSelectedFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedFile
operator|==
literal|null
condition|)
block|{
comment|// cancel
return|return
literal|null
return|;
block|}
comment|// If this is a save dialog, and the user has not chosen "All files" as filter
comment|// we enforce the given extension. But only if extension is not null.
if|if
condition|(
operator|(
name|extension
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dialogType
operator|==
name|JFileChooser
operator|.
name|SAVE_DIALOG
operator|)
operator|&&
operator|(
name|fc
operator|.
name|getFileFilter
argument_list|()
operator|==
name|off
operator|)
operator|&&
operator|!
name|off
operator|.
name|accept
argument_list|(
name|selectedFile
argument_list|)
condition|)
block|{
comment|// add the first extension if there are multiple extensions
name|selectedFile
operator|=
operator|new
name|File
argument_list|(
name|selectedFile
operator|.
name|getPath
argument_list|()
operator|+
name|extension
operator|.
name|split
argument_list|(
literal|"[, ]+"
argument_list|,
literal|0
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateWorkingDirectory
condition|)
block|{
name|prefs
operator|.
name|put
argument_list|(
literal|"workingDirectory"
argument_list|,
name|selectedFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|selectedFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
DECL|method|getNewFileForMac (JFrame owner, JabRefPreferences prefs, File directory, String extensions, int dialogType, boolean updateWorkingDirectory, boolean dirOnly, FilenameFilter filter)
specifier|private
specifier|static
name|String
name|getNewFileForMac
parameter_list|(
name|JFrame
name|owner
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|,
name|File
name|directory
parameter_list|,
name|String
name|extensions
parameter_list|,
name|int
name|dialogType
parameter_list|,
name|boolean
name|updateWorkingDirectory
parameter_list|,
name|boolean
name|dirOnly
parameter_list|,
name|FilenameFilter
name|filter
parameter_list|)
block|{
name|FileDialog
name|fc
init|=
operator|new
name|FileDialog
argument_list|(
name|owner
argument_list|)
decl_stmt|;
comment|//fc.setFilenameFilter(filter);
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
name|fc
operator|.
name|setDirectory
argument_list|(
name|directory
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dialogType
operator|==
name|JFileChooser
operator|.
name|OPEN_DIALOG
condition|)
block|{
name|fc
operator|.
name|setMode
argument_list|(
name|FileDialog
operator|.
name|LOAD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fc
operator|.
name|setMode
argument_list|(
name|FileDialog
operator|.
name|SAVE
argument_list|)
expr_stmt|;
block|}
name|fc
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|fc
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|prefs
operator|.
name|put
argument_list|(
literal|"workingDirectory"
argument_list|,
name|fc
operator|.
name|getDirectory
argument_list|()
operator|+
name|fc
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fc
operator|.
name|getDirectory
argument_list|()
operator|+
name|fc
operator|.
name|getFile
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|field|SPECIAL_COMMAND_CHARS
specifier|public
specifier|static
name|String
name|SPECIAL_COMMAND_CHARS
init|=
literal|"\"`^~'c"
decl_stmt|;
DECL|field|HTML_CHARS
specifier|public
specifier|static
name|HashMap
name|HTML_CHARS
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|,
DECL|field|HTMLCHARS
name|HTMLCHARS
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|,
DECL|field|XML_CHARS
name|XML_CHARS
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|,
DECL|field|UNICODE_CHARS
name|UNICODE_CHARS
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|,
DECL|field|RTFCHARS
name|RTFCHARS
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
static|static
block|{
comment|//System.out.println(journalAbbrev.getAbbreviatedName("Journal of Fish Biology", true));
comment|//System.out.println(journalAbbrev.getAbbreviatedName("Journal of Fish Biology", false));
comment|//System.out.println(journalAbbrev.getFullName("Aquaculture Eng."));
comment|/*for (Iterator i=journalAbbrev.fullNameIterator(); i.hasNext();) {           String s = (String)i.next();           System.out.println(journalAbbrev.getFullName(s)+" : "+journalAbbrev.getAbbreviatedName(s, true));       } */
comment|// Start the thread that monitors file time stamps.
comment|//Util.pr("Starting FileUpdateMonitor thread. Globals line 293.");
name|fileUpdateMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|SHORTCUT_MASK
operator|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getMenuShortcutKeyMask
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{      }
comment|/*     HTML_CHARS.put("\\{\\\\\\\"\\{a\\}\\}", "&auml;");     HTML_CHARS.put("\\{\\\\\\\"\\{A\\}\\}", "&Auml;");     HTML_CHARS.put("\\{\\\\\\\"\\{e\\}\\}", "&euml;");     HTML_CHARS.put("\\{\\\\\\\"\\{E\\}\\}", "&Euml;");     HTML_CHARS.put("\\{\\\\\\\"\\{i\\}\\}", "&iuml;");     HTML_CHARS.put("\\{\\\\\\\"\\{I\\}\\}", "&Iuml;");     HTML_CHARS.put("\\{\\\\\\\"\\{o\\}\\}", "&ouml;");     HTML_CHARS.put("\\{\\\\\\\"\\{O\\}\\}", "&Ouml;");     HTML_CHARS.put("\\{\\\\\\\"\\{u\\}\\}", "&uuml;");     HTML_CHARS.put("\\{\\\\\\\"\\{U\\}\\}", "&Uuml;");      HTML_CHARS.put("\\{\\\\\\`\\{e\\}\\}", "&egrave;");     HTML_CHARS.put("\\{\\\\\\`\\{E\\}\\}", "&Egrave;");     HTML_CHARS.put("\\{\\\\\\`\\{i\\}\\}", "&igrave;");     HTML_CHARS.put("\\{\\\\\\`\\{I\\}\\}", "&Igrave;");     HTML_CHARS.put("\\{\\\\\\`\\{o\\}\\}", "&ograve;");     HTML_CHARS.put("\\{\\\\\\`\\{O\\}\\}", "&Ograve;");     HTML_CHARS.put("\\{\\\\\\`\\{u\\}\\}", "&ugrave;");     HTML_CHARS.put("\\{\\\\\\`\\{U\\}\\}", "&Ugrave;");      HTML_CHARS.put("\\{\\\\\\'\\{e\\}\\}", "&eacute;");     HTML_CHARS.put("\\{\\\\\\'\\{E\\}\\}", "&Eacute;");     HTML_CHARS.put("\\{\\\\\\'\\{i\\}\\}", "&iacute;");     HTML_CHARS.put("\\{\\\\\\'\\{I\\}\\}", "&Iacute;");     HTML_CHARS.put("\\{\\\\\\'\\{o\\}\\}", "&oacute;");     HTML_CHARS.put("\\{\\\\\\'\\{O\\}\\}", "&Oacute;");     HTML_CHARS.put("\\{\\\\\\'\\{u\\}\\}", "&uacute;");     HTML_CHARS.put("\\{\\\\\\'\\{U\\}\\}", "&Uacute;");     HTML_CHARS.put("\\{\\\\\\'\\{a\\}\\}", "&aacute;");     HTML_CHARS.put("\\{\\\\\\'\\{A\\}\\}", "&Aacute;");     HTML_CHARS.put("\\{\\\\\\^\\{o\\}\\}", "&ocirc;");     HTML_CHARS.put("\\{\\\\\\^\\{O\\}\\}", "&Ocirc;");     HTML_CHARS.put("\\{\\\\\\^\\{u\\}\\}", "&ucirc;");     HTML_CHARS.put("\\{\\\\\\^\\{U\\}\\}", "&Ucirc;");     HTML_CHARS.put("\\{\\\\\\^\\{e\\}\\}", "&ecirc;");     HTML_CHARS.put("\\{\\\\\\^\\{E\\}\\}", "&Ecirc;");     HTML_CHARS.put("\\{\\\\\\^\\{i\\}\\}", "&icirc;");     HTML_CHARS.put("\\{\\\\\\^\\{I\\}\\}", "&Icirc;");     HTML_CHARS.put("\\{\\\\\\~\\{o\\}\\}", "&otilde;");     HTML_CHARS.put("\\{\\\\\\~\\{O\\}\\}", "&Otilde;");     HTML_CHARS.put("\\{\\\\\\~\\{n\\}\\}", "&ntilde;");     HTML_CHARS.put("\\{\\\\\\~\\{N\\}\\}", "&Ntilde;");     HTML_CHARS.put("\\{\\\\\\~\\{a\\}\\}", "&atilde;");     HTML_CHARS.put("\\{\\\\\\~\\{A\\}\\}", "&Atilde;");     */
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"a"
argument_list|,
literal|"&auml;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"A"
argument_list|,
literal|"&Auml;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"e"
argument_list|,
literal|"&euml;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"E"
argument_list|,
literal|"&Euml;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"i"
argument_list|,
literal|"&iuml;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"I"
argument_list|,
literal|"&Iuml;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"o"
argument_list|,
literal|"&ouml;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"O"
argument_list|,
literal|"&Ouml;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"u"
argument_list|,
literal|"&uuml;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"\"U"
argument_list|,
literal|"&Uuml;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`a"
argument_list|,
literal|"&agrave;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`A"
argument_list|,
literal|"&Agrave;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`e"
argument_list|,
literal|"&egrave;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`E"
argument_list|,
literal|"&Egrave;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`i"
argument_list|,
literal|"&igrave;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`I"
argument_list|,
literal|"&Igrave;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`o"
argument_list|,
literal|"&ograve;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`O"
argument_list|,
literal|"&Ograve;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`u"
argument_list|,
literal|"&ugrave;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"`U"
argument_list|,
literal|"&Ugrave;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'e"
argument_list|,
literal|"&eacute;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'E"
argument_list|,
literal|"&Eacute;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'i"
argument_list|,
literal|"&iacute;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'I"
argument_list|,
literal|"&Iacute;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'o"
argument_list|,
literal|"&oacute;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'O"
argument_list|,
literal|"&Oacute;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'u"
argument_list|,
literal|"&uacute;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'U"
argument_list|,
literal|"&Uacute;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'a"
argument_list|,
literal|"&aacute;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"'A"
argument_list|,
literal|"&Aacute;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^o"
argument_list|,
literal|"&ocirc;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^O"
argument_list|,
literal|"&Ocirc;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^u"
argument_list|,
literal|"&ucirc;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^U"
argument_list|,
literal|"&Ucirc;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^e"
argument_list|,
literal|"&ecirc;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^E"
argument_list|,
literal|"&Ecirc;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^i"
argument_list|,
literal|"&icirc;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"^I"
argument_list|,
literal|"&Icirc;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~o"
argument_list|,
literal|"&otilde;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~O"
argument_list|,
literal|"&Otilde;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~n"
argument_list|,
literal|"&ntilde;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~N"
argument_list|,
literal|"&Ntilde;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~a"
argument_list|,
literal|"&atilde;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"~A"
argument_list|,
literal|"&Atilde;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cc"
argument_list|,
literal|"&ccedil;"
argument_list|)
expr_stmt|;
name|HTMLCHARS
operator|.
name|put
argument_list|(
literal|"cC"
argument_list|,
literal|"&Ccedil;"
argument_list|)
expr_stmt|;
comment|/*     HTML_CHARS.put("\\{\\\\\\\"a\\}", "&auml;");     HTML_CHARS.put("\\{\\\\\\\"A\\}", "&Auml;");     HTML_CHARS.put("\\{\\\\\\\"e\\}", "&euml;");     HTML_CHARS.put("\\{\\\\\\\"E\\}", "&Euml;");     HTML_CHARS.put("\\{\\\\\\\"i\\}", "&iuml;");     HTML_CHARS.put("\\{\\\\\\\"I\\}", "&Iuml;");     HTML_CHARS.put("\\{\\\\\\\"o\\}", "&ouml;");     HTML_CHARS.put("\\{\\\\\\\"O\\}", "&Ouml;");     HTML_CHARS.put("\\{\\\\\\\"u\\}", "&uuml;");     HTML_CHARS.put("\\{\\\\\\\"U\\}", "&Uuml;");      HTML_CHARS.put("\\{\\\\\\`e\\}", "&egrave;");     HTML_CHARS.put("\\{\\\\\\`E\\}", "&Egrave;");     HTML_CHARS.put("\\{\\\\\\`i\\}", "&igrave;");     HTML_CHARS.put("\\{\\\\\\`I\\}", "&Igrave;");     HTML_CHARS.put("\\{\\\\\\`o\\}", "&ograve;");     HTML_CHARS.put("\\{\\\\\\`O\\}", "&Ograve;");     HTML_CHARS.put("\\{\\\\\\`u\\}", "&ugrave;");     HTML_CHARS.put("\\{\\\\\\`U\\}", "&Ugrave;");     HTML_CHARS.put("\\{\\\\\\'A\\}", "&eacute;");     HTML_CHARS.put("\\{\\\\\\'E\\}", "&Eacute;");     HTML_CHARS.put("\\{\\\\\\'i\\}", "&iacute;");     HTML_CHARS.put("\\{\\\\\\'I\\}", "&Iacute;");     HTML_CHARS.put("\\{\\\\\\'o\\}", "&oacute;");     HTML_CHARS.put("\\{\\\\\\'O\\}", "&Oacute;");     HTML_CHARS.put("\\{\\\\\\'u\\}", "&uacute;");     HTML_CHARS.put("\\{\\\\\\'U\\}", "&Uacute;");     HTML_CHARS.put("\\{\\\\\\'a\\}", "&aacute;");     HTML_CHARS.put("\\{\\\\\\'A\\}", "&Aacute;");      HTML_CHARS.put("\\{\\\\\\^o\\}", "&ocirc;");     HTML_CHARS.put("\\{\\\\\\^O\\}", "&Ocirc;");     HTML_CHARS.put("\\{\\\\\\^u\\}", "&ucirc;");     HTML_CHARS.put("\\{\\\\\\^U\\}", "&Ucirc;");     HTML_CHARS.put("\\{\\\\\\^e\\}", "&ecirc;");     HTML_CHARS.put("\\{\\\\\\^E\\}", "&Ecirc;");     HTML_CHARS.put("\\{\\\\\\^i\\}", "&icirc;");     HTML_CHARS.put("\\{\\\\\\^I\\}", "&Icirc;");     HTML_CHARS.put("\\{\\\\\\~o\\}", "&otilde;");     HTML_CHARS.put("\\{\\\\\\~O\\}", "&Otilde;");     HTML_CHARS.put("\\{\\\\\\~n\\}", "&ntilde;");     HTML_CHARS.put("\\{\\\\\\~N\\}", "&Ntilde;");     HTML_CHARS.put("\\{\\\\\\~a\\}", "&atilde;");     HTML_CHARS.put("\\{\\\\\\~A\\}", "&Atilde;");      HTML_CHARS.put("\\{\\\\c c\\}", "&ccedil;");     HTML_CHARS.put("\\{\\\\c C\\}", "&Ccedil;");     */
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{a\\}\\}"
argument_list|,
literal|"&#x00E4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{A\\}\\}"
argument_list|,
literal|"&#x00C4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{e\\}\\}"
argument_list|,
literal|"&#x00EB;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{E\\}\\}"
argument_list|,
literal|"&#x00CB;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{i\\}\\}"
argument_list|,
literal|"&#x00EF;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{I\\}\\}"
argument_list|,
literal|"&#x00CF;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{o\\}\\}"
argument_list|,
literal|"&#x00F6;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{O\\}\\}"
argument_list|,
literal|"&#x00D6;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{u\\}\\}"
argument_list|,
literal|"&#x00FC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"\\{U\\}\\}"
argument_list|,
literal|"&#x00DC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{e\\}\\}"
argument_list|,
literal|"&#x00E8;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{E\\}\\}"
argument_list|,
literal|"&#x00C8;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{i\\}\\}"
argument_list|,
literal|"&#x00EC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{I\\}\\}"
argument_list|,
literal|"&#x00CC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{o\\}\\}"
argument_list|,
literal|"&#x00F2;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{O\\}\\}"
argument_list|,
literal|"&#x00D2;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{u\\}\\}"
argument_list|,
literal|"&#x00F9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`\\{U\\}\\}"
argument_list|,
literal|"&#x00D9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'\\{e\\}\\}"
argument_list|,
literal|"&#x00E9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{E\\}\\}"
argument_list|,
literal|"&#x00C9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{i\\}\\}"
argument_list|,
literal|"&#x00ED;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{I\\}\\}"
argument_list|,
literal|"&#x00CD;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{o\\}\\}"
argument_list|,
literal|"&#x00F3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{O\\}\\}"
argument_list|,
literal|"&#x00D3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{u\\}\\}"
argument_list|,
literal|"&#x00FA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{U\\}\\}"
argument_list|,
literal|"&#x00DA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{a\\}\\}"
argument_list|,
literal|"&#x00E1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\uFFFD\\{A\\}\\}"
argument_list|,
literal|"&#x00C1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{o\\}\\}"
argument_list|,
literal|"&#x00F4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{O\\}\\}"
argument_list|,
literal|"&#x00D4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{u\\}\\}"
argument_list|,
literal|"&#x00F9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{U\\}\\}"
argument_list|,
literal|"&#x00D9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{e\\}\\}"
argument_list|,
literal|"&#x00EA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{E\\}\\}"
argument_list|,
literal|"&#x00CA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{i\\}\\}"
argument_list|,
literal|"&#x00EE;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^\\{I\\}\\}"
argument_list|,
literal|"&#x00CE;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{o\\}\\}"
argument_list|,
literal|"&#x00F5;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{O\\}\\}"
argument_list|,
literal|"&#x00D5;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{n\\}\\}"
argument_list|,
literal|"&#x00F1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{N\\}\\}"
argument_list|,
literal|"&#x00D1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{a\\}\\}"
argument_list|,
literal|"&#x00E3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~\\{A\\}\\}"
argument_list|,
literal|"&#x00C3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"a\\}"
argument_list|,
literal|"&#x00E4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"A\\}"
argument_list|,
literal|"&#x00C4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"e\\}"
argument_list|,
literal|"&#x00EB;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"E\\}"
argument_list|,
literal|"&#x00CB;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"i\\}"
argument_list|,
literal|"&#x00EF;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"I\\}"
argument_list|,
literal|"&#x00CF;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"o\\}"
argument_list|,
literal|"&#x00F6;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"O\\}"
argument_list|,
literal|"&#x00D6;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"u\\}"
argument_list|,
literal|"&#x00FC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\\"U\\}"
argument_list|,
literal|"&#x00DC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`e\\}"
argument_list|,
literal|"&#x00E8;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`E\\}"
argument_list|,
literal|"&#x00C8;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`i\\}"
argument_list|,
literal|"&#x00EC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`I\\}"
argument_list|,
literal|"&#x00CC;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`o\\}"
argument_list|,
literal|"&#x00F2;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`O\\}"
argument_list|,
literal|"&#x00D2;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`u\\}"
argument_list|,
literal|"&#x00F9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\`U\\}"
argument_list|,
literal|"&#x00D9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'e\\}"
argument_list|,
literal|"&#x00E9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'E\\}"
argument_list|,
literal|"&#x00C9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'i\\}"
argument_list|,
literal|"&#x00ED;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'I\\}"
argument_list|,
literal|"&#x00CD;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'o\\}"
argument_list|,
literal|"&#x00F3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'O\\}"
argument_list|,
literal|"&#x00D3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'u\\}"
argument_list|,
literal|"&#x00FA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'U\\}"
argument_list|,
literal|"&#x00DA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'a\\}"
argument_list|,
literal|"&#x00E1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\'A\\}"
argument_list|,
literal|"&#x00C1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^o\\}"
argument_list|,
literal|"&#x00F4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^O\\}"
argument_list|,
literal|"&#x00D4;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^u\\}"
argument_list|,
literal|"&#x00F9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^U\\}"
argument_list|,
literal|"&#x00D9;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^e\\}"
argument_list|,
literal|"&#x00EA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^E\\}"
argument_list|,
literal|"&#x00CA;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^i\\}"
argument_list|,
literal|"&#x00EE;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\^I\\}"
argument_list|,
literal|"&#x00CE;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~o\\}"
argument_list|,
literal|"&#x00F5;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~O\\}"
argument_list|,
literal|"&#x00D5;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~n\\}"
argument_list|,
literal|"&#x00F1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~N\\}"
argument_list|,
literal|"&#x00D1;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~a\\}"
argument_list|,
literal|"&#x00E3;"
argument_list|)
expr_stmt|;
name|XML_CHARS
operator|.
name|put
argument_list|(
literal|"\\{\\\\\\~A\\}"
argument_list|,
literal|"&#x00C3;"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C0"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C1"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C2"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C3"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C4"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C5"
argument_list|,
literal|"Aa"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C6"
argument_list|,
literal|"Ae"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C7"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C8"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00C9"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CA"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CB"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CC"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CD"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CE"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00CF"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D0"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D1"
argument_list|,
literal|"N"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D2"
argument_list|,
literal|"O"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D3"
argument_list|,
literal|"O"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D4"
argument_list|,
literal|"O"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D5"
argument_list|,
literal|"O"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D6"
argument_list|,
literal|"Oe"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D8"
argument_list|,
literal|"Oe"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00D9"
argument_list|,
literal|"U"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00DA"
argument_list|,
literal|"U"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00DB"
argument_list|,
literal|"U"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00DC"
argument_list|,
literal|"Ue"
argument_list|)
expr_stmt|;
comment|// U umlaut ..
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00DD"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00DF"
argument_list|,
literal|"ss"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E0"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E1"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E2"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E3"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E4"
argument_list|,
literal|"ae"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E5"
argument_list|,
literal|"aa"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E6"
argument_list|,
literal|"ae"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E7"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E8"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00E9"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00EA"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00EB"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00EC"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00ED"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00EE"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00EF"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F0"
argument_list|,
literal|"o"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F1"
argument_list|,
literal|"n"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F2"
argument_list|,
literal|"o"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F3"
argument_list|,
literal|"o"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F4"
argument_list|,
literal|"o"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F5"
argument_list|,
literal|"o"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F6"
argument_list|,
literal|"oe"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F8"
argument_list|,
literal|"oe"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00F9"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00FA"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00FB"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00FC"
argument_list|,
literal|"ue"
argument_list|)
expr_stmt|;
comment|// u umlaut...
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00FD"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u00FF"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0100"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0101"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0102"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0103"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0104"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0105"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0106"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0107"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0108"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0109"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010A"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010B"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010C"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010D"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010E"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u010F"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0110"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0111"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0112"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0113"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0114"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0115"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0116"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0117"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0118"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0119"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011A"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011B"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011C"
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011D"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011E"
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u011F"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0120"
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0121"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0122"
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0123"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0124"
argument_list|,
literal|"H"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0125"
argument_list|,
literal|"h"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0127"
argument_list|,
literal|"h"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0128"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u0129"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u012A"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u012B"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u012C"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|UNICODE_CHARS
operator|.
name|put
argument_list|(
literal|"\u012D"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
comment|//UNICODE_CHARS.put("\u0100", "");
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`a"
argument_list|,
literal|"\\'e0"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`e"
argument_list|,
literal|"\\'e8"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`i"
argument_list|,
literal|"\\'ec"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`o"
argument_list|,
literal|"\\'f2"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`u"
argument_list|,
literal|"\\'f9"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?a"
argument_list|,
literal|"\\'e1"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?e"
argument_list|,
literal|"\\'e9"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?i"
argument_list|,
literal|"\\'ed"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?o"
argument_list|,
literal|"\\'f3"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?u"
argument_list|,
literal|"\\'fa"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^a"
argument_list|,
literal|"\\'e2"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^e"
argument_list|,
literal|"\\'ea"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^i"
argument_list|,
literal|"\\'ee"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^o"
argument_list|,
literal|"\\'f4"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^u"
argument_list|,
literal|"\\'fa"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"a"
argument_list|,
literal|"\\'e4"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"e"
argument_list|,
literal|"\\'eb"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"i"
argument_list|,
literal|"\\'ef"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"o"
argument_list|,
literal|"\\'f6"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"u"
argument_list|,
literal|"\\'fc"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"~n"
argument_list|,
literal|"\\'f1"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`A"
argument_list|,
literal|"\\'c0"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`E"
argument_list|,
literal|"\\'c8"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`I"
argument_list|,
literal|"\\'cc"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`O"
argument_list|,
literal|"\\'d2"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"`U"
argument_list|,
literal|"\\'d9"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?A"
argument_list|,
literal|"\\'c1"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?E"
argument_list|,
literal|"\\'c9"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?I"
argument_list|,
literal|"\\'cd"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?O"
argument_list|,
literal|"\\'d3"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"?U"
argument_list|,
literal|"\\'da"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^A"
argument_list|,
literal|"\\'c2"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^E"
argument_list|,
literal|"\\'ca"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^I"
argument_list|,
literal|"\\'ce"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^O"
argument_list|,
literal|"\\'d4"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"^U"
argument_list|,
literal|"\\'db"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"A"
argument_list|,
literal|"\\'c4"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"E"
argument_list|,
literal|"\\'cb"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"I"
argument_list|,
literal|"\\'cf"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"O"
argument_list|,
literal|"\\'d6"
argument_list|)
expr_stmt|;
name|RTFCHARS
operator|.
name|put
argument_list|(
literal|"\"U"
argument_list|,
literal|"\\'dc"
argument_list|)
expr_stmt|;
comment|//XML_CHARS.put("\\u00E1", "&#x00E1;");
block|}
DECL|method|initializeJournalNames ()
specifier|public
specifier|static
name|void
name|initializeJournalNames
parameter_list|()
block|{
comment|// Read built-in journal list:
name|journalAbbrev
operator|=
operator|new
name|JournalAbbreviations
argument_list|(
literal|"/resource/journalList.txt"
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|get
argument_list|(
literal|"personalJournalList"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|journalAbbrev
operator|.
name|readJournalList
argument_list|(
operator|new
name|File
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"personalJournalList"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"Personal journal list file '"
operator|+
name|prefs
operator|.
name|get
argument_list|(
literal|"personalJournalList"
argument_list|)
operator|+
literal|"' not found."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

