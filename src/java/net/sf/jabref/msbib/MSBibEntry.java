begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on April 01, 2007  * Updated on May 03, 2007  * */
end_comment

begin_package
DECL|package|net.sf.jabref.msbib
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|msbib
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|mods
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author S M Mahbub Murshed  * @email udvranto@yahoo.com  *  * @version 1.0.0  * @see http://mahbub.wordpress.com/2007/03/24/details-of-microsoft-office-2007-bibliographic-format-compared-to-bibtex/  * @see http://mahbub.wordpress.com/2007/03/22/deciphering-microsoft-office-2007-bibliography-format/  *   * Date: May 03, 2007  *   */
end_comment

begin_class
DECL|class|MSBibEntry
specifier|public
class|class
name|MSBibEntry
block|{
DECL|field|sourceType
specifier|protected
name|String
name|sourceType
init|=
literal|"Misc"
decl_stmt|;
DECL|field|bibTexEntry
specifier|protected
name|String
name|bibTexEntry
init|=
literal|null
decl_stmt|;
DECL|field|tag
specifier|protected
name|String
name|tag
init|=
literal|null
decl_stmt|;
DECL|field|GUID
specifier|protected
name|String
name|GUID
init|=
literal|null
decl_stmt|;
DECL|field|LCID
specifier|protected
name|int
name|LCID
decl_stmt|;
DECL|field|authors
specifier|protected
name|List
name|authors
init|=
literal|null
decl_stmt|;
DECL|field|bookAuthors
specifier|protected
name|List
name|bookAuthors
init|=
literal|null
decl_stmt|;
DECL|field|editors
specifier|protected
name|List
name|editors
init|=
literal|null
decl_stmt|;
DECL|field|translators
specifier|protected
name|List
name|translators
init|=
literal|null
decl_stmt|;
DECL|field|producerNames
specifier|protected
name|List
name|producerNames
init|=
literal|null
decl_stmt|;
DECL|field|composers
specifier|protected
name|List
name|composers
init|=
literal|null
decl_stmt|;
DECL|field|conductors
specifier|protected
name|List
name|conductors
init|=
literal|null
decl_stmt|;
DECL|field|performers
specifier|protected
name|List
name|performers
init|=
literal|null
decl_stmt|;
DECL|field|writers
specifier|protected
name|List
name|writers
init|=
literal|null
decl_stmt|;
DECL|field|directors
specifier|protected
name|List
name|directors
init|=
literal|null
decl_stmt|;
DECL|field|compilers
specifier|protected
name|List
name|compilers
init|=
literal|null
decl_stmt|;
DECL|field|interviewers
specifier|protected
name|List
name|interviewers
init|=
literal|null
decl_stmt|;
DECL|field|interviewees
specifier|protected
name|List
name|interviewees
init|=
literal|null
decl_stmt|;
DECL|field|inventors
specifier|protected
name|List
name|inventors
init|=
literal|null
decl_stmt|;
DECL|field|counsels
specifier|protected
name|List
name|counsels
init|=
literal|null
decl_stmt|;
DECL|field|title
specifier|protected
name|String
name|title
init|=
literal|null
decl_stmt|;
DECL|field|year
specifier|protected
name|String
name|year
init|=
literal|null
decl_stmt|;
DECL|field|month
specifier|protected
name|String
name|month
init|=
literal|null
decl_stmt|;
DECL|field|day
specifier|protected
name|String
name|day
init|=
literal|null
decl_stmt|;
DECL|field|shortTitle
specifier|protected
name|String
name|shortTitle
init|=
literal|null
decl_stmt|;
DECL|field|comments
specifier|protected
name|String
name|comments
init|=
literal|null
decl_stmt|;
DECL|field|pages
specifier|protected
name|PageNumbers
name|pages
init|=
literal|null
decl_stmt|;
DECL|field|volume
specifier|protected
name|String
name|volume
init|=
literal|null
decl_stmt|;
DECL|field|numberOfVolumes
specifier|protected
name|int
name|numberOfVolumes
decl_stmt|;
DECL|field|edition
specifier|protected
name|String
name|edition
init|=
literal|null
decl_stmt|;
DECL|field|standardNumber
specifier|protected
name|String
name|standardNumber
init|=
literal|null
decl_stmt|;
DECL|field|publisher
specifier|protected
name|String
name|publisher
init|=
literal|null
decl_stmt|;
DECL|field|address
specifier|protected
name|String
name|address
init|=
literal|null
decl_stmt|;
DECL|field|bookTitle
specifier|protected
name|String
name|bookTitle
init|=
literal|null
decl_stmt|;
DECL|field|chapterNumber
specifier|protected
name|int
name|chapterNumber
decl_stmt|;
DECL|field|journalName
specifier|protected
name|String
name|journalName
init|=
literal|null
decl_stmt|;
DECL|field|issue
specifier|protected
name|int
name|issue
decl_stmt|;
DECL|field|periodicalTitle
specifier|protected
name|String
name|periodicalTitle
init|=
literal|null
decl_stmt|;
DECL|field|conferenceName
specifier|protected
name|String
name|conferenceName
init|=
literal|null
decl_stmt|;
DECL|field|department
specifier|protected
name|String
name|department
init|=
literal|null
decl_stmt|;
DECL|field|institution
specifier|protected
name|String
name|institution
init|=
literal|null
decl_stmt|;
DECL|field|thesisType
specifier|protected
name|String
name|thesisType
init|=
literal|null
decl_stmt|;
DECL|field|internetSiteTitle
specifier|protected
name|String
name|internetSiteTitle
init|=
literal|null
decl_stmt|;
DECL|field|dateAccessed
specifier|protected
name|String
name|dateAccessed
init|=
literal|null
decl_stmt|;
DECL|field|url
specifier|protected
name|String
name|url
init|=
literal|null
decl_stmt|;
DECL|field|productionCompany
specifier|protected
name|String
name|productionCompany
init|=
literal|null
decl_stmt|;
DECL|field|publicationTitle
specifier|protected
name|String
name|publicationTitle
init|=
literal|null
decl_stmt|;
DECL|field|medium
specifier|protected
name|String
name|medium
init|=
literal|null
decl_stmt|;
DECL|field|albumTitle
specifier|protected
name|String
name|albumTitle
init|=
literal|null
decl_stmt|;
DECL|field|recordingNumber
specifier|protected
name|String
name|recordingNumber
init|=
literal|null
decl_stmt|;
DECL|field|theater
specifier|protected
name|String
name|theater
init|=
literal|null
decl_stmt|;
DECL|field|distributor
specifier|protected
name|String
name|distributor
init|=
literal|null
decl_stmt|;
DECL|field|broadcastTitle
specifier|protected
name|String
name|broadcastTitle
init|=
literal|null
decl_stmt|;
DECL|field|broadcaster
specifier|protected
name|String
name|broadcaster
init|=
literal|null
decl_stmt|;
DECL|field|station
specifier|protected
name|String
name|station
init|=
literal|null
decl_stmt|;
DECL|field|type
specifier|protected
name|String
name|type
init|=
literal|null
decl_stmt|;
DECL|field|patentNumber
specifier|protected
name|String
name|patentNumber
init|=
literal|null
decl_stmt|;
DECL|field|court
specifier|protected
name|String
name|court
init|=
literal|null
decl_stmt|;
DECL|field|reporter
specifier|protected
name|String
name|reporter
init|=
literal|null
decl_stmt|;
DECL|field|caseNumber
specifier|protected
name|String
name|caseNumber
init|=
literal|null
decl_stmt|;
DECL|field|abbreviatedCaseNumber
specifier|protected
name|String
name|abbreviatedCaseNumber
init|=
literal|null
decl_stmt|;
DECL|field|bibTex_Series
specifier|protected
name|String
name|bibTex_Series
init|=
literal|null
decl_stmt|;
DECL|field|bibTex_Abstract
specifier|protected
name|String
name|bibTex_Abstract
init|=
literal|null
decl_stmt|;
DECL|field|bibTex_KeyWords
specifier|protected
name|String
name|bibTex_KeyWords
init|=
literal|null
decl_stmt|;
DECL|field|bibTex_CrossRef
specifier|protected
name|String
name|bibTex_CrossRef
init|=
literal|null
decl_stmt|;
DECL|field|bibTex_HowPublished
specifier|protected
name|String
name|bibTex_HowPublished
init|=
literal|null
decl_stmt|;
DECL|field|bibTex_Affiliation
specifier|protected
name|String
name|bibTex_Affiliation
init|=
literal|null
decl_stmt|;
DECL|field|bibTex_Contents
specifier|protected
name|String
name|bibTex_Contents
init|=
literal|null
decl_stmt|;
DECL|field|bibTex_Copyright
specifier|protected
name|String
name|bibTex_Copyright
init|=
literal|null
decl_stmt|;
DECL|field|bibTex_Price
specifier|protected
name|String
name|bibTex_Price
init|=
literal|null
decl_stmt|;
DECL|field|bibTex_Size
specifier|protected
name|String
name|bibTex_Size
init|=
literal|null
decl_stmt|;
DECL|field|BIBTEX
specifier|public
specifier|final
name|String
name|BIBTEX
init|=
literal|"BIBTEX_"
decl_stmt|;
DECL|field|bcol
specifier|private
specifier|final
name|String
name|bcol
init|=
literal|"b:"
decl_stmt|;
DECL|field|FORMATXML
specifier|private
specifier|final
name|boolean
name|FORMATXML
init|=
literal|false
decl_stmt|;
DECL|method|MSBibEntry ()
specifier|public
name|MSBibEntry
parameter_list|()
block|{ 	}
DECL|method|MSBibEntry (BibtexEntry bibtex)
specifier|public
name|MSBibEntry
parameter_list|(
name|BibtexEntry
name|bibtex
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|populateFromBibtex
argument_list|(
name|bibtex
argument_list|)
expr_stmt|;
block|}
DECL|method|populateFromBibtex (BibtexEntry bibtex)
specifier|protected
name|void
name|populateFromBibtex
parameter_list|(
name|BibtexEntry
name|bibtex
parameter_list|)
block|{
comment|// date = getDate(bibtex);
name|sourceType
operator|=
name|getMSBibSourceType
argument_list|(
name|bibtex
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"bibtexkey"
argument_list|)
operator|!=
literal|null
condition|)
name|tag
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"bibtexkey"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"language"
argument_list|)
operator|!=
literal|null
condition|)
name|LCID
operator|=
name|getLCID
argument_list|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"language"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|!=
literal|null
condition|)
name|title
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
operator|!=
literal|null
condition|)
name|year
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
operator|!=
literal|null
condition|)
name|month
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-day"
argument_list|)
operator|!=
literal|null
condition|)
name|day
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-day"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-shorttitle"
argument_list|)
operator|!=
literal|null
condition|)
name|shortTitle
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-shorttitle"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"note"
argument_list|)
operator|!=
literal|null
condition|)
name|comments
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"note"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
operator|!=
literal|null
condition|)
name|pages
operator|=
operator|new
name|PageNumbers
argument_list|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"volume"
argument_list|)
operator|!=
literal|null
condition|)
name|volume
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"volume"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-numberofvolume"
argument_list|)
operator|!=
literal|null
condition|)
name|numberOfVolumes
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-numberofvolume"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"edition"
argument_list|)
operator|!=
literal|null
condition|)
name|edition
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"edition"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|standardNumber
operator|=
operator|new
name|String
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"ISBN"
argument_list|)
operator|!=
literal|null
condition|)
name|standardNumber
operator|+=
literal|":ISBN:"
operator|+
name|bibtex
operator|.
name|getField
argument_list|(
literal|"ISBN"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"ISSN"
argument_list|)
operator|!=
literal|null
condition|)
name|standardNumber
operator|+=
literal|":ISSN:"
operator|+
name|bibtex
operator|.
name|getField
argument_list|(
literal|"ISSN"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"LCCN"
argument_list|)
operator|!=
literal|null
condition|)
name|standardNumber
operator|+=
literal|":LCCN:"
operator|+
name|bibtex
operator|.
name|getField
argument_list|(
literal|"LCCN"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"mrnumber"
argument_list|)
operator|!=
literal|null
condition|)
name|standardNumber
operator|+=
literal|":MRN:"
operator|+
name|bibtex
operator|.
name|getField
argument_list|(
literal|"mrnumber"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"publisher"
argument_list|)
operator|!=
literal|null
condition|)
name|publisher
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"publisher"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"address"
argument_list|)
operator|!=
literal|null
condition|)
name|address
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"address"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"booktitle"
argument_list|)
operator|!=
literal|null
condition|)
name|bookTitle
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"booktitle"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"chapter"
argument_list|)
operator|!=
literal|null
condition|)
name|chapterNumber
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"chapter"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"journal"
argument_list|)
operator|!=
literal|null
condition|)
name|journalName
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"journal"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"issue"
argument_list|)
operator|!=
literal|null
condition|)
name|issue
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"issue"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-periodical"
argument_list|)
operator|!=
literal|null
condition|)
name|periodicalTitle
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-periodical"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"organization"
argument_list|)
operator|!=
literal|null
condition|)
name|conferenceName
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"organization"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"school"
argument_list|)
operator|!=
literal|null
condition|)
name|department
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"school"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"institution"
argument_list|)
operator|!=
literal|null
condition|)
name|institution
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"institution"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"type"
argument_list|)
operator|!=
literal|null
condition|)
name|thesisType
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"type"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|sourceType
operator|.
name|equals
argument_list|(
literal|"InternetSite"
argument_list|)
operator|==
literal|true
operator|||
name|sourceType
operator|.
name|equals
argument_list|(
literal|"DocumentFromInternetSite"
argument_list|)
operator|==
literal|true
operator|)
operator|&&
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|!=
literal|null
condition|)
name|internetSiteTitle
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-accessed"
argument_list|)
operator|!=
literal|null
condition|)
name|dateAccessed
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-accessed"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"URL"
argument_list|)
operator|!=
literal|null
condition|)
name|url
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"URL"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-productioncompany"
argument_list|)
operator|!=
literal|null
condition|)
name|productionCompany
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-productioncompany"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|sourceType
operator|.
name|equals
argument_list|(
literal|"ElectronicSource"
argument_list|)
operator|==
literal|true
operator|||
name|sourceType
operator|.
name|equals
argument_list|(
literal|"Art"
argument_list|)
operator|==
literal|true
operator|||
name|sourceType
operator|.
name|equals
argument_list|(
literal|"Misc"
argument_list|)
operator|==
literal|true
operator|)
operator|&&
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|!=
literal|null
condition|)
name|publicationTitle
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-medium"
argument_list|)
operator|!=
literal|null
condition|)
name|medium
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-medium"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|sourceType
operator|.
name|equals
argument_list|(
literal|"SoundRecording"
argument_list|)
operator|==
literal|true
operator|&&
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|!=
literal|null
condition|)
name|albumTitle
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-recordingnumber"
argument_list|)
operator|!=
literal|null
condition|)
name|recordingNumber
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-recordingnumber"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-theater"
argument_list|)
operator|!=
literal|null
condition|)
name|theater
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-theater"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-distributor"
argument_list|)
operator|!=
literal|null
condition|)
name|distributor
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-distributor"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|sourceType
operator|.
name|equals
argument_list|(
literal|"Interview"
argument_list|)
operator|==
literal|true
operator|&&
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|!=
literal|null
condition|)
name|broadcastTitle
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-broadcaster"
argument_list|)
operator|!=
literal|null
condition|)
name|broadcaster
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-broadcaster"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-station"
argument_list|)
operator|!=
literal|null
condition|)
name|station
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-station"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-type"
argument_list|)
operator|!=
literal|null
condition|)
name|type
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-type"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-patentnumber"
argument_list|)
operator|!=
literal|null
condition|)
name|patentNumber
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-patentnumber"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-court"
argument_list|)
operator|!=
literal|null
condition|)
name|court
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-court"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-reporter"
argument_list|)
operator|!=
literal|null
condition|)
name|reporter
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-reporter"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-casenumber"
argument_list|)
operator|!=
literal|null
condition|)
name|caseNumber
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-casenumber"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-abbreviatedcasenumber"
argument_list|)
operator|!=
literal|null
condition|)
name|abbreviatedCaseNumber
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"msbib-abbreviatedcasenumber"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"series"
argument_list|)
operator|!=
literal|null
condition|)
name|bibTex_Series
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"series"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"abstract"
argument_list|)
operator|!=
literal|null
condition|)
name|bibTex_Abstract
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"abstract"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"keywords"
argument_list|)
operator|!=
literal|null
condition|)
name|bibTex_KeyWords
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"keywords"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"crossref"
argument_list|)
operator|!=
literal|null
condition|)
name|bibTex_CrossRef
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"crossref"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"howpublished"
argument_list|)
operator|!=
literal|null
condition|)
name|bibTex_HowPublished
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"howpublished"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"affiliation"
argument_list|)
operator|!=
literal|null
condition|)
name|bibTex_Affiliation
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"affiliation"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"contents"
argument_list|)
operator|!=
literal|null
condition|)
name|bibTex_Contents
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"contents"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"copyright"
argument_list|)
operator|!=
literal|null
condition|)
name|bibTex_Copyright
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"copyright"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"price"
argument_list|)
operator|!=
literal|null
condition|)
name|bibTex_Price
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"price"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"size"
argument_list|)
operator|!=
literal|null
condition|)
name|bibTex_Size
operator|=
name|bibtex
operator|.
name|getField
argument_list|(
literal|"size"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|!=
literal|null
condition|)
name|authors
operator|=
name|getAuthors
argument_list|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FORMATXML
condition|)
block|{
name|title
operator|=
name|format
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|shortTitle
operator|=
name|format
argument_list|(
name|shortTitle
argument_list|)
expr_stmt|;
name|publisher
operator|=
name|format
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
name|conferenceName
operator|=
name|format
argument_list|(
name|conferenceName
argument_list|)
expr_stmt|;
name|department
operator|=
name|format
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|institution
operator|=
name|format
argument_list|(
name|institution
argument_list|)
expr_stmt|;
name|internetSiteTitle
operator|=
name|format
argument_list|(
name|internetSiteTitle
argument_list|)
expr_stmt|;
name|publicationTitle
operator|=
name|format
argument_list|(
name|publicationTitle
argument_list|)
expr_stmt|;
name|albumTitle
operator|=
name|format
argument_list|(
name|albumTitle
argument_list|)
expr_stmt|;
name|theater
operator|=
name|format
argument_list|(
name|theater
argument_list|)
expr_stmt|;
name|distributor
operator|=
name|format
argument_list|(
name|distributor
argument_list|)
expr_stmt|;
name|broadcastTitle
operator|=
name|format
argument_list|(
name|broadcastTitle
argument_list|)
expr_stmt|;
name|broadcaster
operator|=
name|format
argument_list|(
name|broadcaster
argument_list|)
expr_stmt|;
name|station
operator|=
name|format
argument_list|(
name|station
argument_list|)
expr_stmt|;
name|court
operator|=
name|format
argument_list|(
name|court
argument_list|)
expr_stmt|;
name|reporter
operator|=
name|format
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
name|bibTex_Series
operator|=
name|format
argument_list|(
name|bibTex_Series
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|format (String value)
specifier|private
name|String
name|format
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|result
init|=
literal|null
decl_stmt|;
name|LayoutFormatter
name|chars
init|=
operator|new
name|XMLChars
argument_list|()
decl_stmt|;
name|result
operator|=
name|chars
operator|.
name|format
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// http://www.microsoft.com/globaldev/reference/lcid-all.mspx
DECL|method|getLCID (String language)
specifier|protected
name|int
name|getLCID
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|int
name|iLCID
init|=
literal|0
decl_stmt|;
comment|// TODO: add lanaguage to LCID mapping
return|return
name|iLCID
return|;
block|}
DECL|method|getAuthors (String authors)
specifier|protected
name|List
name|getAuthors
parameter_list|(
name|String
name|authors
parameter_list|)
block|{
name|List
name|result
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|LayoutFormatter
name|chars
init|=
operator|new
name|XMLChars
argument_list|()
decl_stmt|;
if|if
condition|(
name|authors
operator|.
name|indexOf
argument_list|(
literal|" and "
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|FORMATXML
condition|)
name|result
operator|.
name|add
argument_list|(
operator|new
name|PersonName
argument_list|(
name|chars
operator|.
name|format
argument_list|(
name|authors
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|result
operator|.
name|add
argument_list|(
operator|new
name|PersonName
argument_list|(
name|authors
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|names
init|=
name|authors
operator|.
name|split
argument_list|(
literal|" and "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|FORMATXML
condition|)
name|result
operator|.
name|add
argument_list|(
operator|new
name|PersonName
argument_list|(
name|chars
operator|.
name|format
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|result
operator|.
name|add
argument_list|(
operator|new
name|PersonName
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/* construct a MSBib date object */
DECL|method|getDate (BibtexEntry bibtex)
specifier|protected
name|String
name|getDate
parameter_list|(
name|BibtexEntry
name|bibtex
parameter_list|)
block|{
name|String
name|result
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
operator|!=
literal|null
condition|)
name|result
operator|+=
operator|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|bibtex
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
operator|!=
literal|null
condition|)
name|result
operator|+=
literal|"-"
operator|+
name|bibtex
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getMSBibSourceType (BibtexEntry bibtex)
specifier|protected
name|String
name|getMSBibSourceType
parameter_list|(
name|BibtexEntry
name|bibtex
parameter_list|)
block|{
name|String
name|bibtexType
init|=
name|bibtex
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|result
init|=
literal|"Misc"
decl_stmt|;
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"book"
argument_list|)
condition|)
name|result
operator|=
literal|"Book"
expr_stmt|;
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"inbook"
argument_list|)
condition|)
name|result
operator|=
literal|"BookSection"
expr_stmt|;
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"booklet"
argument_list|)
condition|)
block|{
name|result
operator|=
literal|"BookSection"
expr_stmt|;
name|bibTexEntry
operator|=
literal|"booklet"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"incollection"
argument_list|)
condition|)
block|{
name|result
operator|=
literal|"BookSection"
expr_stmt|;
name|bibTexEntry
operator|=
literal|"incollection"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"article"
argument_list|)
condition|)
name|result
operator|=
literal|"JournalArticle"
expr_stmt|;
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"inproceedings"
argument_list|)
condition|)
name|result
operator|=
literal|"ConferenceProceedings"
expr_stmt|;
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"conference"
argument_list|)
condition|)
block|{
name|result
operator|=
literal|"ConferenceProceedings"
expr_stmt|;
name|bibTexEntry
operator|=
literal|"conference"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"proceedings"
argument_list|)
condition|)
block|{
name|result
operator|=
literal|"ConferenceProceedings"
expr_stmt|;
name|bibTexEntry
operator|=
literal|"proceedings"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"collection"
argument_list|)
condition|)
block|{
name|result
operator|=
literal|"ConferenceProceedings"
expr_stmt|;
name|bibTexEntry
operator|=
literal|"collection"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"techreport"
argument_list|)
condition|)
name|result
operator|=
literal|"Report"
expr_stmt|;
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"manual"
argument_list|)
condition|)
block|{
name|result
operator|=
literal|"Report"
expr_stmt|;
name|bibTexEntry
operator|=
literal|"manual"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mastersthesis"
argument_list|)
condition|)
block|{
name|result
operator|=
literal|"Report"
expr_stmt|;
name|bibTexEntry
operator|=
literal|"mastersthesis"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"phdthesis"
argument_list|)
condition|)
block|{
name|result
operator|=
literal|"Report"
expr_stmt|;
name|bibTexEntry
operator|=
literal|"phdthesis"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"unpublished"
argument_list|)
condition|)
block|{
name|result
operator|=
literal|"Report"
expr_stmt|;
name|bibTexEntry
operator|=
literal|"unpublished"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"patent"
argument_list|)
condition|)
name|result
operator|=
literal|"Patent"
expr_stmt|;
elseif|else
if|if
condition|(
name|bibtexType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"misc"
argument_list|)
condition|)
name|result
operator|=
literal|"Misc"
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getDOMrepresentation ()
specifier|public
name|Document
name|getDOMrepresentation
parameter_list|()
block|{
name|Document
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DocumentBuilder
name|d
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
comment|//	result = getDOMrepresentation(d);
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|//	private String healXML(String value)
comment|//	{
comment|//		String healedValue = value;
comment|//
comment|//		// Remove special dash that looks like same but is not
comment|//		healedValue = healedValue.replace('','-');
comment|//		healedValue = healedValue.replace('','-');
comment|//
comment|//		// String literals
comment|//		healedValue = healedValue.replaceAll("","`");
comment|//		healedValue = healedValue.replaceAll("","'");
comment|//		healedValue = healedValue.replaceAll("","\"");
comment|//		healedValue = healedValue.replaceAll("","\"");
comment|//
comment|//		// HTML subscript value
comment|//		healedValue = healedValue.replaceAll("<sub>","_");
comment|//		healedValue = healedValue.replaceAll("</sub>","");
comment|//
comment|////		restore converted to html-char
comment|////		Pattern p = Pattern.compile("&#(\\d{1,4});");
comment|////		Matcher m = p.matcher(healedValue);
comment|////		while (m.find())
comment|////		{
comment|////			System.out.println(m.group(1));
comment|////			int n = Integer.parseInt(m.group(1));
comment|////			char ch = Character.forDigit(n,10);
comment|////			healedValue = healedValue.replaceAll("&#"+m.group(1)+";",""+ch);
comment|////		}
comment|//
comment|//		return healedValue;
comment|//	}
DECL|method|addField (Document d,Element parent, String name, String value)
specifier|public
name|void
name|addField
parameter_list|(
name|Document
name|d
parameter_list|,
name|Element
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return;
name|Element
name|elem
init|=
name|d
operator|.
name|createElement
argument_list|(
name|bcol
operator|+
name|name
argument_list|)
decl_stmt|;
comment|// elem.appendChild(d.createTextNode(healXML(value)));
name|elem
operator|.
name|appendChild
argument_list|(
name|d
operator|.
name|createTextNode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|appendChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
DECL|method|addAuthor (Document d, Element allAuthors, String entryName, List authorsLst)
specifier|public
name|void
name|addAuthor
parameter_list|(
name|Document
name|d
parameter_list|,
name|Element
name|allAuthors
parameter_list|,
name|String
name|entryName
parameter_list|,
name|List
name|authorsLst
parameter_list|)
block|{
if|if
condition|(
name|authorsLst
operator|==
literal|null
condition|)
return|return;
name|Element
name|authorTop
init|=
name|d
operator|.
name|createElement
argument_list|(
name|bcol
operator|+
name|entryName
argument_list|)
decl_stmt|;
name|Element
name|nameList
init|=
name|d
operator|.
name|createElement
argument_list|(
name|bcol
operator|+
literal|"NameList"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|authorsLst
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PersonName
name|name
init|=
operator|(
name|PersonName
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|person
init|=
name|d
operator|.
name|createElement
argument_list|(
name|bcol
operator|+
literal|"Person"
argument_list|)
decl_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|person
argument_list|,
literal|"Last"
argument_list|,
name|name
operator|.
name|getSurname
argument_list|()
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|person
argument_list|,
literal|"Middle"
argument_list|,
name|name
operator|.
name|getMiddlename
argument_list|()
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|person
argument_list|,
literal|"First"
argument_list|,
name|name
operator|.
name|getFirstname
argument_list|()
argument_list|)
expr_stmt|;
name|nameList
operator|.
name|appendChild
argument_list|(
name|person
argument_list|)
expr_stmt|;
block|}
name|authorTop
operator|.
name|appendChild
argument_list|(
name|nameList
argument_list|)
expr_stmt|;
name|allAuthors
operator|.
name|appendChild
argument_list|(
name|authorTop
argument_list|)
expr_stmt|;
block|}
DECL|method|addAdrress (Document d,Element parent, String address)
specifier|public
name|void
name|addAdrress
parameter_list|(
name|Document
name|d
parameter_list|,
name|Element
name|parent
parameter_list|,
name|String
name|address
parameter_list|)
block|{
if|if
condition|(
name|address
operator|==
literal|null
condition|)
return|return;
comment|// US address parser
comment|// See documentation here http://regexlib.com/REDetails.aspx?regexp_id=472
comment|// Pattern p = Pattern.compile("^(?n:(((?<address1>(\\d{1,5}(\\ 1\\/[234])?(\\x20[A-Z]([a-z])+)+ )|(P\\.O\\.\\ Box\\ \\d{1,5}))\\s{1,2}(?i:(?<address2>(((APT|B LDG|DEPT|FL|HNGR|LOT|PIER|RM|S(LIP|PC|T(E|OP))|TRLR|UNIT)\\x20\\w{1,5})|(BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR)\\.?)\\s{1,2})?))?)(?<city>[A-Z]([a-z])+(\\.?)(\\x20[A-Z]([a-z])+){0,2})([,\\x20]+?)(?<state>A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADL N]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD] |T[NX]|UT|V[AIT]|W[AIVY])([,\\x20]+?)(?<zipcode>(?!0{5})\\d{5}(-\\d {4})?)((([,\\x20]+?)(?<country>[A-Z]([a-z])+(\\.?)(\\x20[A-Z]([a-z])+){0,2}))?))$");
comment|// the pattern above is for C#, may not work with java. Never tested though.
comment|// reduced subset, supports only "CITY , STATE, COUNTRY"
comment|// \b(\w+)\s?[,]?\s?(\w+)\s?[,]?\s?(\w+)\b
comment|// WORD SPACE , SPACE WORD SPACE , SPACE WORD
comment|// tested using http://www.javaregex.com/test.html
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\b(\\w+)\\s*[,]?\\s*(\\w+)\\s*[,]?\\s*(\\w+)\\b"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
operator|&&
name|m
operator|.
name|groupCount
argument_list|()
operator|>
literal|3
condition|)
block|{
name|addField
argument_list|(
name|d
argument_list|,
name|parent
argument_list|,
literal|"City"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|parent
argument_list|,
literal|"StateProvince"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|parent
argument_list|,
literal|"CountryRegion"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addDate (Document d,Element parent, String date, String extra)
specifier|public
name|void
name|addDate
parameter_list|(
name|Document
name|d
parameter_list|,
name|Element
name|parent
parameter_list|,
name|String
name|date
parameter_list|,
name|String
name|extra
parameter_list|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
return|return;
comment|// Allows 20.3-2007|||20/3-  2007 etc.
comment|// (\d{1,2})\s?[.,-/]\s?(\d{1,2})\s?[.,-/]\s?(\d{2,4})
comment|// 1-2 DIGITS SPACE SEPERATOR SPACE 1-2 DIGITS SPACE SEPERATOR SPACE 2-4 DIGITS
comment|// tested using http://www.javaregex.com/test.html
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d{1,2})\\s*[.,-/]\\s*(\\d{1,2})\\s*[.,-/]\\s*(\\d{2,4})"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
operator|&&
name|m
operator|.
name|groupCount
argument_list|()
operator|>
literal|3
condition|)
block|{
name|addField
argument_list|(
name|d
argument_list|,
name|parent
argument_list|,
literal|"Month"
operator|+
name|extra
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|parent
argument_list|,
literal|"Day"
operator|+
name|extra
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|parent
argument_list|,
literal|"Year"
operator|+
name|extra
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDOMrepresentation (Document d)
specifier|public
name|Element
name|getDOMrepresentation
parameter_list|(
name|Document
name|d
parameter_list|)
block|{
name|Node
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Element
name|msbibEntry
init|=
name|d
operator|.
name|createElement
argument_list|(
name|bcol
operator|+
literal|"Source"
argument_list|)
decl_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"SourceType"
argument_list|,
name|sourceType
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|BIBTEX
operator|+
literal|"Entry"
argument_list|,
name|bibTexEntry
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Tag"
argument_list|,
name|tag
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"GUID"
argument_list|,
name|GUID
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"LCID"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|LCID
argument_list|)
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Title"
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Year"
argument_list|,
name|year
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"ShortTitle"
argument_list|,
name|shortTitle
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Comments"
argument_list|,
name|comments
argument_list|)
expr_stmt|;
name|Element
name|allAuthors
init|=
name|d
operator|.
name|createElement
argument_list|(
name|bcol
operator|+
literal|"Author"
argument_list|)
decl_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Author"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"BookAuthor"
argument_list|,
name|bookAuthors
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Editor"
argument_list|,
name|editors
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Translator"
argument_list|,
name|translators
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"ProducerName"
argument_list|,
name|producerNames
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Composer"
argument_list|,
name|composers
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Conductor"
argument_list|,
name|conductors
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Performer"
argument_list|,
name|performers
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Writer"
argument_list|,
name|writers
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Director"
argument_list|,
name|directors
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Compiler"
argument_list|,
name|compilers
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Interviewer"
argument_list|,
name|interviewers
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Interviewee"
argument_list|,
name|interviewees
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"Inventor"
argument_list|,
name|inventors
argument_list|)
expr_stmt|;
name|addAuthor
argument_list|(
name|d
argument_list|,
name|allAuthors
argument_list|,
literal|"counsels"
argument_list|,
name|counsels
argument_list|)
expr_stmt|;
name|msbibEntry
operator|.
name|appendChild
argument_list|(
name|allAuthors
argument_list|)
expr_stmt|;
if|if
condition|(
name|pages
operator|!=
literal|null
condition|)
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Pages"
argument_list|,
name|pages
operator|.
name|toString
argument_list|(
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Volume"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"NumberVolumes"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numberOfVolumes
argument_list|)
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Edition"
argument_list|,
name|edition
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"StandardNumber"
argument_list|,
name|standardNumber
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Publisher"
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
name|addAdrress
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"BookTitle"
argument_list|,
name|bookTitle
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"ChapterNumber"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|chapterNumber
argument_list|)
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"JournalName"
argument_list|,
name|journalName
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Issue"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|issue
argument_list|)
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"PeriodicalTitle"
argument_list|,
name|periodicalTitle
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"ConferenceName"
argument_list|,
name|conferenceName
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Department"
argument_list|,
name|department
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Institution"
argument_list|,
name|institution
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"ThesisType"
argument_list|,
name|thesisType
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"InternetSiteTitle"
argument_list|,
name|internetSiteTitle
argument_list|)
expr_stmt|;
name|addDate
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|dateAccessed
argument_list|,
literal|"Accessed"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"URL"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"ProductionCompany"
argument_list|,
name|productionCompany
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"PublicationTitle"
argument_list|,
name|publicationTitle
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Medium"
argument_list|,
name|medium
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"AlbumTitle"
argument_list|,
name|albumTitle
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"RecordingNumber"
argument_list|,
name|recordingNumber
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Theater"
argument_list|,
name|theater
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Distributor"
argument_list|,
name|distributor
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"BroadcastTitle"
argument_list|,
name|broadcastTitle
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Broadcaster"
argument_list|,
name|broadcaster
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Station"
argument_list|,
name|station
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"PatentNumber"
argument_list|,
name|patentNumber
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Court"
argument_list|,
name|court
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"Reporter"
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"CaseNumber"
argument_list|,
name|caseNumber
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
literal|"AbbreviatedCaseNumber"
argument_list|,
name|abbreviatedCaseNumber
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|BIBTEX
operator|+
literal|"Series"
argument_list|,
name|bibTex_Series
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|BIBTEX
operator|+
literal|"Abstract"
argument_list|,
name|bibTex_Abstract
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|BIBTEX
operator|+
literal|"KeyWords"
argument_list|,
name|bibTex_KeyWords
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|BIBTEX
operator|+
literal|"CrossRef"
argument_list|,
name|bibTex_CrossRef
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|BIBTEX
operator|+
literal|"HowPublished"
argument_list|,
name|bibTex_HowPublished
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|BIBTEX
operator|+
literal|"Affiliation"
argument_list|,
name|bibTex_Affiliation
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|BIBTEX
operator|+
literal|"Contents"
argument_list|,
name|bibTex_Contents
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|BIBTEX
operator|+
literal|"Copyright"
argument_list|,
name|bibTex_Copyright
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|BIBTEX
operator|+
literal|"Price"
argument_list|,
name|bibTex_Price
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
name|msbibEntry
argument_list|,
name|BIBTEX
operator|+
literal|"Size"
argument_list|,
name|bibTex_Size
argument_list|)
expr_stmt|;
return|return
name|msbibEntry
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Exception caught..."
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// return null;
block|}
comment|/* 	 * render as XML 	 */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringWriter
name|sresult
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|getDOMrepresentation
argument_list|()
argument_list|)
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|sresult
argument_list|)
decl_stmt|;
name|Transformer
name|trans
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|trans
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|trans
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|sresult
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

