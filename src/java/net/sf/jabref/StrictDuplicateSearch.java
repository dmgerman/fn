begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*    * StrictDuplicateSearch.java  *  * Created on November 4, 2004, 11:59 PM  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableRemoveEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  *  * @author  alver  */
end_comment

begin_class
DECL|class|StrictDuplicateSearch
specifier|public
class|class
name|StrictDuplicateSearch
extends|extends
name|Thread
block|{
DECL|field|panel
name|BasePanel
name|panel
decl_stmt|;
comment|/** Creates a new instance of StrictDuplicateSearch */
DECL|method|StrictDuplicateSearch (BasePanel bp)
specifier|public
name|StrictDuplicateSearch
parameter_list|(
name|BasePanel
name|bp
parameter_list|)
block|{
name|this
operator|.
name|panel
operator|=
name|bp
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|HashSet
name|toRemove
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Remove duplicates"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|duplicateCounter
init|=
literal|0
decl_stmt|;
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Searching for duplicates..."
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|keys
init|=
name|panel
operator|.
name|database
operator|.
name|getKeySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|keys
operator|==
literal|null
operator|)
operator|||
operator|(
name|keys
operator|.
name|length
operator|<
literal|2
operator|)
condition|)
return|return;
name|BibtexEntry
index|[]
name|bes
init|=
operator|new
name|BibtexEntry
index|[
name|keys
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|bes
index|[
name|i
index|]
operator|=
name|panel
operator|.
name|database
operator|.
name|getEntryById
argument_list|(
operator|(
name|String
operator|)
name|keys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bes
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|bes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// We only check the entries if none of the two are already marked for removal.
if|if
condition|(
operator|!
name|toRemove
operator|.
name|contains
argument_list|(
name|bes
index|[
name|i
index|]
argument_list|)
operator|&&
operator|!
name|toRemove
operator|.
name|contains
argument_list|(
name|bes
index|[
name|j
index|]
argument_list|)
operator|&&
name|Util
operator|.
name|compareEntriesStrictly
argument_list|(
name|bes
index|[
name|i
index|]
argument_list|,
name|bes
index|[
name|j
index|]
argument_list|)
operator|>
literal|1
condition|)
block|{
comment|// These two entries are exactly the same, so we can remove one.
if|if
condition|(
operator|!
name|toRemove
operator|.
name|contains
argument_list|(
name|bes
index|[
name|i
index|]
argument_list|)
operator|&&
operator|!
name|toRemove
operator|.
name|contains
argument_list|(
name|bes
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|bes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|toRemove
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No duplicates found"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Finished searching. Now, remove all entries scheduled for removal:
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Duplicates found"
argument_list|)
operator|+
literal|": "
operator|+
name|toRemove
operator|.
name|size
argument_list|()
operator|+
literal|". "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Remove all?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Remove duplicates"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|OK_CANCEL_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CANCEL_OPTION
condition|)
return|return;
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Duplicates removed"
argument_list|)
operator|+
literal|": "
operator|+
name|toRemove
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|toRemove
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|panel
operator|.
name|database
operator|.
name|removeEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|panel
operator|.
name|database
argument_list|,
name|entry
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

