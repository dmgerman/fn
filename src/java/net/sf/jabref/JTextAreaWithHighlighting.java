begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|BadLocationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|DefaultHighlighter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Highlighter
import|;
end_import

begin_class
DECL|class|JTextAreaWithHighlighting
specifier|public
class|class
name|JTextAreaWithHighlighting
extends|extends
name|JTextArea
implements|implements
name|SearchTextListener
block|{
DECL|field|textToHighlight
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|textToHighlight
decl_stmt|;
DECL|method|JTextAreaWithHighlighting ()
specifier|public
name|JTextAreaWithHighlighting
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|JTextAreaWithHighlighting (String text)
specifier|public
name|JTextAreaWithHighlighting
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
DECL|method|JTextAreaWithHighlighting (Document doc)
specifier|public
name|JTextAreaWithHighlighting
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|super
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|JTextAreaWithHighlighting (int rows, int columns)
specifier|public
name|JTextAreaWithHighlighting
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|)
block|{
name|super
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
expr_stmt|;
block|}
DECL|method|JTextAreaWithHighlighting (String text, int rows, int columns)
specifier|public
name|JTextAreaWithHighlighting
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|)
expr_stmt|;
block|}
DECL|method|JTextAreaWithHighlighting (Document doc, String text, int rows, int columns)
specifier|public
name|JTextAreaWithHighlighting
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|)
block|{
name|super
argument_list|(
name|doc
argument_list|,
name|text
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Highlight words in the Textarea 	 *  	 * @param words to highlight 	 */
DECL|method|highLight (ArrayList<String> words)
specifier|private
name|void
name|highLight
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|words
parameter_list|)
block|{
comment|// highlight all characters that appear in charsToHighlight
name|Highlighter
name|h
init|=
name|getHighlighter
argument_list|()
decl_stmt|;
comment|// myTa.set
name|h
operator|.
name|removeAllHighlights
argument_list|()
expr_stmt|;
if|if
condition|(
name|words
operator|==
literal|null
operator|||
name|words
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|String
name|content
init|=
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
return|return;
for|for
control|(
name|String
name|word
range|:
name|words
control|)
block|{
name|String
name|text
init|=
name|word
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|word
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|startposition
init|=
name|content
operator|.
name|indexOf
argument_list|(
name|text
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|startposition
operator|==
operator|-
literal|1
condition|)
break|break;
try|try
block|{
comment|//				System.out.println("highlight @ " + startposition);
name|h
operator|.
name|addHighlight
argument_list|(
name|startposition
argument_list|,
name|startposition
operator|+
name|text
operator|.
name|length
argument_list|()
argument_list|,
name|DefaultHighlighter
operator|.
name|DefaultPainter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|ble
parameter_list|)
block|{ 				}
name|index
operator|=
name|startposition
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setText (String t)
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|t
parameter_list|)
block|{
name|super
operator|.
name|setText
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|highLight
argument_list|(
name|textToHighlight
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|searchText (ArrayList<String> words)
specifier|public
name|void
name|searchText
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|words
parameter_list|)
block|{
comment|// words have to be stored in class variable as
comment|// setText() makes use of them
name|textToHighlight
operator|=
name|words
expr_stmt|;
name|highLight
argument_list|(
name|words
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

