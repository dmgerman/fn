begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Comparator that handles icon columns.  */
end_comment

begin_class
DECL|class|IconComparator
specifier|public
class|class
name|IconComparator
implements|implements
name|Comparator
block|{
DECL|field|fields
specifier|private
name|String
index|[]
name|fields
decl_stmt|;
DECL|method|IconComparator (String[] fields)
specifier|public
name|IconComparator
parameter_list|(
name|String
index|[]
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
DECL|method|compare (Object o1, Object o2)
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|BibtexEntry
name|e1
init|=
operator|(
name|BibtexEntry
operator|)
name|o1
decl_stmt|,
name|e2
init|=
operator|(
name|BibtexEntry
operator|)
name|o2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|val1
init|=
name|e1
operator|.
name|getField
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
decl_stmt|,
name|val2
init|=
name|e2
operator|.
name|getField
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|!=
literal|null
condition|)
return|return
literal|1
return|;
block|}
else|else
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

