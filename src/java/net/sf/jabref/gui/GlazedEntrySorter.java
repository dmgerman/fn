begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|BasicEventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|SortedList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEventAssembler
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEvent
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEventListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: alver  * Date: Oct 12, 2005  * Time: 8:54:36 PM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
DECL|class|GlazedEntrySorter
specifier|public
class|class
name|GlazedEntrySorter
implements|implements
name|DatabaseChangeListener
block|{
comment|/* Copyright (C) 2003 Morten O. Alver  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
comment|//TreeSet list;
DECL|field|list
name|EventList
name|list
decl_stmt|;
DECL|field|comp
name|Comparator
name|comp
decl_stmt|;
DECL|field|idArray
name|String
index|[]
name|idArray
decl_stmt|;
DECL|field|entryArray
name|BibtexEntry
index|[]
name|entryArray
decl_stmt|;
comment|//static BibtexEntry[] DUMMY = new BibtexEntry[0];
DECL|field|outdated
specifier|private
name|boolean
name|outdated
init|=
literal|false
decl_stmt|;
DECL|field|changed
specifier|private
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
DECL|method|GlazedEntrySorter (Map entries, Comparator comp)
specifier|public
name|GlazedEntrySorter
parameter_list|(
name|Map
name|entries
parameter_list|,
name|Comparator
name|comp
parameter_list|)
block|{
comment|//list = new TreeSet(comp);
name|list
operator|=
operator|new
name|BasicEventList
argument_list|()
expr_stmt|;
comment|//list2 = new SortedList(list, new FieldComparator(Globals.KEY_FIELD));
name|this
operator|.
name|comp
operator|=
name|comp
expr_stmt|;
name|list
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Set
name|keySet
init|=
name|entries
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|keySet
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|i
init|=
name|keySet
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|entries
operator|.
name|get
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sort the list so it is ordered according to creation (or read) order
comment|// when the table is unsorted.
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|IdComparator
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|method|getTheList ()
specifier|public
name|EventList
name|getTheList
parameter_list|()
block|{
return|return
name|list
return|;
block|}
DECL|method|databaseChanged (DatabaseChangeEvent e)
specifier|public
name|void
name|databaseChanged
parameter_list|(
name|DatabaseChangeEvent
name|e
parameter_list|)
block|{
name|list
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|DatabaseChangeEvent
operator|.
name|ADDED_ENTRY
condition|)
block|{
comment|//int pos = -Collections.binarySearch(list, e.getEntry(), comp) - 1;
name|list
operator|.
name|add
argument_list|(
name|e
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
comment|//System.out.println("Added. Size: " + list.size());
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|DatabaseChangeEvent
operator|.
name|REMOVED_ENTRY
condition|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
comment|//System.out.println("Removed. Size: " + list.size());
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|DatabaseChangeEvent
operator|.
name|CHANGED_ENTRY
condition|)
block|{
name|int
name|index
init|=
name|list
operator|.
name|indexOf
argument_list|(
name|e
operator|.
name|getEntry
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|e
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

