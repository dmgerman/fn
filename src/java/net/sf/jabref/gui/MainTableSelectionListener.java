begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEventListener
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEvent
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: alver  * Date: Oct 15, 2005  * Time: 3:02:52 AM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
DECL|class|MainTableSelectionListener
specifier|public
class|class
name|MainTableSelectionListener
implements|implements
name|ListEventListener
implements|,
name|MouseListener
implements|,
name|KeyListener
block|{
DECL|field|previewPanel
name|PreviewPanel
index|[]
name|previewPanel
init|=
literal|null
decl_stmt|;
DECL|field|activePreview
name|int
name|activePreview
init|=
literal|1
decl_stmt|;
DECL|field|preview
name|PreviewPanel
name|preview
decl_stmt|;
DECL|field|table
name|MainTable
name|table
decl_stmt|;
DECL|field|panel
name|BasePanel
name|panel
decl_stmt|;
DECL|field|tableRows
name|EventList
name|tableRows
decl_stmt|;
DECL|field|previewActive
specifier|private
name|boolean
name|previewActive
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"previewEnabled"
argument_list|)
decl_stmt|;
DECL|field|workingOnPreview
specifier|private
name|boolean
name|workingOnPreview
init|=
literal|false
decl_stmt|;
comment|//private int lastCharPressed = -1;
DECL|method|MainTableSelectionListener (BasePanel panel, MainTable table)
specifier|public
name|MainTableSelectionListener
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|MainTable
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|tableRows
operator|=
name|table
operator|.
name|getTableRows
argument_list|()
expr_stmt|;
name|instantiatePreviews
argument_list|()
expr_stmt|;
name|this
operator|.
name|preview
operator|=
name|previewPanel
index|[
name|activePreview
index|]
expr_stmt|;
block|}
DECL|method|instantiatePreviews ()
specifier|private
name|void
name|instantiatePreviews
parameter_list|()
block|{
name|previewPanel
operator|=
operator|new
name|PreviewPanel
index|[]
block|{
operator|new
name|PreviewPanel
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"preview0"
argument_list|)
argument_list|)
block|,
operator|new
name|PreviewPanel
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"preview1"
argument_list|)
argument_list|)
block|}
expr_stmt|;
name|BibtexEntry
name|testEntry
init|=
name|PreviewPrefsTab
operator|.
name|getTestEntry
argument_list|()
decl_stmt|;
name|previewPanel
index|[
literal|0
index|]
operator|.
name|setEntry
argument_list|(
name|testEntry
argument_list|)
expr_stmt|;
name|previewPanel
index|[
literal|1
index|]
operator|.
name|setEntry
argument_list|(
name|testEntry
argument_list|)
expr_stmt|;
block|}
DECL|method|updatePreviews ()
specifier|public
name|void
name|updatePreviews
parameter_list|()
block|{
try|try
block|{
name|previewPanel
index|[
literal|0
index|]
operator|.
name|readLayout
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"preview0"
argument_list|)
argument_list|)
expr_stmt|;
name|previewPanel
index|[
literal|1
index|]
operator|.
name|readLayout
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"preview1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|listChanged (ListEvent e)
specifier|public
name|void
name|listChanged
parameter_list|(
name|ListEvent
name|e
parameter_list|)
block|{
comment|//System.out.println(e);
name|EventList
name|selected
init|=
name|e
operator|.
name|getSourceList
argument_list|()
decl_stmt|;
name|Object
name|newSelected
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|ListEvent
operator|.
name|INSERT
condition|)
block|{
if|if
condition|(
name|newSelected
operator|!=
literal|null
condition|)
return|return;
comment|// More than one new selected. Do nothing.
else|else
block|{
if|if
condition|(
name|e
operator|.
name|getIndex
argument_list|()
operator|<
name|selected
operator|.
name|size
argument_list|()
condition|)
name|newSelected
operator|=
name|selected
operator|.
name|get
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|newSelected
operator|!=
literal|null
condition|)
block|{
comment|// Ok, we have a single new entry that has been selected. Now decide what to do with it:
specifier|final
name|BibtexEntry
name|toShow
init|=
operator|(
name|BibtexEntry
operator|)
name|newSelected
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|panel
operator|.
name|getMode
argument_list|()
decl_stmt|;
comment|// What is the panel already showing?
if|if
condition|(
operator|(
name|mode
operator|==
name|BasePanel
operator|.
name|WILL_SHOW_EDITOR
operator|)
operator|||
operator|(
name|mode
operator|==
name|BasePanel
operator|.
name|SHOWING_EDITOR
operator|)
condition|)
block|{
comment|// An entry is currently being edited.
name|EntryEditor
name|oldEditor
init|=
name|panel
operator|.
name|getCurrentEditor
argument_list|()
decl_stmt|;
comment|// Get an old or new editor for the entry to edit:
name|EntryEditor
name|newEditor
init|=
name|panel
operator|.
name|getEntryEditor
argument_list|(
name|toShow
argument_list|)
decl_stmt|;
comment|// Show the new editor unless it was already visible:
if|if
condition|(
operator|(
name|newEditor
operator|!=
name|oldEditor
operator|)
operator|||
operator|(
name|mode
operator|!=
name|BasePanel
operator|.
name|SHOWING_EDITOR
operator|)
condition|)
block|{
name|panel
operator|.
name|showEntryEditor
argument_list|(
name|newEditor
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Either nothing or a preview was shown. Update the preview.
if|if
condition|(
name|previewActive
condition|)
block|{
name|updatePreview
argument_list|(
name|toShow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|updatePreview (final BibtexEntry toShow, final boolean changedPreview)
specifier|private
name|void
name|updatePreview
parameter_list|(
specifier|final
name|BibtexEntry
name|toShow
parameter_list|,
specifier|final
name|boolean
name|changedPreview
parameter_list|)
block|{
if|if
condition|(
name|workingOnPreview
condition|)
return|return;
specifier|final
name|int
name|mode
init|=
name|panel
operator|.
name|getMode
argument_list|()
decl_stmt|;
name|workingOnPreview
operator|=
literal|true
expr_stmt|;
specifier|final
name|Runnable
name|update
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// If nothing was already shown, set the preview and move the separator:
if|if
condition|(
name|changedPreview
operator|||
operator|(
name|mode
operator|==
name|BasePanel
operator|.
name|SHOWING_NOTHING
operator|)
condition|)
block|{
name|panel
operator|.
name|showPreview
argument_list|(
name|preview
argument_list|)
expr_stmt|;
name|panel
operator|.
name|adjustSplitter
argument_list|()
expr_stmt|;
block|}
name|workingOnPreview
operator|=
literal|false
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|Runnable
name|worker
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|preview
operator|.
name|setEntry
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
operator|(
operator|new
name|Thread
argument_list|(
name|worker
argument_list|)
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|editSignalled ()
specifier|public
name|void
name|editSignalled
parameter_list|()
block|{
if|if
condition|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|editSignalled
argument_list|(
operator|(
name|BibtexEntry
operator|)
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|editSignalled (BibtexEntry entry)
specifier|public
name|void
name|editSignalled
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
specifier|final
name|int
name|mode
init|=
name|panel
operator|.
name|getMode
argument_list|()
decl_stmt|;
name|EntryEditor
name|editor
init|=
name|panel
operator|.
name|getEntryEditor
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
name|BasePanel
operator|.
name|SHOWING_EDITOR
condition|)
block|{
name|panel
operator|.
name|showEntryEditor
argument_list|(
name|editor
argument_list|)
expr_stmt|;
name|panel
operator|.
name|adjustSplitter
argument_list|()
expr_stmt|;
block|}
operator|new
name|FocusRequester
argument_list|(
name|editor
argument_list|)
expr_stmt|;
block|}
DECL|method|mouseReleased (MouseEvent e)
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// First find the column on which the user has clicked.
specifier|final
name|int
name|col
init|=
name|table
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|,
name|row
init|=
name|table
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if the user has right-clicked. If so, open the right-click menu.
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|processPopupTrigger
argument_list|(
name|e
argument_list|,
name|row
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
DECL|method|mousePressed (MouseEvent e)
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// First find the column on which the user has clicked.
specifier|final
name|int
name|col
init|=
name|table
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|,
name|row
init|=
name|table
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
comment|// A double click on an entry should open the entry's editor.
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|BibtexEntry
name|toShow
init|=
operator|(
name|BibtexEntry
operator|)
name|tableRows
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|editSignalled
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
block|}
comment|// Check if the user has clicked on an icon cell to open url or pdf.
specifier|final
name|String
index|[]
name|iconType
init|=
name|table
operator|.
name|getIconTypeForColumn
argument_list|(
name|col
argument_list|)
decl_stmt|;
comment|// Check if the user has right-clicked. If so, open the right-click menu.
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
if|if
condition|(
name|iconType
operator|==
literal|null
condition|)
name|processPopupTrigger
argument_list|(
name|e
argument_list|,
name|row
argument_list|)
expr_stmt|;
else|else
name|showIconRightClickMenu
argument_list|(
name|e
argument_list|,
name|row
argument_list|,
name|iconType
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|iconType
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|table
operator|.
name|getValueAt
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return;
comment|// No icon here, so we do nothing.
specifier|final
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|tableRows
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// Get the icon type. Corresponds to the field name.
name|int
name|hasField
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|iconType
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
if|if
condition|(
name|entry
operator|.
name|getField
argument_list|(
name|iconType
index|[
name|i
index|]
argument_list|)
operator|!=
literal|null
condition|)
name|hasField
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|hasField
operator|==
operator|-
literal|1
condition|)
return|return;
specifier|final
name|String
name|fieldName
init|=
name|iconType
index|[
name|hasField
index|]
decl_stmt|;
comment|// Open it now. We do this in a thread, so the program won't freeze during the wait.
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"External viewer called"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|Object
name|link
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|iconType
operator|==
literal|null
condition|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"Error: no link to "
operator|+
name|fieldName
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
comment|// There is an icon, but the field is not set.
block|}
try|try
block|{
name|Util
operator|.
name|openExternalViewer
argument_list|(
name|panel
operator|.
name|metaData
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|link
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Process general right-click events on the table. Show the table context menu at      * the position where the user right-clicked.      * @param e The mouse event defining the popup trigger.      * @param row The row where the event occured.      */
DECL|method|processPopupTrigger (MouseEvent e, int row)
specifier|protected
name|void
name|processPopupTrigger
parameter_list|(
name|MouseEvent
name|e
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|int
name|selRow
init|=
name|table
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|selRow
operator|==
operator|-
literal|1
operator|||
comment|// (getSelectedRowCount() == 0))
operator|!
name|table
operator|.
name|isRowSelected
argument_list|(
name|table
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|table
operator|.
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|//panel.updateViewToSelected();
block|}
name|RightClickMenu
name|rightClickMenu
init|=
operator|new
name|RightClickMenu
argument_list|(
name|panel
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
name|rightClickMenu
operator|.
name|show
argument_list|(
name|table
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process popup trigger events occuring on an icon cell in the table. Show      * a menu where the user can choose which external resource to open for the      * entry. If no relevant external resources exist, let the normal popup trigger      * handler do its thing instead.      * @param e The mouse event defining this popup trigger.      * @param row The row where the event occured.      * @param iconType A string array containing the resource fields associated with      *  this table cell.      */
DECL|method|showIconRightClickMenu (MouseEvent e, int row, String[] iconType)
specifier|private
name|void
name|showIconRightClickMenu
parameter_list|(
name|MouseEvent
name|e
parameter_list|,
name|int
name|row
parameter_list|,
name|String
index|[]
name|iconType
parameter_list|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|tableRows
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iconType
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|entry
operator|.
name|getField
argument_list|(
name|iconType
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|menu
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileMenuItem
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
operator|(
name|String
operator|)
name|o
argument_list|,
name|GUIGlobals
operator|.
name|getTableIcon
argument_list|(
name|iconType
index|[
name|i
index|]
argument_list|)
operator|.
name|getIcon
argument_list|()
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|processPopupTrigger
argument_list|(
name|e
argument_list|,
name|row
argument_list|)
expr_stmt|;
return|return;
block|}
name|menu
operator|.
name|show
argument_list|(
name|table
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|entryEditorClosing (EntryEditor editor)
specifier|public
name|void
name|entryEditorClosing
parameter_list|(
name|EntryEditor
name|editor
parameter_list|)
block|{
name|preview
operator|.
name|setEntry
argument_list|(
name|editor
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|previewActive
condition|)
name|panel
operator|.
name|showPreview
argument_list|(
name|preview
argument_list|)
expr_stmt|;
else|else
name|panel
operator|.
name|hideBottomComponent
argument_list|()
expr_stmt|;
name|panel
operator|.
name|adjustSplitter
argument_list|()
expr_stmt|;
operator|new
name|FocusRequester
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
DECL|method|mouseClicked (MouseEvent e)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{      }
DECL|method|mouseEntered (MouseEvent e)
specifier|public
name|void
name|mouseEntered
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{      }
DECL|method|mouseExited (MouseEvent e)
specifier|public
name|void
name|mouseExited
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{      }
DECL|method|setPreviewActive (boolean enabled)
specifier|public
name|void
name|setPreviewActive
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|previewActive
operator|=
name|enabled
expr_stmt|;
if|if
condition|(
operator|!
name|previewActive
condition|)
block|{
name|panel
operator|.
name|hideBottomComponent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|updatePreview
argument_list|(
operator|(
name|BibtexEntry
operator|)
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|switchPreview ()
specifier|public
name|void
name|switchPreview
parameter_list|()
block|{
if|if
condition|(
name|activePreview
operator|<
name|previewPanel
operator|.
name|length
operator|-
literal|1
condition|)
name|activePreview
operator|++
expr_stmt|;
else|else
name|activePreview
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|previewActive
condition|)
block|{
name|this
operator|.
name|preview
operator|=
name|previewPanel
index|[
name|activePreview
index|]
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|updatePreview
argument_list|(
operator|(
name|BibtexEntry
operator|)
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Register key event on the main table. If the key is a letter or a digit,      * we should select the first entry in the table which starts with the given      * letter in the column by which the table is sorted.       * @param e The KeyEvent      */
DECL|method|keyTyped (KeyEvent e)
specifier|public
name|void
name|keyTyped
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
comment|//System.out.println(e.getKeyChar()+" "+table.getSortingColumn());
if|if
condition|(
operator|(
operator|!
name|e
operator|.
name|isActionKey
argument_list|()
operator|)
operator|&&
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|e
operator|.
name|getKeyChar
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|sortingColumn
init|=
name|table
operator|.
name|getSortingColumn
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|e
operator|.
name|getKeyChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortingColumn
operator|==
operator|-
literal|1
condition|)
return|return;
comment|// No sorting? TODO: look up by author, etc.?
comment|// TODO: the following lookup should be done by a faster algorithm,
comment|// such as binary search. But the table may not be sorted properly,
comment|// due to marked entries, search etc., which rules out the binary search.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|table
operator|.
name|getValueAt
argument_list|(
name|i
argument_list|,
name|sortingColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
continue|continue;
name|String
name|s
init|=
name|o
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|s
operator|.
name|length
argument_list|()
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|c
operator|)
condition|)
block|{
name|table
operator|.
name|setRowSelectionInterval
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|table
operator|.
name|ensureVisible
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
DECL|method|keyReleased (KeyEvent e)
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{     }
DECL|method|keyPressed (KeyEvent e)
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{     }
block|}
end_class

end_unit

