begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|EntryEditor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|FocusRequester
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|PreviewPanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|RightClickMenu
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileMenuItem
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEvent
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEventListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldValue
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldsUtils
import|;
end_import

begin_comment
comment|/**  * List event, mouse, key and focus listener for the main table that makes up the  * most part of the BasePanel for a single bib database.  */
end_comment

begin_class
DECL|class|MainTableSelectionListener
specifier|public
class|class
name|MainTableSelectionListener
implements|implements
name|ListEventListener
argument_list|<
name|BibtexEntry
argument_list|>
implements|,
name|MouseListener
implements|,
name|KeyListener
implements|,
name|FocusListener
block|{
DECL|field|previewPanel
name|PreviewPanel
index|[]
name|previewPanel
init|=
literal|null
decl_stmt|;
DECL|field|activePreview
name|int
name|activePreview
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"activePreview"
argument_list|)
decl_stmt|;
DECL|field|preview
name|PreviewPanel
name|preview
decl_stmt|;
DECL|field|table
name|MainTable
name|table
decl_stmt|;
DECL|field|panel
name|BasePanel
name|panel
decl_stmt|;
DECL|field|tableRows
name|EventList
argument_list|<
name|BibtexEntry
argument_list|>
name|tableRows
decl_stmt|;
DECL|field|previewActive
specifier|private
name|boolean
name|previewActive
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"previewEnabled"
argument_list|)
decl_stmt|;
DECL|field|workingOnPreview
specifier|private
name|boolean
name|workingOnPreview
init|=
literal|false
decl_stmt|;
DECL|field|enabled
specifier|private
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
comment|// Register the last character pressed to quick jump in the table. Together
comment|// with storing the last row number jumped to, this is used to let multiple
comment|// key strokes cycle between all entries starting with the same letter:
DECL|field|lastPressed
specifier|private
name|int
index|[]
name|lastPressed
init|=
operator|new
name|int
index|[
literal|20
index|]
decl_stmt|;
DECL|field|lastPressedCount
specifier|private
name|int
name|lastPressedCount
init|=
literal|0
decl_stmt|;
DECL|field|lastPressedTime
specifier|private
name|long
name|lastPressedTime
init|=
literal|0
decl_stmt|;
DECL|field|QUICK_JUMP_TIMEOUT
specifier|private
name|long
name|QUICK_JUMP_TIMEOUT
init|=
literal|2000
decl_stmt|;
comment|//private int lastCharPressed = -1;
DECL|method|MainTableSelectionListener (BasePanel panel, MainTable table)
specifier|public
name|MainTableSelectionListener
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|MainTable
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|tableRows
operator|=
name|table
operator|.
name|getTableRows
argument_list|()
expr_stmt|;
name|instantiatePreviews
argument_list|()
expr_stmt|;
name|this
operator|.
name|preview
operator|=
name|previewPanel
index|[
name|activePreview
index|]
expr_stmt|;
block|}
DECL|method|setEnabled (boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
DECL|method|instantiatePreviews ()
specifier|private
name|void
name|instantiatePreviews
parameter_list|()
block|{
name|previewPanel
operator|=
operator|new
name|PreviewPanel
index|[]
block|{
operator|new
name|PreviewPanel
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|,
literal|null
argument_list|,
name|panel
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"preview0"
argument_list|)
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|PreviewPanel
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|,
literal|null
argument_list|,
name|panel
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"preview1"
argument_list|)
argument_list|,
literal|true
argument_list|)
block|}
expr_stmt|;
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|getSearchManager
argument_list|()
operator|.
name|addSearchListener
argument_list|(
name|previewPanel
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|getSearchManager
argument_list|()
operator|.
name|addSearchListener
argument_list|(
name|previewPanel
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|updatePreviews ()
specifier|public
name|void
name|updatePreviews
parameter_list|()
block|{
try|try
block|{
name|previewPanel
index|[
literal|0
index|]
operator|.
name|readLayout
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"preview0"
argument_list|)
argument_list|)
expr_stmt|;
name|previewPanel
index|[
literal|1
index|]
operator|.
name|readLayout
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"preview1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|listChanged (ListEvent<BibtexEntry> e)
specifier|public
name|void
name|listChanged
parameter_list|(
name|ListEvent
argument_list|<
name|BibtexEntry
argument_list|>
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
name|EventList
argument_list|<
name|BibtexEntry
argument_list|>
name|selected
init|=
name|e
operator|.
name|getSourceList
argument_list|()
decl_stmt|;
name|Object
name|newSelected
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|ListEvent
operator|.
name|INSERT
condition|)
block|{
if|if
condition|(
name|newSelected
operator|!=
literal|null
condition|)
return|return;
comment|// More than one new selected. Do nothing.
else|else
block|{
if|if
condition|(
name|e
operator|.
name|getIndex
argument_list|()
operator|<
name|selected
operator|.
name|size
argument_list|()
condition|)
name|newSelected
operator|=
name|selected
operator|.
name|get
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|newSelected
operator|!=
literal|null
condition|)
block|{
comment|// Ok, we have a single new entry that has been selected. Now decide what to do with it:
specifier|final
name|BibtexEntry
name|toShow
init|=
operator|(
name|BibtexEntry
operator|)
name|newSelected
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|panel
operator|.
name|getMode
argument_list|()
decl_stmt|;
comment|// What is the panel already showing?
if|if
condition|(
operator|(
name|mode
operator|==
name|BasePanel
operator|.
name|WILL_SHOW_EDITOR
operator|)
operator|||
operator|(
name|mode
operator|==
name|BasePanel
operator|.
name|SHOWING_EDITOR
operator|)
condition|)
block|{
comment|// An entry is currently being edited.
name|EntryEditor
name|oldEditor
init|=
name|panel
operator|.
name|getCurrentEditor
argument_list|()
decl_stmt|;
name|String
name|visName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|oldEditor
operator|!=
literal|null
condition|)
block|{
name|visName
operator|=
name|oldEditor
operator|.
name|getVisiblePanelName
argument_list|()
expr_stmt|;
block|}
comment|// Get an old or new editor for the entry to edit:
name|EntryEditor
name|newEditor
init|=
name|panel
operator|.
name|getEntryEditor
argument_list|(
name|toShow
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|oldEditor
operator|!=
literal|null
operator|)
condition|)
comment|//&& (oldEditor != newEditor))
name|oldEditor
operator|.
name|setMovingToDifferentEntry
argument_list|()
expr_stmt|;
comment|// Show the new editor unless it was already visible:
if|if
condition|(
operator|(
name|newEditor
operator|!=
name|oldEditor
operator|)
operator|||
operator|(
name|mode
operator|!=
name|BasePanel
operator|.
name|SHOWING_EDITOR
operator|)
condition|)
block|{
if|if
condition|(
name|visName
operator|!=
literal|null
condition|)
name|newEditor
operator|.
name|setVisiblePanel
argument_list|(
name|visName
argument_list|)
expr_stmt|;
name|panel
operator|.
name|showEntryEditor
argument_list|(
name|newEditor
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|table
operator|.
name|ensureVisible
argument_list|(
name|table
operator|.
name|getSelectedRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Either nothing or a preview was shown. Update the preview.
if|if
condition|(
name|previewActive
condition|)
block|{
name|updatePreview
argument_list|(
name|toShow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|updatePreview (final BibtexEntry toShow, final boolean changedPreview)
specifier|private
name|void
name|updatePreview
parameter_list|(
specifier|final
name|BibtexEntry
name|toShow
parameter_list|,
specifier|final
name|boolean
name|changedPreview
parameter_list|)
block|{
name|updatePreview
argument_list|(
name|toShow
argument_list|,
name|changedPreview
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|updatePreview (final BibtexEntry toShow, final boolean changedPreview, int repeats)
specifier|private
name|void
name|updatePreview
parameter_list|(
specifier|final
name|BibtexEntry
name|toShow
parameter_list|,
specifier|final
name|boolean
name|changedPreview
parameter_list|,
name|int
name|repeats
parameter_list|)
block|{
if|if
condition|(
name|workingOnPreview
condition|)
block|{
if|if
condition|(
name|repeats
operator|>
literal|0
condition|)
return|return;
comment|// We've already waited once. Give up on this selection.
name|Timer
name|t
init|=
operator|new
name|Timer
argument_list|(
literal|50
argument_list|,
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|updatePreview
argument_list|(
name|toShow
argument_list|,
name|changedPreview
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|setRepeats
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
return|return;
block|}
name|EventList
argument_list|<
name|BibtexEntry
argument_list|>
name|list
init|=
name|table
operator|.
name|getSelected
argument_list|()
decl_stmt|;
comment|// Check if the entry to preview is still selected:
if|if
condition|(
operator|(
name|list
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|)
operator|||
operator|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
name|toShow
operator|)
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|mode
init|=
name|panel
operator|.
name|getMode
argument_list|()
decl_stmt|;
name|workingOnPreview
operator|=
literal|true
expr_stmt|;
specifier|final
name|Runnable
name|update
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// If nothing was already shown, set the preview and move the separator:
if|if
condition|(
name|changedPreview
operator|||
operator|(
name|mode
operator|==
name|BasePanel
operator|.
name|SHOWING_NOTHING
operator|)
condition|)
block|{
name|panel
operator|.
name|showPreview
argument_list|(
name|preview
argument_list|)
expr_stmt|;
name|panel
operator|.
name|adjustSplitter
argument_list|()
expr_stmt|;
block|}
name|workingOnPreview
operator|=
literal|false
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|Runnable
name|worker
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|preview
operator|.
name|setEntry
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
operator|(
operator|new
name|Thread
argument_list|(
name|worker
argument_list|)
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|editSignalled ()
specifier|public
name|void
name|editSignalled
parameter_list|()
block|{
if|if
condition|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|editSignalled
argument_list|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|editSignalled (BibtexEntry entry)
specifier|public
name|void
name|editSignalled
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
specifier|final
name|int
name|mode
init|=
name|panel
operator|.
name|getMode
argument_list|()
decl_stmt|;
name|EntryEditor
name|editor
init|=
name|panel
operator|.
name|getEntryEditor
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
name|BasePanel
operator|.
name|SHOWING_EDITOR
condition|)
block|{
name|panel
operator|.
name|showEntryEditor
argument_list|(
name|editor
argument_list|)
expr_stmt|;
name|panel
operator|.
name|adjustSplitter
argument_list|()
expr_stmt|;
block|}
operator|new
name|FocusRequester
argument_list|(
name|editor
argument_list|)
expr_stmt|;
block|}
DECL|method|mouseReleased (MouseEvent e)
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// First find the column and row on which the user has clicked.
specifier|final
name|int
name|col
init|=
name|table
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|,
name|row
init|=
name|table
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if the user has clicked on an icon cell to open url or pdf.
specifier|final
name|String
index|[]
name|iconType
init|=
name|table
operator|.
name|getIconTypeForColumn
argument_list|(
name|col
argument_list|)
decl_stmt|;
comment|// Check if the user has right-clicked. If so, open the right-click menu.
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
operator|||
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON3
operator|)
condition|)
block|{
if|if
condition|(
name|iconType
operator|==
literal|null
condition|)
name|processPopupTrigger
argument_list|(
name|e
argument_list|,
name|row
argument_list|)
expr_stmt|;
else|else
name|showIconRightClickMenu
argument_list|(
name|e
argument_list|,
name|row
argument_list|,
name|iconType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mousePressed (MouseEvent e)
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// all handling is done in "mouseReleased"
block|}
DECL|method|mouseClicked (MouseEvent e)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// First find the column on which the user has clicked.
specifier|final
name|int
name|col
init|=
name|table
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|,
name|row
init|=
name|table
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
comment|// A double click on an entry should open the entry's editor.
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|BibtexEntry
name|toShow
init|=
name|tableRows
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|editSignalled
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
block|}
comment|// Check if the user has clicked on an icon cell to open url or pdf.
specifier|final
name|String
index|[]
name|iconType
init|=
name|table
operator|.
name|getIconTypeForColumn
argument_list|(
name|col
argument_list|)
decl_stmt|;
comment|// Workaround for Windows. Right-click is not popup trigger on mousePressed, but
comment|// on mouseReleased. Therefore we need to avoid taking action at this point, because
comment|// action will be taken when the button is released:
if|if
condition|(
name|Globals
operator|.
name|ON_WIN
operator|&&
operator|(
name|iconType
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|!=
name|MouseEvent
operator|.
name|BUTTON1
operator|)
condition|)
return|return;
if|if
condition|(
name|iconType
operator|!=
literal|null
condition|)
block|{
comment|// left click on icon field
name|SpecialField
name|field
init|=
name|SpecialFieldsUtils
operator|.
name|getSpecialFieldInstanceFromFieldName
argument_list|(
name|iconType
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
name|field
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// special field found
if|if
condition|(
name|field
operator|.
name|isSingleValueField
argument_list|()
condition|)
block|{
comment|// directly execute toggle action instead of showing a menu with one action
name|field
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAction
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|)
operator|.
name|action
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
for|for
control|(
name|SpecialFieldValue
name|val
range|:
name|field
operator|.
name|getValues
argument_list|()
control|)
block|{
name|menu
operator|.
name|add
argument_list|(
name|val
operator|.
name|getMenuAction
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|menu
operator|.
name|show
argument_list|(
name|table
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|Object
name|value
init|=
name|table
operator|.
name|getValueAt
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return;
comment|// No icon here, so we do nothing.
specifier|final
name|BibtexEntry
name|entry
init|=
name|tableRows
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// Get the icon type. Corresponds to the field name.
name|int
name|hasField
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|iconType
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
if|if
condition|(
name|entry
operator|.
name|getField
argument_list|(
name|iconType
index|[
name|i
index|]
argument_list|)
operator|!=
literal|null
condition|)
name|hasField
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|hasField
operator|==
operator|-
literal|1
condition|)
return|return;
specifier|final
name|String
name|fieldName
init|=
name|iconType
index|[
name|hasField
index|]
decl_stmt|;
comment|// Open it now. We do this in a thread, so the program won't freeze during the wait.
operator|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"External viewer called"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|Object
name|link
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|link
operator|==
literal|null
condition|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"Error: no link to "
operator|+
name|fieldName
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
comment|// There is an icon, but the field is not set.
block|}
block|{
comment|// See if this is a simple file link field, or if it is a file-list
comment|// field that can specify a list of links:
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|)
condition|)
block|{
comment|// We use a FileListTableModel to parse the field content:
name|FileListTableModel
name|fileList
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|fileList
operator|.
name|setContent
argument_list|(
operator|(
name|String
operator|)
name|link
argument_list|)
expr_stmt|;
comment|// If there are one or more links, open the first one:
if|if
condition|(
name|fileList
operator|.
name|getRowCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|FileListEntry
name|flEntry
init|=
name|fileList
operator|.
name|getEntry
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExternalFileMenuItem
name|item
init|=
operator|new
name|ExternalFileMenuItem
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|entry
argument_list|,
literal|""
argument_list|,
name|flEntry
operator|.
name|getLink
argument_list|()
argument_list|,
name|flEntry
operator|.
name|getType
argument_list|()
operator|.
name|getIcon
argument_list|()
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
argument_list|,
name|flEntry
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|item
operator|.
name|openLink
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to open link."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|Util
operator|.
name|openExternalViewer
argument_list|(
name|panel
operator|.
name|metaData
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|link
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to open link."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*ExternalFileType type = Globals.prefs.getExternalFileTypeByMimeType("text/html");                             ExternalFileMenuItem item = new ExternalFileMenuItem                                     (panel.frame(), entry, "",                                     (String)link, type.getIcon(),                                     panel.metaData(), type);                             boolean success = item.openLink();                             if (!success) {                                 panel.output(Globals.lang("Unable to open link."));                             } */
comment|//Util.openExternalViewer(panel.metaData(), (String)link, fieldName);
block|}
block|}
comment|//catch (IOException ex) {
comment|//    panel.output(Globals.lang("Error") + ": " + ex.getMessage());
comment|//}
block|}
block|}
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Process general right-click events on the table. Show the table context menu at      * the position where the user right-clicked.      * @param e The mouse event defining the popup trigger.      * @param row The row where the event occured.      */
DECL|method|processPopupTrigger (MouseEvent e, int row)
specifier|protected
name|void
name|processPopupTrigger
parameter_list|(
name|MouseEvent
name|e
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|int
name|selRow
init|=
name|table
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|selRow
operator|==
operator|-
literal|1
operator|||
comment|// (getSelectedRowCount() == 0))
operator|!
name|table
operator|.
name|isRowSelected
argument_list|(
name|table
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|table
operator|.
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|//panel.updateViewToSelected();
block|}
name|RightClickMenu
name|rightClickMenu
init|=
operator|new
name|RightClickMenu
argument_list|(
name|panel
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
name|rightClickMenu
operator|.
name|show
argument_list|(
name|table
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process popup trigger events occurring on an icon cell in the table. Show      * a menu where the user can choose which external resource to open for the      * entry. If no relevant external resources exist, let the normal popup trigger      * handler do its thing instead.      * @param e The mouse event defining this popup trigger.      * @param row The row where the event occurred.      * @param iconType A string array containing the resource fields associated with      *  this table cell.      */
DECL|method|showIconRightClickMenu (MouseEvent e, int row, String[] iconType)
specifier|private
name|void
name|showIconRightClickMenu
parameter_list|(
name|MouseEvent
name|e
parameter_list|,
name|int
name|row
parameter_list|,
name|String
index|[]
name|iconType
parameter_list|)
block|{
name|BibtexEntry
name|entry
init|=
name|tableRows
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
name|boolean
name|showDefaultPopup
init|=
literal|true
decl_stmt|;
comment|// See if this is a simple file link field, or if it is a file-list
comment|// field that can specify a list of links:
if|if
condition|(
name|iconType
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|)
condition|)
block|{
comment|// We use a FileListTableModel to parse the field content:
name|Object
name|o
init|=
name|entry
operator|.
name|getField
argument_list|(
name|iconType
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|FileListTableModel
name|fileList
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|fileList
operator|.
name|setContent
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
comment|// If there are one or more links, open the first one:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileList
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileListEntry
name|flEntry
init|=
name|fileList
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|description
init|=
name|flEntry
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|description
operator|==
literal|null
operator|)
operator|||
operator|(
name|description
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
name|description
operator|=
name|flEntry
operator|.
name|getLink
argument_list|()
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileMenuItem
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|entry
argument_list|,
name|description
argument_list|,
name|flEntry
operator|.
name|getLink
argument_list|()
argument_list|,
name|flEntry
operator|.
name|getType
argument_list|()
operator|.
name|getIcon
argument_list|()
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
argument_list|,
name|flEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|showDefaultPopup
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|SpecialField
name|field
init|=
name|SpecialFieldsUtils
operator|.
name|getSpecialFieldInstanceFromFieldName
argument_list|(
name|iconType
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
comment|//                for (SpecialFieldValue val: field.getValues()) {
comment|//                	menu.add(val.getMenuAction(panel.frame()));
comment|//                }
comment|// full pop should be shown as left click already shows short popup
name|showDefaultPopup
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iconType
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|entry
operator|.
name|getField
argument_list|(
name|iconType
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|menu
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileMenuItem
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|entry
argument_list|,
operator|(
name|String
operator|)
name|o
argument_list|,
operator|(
name|String
operator|)
name|o
argument_list|,
name|GUIGlobals
operator|.
name|getTableIcon
argument_list|(
name|iconType
index|[
name|i
index|]
argument_list|)
operator|.
name|getIcon
argument_list|()
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
argument_list|,
name|iconType
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|showDefaultPopup
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|showDefaultPopup
condition|)
block|{
name|processPopupTrigger
argument_list|(
name|e
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|menu
operator|.
name|show
argument_list|(
name|table
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|entryEditorClosing (EntryEditor editor)
specifier|public
name|void
name|entryEditorClosing
parameter_list|(
name|EntryEditor
name|editor
parameter_list|)
block|{
name|preview
operator|.
name|setEntry
argument_list|(
name|editor
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|previewActive
condition|)
name|panel
operator|.
name|showPreview
argument_list|(
name|preview
argument_list|)
expr_stmt|;
else|else
name|panel
operator|.
name|hideBottomComponent
argument_list|()
expr_stmt|;
name|panel
operator|.
name|adjustSplitter
argument_list|()
expr_stmt|;
operator|new
name|FocusRequester
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
DECL|method|mouseEntered (MouseEvent e)
specifier|public
name|void
name|mouseEntered
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{      }
DECL|method|mouseExited (MouseEvent e)
specifier|public
name|void
name|mouseExited
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{      }
DECL|method|setPreviewActive (boolean enabled)
specifier|public
name|void
name|setPreviewActive
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|previewActive
operator|=
name|enabled
expr_stmt|;
if|if
condition|(
operator|!
name|previewActive
condition|)
block|{
name|panel
operator|.
name|hideBottomComponent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|updatePreview
argument_list|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|switchPreview ()
specifier|public
name|void
name|switchPreview
parameter_list|()
block|{
if|if
condition|(
name|activePreview
operator|<
name|previewPanel
operator|.
name|length
operator|-
literal|1
condition|)
name|activePreview
operator|++
expr_stmt|;
else|else
name|activePreview
operator|=
literal|0
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
literal|"activePreview"
argument_list|,
name|activePreview
argument_list|)
expr_stmt|;
if|if
condition|(
name|previewActive
condition|)
block|{
name|this
operator|.
name|preview
operator|=
name|previewPanel
index|[
name|activePreview
index|]
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|updatePreview
argument_list|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Receive key event on the main table. If the key is a letter or a digit,      * we should select the first entry in the table which starts with the given      * letter in the column by which the table is sorted.      * @param e The KeyEvent      */
DECL|method|keyTyped (KeyEvent e)
specifier|public
name|void
name|keyTyped
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|!
name|e
operator|.
name|isActionKey
argument_list|()
operator|)
operator|&&
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|e
operator|.
name|getKeyChar
argument_list|()
argument_list|)
comment|//&& !e.isControlDown()&& !e.isAltDown()&& !e.isMetaDown()) {
operator|&&
operator|(
name|e
operator|.
name|getModifiers
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|-
name|lastPressedTime
operator|>
name|QUICK_JUMP_TIMEOUT
condition|)
name|lastPressedCount
operator|=
literal|0
expr_stmt|;
comment|// Reset last pressed character
comment|// Update timestamp:
name|lastPressedTime
operator|=
name|time
expr_stmt|;
comment|// Add the new char to the search array:
name|int
name|c
init|=
name|e
operator|.
name|getKeyChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastPressedCount
operator|<
name|lastPressed
operator|.
name|length
condition|)
name|lastPressed
index|[
name|lastPressedCount
operator|++
index|]
operator|=
name|c
expr_stmt|;
name|int
name|sortingColumn
init|=
name|table
operator|.
name|getSortingColumn
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortingColumn
operator|==
operator|-
literal|1
condition|)
return|return;
comment|// No sorting? TODO: look up by author, etc.?
comment|// TODO: the following lookup should be done by a faster algorithm,
comment|// such as binary search. But the table may not be sorted properly,
comment|// due to marked entries, search etc., which rules out the binary search.
name|int
name|startRow
init|=
literal|0
decl_stmt|;
comment|/*if ((c == lastPressed)&& (lastQuickJumpRow>= 0)) {                 if (lastQuickJumpRow< table.getRowCount()-1)                     startRow = lastQuickJumpRow+1;             }*/
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|startRow
init|;
name|i
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|table
operator|.
name|getValueAt
argument_list|(
name|i
argument_list|,
name|sortingColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
continue|continue;
name|String
name|s
init|=
name|o
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>=
name|lastPressedCount
condition|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|lastPressedCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|!=
name|lastPressed
index|[
name|j
index|]
condition|)
break|break;
comment|// Escape the loop immediately when we find a mismatch
elseif|else
if|if
condition|(
name|j
operator|==
name|lastPressedCount
operator|-
literal|1
condition|)
block|{
comment|// We found a match:
name|table
operator|.
name|setRowSelectionInterval
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|table
operator|.
name|ensureVisible
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|//if ((s.length()>= 1)&& (s.charAt(0) == c)) {
comment|//}
block|}
comment|// Finished, no result. If we didn't start at the beginning of
comment|// the table, try that. Otherwise, exit the while loop.
if|if
condition|(
name|startRow
operator|>
literal|0
condition|)
name|startRow
operator|=
literal|0
expr_stmt|;
else|else
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getKeyChar
argument_list|()
operator|==
name|KeyEvent
operator|.
name|VK_ESCAPE
condition|)
block|{
name|lastPressedCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|keyReleased (KeyEvent e)
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{     }
DECL|method|keyPressed (KeyEvent e)
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{     }
DECL|method|focusGained (FocusEvent e)
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{      }
DECL|method|focusLost (FocusEvent e)
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
name|lastPressedCount
operator|=
literal|0
expr_stmt|;
comment|// Reset quick jump when focus is lost.
block|}
block|}
end_class

end_unit

