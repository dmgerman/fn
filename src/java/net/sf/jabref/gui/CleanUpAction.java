begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2012 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotRedoException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotUndoException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|UndoableEdit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|CellConstraints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|AbstractWorker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|CheckBoxMessage
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|ImportSettingsTab
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_class
DECL|class|CleanUpAction
specifier|public
class|class
name|CleanUpAction
extends|extends
name|AbstractWorker
block|{
DECL|field|logger
specifier|private
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|CleanUpAction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
DECL|field|AKS_AUTO_NAMING_PDFS_AGAIN
name|AKS_AUTO_NAMING_PDFS_AGAIN
init|=
literal|"AskAutoNamingPDFsAgain"
decl_stmt|,
DECL|field|CLEANUP_DOI
name|CLEANUP_DOI
init|=
literal|"CleanUpDOI"
decl_stmt|,
DECL|field|CLEANUP_MONTH
name|CLEANUP_MONTH
init|=
literal|"CleanUpMonth"
decl_stmt|,
DECL|field|CLEANUP_PAGENUMBERS
name|CLEANUP_PAGENUMBERS
init|=
literal|"CleanUpPageNumbers"
decl_stmt|,
DECL|field|CLEANUP_MAKEPATHSRELATIVE
name|CLEANUP_MAKEPATHSRELATIVE
init|=
literal|"CleanUpMakePathsRelative"
decl_stmt|,
DECL|field|CLEANUP_RENAMEPDF
name|CLEANUP_RENAMEPDF
init|=
literal|"CleanUpRenamePDF"
decl_stmt|,
DECL|field|CLEANUP_RENAMEPDF_ONLYRELATIVE_PATHS
name|CLEANUP_RENAMEPDF_ONLYRELATIVE_PATHS
init|=
literal|"CleanUpRenamePDFonlyRelativePaths"
decl_stmt|,
DECL|field|CLEANUP_SUPERSCRIPTS
name|CLEANUP_SUPERSCRIPTS
init|=
literal|"CleanUpSuperscripts"
decl_stmt|;
DECL|method|putDefaults (HashMap<String, Object> defaults)
specifier|public
specifier|static
name|void
name|putDefaults
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaults
parameter_list|)
block|{
name|defaults
operator|.
name|put
argument_list|(
name|AKS_AUTO_NAMING_PDFS_AGAIN
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_SUPERSCRIPTS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_DOI
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_MONTH
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_PAGENUMBERS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_MAKEPATHSRELATIVE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_RENAMEPDF
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_RENAMEPDF_ONLYRELATIVE_PATHS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
DECL|field|cleanUpSuperscrips
specifier|private
name|JCheckBox
name|cleanUpSuperscrips
decl_stmt|;
DECL|field|cleanUpDOI
specifier|private
name|JCheckBox
name|cleanUpDOI
decl_stmt|;
DECL|field|cleanUpMonth
specifier|private
name|JCheckBox
name|cleanUpMonth
decl_stmt|;
DECL|field|cleanUpPageNumbers
specifier|private
name|JCheckBox
name|cleanUpPageNumbers
decl_stmt|;
DECL|field|cleanUpMakePathsRelative
specifier|private
name|JCheckBox
name|cleanUpMakePathsRelative
decl_stmt|;
DECL|field|cleanUpRenamePDF
specifier|private
name|JCheckBox
name|cleanUpRenamePDF
decl_stmt|;
DECL|field|cleanUpRenamePDFonlyRelativePaths
specifier|private
name|JCheckBox
name|cleanUpRenamePDFonlyRelativePaths
decl_stmt|;
DECL|field|optionsPanel
specifier|private
name|JPanel
name|optionsPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|panel
specifier|private
name|BasePanel
name|panel
decl_stmt|;
DECL|field|frame
specifier|private
name|JabRefFrame
name|frame
decl_stmt|;
comment|// global variable to count unsucessful Renames
DECL|field|unsuccesfullRenames
name|int
name|unsuccesfullRenames
init|=
literal|0
decl_stmt|;
DECL|method|CleanUpAction (BasePanel panel)
specifier|public
name|CleanUpAction
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|panel
operator|.
name|frame
argument_list|()
expr_stmt|;
name|initOptionsPanel
argument_list|()
expr_stmt|;
block|}
DECL|method|initOptionsPanel ()
specifier|private
name|void
name|initOptionsPanel
parameter_list|()
block|{
name|cleanUpSuperscrips
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Convert 1st, 2nd, ... to real superscripts"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpDOI
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Move DOIs from note and URL field to DOI field and remove http prefix"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpMonth
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Format content of month field to #mon#"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpPageNumbers
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Ensure that page ranges are of the form num1--num2"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpMakePathsRelative
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Make paths of linked files relative (if possible)"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpRenamePDF
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Rename PDFs to given file name format pattern"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpRenamePDF
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|arg0
parameter_list|)
block|{
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|setEnabled
argument_list|(
name|cleanUpRenamePDF
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cleanUpRenamePDFonlyRelativePaths
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Rename only PDFs having a relative path"
argument_list|)
argument_list|)
expr_stmt|;
name|optionsPanel
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|retrieveSettings
argument_list|()
expr_stmt|;
name|FormLayout
name|layout
init|=
operator|new
name|FormLayout
argument_list|(
literal|"left:15dlu,pref"
argument_list|,
literal|"pref, pref, pref, pref, pref, pref, pref, pref"
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builder
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layout
argument_list|,
name|optionsPanel
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDefaultDialogBorder
argument_list|()
expr_stmt|;
name|CellConstraints
name|cc
init|=
operator|new
name|CellConstraints
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpSuperscrips
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpDOI
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpMonth
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpPageNumbers
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpMakePathsRelative
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpRenamePDF
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|currentPattern
init|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"File name format pattern"
argument_list|)
operator|.
name|concat
argument_list|(
literal|": "
argument_list|)
operator|.
name|concat
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|ImportSettingsTab
operator|.
name|PREF_IMPORT_FILENAMEPATTERN
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|JLabel
argument_list|(
name|currentPattern
argument_list|)
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpRenamePDFonlyRelativePaths
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|retrieveSettings ()
specifier|private
name|void
name|retrieveSettings
parameter_list|()
block|{
name|cleanUpSuperscrips
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CLEANUP_SUPERSCRIPTS
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpDOI
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CLEANUP_DOI
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpMonth
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CLEANUP_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpPageNumbers
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CLEANUP_PAGENUMBERS
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpMakePathsRelative
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CLEANUP_MAKEPATHSRELATIVE
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpRenamePDF
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CLEANUP_RENAMEPDF
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CLEANUP_RENAMEPDF_ONLYRELATIVE_PATHS
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|setEnabled
argument_list|(
name|cleanUpRenamePDF
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|storeSettings ()
specifier|private
name|void
name|storeSettings
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CLEANUP_SUPERSCRIPTS
argument_list|,
name|cleanUpSuperscrips
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CLEANUP_DOI
argument_list|,
name|cleanUpDOI
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CLEANUP_MONTH
argument_list|,
name|cleanUpMonth
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CLEANUP_PAGENUMBERS
argument_list|,
name|cleanUpPageNumbers
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CLEANUP_MAKEPATHSRELATIVE
argument_list|,
name|cleanUpMakePathsRelative
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CLEANUP_RENAMEPDF
argument_list|,
name|cleanUpRenamePDF
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CLEANUP_RENAMEPDF_ONLYRELATIVE_PATHS
argument_list|,
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|showCleanUpDialog ()
specifier|private
name|int
name|showCleanUpDialog
parameter_list|()
block|{
name|String
name|dialogTitle
init|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cleanup entries"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|messages
init|=
block|{
name|Globals
operator|.
name|lang
argument_list|(
literal|"What would you like to clean up?"
argument_list|)
block|,
name|optionsPanel
block|}
decl_stmt|;
return|return
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|messages
argument_list|,
name|dialogTitle
argument_list|,
name|JOptionPane
operator|.
name|OK_CANCEL_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
return|;
block|}
DECL|field|cancelled
name|boolean
name|cancelled
decl_stmt|;
DECL|field|modifiedEntriesCount
name|int
name|modifiedEntriesCount
decl_stmt|;
DECL|field|numSelected
name|int
name|numSelected
decl_stmt|;
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|cancelled
operator|=
literal|false
expr_stmt|;
name|modifiedEntriesCount
operator|=
literal|0
expr_stmt|;
name|int
name|numSelected
init|=
name|panel
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|numSelected
operator|==
literal|0
condition|)
block|{
comment|// None selected. Inform the user to select entries first.
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"First select entries to clean up."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cleanup entry"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
name|cancelled
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|frame
operator|.
name|block
argument_list|()
expr_stmt|;
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Doing a cleanup for %0 entries..."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numSelected
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cancelled
condition|)
return|return;
name|int
name|choice
init|=
name|showCleanUpDialog
argument_list|()
decl_stmt|;
if|if
condition|(
name|choice
operator|!=
name|JOptionPane
operator|.
name|OK_OPTION
condition|)
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|storeSettings
argument_list|()
expr_stmt|;
name|boolean
name|choiceCleanUpSuperscripts
init|=
name|cleanUpSuperscrips
operator|.
name|isSelected
argument_list|()
decl_stmt|,
name|choiceCleanUpDOI
init|=
name|cleanUpDOI
operator|.
name|isSelected
argument_list|()
decl_stmt|,
name|choiceCleanUpMonth
init|=
name|cleanUpMonth
operator|.
name|isSelected
argument_list|()
decl_stmt|,
name|choiceCleanUpPageNumbers
init|=
name|cleanUpPageNumbers
operator|.
name|isSelected
argument_list|()
decl_stmt|,
name|choiceMakePathsRelative
init|=
name|cleanUpMakePathsRelative
operator|.
name|isSelected
argument_list|()
decl_stmt|,
name|choiceRenamePDF
init|=
name|cleanUpRenamePDF
operator|.
name|isSelected
argument_list|()
decl_stmt|;
if|if
condition|(
name|choiceRenamePDF
operator|&&
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|AKS_AUTO_NAMING_PDFS_AGAIN
argument_list|)
condition|)
block|{
name|CheckBoxMessage
name|cbm
init|=
operator|new
name|CheckBoxMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Auto-generating PDF-Names does not support undo. Continue?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Disable this confirmation dialog"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|cbm
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Autogenerate PDF Names"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|cbm
operator|.
name|isSelected
argument_list|()
condition|)
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|AKS_AUTO_NAMING_PDFS_AGAIN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|panel
operator|.
name|getSelectedEntries
argument_list|()
control|)
block|{
comment|// undo granularity is on entry level
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cleanup entry"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|choiceCleanUpSuperscripts
condition|)
name|doCleanUpSuperscripts
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
if|if
condition|(
name|choiceCleanUpDOI
condition|)
name|doCleanUpDOI
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
if|if
condition|(
name|choiceCleanUpMonth
condition|)
name|doCleanUpMonth
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
if|if
condition|(
name|choiceCleanUpPageNumbers
condition|)
name|doCleanUpPageNumbers
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
if|if
condition|(
name|choiceMakePathsRelative
condition|)
name|doMakePathsRelative
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
if|if
condition|(
name|choiceRenamePDF
condition|)
name|doRenamePDFs
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|ce
operator|.
name|hasEdits
argument_list|()
condition|)
block|{
name|modifiedEntriesCount
operator|++
expr_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
if|if
condition|(
name|cancelled
condition|)
block|{
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|unsuccesfullRenames
operator|>
literal|0
condition|)
block|{
comment|//Rename failed for at least one entry
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"File rename failed for"
argument_list|)
operator|+
literal|" "
operator|+
name|unsuccesfullRenames
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
operator|+
literal|"."
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Autogenerate PDF Names"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modifiedEntriesCount
operator|>
literal|0
condition|)
block|{
name|panel
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
name|String
name|message
decl_stmt|;
switch|switch
condition|(
name|modifiedEntriesCount
condition|)
block|{
case|case
literal|0
case|:
name|message
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"No entry needed a clean up"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|message
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"One entry needed a clean up"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|message
operator|=
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 entries needed a clean up"
argument_list|)
expr_stmt|;
break|break;
block|}
name|panel
operator|.
name|output
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Converts the text in 1st, 2nd, ... to real superscripts by wrapping in \textsuperscript{st}, ... 	 */
DECL|method|doCleanUpSuperscripts (BibtexEntry entry, NamedCompound ce)
specifier|private
name|void
name|doCleanUpSuperscripts
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
specifier|final
name|String
name|field
init|=
literal|"booktitle"
decl_stmt|;
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
return|return;
name|String
name|newValue
init|=
name|oldValue
operator|.
name|replaceAll
argument_list|(
literal|" (\\d+)(st|nd|rd|th) "
argument_list|,
literal|" $1\\\\textsuperscript{$2} "
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|field
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes the http://... for each DOI      * Moves DOIs from URL and NOTE filed to DOI field      * @param ce       */
DECL|method|doCleanUpDOI (BibtexEntry bes, NamedCompound ce)
specifier|private
name|void
name|doCleanUpDOI
parameter_list|(
name|BibtexEntry
name|bes
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
comment|// fields to check
name|String
index|[]
name|fields
init|=
block|{
literal|"note"
block|,
literal|"url"
block|,
literal|"ee"
block|}
decl_stmt|;
comment|// First check if the DOI Field is empty
if|if
condition|(
name|bes
operator|.
name|getField
argument_list|(
literal|"doi"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|doiFieldValue
init|=
name|bes
operator|.
name|getField
argument_list|(
literal|"doi"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|checkForDOIwithHTTPprefix
argument_list|(
name|doiFieldValue
argument_list|)
condition|)
block|{
name|String
name|newValue
init|=
name|Util
operator|.
name|getDOI
argument_list|(
name|doiFieldValue
argument_list|)
decl_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|bes
argument_list|,
literal|"doi"
argument_list|,
name|doiFieldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|bes
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
if|if
condition|(
name|Util
operator|.
name|checkForPlainDOI
argument_list|(
name|doiFieldValue
argument_list|)
condition|)
block|{
comment|// DOI field seems to contain DOI
comment|// cleanup note, url, ee field
comment|// we do NOT copy values to the DOI field as the DOI field contains a DOI!
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|Util
operator|.
name|checkForPlainDOI
argument_list|(
name|bes
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
condition|)
block|{
name|Util
operator|.
name|removeDOIfromBibtexEntryField
argument_list|(
name|bes
argument_list|,
name|field
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// As the DOI field is empty we now check if note, url, or ee field contains a DOI
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|Util
operator|.
name|checkForPlainDOI
argument_list|(
name|bes
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
condition|)
block|{
comment|// update DOI
name|String
name|oldValue
init|=
name|bes
operator|.
name|getField
argument_list|(
literal|"doi"
argument_list|)
decl_stmt|;
name|String
name|newValue
init|=
name|Util
operator|.
name|getDOI
argument_list|(
name|bes
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|bes
argument_list|,
literal|"doi"
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|bes
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|Util
operator|.
name|removeDOIfromBibtexEntryField
argument_list|(
name|bes
argument_list|,
name|field
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|doCleanUpMonth (BibtexEntry entry, NamedCompound ce)
specifier|private
name|void
name|doCleanUpMonth
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
comment|// implementation based on patch 3470076 by Mathias Walter
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
return|return;
name|String
name|newValue
init|=
name|oldValue
decl_stmt|;
try|try
block|{
name|int
name|month
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|newValue
argument_list|)
decl_stmt|;
name|newValue
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|"#"
argument_list|)
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|MONTHS
index|[
name|month
operator|-
literal|1
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// adapt casing of newValue to follow entry in Globals_MONTH_STRINGS
name|String
name|casedString
init|=
name|newValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|.
name|concat
argument_list|(
name|newValue
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|MONTH_STRINGS
operator|.
name|containsKey
argument_list|(
name|newValue
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|||
name|Globals
operator|.
name|MONTH_STRINGS
operator|.
name|containsValue
argument_list|(
name|casedString
argument_list|)
condition|)
block|{
name|newValue
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|"#"
argument_list|)
operator|.
name|append
argument_list|(
name|newValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
literal|"month"
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doCleanUpPageNumbers (BibtexEntry entry, NamedCompound ce)
specifier|private
name|void
name|doCleanUpPageNumbers
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
return|return;
name|String
name|newValue
init|=
name|oldValue
operator|.
name|replaceAll
argument_list|(
literal|"(\\d+) *- *(\\d+)"
argument_list|,
literal|"$1--$2"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
literal|"pages"
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doExportToKeywords (BibtexEntry entry, NamedCompound ce)
specifier|private
name|void
name|doExportToKeywords
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{ 		 	}
DECL|method|doImportFromKeywords (BibtexEntry entry, NamedCompound ce)
specifier|private
name|void
name|doImportFromKeywords
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{ 		 	}
DECL|method|doMakePathsRelative (BibtexEntry entry, NamedCompound ce)
specifier|private
name|void
name|doMakePathsRelative
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
return|return;
name|FileListTableModel
name|flModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|flModel
operator|.
name|setContent
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|flModel
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flModel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileListEntry
name|flEntry
init|=
name|flModel
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|oldFileName
init|=
name|flEntry
operator|.
name|getLink
argument_list|()
decl_stmt|;
name|String
name|newFileName
init|=
name|Util
operator|.
name|shortenFileName
argument_list|(
operator|new
name|File
argument_list|(
name|oldFileName
argument_list|)
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
operator|.
name|getFileDirectory
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldFileName
operator|.
name|equals
argument_list|(
name|newFileName
argument_list|)
condition|)
block|{
name|flEntry
operator|.
name|setLink
argument_list|(
name|newFileName
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|String
name|newValue
init|=
name|flModel
operator|.
name|getStringRepresentation
argument_list|()
decl_stmt|;
assert|assert
operator|(
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
operator|)
assert|;
name|entry
operator|.
name|setField
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doRenamePDFs (BibtexEntry entry, NamedCompound ce)
specifier|private
name|void
name|doRenamePDFs
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
comment|//Extract the path
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
return|return;
name|FileListTableModel
name|flModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|flModel
operator|.
name|setContent
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|flModel
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flModel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|realOldFilename
init|=
name|flModel
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
operator|.
name|getLink
argument_list|()
decl_stmt|;
if|if
condition|(
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|isSelected
argument_list|()
operator|&&
operator|(
operator|new
name|File
argument_list|(
name|realOldFilename
argument_list|)
operator|.
name|isAbsolute
argument_list|()
operator|)
condition|)
continue|continue;
name|String
name|newFilename
init|=
name|Util
operator|.
name|getLinkedFileName
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|,
name|entry
argument_list|)
decl_stmt|;
comment|//String oldFilename = bes.getField(GUIGlobals.FILE_FIELD); // would have to be stored for undoing purposes
comment|//Add extension to newFilename
name|newFilename
operator|=
name|newFilename
operator|+
literal|"."
operator|+
name|flModel
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getExtension
argument_list|()
expr_stmt|;
comment|//get new Filename with path
comment|//Create new Path based on old Path and new filename
name|File
name|expandedOldFile
init|=
name|Util
operator|.
name|expandFilename
argument_list|(
name|realOldFilename
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
operator|.
name|getFileDirectory
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|expandedOldFile
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// something went wrong. Just skipt his entry
continue|continue;
block|}
name|String
name|newPath
init|=
name|expandedOldFile
operator|.
name|getParent
argument_list|()
operator|.
name|concat
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
name|newFilename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|newPath
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
comment|// we do not overwrite files
comment|// TODO: we could check here if the newPath file is linked with the current entry. And if not, we could add a link
continue|continue;
comment|//do rename
name|boolean
name|renameSuccesfull
init|=
name|Util
operator|.
name|renameFile
argument_list|(
name|expandedOldFile
operator|.
name|toString
argument_list|()
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|renameSuccesfull
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
comment|//Change the path for this entry
name|String
name|description
init|=
name|flModel
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|ExternalFileType
name|type
init|=
name|flModel
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|flModel
operator|.
name|removeEntry
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// we cannot use "newPath" to generate a FileListEntry as newPath is absolute, but we want to keep relative paths whenever possible
name|File
name|parent
init|=
operator|(
operator|new
name|File
argument_list|(
name|realOldFilename
argument_list|)
operator|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|String
name|newFileEntryFileName
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|newFileEntryFileName
operator|=
name|newFilename
expr_stmt|;
block|}
else|else
block|{
name|newFileEntryFileName
operator|=
name|parent
operator|.
name|toString
argument_list|()
operator|.
name|concat
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
name|newFilename
argument_list|)
expr_stmt|;
block|}
name|flModel
operator|.
name|addEntry
argument_list|(
name|i
argument_list|,
operator|new
name|FileListEntry
argument_list|(
name|description
argument_list|,
name|newFileEntryFileName
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unsuccesfullRenames
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|String
name|newValue
init|=
name|flModel
operator|.
name|getStringRepresentation
argument_list|()
decl_stmt|;
assert|assert
operator|(
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
operator|)
assert|;
name|entry
operator|.
name|setField
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
comment|//we put an undo of the field content here
comment|//the file is not being renamed back, which leads to inconsostencies
comment|//if we put a null undo object here, the change by "doMakePathsRelative" would overwrite the field value nevertheless.
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

