begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|TableUI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumnModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|EntryTableTransferHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|HitOrMissComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldsUtils
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|SortedList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEventListener
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|matchers
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|EventSelectionModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|EventTableModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|TableComparatorChooser
import|;
end_import

begin_comment
comment|/**  * The central table which displays the bibtex entries.  *   * User: alver  * Date: Oct 12, 2005  * Time: 10:29:39 PM  *   */
end_comment

begin_class
DECL|class|MainTable
specifier|public
class|class
name|MainTable
extends|extends
name|JTable
block|{
DECL|field|tableFormat
specifier|private
name|MainTableFormat
name|tableFormat
decl_stmt|;
DECL|field|panel
specifier|private
name|BasePanel
name|panel
decl_stmt|;
DECL|field|sortedForMarking
DECL|field|sortedForTable
DECL|field|sortedForSearch
DECL|field|sortedForGrouping
specifier|private
name|SortedList
argument_list|<
name|BibtexEntry
argument_list|>
name|sortedForMarking
decl_stmt|,
name|sortedForTable
decl_stmt|,
name|sortedForSearch
decl_stmt|,
name|sortedForGrouping
decl_stmt|;
DECL|field|tableColorCodes
DECL|field|showingFloatSearch
DECL|field|showingFloatGrouping
specifier|private
name|boolean
name|tableColorCodes
decl_stmt|,
name|showingFloatSearch
init|=
literal|false
decl_stmt|,
name|showingFloatGrouping
init|=
literal|false
decl_stmt|;
DECL|field|selectionModel
specifier|private
name|EventSelectionModel
argument_list|<
name|BibtexEntry
argument_list|>
name|selectionModel
decl_stmt|;
DECL|field|comparatorChooser
specifier|private
name|TableComparatorChooser
argument_list|<
name|BibtexEntry
argument_list|>
name|comparatorChooser
decl_stmt|;
DECL|field|pane
specifier|private
name|JScrollPane
name|pane
decl_stmt|;
DECL|field|searchComparator
DECL|field|groupComparator
specifier|private
name|Comparator
argument_list|<
name|BibtexEntry
argument_list|>
name|searchComparator
decl_stmt|,
name|groupComparator
decl_stmt|,
DECL|field|markingComparator
name|markingComparator
init|=
operator|new
name|IsMarkedComparator
argument_list|()
decl_stmt|;
DECL|field|searchMatcher
DECL|field|groupMatcher
specifier|private
name|Matcher
argument_list|<
name|BibtexEntry
argument_list|>
name|searchMatcher
decl_stmt|,
name|groupMatcher
decl_stmt|;
comment|// needed to activate/deactivate the listener
DECL|field|tableColumnListener
specifier|private
specifier|final
name|PersistenceTableColumnListener
name|tableColumnListener
decl_stmt|;
comment|// Constants used to define how a cell should be rendered.
DECL|field|REQUIRED
DECL|field|OPTIONAL
specifier|public
specifier|static
specifier|final
name|int
name|REQUIRED
init|=
literal|1
decl_stmt|,
name|OPTIONAL
init|=
literal|2
decl_stmt|,
DECL|field|REQ_STRING
name|REQ_STRING
init|=
literal|1
decl_stmt|,
DECL|field|REQ_NUMBER
name|REQ_NUMBER
init|=
literal|2
decl_stmt|,
DECL|field|OPT_STRING
name|OPT_STRING
init|=
literal|3
decl_stmt|,
DECL|field|OTHER
name|OTHER
init|=
literal|3
decl_stmt|,
DECL|field|BOOLEAN
name|BOOLEAN
init|=
literal|4
decl_stmt|,
DECL|field|ICON_COL
name|ICON_COL
init|=
literal|8
decl_stmt|;
comment|// Constant to indicate that an icon cell renderer should be used.
static|static
block|{
name|updateRenderers
argument_list|()
expr_stmt|;
block|}
DECL|method|MainTable (MainTableFormat tableFormat, EventList<BibtexEntry> list, JabRefFrame frame, BasePanel panel)
specifier|public
name|MainTable
parameter_list|(
name|MainTableFormat
name|tableFormat
parameter_list|,
name|EventList
argument_list|<
name|BibtexEntry
argument_list|>
name|list
parameter_list|,
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanel
name|panel
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|addFocusListener
argument_list|(
name|Globals
operator|.
name|focusListener
argument_list|)
expr_stmt|;
name|setAutoResizeMode
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"autoResizeMode"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableFormat
operator|=
name|tableFormat
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
comment|// This SortedList has a Comparator controlled by the TableComparatorChooser
comment|// we are going to install, which responds to user sorting selctions:
name|sortedForTable
operator|=
operator|new
name|SortedList
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|(
name|list
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// This SortedList applies afterwards, and floats marked entries:
name|sortedForMarking
operator|=
operator|new
name|SortedList
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|(
name|sortedForTable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// This SortedList applies afterwards, and can float search hits:
name|sortedForSearch
operator|=
operator|new
name|SortedList
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|(
name|sortedForMarking
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// This SortedList applies afterwards, and can float grouping hits:
name|sortedForGrouping
operator|=
operator|new
name|SortedList
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|(
name|sortedForSearch
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|searchMatcher
operator|=
literal|null
expr_stmt|;
name|groupMatcher
operator|=
literal|null
expr_stmt|;
name|searchComparator
operator|=
literal|null
expr_stmt|;
comment|//new HitOrMissComparator(searchMatcher);
name|groupComparator
operator|=
literal|null
expr_stmt|;
comment|//new HitOrMissComparator(groupMatcher);
name|EventTableModel
argument_list|<
name|BibtexEntry
argument_list|>
name|tableModel
init|=
operator|new
name|EventTableModel
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|(
name|sortedForGrouping
argument_list|,
name|tableFormat
argument_list|)
decl_stmt|;
name|setModel
argument_list|(
name|tableModel
argument_list|)
expr_stmt|;
name|tableColorCodes
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"tableColorCodesOn"
argument_list|)
expr_stmt|;
name|selectionModel
operator|=
operator|new
name|EventSelectionModel
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|(
name|sortedForGrouping
argument_list|)
expr_stmt|;
name|setSelectionModel
argument_list|(
name|selectionModel
argument_list|)
expr_stmt|;
name|pane
operator|=
operator|new
name|JScrollPane
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|pane
operator|.
name|getViewport
argument_list|()
operator|.
name|setBackground
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"tableBackground"
argument_list|)
argument_list|)
expr_stmt|;
name|setGridColor
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"gridColor"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTableHeader
argument_list|(
operator|new
name|PreventDraggingJTableHeader
argument_list|(
name|this
operator|.
name|getColumnModel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|comparatorChooser
operator|=
name|this
operator|.
name|createTableComparatorChooser
argument_list|(
name|this
argument_list|,
name|sortedForTable
argument_list|,
name|TableComparatorChooser
operator|.
name|MULTIPLE_COLUMN_KEYBOARD
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableColumnListener
operator|=
operator|new
name|PersistenceTableColumnListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|/*if (Globals.prefs.getBoolean(PersistenceTableColumnListener.ACTIVATE_PREF_KEY)) {             getColumnModel().addColumnModelListener(this.tableColumnListener );         }*/
comment|// TODO: Figure out, whether this call is needed.
name|getSelected
argument_list|()
expr_stmt|;
comment|// enable DnD
name|setDragEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TransferHandler
name|xfer
init|=
operator|new
name|EntryTableTransferHandler
argument_list|(
name|this
argument_list|,
name|frame
argument_list|,
name|panel
argument_list|)
decl_stmt|;
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
name|pane
operator|.
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
name|setupComparatorChooser
argument_list|()
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
name|setWidths
argument_list|()
expr_stmt|;
block|}
DECL|method|refreshSorting ()
specifier|public
name|void
name|refreshSorting
parameter_list|()
block|{
name|sortedForMarking
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"floatMarkedEntries"
argument_list|)
condition|)
name|sortedForMarking
operator|.
name|setComparator
argument_list|(
name|markingComparator
argument_list|)
expr_stmt|;
else|else
name|sortedForMarking
operator|.
name|setComparator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sortedForMarking
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|sortedForSearch
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|sortedForSearch
operator|.
name|setComparator
argument_list|(
name|searchComparator
argument_list|)
expr_stmt|;
name|sortedForSearch
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|sortedForGrouping
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|sortedForGrouping
operator|.
name|setComparator
argument_list|(
name|groupComparator
argument_list|)
expr_stmt|;
name|sortedForGrouping
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|/**      * Adds a sorting rule that floats hits to the top, and causes non-hits to be grayed out:      * @param m The Matcher that determines if an entry is a hit or not.      */
DECL|method|showFloatSearch (Matcher<BibtexEntry> m)
specifier|public
name|void
name|showFloatSearch
parameter_list|(
name|Matcher
argument_list|<
name|BibtexEntry
argument_list|>
name|m
parameter_list|)
block|{
name|showingFloatSearch
operator|=
literal|true
expr_stmt|;
name|searchMatcher
operator|=
name|m
expr_stmt|;
name|searchComparator
operator|=
operator|new
name|HitOrMissComparator
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
name|scrollTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes sorting by search results, and graying out of non-hits.      */
DECL|method|stopShowingFloatSearch ()
specifier|public
name|void
name|stopShowingFloatSearch
parameter_list|()
block|{
name|showingFloatSearch
operator|=
literal|false
expr_stmt|;
name|searchMatcher
operator|=
literal|null
expr_stmt|;
name|searchComparator
operator|=
literal|null
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
comment|/**      * Adds a sorting rule that floats group hits to the top, and causes non-hits to be grayed out:      * @param m The Matcher that determines if an entry is a in the current group selection or not.      */
DECL|method|showFloatGrouping (Matcher<BibtexEntry> m)
specifier|public
name|void
name|showFloatGrouping
parameter_list|(
name|Matcher
argument_list|<
name|BibtexEntry
argument_list|>
name|m
parameter_list|)
block|{
name|showingFloatGrouping
operator|=
literal|true
expr_stmt|;
name|groupMatcher
operator|=
name|m
expr_stmt|;
name|groupComparator
operator|=
operator|new
name|HitOrMissComparator
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
DECL|method|isShowingFloatSearch ()
specifier|public
name|boolean
name|isShowingFloatSearch
parameter_list|()
block|{
return|return
name|showingFloatSearch
return|;
block|}
comment|/**      * Removes sorting by group, and graying out of non-hits.      */
DECL|method|stopShowingFloatGrouping ()
specifier|public
name|void
name|stopShowingFloatGrouping
parameter_list|()
block|{
name|showingFloatGrouping
operator|=
literal|false
expr_stmt|;
name|groupMatcher
operator|=
literal|null
expr_stmt|;
name|groupComparator
operator|=
literal|null
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
DECL|method|getTableRows ()
specifier|public
name|EventList
argument_list|<
name|BibtexEntry
argument_list|>
name|getTableRows
parameter_list|()
block|{
return|return
name|sortedForGrouping
return|;
block|}
DECL|method|addSelectionListener (ListEventListener<BibtexEntry> listener)
specifier|public
name|void
name|addSelectionListener
parameter_list|(
name|ListEventListener
argument_list|<
name|BibtexEntry
argument_list|>
name|listener
parameter_list|)
block|{
name|getSelected
argument_list|()
operator|.
name|addListEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|getPane ()
specifier|public
name|JScrollPane
name|getPane
parameter_list|()
block|{
return|return
name|pane
return|;
block|}
DECL|method|getCellRenderer (int row, int column)
specifier|public
name|TableCellRenderer
name|getCellRenderer
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|int
name|score
init|=
operator|-
literal|3
decl_stmt|;
name|TableCellRenderer
name|renderer
init|=
name|defRenderer
decl_stmt|;
name|int
name|status
init|=
name|getCellStatus
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|showingFloatSearch
operator|||
name|matches
argument_list|(
name|row
argument_list|,
name|searchMatcher
argument_list|)
condition|)
name|score
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|showingFloatGrouping
operator|||
name|matches
argument_list|(
name|row
argument_list|,
name|groupMatcher
argument_list|)
condition|)
name|score
operator|+=
literal|2
expr_stmt|;
comment|// Now, a grayed out renderer is for entries with -1, and
comment|// a very grayed out one for entries with -2
if|if
condition|(
name|score
operator|<
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
name|veryGrayedOutNumberRenderer
operator|.
name|setNumber
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|renderer
operator|=
name|veryGrayedOutNumberRenderer
expr_stmt|;
block|}
else|else
name|renderer
operator|=
name|veryGrayedOutRenderer
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|score
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
name|grayedOutNumberRenderer
operator|.
name|setNumber
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|renderer
operator|=
name|grayedOutNumberRenderer
expr_stmt|;
block|}
else|else
name|renderer
operator|=
name|grayedOutRenderer
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
comment|// Return a renderer with red background if the entry is incomplete.
if|if
condition|(
operator|!
name|isComplete
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|incRenderer
operator|.
name|setNumber
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|renderer
operator|=
name|incRenderer
expr_stmt|;
block|}
else|else
block|{
name|compRenderer
operator|.
name|setNumber
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|int
name|marking
init|=
name|isMarked
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|marking
operator|>
literal|0
condition|)
block|{
name|marking
operator|=
name|Math
operator|.
name|min
argument_list|(
name|marking
argument_list|,
name|Util
operator|.
name|MARK_COLOR_LEVELS
argument_list|)
expr_stmt|;
name|renderer
operator|=
name|markedNumberRenderers
index|[
name|marking
operator|-
literal|1
index|]
expr_stmt|;
name|markedNumberRenderers
index|[
name|marking
operator|-
literal|1
index|]
operator|.
name|setNumber
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
else|else
name|renderer
operator|=
name|compRenderer
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tableColorCodes
condition|)
block|{
if|if
condition|(
name|status
operator|==
name|REQUIRED
condition|)
name|renderer
operator|=
name|reqRenderer
expr_stmt|;
elseif|else
if|if
condition|(
name|status
operator|==
name|OPTIONAL
condition|)
name|renderer
operator|=
name|optRenderer
expr_stmt|;
elseif|else
if|if
condition|(
name|status
operator|==
name|BOOLEAN
condition|)
name|renderer
operator|=
name|getDefaultRenderer
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// For MARKED feature:
name|int
name|marking
init|=
name|isMarked
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|column
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|marking
operator|>
literal|0
operator|)
condition|)
block|{
name|marking
operator|=
name|Math
operator|.
name|min
argument_list|(
name|marking
argument_list|,
name|Util
operator|.
name|MARK_COLOR_LEVELS
argument_list|)
expr_stmt|;
name|renderer
operator|=
name|markedRenderers
index|[
name|marking
operator|-
literal|1
index|]
expr_stmt|;
block|}
return|return
name|renderer
return|;
block|}
DECL|method|setWidths ()
specifier|public
name|void
name|setWidths
parameter_list|()
block|{
comment|// Setting column widths:
name|int
name|ncWidth
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"numberColWidth"
argument_list|)
decl_stmt|;
name|String
index|[]
name|widths
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringArray
argument_list|(
literal|"columnWidths"
argument_list|)
decl_stmt|;
name|TableColumnModel
name|cm
init|=
name|getColumnModel
argument_list|()
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|ncWidth
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|tableFormat
operator|.
name|padleft
condition|;
name|i
operator|++
control|)
block|{
comment|// Check if the Column is an extended RankingColumn (and not a compact-ranking column)
comment|// If this is the case, set a certain Column-width,
comment|// because the RankingIconColumn needs some more width
if|if
condition|(
name|tableFormat
operator|.
name|isRankingColumn
argument_list|(
name|i
argument_list|)
operator|&&
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_RANKING_COMPACT
argument_list|)
condition|)
block|{
comment|// Lock the width of ranking icon column.
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL_RANKING
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMinWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL_RANKING
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMaxWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL_RANKING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Lock the width of icon columns.
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMinWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMaxWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|tableFormat
operator|.
name|padleft
init|;
name|i
operator|<
name|getModel
argument_list|()
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|widths
index|[
name|i
operator|-
name|tableFormat
operator|.
name|padleft
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"Exception while setting column widths. Choosing default."
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|GUIGlobals
operator|.
name|DEFAULT_FIELD_LENGTH
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getEntryAt (int row)
specifier|public
name|BibtexEntry
name|getEntryAt
parameter_list|(
name|int
name|row
parameter_list|)
block|{
return|return
name|sortedForGrouping
operator|.
name|get
argument_list|(
name|row
argument_list|)
return|;
block|}
DECL|method|getSelectedEntries ()
specifier|public
name|BibtexEntry
index|[]
name|getSelectedEntries
parameter_list|()
block|{
specifier|final
name|BibtexEntry
index|[]
name|BE_ARRAY
init|=
operator|new
name|BibtexEntry
index|[
literal|0
index|]
decl_stmt|;
return|return
name|getSelected
argument_list|()
operator|.
name|toArray
argument_list|(
name|BE_ARRAY
argument_list|)
return|;
block|}
DECL|method|getCurrentSortOrder ()
specifier|public
name|List
argument_list|<
name|Boolean
argument_list|>
name|getCurrentSortOrder
parameter_list|()
block|{
name|List
argument_list|<
name|Boolean
argument_list|>
name|order
init|=
operator|new
name|ArrayList
argument_list|<
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|sortCols
init|=
name|comparatorChooser
operator|.
name|getSortingColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|sortCols
control|)
block|{
name|order
operator|.
name|add
argument_list|(
name|comparatorChooser
operator|.
name|isColumnReverse
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|order
return|;
block|}
DECL|method|getCurrentSortFields ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCurrentSortFields
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|sortCols
init|=
name|comparatorChooser
operator|.
name|getSortingColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|sortCols
control|)
block|{
name|String
name|name
init|=
name|tableFormat
operator|.
name|getColumnType
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
name|fields
operator|.
name|add
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
comment|/**      * This method sets up what Comparators are used for the various table columns.      * The ComparatorChooser enables and disables such Comparators as the user clicks      * columns, but this is where the Comparators are defined. Also, the ComparatorChooser      * is initialized with the sort order defined in Preferences.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setupComparatorChooser ()
specifier|private
name|void
name|setupComparatorChooser
parameter_list|()
block|{
comment|// First column:
name|List
argument_list|<
name|Comparator
argument_list|>
name|comparators
init|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|FirstColumnComparator
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Icon columns:
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|tableFormat
operator|.
name|padleft
condition|;
name|i
operator|++
control|)
block|{
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
index|[]
name|iconField
init|=
name|tableFormat
operator|.
name|getIconTypeForColumn
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|iconField
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|SpecialFieldsUtils
operator|.
name|FIELDNAME_RANKING
argument_list|)
condition|)
block|{
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|RankingFieldComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|IconComparator
argument_list|(
name|iconField
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remaining columns:
for|for
control|(
name|int
name|i
init|=
name|tableFormat
operator|.
name|padleft
init|;
name|i
operator|<
name|tableFormat
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|FieldComparator
argument_list|(
name|tableFormat
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Set initial sort columns:
comment|// Default sort order:
name|String
index|[]
name|sortFields
init|=
operator|new
name|String
index|[]
block|{
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|PRIMARY_SORT_FIELD
argument_list|)
block|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|SECONDARY_SORT_FIELD
argument_list|)
block|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|TERTIARY_SORT_FIELD
argument_list|)
block|}
decl_stmt|;
name|boolean
index|[]
name|sortDirections
init|=
operator|new
name|boolean
index|[]
block|{
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|PRIMARY_SORT_DESCENDING
argument_list|)
block|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SECONDARY_SORT_DESCENDING
argument_list|)
block|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TERTIARY_SORT_DESCENDING
argument_list|)
block|}
decl_stmt|;
comment|// descending
name|sortedForTable
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|sortFields
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
name|MainTableFormat
operator|.
name|ICON_COLUMN_PREFIX
argument_list|)
condition|)
name|index
operator|=
name|tableFormat
operator|.
name|getColumnIndex
argument_list|(
name|sortFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tableFormat
operator|.
name|getColumnCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|sortFields
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|tableFormat
operator|.
name|getColumnType
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
name|index
operator|=
name|j
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|comparatorChooser
operator|.
name|appendComparator
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
name|sortDirections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|sortedForTable
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// Add action listener so we can remember the sort order:
name|comparatorChooser
operator|.
name|addSortActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
comment|// Get the information about the current sort order:
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|getCurrentSortFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|order
init|=
name|getCurrentSortOrder
argument_list|()
decl_stmt|;
comment|// Update preferences:
name|int
name|count
init|=
name|Math
operator|.
name|min
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|order
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>=
literal|1
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|PRIMARY_SORT_FIELD
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|PRIMARY_SORT_DESCENDING
argument_list|,
name|order
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
literal|2
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|SECONDARY_SORT_FIELD
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SECONDARY_SORT_DESCENDING
argument_list|,
name|order
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|SECONDARY_SORT_FIELD
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SECONDARY_SORT_DESCENDING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
literal|3
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|TERTIARY_SORT_FIELD
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TERTIARY_SORT_DESCENDING
argument_list|,
name|order
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|TERTIARY_SORT_FIELD
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TERTIARY_SORT_DESCENDING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getCellStatus (int row, int col)
specifier|public
name|int
name|getCellStatus
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
try|try
block|{
name|BibtexEntry
name|be
init|=
name|sortedForGrouping
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|BibtexEntryType
name|type
init|=
name|be
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|columnName
init|=
name|getColumnName
argument_list|(
name|col
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnName
operator|.
name|equals
argument_list|(
name|BibtexFields
operator|.
name|KEY_FIELD
argument_list|)
operator|||
name|type
operator|.
name|isRequired
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
return|return
name|REQUIRED
return|;
block|}
if|if
condition|(
name|type
operator|.
name|isOptional
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
return|return
name|OPTIONAL
return|;
block|}
return|return
name|OTHER
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|//System.out.println("Exception: getCellStatus");
return|return
name|OTHER
return|;
block|}
block|}
DECL|method|getSelected ()
specifier|public
name|EventList
argument_list|<
name|BibtexEntry
argument_list|>
name|getSelected
parameter_list|()
block|{
return|return
name|selectionModel
operator|.
name|getSelected
argument_list|()
return|;
block|}
comment|/**      * Selects the given row      *      * @param row the row to select      */
DECL|method|setSelected (int row)
specifier|public
name|void
name|setSelected
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|selectionModel
operator|.
name|setSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds the given row to the selection      * @param row the row to add to the selection      */
DECL|method|addSelection (int row)
specifier|public
name|void
name|addSelection
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|this
operator|.
name|selectionModel
operator|.
name|addSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
DECL|method|findEntry (BibtexEntry entry)
specifier|public
name|int
name|findEntry
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
comment|//System.out.println(sortedForGrouping.indexOf(entry));
return|return
name|sortedForGrouping
operator|.
name|indexOf
argument_list|(
name|entry
argument_list|)
return|;
block|}
DECL|method|getIconTypeForColumn (int column)
specifier|public
name|String
index|[]
name|getIconTypeForColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|tableFormat
operator|.
name|getIconTypeForColumn
argument_list|(
name|column
argument_list|)
return|;
block|}
DECL|method|matches (int row, Matcher<BibtexEntry> m)
specifier|private
name|boolean
name|matches
parameter_list|(
name|int
name|row
parameter_list|,
name|Matcher
argument_list|<
name|BibtexEntry
argument_list|>
name|m
parameter_list|)
block|{
return|return
name|m
operator|.
name|matches
argument_list|(
name|sortedForGrouping
operator|.
name|get
argument_list|(
name|row
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isComplete (int row)
specifier|private
name|boolean
name|isComplete
parameter_list|(
name|int
name|row
parameter_list|)
block|{
try|try
block|{
name|BibtexEntry
name|be
init|=
name|sortedForGrouping
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|be
operator|.
name|hasAllRequiredFields
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|//System.out.println("Exception: isComplete");
return|return
literal|true
return|;
block|}
block|}
DECL|method|isMarked (int row)
specifier|private
name|int
name|isMarked
parameter_list|(
name|int
name|row
parameter_list|)
block|{
try|try
block|{
name|BibtexEntry
name|be
init|=
name|sortedForGrouping
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|Util
operator|.
name|isMarked
argument_list|(
name|be
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|//System.out.println("Exception: isMarked");
return|return
literal|0
return|;
block|}
block|}
DECL|method|scrollTo (int y)
specifier|public
name|void
name|scrollTo
parameter_list|(
name|int
name|y
parameter_list|)
block|{
name|JScrollBar
name|scb
init|=
name|pane
operator|.
name|getVerticalScrollBar
argument_list|()
decl_stmt|;
name|scb
operator|.
name|setValue
argument_list|(
name|y
operator|*
name|scb
operator|.
name|getUnitIncrement
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * updateFont      */
DECL|method|updateFont ()
specifier|public
name|void
name|updateFont
parameter_list|()
block|{
name|setFont
argument_list|(
name|GUIGlobals
operator|.
name|CURRENTFONT
argument_list|)
expr_stmt|;
name|setRowHeight
argument_list|(
name|GUIGlobals
operator|.
name|TABLE_ROW_PADDING
operator|+
name|GUIGlobals
operator|.
name|CURRENTFONT
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureVisible (int row)
specifier|public
name|void
name|ensureVisible
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|JScrollBar
name|vert
init|=
name|pane
operator|.
name|getVerticalScrollBar
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|row
operator|*
name|getRowHeight
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|y
operator|<
name|vert
operator|.
name|getValue
argument_list|()
operator|)
operator|||
operator|(
name|y
operator|>
name|vert
operator|.
name|getValue
argument_list|()
operator|+
name|vert
operator|.
name|getVisibleAmount
argument_list|()
operator|)
operator|&&
operator|!
name|showingFloatSearch
condition|)
block|{
name|scrollToCenter
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|scrollToCenter (int rowIndex, int vColIndex)
specifier|public
name|void
name|scrollToCenter
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|vColIndex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|this
operator|.
name|getParent
argument_list|()
operator|instanceof
name|JViewport
operator|)
condition|)
block|{
return|return;
block|}
name|JViewport
name|viewport
init|=
operator|(
name|JViewport
operator|)
name|this
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// This rectangle is relative to the table where the
comment|// northwest corner of cell (0,0) is always (0,0).
name|Rectangle
name|rect
init|=
name|this
operator|.
name|getCellRect
argument_list|(
name|rowIndex
argument_list|,
name|vColIndex
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// The location of the view relative to the table
name|Rectangle
name|viewRect
init|=
name|viewport
operator|.
name|getViewRect
argument_list|()
decl_stmt|;
comment|// Translate the cell location so that it is relative
comment|// to the view, assuming the northwest corner of the
comment|// view is (0,0).
name|rect
operator|.
name|setLocation
argument_list|(
name|rect
operator|.
name|x
operator|-
name|viewRect
operator|.
name|x
argument_list|,
name|rect
operator|.
name|y
operator|-
name|viewRect
operator|.
name|y
argument_list|)
expr_stmt|;
comment|// Calculate location of rect if it were at the center of view
name|int
name|centerX
init|=
operator|(
name|viewRect
operator|.
name|width
operator|-
name|rect
operator|.
name|width
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|centerY
init|=
operator|(
name|viewRect
operator|.
name|height
operator|-
name|rect
operator|.
name|height
operator|)
operator|/
literal|2
decl_stmt|;
comment|// Fake the location of the cell so that scrollRectToVisible
comment|// will move the cell to the center
if|if
condition|(
name|rect
operator|.
name|x
operator|<
name|centerX
condition|)
block|{
name|centerX
operator|=
operator|-
name|centerX
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|y
operator|<
name|centerY
condition|)
block|{
name|centerY
operator|=
operator|-
name|centerY
expr_stmt|;
block|}
name|rect
operator|.
name|translate
argument_list|(
name|centerX
argument_list|,
name|centerY
argument_list|)
expr_stmt|;
comment|// Scroll the area into view.
name|viewport
operator|.
name|scrollRectToVisible
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|revalidate
argument_list|()
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
block|}
DECL|field|defRenderer
DECL|field|reqRenderer
DECL|field|optRenderer
DECL|field|grayedOutRenderer
specifier|private
specifier|static
name|GeneralRenderer
name|defRenderer
decl_stmt|,
name|reqRenderer
decl_stmt|,
name|optRenderer
decl_stmt|,
name|grayedOutRenderer
decl_stmt|,
DECL|field|veryGrayedOutRenderer
name|veryGrayedOutRenderer
decl_stmt|;
DECL|field|markedRenderers
specifier|private
specifier|static
name|GeneralRenderer
index|[]
name|markedRenderers
decl_stmt|;
DECL|field|incRenderer
specifier|private
specifier|static
name|IncompleteRenderer
name|incRenderer
decl_stmt|;
specifier|private
specifier|static
name|CompleteRenderer
DECL|field|compRenderer
name|compRenderer
decl_stmt|,
DECL|field|grayedOutNumberRenderer
name|grayedOutNumberRenderer
decl_stmt|,
DECL|field|veryGrayedOutNumberRenderer
name|veryGrayedOutNumberRenderer
decl_stmt|;
DECL|field|markedNumberRenderers
specifier|private
specifier|static
name|CompleteRenderer
index|[]
name|markedNumberRenderers
decl_stmt|;
DECL|method|updateRenderers ()
specifier|public
specifier|static
name|void
name|updateRenderers
parameter_list|()
block|{
name|defRenderer
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"tableBackground"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"tableText"
argument_list|)
argument_list|)
expr_stmt|;
name|Color
name|sel
init|=
name|defRenderer
operator|.
name|getTableCellRendererComponent
argument_list|(
operator|new
name|JTable
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getBackground
argument_list|()
decl_stmt|;
name|reqRenderer
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"tableReqFieldBackground"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"tableText"
argument_list|)
argument_list|)
expr_stmt|;
name|optRenderer
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"tableOptFieldBackground"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"tableText"
argument_list|)
argument_list|)
expr_stmt|;
name|incRenderer
operator|=
operator|new
name|IncompleteRenderer
argument_list|()
expr_stmt|;
name|compRenderer
operator|=
operator|new
name|CompleteRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"tableBackground"
argument_list|)
argument_list|)
expr_stmt|;
name|grayedOutNumberRenderer
operator|=
operator|new
name|CompleteRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"grayedOutBackground"
argument_list|)
argument_list|)
expr_stmt|;
name|veryGrayedOutNumberRenderer
operator|=
operator|new
name|CompleteRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"veryGrayedOutBackground"
argument_list|)
argument_list|)
expr_stmt|;
name|grayedOutRenderer
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"grayedOutBackground"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"grayedOutText"
argument_list|)
argument_list|,
name|mixColors
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"grayedOutBackground"
argument_list|)
argument_list|,
name|sel
argument_list|)
argument_list|)
expr_stmt|;
name|veryGrayedOutRenderer
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"veryGrayedOutBackground"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"veryGrayedOutText"
argument_list|)
argument_list|,
name|mixColors
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"veryGrayedOutBackground"
argument_list|)
argument_list|,
name|sel
argument_list|)
argument_list|)
expr_stmt|;
name|markedRenderers
operator|=
operator|new
name|GeneralRenderer
index|[
name|Util
operator|.
name|MARK_COLOR_LEVELS
index|]
expr_stmt|;
name|markedNumberRenderers
operator|=
operator|new
name|CompleteRenderer
index|[
name|Util
operator|.
name|MARK_COLOR_LEVELS
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Util
operator|.
name|MARK_COLOR_LEVELS
condition|;
name|i
operator|++
control|)
block|{
name|Color
name|c
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"markedEntryBackground"
operator|+
name|i
argument_list|)
decl_stmt|;
name|markedRenderers
index|[
name|i
index|]
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|c
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"tableText"
argument_list|)
argument_list|,
name|mixColors
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"markedEntryBackground"
operator|+
name|i
argument_list|)
argument_list|,
name|sel
argument_list|)
argument_list|)
expr_stmt|;
name|markedNumberRenderers
index|[
name|i
index|]
operator|=
operator|new
name|CompleteRenderer
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mixColors (Color one, Color two)
specifier|private
specifier|static
name|Color
name|mixColors
parameter_list|(
name|Color
name|one
parameter_list|,
name|Color
name|two
parameter_list|)
block|{
return|return
operator|new
name|Color
argument_list|(
operator|(
name|one
operator|.
name|getRed
argument_list|()
operator|+
name|two
operator|.
name|getRed
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|one
operator|.
name|getGreen
argument_list|()
operator|+
name|two
operator|.
name|getGreen
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|one
operator|.
name|getBlue
argument_list|()
operator|+
name|two
operator|.
name|getBlue
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
return|;
block|}
DECL|class|IncompleteRenderer
specifier|static
class|class
name|IncompleteRenderer
extends|extends
name|GeneralRenderer
block|{
DECL|method|IncompleteRenderer ()
specifier|public
name|IncompleteRenderer
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
literal|"incompleteEntryBackground"
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"This entry is incomplete"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setNumber (int number)
specifier|protected
name|void
name|setNumber
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|super
operator|.
name|setValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|number
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setValue (Object value)
specifier|protected
name|void
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{          }
block|}
DECL|class|CompleteRenderer
specifier|static
class|class
name|CompleteRenderer
extends|extends
name|GeneralRenderer
block|{
DECL|method|CompleteRenderer (Color color)
specifier|public
name|CompleteRenderer
parameter_list|(
name|Color
name|color
parameter_list|)
block|{
name|super
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
DECL|method|setNumber (int number)
specifier|protected
name|void
name|setNumber
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|super
operator|.
name|setValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|number
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setValue (Object value)
specifier|protected
name|void
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{          }
block|}
DECL|method|createTableComparatorChooser (JTable table, SortedList<BibtexEntry> list, Object sortingStrategy)
specifier|public
name|TableComparatorChooser
argument_list|<
name|BibtexEntry
argument_list|>
name|createTableComparatorChooser
parameter_list|(
name|JTable
name|table
parameter_list|,
name|SortedList
argument_list|<
name|BibtexEntry
argument_list|>
name|list
parameter_list|,
name|Object
name|sortingStrategy
parameter_list|)
block|{
specifier|final
name|TableComparatorChooser
argument_list|<
name|BibtexEntry
argument_list|>
name|result
init|=
name|TableComparatorChooser
operator|.
name|install
argument_list|(
name|table
argument_list|,
name|list
argument_list|,
name|sortingStrategy
argument_list|)
decl_stmt|;
name|result
operator|.
name|addSortActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// We need to reset the stack of sorted list each time sorting order
comment|// changes, or the sorting breaks down:
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Morten Alver: This override is a workaround NullPointerException when      * dragging stuff into the table. I found this in a forum, but have no idea      * why it works.      * @param newUI      */
DECL|method|setUI (TableUI newUI)
specifier|public
name|void
name|setUI
parameter_list|(
name|TableUI
name|newUI
parameter_list|)
block|{
name|super
operator|.
name|setUI
argument_list|(
name|newUI
argument_list|)
expr_stmt|;
name|TransferHandler
name|handler
init|=
name|getTransferHandler
argument_list|()
decl_stmt|;
name|setTransferHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setTransferHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the first comparator set up for the given column.      * @param index The column number.      * @return The Comparator, or null if none is set.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getComparatorForColumn (int index)
specifier|public
name|Comparator
argument_list|<
name|BibtexEntry
argument_list|>
name|getComparatorForColumn
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|Comparator
argument_list|>
name|l
init|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|l
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      * Find out which column is set as sort column.      * @param number The position in the sort hierarchy (primary, secondary, etc.)      * @return The sort column number.      */
DECL|method|getSortingColumn (int number)
specifier|public
name|int
name|getSortingColumn
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|l
init|=
name|comparatorChooser
operator|.
name|getSortingColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|<=
name|number
condition|)
return|return
operator|-
literal|1
return|;
else|else
return|return
name|l
operator|.
name|get
argument_list|(
name|number
argument_list|)
return|;
block|}
DECL|method|getTableColumnListener ()
specifier|public
name|PersistenceTableColumnListener
name|getTableColumnListener
parameter_list|()
block|{
return|return
name|tableColumnListener
return|;
block|}
comment|/**      * Returns the List of entries sorted by a user-selected term. This is the      * sorting before marking, search etc. applies.      *      * Note: The returned List must not be modified from the outside      * @return The sorted list of entries.      */
DECL|method|getSortedForTable ()
specifier|public
name|SortedList
argument_list|<
name|BibtexEntry
argument_list|>
name|getSortedForTable
parameter_list|()
block|{
return|return
name|sortedForTable
return|;
block|}
block|}
end_class

end_unit

