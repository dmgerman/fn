begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|AllEntriesGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|AbstractGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|UndoableChangeAssignment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
operator|.
name|LabelPatternUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableInsertEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableRemoveEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|AbstractUndoableEdit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonBarBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonStackBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|uif_lite
operator|.
name|component
operator|.
name|UIFSplitPane
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|*
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEventListener
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEvent
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|gui
operator|.
name|TableFormat
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|TableComparatorChooser
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|EventTableModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|EventSelectionModel
import|;
end_import

begin_comment
comment|/**  * Dialog to allow the selection of entries as part of an Import  *   * @author alver  * @author $Author$  * @version $Revision$ ($Date$)  *  */
end_comment

begin_class
DECL|class|ImportInspectionDialog
specifier|public
class|class
name|ImportInspectionDialog
extends|extends
name|JDialog
block|{
DECL|field|ths
specifier|private
name|ImportInspectionDialog
name|ths
init|=
name|this
decl_stmt|;
DECL|field|panel
specifier|private
name|BasePanel
name|panel
decl_stmt|;
DECL|field|frame
specifier|private
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|metaData
specifier|private
name|MetaData
name|metaData
decl_stmt|;
DECL|field|contentPane
specifier|private
name|UIFSplitPane
name|contentPane
init|=
operator|new
name|UIFSplitPane
argument_list|(
name|UIFSplitPane
operator|.
name|VERTICAL_SPLIT
argument_list|)
decl_stmt|;
DECL|field|glTable
specifier|private
name|JTable
name|glTable
decl_stmt|;
DECL|field|comparatorChooser
specifier|private
name|TableComparatorChooser
name|comparatorChooser
decl_stmt|;
DECL|field|selectionModel
specifier|private
name|EventSelectionModel
name|selectionModel
decl_stmt|;
DECL|field|fields
specifier|private
name|String
index|[]
name|fields
decl_stmt|;
DECL|field|progressBar
specifier|private
name|JProgressBar
name|progressBar
init|=
operator|new
name|JProgressBar
argument_list|(
name|JProgressBar
operator|.
name|HORIZONTAL
argument_list|)
decl_stmt|;
DECL|field|ok
specifier|private
name|JButton
name|ok
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Ok"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|cancel
name|cancel
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|generate
name|generate
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Generate now"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|entries
specifier|private
name|EventList
name|entries
init|=
operator|new
name|BasicEventList
argument_list|()
decl_stmt|;
DECL|field|sortedList
specifier|private
name|SortedList
name|sortedList
decl_stmt|;
DECL|field|entriesToDelete
specifier|private
name|List
name|entriesToDelete
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// Duplicate resolving may require deletion of old entries.
DECL|field|undoName
specifier|private
name|String
name|undoName
decl_stmt|;
DECL|field|callBacks
specifier|private
name|ArrayList
name|callBacks
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|newDatabase
specifier|private
name|boolean
name|newDatabase
decl_stmt|;
DECL|field|groupsAdd
specifier|private
name|JMenu
name|groupsAdd
init|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Add to group"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|popup
specifier|private
name|JPopupMenu
name|popup
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|selectAll
specifier|private
name|JButton
name|selectAll
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Select all"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|deselectAll
specifier|private
name|JButton
name|deselectAll
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Deselect all"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|deselectAllDuplicates
specifier|private
name|JButton
name|deselectAllDuplicates
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Deselect all duplicates"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|stop
specifier|private
name|JButton
name|stop
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Stop"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|delete
specifier|private
name|JButton
name|delete
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Delete"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|help
specifier|private
name|JButton
name|help
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Help"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|preview
specifier|private
name|PreviewPanel
name|preview
decl_stmt|;
DECL|field|generatedKeys
specifier|private
name|boolean
name|generatedKeys
init|=
literal|false
decl_stmt|;
comment|// Set to true after keys have been generated.
DECL|field|defaultSelected
specifier|private
name|boolean
name|defaultSelected
init|=
literal|true
decl_stmt|;
DECL|field|toRect
specifier|private
name|Rectangle
name|toRect
init|=
operator|new
name|Rectangle
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|groupAdditions
specifier|private
name|Map
name|groupAdditions
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|field|autoGenerate
specifier|private
name|JCheckBox
name|autoGenerate
init|=
operator|new
name|JCheckBox
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Generate keys"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"generateKeysAfterInspection"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|JLabel
DECL|field|duplLabel
name|duplLabel
init|=
operator|new
name|JLabel
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"duplicate"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|pdfLabel
name|pdfLabel
init|=
operator|new
name|JLabel
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"pdfSmall"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|psLabel
name|psLabel
init|=
operator|new
name|JLabel
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"psSmall"
argument_list|)
argument_list|)
decl_stmt|,
DECL|field|urlLabel
name|urlLabel
init|=
operator|new
name|JLabel
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"wwwSmall"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
DECL|field|DUPL_COL
name|DUPL_COL
init|=
literal|1
decl_stmt|,
DECL|field|PDF_COL
name|PDF_COL
init|=
literal|2
decl_stmt|,
DECL|field|PS_COL
name|PS_COL
init|=
literal|3
decl_stmt|,
DECL|field|URL_COL
name|URL_COL
init|=
literal|4
decl_stmt|,
DECL|field|PAD
name|PAD
init|=
literal|5
decl_stmt|;
comment|/**      * The "defaultSelected" boolean value determines if new entries added are selected for import or not.      * This value is true by default.      * @param defaultSelected The desired value.      */
DECL|method|setDefaultSelected (boolean defaultSelected)
specifier|public
name|void
name|setDefaultSelected
parameter_list|(
name|boolean
name|defaultSelected
parameter_list|)
block|{
name|this
operator|.
name|defaultSelected
operator|=
name|defaultSelected
expr_stmt|;
block|}
comment|/**      * Creates a dialog that displays the given list of fields in the table.      * The dialog allows another process to add entries dynamically while the dialog      * is shown.      *      * @param frame      * @param panel      * @param fields      */
DECL|method|ImportInspectionDialog (JabRefFrame frame, BasePanel panel, String[] fields, String undoName, boolean newDatabase)
specifier|public
name|ImportInspectionDialog
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanel
name|panel
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|String
name|undoName
parameter_list|,
name|boolean
name|newDatabase
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
operator|(
name|panel
operator|!=
literal|null
operator|)
condition|?
name|panel
operator|.
name|metaData
argument_list|()
else|:
operator|new
name|MetaData
argument_list|()
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|undoName
operator|=
name|undoName
expr_stmt|;
name|this
operator|.
name|newDatabase
operator|=
name|newDatabase
expr_stmt|;
name|preview
operator|=
operator|new
name|PreviewPanel
argument_list|(
name|metaData
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"preview1"
argument_list|)
argument_list|)
expr_stmt|;
name|duplLabel
operator|.
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Possible duplicate of existing entry. Click to resolve."
argument_list|)
argument_list|)
expr_stmt|;
name|sortedList
operator|=
operator|new
name|SortedList
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|EventTableModel
name|tableModelGl
init|=
operator|new
name|EventTableModel
argument_list|(
name|sortedList
argument_list|,
operator|new
name|EntryTableFormat
argument_list|()
argument_list|)
decl_stmt|;
name|glTable
operator|=
operator|new
name|EntryTable
argument_list|(
name|tableModelGl
argument_list|)
expr_stmt|;
name|GeneralRenderer
name|renderer
init|=
operator|new
name|GeneralRenderer
argument_list|(
name|Color
operator|.
name|white
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|glTable
operator|.
name|setDefaultRenderer
argument_list|(
name|JLabel
operator|.
name|class
argument_list|,
name|renderer
argument_list|)
expr_stmt|;
name|glTable
operator|.
name|setDefaultRenderer
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|renderer
argument_list|)
expr_stmt|;
name|glTable
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Delete"
argument_list|)
argument_list|,
literal|"delete"
argument_list|)
expr_stmt|;
name|DeleteListener
name|deleteListener
init|=
operator|new
name|DeleteListener
argument_list|()
decl_stmt|;
name|glTable
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"delete"
argument_list|,
name|deleteListener
argument_list|)
expr_stmt|;
name|selectionModel
operator|=
operator|new
name|EventSelectionModel
argument_list|(
name|sortedList
argument_list|)
expr_stmt|;
name|glTable
operator|.
name|setSelectionModel
argument_list|(
name|selectionModel
argument_list|)
expr_stmt|;
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|addListEventListener
argument_list|(
operator|new
name|EntrySelectionListener
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorChooser
operator|=
operator|new
name|TableComparatorChooser
argument_list|(
name|glTable
argument_list|,
name|sortedList
argument_list|,
name|TableComparatorChooser
operator|.
name|MULTIPLE_COLUMN_KEYBOARD
argument_list|)
expr_stmt|;
name|setupComparatorChooser
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|addMouseListener
argument_list|(
operator|new
name|TableClickListener
argument_list|()
argument_list|)
expr_stmt|;
name|setWidths
argument_list|()
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setIndeterminate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JPanel
name|centerPan
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|centerPan
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setTopComponent
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|glTable
argument_list|)
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setBottomComponent
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|preview
argument_list|)
argument_list|)
expr_stmt|;
name|centerPan
operator|.
name|add
argument_list|(
name|contentPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|centerPan
operator|.
name|add
argument_list|(
name|progressBar
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|deleteListener
argument_list|)
expr_stmt|;
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|newDatabase
condition|)
block|{
name|GroupTreeNode
name|node
init|=
name|metaData
operator|.
name|getGroups
argument_list|()
decl_stmt|;
name|groupsAdd
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Will get enabled if there are groups that can be added to.
name|insertNodes
argument_list|(
name|groupsAdd
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|groupsAdd
argument_list|)
expr_stmt|;
block|}
comment|// Add "Attach file" menu choices to right click menu:
name|popup
operator|.
name|add
argument_list|(
operator|new
name|AttachFile
argument_list|(
literal|"pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
operator|new
name|AttachFile
argument_list|(
literal|"ps"
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
operator|new
name|AttachUrl
argument_list|()
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|centerPan
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|ButtonBarBuilder
name|bb
init|=
operator|new
name|ButtonBarBuilder
argument_list|()
decl_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addGridded
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGridded
argument_list|(
name|stop
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGridded
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addRelatedGap
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addGridded
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|ButtonStackBuilder
name|builder
init|=
operator|new
name|ButtonStackBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addGridded
argument_list|(
name|selectAll
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addGridded
argument_list|(
name|deselectAll
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addGridded
argument_list|(
name|deselectAllDuplicates
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addRelatedGap
argument_list|()
expr_stmt|;
name|builder
operator|.
name|addGridded
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addRelatedGap
argument_list|()
expr_stmt|;
name|builder
operator|.
name|addGridded
argument_list|(
name|autoGenerate
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addGridded
argument_list|(
name|generate
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|centerPan
operator|.
name|add
argument_list|(
name|builder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|WEST
argument_list|)
expr_stmt|;
name|ok
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|generate
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|.
name|addActionListener
argument_list|(
operator|new
name|OkListener
argument_list|()
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|addActionListener
argument_list|(
operator|new
name|CancelListener
argument_list|()
argument_list|)
expr_stmt|;
name|generate
operator|.
name|addActionListener
argument_list|(
operator|new
name|GenerateListener
argument_list|()
argument_list|)
expr_stmt|;
name|stop
operator|.
name|addActionListener
argument_list|(
operator|new
name|StopListener
argument_list|()
argument_list|)
expr_stmt|;
name|selectAll
operator|.
name|addActionListener
argument_list|(
operator|new
name|SelectionButton
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|deselectAll
operator|.
name|addActionListener
argument_list|(
operator|new
name|SelectionButton
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|deselectAllDuplicates
operator|.
name|addActionListener
argument_list|(
operator|new
name|DeselectDuplicatesButtonListener
argument_list|()
argument_list|)
expr_stmt|;
name|deselectAllDuplicates
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addActionListener
argument_list|(
name|deleteListener
argument_list|)
expr_stmt|;
name|help
operator|.
name|addActionListener
argument_list|(
operator|new
name|HelpAction
argument_list|(
name|frame
operator|.
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|importInspectionHelp
argument_list|)
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|bb
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
comment|// Remember and default to last size:
name|setSize
argument_list|(
operator|new
name|Dimension
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"importInspectionDialogWidth"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"importInspectionDialogHeight"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
specifier|public
name|void
name|windowOpened
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|contentPane
operator|.
name|setDividerLocation
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|windowClosed
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
literal|"importInspectionDialogWidth"
argument_list|,
name|getSize
argument_list|()
operator|.
name|width
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
literal|"importInspectionDialogHeight"
argument_list|,
name|getSize
argument_list|()
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setProgress (int current, int max)
specifier|public
name|void
name|setProgress
parameter_list|(
name|int
name|current
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|progressBar
operator|.
name|setIndeterminate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setMinimum
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setMaximum
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setValue
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
comment|/**      * Wrapper for addEntries(List) that takes a single entry.      *      * @param entry The entry to add.      */
DECL|method|addEntry (BibtexEntry entry)
specifier|public
name|void
name|addEntry
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|addEntries
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a List of entries to the table view. The table will update to show the      * added entries. Synchronizes on this.entries to avoid conflict with the delete button      * which removes entries.      *      * @param entries      */
DECL|method|addEntries (Collection entries)
specifier|public
name|void
name|addEntries
parameter_list|(
name|Collection
name|entries
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// We exploit the entry's search status for indicating "Keep" status:
name|entry
operator|.
name|setSearchHit
argument_list|(
name|defaultSelected
argument_list|)
expr_stmt|;
comment|// We exploit the entry's group status for indicating duplicate status.
comment|// Checking duplicates means both checking against the background database (if
comment|// applicable) and against entries already in the table.
if|if
condition|(
operator|(
operator|(
name|panel
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|Util
operator|.
name|containsDuplicate
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|,
name|entry
argument_list|)
operator|!=
literal|null
operator|)
operator|)
operator|||
operator|(
name|internalDuplicate
argument_list|(
name|this
operator|.
name|entries
argument_list|,
name|entry
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
name|entry
operator|.
name|setGroupHit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|deselectAllDuplicates
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|this
operator|.
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Checks if there are duplicates to the given entry in the Collection. Does not      * report the entry as duplicate of itself if it is in the Collection.      * @param entries A Collection of BibtexEntry instances.      * @param entry The entry to search for duplicates of.      * @return A possible duplicate, if any, or null if none were found.      */
DECL|method|internalDuplicate (Collection entries, BibtexEntry entry)
specifier|protected
name|BibtexEntry
name|internalDuplicate
parameter_list|(
name|Collection
name|entries
parameter_list|,
name|BibtexEntry
name|entry
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iterator
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|othEntry
init|=
operator|(
name|BibtexEntry
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|othEntry
operator|==
name|entry
condition|)
continue|continue;
comment|// Don't compare the entry to itself
if|if
condition|(
name|Util
operator|.
name|isDuplicate
argument_list|(
name|entry
argument_list|,
name|othEntry
argument_list|,
name|Globals
operator|.
name|duplicateThreshold
argument_list|)
condition|)
return|return
name|othEntry
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Removes all selected entries from the table. Synchronizes on this.entries to prevent      * conflict with addition of new entries.      */
DECL|method|removeSelectedEntries ()
specifier|public
name|void
name|removeSelectedEntries
parameter_list|()
block|{
name|int
name|row
init|=
name|glTable
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
name|List
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|toRemove
operator|.
name|addAll
argument_list|(
name|selectionModel
operator|.
name|getSelected
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|toRemove
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entries
operator|.
name|remove
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|row
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|entries
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|row
operator|=
name|Math
operator|.
name|min
argument_list|(
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|glTable
operator|.
name|addRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * When this method is called, the dialog will visually change to indicate      * that all entries are in place.      */
DECL|method|entryListComplete ()
specifier|public
name|void
name|entryListComplete
parameter_list|()
block|{
name|progressBar
operator|.
name|setIndeterminate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|generatedKeys
condition|)
name|generate
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stop
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method returns a List containing all entries that are selected      * (checkbox checked).      *      * @return a List containing the selected entries.      */
DECL|method|getSelectedEntries ()
specifier|public
name|List
name|getSelectedEntries
parameter_list|()
block|{
name|List
name|selected
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isSearchHit
argument_list|()
condition|)
name|selected
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/*for (int i = 0; i< table.getRowCount(); i++) {             Boolean sel = (Boolean) table.getValueAt(i, 0);             if (sel.booleanValue()) {                 selected.add(entries.get(i));             }         }*/
return|return
name|selected
return|;
block|}
comment|/**      * Generate keys for all entries. All keys will be unique with respect to one another,      * and, if they are destined for an existing database, with respect to existing keys in      * the database.      */
DECL|method|generateKeys (boolean addColumn)
specifier|public
name|void
name|generateKeys
parameter_list|(
name|boolean
name|addColumn
parameter_list|)
block|{
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|BibtexDatabase
name|database
init|=
literal|null
decl_stmt|;
comment|// Relate to the existing database, if any:
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
name|database
operator|=
name|panel
operator|.
name|database
argument_list|()
expr_stmt|;
comment|// ... or create a temporary one:
else|else
name|database
operator|=
operator|new
name|BibtexDatabase
argument_list|()
expr_stmt|;
name|List
name|keys
init|=
operator|new
name|ArrayList
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Iterate over the entries, add them to the database we are working with,
comment|// and generate unique keys:
for|for
control|(
name|Iterator
name|i
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//if (newDatabase) {
try|try
block|{
name|entry
operator|.
name|setId
argument_list|(
name|Util
operator|.
name|createNeutralId
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|//}
name|LabelPatternUtil
operator|.
name|makeLabel
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getKeyPattern
argument_list|()
argument_list|,
name|database
argument_list|,
name|entry
argument_list|)
expr_stmt|;
comment|// Add the generated key to our list:
name|keys
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getCiteKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Remove the entries from the database again, since they are not supposed to
comment|// added yet. They only needed to be in it while we generated the keys, to keep
comment|// control over key uniqueness.
for|for
control|(
name|Iterator
name|i
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|database
operator|.
name|removeEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
DECL|method|insertNodes (JMenu menu, GroupTreeNode node, boolean add)
specifier|public
name|void
name|insertNodes
parameter_list|(
name|JMenu
name|menu
parameter_list|,
name|GroupTreeNode
name|node
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
specifier|final
name|AbstractAction
name|action
init|=
name|getAction
argument_list|(
name|node
argument_list|,
name|add
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getChildCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|menu
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|.
name|isEnabled
argument_list|()
condition|)
name|menu
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|JMenu
name|submenu
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getGroup
argument_list|()
operator|instanceof
name|AllEntriesGroup
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|insertNodes
argument_list|(
name|menu
argument_list|,
operator|(
name|GroupTreeNode
operator|)
name|node
operator|.
name|getChildAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|add
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|submenu
operator|=
operator|new
name|JMenu
argument_list|(
literal|"["
operator|+
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
comment|// setEnabled(true) is done above/below if at least one menu
comment|// entry (item or submenu) is enabled
name|submenu
operator|.
name|setEnabled
argument_list|(
name|action
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|submenu
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|submenu
operator|.
name|add
argument_list|(
operator|new
name|JPopupMenu
operator|.
name|Separator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|insertNodes
argument_list|(
name|submenu
argument_list|,
operator|(
name|GroupTreeNode
operator|)
name|node
operator|.
name|getChildAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|add
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|submenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|submenu
operator|.
name|isEnabled
argument_list|()
condition|)
name|menu
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAction (GroupTreeNode node, boolean add)
specifier|private
name|AbstractAction
name|getAction
parameter_list|(
name|GroupTreeNode
name|node
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
name|AbstractAction
name|action
init|=
name|add
condition|?
operator|(
name|AbstractAction
operator|)
operator|new
name|AddToGroupAction
argument_list|(
name|node
argument_list|)
else|:
operator|(
name|AbstractAction
operator|)
operator|new
name|RemoveFromGroupAction
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|AbstractGroup
name|group
init|=
name|node
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|action
operator|.
name|setEnabled
argument_list|(
comment|/*add ? */
name|group
operator|.
name|supportsAdd
argument_list|()
argument_list|)
expr_stmt|;
comment|//&& !group.containsAll(selection)
comment|//        : group.supportsRemove()&& group.containsAny(selection));
return|return
name|action
return|;
block|}
comment|/**      * Stores the information about the selected entries being scheduled for addition      * to this group. The entries are *not* added to the group at this time.      *<p/>      * Synchronizes on this.entries to prevent      * conflict with threads that modify the entry list.      */
DECL|class|AddToGroupAction
class|class
name|AddToGroupAction
extends|extends
name|AbstractAction
block|{
DECL|field|node
specifier|private
name|GroupTreeNode
name|node
decl_stmt|;
DECL|method|AddToGroupAction (GroupTreeNode node)
specifier|public
name|AddToGroupAction
parameter_list|(
name|GroupTreeNode
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// We store the groups this entry should be added to in a Set in the Map:
name|Set
name|groups
init|=
operator|(
name|Set
operator|)
name|groupAdditions
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|groups
operator|==
literal|null
condition|)
block|{
comment|// No previous definitions, so we create the Set now:
name|groups
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|groupAdditions
operator|.
name|put
argument_list|(
name|entry
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
comment|// Add the group:
name|groups
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RemoveFromGroupAction
class|class
name|RemoveFromGroupAction
extends|extends
name|AbstractAction
block|{
DECL|field|node
specifier|private
name|GroupTreeNode
name|node
decl_stmt|;
DECL|method|RemoveFromGroupAction (GroupTreeNode node)
specifier|public
name|RemoveFromGroupAction
parameter_list|(
name|GroupTreeNode
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{         }
block|}
DECL|method|addCallBack (CallBack cb)
specifier|public
name|void
name|addCallBack
parameter_list|(
name|CallBack
name|cb
parameter_list|)
block|{
name|callBacks
operator|.
name|add
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|class|OkListener
class|class
name|OkListener
implements|implements
name|ActionListener
block|{
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
comment|// First check if we are supposed to warn about duplicates. If so, see if there
comment|// are unresolved duplicates, and warn if yes.
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"warnAboutDuplicatesInInspection"
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Only check entries that are to be imported. Keep status is indicated
comment|// through the search hit status of the entry:
if|if
condition|(
operator|!
name|entry
operator|.
name|isSearchHit
argument_list|()
condition|)
continue|continue;
comment|// Check if the entry is a suspected, unresolved, duplicate. This status
comment|// is indicated by the entry's group hit status:
if|if
condition|(
name|entry
operator|.
name|isGroupHit
argument_list|()
condition|)
block|{
name|CheckBoxMessage
name|cbm
init|=
operator|new
name|CheckBoxMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"There are possible duplicates (marked with a 'D' icon) that haven't been resolved. Continue?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Disable this confirmation dialog"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|,
name|cbm
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Duplicates found"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|cbm
operator|.
name|isSelected
argument_list|()
condition|)
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"warnAboutDuplicatesInInspection"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
return|return;
break|break;
block|}
block|}
block|}
comment|// The compund undo action used to contain all changes made by this dialog.
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|undoName
argument_list|)
decl_stmt|;
comment|// See if we should remove any old entries for duplicate resolving:
if|if
condition|(
name|entriesToDelete
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|entriesToDelete
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|,
name|entry
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|database
argument_list|()
operator|.
name|removeEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*panel.undoManager.addEdit(undo);             panel.refreshTable();             panel.markBaseChanged();*/
comment|// If "Generate keys" is checked, generate keys unless it's already been done:
if|if
condition|(
name|autoGenerate
operator|.
name|isSelected
argument_list|()
operator|&&
operator|!
name|generatedKeys
condition|)
block|{
name|generateKeys
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Remember the choice until next time:
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"generateKeysAfterInspection"
argument_list|,
name|autoGenerate
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
name|selected
init|=
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|selected
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|newDatabase
condition|)
block|{
comment|// Create a new BasePanel for the entries:
name|BibtexDatabase
name|base
init|=
operator|new
name|BibtexDatabase
argument_list|()
decl_stmt|;
name|panel
operator|=
operator|new
name|BasePanel
argument_list|(
name|frame
argument_list|,
name|base
argument_list|,
literal|null
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|groupingCanceled
init|=
literal|false
decl_stmt|;
comment|// Set owner/timestamp if options are enabled:
name|Util
operator|.
name|setAutomaticFields
argument_list|(
name|selected
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|selected
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//entry.clone();
comment|// Remove settings to group/search hit status:
name|entry
operator|.
name|setSearchHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// If this entry should be added to any groups, do it now:
name|Set
name|groups
init|=
operator|(
name|Set
operator|)
name|groupAdditions
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|groupingCanceled
operator|&&
operator|(
name|groups
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getField
argument_list|(
name|BibtexFields
operator|.
name|KEY_FIELD
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// The entry has no key, so it can't be added to the group.
comment|// The best course of ation is probably to ask the user if a key should be generated
comment|// immediately.
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Cannot add entries to group without generating keys. Generate keys now?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Add to group"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
name|generateKeys
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|groupingCanceled
operator|=
literal|true
expr_stmt|;
block|}
comment|// If the key was list, or has been list now, go ahead:
if|if
condition|(
name|entry
operator|.
name|getField
argument_list|(
name|BibtexFields
operator|.
name|KEY_FIELD
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i2
init|=
name|groups
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GroupTreeNode
name|node
init|=
operator|(
name|GroupTreeNode
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|supportsAdd
argument_list|()
condition|)
block|{
comment|// Add the entry:
name|AbstractUndoableEdit
name|undo
init|=
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BibtexEntry
index|[]
block|{
name|entry
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|undo
operator|instanceof
name|UndoableChangeAssignment
condition|)
operator|(
operator|(
name|UndoableChangeAssignment
operator|)
name|undo
operator|)
operator|.
name|setEditedNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Shouldn't happen...
block|}
block|}
block|}
block|}
try|try
block|{
name|entry
operator|.
name|setId
argument_list|(
name|Util
operator|.
name|createNeutralId
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|database
argument_list|()
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|,
name|entry
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
name|dispose
argument_list|()
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|newDatabase
condition|)
block|{
name|frame
operator|.
name|addTab
argument_list|(
name|panel
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|callBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|CallBack
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|done
argument_list|(
name|selected
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|signalStopFetching ()
specifier|private
name|void
name|signalStopFetching
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|callBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|CallBack
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|stopFetching
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setWidths ()
specifier|private
name|void
name|setWidths
parameter_list|()
block|{
name|TableColumnModel
name|cm
init|=
name|glTable
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|55
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setMinWidth
argument_list|(
literal|55
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setMaxWidth
argument_list|(
literal|55
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|PAD
condition|;
name|i
operator|++
control|)
block|{
comment|// Lock the width of icon columns.
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMinWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMaxWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|width
init|=
name|BibtexFields
operator|.
name|getFieldLength
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|glTable
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|i
operator|+
name|PAD
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StopListener
class|class
name|StopListener
implements|implements
name|ActionListener
block|{
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|signalStopFetching
argument_list|()
expr_stmt|;
name|entryListComplete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CancelListener
class|class
name|CancelListener
implements|implements
name|ActionListener
block|{
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|signalStopFetching
argument_list|()
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|callBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|CallBack
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|cancelled
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|GenerateListener
class|class
name|GenerateListener
implements|implements
name|ActionListener
block|{
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|generate
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|generatedKeys
operator|=
literal|true
expr_stmt|;
comment|// To prevent the button from getting enabled again.
name|generateKeys
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Generate the keys.
block|}
block|}
DECL|class|DeleteListener
class|class
name|DeleteListener
extends|extends
name|AbstractAction
implements|implements
name|ActionListener
block|{
DECL|method|DeleteListener ()
specifier|public
name|DeleteListener
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Delete"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"delete"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|removeSelectedEntries
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|MyTable
class|class
name|MyTable
extends|extends
name|JTable
block|{
DECL|method|MyTable (TableModel model)
specifier|public
name|MyTable
parameter_list|(
name|TableModel
name|model
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|//setDefaultRenderer(Boolean.class, );
block|}
DECL|method|isCellEditable (int row, int col)
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
return|return
name|col
operator|==
literal|0
return|;
block|}
block|}
DECL|class|MyTableModel
class|class
name|MyTableModel
extends|extends
name|DefaultTableModel
block|{
DECL|method|getColumnClass (int i)
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|Boolean
operator|.
name|class
return|;
else|else
return|return
name|String
operator|.
name|class
return|;
block|}
block|}
DECL|class|SelectionButton
class|class
name|SelectionButton
implements|implements
name|ActionListener
block|{
DECL|field|enable
specifier|private
name|Boolean
name|enable
decl_stmt|;
DECL|method|SelectionButton (boolean enable)
specifier|public
name|SelectionButton
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
name|this
operator|.
name|enable
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|glTable
operator|.
name|setValueAt
argument_list|(
name|enable
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|DeselectDuplicatesButtonListener
class|class
name|DeselectDuplicatesButtonListener
implements|implements
name|ActionListener
block|{
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|glTable
operator|.
name|getValueAt
argument_list|(
name|i
argument_list|,
name|DUPL_COL
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|glTable
operator|.
name|setValueAt
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|EntrySelectionListener
class|class
name|EntrySelectionListener
implements|implements
name|ListEventListener
block|{
DECL|method|listChanged (ListEvent listEvent)
specifier|public
name|void
name|listChanged
parameter_list|(
name|ListEvent
name|listEvent
parameter_list|)
block|{
if|if
condition|(
name|listEvent
operator|.
name|getSourceList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|preview
operator|.
name|setEntry
argument_list|(
operator|(
name|BibtexEntry
operator|)
name|listEvent
operator|.
name|getSourceList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setDividerLocation
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|preview
operator|.
name|scrollRectToVisible
argument_list|(
name|toRect
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This class handles clicks on the table that should trigger specific      * events, like opening the popup menu.      */
DECL|class|TableClickListener
class|class
name|TableClickListener
implements|implements
name|MouseListener
block|{
DECL|method|mouseClicked (MouseEvent e)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{          }
DECL|method|mouseEntered (MouseEvent e)
specifier|public
name|void
name|mouseEntered
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{          }
DECL|method|mouseExited (MouseEvent e)
specifier|public
name|void
name|mouseExited
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{          }
DECL|method|mouseReleased (MouseEvent e)
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// Check if the user has right-clicked. If so, open the right-click menu.
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|popup
operator|.
name|show
argument_list|(
name|glTable
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
DECL|method|mousePressed (MouseEvent e)
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// Check if the user has right-clicked. If so, open the right-click menu.
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|popup
operator|.
name|show
argument_list|(
name|glTable
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check if any other action should be taken:
specifier|final
name|int
name|col
init|=
name|glTable
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|,
name|row
init|=
name|glTable
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
comment|// Is this the duplicate icon column, and is there an icon?
if|if
condition|(
operator|(
name|col
operator|==
name|DUPL_COL
operator|)
operator|&&
operator|(
name|glTable
operator|.
name|getValueAt
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
name|BibtexEntry
name|first
init|=
operator|(
name|BibtexEntry
operator|)
name|sortedList
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|BibtexEntry
name|other
init|=
name|Util
operator|.
name|containsDuplicate
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|,
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
block|{
comment|// This will be true if the duplicate is in the existing
comment|// database.
name|DuplicateResolverDialog
name|diag
init|=
operator|new
name|DuplicateResolverDialog
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|,
name|other
argument_list|,
name|first
argument_list|,
name|DuplicateResolverDialog
operator|.
name|INSPECTION
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|diag
argument_list|,
name|ImportInspectionDialog
operator|.
name|this
argument_list|)
expr_stmt|;
name|diag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ImportInspectionDialog
operator|.
name|this
operator|.
name|toFront
argument_list|()
expr_stmt|;
if|if
condition|(
name|diag
operator|.
name|getSelected
argument_list|()
operator|==
name|DuplicateResolverDialog
operator|.
name|KEEP_UPPER
condition|)
block|{
comment|// Remove old entry. Or... add it to a list of entries to be deleted. We only delete
comment|// it after Ok is clicked.
name|entriesToDelete
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
comment|// Clear duplicate icon, which is controlled by the group hit
comment|// field of the entry:
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|first
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|diag
operator|.
name|getSelected
argument_list|()
operator|==
name|DuplicateResolverDialog
operator|.
name|KEEP_LOWER
condition|)
block|{
comment|// Remove the entry from the import inspection dialog.
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|entries
operator|.
name|remove
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|diag
operator|.
name|getSelected
argument_list|()
operator|==
name|DuplicateResolverDialog
operator|.
name|KEEP_BOTH
condition|)
block|{
comment|// Do nothing.
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|first
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Check if the duplicate is of another entry in the import:
name|other
operator|=
name|internalDuplicate
argument_list|(
name|entries
argument_list|,
name|first
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
block|{
name|int
name|answer
init|=
name|DuplicateResolverDialog
operator|.
name|resolveDuplicate
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|,
name|first
argument_list|,
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|DuplicateResolverDialog
operator|.
name|KEEP_UPPER
condition|)
block|{
name|entries
operator|.
name|remove
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|first
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
name|DuplicateResolverDialog
operator|.
name|KEEP_LOWER
condition|)
block|{
name|entries
operator|.
name|remove
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
name|DuplicateResolverDialog
operator|.
name|KEEP_BOTH
condition|)
block|{
name|first
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|AttachUrl
class|class
name|AttachUrl
extends|extends
name|JMenuItem
implements|implements
name|ActionListener
block|{
DECL|method|AttachUrl ()
specifier|public
name|AttachUrl
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Attach URL"
argument_list|)
argument_list|)
expr_stmt|;
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
return|return;
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|JOptionPane
operator|.
name|showInputDialog
argument_list|(
name|ths
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Enter URL"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"url"
argument_list|)
argument_list|)
decl_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|entry
operator|.
name|clearField
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"url"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|AttachFile
class|class
name|AttachFile
extends|extends
name|JMenuItem
implements|implements
name|ActionListener
block|{
DECL|field|fileType
name|String
name|fileType
decl_stmt|;
DECL|method|AttachFile (String fileType)
specifier|public
name|AttachFile
parameter_list|(
name|String
name|fileType
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Attach %0 file"
argument_list|,
operator|new
name|String
index|[]
block|{
name|fileType
operator|.
name|toUpperCase
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileType
operator|=
name|fileType
expr_stmt|;
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
return|return;
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Call up a dialog box that provides Browse, Download and auto buttons:
name|AttachFileDialog
name|diag
init|=
operator|new
name|AttachFileDialog
argument_list|(
name|ths
argument_list|,
name|metaData
argument_list|,
name|entry
argument_list|,
name|fileType
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|diag
argument_list|,
name|ths
argument_list|)
expr_stmt|;
name|diag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// After the dialog has closed, if it wasn't cancelled, list the field:
if|if
condition|(
operator|!
name|diag
operator|.
name|cancelled
argument_list|()
condition|)
block|{
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|fileType
argument_list|,
name|diag
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|interface|CallBack
specifier|public
specifier|static
interface|interface
name|CallBack
block|{
comment|// This method is called by the dialog when the user has selected the
comment|// wanted entries, and clicked Ok. The callback object can update status
comment|// line etc.
DECL|method|done (int entriesImported)
specifier|public
name|void
name|done
parameter_list|(
name|int
name|entriesImported
parameter_list|)
function_decl|;
comment|// This method is called by the dialog when the user has cancelled the import.
DECL|method|cancelled ()
specifier|public
name|void
name|cancelled
parameter_list|()
function_decl|;
comment|// This method is called by the dialog when the user has cancelled or
comment|// signalled a stop. It is expected that any long-running fetch operations
comment|// will stop after this method is called.
DECL|method|stopFetching ()
specifier|public
name|void
name|stopFetching
parameter_list|()
function_decl|;
block|}
DECL|method|setupComparatorChooser ()
specifier|private
name|void
name|setupComparatorChooser
parameter_list|()
block|{
comment|// First column:
name|java
operator|.
name|util
operator|.
name|List
name|comparators
init|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Icon columns:
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|PAD
condition|;
name|i
operator|++
control|)
block|{
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|PDF_COL
condition|)
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|IconComparator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"pdf"
block|}
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
name|PS_COL
condition|)
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|IconComparator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ps"
block|}
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
name|URL_COL
condition|)
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|IconComparator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"url"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Remaining columns:
for|for
control|(
name|int
name|i
init|=
name|PAD
init|;
name|i
operator|<
name|PAD
operator|+
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|FieldComparator
argument_list|(
name|fields
index|[
name|i
operator|-
name|PAD
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Set initial sort columns:
comment|/*// Default sort order:         String[] sortFields = new String[] {Globals.prefs.get("priSort"), Globals.prefs.get("secSort"),             Globals.prefs.get("terSort")};         boolean[] sortDirections = new boolean[] {Globals.prefs.getBoolean("priDescending"),             Globals.prefs.getBoolean("secDescending"), Globals.prefs.getBoolean("terDescending")}; // descending         */
name|sortedList
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|comparatorChooser
operator|.
name|appendComparator
argument_list|(
name|PAD
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sortedList
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|class|EntryTable
class|class
name|EntryTable
extends|extends
name|JTable
block|{
DECL|field|renderer
name|GeneralRenderer
name|renderer
init|=
operator|new
name|GeneralRenderer
argument_list|(
name|Color
operator|.
name|white
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|method|EntryTable (TableModel model)
specifier|public
name|EntryTable
parameter_list|(
name|TableModel
name|model
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
DECL|method|getCellRenderer (int row, int column)
specifier|public
name|TableCellRenderer
name|getCellRenderer
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
return|return
name|column
operator|==
literal|0
condition|?
name|getDefaultRenderer
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
else|:
name|renderer
return|;
block|}
comment|/*public TableCellEditor getCellEditor() {             return getDefaultEditor(Boolean.class);         } */
DECL|method|getColumnClass (int col)
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|col
operator|==
literal|0
condition|)
return|return
name|Boolean
operator|.
name|class
return|;
elseif|else
if|if
condition|(
name|col
operator|<
name|PAD
condition|)
return|return
name|JLabel
operator|.
name|class
return|;
else|else
return|return
name|String
operator|.
name|class
return|;
block|}
DECL|method|isCellEditable (int row, int column)
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
return|return
name|column
operator|==
literal|0
return|;
block|}
DECL|method|setValueAt (Object value, int row, int column)
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
comment|// Only column 0, which is controlled by BibtexEntry.searchHit, is editable:
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|sortedList
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setSearchHit
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|EntryTableFormat
class|class
name|EntryTableFormat
implements|implements
name|TableFormat
block|{
DECL|method|getColumnCount ()
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|PAD
operator|+
name|fields
operator|.
name|length
return|;
block|}
DECL|method|getColumnName (int i)
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|Globals
operator|.
name|lang
argument_list|(
literal|"Keep"
argument_list|)
return|;
if|if
condition|(
name|i
operator|>=
name|PAD
condition|)
block|{
return|return
name|Util
operator|.
name|nCase
argument_list|(
name|fields
index|[
name|i
operator|-
name|PAD
index|]
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|getColumnValue (Object object, int i)
specifier|public
name|Object
name|getColumnValue
parameter_list|(
name|Object
name|object
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|BibtexEntry
name|entry
init|=
operator|(
name|BibtexEntry
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|entry
operator|.
name|isSearchHit
argument_list|()
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
elseif|else
if|if
condition|(
name|i
operator|<
name|PAD
condition|)
block|{
name|Object
name|o
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
name|DUPL_COL
case|:
return|return
name|entry
operator|.
name|isGroupHit
argument_list|()
condition|?
name|duplLabel
else|:
literal|null
return|;
case|case
name|PDF_COL
case|:
name|o
operator|=
name|entry
operator|.
name|getField
argument_list|(
literal|"pdf"
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|pdfLabel
operator|.
name|setToolTipText
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
return|return
name|pdfLabel
return|;
block|}
else|else
return|return
literal|null
return|;
case|case
name|PS_COL
case|:
name|o
operator|=
name|entry
operator|.
name|getField
argument_list|(
literal|"ps"
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|psLabel
operator|.
name|setToolTipText
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
return|return
name|psLabel
return|;
block|}
else|else
return|return
literal|null
return|;
case|case
name|URL_COL
case|:
name|o
operator|=
name|entry
operator|.
name|getField
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|urlLabel
operator|.
name|setToolTipText
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
return|return
name|urlLabel
return|;
block|}
else|else
return|return
literal|null
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|String
name|field
init|=
name|fields
index|[
name|i
operator|-
name|PAD
index|]
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"author"
argument_list|)
operator|||
name|field
operator|.
name|equals
argument_list|(
literal|"editor"
argument_list|)
condition|)
block|{
name|String
name|contents
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
operator|(
name|contents
operator|!=
literal|null
operator|)
condition|?
name|AuthorList
operator|.
name|fixAuthor_Natbib
argument_list|(
name|contents
argument_list|)
else|:
literal|""
return|;
block|}
else|else
return|return
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

