begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|BasicEventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|gui
operator|.
name|TableFormat
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|EventTableModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|FetcherPreviewDialog
specifier|public
class|class
name|FetcherPreviewDialog
extends|extends
name|JDialog
block|{
DECL|field|entries
specifier|protected
name|EventList
argument_list|<
name|TableEntry
argument_list|>
name|entries
init|=
operator|new
name|BasicEventList
argument_list|<
name|TableEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|//protected SortedList<TableEntry> sortedList;
DECL|field|glTable
specifier|protected
name|JTable
name|glTable
decl_stmt|;
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|FetcherPreviewDialog
name|diag
init|=
operator|new
name|FetcherPreviewDialog
argument_list|()
decl_stmt|;
name|diag
operator|.
name|addEntry
argument_list|(
literal|"en"
argument_list|,
operator|new
name|JLabel
argument_list|(
literal|"Dette er en prÃ¸ve"
argument_list|)
argument_list|)
expr_stmt|;
name|diag
operator|.
name|addEntry
argument_list|(
literal|"to"
argument_list|,
operator|new
name|JLabel
argument_list|(
literal|"Dette er en prÃ¸ve"
argument_list|)
argument_list|)
expr_stmt|;
name|diag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|FetcherPreviewDialog ( )
specifier|public
name|FetcherPreviewDialog
parameter_list|(
comment|/*JabRefFrame frame*/
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|JFrame
operator|)
literal|null
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Title"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//sortedList = new SortedList<TableEntry>(entries);
name|EventTableModel
argument_list|<
name|TableEntry
argument_list|>
name|tableModelGl
init|=
operator|new
name|EventTableModel
argument_list|<
name|TableEntry
argument_list|>
argument_list|(
name|entries
argument_list|,
operator|new
name|EntryTableFormat
argument_list|()
argument_list|)
decl_stmt|;
name|glTable
operator|=
operator|new
name|EntryTable
argument_list|(
name|tableModelGl
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|glTable
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see net.sf.jabref.gui.ImportInspection#addEntry(net.sf.jabref.BibtexEntry) 	 */
DECL|method|addEntry (String entryId, JLabel preview)
specifier|public
name|void
name|addEntry
parameter_list|(
name|String
name|entryId
parameter_list|,
name|JLabel
name|preview
parameter_list|)
block|{
name|TableEntry
name|entry
init|=
operator|new
name|TableEntry
argument_list|(
name|entryId
argument_list|,
name|preview
argument_list|)
decl_stmt|;
name|this
operator|.
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|this
operator|.
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|class|TableEntry
class|class
name|TableEntry
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|preview
specifier|private
name|JLabel
name|preview
decl_stmt|;
DECL|field|wanted
specifier|private
name|boolean
name|wanted
init|=
literal|true
decl_stmt|;
DECL|method|TableEntry (String id, JLabel preview)
specifier|public
name|TableEntry
parameter_list|(
name|String
name|id
parameter_list|,
name|JLabel
name|preview
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|preview
operator|=
name|preview
expr_stmt|;
block|}
DECL|method|isWanted ()
specifier|public
name|boolean
name|isWanted
parameter_list|()
block|{
return|return
name|wanted
return|;
block|}
DECL|method|setWanted (boolean wanted)
specifier|public
name|void
name|setWanted
parameter_list|(
name|boolean
name|wanted
parameter_list|)
block|{
name|this
operator|.
name|wanted
operator|=
name|wanted
expr_stmt|;
block|}
DECL|method|getPreview ()
specifier|public
name|JLabel
name|getPreview
parameter_list|()
block|{
return|return
name|preview
return|;
block|}
block|}
DECL|class|PreviewRenderer
class|class
name|PreviewRenderer
implements|implements
name|TableCellRenderer
block|{
DECL|field|label
name|JLabel
name|label
init|=
operator|new
name|JLabel
argument_list|()
decl_stmt|;
DECL|method|getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|JLabel
name|label
init|=
operator|(
name|JLabel
operator|)
name|value
decl_stmt|;
name|this
operator|.
name|label
operator|.
name|setText
argument_list|(
name|label
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|label
return|;
block|}
block|}
DECL|class|EntryTable
class|class
name|EntryTable
extends|extends
name|JTable
block|{
DECL|field|renderer
name|PreviewRenderer
name|renderer
init|=
operator|new
name|PreviewRenderer
argument_list|()
decl_stmt|;
DECL|method|EntryTable (TableModel model)
specifier|public
name|EntryTable
parameter_list|(
name|TableModel
name|model
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|getTableHeader
argument_list|()
operator|.
name|setReorderingAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getCellRenderer (int row, int column)
specifier|public
name|TableCellRenderer
name|getCellRenderer
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
return|return
name|column
operator|==
literal|0
condition|?
name|getDefaultRenderer
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
else|:
name|renderer
return|;
block|}
comment|/*          * public TableCellEditor getCellEditor() { return          * getDefaultEditor(Boolean.class); }          */
DECL|method|getColumnClass (int col)
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getColumnClass
parameter_list|(
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|col
operator|==
literal|0
condition|)
return|return
name|Boolean
operator|.
name|class
return|;
else|else
return|return
name|JLabel
operator|.
name|class
return|;
block|}
DECL|method|isCellEditable (int row, int column)
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
return|return
name|column
operator|==
literal|0
return|;
block|}
DECL|method|setValueAt (Object value, int row, int column)
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
comment|// Only column 0, which is controlled by BibtexEntry.searchHit, is
comment|// editable:
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableEntry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setWanted
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|EntryTableFormat
class|class
name|EntryTableFormat
implements|implements
name|TableFormat
argument_list|<
name|TableEntry
argument_list|>
block|{
DECL|method|getColumnCount ()
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
DECL|method|getColumnName (int i)
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|Globals
operator|.
name|lang
argument_list|(
literal|"Keep"
argument_list|)
return|;
else|else
return|return
name|Globals
operator|.
name|lang
argument_list|(
literal|"Preview"
argument_list|)
return|;
block|}
DECL|method|getColumnValue (TableEntry entry, int i)
specifier|public
name|Object
name|getColumnValue
parameter_list|(
name|TableEntry
name|entry
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|entry
operator|.
name|isWanted
argument_list|()
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
else|else
return|return
name|entry
operator|.
name|getPreview
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

