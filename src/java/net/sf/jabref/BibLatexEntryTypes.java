begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_comment
comment|/**  * This class defines entry types for BibLatex support.  */
end_comment

begin_class
DECL|class|BibLatexEntryTypes
specifier|public
class|class
name|BibLatexEntryTypes
block|{
comment|/*         "rare" fields?             "annotator", "commentator", "titleaddon", "editora", "editorb", "editorc",             "issuetitle", "issuesubtitle", "origlanguage", "version", "addendum"       */
DECL|field|ARTICLE
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|ARTICLE
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Article"
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"journaltitle"
block|,
literal|"year"
block|,
literal|"date"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"translator"
block|,
literal|"annotator"
block|,
literal|"commentator"
block|,
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"editor"
block|,
literal|"editora"
block|,
literal|"editorb"
block|,
literal|"editorc"
block|,
literal|"journalsubtitle"
block|,
literal|"issuetitle"
block|,
literal|"issuesubtitle"
block|,
literal|"language"
block|,
literal|"origlanguage"
block|,
literal|"series"
block|,
literal|"volume"
block|,
literal|"number"
block|,
literal|"eid"
block|,
literal|"issue"
block|,
literal|"date"
block|,
literal|"month"
block|,
literal|"year"
block|,
literal|"pages"
block|,
literal|"version"
block|,
literal|"note"
block|,
literal|"issn"
block|,
literal|"addendum"
block|,
literal|"pubstate"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
return|;
block|}
comment|// TODO: number vs issue?
specifier|public
name|String
index|[]
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"editor"
block|,
literal|"series"
block|,
literal|"volume"
block|,
literal|"number"
block|,
literal|"eid"
block|,
literal|"issue"
block|,
literal|"date"
block|,
literal|"month"
block|,
literal|"year"
block|,
literal|"pages"
block|,
literal|"note"
block|,
literal|"issn"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|BOOK
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|BOOK
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Book"
return|;
block|}
specifier|public
name|String
index|[]
name|getRequiredFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"year"
block|,
literal|"date"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"editor"
block|,
literal|"editora"
block|,
literal|"editorb"
block|,
literal|"editorc"
block|,
literal|"translator"
block|,
literal|"annotator"
block|,
literal|"commentator"
block|,
literal|"introduction"
block|,
literal|"foreword"
block|,
literal|"afterword"
block|,
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"maintitle"
block|,
literal|"mainsubtitle"
block|,
literal|"maintitleaddon"
block|,
literal|"language"
block|,
literal|"origlanguage"
block|,
literal|"volume"
block|,
literal|"part"
block|,
literal|"edition"
block|,
literal|"volumes"
block|,
literal|"series"
block|,
literal|"number"
block|,
literal|"note"
block|,
literal|"publisher"
block|,
literal|"location"
block|,
literal|"isbn"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"pagetotal"
block|,
literal|"addendum"
block|,
literal|"pubstate"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"editor"
block|,
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"maintitle"
block|,
literal|"mainsubtitle"
block|,
literal|"maintitleaddon"
block|,
literal|"volume"
block|,
literal|"edition"
block|,
literal|"publisher"
block|,
literal|"isbn"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"pagetotal"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
return|;
block|}
specifier|public
name|String
name|describeRequiredFields
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/*public static final BibtexEntryType ARTICLE = new BibtexEntryType() {         public String getName() {             return "Article";         }         public String[] getRequiredFields() {             return new String[] {};         }         public String[] getOptionalFields() {             return new String[] {};         }         public String[] getPrimaryOptionalFields() {             return new String[] {};         }         public String describeRequiredFields() {             return "";         }         public boolean hasAllRequiredFields(BibtexEntry entry, BibtexDatabase database) {             return entry.allFieldsPresent(getRequiredFields(), database);         }     };*/
block|}
end_class

end_unit

