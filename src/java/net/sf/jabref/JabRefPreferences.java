begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Morten O. Alver, Nizar N. Batada  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|InvalidPreferencesFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|CustomExportList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|ExportComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|UnknownExternalFileType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|PersistenceTableColumnListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|CustomImportList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
operator|.
name|DefaultLabelPatterns
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
operator|.
name|LabelPattern
import|;
end_import

begin_class
DECL|class|JabRefPreferences
specifier|public
class|class
name|JabRefPreferences
block|{
specifier|public
specifier|final
name|String
DECL|field|CUSTOM_TYPE_NAME
name|CUSTOM_TYPE_NAME
init|=
literal|"customTypeName_"
decl_stmt|,
DECL|field|CUSTOM_TYPE_REQ
name|CUSTOM_TYPE_REQ
init|=
literal|"customTypeReq_"
decl_stmt|,
DECL|field|CUSTOM_TYPE_OPT
name|CUSTOM_TYPE_OPT
init|=
literal|"customTypeOpt_"
decl_stmt|,
DECL|field|CUSTOM_TAB_NAME
name|CUSTOM_TAB_NAME
init|=
literal|"customTabName_"
decl_stmt|,
DECL|field|CUSTOM_TAB_FIELDS
name|CUSTOM_TAB_FIELDS
init|=
literal|"customTabFields_"
decl_stmt|;
comment|// This String is used in the encoded list in prefs of external file type
comment|// modifications, in order to indicate a removed default file type:
DECL|field|FILE_TYPE_REMOVED_FLAG
specifier|public
specifier|static
specifier|final
name|String
name|FILE_TYPE_REMOVED_FLAG
init|=
literal|"REMOVED"
decl_stmt|;
DECL|field|WRAPPED_USERNAME
specifier|public
name|String
name|WRAPPED_USERNAME
decl_stmt|;
DECL|field|prefs
name|Preferences
name|prefs
decl_stmt|;
DECL|field|defaults
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaults
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
DECL|field|keyBinds
name|keyBinds
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|,
DECL|field|defKeyBinds
name|defKeyBinds
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|putBracesAroundCapitalsFields
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|putBracesAroundCapitalsFields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
DECL|field|nonWrappableFields
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|nonWrappableFields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
DECL|field|KEY_PATTERN
specifier|private
specifier|static
specifier|final
name|LabelPattern
name|KEY_PATTERN
init|=
operator|new
name|DefaultLabelPatterns
argument_list|()
decl_stmt|;
DECL|field|keyPattern
specifier|private
specifier|static
name|LabelPattern
name|keyPattern
decl_stmt|;
comment|// Object containing custom export formats:
DECL|field|customExports
specifier|public
name|CustomExportList
name|customExports
decl_stmt|;
comment|/** Set with all custom {@link net.sf.jabref.imports.ImportFormat}s */
DECL|field|customImports
specifier|public
name|CustomImportList
name|customImports
decl_stmt|;
comment|// Object containing info about customized entry editor tabs.
DECL|field|tabList
specifier|private
name|EntryEditorTabList
name|tabList
init|=
literal|null
decl_stmt|;
comment|// Map containing all registered external file types:
DECL|field|externalFileTypes
specifier|private
name|TreeSet
argument_list|<
name|ExternalFileType
argument_list|>
name|externalFileTypes
init|=
operator|new
name|TreeSet
argument_list|<
name|ExternalFileType
argument_list|>
argument_list|()
decl_stmt|;
comment|// The following field is used as a global variable during the export of a database.
comment|// By setting this field to the path of the database's default file directory, formatters
comment|// that should resolve external file paths can access this field. This is an ugly hack
comment|// to solve the problem of formatters not having access to any context except for the
comment|// string to be formatted and possible formatter arguments.
DECL|field|fileDirForDatabase
specifier|public
name|String
name|fileDirForDatabase
init|=
literal|null
decl_stmt|;
comment|// The following field is used as a global variable during the export of a database.
comment|// It is used to hold custom name formatters defined by a custom export filter.
comment|// It is set before the export starts:
DECL|field|customExportNameFormatters
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|customExportNameFormatters
init|=
literal|null
decl_stmt|;
comment|// The only instance of this class:
DECL|field|singleton
specifier|private
specifier|static
name|JabRefPreferences
name|singleton
init|=
literal|null
decl_stmt|;
DECL|method|getInstance ()
specifier|public
specifier|static
name|JabRefPreferences
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|singleton
operator|==
literal|null
condition|)
name|singleton
operator|=
operator|new
name|JabRefPreferences
argument_list|()
expr_stmt|;
return|return
name|singleton
return|;
block|}
comment|// The constructor is made private to enforce this as a singleton class:
DECL|method|JabRefPreferences ()
specifier|private
name|JabRefPreferences
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
literal|"jabref.xml"
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|importPreferences
argument_list|(
literal|"jabref.xml"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"Could not import preferences from jabref.xml:"
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|prefs
operator|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|JabRef
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|osName
operator|.
name|equals
argument_list|(
name|Globals
operator|.
name|MAC
argument_list|)
condition|)
block|{
name|defaults
operator|.
name|put
argument_list|(
literal|"pdfviewer"
argument_list|,
literal|"/Applications/Preview.app"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"psviewer"
argument_list|,
literal|"/Applications/Preview.app"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"htmlviewer"
argument_list|,
literal|"/Applications/Safari.app"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Globals
operator|.
name|osName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"windows"
argument_list|)
condition|)
block|{
name|defaults
operator|.
name|put
argument_list|(
literal|"pdfviewer"
argument_list|,
literal|"cmd.exe /c start /b"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"psviewer"
argument_list|,
literal|"cmd.exe /c start /b"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"htmlviewer"
argument_list|,
literal|"cmd.exe /c start /b"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"lookAndFeel"
argument_list|,
literal|"com.jgoodies.looks.windows.WindowsLookAndFeel"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"winEdtPath"
argument_list|,
literal|"C:\\Program Files\\WinEdt Team\\WinEdt\\WinEdt.exe"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"latexEditorPath"
argument_list|,
literal|"C:\\Program Files\\LEd\\LEd.exe"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaults
operator|.
name|put
argument_list|(
literal|"pdfviewer"
argument_list|,
literal|"evince"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"psviewer"
argument_list|,
literal|"gv"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"htmlviewer"
argument_list|,
literal|"firefox"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"lookAndFeel"
argument_list|,
literal|"com.jgoodies.plaf.plastic.Plastic3DLookAndFeel"
argument_list|)
expr_stmt|;
block|}
name|defaults
operator|.
name|put
argument_list|(
literal|"useDefaultLookAndFeel"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"lyxpipe"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|".lyx/lyxpipe"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"vim"
argument_list|,
literal|"vim"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"vimServer"
argument_list|,
literal|"vim"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"posX"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"posY"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"sizeX"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|840
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"sizeY"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|680
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"windowMaximised"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"rememberWindowLocation"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"autoResizeMode"
argument_list|,
operator|new
name|Integer
argument_list|(
name|JTable
operator|.
name|AUTO_RESIZE_ALL_COLUMNS
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"tableColorCodesOn"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"namesAsIs"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"namesFf"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"namesLf"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"namesNatbib"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"abbrAuthorNames"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"namesLastOnly"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"language"
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"showShort"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"priSort"
argument_list|,
literal|"author"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"priDescending"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"priBinary"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"secSort"
argument_list|,
literal|"year"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"secDescending"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"terSort"
argument_list|,
literal|"author"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"terDescending"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"columnNames"
argument_list|,
literal|"entrytype;author;title;year;journal;owner;timestamp;bibtexkey"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"columnWidths"
argument_list|,
literal|"75;280;400;60;100;100;100;100"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PersistenceTableColumnListener
operator|.
name|ACTIVATE_PREF_KEY
argument_list|,
operator|new
name|Boolean
argument_list|(
name|PersistenceTableColumnListener
operator|.
name|DEFAULT_ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"xmpPrivacyFilters"
argument_list|,
literal|"pdf;timestamp;keywords;owner;note;review"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"useXmpPrivacyFilter"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"numberColWidth"
argument_list|,
operator|new
name|Integer
argument_list|(
name|GUIGlobals
operator|.
name|NUMBER_COL_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"workingDirectory"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"exportWorkingDirectory"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"importWorkingDirectory"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"fileWorkingDirectory"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"autoOpenForm"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"entryTypeFormHeightFactor"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"entryTypeFormWidth"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"backup"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"openLastEdited"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"lastEdited"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"stringsPosX"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"stringsPosY"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"stringsSizeX"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|600
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"stringsSizeY"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"defaultShowSource"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"showSource"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"defaultAutoSort"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"enableSourceEditing"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"caseSensitiveSearch"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"searchReq"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"searchOpt"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"searchGen"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"searchAll"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"incrementS"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"saveInStandardOrder"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"saveInOriginalOrder"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"exportInStandardOrder"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"exportInOriginalOrder"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"selectS"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"regExpSearch"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"searchPanePosX"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"searchPanePosY"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"autoComplete"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"autoCompleteFields"
argument_list|,
literal|"author;editor;title;journal;publisher;keywords;crossref"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupSelectorVisible"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupFloatSelections"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupIntersectSelections"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupInvertSelections"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupShowOverlapping"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupSelectMatches"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupsDefaultField"
argument_list|,
literal|"keywords"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupShowIcons"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupShowDynamic"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupExpandTree"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupAutoShow"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupAutoHide"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupKeywordSeparator"
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"highlightGroupsMatchingAny"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"highlightGroupsMatchingAll"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"searchPanelVisible"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"defaultEncoding"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.encoding"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"groupsVisibleRows"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"defaultOwner"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"preserveFieldFormatting"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"memoryStickMode"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"renameOnMoveFileToFileDir"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// The general fields stuff is made obsolete by the CUSTOM_TAB_... entries.
name|defaults
operator|.
name|put
argument_list|(
literal|"generalFields"
argument_list|,
literal|"crossref;keywords;file;doi;url;urldate;citeseerurl;"
operator|+
literal|"pdf;comment;owner"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"useCustomIconTheme"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"customIconThemeFile"
argument_list|,
literal|"/home/alver/div/crystaltheme_16/Icons.properties"
argument_list|)
expr_stmt|;
comment|// Entry editor tab 0:
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_NAME
operator|+
literal|"_def0"
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"General"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def0"
argument_list|,
literal|"crossref;keywords;file;doi;url;citeseerurl;"
operator|+
literal|"comment;owner;timestamp"
argument_list|)
expr_stmt|;
comment|// Entry editor tab 1:
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def1"
argument_list|,
literal|"abstract"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_NAME
operator|+
literal|"_def1"
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Abstract"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Entry editor tab 2: Review Field - used for research comments, etc.
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def2"
argument_list|,
literal|"review"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_NAME
operator|+
literal|"_def2"
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Review"
argument_list|)
argument_list|)
expr_stmt|;
comment|//defaults.put("recentFiles", "/home/alver/Documents/bibk_dok/hovedbase.bib");
name|defaults
operator|.
name|put
argument_list|(
literal|"historySize"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"fontFamily"
argument_list|,
literal|"Times"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"fontStyle"
argument_list|,
operator|new
name|Integer
argument_list|(
name|java
operator|.
name|awt
operator|.
name|Font
operator|.
name|PLAIN
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"fontSize"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"overrideDefaultFonts"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"menuFontFamily"
argument_list|,
literal|"Times"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"menuFontStyle"
argument_list|,
operator|new
name|Integer
argument_list|(
name|java
operator|.
name|awt
operator|.
name|Font
operator|.
name|PLAIN
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"menuFontSize"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
comment|// Main table color settings:
name|defaults
operator|.
name|put
argument_list|(
literal|"tableBackground"
argument_list|,
literal|"255:255:255"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"tableReqFieldBackground"
argument_list|,
literal|"230:235:255"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"tableOptFieldBackground"
argument_list|,
literal|"230:255:230"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"tableText"
argument_list|,
literal|"0:0:0"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"gridColor"
argument_list|,
literal|"210:210:210"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"grayedOutBackground"
argument_list|,
literal|"210:210:210"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"grayedOutText"
argument_list|,
literal|"40:40:40"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"veryGrayedOutBackground"
argument_list|,
literal|"180:180:180"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"veryGrayedOutText"
argument_list|,
literal|"40:40:40"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"markedEntryBackground"
argument_list|,
literal|"255:255:180"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"incompleteEntryBackground"
argument_list|,
literal|"250:175:175"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"antialias"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"ctrlClick"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"disableOnMultipleSelection"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"pdfColumn"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"urlColumn"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"fileColumn"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"citeseerColumn"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"useOwner"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"overwriteOwner"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"allowTableEditing"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"dialogWarningForDuplicateKey"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"dialogWarningForEmptyKey"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"displayKeyWarningDialogAtStartup"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"avoidOverwritingKey"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"warnBeforeOverwritingKey"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"confirmDelete"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"grayOutNonHits"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"floatSearch"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"showSearchInDialog"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"searchAllBases"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"defaultLabelPattern"
argument_list|,
literal|"[auth][year]"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"previewEnabled"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"preview0"
argument_list|,
literal|"<font face=\"arial\">"
operator|+
literal|"<b><i>\\bibtextype</i><a name=\"\\bibtexkey\">\\begin{bibtexkey} (\\bibtexkey)</a>"
operator|+
literal|"\\end{bibtexkey}</b><br>__NEWLINE__"
operator|+
literal|"\\begin{author} \\format[HTMLChars,AuthorAbbreviator,AuthorAndsReplacer]{\\author}<BR>\\end{author}__NEWLINE__"
operator|+
literal|"\\begin{editor} \\format[HTMLChars,AuthorAbbreviator,AuthorAndsReplacer]{\\editor}<i>(ed.)</i><BR>\\end{editor}__NEWLINE__"
operator|+
literal|"\\begin{title} \\format[HTMLChars]{\\title} \\end{title}<BR>__NEWLINE__"
operator|+
literal|"\\begin{chapter} \\format[HTMLChars]{\\chapter}<BR>\\end{chapter}__NEWLINE__"
operator|+
literal|"\\begin{journal}<em>\\format[HTMLChars]{\\journal},</em>\\end{journal}__NEWLINE__"
comment|// Include the booktitle field for @inproceedings, @proceedings, etc.
operator|+
literal|"\\begin{booktitle}<em>\\format[HTMLChars]{\\booktitle},</em>\\end{booktitle}__NEWLINE__"
operator|+
literal|"\\begin{school}<em>\\format[HTMLChars]{\\school},</em>\\end{school}__NEWLINE__"
operator|+
literal|"\\begin{institution}<em>\\format[HTMLChars]{\\institution},</em>\\end{institution}__NEWLINE__"
operator|+
literal|"\\begin{publisher}<em>\\format[HTMLChars]{\\publisher},</em>\\end{publisher}__NEWLINE__"
operator|+
literal|"\\begin{year}<b>\\year</b>\\end{year}\\begin{volume}<i>, \\volume</i>\\end{volume}"
operator|+
literal|"\\begin{pages}, \\format[FormatPagesForHTML]{\\pages} \\end{pages}"
operator|+
literal|"</dd>__NEWLINE__<p></p></font>"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"preview1"
argument_list|,
literal|"<font face=\"arial\">"
operator|+
literal|"<b><i>\\bibtextype</i><a name=\"\\bibtexkey\">\\begin{bibtexkey} (\\bibtexkey)</a>"
operator|+
literal|"\\end{bibtexkey}</b><br>__NEWLINE__"
operator|+
literal|"\\begin{author} \\format[HTMLChars,AuthorAbbreviator,AuthorAndsReplacer]{\\author}<BR>\\end{author}__NEWLINE__"
operator|+
literal|"\\begin{editor} \\format[HTMLChars,AuthorAbbreviator,AuthorAndsReplacer]{\\editor}<i>(ed.)</i><BR>\\end{editor}__NEWLINE__"
operator|+
literal|"\\begin{title} \\format[HTMLChars]{\\title} \\end{title}<BR>__NEWLINE__"
operator|+
literal|"\\begin{chapter} \\format[HTMLChars]{\\chapter}<BR>\\end{chapter}__NEWLINE__"
operator|+
literal|"\\begin{journal}<em>\\format[HTMLChars]{\\journal},</em>\\end{journal}__NEWLINE__"
comment|// Include the booktitle field for @inproceedings, @proceedings, etc.
operator|+
literal|"\\begin{booktitle}<em>\\format[HTMLChars]{\\booktitle},</em>\\end{booktitle}__NEWLINE__"
operator|+
literal|"\\begin{school}<em>\\format[HTMLChars]{\\school},</em>\\end{school}__NEWLINE__"
operator|+
literal|"\\begin{institution}<em>\\format[HTMLChars]{\\institution},</em>\\end{institution}__NEWLINE__"
operator|+
literal|"\\begin{publisher}<em>\\format[HTMLChars]{\\publisher},</em>\\end{publisher}__NEWLINE__"
operator|+
literal|"\\begin{year}<b>\\year</b>\\end{year}\\begin{volume}<i>, \\volume</i>\\end{volume}"
operator|+
literal|"\\begin{pages}, \\format[FormatPagesForHTML]{\\pages} \\end{pages}__NEWLINE__"
operator|+
literal|"\\begin{abstract}<BR><BR><b>Abstract:</b> \\format[HTMLChars]{\\abstract} \\end{abstract}__NEWLINE__"
operator|+
literal|"\\begin{review}<BR><BR><b>Review:</b> \\format[HTMLChars]{\\review} \\end{review}"
operator|+
literal|"</dd>__NEWLINE__<p></p></font>"
argument_list|)
expr_stmt|;
comment|// TODO: Currently not possible to edit this setting:
name|defaults
operator|.
name|put
argument_list|(
literal|"previewPrintButton"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"autoDoubleBraces"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"doNotResolveStringsFor"
argument_list|,
literal|"url"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"resolveStringsAllFields"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"putBracesAroundCapitals"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|//"title;journal;booktitle;review;abstract");
name|defaults
operator|.
name|put
argument_list|(
literal|"nonWrappableFields"
argument_list|,
literal|"pdf;ps;url;doi;file"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"useImportInspectionDialog"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"useImportInspectionDialogForSingle"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"generateKeysAfterInspection"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"markImportedEntries"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"unmarkAllEntriesBeforeImporting"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"warnAboutDuplicatesInInspection"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"useTimeStamp"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"overwriteTimeStamp"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"timeStampFormat"
argument_list|,
literal|"yyyy.MM.dd"
argument_list|)
expr_stmt|;
comment|//        defaults.put("timeStampField", "timestamp");
name|defaults
operator|.
name|put
argument_list|(
literal|"timeStampField"
argument_list|,
name|BibtexFields
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"generateKeysBeforeSaving"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"useRemoteServer"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"remoteServerPort"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|6050
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"personalJournalList"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"externalJournalLists"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"citeCommand"
argument_list|,
literal|"cite"
argument_list|)
expr_stmt|;
comment|// obsoleted by the app-specific ones
name|defaults
operator|.
name|put
argument_list|(
literal|"citeCommandVim"
argument_list|,
literal|"\\cite"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"citeCommandEmacs"
argument_list|,
literal|"\\cite"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"citeCommandWinEdt"
argument_list|,
literal|"\\cite"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"citeCommandLed"
argument_list|,
literal|"\\cite"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"floatMarkedEntries"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"useNativeFileDialogOnMac"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"lastUsedExport"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"sidePaneWidth"
argument_list|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"importInspectionDialogWidth"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|650
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"importInspectionDialogHeight"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|650
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"searchDialogWidth"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|650
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"searchDialogHeight"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"showFileLinksUpgradeWarning"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"autolinkExactKeyOnly"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"numericFields"
argument_list|,
literal|"mittnum;author"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"runAutomaticFileSearch"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"useLockFiles"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"autoSave"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"autoSaveInterval"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"promptBeforeUsingAutosave"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"deletePlugins"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|//defaults.put("lastAutodetectedImport", "");
comment|//defaults.put("autoRemoveExactDuplicates", Boolean.FALSE);
comment|//defaults.put("confirmAutoRemoveExactDuplicates", Boolean.TRUE);
comment|//defaults.put("tempDir", System.getProperty("java.io.tmpdir"));
comment|//Util.pr(System.getProperty("java.io.tempdir"));
comment|//defaults.put("keyPattern", new LabelPattern(KEY_PATTERN));
name|restoreKeyBindings
argument_list|()
expr_stmt|;
name|customExports
operator|=
operator|new
name|CustomExportList
argument_list|(
operator|new
name|ExportComparator
argument_list|()
argument_list|)
expr_stmt|;
name|customImports
operator|=
operator|new
name|CustomImportList
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|//defaults.put("oooWarning", Boolean.TRUE);
name|updateSpecialFieldHandling
argument_list|()
expr_stmt|;
name|WRAPPED_USERNAME
operator|=
literal|"["
operator|+
name|get
argument_list|(
literal|"defaultOwner"
argument_list|)
operator|+
literal|"]"
expr_stmt|;
name|String
name|defaultExpression
init|=
literal|"**/.*[bibtexkey].*\\\\.[extension]"
decl_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_REG_EXP_SEARCH_EXPRESSION_KEY
argument_list|,
name|defaultExpression
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|REG_EXP_SEARCH_EXPRESSION_KEY
argument_list|,
name|defaultExpression
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_REG_EXP_SEARCH_KEY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"useIEEEAbrv"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
DECL|field|DEFAULT_REG_EXP_SEARCH_EXPRESSION_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_REG_EXP_SEARCH_EXPRESSION_KEY
init|=
literal|"defaultRegExpSearchExpression"
decl_stmt|;
DECL|field|REG_EXP_SEARCH_EXPRESSION_KEY
specifier|public
specifier|static
specifier|final
name|String
name|REG_EXP_SEARCH_EXPRESSION_KEY
init|=
literal|"regExpSearchExpression"
decl_stmt|;
DECL|field|USE_REG_EXP_SEARCH_KEY
specifier|public
specifier|static
specifier|final
name|String
name|USE_REG_EXP_SEARCH_KEY
init|=
literal|"useRegExpSearch"
decl_stmt|;
DECL|method|putBracesAroundCapitals (String fieldName)
specifier|public
name|boolean
name|putBracesAroundCapitals
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|putBracesAroundCapitalsFields
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
DECL|method|updateSpecialFieldHandling ()
specifier|public
name|void
name|updateSpecialFieldHandling
parameter_list|()
block|{
name|putBracesAroundCapitalsFields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|fieldString
init|=
name|get
argument_list|(
literal|"putBracesAroundCapitals"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldString
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|fields
init|=
name|fieldString
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|putBracesAroundCapitalsFields
operator|.
name|add
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nonWrappableFields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fieldString
operator|=
name|get
argument_list|(
literal|"nonWrappableFields"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldString
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|fields
init|=
name|fieldString
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|nonWrappableFields
operator|.
name|add
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Check whether a key is set (differently from null).      * @param key The key to check.      * @return true if the key is set, false otherwise.      */
DECL|method|hasKey (String key)
specifier|public
name|boolean
name|hasKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|get (String key)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|get
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|get (String key, String def)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|def
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|def
argument_list|)
return|;
block|}
DECL|method|getBoolean (String key)
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|,
name|getBooleanDefault
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getBooleanDefault (String key)
specifier|public
name|boolean
name|getBooleanDefault
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
DECL|method|getDouble (String key)
specifier|public
name|double
name|getDouble
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|getDouble
argument_list|(
name|key
argument_list|,
name|getDoubleDefault
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDoubleDefault (String key)
specifier|public
name|double
name|getDoubleDefault
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Double
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
DECL|method|getInt (String key)
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|getInt
argument_list|(
name|key
argument_list|,
name|getIntDefault
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getIntDefault (String key)
specifier|public
name|int
name|getIntDefault
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Integer
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
DECL|method|getByteArray (String key)
specifier|public
name|byte
index|[]
name|getByteArray
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|getByteArray
argument_list|(
name|key
argument_list|,
name|getByteArrayDefault
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getByteArrayDefault (String key)
specifier|public
name|byte
index|[]
name|getByteArrayDefault
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|put (String key, String value)
specifier|public
name|void
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|putBoolean (String key, boolean value)
specifier|public
name|void
name|putBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|putBoolean
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|putDouble (String key, double value)
specifier|public
name|void
name|putDouble
parameter_list|(
name|String
name|key
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|putDouble
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|putInt (String key, int value)
specifier|public
name|void
name|putInt
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|putInt
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|putByteArray (String key, byte[] value)
specifier|public
name|void
name|putByteArray
parameter_list|(
name|String
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|putByteArray
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|remove (String key)
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|prefs
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**      * Puts a string array into the Preferences, by linking its elements      * with ';' into a single string. Escape characters make the process      * transparent even if strings contain ';'.      */
DECL|method|putStringArray (String key, String[] value)
specifier|public
name|void
name|putStringArray
parameter_list|(
name|String
name|key
parameter_list|,
name|String
index|[]
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|value
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|StringBuffer
name|linked
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|linked
operator|.
name|append
argument_list|(
name|makeEscape
argument_list|(
name|value
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|linked
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|linked
operator|.
name|append
argument_list|(
name|makeEscape
argument_list|(
name|value
index|[
name|value
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|linked
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
argument_list|(
name|key
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns a String[] containing the chosen columns.      */
DECL|method|getStringArray (String key)
specifier|public
name|String
index|[]
name|getStringArray
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|names
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|StringReader
name|rd
init|=
operator|new
name|StringReader
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|arr
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|rs
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|rs
operator|=
name|getNextUnit
argument_list|(
name|rd
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|arr
operator|.
name|add
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{}
name|String
index|[]
name|res
init|=
operator|new
name|String
index|[
name|arr
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|res
index|[
name|i
index|]
operator|=
name|arr
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/**      * Looks up a color definition in preferences, and returns the Color object.      * @param key The key for this setting.      * @return The color corresponding to the setting.      */
DECL|method|getColor (String key)
specifier|public
name|Color
name|getColor
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
index|[]
name|rgb
init|=
name|getRgb
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|Color
argument_list|(
name|rgb
index|[
literal|0
index|]
argument_list|,
name|rgb
index|[
literal|1
index|]
argument_list|,
name|rgb
index|[
literal|2
index|]
argument_list|)
return|;
block|}
DECL|method|getDefaultColor (String key)
specifier|public
name|Color
name|getDefaultColor
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
index|[]
name|rgb
init|=
name|getRgb
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|Color
argument_list|(
name|rgb
index|[
literal|0
index|]
argument_list|,
name|rgb
index|[
literal|1
index|]
argument_list|,
name|rgb
index|[
literal|2
index|]
argument_list|)
return|;
block|}
comment|/**      * Set the default value for a key. This is useful for plugins that need to      * add default values for the prefs keys they use.      * @param key The preferences key.      * @param value The default value.      */
DECL|method|putDefaultValue (String key, Object value)
specifier|public
name|void
name|putDefaultValue
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|defaults
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stores a color in preferences.      * @param key The key for this setting.      * @param color The Color to store.      */
DECL|method|putColor (String key, Color color)
specifier|public
name|void
name|putColor
parameter_list|(
name|String
name|key
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|color
operator|.
name|getRed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|color
operator|.
name|getGreen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|color
operator|.
name|getBlue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Looks up a color definition in preferences, and returns an array containing the RGB values.      * @param value The key for this setting.      * @return The RGB values corresponding to this color setting.      */
DECL|method|getRgb (String value)
specifier|public
name|int
index|[]
name|getRgb
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|String
index|[]
name|elements
init|=
name|value
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
literal|3
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|values
index|[
literal|2
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elements
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
comment|/**      * Returns the KeyStroke for this binding, as defined by the      * defaults, or in the Preferences.      */
DECL|method|getKey (String bindName)
specifier|public
name|KeyStroke
name|getKey
parameter_list|(
name|String
name|bindName
parameter_list|)
block|{
name|String
name|s
init|=
name|keyBinds
operator|.
name|get
argument_list|(
name|bindName
argument_list|)
decl_stmt|;
comment|// If the current key bindings don't contain the one asked for,
comment|// we fall back on the default. This should only happen when a
comment|// user has his own set in Preferences, and has upgraded to a
comment|// new version where new bindings have been introduced.
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|defKeyBinds
operator|.
name|get
argument_list|(
name|bindName
argument_list|)
expr_stmt|;
comment|// So, if this happens, we add the default value to the current
comment|// hashmap, so this doesn't happen again, and so this binding
comment|// will appear in the KeyBindingsDialog.
name|keyBinds
operator|.
name|put
argument_list|(
name|bindName
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"Could not get key binding for \""
operator|+
name|bindName
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|ON_MAC
condition|)
return|return
name|getKeyForMac
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
else|else
return|return
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**      * Returns the KeyStroke for this binding, as defined by the      * defaults, or in the Preferences, but adapted for Mac users,      * with the Command key preferred instead of Control.      */
DECL|method|getKeyForMac (KeyStroke ks)
specifier|private
name|KeyStroke
name|getKeyForMac
parameter_list|(
name|KeyStroke
name|ks
parameter_list|)
block|{
if|if
condition|(
name|ks
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|keyCode
init|=
name|ks
operator|.
name|getKeyCode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ks
operator|.
name|getModifiers
argument_list|()
operator|&
name|KeyEvent
operator|.
name|CTRL_MASK
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|ks
return|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|ks
operator|.
name|getModifiers
argument_list|()
operator|&
name|KeyEvent
operator|.
name|SHIFT_MASK
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|keyCode
argument_list|,
name|Globals
operator|.
name|getShortcutMask
argument_list|()
operator|+
name|KeyEvent
operator|.
name|SHIFT_MASK
argument_list|)
return|;
block|}
return|return
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|keyCode
argument_list|,
name|Globals
operator|.
name|getShortcutMask
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the HashMap containing all key bindings.      */
DECL|method|getKeyBindings ()
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getKeyBindings
parameter_list|()
block|{
return|return
name|keyBinds
return|;
block|}
comment|/**      * Returns the HashMap containing default key bindings.      */
DECL|method|getDefaultKeys ()
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getDefaultKeys
parameter_list|()
block|{
return|return
name|defKeyBinds
return|;
block|}
comment|/**      * Calling this method will write all preferences into the preference store.      */
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|getBoolean
argument_list|(
literal|"memoryStickMode"
argument_list|)
condition|)
block|{
try|try
block|{
name|exportPreferences
argument_list|(
literal|"jabref.xml"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"Could not save preferences for memory stick mode: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|prefs
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Stores new key bindings into Preferences, provided they      * actually differ from the old ones.      */
DECL|method|setNewKeyBindings (HashMap<String, String> newBindings)
specifier|public
name|void
name|setNewKeyBindings
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newBindings
parameter_list|)
block|{
if|if
condition|(
operator|!
name|newBindings
operator|.
name|equals
argument_list|(
name|keyBinds
argument_list|)
condition|)
block|{
comment|// This confirms that the bindings have actually changed.
name|String
index|[]
name|bindNames
init|=
operator|new
name|String
index|[
name|newBindings
operator|.
name|size
argument_list|()
index|]
decl_stmt|,
name|bindings
init|=
operator|new
name|String
index|[
name|newBindings
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|newBindings
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|nm
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|bnd
init|=
name|newBindings
operator|.
name|get
argument_list|(
name|nm
argument_list|)
decl_stmt|;
name|bindNames
index|[
name|index
index|]
operator|=
name|nm
expr_stmt|;
name|bindings
index|[
name|index
index|]
operator|=
name|bnd
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
name|putStringArray
argument_list|(
literal|"bindNames"
argument_list|,
name|bindNames
argument_list|)
expr_stmt|;
name|putStringArray
argument_list|(
literal|"bindings"
argument_list|,
name|bindings
argument_list|)
expr_stmt|;
name|keyBinds
operator|=
name|newBindings
expr_stmt|;
block|}
block|}
DECL|method|getKeyPattern ()
specifier|public
name|LabelPattern
name|getKeyPattern
parameter_list|()
block|{
name|keyPattern
operator|=
operator|new
name|LabelPattern
argument_list|(
name|KEY_PATTERN
argument_list|)
expr_stmt|;
name|Preferences
name|pre
init|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
operator|.
name|LabelPattern
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|String
index|[]
name|keys
init|=
name|pre
operator|.
name|keys
argument_list|()
decl_stmt|;
if|if
condition|(
name|keys
operator|.
name|length
operator|>
literal|0
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|keyPattern
operator|.
name|addLabelPattern
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|pre
operator|.
name|get
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"BackingStoreException in JabRefPreferences.getKeyPattern"
argument_list|)
expr_stmt|;
block|}
comment|///
comment|//keyPattern.addLabelPattern("article", "[author][year]");
comment|//putKeyPattern(keyPattern);
comment|///
return|return
name|keyPattern
return|;
block|}
DECL|method|putKeyPattern (LabelPattern pattern)
specifier|public
name|void
name|putKeyPattern
parameter_list|(
name|LabelPattern
name|pattern
parameter_list|)
block|{
name|keyPattern
operator|=
name|pattern
expr_stmt|;
name|LabelPattern
name|parent
init|=
name|pattern
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
return|return;
comment|// Store overridden definitions to Preferences.
name|Preferences
name|pre
init|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
operator|.
name|LabelPattern
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|pre
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// We remove all old entries.
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
literal|"BackingStoreException in JabRefPreferences.putKeyPattern"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|pattern
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|pattern
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|)
operator|.
name|equals
argument_list|(
name|parent
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
condition|)
name|pre
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|pattern
operator|.
name|getValue
argument_list|(
name|s
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|restoreKeyBindings ()
specifier|private
name|void
name|restoreKeyBindings
parameter_list|()
block|{
comment|// Define default keybindings.
name|defineDefaultKeyBindings
argument_list|()
expr_stmt|;
comment|// First read the bindings, and their names.
name|String
index|[]
name|bindNames
init|=
name|getStringArray
argument_list|(
literal|"bindNames"
argument_list|)
decl_stmt|,
name|bindings
init|=
name|getStringArray
argument_list|(
literal|"bindings"
argument_list|)
decl_stmt|;
comment|// Then set up the key bindings HashMap.
if|if
condition|(
operator|(
name|bindNames
operator|==
literal|null
operator|)
operator|||
operator|(
name|bindings
operator|==
literal|null
operator|)
operator|||
operator|(
name|bindNames
operator|.
name|length
operator|!=
name|bindings
operator|.
name|length
operator|)
condition|)
block|{
comment|// Nothing defined in Preferences, or something is wrong.
name|setDefaultKeyBindings
argument_list|()
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bindNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|keyBinds
operator|.
name|put
argument_list|(
name|bindNames
index|[
name|i
index|]
argument_list|,
name|bindings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|setDefaultKeyBindings ()
specifier|private
name|void
name|setDefaultKeyBindings
parameter_list|()
block|{
name|keyBinds
operator|=
name|defKeyBinds
expr_stmt|;
block|}
DECL|method|defineDefaultKeyBindings ()
specifier|private
name|void
name|defineDefaultKeyBindings
parameter_list|()
block|{
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Push to application"
argument_list|,
literal|"ctrl L"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Push to LyX"
argument_list|,
literal|"ctrl L"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Push to WinEdt"
argument_list|,
literal|"ctrl shift W"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Quit JabRef"
argument_list|,
literal|"ctrl Q"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Open database"
argument_list|,
literal|"ctrl O"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Save database"
argument_list|,
literal|"ctrl S"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Save database as ..."
argument_list|,
literal|"ctrl shift S"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Save all"
argument_list|,
literal|"ctrl alt S"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Close database"
argument_list|,
literal|"ctrl W"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"New entry"
argument_list|,
literal|"ctrl N"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Cut"
argument_list|,
literal|"ctrl X"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Copy"
argument_list|,
literal|"ctrl C"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Paste"
argument_list|,
literal|"ctrl V"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Undo"
argument_list|,
literal|"ctrl Z"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Redo"
argument_list|,
literal|"ctrl Y"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Help"
argument_list|,
literal|"F1"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"New article"
argument_list|,
literal|"ctrl shift A"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"New book"
argument_list|,
literal|"ctrl shift B"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"New phdthesis"
argument_list|,
literal|"ctrl shift T"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"New inbook"
argument_list|,
literal|"ctrl shift I"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"New mastersthesis"
argument_list|,
literal|"ctrl shift M"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"New proceedings"
argument_list|,
literal|"ctrl shift P"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"New unpublished"
argument_list|,
literal|"ctrl shift U"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Edit strings"
argument_list|,
literal|"ctrl T"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Edit preamble"
argument_list|,
literal|"ctrl P"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Select all"
argument_list|,
literal|"ctrl A"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Toggle groups interface"
argument_list|,
literal|"ctrl shift G"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Autogenerate BibTeX keys"
argument_list|,
literal|"ctrl G"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Search"
argument_list|,
literal|"ctrl F"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Incremental search"
argument_list|,
literal|"ctrl shift F"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Repeat incremental search"
argument_list|,
literal|"ctrl shift F"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Close dialog"
argument_list|,
literal|"ESCAPE"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Close entry editor"
argument_list|,
literal|"ESCAPE"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Close preamble editor"
argument_list|,
literal|"ESCAPE"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Back, help dialog"
argument_list|,
literal|"LEFT"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Forward, help dialog"
argument_list|,
literal|"RIGHT"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Preamble editor, store changes"
argument_list|,
literal|"alt S"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Clear search"
argument_list|,
literal|"ESCAPE"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Entry editor, next panel"
argument_list|,
literal|"ctrl TAB"
argument_list|)
expr_stmt|;
comment|//"ctrl PLUS");//"shift Right");
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Entry editor, previous panel"
argument_list|,
literal|"ctrl shift TAB"
argument_list|)
expr_stmt|;
comment|//"ctrl MINUS");
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Entry editor, next panel 2"
argument_list|,
literal|"ctrl PLUS"
argument_list|)
expr_stmt|;
comment|//"ctrl PLUS");//"shift Right");
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Entry editor, previous panel 2"
argument_list|,
literal|"ctrl MINUS"
argument_list|)
expr_stmt|;
comment|//"ctrl MINUS");
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Entry editor, next entry"
argument_list|,
literal|"ctrl shift DOWN"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Entry editor, previous entry"
argument_list|,
literal|"ctrl shift UP"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Entry editor, store field"
argument_list|,
literal|"alt S"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"String dialog, add string"
argument_list|,
literal|"ctrl N"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"String dialog, remove string"
argument_list|,
literal|"shift DELETE"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"String dialog, move string up"
argument_list|,
literal|"ctrl UP"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"String dialog, move string down"
argument_list|,
literal|"ctrl DOWN"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Save session"
argument_list|,
literal|"F11"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Load session"
argument_list|,
literal|"F12"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Copy \\cite{BibTeX key}"
argument_list|,
literal|"ctrl K"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Copy BibTeX key"
argument_list|,
literal|"ctrl shift K"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Next tab"
argument_list|,
literal|"ctrl PAGE_DOWN"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Previous tab"
argument_list|,
literal|"ctrl PAGE_UP"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Replace string"
argument_list|,
literal|"ctrl R"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Delete"
argument_list|,
literal|"DELETE"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Open file"
argument_list|,
literal|"F4"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Open PDF or PS"
argument_list|,
literal|"shift F5"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Open URL or DOI"
argument_list|,
literal|"F3"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Open SPIRES entry"
argument_list|,
literal|"ctrl F3"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Toggle entry preview"
argument_list|,
literal|"ctrl F9"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Switch preview layout"
argument_list|,
literal|"F9"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Edit entry"
argument_list|,
literal|"ctrl E"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Mark entries"
argument_list|,
literal|"ctrl M"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Unmark entries"
argument_list|,
literal|"ctrl shift M"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Fetch Medline"
argument_list|,
literal|"F5"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Fetch CiteSeer"
argument_list|,
literal|"F6"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"New from plain text"
argument_list|,
literal|"ctrl shift N"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Import Fields from CiteSeer"
argument_list|,
literal|"ctrl shift C"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Fetch citations from CiteSeer"
argument_list|,
literal|"F7"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Synchronize files"
argument_list|,
literal|"ctrl F4"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Synchronize PDF"
argument_list|,
literal|"shift F4"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Synchronize PS"
argument_list|,
literal|"ctrl shift F4"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Focus entry table"
argument_list|,
literal|"ctrl shift E"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Abbreviate"
argument_list|,
literal|"ctrl alt A"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Unabbreviate"
argument_list|,
literal|"ctrl alt shift A"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Search IEEEXplore"
argument_list|,
literal|"F8"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Search ACM Portal"
argument_list|,
literal|"ctrl shift F8"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Fetch ArXiv.org"
argument_list|,
literal|"shift F8"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Search JSTOR"
argument_list|,
literal|"shift F9"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Fetch SPIRES"
argument_list|,
literal|"ctrl F8"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Write XMP"
argument_list|,
literal|"ctrl F4"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"New file link"
argument_list|,
literal|"ctrl N"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Fetch SPIRES"
argument_list|,
literal|"ctrl F8"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Back"
argument_list|,
literal|"alt LEFT"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Forward"
argument_list|,
literal|"alt RIGHT"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Import into current database"
argument_list|,
literal|"ctrl I"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Import into new database"
argument_list|,
literal|"ctrl shift I"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Increase table font size"
argument_list|,
literal|"ctrl PLUS"
argument_list|)
expr_stmt|;
name|defKeyBinds
operator|.
name|put
argument_list|(
literal|"Decrease table font size"
argument_list|,
literal|"ctrl MINUS"
argument_list|)
expr_stmt|;
block|}
DECL|method|getNextUnit (Reader data)
specifier|private
name|String
name|getNextUnit
parameter_list|(
name|Reader
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|c
decl_stmt|;
name|boolean
name|escape
init|=
literal|false
decl_stmt|,
name|done
init|=
literal|false
decl_stmt|;
name|StringBuffer
name|res
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|done
operator|&&
operator|(
operator|(
name|c
operator|=
name|data
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
operator|!
name|escape
condition|)
name|escape
operator|=
literal|true
expr_stmt|;
else|else
block|{
name|escape
operator|=
literal|false
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|c
operator|==
literal|';'
condition|)
block|{
if|if
condition|(
operator|!
name|escape
condition|)
name|done
operator|=
literal|true
expr_stmt|;
else|else
name|res
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|escape
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|res
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
else|else
return|return
literal|null
return|;
block|}
DECL|method|makeEscape (String s)
specifier|private
name|String
name|makeEscape
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|c
operator|==
literal|'\\'
operator|)
operator|||
operator|(
name|c
operator|==
literal|';'
operator|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Stores all information about the entry type in preferences, with      * the tag given by number.      */
DECL|method|storeCustomEntryType (CustomEntryType tp, int number)
specifier|public
name|void
name|storeCustomEntryType
parameter_list|(
name|CustomEntryType
name|tp
parameter_list|,
name|int
name|number
parameter_list|)
block|{
name|String
name|nr
init|=
literal|""
operator|+
name|number
decl_stmt|;
name|put
argument_list|(
name|CUSTOM_TYPE_NAME
operator|+
name|nr
argument_list|,
name|tp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|putStringArray
argument_list|(
name|CUSTOM_TYPE_REQ
operator|+
name|nr
argument_list|,
name|tp
operator|.
name|getRequiredFields
argument_list|()
argument_list|)
expr_stmt|;
name|putStringArray
argument_list|(
name|CUSTOM_TYPE_OPT
operator|+
name|nr
argument_list|,
name|tp
operator|.
name|getOptionalFields
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves all information about the entry type in preferences,      * with the tag given by number.      */
DECL|method|getCustomEntryType (int number)
specifier|public
name|CustomEntryType
name|getCustomEntryType
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|String
name|nr
init|=
literal|""
operator|+
name|number
decl_stmt|;
name|String
name|name
init|=
name|get
argument_list|(
name|CUSTOM_TYPE_NAME
operator|+
name|nr
argument_list|)
decl_stmt|;
name|String
index|[]
name|req
init|=
name|getStringArray
argument_list|(
name|CUSTOM_TYPE_REQ
operator|+
name|nr
argument_list|)
decl_stmt|,
name|opt
init|=
name|getStringArray
argument_list|(
name|CUSTOM_TYPE_OPT
operator|+
name|nr
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|null
return|;
else|else
return|return
operator|new
name|CustomEntryType
argument_list|(
name|Util
operator|.
name|nCase
argument_list|(
name|name
argument_list|)
argument_list|,
name|req
argument_list|,
name|opt
argument_list|)
return|;
block|}
DECL|method|getDefaultExternalFileTypes ()
specifier|public
name|List
argument_list|<
name|ExternalFileType
argument_list|>
name|getDefaultExternalFileTypes
parameter_list|()
block|{
name|List
argument_list|<
name|ExternalFileType
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ExternalFileType
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"PDF"
argument_list|,
literal|"pdf"
argument_list|,
literal|"application/pdf"
argument_list|,
literal|"evince"
argument_list|,
literal|"pdfSmall"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"PostScript"
argument_list|,
literal|"ps"
argument_list|,
literal|"application/postscript"
argument_list|,
literal|"evince"
argument_list|,
literal|"psSmall"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"Word"
argument_list|,
literal|"doc"
argument_list|,
literal|"application/msword"
argument_list|,
literal|"oowriter"
argument_list|,
literal|"openoffice"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"OpenDocument text"
argument_list|,
literal|"odt"
argument_list|,
literal|"application/vnd.oasis.opendocument.text"
argument_list|,
literal|"oowriter"
argument_list|,
literal|"openoffice"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"Excel"
argument_list|,
literal|"xls"
argument_list|,
literal|"application/excel"
argument_list|,
literal|"oocalc"
argument_list|,
literal|"openoffice"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"OpenDocument spreadsheet"
argument_list|,
literal|"ods"
argument_list|,
literal|"application/vnd.oasis.opendocument.spreadsheet"
argument_list|,
literal|"oocalc"
argument_list|,
literal|"openoffice"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"PowerPoint"
argument_list|,
literal|"ppt"
argument_list|,
literal|""
argument_list|,
literal|"ooimpress"
argument_list|,
literal|"openoffice"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"OpenDocument presentation"
argument_list|,
literal|"odp"
argument_list|,
literal|"application/vnd.oasis.opendocument.presentation"
argument_list|,
literal|"ooimpress"
argument_list|,
literal|"openoffice"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"Rich Text Format"
argument_list|,
literal|"rtf"
argument_list|,
literal|"application/rtf"
argument_list|,
literal|"oowriter"
argument_list|,
literal|"openoffice"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"PNG image"
argument_list|,
literal|"png"
argument_list|,
literal|"image/png"
argument_list|,
literal|"gimp"
argument_list|,
literal|"picture"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"GIF image"
argument_list|,
literal|"gif"
argument_list|,
literal|"image/gif"
argument_list|,
literal|"gimp"
argument_list|,
literal|"picture"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"JPG image"
argument_list|,
literal|"jpg"
argument_list|,
literal|"image/jpeg"
argument_list|,
literal|"gimp"
argument_list|,
literal|"picture"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"Djvu"
argument_list|,
literal|"djvu"
argument_list|,
literal|""
argument_list|,
literal|"evince"
argument_list|,
literal|"psSmall"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"Text"
argument_list|,
literal|"txt"
argument_list|,
literal|"text/plain"
argument_list|,
literal|"emacs"
argument_list|,
literal|"emacs"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"LaTeX"
argument_list|,
literal|"tex"
argument_list|,
literal|""
argument_list|,
literal|"emacs"
argument_list|,
literal|"emacs"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"CHM"
argument_list|,
literal|"chm"
argument_list|,
literal|""
argument_list|,
literal|"gnochm"
argument_list|,
literal|"www"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileType
argument_list|(
literal|"TIFF image"
argument_list|,
literal|"tiff"
argument_list|,
literal|"image/tiff"
argument_list|,
literal|"gimp"
argument_list|,
literal|"picture"
argument_list|)
argument_list|)
expr_stmt|;
name|ExternalFileType
name|tp
init|=
operator|new
name|ExternalFileType
argument_list|(
literal|"URL"
argument_list|,
literal|"html"
argument_list|,
literal|"text/html"
argument_list|,
literal|"firefox"
argument_list|,
literal|"www"
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
comment|// On all OSes there is a generic application available to handle file opening,
comment|// so we don't need the default application settings anymore:
for|for
control|(
name|Iterator
argument_list|<
name|ExternalFileType
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExternalFileType
name|type
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|type
operator|.
name|setOpenWith
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|method|getExternalFileTypeSelection ()
specifier|public
name|ExternalFileType
index|[]
name|getExternalFileTypeSelection
parameter_list|()
block|{
return|return
name|externalFileTypes
operator|.
name|toArray
argument_list|(
operator|new
name|ExternalFileType
index|[
name|externalFileTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Look up the external file type registered with this name, if any.      * @param name The file type name.      * @return The ExternalFileType registered, or null if none.      */
DECL|method|getExternalFileTypeByName (String name)
specifier|public
name|ExternalFileType
name|getExternalFileTypeByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ExternalFileType
argument_list|>
name|iterator
init|=
name|externalFileTypes
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExternalFileType
name|type
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|type
return|;
block|}
comment|// Return an instance that signifies an unknown file type:
return|return
operator|new
name|UnknownExternalFileType
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Look up the external file type registered for this extension, if any.      * @param extension The file extension.      * @return The ExternalFileType registered, or null if none.      */
DECL|method|getExternalFileTypeByExt (String extension)
specifier|public
name|ExternalFileType
name|getExternalFileTypeByExt
parameter_list|(
name|String
name|extension
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ExternalFileType
argument_list|>
name|iterator
init|=
name|externalFileTypes
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExternalFileType
name|type
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|type
operator|.
name|getExtension
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|type
operator|.
name|getExtension
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|extension
argument_list|)
condition|)
return|return
name|type
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Look up the external file type registered for this MIME type, if any.      * @param mimeType The MIME type.      * @return The ExternalFileType registered, or null if none.      */
DECL|method|getExternalFileTypeByMimeType (String mimeType)
specifier|public
name|ExternalFileType
name|getExternalFileTypeByMimeType
parameter_list|(
name|String
name|mimeType
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ExternalFileType
argument_list|>
name|iterator
init|=
name|externalFileTypes
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExternalFileType
name|type
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|type
operator|.
name|getMimeType
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|type
operator|.
name|getMimeType
argument_list|()
operator|.
name|equals
argument_list|(
name|mimeType
argument_list|)
condition|)
return|return
name|type
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Reset the List of external file types after user customization.      * @param types The new List of external file types. This is the complete list, not      *  just new entries.      */
DECL|method|setExternalFileTypes (List<ExternalFileType> types)
specifier|public
name|void
name|setExternalFileTypes
parameter_list|(
name|List
argument_list|<
name|ExternalFileType
argument_list|>
name|types
parameter_list|)
block|{
comment|// First find a list of the default types:
name|List
argument_list|<
name|ExternalFileType
argument_list|>
name|defTypes
init|=
name|getDefaultExternalFileTypes
argument_list|()
decl_stmt|;
comment|// Make a list of types that are unchanged:
name|List
argument_list|<
name|ExternalFileType
argument_list|>
name|unchanged
init|=
operator|new
name|ArrayList
argument_list|<
name|ExternalFileType
argument_list|>
argument_list|()
decl_stmt|;
name|externalFileTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ExternalFileType
argument_list|>
name|iterator
init|=
name|types
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExternalFileType
name|type
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|externalFileTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// See if we can find a type with matching name in the default type list:
name|ExternalFileType
name|found
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExternalFileType
name|defType
range|:
name|defTypes
control|)
block|{
if|if
condition|(
name|defType
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
name|defType
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
comment|// Found it! Check if it is an exact match, or if it has been customized:
if|if
condition|(
name|found
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|unchanged
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
else|else
block|{
comment|// It was modified. Remove its entry from the defaults list, since
comment|// the type hasn't been removed:
name|defTypes
operator|.
name|remove
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Go through unchanged types. Remove them from the ones that should be stored,
comment|// and from the list of defaults, since we don't need to mention these in prefs:
for|for
control|(
name|ExternalFileType
name|type
range|:
name|unchanged
control|)
block|{
name|defTypes
operator|.
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|types
operator|.
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|// Now set up the array to write to prefs, containing all new types, all modified
comment|// types, and a flag denoting each default type that has been removed:
name|String
index|[]
index|[]
name|array
init|=
operator|new
name|String
index|[
name|types
operator|.
name|size
argument_list|()
operator|+
name|defTypes
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExternalFileType
name|type
range|:
name|types
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|type
operator|.
name|getStringArrayRepresentation
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|ExternalFileType
name|type
range|:
name|defTypes
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
operator|new
name|String
index|[]
block|{
name|type
operator|.
name|getName
argument_list|()
block|,
name|FILE_TYPE_REMOVED_FLAG
block|}
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
comment|//System.out.println("Encoded: '"+Util.encodeStringArray(array)+"'");
name|put
argument_list|(
literal|"externalFileTypes"
argument_list|,
name|Util
operator|.
name|encodeStringArray
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set up the list of external file types, either from default values, or from values      * recorded in Preferences.      */
DECL|method|updateExternalFileTypes ()
specifier|public
name|void
name|updateExternalFileTypes
parameter_list|()
block|{
comment|// First get a list of the default file types as a starting point:
name|List
argument_list|<
name|ExternalFileType
argument_list|>
name|types
init|=
name|getDefaultExternalFileTypes
argument_list|()
decl_stmt|;
comment|// If no changes have been stored, simply use the defaults:
if|if
condition|(
name|prefs
operator|.
name|get
argument_list|(
literal|"externalFileTypes"
argument_list|,
literal|null
argument_list|)
operator|==
literal|null
condition|)
block|{
name|externalFileTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|externalFileTypes
operator|.
name|addAll
argument_list|(
name|types
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Read the prefs information for file types:
name|String
index|[]
index|[]
name|vals
init|=
name|Util
operator|.
name|decodeStringDoubleArray
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
literal|"externalFileTypes"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|vals
index|[
name|i
index|]
operator|.
name|length
operator|==
literal|2
operator|)
operator|&&
operator|(
name|vals
index|[
name|i
index|]
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|FILE_TYPE_REMOVED_FLAG
argument_list|)
operator|)
condition|)
block|{
comment|// This entry indicates that a default entry type should be removed:
name|ExternalFileType
name|toRemove
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExternalFileType
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|vals
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|toRemove
operator|=
name|type
expr_stmt|;
break|break;
block|}
block|}
comment|// If we found it, remove it from the type list:
if|if
condition|(
name|toRemove
operator|!=
literal|null
condition|)
name|types
operator|.
name|remove
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// A new or modified entry type. Construct it from the string array:
name|ExternalFileType
name|type
init|=
operator|new
name|ExternalFileType
argument_list|(
name|vals
index|[
name|i
index|]
argument_list|)
decl_stmt|;
comment|// Check if there is a default type with the same name. If so, this is a
comment|// modification of that type, so remove the default one:
name|ExternalFileType
name|toRemove
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExternalFileType
name|defType
range|:
name|types
control|)
block|{
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|defType
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|toRemove
operator|=
name|defType
expr_stmt|;
break|break;
block|}
block|}
comment|// If we found it, remove it from the type list:
if|if
condition|(
name|toRemove
operator|!=
literal|null
condition|)
block|{
name|types
operator|.
name|remove
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
block|}
comment|// Then add the new one:
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Finally, build the list of types based on the modified defaults list:
for|for
control|(
name|ExternalFileType
name|type
range|:
name|types
control|)
block|{
name|externalFileTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes all information about custom entry types with tags of      * @param number or higher.      */
DECL|method|purgeCustomEntryTypes (int number)
specifier|public
name|void
name|purgeCustomEntryTypes
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|purgeSeries
argument_list|(
name|CUSTOM_TYPE_NAME
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|purgeSeries
argument_list|(
name|CUSTOM_TYPE_REQ
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|purgeSeries
argument_list|(
name|CUSTOM_TYPE_OPT
argument_list|,
name|number
argument_list|)
expr_stmt|;
comment|/*while (get(CUSTOM_TYPE_NAME+number) != null) {             remove(CUSTOM_TYPE_NAME+number);             remove(CUSTOM_TYPE_REQ+number);             remove(CUSTOM_TYPE_OPT+number);             number++;             }*/
block|}
comment|/**      * Removes all entries keyed by prefix+number, where number      * is equal to or higher than the given number.      * @param number or higher.      */
DECL|method|purgeSeries (String prefix, int number)
specifier|public
name|void
name|purgeSeries
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|number
parameter_list|)
block|{
while|while
condition|(
name|get
argument_list|(
name|prefix
operator|+
name|number
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|remove
argument_list|(
name|prefix
operator|+
name|number
argument_list|)
expr_stmt|;
name|number
operator|++
expr_stmt|;
block|}
block|}
DECL|method|getEntryEditorTabList ()
specifier|public
name|EntryEditorTabList
name|getEntryEditorTabList
parameter_list|()
block|{
if|if
condition|(
name|tabList
operator|==
literal|null
condition|)
name|updateEntryEditorTabList
argument_list|()
expr_stmt|;
return|return
name|tabList
return|;
block|}
DECL|method|updateEntryEditorTabList ()
specifier|public
name|void
name|updateEntryEditorTabList
parameter_list|()
block|{
name|tabList
operator|=
operator|new
name|EntryEditorTabList
argument_list|()
expr_stmt|;
block|}
comment|/**      * Exports Preferences to an XML file.      *      * @param filename String File to export to      */
DECL|method|exportPreferences (String filename)
specifier|public
name|void
name|exportPreferences
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|prefs
operator|.
name|exportSubtree
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**        * Imports Preferences from an XML file.        *        * @param filename String File to import from        */
DECL|method|importPreferences (String filename)
specifier|public
name|void
name|importPreferences
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|Preferences
operator|.
name|importPreferences
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPreferencesFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Determines whether the given field should be written without any sort of wrapping.      * @param fieldName The field name.      * @return true if the field should not be wrapped.      */
DECL|method|isNonWrappableField (String fieldName)
specifier|public
name|boolean
name|isNonWrappableField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|nonWrappableFields
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

