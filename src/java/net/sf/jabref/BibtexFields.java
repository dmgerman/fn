begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2006 Raik Nagel<kiar@users.sourceforge.net>  All rights reserved.   Redistribution and use in source and binary forms, with or without  modification, are permitted provided that the following conditions are met:   * Redistributions of source code must retain the above copyright notice,   this list of conditions and the following disclaimer.  * Redistributions in binary form must reproduce the above copyright notice,   this list of conditions and the following disclaimer in the documentation   and/or other materials provided with the distribution.  * Neither the name of the author nor the names of its contributors may be   used to endorse or promote products derived from this software without   specific prior written permission.   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER  OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|// created by : r.nagel 19.04.2006
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// function : Handling of bibtex fields.
end_comment

begin_comment
comment|//            All bibtex-field related stuff should be placed here!
end_comment

begin_comment
comment|//            Because we can export these informations into additional
end_comment

begin_comment
comment|//            config files -> simple extension and definition of new fields....
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// todo     : - handling of identically fields with different names
end_comment

begin_comment
comment|//              e.g. LCCN = lib-congress
end_comment

begin_comment
comment|//            - group id for each fields, e.g. standard, jurabib, bio....
end_comment

begin_comment
comment|//            - add a additional properties functionality into the
end_comment

begin_comment
comment|//              BibtexSingleField class
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// modified : r.nagel 25.04.2006
end_comment

begin_comment
comment|//            export/import of some definition from/to a xml file
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|TXMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_class
DECL|class|BibtexFields
specifier|public
class|class
name|BibtexFields
block|{
DECL|field|KEY_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|KEY_FIELD
init|=
literal|"bibtexkey"
decl_stmt|;
comment|// some internal fields
specifier|public
specifier|static
specifier|final
name|String
DECL|field|SEARCH
name|SEARCH
init|=
literal|"__search"
decl_stmt|,
DECL|field|GROUPSEARCH
name|GROUPSEARCH
init|=
literal|"__groupsearch"
decl_stmt|,
DECL|field|MARKED
name|MARKED
init|=
literal|"__markedentry"
decl_stmt|,
DECL|field|OWNER
name|OWNER
init|=
literal|"owner"
decl_stmt|,
DECL|field|TIMESTAMP
name|TIMESTAMP
init|=
literal|"timestamp"
decl_stmt|,
comment|// it's also definied at the JabRefPreferences class
DECL|field|ENTRYTYPE
name|ENTRYTYPE
init|=
literal|"entrytype"
decl_stmt|,
comment|// Using this when I have no database open or when I read
comment|// non bibtex file formats (used by the ImportFormatReader.java)
DECL|field|DEFAULT_BIBTEXENTRY_ID
name|DEFAULT_BIBTEXENTRY_ID
init|=
literal|"__ID"
decl_stmt|;
DECL|field|DEFAULT_INSPECTION_FIELDS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_INSPECTION_FIELDS
init|=
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"year"
block|,
name|KEY_FIELD
block|}
decl_stmt|;
comment|// singleton instance
DECL|field|runtime
specifier|private
specifier|static
specifier|final
name|BibtexFields
name|runtime
init|=
operator|new
name|BibtexFields
argument_list|()
decl_stmt|;
comment|// contains all bibtex-field objects (BibtexSingleField)
DECL|field|fieldSet
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|BibtexSingleField
argument_list|>
name|fieldSet
decl_stmt|;
comment|// contains all known (and public) bibtex fieldnames
DECL|field|PUBLIC_FIELDS
specifier|private
name|String
index|[]
name|PUBLIC_FIELDS
init|=
literal|null
decl_stmt|;
DECL|method|BibtexFields ()
specifier|private
name|BibtexFields
parameter_list|()
block|{
name|fieldSet
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BibtexSingleField
argument_list|>
argument_list|()
expr_stmt|;
name|BibtexSingleField
name|dummy
init|=
literal|null
decl_stmt|;
comment|// FIRST: all standard fields
comment|// These are the fields that BibTex might want to treat, so these
comment|// must conform to BibTex rules.
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"address"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
comment|// An annotation. It is not used by the standard bibliography styles,
comment|// but may be used by others that produce an annotated bibliography.
comment|// http://www.ecst.csuchico.edu/~jacobsd/bib/formats/bibtex.html
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"annote"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|LARGE_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"author"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|MEDIUM_W
argument_list|,
literal|280
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"booktitle"
argument_list|,
literal|true
argument_list|,
literal|175
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"chapter"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"crossref"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"edition"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"editor"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|MEDIUM_W
argument_list|,
literal|280
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"howpublished"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"institution"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"journal"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
literal|"journalNames"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"key"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"month"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"note"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"number"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"organization"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"pages"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"publisher"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"school"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"series"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"title"
argument_list|,
literal|true
argument_list|,
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"type"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"volume"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"year"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// some semi-standard fields
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|KEY_FIELD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"doi"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
literal|"external"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"eid"
argument_list|,
literal|true
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"date"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"pmid"
argument_list|,
literal|false
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// additional fields ------------------------------------------------------
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"citeseercitationcount"
argument_list|,
literal|false
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setAlternativeDisplayName
argument_list|(
literal|"Popularity"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"location"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"abstract"
argument_list|,
literal|false
argument_list|,
name|GUIGlobals
operator|.
name|LARGE_W
argument_list|,
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"url"
argument_list|,
literal|false
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
literal|"external"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"citeseerurl"
argument_list|,
literal|false
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
literal|"external"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"pdf"
argument_list|,
literal|false
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
literal|"browseDoc"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"ps"
argument_list|,
literal|false
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
literal|"browseDocZip"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"comment"
argument_list|,
literal|false
argument_list|,
name|GUIGlobals
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"keywords"
argument_list|,
literal|false
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
comment|//FIELD_EXTRAS.put("keywords", "selector");
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setEditorType
argument_list|(
name|GUIGlobals
operator|.
name|FILE_LIST_EDITOR
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"search"
argument_list|,
literal|false
argument_list|,
literal|75
argument_list|)
argument_list|)
expr_stmt|;
comment|// some internal fields ----------------------------------------------
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|GUIGlobals
operator|.
name|NUMBER_COL
argument_list|,
literal|false
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|OWNER
argument_list|,
literal|false
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
literal|"setOwner"
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|TIMESTAMP
argument_list|,
literal|false
argument_list|,
name|GUIGlobals
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
literal|"datepicker"
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|ENTRYTYPE
argument_list|,
literal|false
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|SEARCH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|GROUPSEARCH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|MARKED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// This field must be written to file!
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
comment|// read external field definitions
name|readXML
argument_list|(
name|Globals
operator|.
name|additionalFields
argument_list|)
expr_stmt|;
comment|// collect all public fields for the PUBLIC_FIELDS array
name|Vector
argument_list|<
name|String
argument_list|>
name|pFields
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|fieldSet
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|BibtexSingleField
name|sField
range|:
name|fieldSet
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|sField
operator|.
name|isPublic
argument_list|()
condition|)
block|{
name|pFields
operator|.
name|add
argument_list|(
name|sField
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
comment|// or export the complet BibtexSingleField ?
comment|// BibtexSingleField.toString() { return fieldname ; }
block|}
block|}
name|PUBLIC_FIELDS
operator|=
name|pFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|pFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
comment|// sort the entries
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|sort
argument_list|(
name|PUBLIC_FIELDS
argument_list|)
expr_stmt|;
block|}
comment|/** insert a field into the internal list */
DECL|method|add ( BibtexSingleField field )
specifier|private
name|void
name|add
parameter_list|(
name|BibtexSingleField
name|field
parameter_list|)
block|{
comment|// field == null check
name|String
name|key
init|=
name|field
operator|.
name|name
decl_stmt|;
name|fieldSet
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
comment|/** read a xml definiton file and put only NEW fields into the field list */
DECL|method|readXML ( String resName )
specifier|private
name|void
name|readXML
parameter_list|(
name|String
name|resName
parameter_list|)
block|{
name|TXMLReader
name|reader
init|=
operator|new
name|TXMLReader
argument_list|(
name|resName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|isReady
argument_list|()
condition|)
block|{
comment|// get a list of all fields
name|NodeList
name|fieldNodes
init|=
name|reader
operator|.
name|getNodes
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|tagsCount
init|=
name|fieldNodes
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|tagsCount
condition|;
name|t
operator|++
control|)
block|{
name|Element
name|entry
init|=
operator|(
name|Element
operator|)
name|fieldNodes
operator|.
name|item
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|String
name|fName
init|=
name|reader
operator|.
name|readStringAttribute
argument_list|(
name|entry
argument_list|,
literal|"name"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|fName
operator|!=
literal|null
condition|)
comment|// something found ?
block|{
name|fName
operator|=
name|fName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|BibtexSingleField
name|dummy
init|=
name|fieldSet
operator|.
name|get
argument_list|(
name|fName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dummy
operator|==
literal|null
condition|)
comment|// unknown field
block|{
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|reader
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|fieldSet
operator|.
name|put
argument_list|(
name|fName
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// --------------------------------------------------------------------------
comment|//  the "static area"
comment|// --------------------------------------------------------------------------
DECL|method|getField ( String name )
specifier|private
specifier|static
specifier|final
name|BibtexSingleField
name|getField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|BibtexSingleField
operator|)
name|runtime
operator|.
name|fieldSet
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getFieldExtras ( String name )
specifier|public
specifier|static
name|String
name|getFieldExtras
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|BibtexSingleField
name|sField
init|=
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
return|return
name|sField
operator|.
name|getExtras
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getEditorType (String name)
specifier|public
specifier|static
name|int
name|getEditorType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|BibtexSingleField
name|sField
init|=
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
return|return
name|sField
operator|.
name|getEditorType
argument_list|()
return|;
block|}
return|return
name|GUIGlobals
operator|.
name|STANDARD_EDITOR
return|;
block|}
DECL|method|getFieldWeight ( String name )
specifier|public
specifier|static
name|double
name|getFieldWeight
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|BibtexSingleField
name|sField
init|=
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
return|return
name|sField
operator|.
name|getWeight
argument_list|()
return|;
block|}
return|return
name|GUIGlobals
operator|.
name|DEFAULT_FIELD_WEIGHT
return|;
block|}
DECL|method|setFieldWeight ( String fieldName, double weight )
specifier|public
specifier|static
name|void
name|setFieldWeight
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|double
name|weight
parameter_list|)
block|{
name|BibtexSingleField
name|sField
init|=
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
name|sField
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFieldLength ( String name )
specifier|public
specifier|static
name|int
name|getFieldLength
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|BibtexSingleField
name|sField
init|=
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
return|return
name|sField
operator|.
name|getLength
argument_list|()
return|;
block|}
return|return
name|GUIGlobals
operator|.
name|DEFAULT_FIELD_LENGTH
return|;
block|}
comment|// returns an alternative name for the given fieldname
DECL|method|getFieldDisplayName ( String fieldName )
specifier|public
specifier|static
name|String
name|getFieldDisplayName
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|BibtexSingleField
name|sField
init|=
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
return|return
name|sField
operator|.
name|getAlternativeDisplayName
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|isWriteableField ( String field )
specifier|public
specifier|static
name|boolean
name|isWriteableField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|BibtexSingleField
name|sField
init|=
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
return|return
name|sField
operator|.
name|isWriteable
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|isDisplayableField ( String field )
specifier|public
specifier|static
name|boolean
name|isDisplayableField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|BibtexSingleField
name|sField
init|=
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
return|return
name|sField
operator|.
name|isDisplayable
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns true if the given field is a standard Bibtex field.    *    * @param field a<code>String</code> value    * @return a<code>boolean</code> value    */
DECL|method|isStandardField ( String field )
specifier|public
specifier|static
name|boolean
name|isStandardField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|BibtexSingleField
name|sField
init|=
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
return|return
name|sField
operator|.
name|isStandard
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|isNumeric ( String field )
specifier|public
specifier|static
name|boolean
name|isNumeric
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|BibtexSingleField
name|sField
init|=
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
return|return
name|sField
operator|.
name|isNumeric
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** returns an string-array with all fieldnames */
DECL|method|getAllFieldNames ()
specifier|public
specifier|static
name|String
index|[]
name|getAllFieldNames
parameter_list|()
block|{
return|return
name|runtime
operator|.
name|PUBLIC_FIELDS
return|;
block|}
comment|/** returns the fieldname of the entry at index t */
DECL|method|getFieldName ( int t )
specifier|public
specifier|static
name|String
name|getFieldName
parameter_list|(
name|int
name|t
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|runtime
operator|.
name|PUBLIC_FIELDS
index|[
name|t
index|]
return|;
block|}
comment|/** returns the number of available fields */
DECL|method|numberOfPublicFields ()
specifier|public
specifier|static
name|int
name|numberOfPublicFields
parameter_list|()
block|{
return|return
name|runtime
operator|.
name|PUBLIC_FIELDS
operator|.
name|length
return|;
block|}
comment|/*      public static int getPreferredFieldLength(String name) {      int l = DEFAULT_FIELD_LENGTH;      Object o = fieldLength.get(name.toLowerCase());      if (o != null)      l = ((Integer)o).intValue();      return l;      }*/
comment|// --------------------------------------------------------------------------
comment|// a container class for all properties of a bibtex-field
comment|// --------------------------------------------------------------------------
DECL|class|BibtexSingleField
specifier|private
class|class
name|BibtexSingleField
block|{
specifier|private
specifier|static
specifier|final
name|int
DECL|field|STANDARD
name|STANDARD
init|=
literal|0x01
decl_stmt|,
comment|// it is a standard bibtex-field
DECL|field|PRIVATE
name|PRIVATE
init|=
literal|0x02
decl_stmt|,
comment|// internal use, e.g. owner, timestamp
DECL|field|DISPLAYABLE
name|DISPLAYABLE
init|=
literal|0x04
decl_stmt|,
comment|// These fields cannot be shown inside the source editor panel
DECL|field|WRITEABLE
name|WRITEABLE
init|=
literal|0x08
decl_stmt|;
comment|// These fields will not be saved to the .bib file.
comment|// the fieldname
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|// contains the standard, privat, displayable, writable infos
comment|// default is: not standard, public, displayable and writable
DECL|field|flag
specifier|private
name|int
name|flag
init|=
name|DISPLAYABLE
operator||
name|WRITEABLE
decl_stmt|;
DECL|field|length
specifier|private
name|int
name|length
init|=
name|GUIGlobals
operator|.
name|DEFAULT_FIELD_LENGTH
decl_stmt|;
DECL|field|weight
specifier|private
name|double
name|weight
init|=
name|GUIGlobals
operator|.
name|DEFAULT_FIELD_WEIGHT
decl_stmt|;
DECL|field|editorType
specifier|private
name|int
name|editorType
init|=
name|GUIGlobals
operator|.
name|STANDARD_EDITOR
decl_stmt|;
comment|// a alternative displayname, e.g. used for
comment|// "citeseercitationcount"="Popularity"
DECL|field|alternativeDisplayName
specifier|private
name|String
name|alternativeDisplayName
init|=
literal|null
decl_stmt|;
comment|// the extras data
comment|// fieldExtras contains mappings to tell the EntryEditor to add a specific
comment|// function to this field, for instance a "browse" button for the "pdf" field.
DECL|field|extras
specifier|private
name|String
name|extras
init|=
literal|null
decl_stmt|;
comment|// This value defines whether contents of this field are expected to be
comment|// numeric values. This can be used to sort e.g. volume numbers correctly:
DECL|field|numeric
specifier|private
name|boolean
name|numeric
init|=
literal|false
decl_stmt|;
comment|// a comma separated list of alternative bibtex-fieldnames, e.g.
comment|// "LCCN" is the same like "lib-congress"
comment|// private String otherNames = null ;
comment|// a Hashmap for a lot of additional "not standard" properties
comment|// todo: add the handling in a key=value manner
comment|// private HashMap props = new HashMap() ;
comment|// some constructors ;-)
DECL|method|BibtexSingleField ( String fieldName )
specifier|public
name|BibtexSingleField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|BibtexSingleField ( String fieldName, boolean pStandard )
specifier|public
name|BibtexSingleField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|pStandard
parameter_list|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
name|setFlag
argument_list|(
name|pStandard
argument_list|,
name|STANDARD
argument_list|)
expr_stmt|;
block|}
DECL|method|BibtexSingleField ( String fieldName, boolean pStandard, double pWeight)
specifier|public
name|BibtexSingleField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|pStandard
parameter_list|,
name|double
name|pWeight
parameter_list|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
name|setFlag
argument_list|(
name|pStandard
argument_list|,
name|STANDARD
argument_list|)
expr_stmt|;
name|weight
operator|=
name|pWeight
expr_stmt|;
block|}
DECL|method|BibtexSingleField ( String fieldName, boolean pStandard, int pLength)
specifier|public
name|BibtexSingleField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|pStandard
parameter_list|,
name|int
name|pLength
parameter_list|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
name|setFlag
argument_list|(
name|pStandard
argument_list|,
name|STANDARD
argument_list|)
expr_stmt|;
name|length
operator|=
name|pLength
expr_stmt|;
block|}
DECL|method|BibtexSingleField ( String fieldName, boolean pStandard, double pWeight, int pLength)
specifier|public
name|BibtexSingleField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|pStandard
parameter_list|,
name|double
name|pWeight
parameter_list|,
name|int
name|pLength
parameter_list|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
name|setFlag
argument_list|(
name|pStandard
argument_list|,
name|STANDARD
argument_list|)
expr_stmt|;
name|weight
operator|=
name|pWeight
expr_stmt|;
name|length
operator|=
name|pLength
expr_stmt|;
block|}
comment|/** the constructor reads all neccessary data from the xml file */
DECL|method|BibtexSingleField ( TXMLReader reader, Element node)
specifier|public
name|BibtexSingleField
parameter_list|(
name|TXMLReader
name|reader
parameter_list|,
name|Element
name|node
parameter_list|)
block|{
comment|// default is: not standard, public, displayable and writable
name|flag
operator|=
name|DISPLAYABLE
operator||
name|WRITEABLE
expr_stmt|;
name|name
operator|=
name|reader
operator|.
name|readStringAttribute
argument_list|(
name|node
argument_list|,
literal|"name"
argument_list|,
literal|"field"
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|// read the weight
name|String
name|wStr
init|=
name|reader
operator|.
name|readStringAttribute
argument_list|(
name|node
argument_list|,
literal|"weight"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|wStr
operator|!=
literal|null
condition|)
block|{
name|int
name|hCode
init|=
name|wStr
operator|.
name|toLowerCase
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|hCode
operator|==
literal|"small"
operator|.
name|hashCode
argument_list|()
condition|)
block|{
name|weight
operator|=
name|GUIGlobals
operator|.
name|SMALL_W
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hCode
operator|==
literal|"medium"
operator|.
name|hashCode
argument_list|()
condition|)
block|{
name|weight
operator|=
name|GUIGlobals
operator|.
name|MEDIUM_W
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hCode
operator|==
literal|"large"
operator|.
name|hashCode
argument_list|()
condition|)
block|{
name|weight
operator|=
name|GUIGlobals
operator|.
name|LARGE_W
expr_stmt|;
block|}
else|else
comment|// try to convert to a double value
block|{
try|try
block|{
name|weight
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|wStr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|weight
operator|<
literal|0.0
operator|)
operator|||
operator|(
name|weight
operator|>
name|GUIGlobals
operator|.
name|MAX_FIELD_WEIGHT
operator|)
condition|)
block|{
name|weight
operator|=
name|GUIGlobals
operator|.
name|DEFAULT_FIELD_WEIGHT
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|weight
operator|=
name|GUIGlobals
operator|.
name|DEFAULT_FIELD_WEIGHT
expr_stmt|;
block|}
block|}
block|}
name|length
operator|=
name|reader
operator|.
name|readIntegerAttribute
argument_list|(
name|node
argument_list|,
literal|"length"
argument_list|,
name|GUIGlobals
operator|.
name|DEFAULT_FIELD_LENGTH
argument_list|)
expr_stmt|;
name|extras
operator|=
name|reader
operator|.
name|readStringAttribute
argument_list|(
name|node
argument_list|,
literal|"extras"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// -----------------------------------------------------------------------
comment|// -----------------------------------------------------------------------
DECL|method|setFlag ( boolean onOff, int flagID)
specifier|private
name|void
name|setFlag
parameter_list|(
name|boolean
name|onOff
parameter_list|,
name|int
name|flagID
parameter_list|)
block|{
if|if
condition|(
name|onOff
condition|)
comment|// set the flag
block|{
name|flag
operator|=
name|flag
operator||
name|flagID
expr_stmt|;
block|}
else|else
comment|// unset the flag,
block|{
name|flag
operator|=
name|flag
operator|&
operator|(
literal|0xff
operator|^
name|flagID
operator|)
expr_stmt|;
block|}
block|}
DECL|method|isSet ( int flagID )
specifier|private
name|boolean
name|isSet
parameter_list|(
name|int
name|flagID
parameter_list|)
block|{
if|if
condition|(
operator|(
name|flag
operator|&
name|flagID
operator|)
operator|==
name|flagID
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|// -----------------------------------------------------------------------
DECL|method|isStandard ()
specifier|public
name|boolean
name|isStandard
parameter_list|()
block|{
return|return
name|isSet
argument_list|(
name|STANDARD
argument_list|)
return|;
block|}
DECL|method|setPrivate ()
specifier|public
name|void
name|setPrivate
parameter_list|()
block|{
name|flag
operator|=
name|flag
operator||
name|PRIVATE
expr_stmt|;
block|}
DECL|method|isPrivate ()
specifier|public
name|boolean
name|isPrivate
parameter_list|()
block|{
return|return
name|isSet
argument_list|(
name|PRIVATE
argument_list|)
return|;
block|}
DECL|method|setPublic ()
specifier|public
name|void
name|setPublic
parameter_list|()
block|{
name|setFlag
argument_list|(
literal|false
argument_list|,
name|PRIVATE
argument_list|)
expr_stmt|;
block|}
DECL|method|isPublic ()
specifier|public
name|boolean
name|isPublic
parameter_list|()
block|{
return|return
operator|!
name|isSet
argument_list|(
name|PRIVATE
argument_list|)
return|;
block|}
DECL|method|setDisplayable (boolean value)
specifier|public
name|void
name|setDisplayable
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|setFlag
argument_list|(
name|value
argument_list|,
name|DISPLAYABLE
argument_list|)
expr_stmt|;
block|}
DECL|method|isDisplayable ()
specifier|public
name|boolean
name|isDisplayable
parameter_list|()
block|{
return|return
name|isSet
argument_list|(
name|DISPLAYABLE
argument_list|)
return|;
block|}
DECL|method|setWriteable (boolean value)
specifier|public
name|void
name|setWriteable
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|setFlag
argument_list|(
name|value
argument_list|,
name|WRITEABLE
argument_list|)
expr_stmt|;
block|}
DECL|method|isWriteable ()
specifier|public
name|boolean
name|isWriteable
parameter_list|()
block|{
return|return
name|isSet
argument_list|(
name|WRITEABLE
argument_list|)
return|;
block|}
comment|// -----------------------------------------------------------------------
DECL|method|setAlternativeDisplayName ( String aName)
specifier|public
name|void
name|setAlternativeDisplayName
parameter_list|(
name|String
name|aName
parameter_list|)
block|{
name|alternativeDisplayName
operator|=
name|aName
expr_stmt|;
block|}
DECL|method|getAlternativeDisplayName ()
specifier|public
name|String
name|getAlternativeDisplayName
parameter_list|()
block|{
return|return
name|alternativeDisplayName
return|;
block|}
comment|// -----------------------------------------------------------------------
DECL|method|setExtras ( String pExtras)
specifier|public
name|void
name|setExtras
parameter_list|(
name|String
name|pExtras
parameter_list|)
block|{
name|extras
operator|=
name|pExtras
expr_stmt|;
block|}
comment|// fieldExtras contains mappings to tell the EntryEditor to add a specific
comment|// function to this field, for instance a "browse" button for the "pdf" field.
DECL|method|getExtras ()
specifier|public
name|String
name|getExtras
parameter_list|()
block|{
return|return
name|extras
return|;
block|}
DECL|method|setEditorType (int type)
specifier|public
name|void
name|setEditorType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|editorType
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getEditorType ()
specifier|public
name|int
name|getEditorType
parameter_list|()
block|{
return|return
name|editorType
return|;
block|}
comment|// -----------------------------------------------------------------------
DECL|method|setWeight ( double value )
specifier|public
name|void
name|setWeight
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|this
operator|.
name|weight
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getWeight ()
specifier|public
name|double
name|getWeight
parameter_list|()
block|{
return|return
name|this
operator|.
name|weight
return|;
block|}
comment|// -----------------------------------------------------------------------
DECL|method|getLength ()
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|length
return|;
block|}
comment|// -----------------------------------------------------------------------
DECL|method|getFieldName ()
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**        * Set this field's numeric propery        * @param numeric true to indicate that this is a numeric field.        * @return this BibtexSingleField instance. Makes it easier to call this        *   method on the fly while initializing without using a local variable.        */
DECL|method|setNumeric (boolean numeric)
specifier|public
name|BibtexSingleField
name|setNumeric
parameter_list|(
name|boolean
name|numeric
parameter_list|)
block|{
name|this
operator|.
name|numeric
operator|=
name|numeric
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isNumeric ()
specifier|public
name|boolean
name|isNumeric
parameter_list|()
block|{
return|return
name|numeric
return|;
block|}
block|}
block|}
end_class

end_unit

