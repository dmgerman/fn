begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.sql
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BaseAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA. * User: alver * Date: Mar 27, 2008 * Time: 6:05:13 PM * To change this template use File | Settings | File Templates. */
end_comment

begin_class
DECL|class|DbConnectAction
specifier|public
class|class
name|DbConnectAction
extends|extends
name|BaseAction
block|{
DECL|field|panel
specifier|private
name|BasePanel
name|panel
decl_stmt|;
DECL|method|DbConnectAction (BasePanel panel)
specifier|public
name|DbConnectAction
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
block|}
DECL|method|getAction ()
specifier|public
name|AbstractAction
name|getAction
parameter_list|()
block|{
return|return
operator|new
name|DbImpAction
argument_list|()
return|;
block|}
DECL|class|DbImpAction
class|class
name|DbImpAction
extends|extends
name|AbstractAction
block|{
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|action
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
name|DBStrings
name|dbs
init|=
name|panel
operator|.
name|metaData
argument_list|()
operator|.
name|getDBStrings
argument_list|()
decl_stmt|;
comment|// init DB strings if necessary
if|if
condition|(
operator|!
name|dbs
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|dbs
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
comment|// show connection dialog
name|DBConnectDialog
name|dbd
init|=
operator|new
name|DBConnectDialog
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|dbs
argument_list|)
decl_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|dbd
argument_list|,
name|panel
argument_list|)
expr_stmt|;
name|dbd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// connnect to database to test DBStrings
if|if
condition|(
name|dbd
operator|.
name|getConnectToDB
argument_list|()
condition|)
block|{
name|dbs
operator|=
name|dbd
operator|.
name|getDBStrings
argument_list|()
expr_stmt|;
try|try
block|{
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Establishing SQL connection..."
argument_list|)
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|SQLutil
operator|.
name|connectToDB
argument_list|(
name|dbs
argument_list|)
decl_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|dbs
operator|.
name|isConfigValid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"SQL connection established."
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|String
name|errorMessage
init|=
name|SQLutil
operator|.
name|getExceptionMessage
argument_list|(
name|ex
argument_list|,
name|SQLutil
operator|.
name|DBTYPE
operator|.
name|MYSQL
argument_list|)
decl_stmt|;
name|dbs
operator|.
name|isConfigValid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|preamble
init|=
literal|"Could not connect to SQL database for the following reason:"
decl_stmt|;
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
name|preamble
argument_list|)
operator|+
literal|"  "
operator|+
name|errorMessage
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
name|preamble
argument_list|)
operator|+
literal|"\n"
operator|+
name|errorMessage
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Connect to SQL database"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|panel
operator|.
name|metaData
argument_list|()
operator|.
name|setDBStrings
argument_list|(
name|dbs
argument_list|)
expr_stmt|;
name|dbd
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

