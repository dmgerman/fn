begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.sql
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|AbstractWorker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|MnemonicAwareAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA. * User: alver * Date: Mar 27, 2008 * Time: 6:09:08 PM * To change this template use File | Settings | File Templates. */
end_comment

begin_class
DECL|class|DbImportAction
specifier|public
class|class
name|DbImportAction
extends|extends
name|AbstractWorker
block|{
DECL|field|database
name|BibtexDatabase
name|database
init|=
literal|null
decl_stmt|;
DECL|field|metaData
name|MetaData
name|metaData
init|=
literal|null
decl_stmt|;
DECL|field|errorMessage
name|String
name|errorMessage
init|=
literal|null
decl_stmt|;
DECL|field|connectToDB
name|boolean
name|connectToDB
init|=
literal|false
decl_stmt|;
DECL|field|frame
specifier|private
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|dbs
specifier|private
name|DBStrings
name|dbs
init|=
literal|null
decl_stmt|;
DECL|method|DbImportAction (JabRefFrame frame)
specifier|public
name|DbImportAction
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
block|}
DECL|method|getAction ()
specifier|public
name|AbstractAction
name|getAction
parameter_list|()
block|{
return|return
operator|new
name|DbImpAction
argument_list|()
return|;
block|}
DECL|class|DbImpAction
class|class
name|DbImpAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|DbImpAction ()
specifier|public
name|DbImpAction
parameter_list|()
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"dbImport"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|NAME
argument_list|,
literal|"Import from external SQL database"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|Util
operator|.
name|runAbstractWorker
argument_list|(
name|DbImportAction
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|throwable
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// run first, in EDT:
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|dbs
operator|=
operator|new
name|DBStrings
argument_list|()
expr_stmt|;
name|dbs
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|DBConnectDialog
name|dbd
init|=
operator|new
name|DBConnectDialog
argument_list|(
name|frame
argument_list|,
name|dbs
argument_list|)
decl_stmt|;
name|dbs
operator|=
name|dbd
operator|.
name|getDBStrings
argument_list|()
expr_stmt|;
comment|//panel.metaData().getDBStrings();
comment|// get DBStrings from user if necessary
if|if
condition|(
operator|!
name|dbs
operator|.
name|isConfigValid
argument_list|()
condition|)
block|{
comment|// init DB strings if necessary
if|if
condition|(
operator|!
name|dbs
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|dbs
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
comment|// show connection dialog
name|dbd
operator|=
operator|new
name|DBConnectDialog
argument_list|(
name|frame
argument_list|,
name|dbs
argument_list|)
expr_stmt|;
name|Util
operator|.
name|placeDialog
argument_list|(
name|dbd
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|dbd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectToDB
operator|=
name|dbd
operator|.
name|getConnectToDB
argument_list|()
expr_stmt|;
comment|// store database strings
if|if
condition|(
name|connectToDB
condition|)
block|{
name|dbs
operator|=
name|dbd
operator|.
name|getDBStrings
argument_list|()
expr_stmt|;
name|dbd
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|connectToDB
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// run second, on a different thread:
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|connectToDB
condition|)
block|{
try|try
block|{
name|frame
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Attempting SQL import..."
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|res
init|=
name|SQLutil
operator|.
name|importDatabase
argument_list|(
literal|null
argument_list|,
name|dbs
argument_list|)
decl_stmt|;
name|database
operator|=
operator|(
name|BibtexDatabase
operator|)
name|res
index|[
literal|0
index|]
expr_stmt|;
name|metaData
operator|=
operator|(
name|MetaData
operator|)
name|res
index|[
literal|1
index|]
expr_stmt|;
name|dbs
operator|.
name|isConfigValid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|errorMessage
operator|=
name|SQLutil
operator|.
name|getExceptionMessage
argument_list|(
name|ex
argument_list|,
name|SQLutil
operator|.
name|DBTYPE
operator|.
name|MYSQL
argument_list|)
expr_stmt|;
name|dbs
operator|.
name|isConfigValid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// run third, on EDT:
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
if|if
condition|(
name|database
operator|!=
literal|null
condition|)
block|{
name|BasePanel
name|pan
init|=
name|frame
operator|.
name|addTab
argument_list|(
name|database
argument_list|,
literal|null
argument_list|,
name|metaData
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultEncoding"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|pan
operator|.
name|metaData
argument_list|()
operator|.
name|setDBStrings
argument_list|(
name|dbs
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*String url = SQLutil.createJDBCurl(metaData.getDBStrings());          // if no error, report success         if (errorMessage == null) {             if (connectToDB) {                 frame.output(Globals.lang("%0 export successful", url));             }         }          // show an error dialog if an error occurred         else {              String preamble = "Could not export to SQL database for the following reason:";             frame.output(Globals.lang(preamble)                     + "  " + errorMessage);              JOptionPane.showMessageDialog(frame, Globals.lang(preamble)                 + "\n" + errorMessage, Globals.lang("Export to SQL database"),                 JOptionPane.ERROR_MESSAGE);              errorMessage = null;          } */
block|}
block|}
end_class

end_unit

