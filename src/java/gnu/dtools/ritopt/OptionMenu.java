begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|gnu.dtools.ritopt
package|package
name|gnu
operator|.
name|dtools
operator|.
name|ritopt
package|;
end_package

begin_comment
comment|/**  * OptionMenu.java  *  * Version:  *    $Id$  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_comment
comment|/**  * This class facilitates the built-in menu feature for ritopt. When the  * --menu long option is invoked, an instance of this class is notified,  * and the menu system starts.  *  * Here is an example run of the built-in menu.  *<pre>  * -&gt; ?  *         - Options Delimiter  *         ? Help  *         = Run program and return to menu  *         ! Shell to Operating System  *         $ Exit menu  *         + Additional options  *&#64;&lt;filename&gt; Get options from file [default.opt]  *&#64;&#64; Get options from file [default.opt]  *         %&lt;filename&gt; Put options in file  *         %% Put options in file [default.opt]  *         . Quit  * -&gt; =ls  * -&gt; =uname  * CYGWIN_ME-4.90  * Exit status: 0  * Press enter to continue...  *  * -&gt; =ls  * CVS  * Makefile  * Makefile.am  * Makefile.in  * edu  * gnu  * ritopt.jar  * Exit status: 0  * Press enter to continue..  *  * -&gt; --help  * java FavoriteFood @optionfile [module] OPTIONS ... [module] OPTIONS  *  * Use --menu to invoke the interactive built-in menu.  *  * Option Name     Type       Description  *  * -h, --help&lt;NOTIFY&gt;   Displays help for each option.  * -m, --menu&lt;NOTIFY&gt;   Displays the built-in interactive menu.  *     --fatfree&lt;BOOLEAN&gt;  No description given  * -v, --version&lt;NOTIFY&gt;   Displays version information.  *     --name&lt;STRING&gt;   No description given  * -g, --grub&lt;STRING&gt;   Favorite Food  * -f, --food&lt;STRING&gt;   Favorite Food  * -c, --food-coun&lt;STRING&gt;   No description given  *  * -&gt; --grub=tacos  * Warning: --grub or -g is deprecated.  * -&gt; --grubb  * Error: Option --grubb does not exist in module 'General'.  * -&gt; .  *  *</pre>  *<hr>  *  *<pre>  * Copyright (C) Damian Ryan Eads, 2001. All Rights Reserved.  *  * ritopt is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.   * ritopt is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with ritopt; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  *</pre>  *  * @author Damian Eads  */
end_comment

begin_class
DECL|class|OptionMenu
specifier|public
class|class
name|OptionMenu
implements|implements
name|OptionListener
block|{
comment|/**      * Commands starting with this substring are option invocations.      */
DECL|field|OPTION_COMMAND_CHAR
specifier|public
specifier|static
specifier|final
name|String
name|OPTION_COMMAND_CHAR
init|=
literal|"-"
decl_stmt|;
comment|/**      * This command without any arguments displays the command summary.      * Otherwise, specific help information is provided based on the      * argument.      */
DECL|field|HELP_COMMAND_CHAR
specifier|public
specifier|static
specifier|final
name|String
name|HELP_COMMAND_CHAR
init|=
literal|"?"
decl_stmt|;
comment|/**      * This command must have an argument. When invoked, it executes      * the argument at the command shell.      */
DECL|field|RUN_COMMAND_CHAR
specifier|public
specifier|static
specifier|final
name|String
name|RUN_COMMAND_CHAR
init|=
literal|"="
decl_stmt|;
comment|/**      * This command spawns a shell.      */
DECL|field|SHELL_COMMAND_CHAR
specifier|public
specifier|static
specifier|final
name|String
name|SHELL_COMMAND_CHAR
init|=
literal|"!"
decl_stmt|;
comment|/**      * This command exits the built-in menu system.      */
DECL|field|EXIT_MENU_COMMAND_CHAR
specifier|public
specifier|static
specifier|final
name|String
name|EXIT_MENU_COMMAND_CHAR
init|=
literal|"$"
decl_stmt|;
comment|/**      * This command lists registered option modules.      */
DECL|field|LIST_MODULES_COMMAND_CHAR
specifier|public
specifier|static
specifier|final
name|String
name|LIST_MODULES_COMMAND_CHAR
init|=
literal|"+"
decl_stmt|;
comment|/**      * This command without any arguments loads the default option file.      * Otherwise, the file as the argument is loaded.      */
DECL|field|FILE_READ_COMMAND_CHAR
specifier|public
specifier|static
specifier|final
name|String
name|FILE_READ_COMMAND_CHAR
init|=
literal|"@"
decl_stmt|;
comment|/**      * This command without any arguments writes to the default option file.      * Otherwise, the file as the argument is written.      */
DECL|field|FILE_WRITE_COMMAND_CHAR
specifier|public
specifier|static
specifier|final
name|String
name|FILE_WRITE_COMMAND_CHAR
init|=
literal|"%"
decl_stmt|;
comment|/**      * Loads an option module. Invoking this command without any arguments,      * the default option module is loaded.      */
DECL|field|FILE_MODULE_COMMAND_CHAR
specifier|public
specifier|static
specifier|final
name|String
name|FILE_MODULE_COMMAND_CHAR
init|=
literal|":"
decl_stmt|;
comment|/**      * The menu prompt used for the built-in menu system.      */
DECL|field|MENU_PROMPT
specifier|public
specifier|static
specifier|final
name|String
name|MENU_PROMPT
init|=
literal|"-> "
decl_stmt|;
comment|/**      * The options registrar associated with this option menu.      */
DECL|field|options
specifier|private
name|Options
name|options
decl_stmt|;
comment|/**      * A reader which is connected to standard input.      */
DECL|field|reader
specifier|private
name|BufferedReader
name|reader
decl_stmt|;
comment|/**      * Constructs a new built-in menu attaching it to the options registrar      * passed.      *      * @param options The option registrar associated with this built-in      *                menu.      */
DECL|method|OptionMenu ( Options options )
specifier|public
name|OptionMenu
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Starts the built-in menu system.      */
DECL|method|startMenu ()
specifier|public
name|void
name|startMenu
parameter_list|()
block|{
name|String
name|command
init|=
literal|""
decl_stmt|;
while|while
condition|(
operator|!
name|command
operator|.
name|equals
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|MENU_PROMPT
argument_list|)
expr_stmt|;
try|try
block|{
name|command
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return;
block|}
name|boolean
name|commandEntered
init|=
name|command
operator|!=
literal|null
operator|&&
name|command
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|commandEntered
operator|&&
name|command
operator|.
name|equals
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t- Options Delimiter"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t? Help"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t= Run program and return to menu"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t! Shell to Operating System"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t$ Exit menu"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t+ Additional options"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t@<filename> Get options from file ["
operator|+
name|options
operator|.
name|getDefaultOptionFilename
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t@@ Get options from file ["
operator|+
name|options
operator|.
name|getDefaultOptionFilename
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t%<filename> Put options in file"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t%% Put options in file ["
operator|+
name|options
operator|.
name|getDefaultOptionFilename
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t. Quit"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|commandEntered
operator|&&
operator|(
name|command
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|FILE_READ_COMMAND_CHAR
argument_list|)
operator|||
name|command
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|FILE_WRITE_COMMAND_CHAR
argument_list|)
operator|||
name|command
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|OPTION_COMMAND_CHAR
argument_list|)
operator|||
name|command
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|FILE_MODULE_COMMAND_CHAR
argument_list|)
operator|)
condition|)
block|{
name|options
operator|.
name|process
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|commandEntered
operator|&&
name|command
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|SHELL_COMMAND_CHAR
argument_list|)
condition|)
block|{  	    }
elseif|else
if|if
condition|(
name|commandEntered
operator|&&
name|command
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|RUN_COMMAND_CHAR
argument_list|)
condition|)
block|{
try|try
block|{
name|SimpleProcess
name|p
init|=
operator|new
name|SimpleProcess
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exit status: "
operator|+
name|p
operator|.
name|waitFor
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ritopt: An Error Occurred During Process Execution"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Press enter to continue..."
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{ }
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"(Type ? for Help)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method is notified when the --menu option is specified.      *      * @param event    The event associated.      */
DECL|method|optionInvoked ( OptionEvent event )
specifier|public
name|void
name|optionInvoked
parameter_list|(
name|OptionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
literal|"menu"
argument_list|)
condition|)
block|{
name|startMenu
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/** OptionMenu **/
end_comment

end_unit

