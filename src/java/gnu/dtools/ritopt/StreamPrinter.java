begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|gnu.dtools.ritopt
package|package
name|gnu
operator|.
name|dtools
operator|.
name|ritopt
package|;
end_package

begin_comment
comment|/**  * StreamPrinter.java  *  * Version:  *   $Id$  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_comment
comment|/**  * Reads data from an input stream and outputs to a print stream. This class  * is used by the OptionMenu class to read from both standard output and  * standard error simultaneously when a shell command is executed. Since the  * StreamPrinter processes streams on a separate thread, deadlock is  * prevented.<p>  *  *<hr>  *  *<pre>  * Copyright (C) Damian Ryan Eads, 2001. All Rights Reserved.  *  * ritopt is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.   * ritopt is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with ritopt; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  *</pre>  *  * @author Damian Eads  */
end_comment

begin_class
DECL|class|StreamPrinter
specifier|public
class|class
name|StreamPrinter
implements|implements
name|Runnable
implements|,
name|Stoppable
block|{
comment|/**      * The input stream to read from.      */
DECL|field|stream
specifier|private
name|InputStream
name|stream
decl_stmt|;
comment|/**      * The print stream to redirect to.      */
DECL|field|out
specifier|private
name|PrintStream
name|out
decl_stmt|;
comment|/**      * The object to stop.      */
DECL|field|stop
specifier|private
name|Stoppable
name|stop
decl_stmt|;
comment|/**      * Whether this StreamPrinter has stopped processing.      */
DECL|field|stopped
specifier|private
name|boolean
name|stopped
decl_stmt|;
comment|/**      * Whether the buffer should be flushed.      */
DECL|field|flush
specifier|private
name|boolean
name|flush
decl_stmt|;
comment|/**      * The thread associated with this StreamPrinter.      */
DECL|field|thread
specifier|private
name|Thread
name|thread
decl_stmt|;
comment|/**      * Constructs a new StreamPrinter.      *      * @param s The stream to read from.      * @param p The stream to output to.      */
DECL|method|StreamPrinter ( InputStream s, PrintStream p )
specifier|public
name|StreamPrinter
parameter_list|(
name|InputStream
name|s
parameter_list|,
name|PrintStream
name|p
parameter_list|)
block|{
name|stream
operator|=
name|s
expr_stmt|;
name|out
operator|=
name|p
expr_stmt|;
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Starts the thread associated with this StreamPrinter.      */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the object to stop when this object is finished.      *      * @param tostop The object to stop.      */
DECL|method|setStop ( Stoppable tostop )
specifier|public
name|void
name|setStop
parameter_list|(
name|Stoppable
name|tostop
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|stop
operator|=
name|tostop
expr_stmt|;
block|}
block|}
comment|/**      * Returns whether this StreamPrinter has stopped processing.      *      * @returns A boolean value.      */
DECL|method|isStopped ()
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|stopped
return|;
block|}
comment|/**      * Sets whether the output stream should be flushed after each output      * step.      *      * @param b A boolean value.      */
DECL|method|setFlush ( boolean flush )
specifier|public
name|void
name|setFlush
parameter_list|(
name|boolean
name|flush
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|flush
operator|=
name|flush
expr_stmt|;
block|}
block|}
comment|/**      * Stops this StreamPrinter's processing.       */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|stop
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|stop
init|)
block|{
if|if
condition|(
operator|!
name|stop
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|stop
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Joins this StreamPrinter's thread with the other threads.      */
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**      * Start the StreamPrinter thread. This is done automatically during      * construction.      */
comment|// This implementation is lousy; buffering is needed.
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|buf
decl_stmt|;
try|try
block|{
name|boolean
name|me
decl_stmt|;
while|while
condition|(
operator|!
name|stopped
operator|&&
operator|(
name|buf
operator|=
name|stream
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|me
operator|=
name|flush
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|out
init|)
block|{
name|out
operator|.
name|print
argument_list|(
operator|(
name|char
operator|)
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|me
condition|)
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"I/O error"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|out
init|)
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

