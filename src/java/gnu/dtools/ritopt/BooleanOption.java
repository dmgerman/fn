begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|gnu.dtools.ritopt
package|package
name|gnu
operator|.
name|dtools
operator|.
name|ritopt
package|;
end_package

begin_comment
comment|/**  * BooleanOption.java  *  * Version:  *     $Id$  */
end_comment

begin_comment
comment|/**  * This class is used for options with boolean values. There are several  * ways to invoke a boolean option at the command line.<p>  *  * For example, a plus (true) or minus (false) sign directly after the short  * or long option may be used.<p>  *<pre>  *  myprogram -a+ -b- --longa+ --longb-  *</pre>  * The following keywords may be used to invoke an option using the assignment  * form.  *<ul>  *<li>+  *<li>-  *<li>true  *<li>false  *<li>yes  *<li>no  *<li>on  *<li>off  *<li>activated  *<li>not activated  *<li>active  *<li>inactive  *</ul>  * To invoke an option using assignment form where<value> is the<value> of  * the option, use the following syntax.<p>  *<pre>  *  myprogram -a=<keyword> -b<keyword> --longa=<keyword> --longb=<keyword>  *</pre>  * Invoking a boolean option without using any of the aforementioned  * keywords and forms will set the option to true by default.  *  *<hr>  *  *<pre>  * Copyright (C) Damian Ryan Eads, 2001. All Rights Reserved.  *  * ritopt is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.   * ritopt is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with ritopt; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  *</pre>  *  * @author Damian Eads  */
end_comment

begin_class
DECL|class|BooleanOption
specifier|public
class|class
name|BooleanOption
extends|extends
name|Option
block|{
comment|/**      * The value of the boolean option.      */
DECL|field|value
specifier|private
name|boolean
name|value
decl_stmt|;
comment|/**      * Constructs a boolean option that is initially false.      */
DECL|method|BooleanOption ()
specifier|public
name|BooleanOption
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a boolean option by copying the boolean option passed.      *      * @param op     The boolean option to copy.      */
DECL|method|BooleanOption ( BooleanOption op )
specifier|public
name|BooleanOption
parameter_list|(
name|BooleanOption
name|op
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|op
operator|.
name|value
operator|=
name|op
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructs a boolean option initialized with the value passed.      *      * @param value    The initial value of this boolean option.      */
DECL|method|BooleanOption ( boolean value )
specifier|public
name|BooleanOption
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a boolean option initialized with the value and      * long option passed.      *      * @param value      The initial value of this boolean option.      * @param longOption The long option associated with this option.      */
DECL|method|BooleanOption ( boolean value, String longOption )
specifier|public
name|BooleanOption
parameter_list|(
name|boolean
name|value
parameter_list|,
name|String
name|longOption
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
name|longOption
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a boolean option initialized with the value and short      * option passed.      *      * @param value       The initial value of this boolean option.      * @param shortOption The short option associated with this option.      */
DECL|method|BooleanOption ( boolean value, char shortOption )
specifier|public
name|BooleanOption
parameter_list|(
name|boolean
name|value
parameter_list|,
name|char
name|shortOption
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
literal|null
argument_list|,
name|shortOption
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a boolean option initialized with the value, short      * and long option passed.      *      * @param shortOption The short option associated with this option.      * @param longOption  The long option associated with this option.      * @param value       The initial value of this boolean option.      */
DECL|method|BooleanOption ( boolean value, String longOption, char shortOption )
specifier|public
name|BooleanOption
parameter_list|(
name|boolean
name|value
parameter_list|,
name|String
name|longOption
parameter_list|,
name|char
name|shortOption
parameter_list|)
block|{
name|super
argument_list|(
name|longOption
argument_list|,
name|shortOption
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Return the value as an object.      *      * @return This value as an option.      */
DECL|method|getObject ()
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
operator|new
name|Boolean
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Modify this option based on a string representation. Acceptable values      * are +, -, true, false, yes, no, on, off, activated, not activated,      * active, and inactive.      *      * @param     value String representation of the object.      * @exception OptionModificationException Thrown if an error occurs      *                                  during modification of an option.      */
DECL|method|modify ( String value )
specifier|public
name|void
name|modify
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|OptionModificationException
block|{
name|String
name|val
init|=
name|value
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|this
operator|.
name|value
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"+"
argument_list|)
operator|||
name|val
operator|.
name|equals
argument_list|(
literal|"TRUE"
argument_list|)
operator|||
name|val
operator|.
name|equals
argument_list|(
literal|"YES"
argument_list|)
operator|||
name|val
operator|.
name|equals
argument_list|(
literal|"ON"
argument_list|)
operator|||
name|val
operator|.
name|equals
argument_list|(
literal|"ACTIVATED"
argument_list|)
operator|||
name|val
operator|.
name|equals
argument_list|(
literal|"ACTIVE"
argument_list|)
condition|)
block|{
name|this
operator|.
name|value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
operator|||
name|val
operator|.
name|equals
argument_list|(
literal|"FALSE"
argument_list|)
operator|||
name|val
operator|.
name|equals
argument_list|(
literal|"NO"
argument_list|)
operator|||
name|val
operator|.
name|equals
argument_list|(
literal|"OFF"
argument_list|)
operator|||
name|val
operator|.
name|equals
argument_list|(
literal|"NOT ACTIVATED"
argument_list|)
operator|||
name|val
operator|.
name|equals
argument_list|(
literal|"INACTIVE"
argument_list|)
condition|)
block|{
name|this
operator|.
name|value
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|OptionModificationException
argument_list|(
literal|"Error. A boolean value of\n+/-/true/false/yes/no/on/off/activated/not activated/active/inactive must be\nspecified, not '"
operator|+
name|value
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Modify this option based on a string representation. Acceptable values      * are +, -, true, false, yes, no, on, off, activated, not activated,      * active, inactive.      *      * @param     value String representation of the object.      * @exception OptionModificationException Thrown if an error occurs      *                                  during modification of an option.      */
DECL|method|setValue ( String value )
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|OptionModificationException
block|{
name|modify
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Modify this option using a boolean value.      *      * @param     value A boolean value.      */
DECL|method|setValue ( boolean value )
specifier|public
name|void
name|setValue
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Return this option as a boolean.      *      * @return This option as a boolean.      */
DECL|method|getValue ()
specifier|public
name|boolean
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * Return this option as a string.      *      * @return This option as a string.      */
DECL|method|getStringValue ()
specifier|public
name|String
name|getStringValue
parameter_list|()
block|{
return|return
operator|(
name|value
operator|)
condition|?
literal|"TRUE"
else|:
literal|"FALSE"
return|;
block|}
comment|/**      * Returns the type name of this option. For a BooleanOption, "BOOLEAN"      * is returned.      *      * @return The type name of this option.      */
DECL|method|getTypeName ()
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"BOOLEAN"
return|;
block|}
comment|/**      * Returns a string representation of this object.      *      * @return A string representation of this object.      */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getStringValue
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|/** BooleanOption */
end_comment

end_unit

