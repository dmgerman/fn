begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|gnu.dtools.ritopt
package|package
name|gnu
operator|.
name|dtools
operator|.
name|ritopt
package|;
end_package

begin_comment
comment|/**  * Options.java  *  * Version:  *    $Id$  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class functions as a repository for options and their modules. It  * facilitates registration of options and modules, as well as processing of  * arguments.<p>  *  * Information such as help, usage, and versions are displayed  * when the respective --help and --version options are specified.  * The --menu option will invoke the built-in menu.<p>  *  * In the example below, the program processes three simple options.  *  *<pre>  * public class AboutMe {  *  *    private static StringOption name = new StringOption( "Ryan" );  *    private static IntOption age = new IntOption( 19 );  *    private static DoubleOption bankBalance = new DoubleOption( 15.15 );  *  *    public static void main( String args[] ) {  *       Options repo = new Options( "java AboutMe" );  *       repo.register( "name", 'n', name, "The person's name." );  *       repo.register( "age", 'a', age, "The person's age." );  *       repo.register( "balance", 'b', "The person's bank balance.",  *                       bankBalance );  *       repo.process( args ); g *       System.err.println( "" + name + ", age " + age + " has a " +  *                           " bank balance of " + bankBalance + "." );  *    }  * }  *</pre>  *  *<hr>  *  *<pre>  * Copyright (C) Damian Ryan Eads, 2001. All Rights Reserved.  *  * ritopt is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *  * ritopt is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with ritopt; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  *</pre>  *  * @author Damian Eads  */
end_comment

begin_class
DECL|class|Options
specifier|public
class|class
name|Options
implements|implements
name|OptionRegistrar
implements|,
name|OptionModuleRegistrar
implements|,
name|OptionListener
block|{
comment|/**      * The default verbosity.      */
DECL|field|DEFAULT_VERBOSITY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_VERBOSITY
init|=
literal|3
decl_stmt|;
comment|/**      * This boolean defines whether options are deprecated by default.      */
DECL|field|DEFAULT_DEPRECATED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_DEPRECATED
init|=
literal|false
decl_stmt|;
comment|/**      * The default reason for deprecation.      */
DECL|field|DEFAULT_REASON
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_REASON
init|=
literal|"No reason given."
decl_stmt|;
comment|/**      * The default general module name.      */
DECL|field|DEFAULT_GENERAL_MODULE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_GENERAL_MODULE_NAME
init|=
literal|"General"
decl_stmt|;
comment|/**      * This boolean defines whether usage should be displayed.      */
DECL|field|DEFAULT_DISPLAY_USAGE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_DISPLAY_USAGE
init|=
literal|false
decl_stmt|;
comment|// Mod. Morten A.
comment|/**      * This boolean defines whether the menu should be used.      */
DECL|field|DEFAULT_USE_MENU
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_USE_MENU
init|=
literal|false
decl_stmt|;
comment|// Mod. Morten A.
comment|/**      * The default program name that is display in the usage.      */
DECL|field|DEFAULT_PROGRAM_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PROGRAM_NAME
init|=
literal|"java program"
decl_stmt|;
comment|/**      * The default option file.      */
DECL|field|DEFAULT_OPTION_FILENAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_OPTION_FILENAME
init|=
literal|"default.opt"
decl_stmt|;
comment|/**      * The current verbosity.      */
DECL|field|verbosity
specifier|private
name|int
name|verbosity
decl_stmt|;
comment|/**      * The program to display in the usage.      */
DECL|field|usageProgram
specifier|private
name|String
name|usageProgram
decl_stmt|;
comment|/**      * The version to display in the usage.      */
DECL|field|version
specifier|private
name|String
name|version
decl_stmt|;
comment|/**      * The default option filename if an option file is not specified.      */
DECL|field|defaultOptionFilename
specifier|private
name|String
name|defaultOptionFilename
decl_stmt|;
comment|/**      * This flag defines whether to display usage when help is displayed.      */
DECL|field|displayUsage
specifier|private
name|boolean
name|displayUsage
decl_stmt|;
comment|/**      * This boolean defines whether the menu should be used.      */
DECL|field|useMenu
specifier|private
name|boolean
name|useMenu
decl_stmt|;
comment|/**      * When this flag is true, debugging information is displayed.      */
DECL|field|debugFlag
specifier|private
name|boolean
name|debugFlag
decl_stmt|;
comment|/**      * The current module being processed.      */
DECL|field|currentModule
specifier|private
name|OptionModule
name|currentModule
decl_stmt|;
comment|/**      * The general option module.      */
DECL|field|generalModule
specifier|private
name|OptionModule
name|generalModule
decl_stmt|;
comment|/**      * A map of option modules.      */
DECL|field|modules
specifier|private
name|java
operator|.
name|util
operator|.
name|HashMap
name|modules
decl_stmt|;
comment|/**      * The help method is invoked when this option is invoked.      */
DECL|field|helpOption
specifier|private
name|NotifyOption
name|helpOption
decl_stmt|;
comment|/**      * The built-in menu system is invoked when this option is invoked.      */
DECL|field|menuOption
specifier|private
name|NotifyOption
name|menuOption
decl_stmt|;
comment|/**      * Version information is displayed when this option is specified.      */
DECL|field|versionOption
specifier|private
name|NotifyOption
name|versionOption
decl_stmt|;
comment|/**      * An instance of the built-in menu.      */
DECL|field|menu
specifier|private
name|OptionMenu
name|menu
decl_stmt|;
comment|/**      * Create an option repository.      */
DECL|method|Options ()
specifier|public
name|Options
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_PROGRAM_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an option repository and associated it with a program name.      *      * @param programName A program name like "java Balloons".      */
DECL|method|Options ( String programName )
specifier|public
name|Options
parameter_list|(
name|String
name|programName
parameter_list|)
block|{
name|verbosity
operator|=
name|DEFAULT_VERBOSITY
expr_stmt|;
name|displayUsage
operator|=
name|DEFAULT_DISPLAY_USAGE
expr_stmt|;
name|useMenu
operator|=
name|DEFAULT_USE_MENU
expr_stmt|;
name|defaultOptionFilename
operator|=
name|DEFAULT_OPTION_FILENAME
expr_stmt|;
name|usageProgram
operator|=
name|programName
expr_stmt|;
name|modules
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|menu
operator|=
operator|new
name|OptionMenu
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|helpOption
operator|=
operator|new
name|NotifyOption
argument_list|(
name|this
argument_list|,
literal|"help"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|versionOption
operator|=
operator|new
name|NotifyOption
argument_list|(
name|this
argument_list|,
literal|"version"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|version
operator|=
literal|"Version 1.0"
expr_stmt|;
name|menuOption
operator|=
operator|new
name|NotifyOption
argument_list|(
name|menu
argument_list|,
literal|"menu"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|generalModule
operator|=
operator|new
name|OptionModule
argument_list|(
name|DEFAULT_GENERAL_MODULE_NAME
argument_list|)
expr_stmt|;
name|currentModule
operator|=
name|generalModule
expr_stmt|;
comment|// Mod. Morten A. ------------------------------------------------
name|register
argument_list|(
literal|"version"
argument_list|,
literal|'v'
argument_list|,
literal|"Displays version information."
argument_list|,
name|versionOption
argument_list|)
expr_stmt|;
comment|/*register( "help", 'h', "Displays help for each option.", helpOption );         register( "menu", 'm', "Displays the built-in interactive menu.",                   menuOption );*/
comment|// End mod. Morten A. ------------------------------------------------
block|}
comment|/**      * Returns the help information as a string.      *      * @return The help information.      */
DECL|method|getHelp ()
specifier|public
name|String
name|getHelp
parameter_list|()
block|{
name|String
name|retval
init|=
operator|(
name|displayUsage
condition|?
name|getUsage
argument_list|()
operator|+
literal|"\n\n"
else|:
literal|""
operator|)
operator|+
comment|// Mod. Morten A.
comment|//"Use --menu to invoke the interactive built-in menu.\n\n" +
name|Option
operator|.
name|getHelpHeader
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|generalModule
operator|.
name|getHelp
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|modules
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OptionModule
name|module
init|=
operator|(
name|OptionModule
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|retval
operator|+=
literal|"\n\nOption Listing for "
operator|+
name|module
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
name|retval
operator|+=
name|module
operator|.
name|getHelp
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Returns usage information of this program.      *      * @return The usage information.      */
DECL|method|getUsage ()
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|getUsageProgram
argument_list|()
operator|+
literal|" @optionfile :module: OPTIONS ... :module: OPTIONS"
return|;
block|}
comment|/**      * Returns the program name displayed in the usage.      *      * @param The program name.      */
DECL|method|getUsageProgram ()
specifier|public
name|String
name|getUsageProgram
parameter_list|()
block|{
return|return
name|usageProgram
return|;
block|}
comment|/**      * Returns the version of the program.      *      * @param The version.      */
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * Returns the option filename to load or write to if one is not      * specified.      *      * @return The default option filename.      */
DECL|method|getDefaultOptionFilename ()
specifier|public
name|String
name|getDefaultOptionFilename
parameter_list|()
block|{
return|return
name|defaultOptionFilename
return|;
block|}
comment|/**      * Returns whether debugging information should be displayed.      *      * @return A boolean indicating whether to display help information.      */
DECL|method|getDebugFlag ()
specifier|public
name|boolean
name|getDebugFlag
parameter_list|()
block|{
return|return
name|debugFlag
return|;
block|}
comment|/**      * Returns whether the help information should display usage.      *      * @return A boolean indicating whether help should display usage.      */
DECL|method|shouldDisplayUsage ()
specifier|public
name|boolean
name|shouldDisplayUsage
parameter_list|()
block|{
return|return
name|displayUsage
return|;
block|}
comment|/**      * Returns whether the built-in menu system can be invoked.      *      * @return A boolean indicating whether the build-in menu system      *         can be invoked.      */
DECL|method|shouldUseMenu ()
specifier|public
name|boolean
name|shouldUseMenu
parameter_list|()
block|{
return|return
name|useMenu
return|;
block|}
comment|/**      * Sets whether usage can be displayed.      *      * @param b     A boolean value indicating that usage can be displayed.      */
DECL|method|setDisplayUsage ( boolean b )
specifier|public
name|void
name|setDisplayUsage
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|displayUsage
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * Sets whether the built-in menu system can be used.      *      * @param b      A boolean value indicating whether the built-in menu      *               system can be used.      */
DECL|method|setUseMenu ( boolean b )
specifier|public
name|void
name|setUseMenu
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|useMenu
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * Sets the program to display when the usage is displayed.      *      * @param program The program displayed during usage.      */
DECL|method|setUsageProgram ( String program )
specifier|public
name|void
name|setUsageProgram
parameter_list|(
name|String
name|program
parameter_list|)
block|{
name|usageProgram
operator|=
name|program
expr_stmt|;
block|}
comment|/**      * Sets the version of the program.      *      * @param version The version.      */
DECL|method|setVersion ( String version )
specifier|public
name|void
name|setVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/**      * Sets the option file to use when an option file is not specified.      *      * @param fn      The filename of the default option file.      */
DECL|method|setDefaultOptionFilename ( String fn )
specifier|public
name|void
name|setDefaultOptionFilename
parameter_list|(
name|String
name|fn
parameter_list|)
block|{
name|defaultOptionFilename
operator|=
name|fn
expr_stmt|;
block|}
comment|/**      * Sets the debugging flag.      *      * @param flag    The value to set the debugging flag.      public void setDebugFlag( boolean flag ) {         debugFlag = flag;     }      /**      * Displays the program's help which includes a description of each      * option. The usage is display if the usage flag is set to true.      */
DECL|method|displayHelp ()
specifier|public
name|void
name|displayHelp
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getHelp
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Displays the version of the program.      */
DECL|method|displayVersion ()
specifier|public
name|void
name|displayVersion
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register an option into the repository as a long option.      *      * @param longOption  The long option name.      * @param option      The option to register.      */
DECL|method|register ( String longOption, Option option )
specifier|public
name|void
name|register
parameter_list|(
name|String
name|longOption
parameter_list|,
name|Option
name|option
parameter_list|)
block|{
name|generalModule
operator|.
name|register
argument_list|(
name|longOption
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register an option into the repository as a short option.      *      * @param shortOption The short option name.      * @param option      The option to register.      */
DECL|method|register ( char shortOption, Option option )
specifier|public
name|void
name|register
parameter_list|(
name|char
name|shortOption
parameter_list|,
name|Option
name|option
parameter_list|)
block|{
name|generalModule
operator|.
name|register
argument_list|(
name|shortOption
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register an option into the repository both as a short and long option.      *      * @param longOption  The long option name.      * @param shortOption The short option name.      * @param option      The option to register.      */
DECL|method|register ( String longOption, char shortOption, Option option )
specifier|public
name|void
name|register
parameter_list|(
name|String
name|longOption
parameter_list|,
name|char
name|shortOption
parameter_list|,
name|Option
name|option
parameter_list|)
block|{
name|generalModule
operator|.
name|register
argument_list|(
name|longOption
argument_list|,
name|shortOption
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register an option into the repository both as a short and long option.      * Initialize its description with the description passed.      *      * @param longOption  The long option name.      * @param shortOption The short option name.      * @param description The description of the option.      * @param option      The option to register.      */
DECL|method|register ( String longOption, char shortOption, String description, Option option )
specifier|public
name|void
name|register
parameter_list|(
name|String
name|longOption
parameter_list|,
name|char
name|shortOption
parameter_list|,
name|String
name|description
parameter_list|,
name|Option
name|option
parameter_list|)
block|{
name|generalModule
operator|.
name|register
argument_list|(
name|longOption
argument_list|,
name|shortOption
argument_list|,
name|description
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register an option into the repository both as a short and long option.      * Initialize its description with the description passed.      *      * @param longOption  The long option name.      * @param shortOption The short option name.      * @param description The description of the option.      * @param option      The option to register.      * @param deprecated  A boolean indicating whether an option should      *                    be deprecated.      */
DECL|method|register ( String longOption, char shortOption, String description, Option option, boolean deprecated )
specifier|public
name|void
name|register
parameter_list|(
name|String
name|longOption
parameter_list|,
name|char
name|shortOption
parameter_list|,
name|String
name|description
parameter_list|,
name|Option
name|option
parameter_list|,
name|boolean
name|deprecated
parameter_list|)
block|{
name|generalModule
operator|.
name|register
argument_list|(
name|longOption
argument_list|,
name|shortOption
argument_list|,
name|description
argument_list|,
name|option
argument_list|,
name|deprecated
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register an option module based on its name.      *      * @param module The option module to register.      */
DECL|method|register ( OptionModule module )
specifier|public
name|void
name|register
parameter_list|(
name|OptionModule
name|module
parameter_list|)
block|{
name|register
argument_list|(
name|module
operator|.
name|getName
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register an option module and associate it with the name passed.      *      * @param name   The name associated with the option module.      * @param module The option module to register.      */
DECL|method|register ( String name, OptionModule module )
specifier|public
name|void
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|OptionModule
name|module
parameter_list|)
block|{
name|modules
operator|.
name|put
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process a string of values representing the invoked options. After      * all the options are processed, any leftover arguments are returned.      *      * @param args The arguments to process.      *      * @return The leftover arguments.      */
DECL|method|process ( String args[] )
specifier|public
name|String
index|[]
name|process
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|String
index|[]
name|retval
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|retval
operator|=
name|processOptions
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OptionException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**         catch ( Exception e ) {             System.err.println( "Error: Unexpected Error in ritopt Processing." +                                 "Check syntax." );                                 }**/
return|return
name|retval
return|;
block|}
comment|/**      * Retrieves an option module based on the name passed.      *      * @param name The name referring to the option module.      *      * @return The option module. Null is returned if the module does not      *         exist.      */
DECL|method|getModule ( String name )
specifier|public
name|OptionModule
name|getModule
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|OptionModule
operator|)
name|modules
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a boolean indicating whether an option module exists.      *      * @param name The name referring to the option module.      *      * @return A boolean value indicating whether the module exists.      */
DECL|method|moduleExists ( String name )
specifier|public
name|boolean
name|moduleExists
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getModule
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Receives NotifyOption events. If the event command equals "help"      * or "version", the appropriate display methods are invoked.      *      * @param event         The event object containing information about the      *                      invocation.      */
DECL|method|optionInvoked ( OptionEvent event )
specifier|public
name|void
name|optionInvoked
parameter_list|(
name|OptionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
name|displayHelp
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
name|displayVersion
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Process a string representing the invoked options. This string      * gets split according to how they would be split when passed to      * a main method. The split array of options gets passed to a      * private method for processing. After all the options are processed,      * any leftover arguments are returned.      *      * @param str The arguments to process.      *      * @return The leftover arguments.      */
DECL|method|process ( String str )
specifier|public
name|String
index|[]
name|process
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|split
argument_list|(
name|str
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Splits a string representing command line arguments into several      * strings.      *      * @param split   The string to split.      *      * @return  The splitted string.      */
DECL|method|split ( String str )
specifier|public
name|String
index|[]
name|split
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
name|str
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|List
name|l
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|()
decl_stmt|;
name|int
name|scnt
init|=
name|Utility
operator|.
name|count
argument_list|(
name|str
argument_list|,
literal|'"'
argument_list|)
decl_stmt|;
name|boolean
name|q
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|double
operator|)
name|scnt
operator|)
operator|/
literal|2.0
operator|!=
call|(
name|double
call|)
argument_list|(
name|scnt
operator|/
literal|2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OptionProcessingException
argument_list|(
literal|"Expecting an end quote."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|n
operator|++
control|)
block|{
if|if
condition|(
name|str
operator|.
name|charAt
argument_list|(
name|n
argument_list|)
operator|==
literal|'"'
condition|)
block|{
name|q
operator|=
operator|!
name|q
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|str
operator|.
name|charAt
argument_list|(
name|n
argument_list|)
operator|==
literal|' '
operator|&&
operator|!
name|q
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|StringBuffer
argument_list|(
name|str
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|it
init|=
name|l
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|retval
index|[]
init|=
operator|new
name|String
index|[
name|l
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|retval
index|[
name|n
operator|++
index|]
operator|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Writes all options and their modules out to an options file.      *      * @param filename  The options filename to write.      */
DECL|method|writeOptionFile ( String filename )
specifier|public
name|void
name|writeOptionFile
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|BufferedOutputStream
name|writer
init|=
literal|null
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
name|Iterator
name|it
init|=
literal|null
decl_stmt|;
name|currentModule
operator|=
name|generalModule
expr_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|generalModule
operator|.
name|writeFileToPrintStream
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|it
operator|=
name|modules
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OptionModule
name|module
init|=
operator|(
name|OptionModule
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|module
operator|.
name|writeFileToPrintStream
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OptionProcessingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OptionProcessingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Loads all options and their modules from an options file.      *      * @param filename  The options filename to write.      */
DECL|method|loadOptionFile ( String filename )
specifier|public
name|void
name|loadOptionFile
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
name|currentModule
operator|=
name|generalModule
expr_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|Utility
operator|.
name|stripComments
argument_list|(
name|line
argument_list|,
literal|'\"'
argument_list|,
literal|';'
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OptionProcessingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OptionProcessingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Processes an array of strings representing command line arguments.      *      * @param  The arguments to process.      *      * @return The leftover arguments.      */
DECL|method|processOptions ( String args[] )
specifier|private
name|String
index|[]
name|processOptions
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|String
name|retval
index|[]
init|=
literal|null
decl_stmt|;
name|String
name|moduleName
init|=
literal|"general"
decl_stmt|;
name|String
name|optionFile
init|=
literal|""
decl_stmt|;
name|char
name|shortOption
init|=
literal|'\0'
decl_stmt|;
name|String
name|longOption
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|args
operator|.
name|length
operator|&&
name|retval
operator|==
literal|null
condition|;
name|n
operator|++
control|)
block|{
name|boolean
name|moduleInvoked
init|=
literal|false
decl_stmt|;
name|boolean
name|shortOptionInvoked
init|=
literal|false
decl_stmt|;
name|boolean
name|longOptionInvoked
init|=
literal|false
decl_stmt|;
name|boolean
name|readOptionFileInvoked
init|=
literal|false
decl_stmt|;
name|boolean
name|writeOptionFileInvoked
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|args
index|[
name|n
index|]
operator|.
name|length
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|char
name|fc
init|=
name|args
index|[
name|n
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|moduleInvoked
operator|=
name|fc
operator|==
literal|':'
expr_stmt|;
name|readOptionFileInvoked
operator|=
name|fc
operator|==
literal|'@'
expr_stmt|;
name|writeOptionFileInvoked
operator|=
name|fc
operator|==
literal|'%'
expr_stmt|;
block|}
if|if
condition|(
name|args
index|[
name|n
index|]
operator|.
name|length
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|String
name|s
init|=
name|args
index|[
name|n
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|shortOptionInvoked
operator|=
operator|(
operator|!
name|s
operator|.
name|equals
argument_list|(
literal|"--"
argument_list|)
operator|&&
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
operator|)
expr_stmt|;
name|longOptionInvoked
operator|=
operator|(
name|s
operator|.
name|equals
argument_list|(
literal|"--"
argument_list|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|debugFlag
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Short Option: "
operator|+
name|shortOptionInvoked
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Long Option: "
operator|+
name|longOptionInvoked
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Module: "
operator|+
name|moduleInvoked
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Load Option File: "
operator|+
name|readOptionFileInvoked
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Write Option File: "
operator|+
name|writeOptionFileInvoked
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|moduleInvoked
condition|)
block|{
if|if
condition|(
name|args
index|[
name|n
index|]
operator|.
name|charAt
argument_list|(
name|args
index|[
name|n
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|':'
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|args
index|[
name|n
index|]
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OptionProcessingException
argument_list|(
literal|"Module arguments must start"
operator|+
literal|" with : and end with :."
argument_list|)
throw|;
block|}
else|else
block|{
name|moduleName
operator|=
name|args
index|[
name|n
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|args
index|[
name|n
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|moduleName
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|moduleName
operator|.
name|equals
argument_list|(
literal|"general"
argument_list|)
condition|)
block|{
name|moduleName
operator|=
literal|"general"
expr_stmt|;
name|currentModule
operator|=
name|generalModule
expr_stmt|;
block|}
else|else
block|{
name|currentModule
operator|=
name|getModule
argument_list|(
name|moduleName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentModule
operator|==
literal|null
condition|)
throw|throw
operator|new
name|OptionProcessingException
argument_list|(
literal|"Module '"
operator|+
name|moduleName
operator|+
literal|"' does not exist."
argument_list|)
throw|;
if|if
condition|(
name|debugFlag
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Module: "
operator|+
name|moduleName
argument_list|)
expr_stmt|;
block|}
block|}
name|moduleInvoked
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readOptionFileInvoked
condition|)
block|{
name|optionFile
operator|=
name|Utility
operator|.
name|trim
argument_list|(
name|args
index|[
name|n
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionFile
operator|.
name|equals
argument_list|(
literal|"@"
argument_list|)
operator|||
name|optionFile
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|optionFile
operator|=
name|defaultOptionFilename
expr_stmt|;
if|if
condition|(
name|debugFlag
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Option file: '"
operator|+
name|optionFile
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|loadOptionFile
argument_list|(
name|optionFile
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shortOptionInvoked
condition|)
block|{
name|shortOption
operator|=
name|args
index|[
name|n
index|]
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Utility
operator|.
name|isAlphaNumeric
argument_list|(
name|shortOption
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OptionProcessingException
argument_list|(
literal|"A short option must be alphanumeric. -"
operator|+
name|shortOption
operator|+
literal|" is not acceptable."
argument_list|)
throw|;
block|}
if|if
condition|(
name|debugFlag
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Short option text: "
operator|+
name|shortOption
argument_list|)
expr_stmt|;
block|}
name|char
name|delim
init|=
operator|(
name|args
index|[
name|n
index|]
operator|.
name|length
argument_list|()
operator|>=
literal|3
operator|)
condition|?
name|args
index|[
name|n
index|]
operator|.
name|charAt
argument_list|(
literal|2
argument_list|)
else|:
literal|'\0'
decl_stmt|;
if|if
condition|(
name|delim
operator|==
literal|'+'
operator|||
name|delim
operator|==
literal|'-'
condition|)
block|{
name|currentModule
operator|.
name|action
argument_list|(
name|shortOption
argument_list|,
name|delim
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delim
operator|==
literal|'='
condition|)
block|{
name|currentModule
operator|.
name|action
argument_list|(
name|shortOption
argument_list|,
name|args
index|[
name|n
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delim
operator|==
literal|'\0'
condition|)
block|{
name|String
name|dtext
init|=
literal|"+"
decl_stmt|;
name|char
name|dpeek
init|=
literal|'\0'
decl_stmt|;
if|if
condition|(
name|n
operator|<
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|dpeek
operator|=
name|args
index|[
name|n
operator|+
literal|1
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Utility
operator|.
name|contains
argument_list|(
name|args
index|[
name|n
operator|+
literal|1
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"-[@"
argument_list|)
condition|)
block|{
name|dtext
operator|=
name|args
index|[
name|n
operator|+
literal|1
index|]
expr_stmt|;
name|n
operator|++
expr_stmt|;
block|}
block|}
name|currentModule
operator|.
name|action
argument_list|(
name|shortOption
argument_list|,
name|dtext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Utility
operator|.
name|isAlphaNumeric
argument_list|(
name|delim
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|args
index|[
name|n
index|]
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|Utility
operator|.
name|isAlphaNumeric
argument_list|(
name|args
index|[
name|n
index|]
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
name|currentModule
operator|.
name|action
argument_list|(
name|shortOption
argument_list|,
literal|"+"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|OptionProcessingException
argument_list|(
literal|"A short option must be alphanumeric. -"
operator|+
name|shortOption
operator|+
literal|" is not acceptable."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|longOptionInvoked
condition|)
block|{
name|char
name|lastchar
init|=
name|args
index|[
name|n
index|]
operator|.
name|charAt
argument_list|(
name|args
index|[
name|n
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|eqindex
init|=
name|args
index|[
name|n
index|]
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|eqindex
operator|!=
operator|-
literal|1
condition|)
block|{
name|longOption
operator|=
name|args
index|[
name|n
index|]
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|eqindex
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|args
index|[
name|n
index|]
operator|.
name|substring
argument_list|(
name|eqindex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|currentModule
operator|.
name|action
argument_list|(
name|longOption
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Utility
operator|.
name|contains
argument_list|(
name|lastchar
argument_list|,
literal|"+-"
argument_list|)
condition|)
block|{
name|longOption
operator|=
name|args
index|[
name|n
index|]
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|args
index|[
name|n
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|currentModule
operator|.
name|action
argument_list|(
name|longOption
argument_list|,
name|lastchar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|longOption
operator|=
name|args
index|[
name|n
index|]
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|String
name|dtext
init|=
literal|"+"
decl_stmt|;
name|char
name|dpeek
init|=
literal|'\0'
decl_stmt|;
if|if
condition|(
name|n
operator|<
name|args
operator|.
name|length
operator|-
literal|1
operator|&&
name|args
index|[
name|n
operator|+
literal|1
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dpeek
operator|=
name|args
index|[
name|n
operator|+
literal|1
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Utility
operator|.
name|contains
argument_list|(
name|args
index|[
name|n
operator|+
literal|1
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"-[@"
argument_list|)
condition|)
block|{
name|dtext
operator|=
name|args
index|[
name|n
operator|+
literal|1
index|]
expr_stmt|;
name|n
operator|++
expr_stmt|;
block|}
block|}
name|currentModule
operator|.
name|action
argument_list|(
name|longOption
argument_list|,
name|dtext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|debugFlag
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"long option: "
operator|+
name|longOption
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|writeOptionFileInvoked
condition|)
block|{
name|optionFile
operator|=
name|Utility
operator|.
name|trim
argument_list|(
name|args
index|[
name|n
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionFile
operator|.
name|equals
argument_list|(
literal|"%"
argument_list|)
operator|||
name|optionFile
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|optionFile
operator|=
name|defaultOptionFilename
expr_stmt|;
if|if
condition|(
name|debugFlag
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Option file: '"
operator|+
name|optionFile
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|writeOptionFile
argument_list|(
name|optionFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
name|n
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|n
init|;
name|j
operator|<
name|args
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|retval
index|[
name|j
operator|-
name|n
index|]
operator|=
name|args
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
name|retval
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

