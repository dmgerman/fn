begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.sql
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|AllEntriesGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|GroupHierarchyType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|KeywordGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
operator|.
name|exporter
operator|.
name|DatabaseExporter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
operator|.
name|importer
operator|.
name|DBImporterResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
operator|.
name|importer
operator|.
name|DatabaseImporter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|support
operator|.
name|DevEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|DatabaseImportExportTests
specifier|public
class|class
name|DatabaseImportExportTests
block|{
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|EntryTypes
operator|.
name|removeAllCustomEntryTypes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExportToMySQLSingleEntry ()
specifier|public
name|void
name|testExportToMySQLSingleEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|DevEnvironment
operator|.
name|isCIServer
argument_list|()
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|databaseContext
init|=
name|createContextWithSingleEntry
argument_list|()
decl_stmt|;
name|DatabaseType
name|databaseType
init|=
name|DatabaseType
operator|.
name|MYSQL
decl_stmt|;
name|String
name|databaseName
init|=
literal|"jabref"
decl_stmt|;
name|DBStrings
name|strings
init|=
operator|new
name|DBStrings
argument_list|()
decl_stmt|;
name|strings
operator|.
name|setPassword
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|strings
operator|.
name|setDbPreferences
argument_list|(
operator|new
name|DBStringsPreferences
argument_list|(
literal|"mysql"
argument_list|,
literal|"localhost"
argument_list|,
literal|"root"
argument_list|,
literal|"jabref"
argument_list|)
argument_list|)
expr_stmt|;
name|testDatabaseExport
argument_list|(
name|databaseContext
argument_list|,
name|databaseType
argument_list|,
name|databaseName
argument_list|,
name|strings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExportToMySQLSingleEntryUsingQuoteSymbol ()
specifier|public
name|void
name|testExportToMySQLSingleEntryUsingQuoteSymbol
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|DevEnvironment
operator|.
name|isCIServer
argument_list|()
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|databaseContext
init|=
name|createContextWithSingleEntryUsingQuoteSymbol
argument_list|()
decl_stmt|;
name|DatabaseType
name|databaseType
init|=
name|DatabaseType
operator|.
name|MYSQL
decl_stmt|;
name|String
name|databaseName
init|=
literal|"jabref"
decl_stmt|;
name|DBStrings
name|strings
init|=
operator|new
name|DBStrings
argument_list|()
decl_stmt|;
name|strings
operator|.
name|setPassword
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|strings
operator|.
name|setDbPreferences
argument_list|(
operator|new
name|DBStringsPreferences
argument_list|(
literal|"mysql"
argument_list|,
literal|"localhost"
argument_list|,
literal|"root"
argument_list|,
literal|"jabref"
argument_list|)
argument_list|)
expr_stmt|;
name|testDatabaseExport
argument_list|(
name|databaseContext
argument_list|,
name|databaseType
argument_list|,
name|databaseName
argument_list|,
name|strings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExportToMySQLSingleEntrySingleGroup ()
specifier|public
name|void
name|testExportToMySQLSingleEntrySingleGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|DevEnvironment
operator|.
name|isCIServer
argument_list|()
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|databaseContext
init|=
name|createContextWithSingleEntrySingleGroup
argument_list|()
decl_stmt|;
name|DatabaseType
name|databaseType
init|=
name|DatabaseType
operator|.
name|MYSQL
decl_stmt|;
name|String
name|databaseName
init|=
literal|"jabref"
decl_stmt|;
name|DBStrings
name|strings
init|=
operator|new
name|DBStrings
argument_list|()
decl_stmt|;
name|strings
operator|.
name|setPassword
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|strings
operator|.
name|setDbPreferences
argument_list|(
operator|new
name|DBStringsPreferences
argument_list|(
literal|"mysql"
argument_list|,
literal|"localhost"
argument_list|,
literal|"root"
argument_list|,
literal|"jabref"
argument_list|)
argument_list|)
expr_stmt|;
name|testDatabaseExport
argument_list|(
name|databaseContext
argument_list|,
name|databaseType
argument_list|,
name|databaseName
argument_list|,
name|strings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExportToPostgresSingleEntry ()
specifier|public
name|void
name|testExportToPostgresSingleEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|DevEnvironment
operator|.
name|isCIServer
argument_list|()
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|databaseContext
init|=
name|createContextWithSingleEntry
argument_list|()
decl_stmt|;
name|DatabaseType
name|databaseType
init|=
name|DatabaseType
operator|.
name|POSTGRESQL
decl_stmt|;
name|String
name|databaseName
init|=
literal|"jabref"
decl_stmt|;
name|DBStrings
name|strings
init|=
operator|new
name|DBStrings
argument_list|()
decl_stmt|;
name|strings
operator|.
name|setPassword
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|strings
operator|.
name|setDbPreferences
argument_list|(
operator|new
name|DBStringsPreferences
argument_list|(
literal|"postgresql"
argument_list|,
literal|"localhost"
argument_list|,
literal|"postgres"
argument_list|,
literal|"jabref"
argument_list|)
argument_list|)
expr_stmt|;
name|testDatabaseExport
argument_list|(
name|databaseContext
argument_list|,
name|databaseType
argument_list|,
name|databaseName
argument_list|,
name|strings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExportToPostgresSingleEntryUsingQuoteSymbol ()
specifier|public
name|void
name|testExportToPostgresSingleEntryUsingQuoteSymbol
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|DevEnvironment
operator|.
name|isCIServer
argument_list|()
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|databaseContext
init|=
name|createContextWithSingleEntryUsingQuoteSymbol
argument_list|()
decl_stmt|;
name|DatabaseType
name|databaseType
init|=
name|DatabaseType
operator|.
name|POSTGRESQL
decl_stmt|;
name|String
name|databaseName
init|=
literal|"jabref"
decl_stmt|;
name|DBStrings
name|strings
init|=
operator|new
name|DBStrings
argument_list|()
decl_stmt|;
name|strings
operator|.
name|setPassword
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|strings
operator|.
name|setDbPreferences
argument_list|(
operator|new
name|DBStringsPreferences
argument_list|(
literal|"postgresql"
argument_list|,
literal|"localhost"
argument_list|,
literal|"postgres"
argument_list|,
literal|"jabref"
argument_list|)
argument_list|)
expr_stmt|;
name|testDatabaseExport
argument_list|(
name|databaseContext
argument_list|,
name|databaseType
argument_list|,
name|databaseName
argument_list|,
name|strings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExportToPostgresSingleEntrySingleGroup ()
specifier|public
name|void
name|testExportToPostgresSingleEntrySingleGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|DevEnvironment
operator|.
name|isCIServer
argument_list|()
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|databaseContext
init|=
name|createContextWithSingleEntrySingleGroup
argument_list|()
decl_stmt|;
name|DatabaseType
name|databaseType
init|=
name|DatabaseType
operator|.
name|POSTGRESQL
decl_stmt|;
name|String
name|databaseName
init|=
literal|"jabref"
decl_stmt|;
name|DBStrings
name|strings
init|=
operator|new
name|DBStrings
argument_list|()
decl_stmt|;
name|strings
operator|.
name|setPassword
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|strings
operator|.
name|setDbPreferences
argument_list|(
operator|new
name|DBStringsPreferences
argument_list|(
literal|"postgresql"
argument_list|,
literal|"localhost"
argument_list|,
literal|"postgres"
argument_list|,
literal|"jabref"
argument_list|)
argument_list|)
expr_stmt|;
name|testDatabaseExport
argument_list|(
name|databaseContext
argument_list|,
name|databaseType
argument_list|,
name|databaseName
argument_list|,
name|strings
argument_list|)
expr_stmt|;
block|}
DECL|method|testDatabaseExport (BibDatabaseContext databaseContext, DatabaseType databaseType, String databaseName, DBStrings strings)
specifier|private
name|void
name|testDatabaseExport
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|DatabaseType
name|databaseType
parameter_list|,
name|String
name|databaseName
parameter_list|,
name|DBStrings
name|strings
parameter_list|)
throws|throws
name|Exception
block|{
name|DatabaseExporter
name|db
init|=
operator|new
name|DBExporterAndImporterFactory
argument_list|()
operator|.
name|getExporter
argument_list|(
name|databaseType
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|db
operator|.
name|connectToDB
argument_list|(
name|strings
argument_list|)
init|)
block|{
name|db
operator|.
name|createTables
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|DatabaseUtil
operator|.
name|removeDB
argument_list|(
name|databaseName
argument_list|,
name|connection
argument_list|,
name|databaseContext
argument_list|)
expr_stmt|;
block|}
name|DatabaseExporter
name|exporter
init|=
operator|new
name|DBExporterAndImporterFactory
argument_list|()
operator|.
name|getExporter
argument_list|(
name|databaseType
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|exporter
operator|.
name|connectToDB
argument_list|(
name|strings
argument_list|)
init|)
block|{
name|exporter
operator|.
name|createTables
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|exporter
operator|.
name|performExport
argument_list|(
name|databaseContext
argument_list|,
name|databaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|,
name|connection
argument_list|,
name|databaseName
argument_list|)
expr_stmt|;
block|}
name|DatabaseImporter
name|importer
init|=
operator|new
name|DBExporterAndImporterFactory
argument_list|()
operator|.
name|getImporter
argument_list|(
name|databaseType
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|importer
operator|.
name|connectToDB
argument_list|(
name|strings
argument_list|)
init|)
block|{
name|List
argument_list|<
name|DBImporterResult
argument_list|>
name|results
init|=
name|importer
operator|.
name|performImport
argument_list|(
name|strings
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|databaseName
argument_list|)
argument_list|,
name|databaseContext
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|databaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatabaseContext
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|databaseContext
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createContextWithSingleEntry ()
specifier|private
name|BibDatabaseContext
name|createContextWithSingleEntry
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|(
literal|"id1"
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"einstein"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Albert Einstein"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Die grundlage der allgemeinen relativitÃ¤tstheorie}"
argument_list|)
expr_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|databaseContext
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|)
decl_stmt|;
return|return
name|databaseContext
return|;
block|}
DECL|method|createContextWithSingleEntryUsingQuoteSymbol ()
specifier|private
name|BibDatabaseContext
name|createContextWithSingleEntryUsingQuoteSymbol
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|(
literal|"id1"
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"einstein"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Albert L{\\'{u}}cia Einstein"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Die grundlage der allgemeinen relativitÃ¤tstheorie}"
argument_list|)
expr_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|databaseContext
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|)
decl_stmt|;
return|return
name|databaseContext
return|;
block|}
DECL|method|createContextWithSingleEntrySingleGroup ()
specifier|private
name|BibDatabaseContext
name|createContextWithSingleEntrySingleGroup
parameter_list|()
block|{
name|BibDatabaseContext
name|databaseContext
init|=
name|createContextWithSingleEntry
argument_list|()
decl_stmt|;
name|GroupTreeNode
name|root
init|=
operator|new
name|GroupTreeNode
argument_list|(
operator|new
name|AllEntriesGroup
argument_list|()
argument_list|)
decl_stmt|;
name|KeywordGroup
name|group
init|=
operator|new
name|KeywordGroup
argument_list|(
literal|"test"
argument_list|,
literal|"asdf"
argument_list|,
literal|"fdas"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|)
decl_stmt|;
name|root
operator|.
name|addSubgroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|databaseContext
operator|.
name|getMetaData
argument_list|()
operator|.
name|setGroups
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
name|databaseContext
return|;
block|}
block|}
end_class

end_unit

