begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|LocalizationTest
specifier|public
class|class
name|LocalizationTest
block|{
annotation|@
name|Test
DECL|method|findMissingLocalizationKeys ()
specifier|public
name|void
name|findMissingLocalizationKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"source code contains language keys for the messages which are not in the corresponding properties file"
argument_list|,
literal|""
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|"\n\n"
argument_list|,
name|LocalizationParser
operator|.
name|find
argument_list|(
name|LocalizationParser
operator|.
name|Type
operator|.
name|LANG
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findMissingMenuLocalizationKeys ()
specifier|public
name|void
name|findMissingMenuLocalizationKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"source code contains language keys for the menu which are not in the corresponding properties file"
argument_list|,
literal|""
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|"\n\n"
argument_list|,
name|LocalizationParser
operator|.
name|find
argument_list|(
name|LocalizationParser
operator|.
name|Type
operator|.
name|MENU
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParsingCode ()
specifier|public
name|void
name|testParsingCode
parameter_list|()
block|{
name|String
name|code
init|=
literal|""
operator|+
literal|"Localization.lang(\"one per line\")"
operator|+
literal|"Localization.lang(\"two per line\") Localization.lang(\"two per line\")"
operator|+
literal|"Localization.lang(\"multi \" + \n"
operator|+
literal|"\"line\")"
operator|+
literal|"Localization.lang(\"one per line with var\", var)"
operator|+
literal|"Localization.lang(\"Search %0\", \"Springer\")"
operator|+
literal|"Localization.lang(\"Reset preferences (key1,key2,... or 'all')\")"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedLanguageKeys
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one_per_line"
argument_list|,
literal|"two_per_line"
argument_list|,
literal|"two_per_line"
argument_list|,
literal|"multi_line"
argument_list|,
literal|"one_per_line_with_var"
argument_list|,
literal|"Search_%0"
argument_list|,
literal|"Reset_preferences_(key1,key2,..._or_'all')"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLanguageKeys
argument_list|,
name|LocalizationParser
operator|.
name|getLanguageKeysInString
argument_list|(
name|code
argument_list|,
name|LocalizationParser
operator|.
name|Type
operator|.
name|LANG
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|LocalizationParser
specifier|private
specifier|static
class|class
name|LocalizationParser
block|{
DECL|enum|Type
specifier|private
specifier|static
enum|enum
name|Type
block|{
DECL|enumConstant|LANG
DECL|enumConstant|MENU
name|LANG
block|,
name|MENU
block|}
DECL|method|find (Type type)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|find
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keysInJavaFiles
init|=
name|Files
operator|.
name|walk
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/main"
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|LocalizationParser
operator|::
name|isJavaFile
argument_list|)
operator|.
name|flatMap
argument_list|(
name|p
lambda|->
name|getLanguageKeysInJavaFile
argument_list|(
name|p
argument_list|,
name|type
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|LANG
condition|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|LocalizationTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/l10n/JabRef_en.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|load
argument_list|(
name|LocalizationTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/l10n/Menu_en.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|englishKeys
init|=
name|properties
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|map
argument_list|(
name|Object
operator|::
name|toString
argument_list|)
operator|.
name|map
argument_list|(
name|String
operator|::
name|trim
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|missingKeys
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|keysInJavaFiles
argument_list|)
decl_stmt|;
name|missingKeys
operator|.
name|removeAll
argument_list|(
name|englishKeys
argument_list|)
expr_stmt|;
return|return
name|missingKeys
return|;
block|}
DECL|method|isJavaFile (Path path)
specifier|private
specifier|static
name|boolean
name|isJavaFile
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".java"
argument_list|)
return|;
block|}
DECL|field|INFINITE_WHITESPACE
specifier|private
specifier|static
specifier|final
name|String
name|INFINITE_WHITESPACE
init|=
literal|"\\s*"
decl_stmt|;
DECL|field|DOT
specifier|private
specifier|static
specifier|final
name|String
name|DOT
init|=
literal|"\\."
decl_stmt|;
DECL|field|LOCALIZATION_START_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|LOCALIZATION_START_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Localization"
operator|+
name|INFINITE_WHITESPACE
operator|+
name|DOT
operator|+
name|INFINITE_WHITESPACE
operator|+
literal|"lang"
operator|+
name|INFINITE_WHITESPACE
operator|+
literal|"\\("
argument_list|)
decl_stmt|;
DECL|field|LOCALIZATION_MENU_START_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|LOCALIZATION_MENU_START_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Localization"
operator|+
name|INFINITE_WHITESPACE
operator|+
name|DOT
operator|+
name|INFINITE_WHITESPACE
operator|+
literal|"menuTitle"
operator|+
name|INFINITE_WHITESPACE
operator|+
literal|"\\("
argument_list|)
decl_stmt|;
DECL|field|ESCAPED_QUOTATION_SYMBOL
specifier|private
specifier|static
specifier|final
name|Pattern
name|ESCAPED_QUOTATION_SYMBOL
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\\""
argument_list|)
decl_stmt|;
DECL|field|QUOTATION_SYMBOL
specifier|private
specifier|static
specifier|final
name|Pattern
name|QUOTATION_SYMBOL
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"QUOTATIONPLACEHOLDER"
argument_list|)
decl_stmt|;
DECL|method|getLanguageKeysInJavaFile (Path path, Type type)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getLanguageKeysInJavaFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|content
init|=
name|String
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|Files
operator|.
name|readAllLines
argument_list|(
name|path
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|getLanguageKeysInString
argument_list|(
name|content
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{
name|ignore
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getLanguageKeysInString (String content, Type type)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getLanguageKeysInString
parameter_list|(
name|String
name|content
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|LANG
condition|)
block|{
name|matcher
operator|=
name|LOCALIZATION_START_PATTERN
operator|.
name|matcher
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matcher
operator|=
name|LOCALIZATION_MENU_START_PATTERN
operator|.
name|matcher
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
comment|// find contents between the brackets, covering multi-line strings as well
name|int
name|index
init|=
name|matcher
operator|.
name|end
argument_list|()
decl_stmt|;
name|int
name|brackets
init|=
literal|1
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|brackets
operator|!=
literal|0
condition|)
block|{
name|char
name|c
init|=
name|content
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'('
condition|)
block|{
name|brackets
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|')'
condition|)
block|{
name|brackets
operator|--
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
name|String
name|parsedContentsOfLangMethod
init|=
name|ESCAPED_QUOTATION_SYMBOL
operator|.
name|matcher
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"QUOTATIONPLACEHOLDER"
argument_list|)
decl_stmt|;
comment|// only retain what is within quotation
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|quotations
init|=
literal|0
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|parsedContentsOfLangMethod
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|==
literal|'"'
operator|&&
name|quotations
operator|>
literal|0
condition|)
block|{
name|quotations
operator|--
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'"'
condition|)
block|{
name|quotations
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|quotations
operator|!=
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|c
operator|==
literal|','
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
name|String
name|languageKey
init|=
name|QUOTATION_SYMBOL
operator|.
name|matcher
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\\""
argument_list|)
decl_stmt|;
comment|// escape chars which are not allowed in property file keys
name|String
name|languagePropertyKey
init|=
name|languageKey
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"="
argument_list|,
literal|"\\="
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|":"
argument_list|,
literal|"\\:"
argument_list|)
decl_stmt|;
if|if
condition|(
name|languagePropertyKey
operator|.
name|endsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Key "
operator|+
name|languageKey
operator|+
literal|" ends with a space"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|languagePropertyKey
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|languagePropertyKey
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

