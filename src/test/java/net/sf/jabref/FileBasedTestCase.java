begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * A base class for Testing in JabRef that comes along with some useful  * functions.  */
end_comment

begin_class
DECL|class|FileBasedTestCase
specifier|public
class|class
name|FileBasedTestCase
block|{
DECL|field|database
specifier|protected
name|BibDatabase
name|database
decl_stmt|;
DECL|field|entry
specifier|protected
name|BibEntry
name|entry
decl_stmt|;
DECL|field|root
specifier|protected
name|File
name|root
decl_stmt|;
DECL|field|oldPdfDirectory
specifier|private
name|String
name|oldPdfDirectory
decl_stmt|;
DECL|field|oldUseRegExp
specifier|private
name|boolean
name|oldUseRegExp
decl_stmt|;
DECL|field|oldAutoLinkExcatKeyOnly
specifier|private
name|boolean
name|oldAutoLinkExcatKeyOnly
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|oldUseRegExp
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOLINK_USE_REG_EXP_SEARCH_KEY
argument_list|)
expr_stmt|;
name|oldAutoLinkExcatKeyOnly
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOLINK_EXACT_KEY_ONLY
argument_list|)
expr_stmt|;
name|oldPdfDirectory
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"pdfDirectory"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOLINK_USE_REG_EXP_SEARCH_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOLINK_EXACT_KEY_ONLY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|database
operator|=
name|BibtexTestData
operator|.
name|getBibtexDatabase
argument_list|()
expr_stmt|;
name|entry
operator|=
name|database
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// Create file structure
try|try
block|{
name|root
operator|=
name|FileBasedTestHelper
operator|.
name|createTempDir
argument_list|(
literal|"UtilFindFileTest"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
literal|"pdfDirectory"
argument_list|,
name|root
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|subDir1
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"Organization Science"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|subDir1
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|pdf1
init|=
operator|new
name|File
argument_list|(
name|subDir1
argument_list|,
literal|"HipKro03 - Hello.pdf"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pdf1
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|pdf1a
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"HipKro03 - Hello.pdf"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pdf1a
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|subDir2
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"pdfs"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|subDir2
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|subsubDir1
init|=
operator|new
name|File
argument_list|(
name|subDir2
argument_list|,
literal|"sub"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|subsubDir1
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|pdf2
init|=
operator|new
name|File
argument_list|(
name|subsubDir1
argument_list|,
literal|"HipKro03-sub.pdf"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pdf2
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|dir2002
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"2002"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dir2002
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|dir2003
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"2003"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dir2003
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|pdf3
init|=
operator|new
name|File
argument_list|(
name|dir2003
argument_list|,
literal|"Paper by HipKro03.pdf"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pdf3
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|dirTest
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dirTest
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|pdf4
init|=
operator|new
name|File
argument_list|(
name|dirTest
argument_list|,
literal|"HipKro03.pdf"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pdf4
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|pdf5
init|=
operator|new
name|File
argument_list|(
name|dirTest
argument_list|,
literal|".TEST"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pdf5
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|pdf6
init|=
operator|new
name|File
argument_list|(
name|dirTest
argument_list|,
literal|"TEST["
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pdf6
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|pdf7
init|=
operator|new
name|File
argument_list|(
name|dirTest
argument_list|,
literal|"TE.ST"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pdf7
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|foo
init|=
operator|new
name|File
argument_list|(
name|dirTest
argument_list|,
literal|"foo.dat"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|foo
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|graphicsDir
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"graphicsDir"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|graphicsDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|graphicsSubDir
init|=
operator|new
name|File
argument_list|(
name|graphicsDir
argument_list|,
literal|"subDir"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|graphicsSubDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|jpg
init|=
operator|new
name|File
argument_list|(
name|graphicsSubDir
argument_list|,
literal|"HipKro03test.jpg"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jpg
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|png
init|=
operator|new
name|File
argument_list|(
name|graphicsSubDir
argument_list|,
literal|"HipKro03test.png"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|png
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|FileBasedTestHelper
operator|.
name|deleteRecursive
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOLINK_EXACT_KEY_ONLY
argument_list|,
name|oldAutoLinkExcatKeyOnly
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOLINK_USE_REG_EXP_SEARCH_KEY
argument_list|,
name|oldUseRegExp
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
literal|"pdfDirectory"
argument_list|,
name|oldPdfDirectory
argument_list|)
expr_stmt|;
comment|// TODO: This is not a great way to do this, sure ;-)
block|}
block|}
end_class

end_unit

