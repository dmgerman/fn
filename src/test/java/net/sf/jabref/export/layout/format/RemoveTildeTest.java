begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.export.layout.format
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|LayoutFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RemoveTildeTest
specifier|public
class|class
name|RemoveTildeTest
block|{
DECL|field|formatter
specifier|private
name|LayoutFormatter
name|formatter
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|formatter
operator|=
operator|new
name|RemoveTilde
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormatString ()
specifier|public
name|void
name|testFormatString
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"simple"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"simple"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|" "
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"~"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"   "
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"~~~"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|" \\~ "
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"~\\~~"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\\\\ "
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"\\\\~"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Doe Joe and Jane, M. and Kamp, J. A."
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Doe Joe and Jane, M. and Kamp, J.~A."
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"T\\~olkien, J. R. R."
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"T\\~olkien, J.~R.~R."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

