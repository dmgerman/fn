begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref.external
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
operator|.
name|NameFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|RegExpFileSearchTests
specifier|public
class|class
name|RegExpFileSearchTests
block|{
DECL|field|filesDirectory
specifier|private
specifier|static
specifier|final
name|String
name|filesDirectory
init|=
literal|"src/test/resources/net/sf/jabref/imports/unlinkedFilesTestFolder"
decl_stmt|;
DECL|field|database
specifier|private
name|BibDatabase
name|database
decl_stmt|;
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"@ARTICLE{HipKro03,"
operator|+
literal|"\n"
operator|+
literal|"  author = {Eric von Hippel and Georg von Krogh},"
operator|+
literal|"\n"
operator|+
literal|"  title = {Open Source Software and the \"Private-Collective\" Innovation Model: Issues for Organization Science},"
operator|+
literal|"\n"
operator|+
literal|"  journal = {Organization Science},"
operator|+
literal|"\n"
operator|+
literal|"  year = {2003},"
operator|+
literal|"\n"
operator|+
literal|"  volume = {14},"
operator|+
literal|"\n"
operator|+
literal|"  pages = {209--223},"
operator|+
literal|"\n"
operator|+
literal|"  number = {2},"
operator|+
literal|"\n"
operator|+
literal|"  address = {Institute for Operations Research and the Management Sciences (INFORMS), Linthicum, Maryland, USA},"
operator|+
literal|"\n"
operator|+
literal|"  doi = {http://dx.doi.org/10.1287/orsc.14.2.209.14992},"
operator|+
literal|"\n"
operator|+
literal|"  issn = {1526-5455},"
operator|+
literal|"\n"
operator|+
literal|"  publisher = {INFORMS}"
operator|+
literal|"\n"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|BibtexParser
name|parser
init|=
operator|new
name|BibtexParser
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|ParserResult
name|result
init|=
literal|null
decl_stmt|;
name|result
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|database
operator|=
name|result
operator|.
name|getDatabase
argument_list|()
expr_stmt|;
name|entry
operator|=
name|database
operator|.
name|getEntryByKey
argument_list|(
literal|"HipKro03"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindFiles ()
specifier|public
name|void
name|testFindFiles
parameter_list|()
block|{
comment|//given
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|BibEntry
name|localEntry
init|=
operator|new
name|BibEntry
argument_list|(
literal|"123"
argument_list|,
name|BibtexEntryTypes
operator|.
name|ARTICLE
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|localEntry
operator|.
name|setField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
literal|"pdfInDatabase"
argument_list|)
expr_stmt|;
name|localEntry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2001"
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|localEntry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|extensions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"pdf"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dirs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|File
argument_list|(
name|filesDirectory
argument_list|)
argument_list|)
decl_stmt|;
comment|//when
name|Map
argument_list|<
name|BibEntry
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|File
argument_list|>
argument_list|>
name|result
init|=
name|RegExpFileSearch
operator|.
name|findFilesForSet
argument_list|(
name|entries
argument_list|,
name|extensions
argument_list|,
name|dirs
argument_list|,
literal|"**/[bibtexkey].*\\\\.[extension]"
argument_list|)
decl_stmt|;
comment|//then
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFieldAndFormat ()
specifier|public
name|void
name|testFieldAndFormat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Eric von Hippel and Georg von Krogh"
argument_list|,
name|RegExpFileSearch
operator|.
name|getFieldAndFormat
argument_list|(
literal|"[author]"
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Eric von Hippel and Georg von Krogh"
argument_list|,
name|RegExpFileSearch
operator|.
name|getFieldAndFormat
argument_list|(
literal|"author"
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|RegExpFileSearch
operator|.
name|getFieldAndFormat
argument_list|(
literal|"[unknownkey]"
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|RegExpFileSearch
operator|.
name|getFieldAndFormat
argument_list|(
literal|"[:]"
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|RegExpFileSearch
operator|.
name|getFieldAndFormat
argument_list|(
literal|"[:lower]"
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"eric von hippel and georg von krogh"
argument_list|,
name|RegExpFileSearch
operator|.
name|getFieldAndFormat
argument_list|(
literal|"[author:lower]"
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HipKro03"
argument_list|,
name|RegExpFileSearch
operator|.
name|getFieldAndFormat
argument_list|(
literal|"[bibtexkey]"
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HipKro03"
argument_list|,
name|RegExpFileSearch
operator|.
name|getFieldAndFormat
argument_list|(
literal|"[bibtexkey:]"
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testUserFieldAndFormat ()
specifier|public
name|void
name|testUserFieldAndFormat
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringList
argument_list|(
name|NameFormatter
operator|.
name|NAME_FORMATER_KEY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|formats
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringList
argument_list|(
name|NameFormatter
operator|.
name|NAME_FORMATTER_VALUE
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|f
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|formats
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|n
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|n
operator|.
name|add
argument_list|(
literal|"testMe123454321"
argument_list|)
expr_stmt|;
name|f
operator|.
name|add
argument_list|(
literal|"*@*@test"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putStringList
argument_list|(
name|NameFormatter
operator|.
name|NAME_FORMATER_KEY
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putStringList
argument_list|(
name|NameFormatter
operator|.
name|NAME_FORMATTER_VALUE
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testtest"
argument_list|,
name|RegExpFileSearch
operator|.
name|getFieldAndFormat
argument_list|(
literal|"[author:testMe123454321]"
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putStringList
argument_list|(
name|NameFormatter
operator|.
name|NAME_FORMATER_KEY
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putStringList
argument_list|(
name|NameFormatter
operator|.
name|NAME_FORMATTER_VALUE
argument_list|,
name|formats
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExpandBrackets ()
specifier|public
name|void
name|testExpandBrackets
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|RegExpFileSearch
operator|.
name|expandBrackets
argument_list|(
literal|""
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dropped"
argument_list|,
name|RegExpFileSearch
operator|.
name|expandBrackets
argument_list|(
literal|"drop[unknownkey]ped"
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Eric von Hippel and Georg von Krogh"
argument_list|,
name|RegExpFileSearch
operator|.
name|expandBrackets
argument_list|(
literal|"[author]"
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Eric von Hippel and Georg von Krogh are two famous authors."
argument_list|,
name|RegExpFileSearch
operator|.
name|expandBrackets
argument_list|(
literal|"[author] are two famous authors."
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Eric von Hippel and Georg von Krogh are two famous authors."
argument_list|,
name|RegExpFileSearch
operator|.
name|expandBrackets
argument_list|(
literal|"[author] are two famous authors."
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Eric von Hippel and Georg von Krogh have published Open Source Software and the \"Private-Collective\" Innovation Model: Issues for Organization Science in Organization Science."
argument_list|,
name|RegExpFileSearch
operator|.
name|expandBrackets
argument_list|(
literal|"[author] have published [title] in [journal]."
argument_list|,
name|entry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

