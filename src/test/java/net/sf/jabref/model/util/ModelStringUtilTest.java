begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|ModelStringUtilTest
specifier|public
class|class
name|ModelStringUtilTest
block|{
annotation|@
name|Test
DECL|method|testBooleanToBinaryString ()
specifier|public
name|void
name|testBooleanToBinaryString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|ModelStringUtil
operator|.
name|booleanToBinaryString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|ModelStringUtil
operator|.
name|booleanToBinaryString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuoteSimple ()
specifier|public
name|void
name|testQuoteSimple
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"a::"
argument_list|,
name|ModelStringUtil
operator|.
name|quote
argument_list|(
literal|"a:"
argument_list|,
literal|""
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuoteNullQuotation ()
specifier|public
name|void
name|testQuoteNullQuotation
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"a::"
argument_list|,
name|ModelStringUtil
operator|.
name|quote
argument_list|(
literal|"a:"
argument_list|,
literal|null
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuoteNullString ()
specifier|public
name|void
name|testQuoteNullString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|ModelStringUtil
operator|.
name|quote
argument_list|(
literal|null
argument_list|,
literal|";"
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuoteQuotationCharacter ()
specifier|public
name|void
name|testQuoteQuotationCharacter
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"a:::;"
argument_list|,
name|ModelStringUtil
operator|.
name|quote
argument_list|(
literal|"a:;"
argument_list|,
literal|";"
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuoteMoreComplicated ()
specifier|public
name|void
name|testQuoteMoreComplicated
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"a::b:%c:;"
argument_list|,
name|ModelStringUtil
operator|.
name|quote
argument_list|(
literal|"a:b%c;"
argument_list|,
literal|"%;"
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

