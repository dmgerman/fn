begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.entry
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_class
DECL|class|YearUtilTest
specifier|public
class|class
name|YearUtilTest
block|{
annotation|@
name|Test
DECL|method|test2to4DigitsYear ()
specifier|public
name|void
name|test2to4DigitsYear
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1990"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"1990"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"190"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"190"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1990"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"90"
argument_list|,
literal|1990
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1990"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"90"
argument_list|,
literal|1991
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2020"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"20"
argument_list|,
literal|1990
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1921"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"21"
argument_list|,
literal|1990
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1922"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"22"
argument_list|,
literal|1990
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2022"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"22"
argument_list|,
literal|1992
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1999"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"99"
argument_list|,
literal|2001
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1931"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"1931"
argument_list|,
literal|2001
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2031"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"31"
argument_list|,
literal|2001
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1932"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"32"
argument_list|,
literal|2001
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1944"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"44"
argument_list|,
literal|2001
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2011"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"11"
argument_list|,
literal|2001
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2005a"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"2005a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2005b"
argument_list|,
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
literal|"2005b"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|thisYear
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|int
name|d2
init|=
name|thisYear
operator|%
literal|100
decl_stmt|;
name|NumberFormat
name|f
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"00"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|thisYear
operator|<=
name|Integer
operator|.
name|parseInt
argument_list|(
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
name|f
operator|.
name|format
argument_list|(
operator|(
name|d2
operator|+
name|i
operator|)
operator|%
literal|100
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|70
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|thisYear
operator|>=
name|Integer
operator|.
name|parseInt
argument_list|(
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
name|f
operator|.
name|format
argument_list|(
operator|(
name|d2
operator|-
name|i
operator|+
literal|100
operator|)
operator|%
literal|100
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

