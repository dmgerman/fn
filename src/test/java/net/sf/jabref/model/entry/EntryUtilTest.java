begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.entry
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|EntryUtilTest
specifier|public
class|class
name|EntryUtilTest
block|{
annotation|@
name|Test
DECL|method|testNCase ()
specifier|public
name|void
name|testNCase
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|EntryUtil
operator|.
name|capitalizeFirst
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hello world"
argument_list|,
name|EntryUtil
operator|.
name|capitalizeFirst
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|EntryUtil
operator|.
name|capitalizeFirst
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Aa"
argument_list|,
name|EntryUtil
operator|.
name|capitalizeFirst
argument_list|(
literal|"AA"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getSeparatedKeywords ()
specifier|public
name|void
name|getSeparatedKeywords
parameter_list|()
block|{
name|String
name|keywords
init|=
literal|"w1, w2a w2b, w3"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|separatedKeywords
init|=
name|EntryUtil
operator|.
name|getSeparatedKeywords
argument_list|(
name|keywords
argument_list|)
decl_stmt|;
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[]
block|{
literal|"w1"
block|,
literal|"w2a w2b"
block|,
literal|"w3"
block|}
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|separatedKeywords
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuote ()
specifier|public
name|void
name|testQuote
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"a::"
argument_list|,
name|EntryUtil
operator|.
name|quote
argument_list|(
literal|"a:"
argument_list|,
literal|""
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a::"
argument_list|,
name|EntryUtil
operator|.
name|quote
argument_list|(
literal|"a:"
argument_list|,
literal|null
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a:::;"
argument_list|,
name|EntryUtil
operator|.
name|quote
argument_list|(
literal|"a:;"
argument_list|,
literal|";"
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a::b:%c:;"
argument_list|,
name|EntryUtil
operator|.
name|quote
argument_list|(
literal|"a:b%c;"
argument_list|,
literal|"%;"
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

