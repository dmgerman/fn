begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.entry
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author Christopher Oezbek<oezi@oezi.de>  * @version 0.1 - Still fails for stuff in AuthorList that is ambiguous  * @see AuthorList Class tested.  */
end_comment

begin_class
DECL|class|AuthorListTest
specifier|public
class|class
name|AuthorListTest
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Test
DECL|method|testFixAuthorNatbib ()
specifier|public
name|void
name|testFixAuthorNatbib
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|fixAuthorNatbib
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorNatbib
argument_list|(
literal|"John Smith"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith and Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorNatbib
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann et al."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorNatbib
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Is not cached!
name|Assert
operator|.
name|assertTrue
argument_list|(
name|AuthorList
operator|.
name|fixAuthorNatbib
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|equals
argument_list|(
name|AuthorList
operator|.
name|fixAuthorNatbib
argument_list|(
literal|"John von Neumann"
operator|+
operator|(
literal|0
operator|==
literal|1
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"John Smith and Black Brown, Peter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAuthorList ()
specifier|public
name|void
name|testGetAuthorList
parameter_list|()
block|{
comment|// Test caching in authorCache.
name|AuthorList
name|al
init|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|al
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|al
operator|.
name|equals
argument_list|(
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"Smith"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Test
DECL|method|testFixAuthorFirstNameFirstCommas ()
specifier|public
name|void
name|testFixAuthorFirstNameFirstCommas
parameter_list|()
block|{
comment|// No Commas
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John Smith"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. Smith"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John Smith"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check caching
name|Assert
operator|.
name|assertTrue
argument_list|(
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|equals
argument_list|(
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John von Neumann"
operator|+
operator|(
literal|0
operator|==
literal|1
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith and Peter Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. Smith and P. Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Method description is different than code -> additional comma
comment|// there
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John von Neumann, John Smith and Peter Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. von Neumann, J. Smith and P. Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. P. von Neumann"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John Peter von Neumann"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Oxford Commas
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John Smith"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. Smith"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John Smith"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check caching
name|Assert
operator|.
name|assertTrue
argument_list|(
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|.
name|equals
argument_list|(
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John von Neumann"
operator|+
operator|(
literal|0
operator|==
literal|1
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith and Peter Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. Smith and P. Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Method description is different than code -> additional comma
comment|// there
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John von Neumann, John Smith, and Peter Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. von Neumann, J. Smith, and P. Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. P. von Neumann"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirstCommas
argument_list|(
literal|"John Peter von Neumann"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Test
DECL|method|testFixAuthorFirstNameFirst ()
specifier|public
name|void
name|testFixAuthorFirstNameFirst
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirst
argument_list|(
literal|"John Smith"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith and Peter Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirst
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John von Neumann and John Smith and Peter Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirst
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"First von Last, Jr. III"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorFirstNameFirst
argument_list|(
literal|"von Last, Jr. III, First"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check caching
name|Assert
operator|.
name|assertTrue
argument_list|(
name|AuthorList
operator|.
name|fixAuthorFirstNameFirst
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|equals
argument_list|(
name|AuthorList
operator|.
name|fixAuthorFirstNameFirst
argument_list|(
literal|"John von Neumann"
operator|+
operator|(
literal|0
operator|==
literal|1
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"John Smith and Black Brown, Peter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Test
DECL|method|testFixAuthorLastNameFirstCommasNoComma ()
specifier|public
name|void
name|testFixAuthorLastNameFirstCommasNoComma
parameter_list|()
block|{
comment|// No commas before and
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John Smith"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John Smith"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|a
init|=
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John von Neumann"
operator|+
operator|(
literal|0
operator|==
literal|1
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Check caching
name|Assert
operator|.
name|assertEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John and Black Brown, Peter"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J. and Black Brown, P."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, John, Smith, John and Black Brown, Peter"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, J., Smith, J. and Black Brown, P."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, J. P."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John Peter von Neumann"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Test
DECL|method|testFixAuthorLastNameFirstCommasOxfordComma ()
specifier|public
name|void
name|testFixAuthorLastNameFirstCommasOxfordComma
parameter_list|()
block|{
comment|// Oxford Commas
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John Smith"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John Smith"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|a
init|=
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John von Neumann"
operator|+
operator|(
literal|0
operator|==
literal|1
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Check caching
name|Assert
operator|.
name|assertEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John and Black Brown, Peter"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J. and Black Brown, P."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, John, Smith, John, and Black Brown, Peter"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, J., Smith, J., and Black Brown, P."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, J. P."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirstCommas
argument_list|(
literal|"John Peter von Neumann"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Test
DECL|method|testFixAuthorLastNameFirst ()
specifier|public
name|void
name|testFixAuthorLastNameFirst
parameter_list|()
block|{
comment|// Test helper method
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John Smith"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John and Black Brown, Peter"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, John and Smith, John and Black Brown, Peter"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Last, Jr, First"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"von Last, Jr ,First"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|equals
argument_list|(
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John von Neumann"
operator|+
operator|(
literal|0
operator|==
literal|1
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"John Smith and Black Brown, Peter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test Abbreviation == false
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John Smith"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John and Black Brown, Peter"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, John and Smith, John and Black Brown, Peter"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Last, Jr, First"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"von Last, Jr ,First"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|)
operator|.
name|equals
argument_list|(
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John von Neumann"
operator|+
operator|(
literal|0
operator|==
literal|1
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test Abbreviate == true
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John Smith"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J. and Black Brown, P."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, J. and Smith, J. and Black Brown, P."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Last, Jr, F."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"von Last, Jr ,First"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|)
operator|.
name|equals
argument_list|(
name|AuthorList
operator|.
name|fixAuthorLastNameFirst
argument_list|(
literal|"John von Neumann"
operator|+
operator|(
literal|0
operator|==
literal|1
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Test
DECL|method|testFixAuthorLastNameOnlyCommas ()
specifier|public
name|void
name|testFixAuthorLastNameOnlyCommas
parameter_list|()
block|{
comment|// No comma before and
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|"John Smith"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|"Smith, Jr, John"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|)
operator|.
name|equals
argument_list|(
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|"John von Neumann"
operator|+
operator|(
literal|0
operator|==
literal|1
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, Smith and Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Oxford Comma
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|"John Smith"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|"Smith, Jr, John"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|)
operator|.
name|equals
argument_list|(
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|"John von Neumann"
operator|+
operator|(
literal|0
operator|==
literal|1
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, Smith, and Black Brown"
argument_list|,
name|AuthorList
operator|.
name|fixAuthorLastNameOnlyCommas
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFixAuthorForAlphabetization ()
specifier|public
name|void
name|testFixAuthorForAlphabetization
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
literal|"John Smith"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Neumann, J."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
literal|"John von Neumann"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Neumann, J."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
literal|"J. von Neumann"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Neumann, J. and Smith, J. and Black Brown, Jr., P."
argument_list|,
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
literal|"John von Neumann and John Smith and de Black Brown, Jr., Peter"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|size (String bibtex)
specifier|public
specifier|static
name|int
name|size
parameter_list|(
name|String
name|bibtex
parameter_list|)
block|{
return|return
name|AuthorList
operator|.
name|parse
argument_list|(
name|bibtex
argument_list|)
operator|.
name|getNumberOfAuthors
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testSize ()
specifier|public
name|void
name|testSize
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
literal|"Foo Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
literal|"Foo von Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
literal|"von Bar, Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
literal|"Bar, Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
literal|"Bar, Jr., Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
literal|"Bar, Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
literal|"John Neumann and Foo Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
literal|"John von Neumann and Bar, Jr, Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"John von Neumann"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|AuthorListTest
operator|.
name|size
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|" and Albert Einstein"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIsEmpty ()
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|AuthorList
operator|.
name|parse
argument_list|(
literal|""
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"Bar"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Exception
operator|.
name|class
argument_list|)
DECL|method|testGetEmptyAuthor ()
specifier|public
name|void
name|testGetEmptyAuthor
parameter_list|()
block|{
name|AuthorList
operator|.
name|parse
argument_list|(
literal|""
argument_list|)
operator|.
name|getAuthor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAuthor ()
specifier|public
name|void
name|testGetAuthor
parameter_list|()
block|{
name|Author
name|author
init|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith and von Neumann, Jr, John"
argument_list|)
operator|.
name|getAuthor
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John"
argument_list|,
name|author
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J."
argument_list|,
name|author
operator|.
name|getFirstAbbr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith"
argument_list|,
name|author
operator|.
name|getFirstLast
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. Smith"
argument_list|,
name|author
operator|.
name|getFirstLast
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|author
operator|.
name|getJr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|author
operator|.
name|getLast
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John"
argument_list|,
name|author
operator|.
name|getLastFirst
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J."
argument_list|,
name|author
operator|.
name|getLastFirst
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|author
operator|.
name|getLastOnly
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J."
argument_list|,
name|author
operator|.
name|getNameForAlphabetization
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|author
operator|.
name|getVon
argument_list|()
argument_list|)
expr_stmt|;
name|author
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"Peter Black Brown"
argument_list|)
operator|.
name|getAuthor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Peter Black"
argument_list|,
name|author
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"P. B."
argument_list|,
name|author
operator|.
name|getFirstAbbr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Peter Black Brown"
argument_list|,
name|author
operator|.
name|getFirstLast
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"P. B. Brown"
argument_list|,
name|author
operator|.
name|getFirstLast
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|author
operator|.
name|getJr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|author
operator|.
name|getVon
argument_list|()
argument_list|)
expr_stmt|;
name|author
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith and von Neumann, Jr, John"
argument_list|)
operator|.
name|getAuthor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John"
argument_list|,
name|author
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J."
argument_list|,
name|author
operator|.
name|getFirstAbbr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John von Neumann, Jr"
argument_list|,
name|author
operator|.
name|getFirstLast
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. von Neumann, Jr"
argument_list|,
name|author
operator|.
name|getFirstLast
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Jr"
argument_list|,
name|author
operator|.
name|getJr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Neumann"
argument_list|,
name|author
operator|.
name|getLast
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, Jr, John"
argument_list|,
name|author
operator|.
name|getLastFirst
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, Jr, J."
argument_list|,
name|author
operator|.
name|getLastFirst
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann"
argument_list|,
name|author
operator|.
name|getLastOnly
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Neumann, Jr, J."
argument_list|,
name|author
operator|.
name|getNameForAlphabetization
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von"
argument_list|,
name|author
operator|.
name|getVon
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAuthorsNatbib ()
specifier|public
name|void
name|testGetAuthorsNatbib
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|""
argument_list|)
operator|.
name|getAsNatbib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
operator|.
name|getAsNatbib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith and Black Brown"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|getAsNatbib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann et al."
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|getAsNatbib
argument_list|()
argument_list|)
expr_stmt|;
comment|/*          * [ 1465610 ] (Double-)Names containing hyphen (-) not handled correctly          */
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Last-Name et al."
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"First Second Last-Name"
operator|+
literal|" and John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|getAsNatbib
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test caching
name|AuthorList
name|al
init|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|al
operator|.
name|getAsNatbib
argument_list|()
operator|.
name|equals
argument_list|(
name|al
operator|.
name|getAsNatbib
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAuthorsLastOnly ()
specifier|public
name|void
name|testGetAuthorsLastOnly
parameter_list|()
block|{
comment|// No comma before and
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|""
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"Smith, Jr, John"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, Smith and Black Brown"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Oxford comma
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|""
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"Smith, Jr, John"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, Smith, and Black Brown"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann and Smith"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAuthorsLastFirstNoComma ()
specifier|public
name|void
name|testGetAuthorsLastFirstNoComma
parameter_list|()
block|{
comment|// No commas before and
name|AuthorList
name|al
decl_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John"
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J."
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John and Black Brown, Peter"
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J. and Black Brown, P."
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
expr_stmt|;
comment|// Method description is different than code -> additional comma
comment|// there
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, John, Smith, John and Black Brown, Peter"
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, J., Smith, J. and Black Brown, P."
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Peter von Neumann"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, J. P."
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAuthorsLastFirstOxfordComma ()
specifier|public
name|void
name|testGetAuthorsLastFirstOxfordComma
parameter_list|()
block|{
comment|// Oxford comma
name|AuthorList
name|al
decl_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John"
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J."
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John and Black Brown, Peter"
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J. and Black Brown, P."
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, John, Smith, John, and Black Brown, Peter"
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, J., Smith, J., and Black Brown, P."
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Peter von Neumann"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, J. P."
argument_list|,
name|al
operator|.
name|getAsLastFirstNames
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAuthorsLastFirstAnds ()
specifier|public
name|void
name|testGetAuthorsLastFirstAnds
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
operator|.
name|getAsLastFirstNamesWithAnd
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, John and Black Brown, Peter"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|getAsLastFirstNamesWithAnd
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, John and Smith, John and Black Brown, Peter"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|getAsLastFirstNamesWithAnd
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Last, Jr, First"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"von Last, Jr ,First"
argument_list|)
operator|.
name|getAsLastFirstNamesWithAnd
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J."
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
operator|.
name|getAsLastFirstNamesWithAnd
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J. and Black Brown, P."
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|getAsLastFirstNamesWithAnd
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Neumann, J. and Smith, J. and Black Brown, P."
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|getAsLastFirstNamesWithAnd
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"von Last, Jr, F."
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"von Last, Jr ,First"
argument_list|)
operator|.
name|getAsLastFirstNamesWithAnd
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAuthorsFirstFirst ()
specifier|public
name|void
name|testGetAuthorsFirstFirst
parameter_list|()
block|{
name|AuthorList
name|al
decl_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. Smith"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. Smith"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith and Peter Black Brown"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. Smith and P. Black Brown"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith and Peter Black Brown"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. Smith and P. Black Brown"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John von Neumann, John Smith and Peter Black Brown"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. von Neumann, J. Smith and P. Black Brown"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John von Neumann, John Smith, and Peter Black Brown"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. von Neumann, J. Smith, and P. Black Brown"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|al
operator|=
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Peter von Neumann"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Peter von Neumann"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Peter von Neumann"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. P. von Neumann"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. P. von Neumann"
argument_list|,
name|al
operator|.
name|getAsFirstLastNames
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAuthorsFirstFirstAnds ()
specifier|public
name|void
name|testGetAuthorsFirstFirstAnds
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
operator|.
name|getAsFirstLastNamesWithAnd
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John Smith and Peter Black Brown"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|getAsFirstLastNamesWithAnd
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"John von Neumann and John Smith and Peter Black Brown"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith and Black Brown, Peter"
argument_list|)
operator|.
name|getAsFirstLastNamesWithAnd
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"First von Last, Jr. III"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"von Last, Jr. III, First"
argument_list|)
operator|.
name|getAsFirstLastNamesWithAnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAuthorsForAlphabetization ()
specifier|public
name|void
name|testGetAuthorsForAlphabetization
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith, J."
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John Smith"
argument_list|)
operator|.
name|getForAlphabetization
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Neumann, J."
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann"
argument_list|)
operator|.
name|getForAlphabetization
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Neumann, J."
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"J. von Neumann"
argument_list|)
operator|.
name|getForAlphabetization
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Neumann, J. and Smith, J. and Black Brown, Jr., P."
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"John von Neumann and John Smith and de Black Brown, Jr., Peter"
argument_list|)
operator|.
name|getForAlphabetization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveStartAndEndBraces ()
specifier|public
name|void
name|testRemoveStartAndEndBraces
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{A}bbb{c}"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"{A}bbb{c}"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Vall{\\'e}e Poussin"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"{Vall{\\'e}e Poussin}"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Poussin"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"{Vall{\\'e}e} {Poussin}"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Poussin"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"Vall{\\'e}e Poussin"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Lastname"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"Firstname {Lastname}"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Firstname Lastname"
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"{Firstname Lastname}"
argument_list|)
operator|.
name|getAsLastNames
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createCorrectInitials ()
specifier|public
name|void
name|createCorrectInitials
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. G."
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"Hornberg, Johann Gottfried"
argument_list|)
operator|.
name|getAuthor
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstAbbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseNameWithBracesAroundFirstName ()
specifier|public
name|void
name|parseNameWithBracesAroundFirstName
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TODO: Be more intelligent and abbreviate the first name correctly
name|Author
name|expected
init|=
operator|new
name|Author
argument_list|(
literal|"Tse-tung"
argument_list|,
literal|"{Tse-tung}."
argument_list|,
literal|null
argument_list|,
literal|"Mao"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|AuthorList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"{Tse-tung} Mao"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseNameWithBracesAroundLastName ()
specifier|public
name|void
name|parseNameWithBracesAroundLastName
parameter_list|()
throws|throws
name|Exception
block|{
name|Author
name|expected
init|=
operator|new
name|Author
argument_list|(
literal|"Hans"
argument_list|,
literal|"H."
argument_list|,
literal|null
argument_list|,
literal|"van den Bergen"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|AuthorList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"{van den Bergen}, Hans"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseNameWithHyphenInFirstName ()
specifier|public
name|void
name|parseNameWithHyphenInFirstName
parameter_list|()
throws|throws
name|Exception
block|{
name|Author
name|expected
init|=
operator|new
name|Author
argument_list|(
literal|"Tse-tung"
argument_list|,
literal|"T.-t."
argument_list|,
literal|null
argument_list|,
literal|"Mao"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|AuthorList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"Tse-tung Mao"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseNameWithHyphenInLastName ()
specifier|public
name|void
name|parseNameWithHyphenInLastName
parameter_list|()
throws|throws
name|Exception
block|{
name|Author
name|expected
init|=
operator|new
name|Author
argument_list|(
literal|"Firstname"
argument_list|,
literal|"F."
argument_list|,
literal|null
argument_list|,
literal|"Bailey-Jones"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|AuthorList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"Firstname Bailey-Jones"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseNameWithBraces ()
specifier|public
name|void
name|parseNameWithBraces
parameter_list|()
throws|throws
name|Exception
block|{
name|Author
name|expected
init|=
operator|new
name|Author
argument_list|(
literal|"H{e}lene"
argument_list|,
literal|"H."
argument_list|,
literal|null
argument_list|,
literal|"Fiaux"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|AuthorList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|AuthorList
operator|.
name|parse
argument_list|(
literal|"H{e}lene Fiaux"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

