begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.database
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibLatexEntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|BibDatabaseTypeDetectionTest
specifier|public
class|class
name|BibDatabaseTypeDetectionTest
block|{
annotation|@
name|Test
DECL|method|detectBiblatexOnly ()
specifier|public
name|void
name|detectBiblatexOnly
parameter_list|()
block|{
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|BibEntry
argument_list|(
literal|"someid"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|MVBOOK
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BibDatabaseType
operator|.
name|BIBLATEX
argument_list|,
name|BibDatabaseTypeDetection
operator|.
name|inferType
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*     @Test     public void detectBibtexOnly() {         Collection<BibEntry> entries = Arrays.asList(new BibEntry("someid", BibtexEntryTypes.MASTERSTHESIS));          assertEquals(BibDatabaseType.BIBTEX, BibDatabaseTypeDetection.inferType(entries));     }      @Test     public void detectBiblatexFieldBased() {         BibEntry entry = new BibEntry("someid", BibtexEntryTypes.ARTICLE);         entry.setField("translator", "Stefan Kolb");         Collection<BibEntry> entries = Arrays.asList(entry);          assertEquals(BibDatabaseType.BIBLATEX, BibDatabaseTypeDetection.inferType(entries));     }      @Test     public void detectBibtexFieldBased() {         BibEntry entry = new BibEntry("someid", BibtexEntryTypes.ARTICLE);         entry.setField("journal", "IEEE Trans. Services Computing");         Collection<BibEntry> entries = Arrays.asList(entry);          assertEquals(BibDatabaseType.BIBTEX, BibDatabaseTypeDetection.inferType(entries));     }      @Test     public void detectUndistinguishableAsBibtex() {         BibEntry entry = new BibEntry("someid", BibtexEntryTypes.ARTICLE);         entry.setField("title", "My cool paper");         Collection<BibEntry> entries = Arrays.asList(entry);          assertEquals(BibDatabaseType.BIBTEX, BibDatabaseTypeDetection.inferType(entries));     }      // TODO: what about custom entry types?, Define type detection on type field in jabref bib file?     */
block|}
end_class

end_unit

