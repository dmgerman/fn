begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.database
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibLatexEntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|BibTypeDetectionTest
specifier|public
class|class
name|BibTypeDetectionTest
block|{
annotation|@
name|Test
DECL|method|detectBiblatexOnly ()
specifier|public
name|void
name|detectBiblatexOnly
parameter_list|()
block|{
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|BibtexEntry
argument_list|(
literal|"someid"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|MVBOOK
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BibType
operator|.
name|BIBLATEX
argument_list|,
name|BibTypeDetection
operator|.
name|inferType
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|detectBibtexOnly ()
specifier|public
name|void
name|detectBibtexOnly
parameter_list|()
block|{
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|BibtexEntry
argument_list|(
literal|"someid"
argument_list|,
name|BibtexEntryTypes
operator|.
name|MASTERSTHESIS
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BibType
operator|.
name|BIBTEX
argument_list|,
name|BibTypeDetection
operator|.
name|inferType
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|detectBiblatexFieldBased ()
specifier|public
name|void
name|detectBiblatexFieldBased
parameter_list|()
block|{
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|(
literal|"someid"
argument_list|,
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"translator"
argument_list|,
literal|"Stefan Kolb"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BibType
operator|.
name|BIBLATEX
argument_list|,
name|BibTypeDetection
operator|.
name|inferType
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|detectBibtexFieldBased ()
specifier|public
name|void
name|detectBibtexFieldBased
parameter_list|()
block|{
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|(
literal|"someid"
argument_list|,
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"IEEE Trans. Services Computing"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BibType
operator|.
name|BIBTEX
argument_list|,
name|BibTypeDetection
operator|.
name|inferType
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|detectUndistinguishableAsBibtex ()
specifier|public
name|void
name|detectUndistinguishableAsBibtex
parameter_list|()
block|{
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|(
literal|"someid"
argument_list|,
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"My cool paper"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BibType
operator|.
name|BIBTEX
argument_list|,
name|BibTypeDetection
operator|.
name|inferType
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: what about custom entry types?, Define type detection on type field in jabref bib file?
block|}
end_class

end_unit

