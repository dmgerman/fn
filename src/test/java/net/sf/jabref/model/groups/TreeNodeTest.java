begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|TreeNodeTest
specifier|public
class|class
name|TreeNodeTest
block|{
annotation|@
name|Mock
DECL|field|subscriber
name|Consumer
argument_list|<
name|TreeNodeMock
argument_list|>
name|subscriber
decl_stmt|;
comment|/**      * Gets the marked node in the following tree:      * Root      *      A      *      A (= parent)      *          B (<-- this)      */
DECL|method|getNodeInSimpleTree (TreeNodeMock root)
specifier|private
name|TreeNodeMock
name|getNodeInSimpleTree
parameter_list|(
name|TreeNodeMock
name|root
parameter_list|)
block|{
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|parent
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|parent
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|getNodeInSimpleTree ()
specifier|private
name|TreeNodeMock
name|getNodeInSimpleTree
parameter_list|()
block|{
return|return
name|getNodeInSimpleTree
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Gets the marked node in the following tree:      * Root      *      A      *      A      *      A (= grand parent)      *          B      *          B (= parent)      *              C (<-- this)      *                  D (= child)      *              C      *              C      *              C      *          B      *          B      *      A      */
DECL|method|getNodeInComplexTree (TreeNodeMock root)
specifier|private
name|TreeNodeMock
name|getNodeInComplexTree
parameter_list|(
name|TreeNodeMock
name|root
parameter_list|)
block|{
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|grandParent
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|grandParent
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|grandParent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|parent
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|grandParent
operator|.
name|addChild
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|grandParent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|grandParent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|parent
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|getNodeInComplexTree ()
specifier|private
name|TreeNodeMock
name|getNodeInComplexTree
parameter_list|()
block|{
return|return
name|getNodeInComplexTree
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Gets the marked in the following tree:      * Root      *      A      *      A      *      A (<- this)      *      A      */
DECL|method|getNodeAsChild (TreeNodeMock root)
specifier|private
name|TreeNodeMock
name|getNodeAsChild
parameter_list|(
name|TreeNodeMock
name|root
parameter_list|)
block|{
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
DECL|method|constructorChecksThatClassImplementsCorrectInterface ()
specifier|public
name|void
name|constructorChecksThatClassImplementsCorrectInterface
parameter_list|()
block|{
operator|new
name|WrongTreeNodeImplementation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|constructorExceptsCorrectImplementation ()
specifier|public
name|void
name|constructorExceptsCorrectImplementation
parameter_list|()
block|{
name|TreeNodeMock
name|treeNode
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|treeNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newTreeNodeHasNoParentOrChildren ()
specifier|public
name|void
name|newTreeNodeHasNoParentOrChildren
parameter_list|()
block|{
name|TreeNodeMock
name|treeNode
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|treeNode
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|treeNode
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|treeNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getIndexedPathFromRootReturnsEmptyListForRoot ()
specifier|public
name|void
name|getIndexedPathFromRootReturnsEmptyListForRoot
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|root
operator|.
name|getIndexedPathFromRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getIndexedPathFromRootSimplePath ()
specifier|public
name|void
name|getIndexedPathFromRootSimplePath
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|getNodeInSimpleTree
argument_list|()
operator|.
name|getIndexedPathFromRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getIndexedPathFromRootComplexPath ()
specifier|public
name|void
name|getIndexedPathFromRootComplexPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|getNodeInComplexTree
argument_list|()
operator|.
name|getIndexedPathFromRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getDescendantSimplePath ()
specifier|public
name|void
name|getDescendantSimplePath
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInSimpleTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|root
operator|.
name|getDescendant
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getDescendantComplexPath ()
specifier|public
name|void
name|getDescendantComplexPath
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|root
operator|.
name|getDescendant
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getDescendantNonExistentReturnsEmpty ()
specifier|public
name|void
name|getDescendantNonExistentReturnsEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|root
operator|.
name|getDescendant
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
DECL|method|getPositionInParentForRootThrowsException ()
specifier|public
name|void
name|getPositionInParentForRootThrowsException
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|getPositionInParent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getPositionInParentSimpleTree ()
specifier|public
name|void
name|getPositionInParentSimpleTree
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|node
operator|.
name|getPositionInParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getIndexOfNonExistentChildReturnsEmpty ()
specifier|public
name|void
name|getIndexOfNonExistentChildReturnsEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|root
operator|.
name|getIndexOfChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getIndexOfChild ()
specifier|public
name|void
name|getIndexOfChild
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|2
argument_list|,
name|root
operator|.
name|getIndexOfChild
argument_list|(
name|node
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getLevelOfRoot ()
specifier|public
name|void
name|getLevelOfRoot
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|root
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getLevelInSimpleTree ()
specifier|public
name|void
name|getLevelInSimpleTree
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getNodeInSimpleTree
argument_list|()
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getLevelInComplexTree ()
specifier|public
name|void
name|getLevelInComplexTree
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getNodeInComplexTree
argument_list|()
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getChildCountInSimpleTree ()
specifier|public
name|void
name|getChildCountInSimpleTree
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|getNodeInSimpleTree
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|root
operator|.
name|getNumberOfChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getChildCountInComplexTree ()
specifier|public
name|void
name|getChildCountInComplexTree
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|root
operator|.
name|getNumberOfChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|moveToAddsAsLastChildInSimpleTree ()
specifier|public
name|void
name|moveToAddsAsLastChildInSimpleTree
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInSimpleTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|node
operator|.
name|moveTo
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|2
argument_list|,
name|root
operator|.
name|getIndexOfChild
argument_list|(
name|node
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|moveToAddsAsLastChildInComplexTree ()
specifier|public
name|void
name|moveToAddsAsLastChildInComplexTree
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|node
operator|.
name|moveTo
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|4
argument_list|,
name|root
operator|.
name|getIndexOfChild
argument_list|(
name|node
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|moveToChangesParent ()
specifier|public
name|void
name|moveToChangesParent
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInSimpleTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|node
operator|.
name|moveTo
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|node
operator|.
name|getParent
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|moveToInSameLevelAddsAtEnd ()
specifier|public
name|void
name|moveToInSameLevelAddsAtEnd
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|child1
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|child2
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|child1
operator|.
name|moveTo
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|child2
argument_list|,
name|child1
argument_list|)
argument_list|,
name|root
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getPathFromRootInSimpleTree ()
specifier|public
name|void
name|getPathFromRootInSimpleTree
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInSimpleTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TreeNodeMock
argument_list|>
name|path
init|=
name|node
operator|.
name|getPathFromRoot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|path
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|path
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|path
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getPathFromRootInComplexTree ()
specifier|public
name|void
name|getPathFromRootInComplexTree
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TreeNodeMock
argument_list|>
name|path
init|=
name|node
operator|.
name|getPathFromRoot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|path
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|path
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|path
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getPreviousSiblingReturnsCorrect ()
specifier|public
name|void
name|getPreviousSiblingReturnsCorrect
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|previous
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|previous
argument_list|,
name|node
operator|.
name|getPreviousSibling
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getPreviousSiblingForRootReturnsEmpty ()
specifier|public
name|void
name|getPreviousSiblingForRootReturnsEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|root
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getPreviousSiblingForNonexistentReturnsEmpty ()
specifier|public
name|void
name|getPreviousSiblingForNonexistentReturnsEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|node
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNextSiblingReturnsCorrect ()
specifier|public
name|void
name|getNextSiblingReturnsCorrect
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|next
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|next
argument_list|,
name|node
operator|.
name|getNextSibling
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNextSiblingForRootReturnsEmpty ()
specifier|public
name|void
name|getNextSiblingForRootReturnsEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|root
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNextSiblingForNonexistentReturnsEmpty ()
specifier|public
name|void
name|getNextSiblingForNonexistentReturnsEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|node
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getParentReturnsCorrect ()
specifier|public
name|void
name|getParentReturnsCorrect
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|node
operator|.
name|getParent
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getParentForRootReturnsEmpty ()
specifier|public
name|void
name|getParentForRootReturnsEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|root
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getChildAtReturnsCorrect ()
specifier|public
name|void
name|getChildAtReturnsCorrect
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|root
operator|.
name|getChildAt
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getChildAtInvalidIndexReturnsEmpty ()
specifier|public
name|void
name|getChildAtInvalidIndexReturnsEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|root
operator|.
name|getChildAt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getRootReturnsTrueForRoot ()
specifier|public
name|void
name|getRootReturnsTrueForRoot
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|isRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getRootReturnsFalseForChild ()
specifier|public
name|void
name|getRootReturnsFalseForChild
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|getNodeInSimpleTree
argument_list|()
operator|.
name|isRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nodeIsAncestorOfItself ()
specifier|public
name|void
name|nodeIsAncestorOfItself
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|isAncestorOf
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isAncestorOfInSimpleTree ()
specifier|public
name|void
name|isAncestorOfInSimpleTree
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInSimpleTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|isAncestorOf
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isAncestorOfInComplexTree ()
specifier|public
name|void
name|isAncestorOfInComplexTree
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|isAncestorOf
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getRootOfSingleNode ()
specifier|public
name|void
name|getRootOfSingleNode
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getRootInSimpleTree ()
specifier|public
name|void
name|getRootInSimpleTree
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInSimpleTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|node
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getRootInComplexTree ()
specifier|public
name|void
name|getRootInComplexTree
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|node
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isLeafIsCorrectForRootWithoutChildren ()
specifier|public
name|void
name|isLeafIsCorrectForRootWithoutChildren
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|isLeaf
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeFromParentSetsParentToEmpty ()
specifier|public
name|void
name|removeFromParentSetsParentToEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|node
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeFromParentRemovesNodeFromChildrenCollection ()
specifier|public
name|void
name|removeFromParentRemovesNodeFromChildrenCollection
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|node
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|contains
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeAllChildrenSetsParentOfChildToEmpty ()
specifier|public
name|void
name|removeAllChildrenSetsParentOfChildToEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|root
operator|.
name|removeAllChildren
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeAllChildrenRemovesAllNodesFromChildrenCollection ()
specifier|public
name|void
name|removeAllChildrenRemovesAllNodesFromChildrenCollection
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|root
operator|.
name|removeAllChildren
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|root
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFirstChildAtReturnsCorrect ()
specifier|public
name|void
name|getFirstChildAtReturnsCorrect
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|root
operator|.
name|getFirstChild
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFirstChildAtLeafReturnsEmpty ()
specifier|public
name|void
name|getFirstChildAtLeafReturnsEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|leaf
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|leaf
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isNodeDescendantInFirstLevel ()
specifier|public
name|void
name|isNodeDescendantInFirstLevel
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|child
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|isNodeDescendant
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isNodeDescendantInComplex ()
specifier|public
name|void
name|isNodeDescendantInComplex
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|descendant
init|=
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|isNodeDescendant
argument_list|(
name|descendant
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getChildrenReturnsAllChildren ()
specifier|public
name|void
name|getChildrenReturnsAllChildren
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|child1
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|child2
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|child1
argument_list|,
name|child2
argument_list|)
argument_list|,
name|root
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeChildSetsParentToEmpty ()
specifier|public
name|void
name|removeChildSetsParentToEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|root
operator|.
name|removeChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeChildRemovesNodeFromChildrenCollection ()
specifier|public
name|void
name|removeChildRemovesNodeFromChildrenCollection
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|root
operator|.
name|removeChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|contains
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeChildIndexSetsParentToEmpty ()
specifier|public
name|void
name|removeChildIndexSetsParentToEmpty
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|root
operator|.
name|removeChild
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeChildIndexRemovesNodeFromChildrenCollection ()
specifier|public
name|void
name|removeChildIndexRemovesNodeFromChildrenCollection
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|root
operator|.
name|removeChild
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|contains
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
DECL|method|addThrowsExceptionIfNodeHasParent ()
specifier|public
name|void
name|addThrowsExceptionIfNodeHasParent
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|moveAllChildrenToAddsAtSpecifiedPosition ()
specifier|public
name|void
name|moveAllChildrenToAddsAtSpecifiedPosition
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|child1
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|child2
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|node
operator|.
name|moveAllChildrenTo
argument_list|(
name|root
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|child1
argument_list|,
name|child2
argument_list|,
name|node
argument_list|)
argument_list|,
name|root
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|moveAllChildrenToChangesParent ()
specifier|public
name|void
name|moveAllChildrenToChangesParent
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|child1
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|child2
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|node
operator|.
name|moveAllChildrenTo
argument_list|(
name|root
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|child1
operator|.
name|getParent
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|child2
operator|.
name|getParent
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
DECL|method|moveAllChildrenToDescendantThrowsException ()
specifier|public
name|void
name|moveAllChildrenToDescendantThrowsException
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|root
operator|.
name|moveAllChildrenTo
argument_list|(
name|node
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sortChildrenSortsInFirstLevel ()
specifier|public
name|void
name|sortChildrenSortsInFirstLevel
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|child1
init|=
operator|new
name|TreeNodeMock
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|TreeNodeMock
name|child2
init|=
operator|new
name|TreeNodeMock
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|TreeNodeMock
name|child3
init|=
operator|new
name|TreeNodeMock
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|child3
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|root
operator|.
name|sortChildren
argument_list|(
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|child1
argument_list|,
name|child2
argument_list|,
name|child3
argument_list|)
argument_list|,
name|root
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sortChildrenRecursiveSortsInDeeperLevel ()
specifier|public
name|void
name|sortChildrenRecursiveSortsInDeeperLevel
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInSimpleTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|TreeNodeMock
name|child1
init|=
operator|new
name|TreeNodeMock
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|TreeNodeMock
name|child2
init|=
operator|new
name|TreeNodeMock
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|TreeNodeMock
name|child3
init|=
operator|new
name|TreeNodeMock
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|child3
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|root
operator|.
name|sortChildren
argument_list|(
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|child1
argument_list|,
name|child2
argument_list|,
name|child3
argument_list|)
argument_list|,
name|node
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copySubtreeCopiesChildren ()
specifier|public
name|void
name|copySubtreeCopiesChildren
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeAsChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|TreeNodeMock
name|copiedRoot
init|=
name|root
operator|.
name|copySubtree
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|copiedRoot
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|copiedRoot
operator|.
name|getChildren
argument_list|()
operator|.
name|contains
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|getNumberOfChildren
argument_list|()
argument_list|,
name|copiedRoot
operator|.
name|getNumberOfChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addChildSomewhereInTreeInvokesChangeEvent ()
specifier|public
name|void
name|addChildSomewhereInTreeInvokesChangeEvent
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|root
operator|.
name|subscribeToDescendantChanged
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|subscriber
argument_list|)
operator|.
name|accept
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|moveNodeSomewhereInTreeInvokesChangeEvent ()
specifier|public
name|void
name|moveNodeSomewhereInTreeInvokesChangeEvent
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|TreeNodeMock
name|oldParent
init|=
name|node
operator|.
name|getParent
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|root
operator|.
name|subscribeToDescendantChanged
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
name|node
operator|.
name|moveTo
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|subscriber
argument_list|)
operator|.
name|accept
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|subscriber
argument_list|)
operator|.
name|accept
argument_list|(
name|oldParent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeChildSomewhereInTreeInvokesChangeEvent ()
specifier|public
name|void
name|removeChildSomewhereInTreeInvokesChangeEvent
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|TreeNodeMock
name|child
init|=
name|node
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
decl_stmt|;
name|root
operator|.
name|subscribeToDescendantChanged
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
name|node
operator|.
name|removeChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|subscriber
argument_list|)
operator|.
name|accept
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeChildIndexSomewhereInTreeInvokesChangeEvent ()
specifier|public
name|void
name|removeChildIndexSomewhereInTreeInvokesChangeEvent
parameter_list|()
block|{
name|TreeNodeMock
name|root
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|TreeNodeMock
name|node
init|=
name|getNodeInComplexTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|subscribeToDescendantChanged
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
name|node
operator|.
name|removeChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|subscriber
argument_list|)
operator|.
name|accept
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is just a dummy class deriving from TreeNode<T> so that we can test the generic class      */
DECL|class|TreeNodeMock
specifier|private
class|class
name|TreeNodeMock
extends|extends
name|TreeNode
argument_list|<
name|TreeNodeMock
argument_list|>
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|TreeNodeMock ()
specifier|public
name|TreeNodeMock
parameter_list|()
block|{
name|this
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|TreeNodeMock (String name)
specifier|public
name|TreeNodeMock
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|TreeNodeMock
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TreeNodeMock{"
operator|+
literal|"name='"
operator|+
name|name
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
DECL|method|copyNode ()
specifier|public
name|TreeNodeMock
name|copyNode
parameter_list|()
block|{
return|return
operator|new
name|TreeNodeMock
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
DECL|class|WrongTreeNodeImplementation
specifier|private
specifier|static
class|class
name|WrongTreeNodeImplementation
extends|extends
name|TreeNode
argument_list|<
name|TreeNodeMock
argument_list|>
block|{
comment|// This class is a wrong derived class of TreeNode<T>
comment|// since it does not extends TreeNode<WrongTreeNodeImplementation>
comment|// See test constructorChecksThatClassImplementsCorrectInterface
DECL|method|WrongTreeNodeImplementation ()
specifier|public
name|WrongTreeNodeImplementation
parameter_list|()
block|{
name|super
argument_list|(
name|TreeNodeMock
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copyNode ()
specifier|public
name|TreeNodeMock
name|copyNode
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

