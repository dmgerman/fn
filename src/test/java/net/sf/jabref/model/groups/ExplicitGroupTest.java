begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|ExplicitGroupTest
specifier|public
class|class
name|ExplicitGroupTest
block|{
DECL|field|group
specifier|private
name|ExplicitGroup
name|group
decl_stmt|;
DECL|field|group2
specifier|private
name|ExplicitGroup
name|group2
decl_stmt|;
DECL|field|emptyEntry
specifier|private
name|BibEntry
name|emptyEntry
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|group
operator|=
operator|new
name|ExplicitGroup
argument_list|(
literal|"myExplicitGroup"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|group2
operator|=
operator|new
name|ExplicitGroup
argument_list|(
literal|"myExplicitGroup2"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|emptyEntry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToStringSimple ()
specifier|public
name|void
name|testToStringSimple
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"ExplicitGroup:myExplicitGroup;0;"
argument_list|,
name|group
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toStringDoesNotWriteAssignedEntries ()
specifier|public
name|void
name|toStringDoesNotWriteAssignedEntries
parameter_list|()
block|{
name|group
operator|.
name|add
argument_list|(
name|emptyEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ExplicitGroup:myExplicitGroup;0;"
argument_list|,
name|group
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addSingleGroupToBibEntrySuccessfullyIfEmptyBefore ()
specifier|public
name|void
name|addSingleGroupToBibEntrySuccessfullyIfEmptyBefore
parameter_list|()
block|{
name|group
operator|.
name|add
argument_list|(
name|emptyEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"myExplicitGroup"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addTwoGroupsToBibEntrySuccessfully ()
specifier|public
name|void
name|addTwoGroupsToBibEntrySuccessfully
parameter_list|()
block|{
name|group
operator|.
name|add
argument_list|(
name|emptyEntry
argument_list|)
expr_stmt|;
name|group2
operator|.
name|add
argument_list|(
name|emptyEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"myExplicitGroup, myExplicitGroup2"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noDuplicateStoredIfAlreadyInGroup ()
specifier|public
name|void
name|noDuplicateStoredIfAlreadyInGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|,
literal|"myExplicitGroup"
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
name|emptyEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"myExplicitGroup"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

