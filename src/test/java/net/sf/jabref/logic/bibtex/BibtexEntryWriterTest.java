begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.bibtex
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|exporter
operator|.
name|LatexFieldFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|BibtexEntryWriterTest
specifier|public
class|class
name|BibtexEntryWriterTest
block|{
DECL|field|writer
specifier|private
name|BibtexEntryWriter
name|writer
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
comment|// make sure that we use the "new style" serialization
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|WRITEFIELD_SORTSTYLE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUpWriter ()
specifier|public
name|void
name|setUpWriter
parameter_list|()
block|{
name|writer
operator|=
operator|new
name|BibtexEntryWriter
argument_list|(
operator|new
name|LatexFieldFormatter
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|(
literal|"1234"
argument_list|,
name|BibtexEntryType
operator|.
name|getType
argument_list|(
literal|"Article"
argument_list|)
argument_list|)
decl_stmt|;
comment|//set a required field
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Foo Bar"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"International Journal of Something"
argument_list|)
expr_stmt|;
comment|//set an optional field
name|entry
operator|.
name|setField
argument_list|(
literal|"number"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"note"
argument_list|,
literal|"some note"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|entry
argument_list|,
name|stringWriter
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|stringWriter
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"@Article{,"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"  Author                   = {Foo Bar},"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"  Journal                  = {International Journal of Something},"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"  Note                     = {some note},"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"  Number                   = {1}"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|Globals
operator|.
name|NEWLINE
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

