begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.bibtex.comparator
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|comparator
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|BibtexStringComparatorTest
specifier|public
class|class
name|BibtexStringComparatorTest
block|{
DECL|field|bsc1
specifier|private
specifier|final
name|BibtexStringComparator
name|bsc1
init|=
operator|new
name|BibtexStringComparator
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|bsc2
specifier|private
specifier|final
name|BibtexStringComparator
name|bsc2
init|=
operator|new
name|BibtexStringComparator
argument_list|(
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
block|{
name|BibtexString
name|bs1
init|=
operator|new
name|BibtexString
argument_list|(
literal|"VLSI"
argument_list|,
literal|"Very Large Scale Integration"
argument_list|)
decl_stmt|;
name|BibtexString
name|bs2
init|=
operator|new
name|BibtexString
argument_list|(
literal|"DSP"
argument_list|,
literal|"Digital Signal Processing"
argument_list|)
decl_stmt|;
name|BibtexString
name|bs3
init|=
operator|new
name|BibtexString
argument_list|(
literal|"DSP"
argument_list|,
literal|"Digital Signal Processing"
argument_list|)
decl_stmt|;
comment|// Same string
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bsc1
operator|.
name|compare
argument_list|(
name|bs1
argument_list|,
name|bs1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Same content
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bsc1
operator|.
name|compare
argument_list|(
name|bs2
argument_list|,
name|bs3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Alphabetical order
name|assertTrue
argument_list|(
name|bsc1
operator|.
name|compare
argument_list|(
name|bs1
argument_list|,
name|bs2
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bsc1
operator|.
name|compare
argument_list|(
name|bs2
argument_list|,
name|bs1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// Same, but with the comparator checking for internal strings (none)
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bsc2
operator|.
name|compare
argument_list|(
name|bs1
argument_list|,
name|bs1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bsc2
operator|.
name|compare
argument_list|(
name|bs2
argument_list|,
name|bs3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bsc2
operator|.
name|compare
argument_list|(
name|bs1
argument_list|,
name|bs2
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bsc2
operator|.
name|compare
argument_list|(
name|bs2
argument_list|,
name|bs1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// Create string with internal string
name|BibtexString
name|bs4
init|=
operator|new
name|BibtexString
argument_list|(
literal|"DSPVLSI"
argument_list|,
literal|"#VLSI# #DSP#"
argument_list|)
decl_stmt|;
comment|// bs4 before bs1 if not considering that bs4 contains bs1
name|assertTrue
argument_list|(
name|bsc1
operator|.
name|compare
argument_list|(
name|bs1
argument_list|,
name|bs4
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bsc1
operator|.
name|compare
argument_list|(
name|bs4
argument_list|,
name|bs1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// bs4 after bs1 if considering that bs4 contains bs1
name|assertTrue
argument_list|(
name|bsc2
operator|.
name|compare
argument_list|(
name|bs1
argument_list|,
name|bs4
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bsc2
operator|.
name|compare
argument_list|(
name|bs4
argument_list|,
name|bs1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

