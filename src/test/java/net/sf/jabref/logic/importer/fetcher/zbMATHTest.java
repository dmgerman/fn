begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.importer.fetcher
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|FieldContentParserPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|support
operator|.
name|DevEnvironment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|testutils
operator|.
name|category
operator|.
name|FetcherTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|FetcherTests
operator|.
name|class
argument_list|)
DECL|class|zbMATHTest
specifier|public
class|class
name|zbMATHTest
block|{
DECL|field|fetcher
specifier|private
name|zbMATH
name|fetcher
decl_stmt|;
DECL|field|donaldsonEntry
specifier|private
name|BibEntry
name|donaldsonEntry
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ImportFormatPreferences
name|importFormatPreferences
init|=
name|mock
argument_list|(
name|ImportFormatPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|importFormatPreferences
operator|.
name|getFieldContentParserPreferences
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|FieldContentParserPreferences
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fetcher
operator|=
operator|new
name|zbMATH
argument_list|(
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|donaldsonEntry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setCiteKey
argument_list|(
literal|"zbMATH03800580"
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"S.K. {Donaldson}"
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"Journal of Differential Geometry"
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setField
argument_list|(
literal|"issn"
argument_list|,
literal|"0022-040X; 1945-743X/e"
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setField
argument_list|(
literal|"language"
argument_list|,
literal|"English"
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
literal|"57N13 57R10 53C05 58J99 57R65"
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
literal|"279--315"
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setField
argument_list|(
literal|"publisher"
argument_list|,
literal|"International Press of Boston, Somerville, MA"
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"An application of gauge theory to four dimensional topology."
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setField
argument_list|(
literal|"volume"
argument_list|,
literal|"18"
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"1983"
argument_list|)
expr_stmt|;
name|donaldsonEntry
operator|.
name|setField
argument_list|(
literal|"zbl"
argument_list|,
literal|"0507.57010"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByQueryFindsEntry ()
specifier|public
name|void
name|searchByQueryFindsEntry
parameter_list|()
throws|throws
name|Exception
block|{
comment|// CI has no subscription to zbMath and thus gets 401 response
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|DevEnvironment
operator|.
name|isCIServer
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|fetchedEntries
init|=
name|fetcher
operator|.
name|performSearch
argument_list|(
literal|"an:0507.57010"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|donaldsonEntry
argument_list|)
argument_list|,
name|fetchedEntries
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

