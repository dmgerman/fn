begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.importer.fetcher
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|FieldContentParserPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
operator|.
name|NEWLINE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|AstrophysicsDataSystemTest
specifier|public
class|class
name|AstrophysicsDataSystemTest
block|{
DECL|field|fetcher
name|AstrophysicsDataSystem
name|fetcher
decl_stmt|;
DECL|field|diezSliceTheoremEntry
name|BibEntry
name|diezSliceTheoremEntry
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ImportFormatPreferences
name|importFormatPreferences
init|=
name|mock
argument_list|(
name|ImportFormatPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|importFormatPreferences
operator|.
name|getFieldContentParserPreferences
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|FieldContentParserPreferences
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fetcher
operator|=
operator|new
name|AstrophysicsDataSystem
argument_list|(
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setCiteKey
argument_list|(
literal|"2014arXiv1405.2249D"
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Diez, T."
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Slice theorem for Fr$\\backslash$'echet group actions and covariant symplectic field theory"
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2014"
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setField
argument_list|(
literal|"archiveprefix"
argument_list|,
literal|"arXiv"
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setField
argument_list|(
literal|"eprint"
argument_list|,
literal|"1405.2249"
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"ArXiv e-prints"
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
literal|"Mathematical Physics, Mathematics - Differential Geometry, Mathematics - Symplectic Geometry, 58B99, 58Z05, 58B25, 22E65, 58D19, 53D20, 53D42"
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
literal|"#may#"
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setField
argument_list|(
literal|"primaryclass"
argument_list|,
literal|"math-ph"
argument_list|)
expr_stmt|;
name|diezSliceTheoremEntry
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
literal|"A general slice theorem for the action of a Fr$\\backslash$'echet Lie group on a"
operator|+
name|NEWLINE
operator|+
literal|"Fr$\\backslash$'echet manifolds is established. The Nash-Moser theorem provides the"
operator|+
name|NEWLINE
operator|+
literal|"fundamental tool to generalize the result of Palais to this"
operator|+
name|NEWLINE
operator|+
literal|"infinite-dimensional setting. The presented slice theorem is illustrated"
operator|+
name|NEWLINE
operator|+
literal|"by its application to gauge theories: the action of the gauge"
operator|+
name|NEWLINE
operator|+
literal|"transformation group admits smooth slices at every point and thus the"
operator|+
name|NEWLINE
operator|+
literal|"gauge orbit space is stratified by Fr$\\backslash$'echet manifolds. Furthermore, a"
operator|+
name|NEWLINE
operator|+
literal|"covariant and symplectic formulation of classical field theory is"
operator|+
name|NEWLINE
operator|+
literal|"proposed and extensively discussed. At the root of this novel framework"
operator|+
name|NEWLINE
operator|+
literal|"is the incorporation of field degrees of freedom F and spacetime M into"
operator|+
name|NEWLINE
operator|+
literal|"the product manifold F * M. The induced bigrading of differential forms"
operator|+
name|NEWLINE
operator|+
literal|"is used in order to carry over the usual symplectic theory to this new"
operator|+
name|NEWLINE
operator|+
literal|"setting. The examples of the Klein-Gordon field and general Yang-Mills"
operator|+
name|NEWLINE
operator|+
literal|"theory illustrate that the presented approach conveniently handles the"
operator|+
name|NEWLINE
operator|+
literal|"occurring symmetries."
operator|+
name|NEWLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByQueryFindsEntry ()
specifier|public
name|void
name|searchByQueryFindsEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|fetchedEntries
init|=
name|fetcher
operator|.
name|performSearch
argument_list|(
literal|"Diez slice theorem"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|diezSliceTheoremEntry
argument_list|)
argument_list|,
name|fetchedEntries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByEntryFindsEntry ()
specifier|public
name|void
name|searchByEntryFindsEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|BibEntry
name|searchEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|searchEntry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"slice theorem"
argument_list|)
expr_stmt|;
name|searchEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Diez"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|fetchedEntries
init|=
name|fetcher
operator|.
name|performSearch
argument_list|(
name|searchEntry
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fetchedEntries
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diezSliceTheoremEntry
argument_list|,
name|fetchedEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

