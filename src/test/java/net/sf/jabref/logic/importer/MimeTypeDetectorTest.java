begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.importer
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|tomakehurst
operator|.
name|wiremock
operator|.
name|junit
operator|.
name|WireMockRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|github
operator|.
name|tomakehurst
operator|.
name|wiremock
operator|.
name|client
operator|.
name|WireMock
operator|.
name|aResponse
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|github
operator|.
name|tomakehurst
operator|.
name|wiremock
operator|.
name|client
operator|.
name|WireMock
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|github
operator|.
name|tomakehurst
operator|.
name|wiremock
operator|.
name|client
operator|.
name|WireMock
operator|.
name|get
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|github
operator|.
name|tomakehurst
operator|.
name|wiremock
operator|.
name|client
operator|.
name|WireMock
operator|.
name|head
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|github
operator|.
name|tomakehurst
operator|.
name|wiremock
operator|.
name|client
operator|.
name|WireMock
operator|.
name|stubFor
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|github
operator|.
name|tomakehurst
operator|.
name|wiremock
operator|.
name|client
operator|.
name|WireMock
operator|.
name|urlEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|MimeTypeDetectorTest
specifier|public
class|class
name|MimeTypeDetectorTest
block|{
annotation|@
name|Rule
DECL|field|wireMockRule
specifier|public
name|WireMockRule
name|wireMockRule
init|=
operator|new
name|WireMockRule
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|handlePermanentRedirections ()
specifier|public
name|void
name|handlePermanentRedirections
parameter_list|()
block|{
name|String
name|redirectedUrl
init|=
literal|"http://localhost:8080/redirection"
decl_stmt|;
name|stubFor
argument_list|(
name|any
argument_list|(
name|urlEqualTo
argument_list|(
literal|"/redirection"
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|aResponse
argument_list|()
operator|.
name|withStatus
argument_list|(
literal|301
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Location"
argument_list|,
literal|"http://docs.oasis-open.org/wsbpel/2.0/OS/wsbpel-v2.0-OS.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MimeTypeDetector
operator|.
name|isPdfContentType
argument_list|(
name|redirectedUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|beFalseForInvalidUrl ()
specifier|public
name|void
name|beFalseForInvalidUrl
parameter_list|()
block|{
name|String
name|invalidUrl
init|=
literal|"thisisnourl"
decl_stmt|;
name|assertFalse
argument_list|(
name|MimeTypeDetector
operator|.
name|isPdfContentType
argument_list|(
name|invalidUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|beFalseForUnreachableUrl ()
specifier|public
name|void
name|beFalseForUnreachableUrl
parameter_list|()
block|{
name|String
name|invalidUrl
init|=
literal|"http://idontknowthisurlforsure.de"
decl_stmt|;
name|assertFalse
argument_list|(
name|MimeTypeDetector
operator|.
name|isPdfContentType
argument_list|(
name|invalidUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|beTrueForPdfMimeType ()
specifier|public
name|void
name|beTrueForPdfMimeType
parameter_list|()
block|{
name|String
name|pdfUrl
init|=
literal|"http://docs.oasis-open.org/wsbpel/2.0/OS/wsbpel-v2.0-OS.pdf"
decl_stmt|;
name|assertTrue
argument_list|(
name|MimeTypeDetector
operator|.
name|isPdfContentType
argument_list|(
name|pdfUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|beTrueForLocalPdfUri ()
specifier|public
name|void
name|beTrueForLocalPdfUri
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|String
name|localPath
init|=
name|MimeTypeDetectorTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"empty.pdf"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toASCIIString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|MimeTypeDetector
operator|.
name|isPdfContentType
argument_list|(
name|localPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|beTrueForPDFMimeTypeVariations ()
specifier|public
name|void
name|beTrueForPDFMimeTypeVariations
parameter_list|()
block|{
name|String
name|mimeTypeVariation
init|=
literal|"http://localhost:8080/mimevariation"
decl_stmt|;
name|stubFor
argument_list|(
name|any
argument_list|(
name|urlEqualTo
argument_list|(
literal|"/mimevariation"
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|aResponse
argument_list|()
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/pdf;charset=ISO-8859-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MimeTypeDetector
operator|.
name|isPdfContentType
argument_list|(
name|mimeTypeVariation
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|beAbleToUseHeadRequest ()
specifier|public
name|void
name|beAbleToUseHeadRequest
parameter_list|()
block|{
name|String
name|mimeTypeVariation
init|=
literal|"http://localhost:8080/mimevariation"
decl_stmt|;
name|stubFor
argument_list|(
name|head
argument_list|(
name|urlEqualTo
argument_list|(
literal|"/mimevariation"
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|aResponse
argument_list|()
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/pdf;charset=ISO-8859-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MimeTypeDetector
operator|.
name|isPdfContentType
argument_list|(
name|mimeTypeVariation
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|beAbleToUseGetRequest ()
specifier|public
name|void
name|beAbleToUseGetRequest
parameter_list|()
block|{
name|String
name|mimeTypeVariation
init|=
literal|"http://localhost:8080/mimevariation"
decl_stmt|;
name|stubFor
argument_list|(
name|head
argument_list|(
name|urlEqualTo
argument_list|(
literal|"/mimevariation"
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|aResponse
argument_list|()
operator|.
name|withStatus
argument_list|(
literal|404
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stubFor
argument_list|(
name|get
argument_list|(
name|urlEqualTo
argument_list|(
literal|"/mimevariation"
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|aResponse
argument_list|()
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/pdf;charset=ISO-8859-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MimeTypeDetector
operator|.
name|isPdfContentType
argument_list|(
name|mimeTypeVariation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

