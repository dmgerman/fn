begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.formatter.casechanger
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
operator|.
name|ProtectedTermsLoader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
operator|.
name|ProtectedTermsPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests in addition to the general tests from {@link net.sf.jabref.logic.formatter.FormatterTest}  */
end_comment

begin_class
DECL|class|ProtectTermsFormatterTest
specifier|public
class|class
name|ProtectTermsFormatterTest
block|{
DECL|field|formatter
specifier|private
name|ProtectTermsFormatter
name|formatter
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|ProtectTermsFormatter
operator|.
name|setProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|formatter
operator|=
operator|new
name|ProtectTermsFormatter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleWord ()
specifier|public
name|void
name|testSingleWord
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{VLSI}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"VLSI"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoNotProtectAlreadyProtected ()
specifier|public
name|void
name|testDoNotProtectAlreadyProtected
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{VLSI}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"{VLSI}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCaseSensitivity ()
specifier|public
name|void
name|testCaseSensitivity
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"VLsI"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"VLsI"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatExample ()
specifier|public
name|void
name|formatExample
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"In {CDMA}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
name|formatter
operator|.
name|getExampleInput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCorrectOrderingOfTerms ()
specifier|public
name|void
name|testCorrectOrderingOfTerms
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{3GPP} {3G}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"3GPP 3G"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{VLSI} {VLSI}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"VLSI {VLSI}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{BPEL}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"{BPEL}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{Testing BPEL Engine Performance: A Survey}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"{Testing BPEL Engine Performance: A Survey}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

