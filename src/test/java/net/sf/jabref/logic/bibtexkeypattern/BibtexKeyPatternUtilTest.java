begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.bibtexkeypattern
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
DECL|class|BibtexKeyPatternUtilTest
specifier|public
class|class
name|BibtexKeyPatternUtilTest
block|{
DECL|field|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_1
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_1
init|=
literal|"Isaac Newton"
decl_stmt|;
DECL|field|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_2
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_2
init|=
literal|"Isaac Newton and James Maxwell"
decl_stmt|;
DECL|field|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_3
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_3
init|=
literal|"Isaac Newton and James Maxwell and Albert Einstein"
decl_stmt|;
DECL|field|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_1
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_1
init|=
literal|"Wil van der Aalst"
decl_stmt|;
DECL|field|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_2
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_2
init|=
literal|"Wil van der Aalst and Tammo van Lessen"
decl_stmt|;
DECL|field|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
init|=
literal|"I. Newton"
decl_stmt|;
DECL|field|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
init|=
literal|"I. Newton and J. Maxwell"
decl_stmt|;
DECL|field|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
init|=
literal|"I. Newton and J. Maxwell and A. Einstein"
decl_stmt|;
DECL|field|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_4
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_4
init|=
literal|"I. Newton and J. Maxwell and A. Einstein and N. Bohr"
decl_stmt|;
DECL|field|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_5
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_5
init|=
literal|"I. Newton and J. Maxwell and A. Einstein and N. Bohr and Harry Unknown"
decl_stmt|;
DECL|field|TITLE_STRING_ALL_LOWER_FOUR_SMALL_WORDS_ONE_EN_DASH
specifier|private
specifier|static
specifier|final
name|String
name|TITLE_STRING_ALL_LOWER_FOUR_SMALL_WORDS_ONE_EN_DASH
init|=
literal|"application migration effort in the cloud - the case of cloud platforms"
decl_stmt|;
DECL|field|TITLE_STRING_ALL_LOWER_FIRST_WORD_IN_BRACKETS_TWO_SMALL_WORDS_SMALL_WORD_AFTER_COLON
specifier|private
specifier|static
specifier|final
name|String
name|TITLE_STRING_ALL_LOWER_FIRST_WORD_IN_BRACKETS_TWO_SMALL_WORDS_SMALL_WORD_AFTER_COLON
init|=
literal|"{BPEL} conformance in open source engines: the case of static analysis"
decl_stmt|;
DECL|field|TITLE_STRING_CASED
specifier|private
specifier|static
specifier|final
name|String
name|TITLE_STRING_CASED
init|=
literal|"Process Viewing Patterns"
decl_stmt|;
DECL|field|TITLE_STRING_CASED_ONE_UPPER_WORD_ONE_SMALL_WORD
specifier|private
specifier|static
specifier|final
name|String
name|TITLE_STRING_CASED_ONE_UPPER_WORD_ONE_SMALL_WORD
init|=
literal|"BPMN Conformance in Open Source Engines"
decl_stmt|;
DECL|field|TITLE_STRING_CASED_TWO_SMALL_WORDS_SMALL_WORD_AT_THE_BEGINNING
specifier|private
specifier|static
specifier|final
name|String
name|TITLE_STRING_CASED_TWO_SMALL_WORDS_SMALL_WORD_AT_THE_BEGINNING
init|=
literal|"The Difference Between Graph-Based and Block-Structured Business Process Modelling Languages"
decl_stmt|;
DECL|field|TITLE_STRING_CASED_TWO_SMALL_WORDS_SMALL_WORD_AFTER_COLON
specifier|private
specifier|static
specifier|final
name|String
name|TITLE_STRING_CASED_TWO_SMALL_WORDS_SMALL_WORD_AFTER_COLON
init|=
literal|"Cloud Computing: The Next Revolution in IT"
decl_stmt|;
DECL|field|TITLE_STRING_CASED_TWO_SMALL_WORDS_ONE_CONNECTED_WORD
specifier|private
specifier|static
specifier|final
name|String
name|TITLE_STRING_CASED_TWO_SMALL_WORDS_ONE_CONNECTED_WORD
init|=
literal|"Towards Choreography-based Process Distribution in the Cloud"
decl_stmt|;
DECL|field|TITLE_STRING_CASED_FOUR_SMALL_WORDS_TWO_CONNECTED_WORDS
specifier|private
specifier|static
specifier|final
name|String
name|TITLE_STRING_CASED_FOUR_SMALL_WORDS_TWO_CONNECTED_WORDS
init|=
literal|"On the Measurement of Design-Time Adaptability for Process-Based Systems "
decl_stmt|;
DECL|field|importFormatPreferences
specifier|private
specifier|static
name|ImportFormatPreferences
name|importFormatPreferences
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|importFormatPreferences
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
operator|.
name|getImportFormatPreferences
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAndInAuthorName ()
specifier|public
name|void
name|testAndInAuthorName
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry0
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Simon Holland}}"
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Holland"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAndAuthorNames ()
specifier|public
name|void
name|testAndAuthorNames
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|bibtexString
init|=
literal|"@ARTICLE{whatevery, author={Mari D. Herland and Mona-Iren Hauge and Ingeborg M. Helgeland}}"
decl_stmt|;
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
name|bibtexString
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HerlandHaugeHelgeland"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
operator|.
name|get
argument_list|()
argument_list|,
literal|"authors3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecialLatexCharacterInAuthorName ()
specifier|public
name|void
name|testSpecialLatexCharacterInAuthorName
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Simon Popovi\\v{c}ov\\'{a}}}"
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Popovicova"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for https://sourceforge.net/forum/message.php?msg_id=4498555 Test the Labelmaker and all kind of accents Ã Ã¡      * Ä Ä Ã Ã© Ã Ã­ Ä¹ Äº Å Å Ã Ã³ Å Å Å Å Ã Ãº Ã Ã½ Å¹ Åº      */
annotation|@
name|Test
DECL|method|testMakeLabelAndCheckLegalKeys ()
specifier|public
name|void
name|testMakeLabelAndCheckLegalKeys
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry0
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas KÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Koen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÃÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Aoen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÃÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Eoen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÃÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ioen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas Ä¹Ã¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Loen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÅÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Noen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÃÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ooen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÅÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Roen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÅÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Soen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÃÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Uoen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÃÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Yoen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas Å¹Ã¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Zoen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the Labelmaker and with accent grave Chars to test: "ÃÃÃÃÃ";      */
annotation|@
name|Test
DECL|method|testMakeLabelAndCheckLegalKeysAccentGrave ()
specifier|public
name|void
name|testMakeLabelAndCheckLegalKeysAccentGrave
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry0
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÃÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Aoen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÃÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Eoen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÃÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ioen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÃÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ooen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entry0
operator|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={Andreas ÃÃ¶ning}, year={2000}}"
argument_list|,
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Uoen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry0
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth3"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests if checkLegalKey replaces Non-ASCII chars.      * There are quite a few chars that should be replaced. Perhaps there is a better method than the current.      *      * @see BibtexKeyPatternUtil#checkLegalKey(String)      */
annotation|@
name|Test
DECL|method|testCheckLegalKey ()
specifier|public
name|void
name|testCheckLegalKey
parameter_list|()
block|{
comment|// not tested/ not in hashmap UNICODE_CHARS:
comment|// Å Å   Å Å Å° Å±   Ä¿ Å   Ä¦ Ä§   Ã Ã° Ã Ã¾   Å Å   Ã Ã¦ Ã Ã¸ Ã Ã¥   Æ É Ä Ä   Å® Å¯	Ç¢ Ç£ Ç Ç Ç Ç
comment|//" Ç¢ Ç£ Ç Ç Ç Ç   " +
comment|//"Ä Ä   Å® Å¯  " +
comment|//"Å Å   Å Å Å° Å±   Ä¿ Å   Ä¦ Ä§   Ã Ã° Ã Ã¾   Å Å   Ã Ã¦ Ã Ã¸ Ã Ã¥   Æ É
name|String
name|accents
init|=
literal|"ÃÃ ÃÃ¨ÃÃ¬ÃÃ²ÃÃ¹ Ã Ã¢ Ä Ä Ã Ãª Ä Ä Ä¤ Ä¥ Ã Ã® Ä´ Äµ Ã Ã´ Å Å Ã Ã» Å´ Åµ Å¶ Å·"
decl_stmt|;
name|String
name|expectedResult
init|=
literal|"AaEeIiOoUuAaCcEeGgHhIiJjOoSsUuWwYy"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|accents
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|accents
operator|=
literal|"ÃÃ¤ÃÃ«ÃÃ¯ÃÃ¶ÃÃ¼Å¸Ã¿"
expr_stmt|;
name|expectedResult
operator|=
literal|"AeaeEeIiOeoeUeueYy"
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|accents
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|accents
operator|=
literal|"Ã Ã§ Ä¢ Ä£ Ä¶ Ä· Ä» Ä¼ Å Å Å Å Å Å Å¢ Å£"
expr_stmt|;
name|expectedResult
operator|=
literal|"CcGgKkLlNnRrSsTt"
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|accents
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|accents
operator|=
literal|"Ä Ä Ä Ä Ä Ä Ä¬ Ä­ Å Å Å¬ Å­"
expr_stmt|;
name|expectedResult
operator|=
literal|"AaEeGgIiOoUu"
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|accents
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|accents
operator|=
literal|"Ä Ä Ä Ä Ä  Ä¡ Ä° Ä± Å» Å¼"
expr_stmt|;
name|expectedResult
operator|=
literal|"CcEeGgIiZz"
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|accents
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|accents
operator|=
literal|"Ä Ä Ä Ä Ä® Ä¯ Çª Ç« Å² Å³"
expr_stmt|;
name|expectedResult
operator|=
literal|"AaEeIiOoUu"
expr_stmt|;
comment|// O or Q? o or q?
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|accents
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|accents
operator|=
literal|"Ä Ä Ä Ä Äª Ä« Å Å Åª Å« È² È³"
expr_stmt|;
name|expectedResult
operator|=
literal|"AaEeIiOoUuYy"
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|accents
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|accents
operator|=
literal|"Ç Ç Ä Ä Ä Ä Ä Ä Ç Ç Ä½ Ä¾ Å Å Ç Ç Å Å Å  Å¡ Å¤ Å¥ Ç Ç Å½ Å¾"
expr_stmt|;
name|expectedResult
operator|=
literal|"AaCcDdEeIiLlNnOoRrSsTtUuZz"
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|accents
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expectedResult
operator|=
literal|"AaEeIiNnOoUuYy"
expr_stmt|;
name|accents
operator|=
literal|"ÃÃ£áº¼áº½Ä¨Ä©ÃÃ±ÃÃµÅ¨Å©á»¸á»¹"
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|accents
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|accents
operator|=
literal|"á¸ á¸ á¸¤ á¸¥ á¸¶ á¸· á¸¸ á¸¹ á¹ á¹ á¹ á¹ á¹ á¹ á¹ á¹ á¹¢ á¹£ á¹¬ á¹­"
expr_stmt|;
name|expectedResult
operator|=
literal|"DdHhLlLlMmNnRrRrSsTt"
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|accents
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|totest
init|=
literal|"Ã Ã  Ã Ã¨ Ã Ã¬ Ã Ã² Ã Ã¹   Ã Ã¢ Ä Ä Ã Ãª Ä Ä Ä¤ Ä¥ Ã Ã® Ä´ Äµ Ã Ã´ Å Å Ã Ã» Å´ Åµ Å¶ Å·  Ã Ã¤ Ã Ã« Ã Ã¯ Ã Ã¶ Ã Ã¼ Å¸ Ã¿    "
operator|+
literal|"Ã Ã£ áº¼ áº½ Ä¨ Ä© Ã Ã± Ã Ãµ Å¨ Å© á»¸ á»¹   Ã Ã§ Ä¢ Ä£ Ä¶ Ä· Ä» Ä¼ Å Å Å Å Å Å Å¢ Å£"
operator|+
literal|" Ç Ç Ä Ä Ä Ä Ä Ä Ç Ç Ä½ Ä¾ Å Å Ç Ç Å Å Å  Å¡ Å¤ Å¥ Ç Ç Å½ Å¾   "
operator|+
literal|"Ä Ä Ä Ä Äª Ä« Å Å Åª Å« È² È³"
operator|+
literal|"Ä Ä Ä Ä Ä Ä Ä¬ Ä­ Å Å Å¬ Å­   "
operator|+
literal|"Ä Ä Ä Ä Ä  Ä¡ Ä° Ä± Å» Å¼   Ä Ä Ä Ä Ä® Ä¯ Çª Ç« Å² Å³   "
operator|+
literal|"á¸ á¸ á¸¤ á¸¥ á¸¶ á¸· á¸¸ á¸¹ á¹ á¹ á¹ á¹ á¹ á¹ á¹ á¹ á¹¢ á¹£ á¹¬ á¹­   "
decl_stmt|;
name|String
name|expectedResults
init|=
literal|"AaEeIiOoUuAaCcEeGgHhIiJjOoSsUuWwYyAeaeEeIiOeoeUeueYy"
operator|+
literal|"AaEeIiNnOoUuYyCcGgKkLlNnRrSsTt"
operator|+
literal|"AaCcDdEeIiLlNnOoRrSsTtUuZz"
operator|+
literal|"AaEeIiOoUuYy"
operator|+
literal|"AaEeGgIiOoUu"
operator|+
literal|"CcEeGgIiZzAaEeIiOoUu"
operator|+
literal|"DdHhLlLlMmNnRrRrSsTt"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedResults
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|totest
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFirstAuthor ()
specifier|public
name|void
name|testFirstAuthor
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthor
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthor
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
comment|// https://sourceforge.net/forum/message.php?msg_id=4498555
name|assertEquals
argument_list|(
literal|"K{\\\"o}ning"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthor
argument_list|(
literal|"K{\\\"o}ning"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthor
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testFirstAuthorNull ()
specifier|public
name|void
name|testFirstAuthorNull
parameter_list|()
block|{
name|BibtexKeyPatternUtil
operator|.
name|firstAuthor
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUniversity ()
specifier|public
name|void
name|testUniversity
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={{Link{\\\"{o}}ping University}}}"
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"UniLinkoeping"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDepartment ()
specifier|public
name|void
name|testDepartment
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={{Link{\\\"{o}}ping University, Department of Electrical Engineering}}}"
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"UniLinkoepingEE"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchool ()
specifier|public
name|void
name|testSchool
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={{Link{\\\"{o}}ping University, School of Computer Engineering}}}"
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"UniLinkoepingCE"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstituteOfTechnology ()
specifier|public
name|void
name|testInstituteOfTechnology
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@ARTICLE{kohn, author={{Massachusetts Institute of Technology}}}"
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"MIT"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
operator|.
name|get
argument_list|()
argument_list|,
literal|"auth"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthIniN ()
specifier|public
name|void
name|testAuthIniN
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"NMEB"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_5
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NMEB"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_4
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NeME"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NeMa"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Newt"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"N"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testAuthIniNNull ()
specifier|public
name|void
name|testAuthIniNNull
parameter_list|()
block|{
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
literal|null
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthIniNEmptyReturnsEmpty ()
specifier|public
name|void
name|testAuthIniNEmptyReturnsEmpty
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authIniN
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests  [auth.auth.ea]      */
annotation|@
name|Test
DECL|method|authAuthEa ()
specifier|public
name|void
name|authAuthEa
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authAuthEa
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Newton.Maxwell"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authAuthEa
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Newton.Maxwell.ea"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authAuthEa
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthEaEmptyReturnsEmpty ()
specifier|public
name|void
name|testAuthEaEmptyReturnsEmpty
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authAuthEa
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the [auth.etal] and [authEtAl] patterns      */
annotation|@
name|Test
DECL|method|testAuthEtAl ()
specifier|public
name|void
name|testAuthEtAl
parameter_list|()
block|{
comment|// tests taken from the comments
comment|// [auth.etal]
name|String
name|delim
init|=
literal|"."
decl_stmt|;
name|String
name|append
init|=
literal|".etal"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Newton.etal"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authEtal
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_3
argument_list|,
name|delim
argument_list|,
name|append
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Newton.Maxwell"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authEtal
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_2
argument_list|,
name|delim
argument_list|,
name|append
argument_list|)
argument_list|)
expr_stmt|;
comment|// [authEtAl]
name|delim
operator|=
literal|""
expr_stmt|;
name|append
operator|=
literal|"EtAl"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtonEtAl"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authEtal
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_3
argument_list|,
name|delim
argument_list|,
name|append
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtonMaxwell"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authEtal
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_2
argument_list|,
name|delim
argument_list|,
name|append
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the [authshort] pattern      */
annotation|@
name|Test
DECL|method|testAuthShort ()
specifier|public
name|void
name|testAuthShort
parameter_list|()
block|{
comment|// tests taken from the comments
name|assertEquals
argument_list|(
literal|"NME+"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authshort
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NME"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authshort
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NM"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authshort
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authshort
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthShortEmptyReturnsEmpty ()
specifier|public
name|void
name|testAuthShortEmptyReturnsEmpty
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authshort
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the [authN_M] pattern      */
annotation|@
name|Test
DECL|method|authNM ()
specifier|public
name|void
name|authNM
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"N"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authNofMth
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Max"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authNofMth
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authNofMth
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bo"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authNofMth
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_4
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bohr"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authNofMth
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_5
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Aal"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authNofMth
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Less"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authNofMth
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_2
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authNofMth
argument_list|(
literal|""
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|authNMThrowsNPE ()
specifier|public
name|void
name|authNMThrowsNPE
parameter_list|()
block|{
name|BibtexKeyPatternUtil
operator|.
name|authNofMth
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests [authForeIni]      */
annotation|@
name|Test
DECL|method|firstAuthorForenameInitials ()
specifier|public
name|void
name|firstAuthorForenameInitials
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"I"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthorForenameInitials
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"I"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthorForenameInitials
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"I"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthorForenameInitials
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"I"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthorForenameInitials
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests [authFirstFull]      */
annotation|@
name|Test
DECL|method|firstAuthorVonAndLast ()
specifier|public
name|void
name|firstAuthorVonAndLast
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"vanderAalst"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthorVonAndLast
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"vanderAalst"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthorVonAndLast
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|firstAuthorVonAndLastNoVonInName ()
specifier|public
name|void
name|firstAuthorVonAndLastNoVonInName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthorVonAndLast
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstAuthorVonAndLast
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests [authors]      */
annotation|@
name|Test
DECL|method|testAllAuthors ()
specifier|public
name|void
name|testAllAuthors
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|allAuthors
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtonMaxwell"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|allAuthors
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtonMaxwellEinstein"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|allAuthors
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests [authorsAlpha]      */
annotation|@
name|Test
DECL|method|authorsAlpha ()
specifier|public
name|void
name|authorsAlpha
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"New"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authorsAlpha
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NM"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authorsAlpha
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NME"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authorsAlpha
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NMEB"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authorsAlpha
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NME+"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authorsAlpha
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"vdAal"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authorsAlpha
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"vdAvL"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|authorsAlpha
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests [authorLast]      */
annotation|@
name|Test
DECL|method|lastAuthor ()
specifier|public
name|void
name|lastAuthor
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthor
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Maxwell"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthor
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Einstein"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthor
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bohr"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthor
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthor
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Aalst"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthor
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lessen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthor
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests [authorLastForeIni]      */
annotation|@
name|Test
DECL|method|lastAuthorForenameInitials ()
specifier|public
name|void
name|lastAuthorForenameInitials
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"I"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthorForenameInitials
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"J"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthorForenameInitials
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthorForenameInitials
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"N"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthorForenameInitials
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"H"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthorForenameInitials
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"W"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthorForenameInitials
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"T"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastAuthorForenameInitials
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests [authorIni]      */
annotation|@
name|Test
DECL|method|oneAuthorPlusIni ()
specifier|public
name|void
name|oneAuthorPlusIni
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Newto"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|oneAuthorPlusIni
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtoM"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|oneAuthorPlusIni
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtoME"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|oneAuthorPlusIni
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtoMEB"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|oneAuthorPlusIni
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtoMEBU"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|oneAuthorPlusIni
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Aalst"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|oneAuthorPlusIni
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AalstL"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|oneAuthorPlusIni
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_FULL_LASTNAME_FULL_WITH_VAN_COUNT_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the [authorsN] pattern. -> [authors1]      */
annotation|@
name|Test
DECL|method|testNAuthors1 ()
specifier|public
name|void
name|testNAuthors1
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|nAuthors
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtonEtAl"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|nAuthors
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtonEtAl"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|nAuthors
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtonEtAl"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|nAuthors
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_4
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNAuthors1EmptyReturnEmpty ()
specifier|public
name|void
name|testNAuthors1EmptyReturnEmpty
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|nAuthors
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the [authorsN] pattern. -> [authors3]      */
annotation|@
name|Test
DECL|method|testNAuthors3 ()
specifier|public
name|void
name|testNAuthors3
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Newton"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|nAuthors
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtonMaxwell"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|nAuthors
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtonMaxwellEinstein"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|nAuthors
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewtonMaxwellEinsteinEtAl"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|nAuthors
argument_list|(
name|AUTHOR_STRING_FIRSTNAME_INITIAL_LASTNAME_FULL_COUNT_4
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFirstPage ()
specifier|public
name|void
name|testFirstPage
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"7"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstPage
argument_list|(
literal|"7--27"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"27"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstPage
argument_list|(
literal|"--27"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstPage
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"42"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstPage
argument_list|(
literal|"42--111"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"7"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstPage
argument_list|(
literal|"7,41,73--97"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"7"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstPage
argument_list|(
literal|"41,7,73--97"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"43"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|firstPage
argument_list|(
literal|"43+"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testFirstPageNull ()
specifier|public
name|void
name|testFirstPageNull
parameter_list|()
block|{
name|BibtexKeyPatternUtil
operator|.
name|firstPage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLastPage ()
specifier|public
name|void
name|testLastPage
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"27"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastPage
argument_list|(
literal|"7--27"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"27"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastPage
argument_list|(
literal|"--27"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastPage
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"111"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastPage
argument_list|(
literal|"42--111"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"97"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastPage
argument_list|(
literal|"7,41,73--97"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"97"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastPage
argument_list|(
literal|"7,41,97--73"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"43"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|lastPage
argument_list|(
literal|"43+"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testLastPageNull ()
specifier|public
name|void
name|testLastPageNull
parameter_list|()
block|{
name|BibtexKeyPatternUtil
operator|.
name|lastPage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests [veryShortTitle]      */
annotation|@
name|Test
DECL|method|veryShortTitle ()
specifier|public
name|void
name|veryShortTitle
parameter_list|()
block|{
comment|// veryShortTitle is getTitleWords with "1" as count
name|int
name|count
init|=
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_ALL_LOWER_FOUR_SMALL_WORDS_ONE_EN_DASH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BPEL"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_ALL_LOWER_FIRST_WORD_IN_BRACKETS_TWO_SMALL_WORDS_SMALL_WORD_AFTER_COLON
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Process"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BPMN"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED_ONE_UPPER_WORD_ONE_SMALL_WORD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Difference"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED_TWO_SMALL_WORDS_SMALL_WORD_AT_THE_BEGINNING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cloud"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED_TWO_SMALL_WORDS_SMALL_WORD_AFTER_COLON
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Towards"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED_TWO_SMALL_WORDS_ONE_CONNECTED_WORD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Measurement"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED_FOUR_SMALL_WORDS_TWO_CONNECTED_WORDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests [shortTitle]      */
annotation|@
name|Test
DECL|method|shortTitle ()
specifier|public
name|void
name|shortTitle
parameter_list|()
block|{
comment|// veryShortTitle is getTitleWords with "3" as count
name|int
name|count
init|=
literal|3
decl_stmt|;
name|assertEquals
argument_list|(
literal|"applicationmigrationeffort"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_ALL_LOWER_FOUR_SMALL_WORDS_ONE_EN_DASH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BPELconformanceopen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_ALL_LOWER_FIRST_WORD_IN_BRACKETS_TWO_SMALL_WORDS_SMALL_WORD_AFTER_COLON
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ProcessViewingPatterns"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BPMNConformanceOpen"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED_ONE_UPPER_WORD_ONE_SMALL_WORD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DifferenceGraphBased"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED_TWO_SMALL_WORDS_SMALL_WORD_AT_THE_BEGINNING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CloudComputingNext"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED_TWO_SMALL_WORDS_SMALL_WORD_AFTER_COLON
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TowardsChoreographybased"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED_TWO_SMALL_WORDS_ONE_CONNECTED_WORD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MeasurementDesignTime"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|getTitleWords
argument_list|(
name|count
argument_list|,
name|TITLE_STRING_CASED_FOUR_SMALL_WORDS_TWO_CONNECTED_WORDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|keywordNKeywordsSeparatedBySpace ()
specifier|public
name|void
name|keywordNKeywordsSeparatedBySpace
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
literal|"w1, w2a w2b, w3"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
argument_list|,
literal|"keyword1"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"w1"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// check keywords with space
name|result
operator|=
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
argument_list|,
literal|"keyword2"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"w2a w2b"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// check out of range
name|result
operator|=
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
argument_list|,
literal|"keyword4"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|keywordsNKeywordsSeparatedBySpace ()
specifier|public
name|void
name|keywordsNKeywordsSeparatedBySpace
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
literal|"w1, w2a w2b, w3"
argument_list|)
expr_stmt|;
comment|// all keywords
name|String
name|result
init|=
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
argument_list|,
literal|"keywords"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"w1w2aw2bw3"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// check keywords with space
name|result
operator|=
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
argument_list|,
literal|"keywords2"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"w1w2aw2b"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// check out of range
name|result
operator|=
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
argument_list|,
literal|"keywords55"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"w1w2aw2bw3"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckLegalKeyEnforceLegal ()
specifier|public
name|void
name|testCheckLegalKeyEnforceLegal
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"AAAA"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
literal|"AA AA"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SPECIALCHARS"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
literal|"SPECIAL CHARS#{\\\"}~,^"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
literal|"\n\t\r"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckLegalKeyDoNotEnforceLegal ()
specifier|public
name|void
name|testCheckLegalKeyDoNotEnforceLegal
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"AAAA"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
literal|"AA AA"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SPECIALCHARS#~^"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
literal|"SPECIAL CHARS#{\\\"}~,^"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
literal|"\n\t\r"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckLegalNullInNullOut ()
specifier|public
name|void
name|testCheckLegalNullInNullOut
parameter_list|()
block|{
name|assertNull
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplyModifiers ()
specifier|public
name|void
name|testApplyModifiers
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Green Scheduling of Whatever"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GSW"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
argument_list|,
literal|"shorttitleINI"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GreenSchedulingWhatever"
argument_list|,
name|BibtexKeyPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
argument_list|,
literal|"shorttitle"
argument_list|,
literal|','
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

