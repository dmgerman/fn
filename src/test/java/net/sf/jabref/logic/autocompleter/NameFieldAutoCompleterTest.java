begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.autocompleter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|autocompleter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_class
DECL|class|NameFieldAutoCompleterTest
specifier|public
class|class
name|NameFieldAutoCompleterTest
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|initAutoCompleterWithNullPreferenceThrowsException ()
specifier|public
name|void
name|initAutoCompleterWithNullPreferenceThrowsException
parameter_list|()
block|{
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|initAutoCompleterWithNullFieldThrowsException ()
specifier|public
name|void
name|initAutoCompleterWithNullFieldThrowsException
parameter_list|()
block|{
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|null
argument_list|,
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeWithoutAddingAnythingReturnsNothing ()
specifier|public
name|void
name|completeWithoutAddingAnythingReturnsNothing
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeAfterAddingNullReturnsNothing ()
specifier|public
name|void
name|completeAfterAddingNullReturnsNothing
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeAfterAddingEmptyEntryReturnsNothing ()
specifier|public
name|void
name|completeAfterAddingEmptyEntryReturnsNothing
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeAfterAddingEntryWithoutFieldReturnsNothing ()
specifier|public
name|void
name|completeAfterAddingEntryWithoutFieldReturnsNothing
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"testTitle"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeNameReturnsName ()
specifier|public
name|void
name|completeNameReturnsName
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Testname"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Testname"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Testname"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginnigOfNameReturnsName ()
specifier|public
name|void
name|completeBeginnigOfNameReturnsName
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Testname"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Testname"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeLowercaseNameReturnsName ()
specifier|public
name|void
name|completeLowercaseNameReturnsName
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Testname"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Testname"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeNullReturnsNothing ()
specifier|public
name|void
name|completeNullReturnsNothing
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"testKey"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeEmptyStringReturnsNothing ()
specifier|public
name|void
name|completeEmptyStringReturnsNothing
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"testKey"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeReturnsMultipleResults ()
specifier|public
name|void
name|completeReturnsMultipleResults
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entryOne
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entryOne
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"testNameOne"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entryOne
argument_list|)
expr_stmt|;
name|BibtexEntry
name|entryTwo
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entryTwo
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"testNameTwo"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entryTwo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"testName"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testNameOne"
argument_list|,
literal|"testNameTwo"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeTooShortInputReturnsNothing ()
specifier|public
name|void
name|completeTooShortInputReturnsNothing
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|preferences
operator|.
name|getShortestLengthToComplete
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Testname"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completePartOfNameReturnsNothing ()
specifier|public
name|void
name|completePartOfNameReturnsNothing
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Vassilis Kostakos"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"osta"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfFirstNameReturnsCompleteName ()
specifier|public
name|void
name|completeBeginningOfFirstNameReturnsCompleteName
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Vassilis Kostakos"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Vas"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Vassilis Kostakos"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfFirstNameReturnsCompleteNameWithJr ()
specifier|public
name|void
name|completeBeginningOfFirstNameReturnsCompleteNameWithJr
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Reagle, Jr., Joseph M."
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Jos"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Joseph M. Reagle, Jr."
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfFirstNameReturnsCompleteNameWithVon ()
specifier|public
name|void
name|completeBeginningOfFirstNameReturnsCompleteNameWithVon
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Eric von Hippel"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Eric"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Eric von Hippel"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfLastNameReturnsNameWithUmlauts ()
specifier|public
name|void
name|completeBeginningOfLastNameReturnsNameWithUmlauts
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|preferences
operator|.
name|getFirstnameMode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|AutoCompleteFirstNameMode
operator|.
name|ONLY_FULL
argument_list|)
expr_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Honig BÃ¤r"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"BÃ¤"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"BÃ¤r, Honig"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfLastNameReturnsNameAndNameWithInitialFirstname ()
specifier|public
name|void
name|completeBeginningOfLastNameReturnsNameAndNameWithInitialFirstname
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Vassilis Kostakos"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Kosta"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Kostakos, V."
argument_list|,
literal|"Kostakos, Vassilis"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfLastNameReturnsNameIfPref ()
specifier|public
name|void
name|completeBeginningOfLastNameReturnsNameIfPref
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|preferences
operator|.
name|getFirstnameMode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|AutoCompleteFirstNameMode
operator|.
name|ONLY_FULL
argument_list|)
expr_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Vassilis Kostakos"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Kosta"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Kostakos, Vassilis"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfLastNameReturnsNameWithJrIfPref ()
specifier|public
name|void
name|completeBeginningOfLastNameReturnsNameWithJrIfPref
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|preferences
operator|.
name|getFirstnameMode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|AutoCompleteFirstNameMode
operator|.
name|ONLY_ABBREVIATED
argument_list|)
expr_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Reagle, Jr., Joseph M."
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Rea"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Reagle, Jr., J. M."
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfLastNameReturnsNameWithInitialFirstnameIfPref ()
specifier|public
name|void
name|completeBeginningOfLastNameReturnsNameWithInitialFirstnameIfPref
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|preferences
operator|.
name|getFirstnameMode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|AutoCompleteFirstNameMode
operator|.
name|ONLY_ABBREVIATED
argument_list|)
expr_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Vassilis Kostakos"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Kosta"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Kostakos, V."
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeVonReturnsNameWithInitialFirstnameIfPref ()
specifier|public
name|void
name|completeVonReturnsNameWithInitialFirstnameIfPref
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|preferences
operator|.
name|getFirstnameMode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|AutoCompleteFirstNameMode
operator|.
name|ONLY_ABBREVIATED
argument_list|)
expr_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Eric von Hippel"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"von"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"von Hippel, E."
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfNameReturnsCompleteName ()
specifier|public
name|void
name|completeBeginningOfNameReturnsCompleteName
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Vassilis Kostakos"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Kostakos, Va"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Kostakos, Vassilis"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfLastNameReturnsNothingIfPref ()
specifier|public
name|void
name|completeBeginningOfLastNameReturnsNothingIfPref
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|preferences
operator|.
name|getOnlyCompleteFirstLast
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Vassilis Kostakos"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Kosta"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfFirstNameReturnsNothingIfPref ()
specifier|public
name|void
name|completeBeginningOfFirstNameReturnsNothingIfPref
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|preferences
operator|.
name|getOnlyCompleteLastFirst
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Vassilis Kostakos"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Vas"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeShortNameReturnsName ()
specifier|public
name|void
name|completeShortNameReturnsName
parameter_list|()
block|{
name|AutoCompletePreferences
name|preferences
init|=
name|mock
argument_list|(
name|AutoCompletePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|NameFieldAutoCompleter
name|autoCompleter
init|=
operator|new
name|NameFieldAutoCompleter
argument_list|(
literal|"field"
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"nam"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"n"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"nam"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

