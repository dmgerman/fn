begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.layout.format
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|WrapFileLinksTest
specifier|public
class|class
name|WrapFileLinksTest
block|{
DECL|field|formatter
specifier|private
name|WrapFileLinks
name|formatter
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|FileLinkPreferences
name|preferences
init|=
operator|new
name|FileLinkPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|formatter
operator|=
operator|new
name|WrapFileLinks
argument_list|(
name|preferences
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmpty ()
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNull ()
specifier|public
name|void
name|testNull
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testNoFormatSetNonEmptyString ()
specifier|public
name|void
name|testNoFormatSetNonEmptyString
parameter_list|()
block|{
name|formatter
operator|.
name|format
argument_list|(
literal|"test.pdf"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileExtension ()
specifier|public
name|void
name|testFileExtension
parameter_list|()
block|{
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\x"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pdf"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"test.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileExtensionNoExtension ()
specifier|public
name|void
name|testFileExtensionNoExtension
parameter_list|()
block|{
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\x"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPlainTextString ()
specifier|public
name|void
name|testPlainTextString
parameter_list|()
block|{
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"test.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDescription ()
specifier|public
name|void
name|testDescription
parameter_list|()
block|{
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test file"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Test file:test.pdf:PDF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDescriptionNoDescription ()
specifier|public
name|void
name|testDescriptionNoDescription
parameter_list|()
block|{
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"test.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testType ()
specifier|public
name|void
name|testType
parameter_list|()
block|{
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\f"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PDF"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Test file:test.pdf:PDF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTypeNoType ()
specifier|public
name|void
name|testTypeNoType
parameter_list|()
block|{
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\f"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"test.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIterator ()
specifier|public
name|void
name|testIterator
parameter_list|()
block|{
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\i"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Test file:test.pdf:PDF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIteratorTwoItems ()
specifier|public
name|void
name|testIteratorTwoItems
parameter_list|()
block|{
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\i\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1\n2\n"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Test file:test.pdf:PDF;test2.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndingBracket ()
specifier|public
name|void
name|testEndingBracket
parameter_list|()
block|{
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"(\\d)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(Test file)"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Test file:test.pdf:PDF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPath ()
specifier|public
name|void
name|testPath
parameter_list|()
throws|throws
name|IOException
block|{
name|FileLinkPreferences
name|preferences
init|=
operator|new
name|FileLinkPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"src/test/resources/pdfs/"
argument_list|)
argument_list|)
decl_stmt|;
name|formatter
operator|=
operator|new
name|WrapFileLinks
argument_list|(
name|preferences
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\p"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"src/test/resources/pdfs/encrypted.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Preferences:encrypted.pdf:PDF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPathFallBackToGeneratedDir ()
specifier|public
name|void
name|testPathFallBackToGeneratedDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FileLinkPreferences
name|preferences
init|=
operator|new
name|FileLinkPreferences
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"src/test/resources/pdfs/"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|formatter
operator|=
operator|new
name|WrapFileLinks
argument_list|(
name|preferences
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\p"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"src/test/resources/pdfs/encrypted.pdf"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Preferences:encrypted.pdf:PDF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPathReturnsRelativePathIfNotFound ()
specifier|public
name|void
name|testPathReturnsRelativePathIfNotFound
parameter_list|()
block|{
name|FileLinkPreferences
name|preferences
init|=
operator|new
name|FileLinkPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"src/test/resources/pdfs/"
argument_list|)
argument_list|)
decl_stmt|;
name|formatter
operator|=
operator|new
name|WrapFileLinks
argument_list|(
name|preferences
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\p"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test.pdf"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Preferences:test.pdf:PDF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelativePath ()
specifier|public
name|void
name|testRelativePath
parameter_list|()
block|{
name|formatter
operator|.
name|setArgument
argument_list|(
literal|"\\r"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test.pdf"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Test file:test.pdf:PDF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

