begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2003-2016 JabRef contributors.  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|AbstractGroupTest
specifier|public
class|class
name|AbstractGroupTest
block|{
DECL|field|group
specifier|private
name|AbstractGroup
name|group
decl_stmt|;
DECL|field|entries
specifier|private
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|group
operator|=
name|mock
argument_list|(
name|AbstractGroup
operator|.
name|class
argument_list|,
name|Mockito
operator|.
name|CALLS_REAL_METHODS
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|BibEntry
argument_list|()
operator|.
name|withField
argument_list|(
literal|"author"
argument_list|,
literal|"author1 and author2"
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|BibEntry
argument_list|()
operator|.
name|withField
argument_list|(
literal|"author"
argument_list|,
literal|"author1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|numberOfHitsReturnsZeroForEmptyList ()
specifier|public
name|void
name|numberOfHitsReturnsZeroForEmptyList
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|group
operator|.
name|numberOfHits
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|numberOfHitsCallsContainsToDetermineSingleHit ()
specifier|public
name|void
name|numberOfHitsCallsContainsToDetermineSingleHit
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|group
operator|.
name|contains
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|BibEntry
operator|.
name|class
argument_list|)
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"author2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|numberOfHits
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|numberOfHitsCallsContainsToDetermineMultipleHits ()
specifier|public
name|void
name|numberOfHitsCallsContainsToDetermineMultipleHits
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|group
operator|.
name|contains
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|BibEntry
operator|.
name|class
argument_list|)
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"author1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|group
operator|.
name|numberOfHits
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

