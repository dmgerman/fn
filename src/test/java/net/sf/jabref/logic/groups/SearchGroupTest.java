begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|SearchGroupTest
specifier|public
class|class
name|SearchGroupTest
block|{
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContains ()
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|SearchGroup
name|group
init|=
operator|new
name|SearchGroup
argument_list|(
literal|"myExplicitGroup"
argument_list|,
literal|"review"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SearchGroup:myExplicitGroup;0;review;1;1;"
argument_list|,
name|group
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|addKeyword
argument_list|(
literal|"review"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToStringSimple ()
specifier|public
name|void
name|testToStringSimple
parameter_list|()
block|{
name|SearchGroup
name|group
init|=
operator|new
name|SearchGroup
argument_list|(
literal|"myExplicitGroup"
argument_list|,
literal|"author=harrer"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SearchGroup:myExplicitGroup;0;author=harrer;1;1;"
argument_list|,
name|group
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToStringComplex ()
specifier|public
name|void
name|testToStringComplex
parameter_list|()
block|{
name|SearchGroup
name|group
init|=
operator|new
name|SearchGroup
argument_list|(
literal|"myExplicitGroup"
argument_list|,
literal|"author=\"harrer\""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SearchGroup:myExplicitGroup;2;author=\"harrer\";1;0;"
argument_list|,
name|group
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

