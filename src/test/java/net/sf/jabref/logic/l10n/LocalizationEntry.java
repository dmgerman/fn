begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.l10n
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|LocalizationEntry
class|class
name|LocalizationEntry
implements|implements
name|Comparable
argument_list|<
name|LocalizationEntry
argument_list|>
block|{
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|bundle
specifier|private
specifier|final
name|LocalizationBundle
name|bundle
decl_stmt|;
DECL|method|LocalizationEntry (Path path, String key, LocalizationBundle bundle)
name|LocalizationEntry
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|key
parameter_list|,
name|LocalizationBundle
name|bundle
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
block|}
DECL|method|getPath ()
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s___%s"
argument_list|,
name|bundle
argument_list|,
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|(
name|o
operator|==
literal|null
operator|)
operator|||
operator|(
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LocalizationEntry
name|that
init|=
operator|(
name|LocalizationEntry
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|?
operator|!
name|key
operator|.
name|equals
argument_list|(
name|that
operator|.
name|key
argument_list|)
else|:
name|that
operator|.
name|key
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|bundle
operator|==
name|that
operator|.
name|bundle
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|key
argument_list|,
name|bundle
argument_list|)
return|;
block|}
DECL|method|getBundle ()
specifier|public
name|LocalizationBundle
name|getBundle
parameter_list|()
block|{
return|return
name|bundle
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s %s (%s)"
argument_list|,
name|path
argument_list|,
name|key
argument_list|,
name|bundle
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (LocalizationEntry o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|LocalizationEntry
name|o
parameter_list|)
block|{
return|return
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

