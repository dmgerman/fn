begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.net
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|CookieTest
specifier|public
class|class
name|CookieTest
block|{
annotation|@
name|Test
DECL|method|testCookieHyphenFormat ()
specifier|public
name|void
name|testCookieHyphenFormat
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hhh"
argument_list|)
argument_list|,
literal|"name=TestCookie; expires=Tue, 25-Jul-2017 16:43:15 GMT"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCookieHyphenTwoDigitYearFormat ()
specifier|public
name|void
name|testCookieHyphenTwoDigitYearFormat
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hhh"
argument_list|)
argument_list|,
literal|"name=TestCookie; expires=Tue, 25-Jul-17 16:43:15 GMT"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCookieSpaceFormat ()
specifier|public
name|void
name|testCookieSpaceFormat
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hhh"
argument_list|)
argument_list|,
literal|"name=TestCookie; expires=Tue, 25 Jul 2017 16:43:15 GMT"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHasExpiredFalse ()
specifier|public
name|void
name|testHasExpiredFalse
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hhh"
argument_list|)
argument_list|,
literal|"name=TestCookie; expires=Tue, 25-Jul-45 16:43:15 GMT"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cookie
operator|.
name|hasExpired
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHasExpiredTrue ()
specifier|public
name|void
name|testHasExpiredTrue
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hhh"
argument_list|)
argument_list|,
literal|"name=Nicholas; expires=Sat, 02 May 2009 23:38:25 GMT"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cookie
operator|.
name|hasExpired
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

