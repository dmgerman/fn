begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.integrity
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|id
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|IntegrityCheckTest
specifier|public
class|class
name|IntegrityCheckTest
block|{
annotation|@
name|Test
DECL|method|testYearChecks ()
specifier|public
name|void
name|testYearChecks
parameter_list|()
block|{
name|assertCorrect
argument_list|(
literal|"2014"
argument_list|,
name|IntegrityCheck
operator|.
name|YEAR_CHECKER
argument_list|)
expr_stmt|;
name|assertCorrect
argument_list|(
literal|"1986"
argument_list|,
name|IntegrityCheck
operator|.
name|YEAR_CHECKER
argument_list|)
expr_stmt|;
name|assertWrong
argument_list|(
literal|"abc"
argument_list|,
name|IntegrityCheck
operator|.
name|YEAR_CHECKER
argument_list|)
expr_stmt|;
name|assertWrong
argument_list|(
literal|"86"
argument_list|,
name|IntegrityCheck
operator|.
name|YEAR_CHECKER
argument_list|)
expr_stmt|;
name|assertWrong
argument_list|(
literal|"204"
argument_list|,
name|IntegrityCheck
operator|.
name|YEAR_CHECKER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBraketChecks ()
specifier|public
name|void
name|testBraketChecks
parameter_list|()
block|{
name|assertCorrect
argument_list|(
literal|"x"
argument_list|,
name|IntegrityCheck
operator|.
name|BRACKET_CHECKER
argument_list|)
expr_stmt|;
name|assertCorrect
argument_list|(
literal|"{x}"
argument_list|,
name|IntegrityCheck
operator|.
name|BRACKET_CHECKER
argument_list|)
expr_stmt|;
name|assertCorrect
argument_list|(
literal|"{x}x{}x{{}}"
argument_list|,
name|IntegrityCheck
operator|.
name|BRACKET_CHECKER
argument_list|)
expr_stmt|;
name|assertWrong
argument_list|(
literal|"{x}x{}}x{{}}"
argument_list|,
name|IntegrityCheck
operator|.
name|BRACKET_CHECKER
argument_list|)
expr_stmt|;
name|assertWrong
argument_list|(
literal|"}"
argument_list|,
name|IntegrityCheck
operator|.
name|BRACKET_CHECKER
argument_list|)
expr_stmt|;
name|assertWrong
argument_list|(
literal|"{"
argument_list|,
name|IntegrityCheck
operator|.
name|BRACKET_CHECKER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|regexTest ()
specifier|public
name|void
name|regexTest
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"N,NN"
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^, ]+"
argument_list|)
operator|.
name|matcher
argument_list|(
literal|"Knuth, Donald E. "
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"N"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthorNameChecks ()
specifier|public
name|void
name|testAuthorNameChecks
parameter_list|()
block|{
name|assertCorrect
argument_list|(
literal|""
argument_list|,
name|IntegrityCheck
operator|.
name|AUTHOR_NAME_CHECKER
argument_list|)
expr_stmt|;
name|assertCorrect
argument_list|(
literal|"Knuth"
argument_list|,
name|IntegrityCheck
operator|.
name|AUTHOR_NAME_CHECKER
argument_list|)
expr_stmt|;
name|assertCorrect
argument_list|(
literal|"   Knuth, Donald E. "
argument_list|,
name|IntegrityCheck
operator|.
name|AUTHOR_NAME_CHECKER
argument_list|)
expr_stmt|;
name|assertCorrect
argument_list|(
literal|"Knuth, Donald E. and Kurt Cobain and A. Einstein"
argument_list|,
name|IntegrityCheck
operator|.
name|AUTHOR_NAME_CHECKER
argument_list|)
expr_stmt|;
name|assertCorrect
argument_list|(
literal|"Donald E. Knuth and Kurt Cobain and A. Einstein"
argument_list|,
name|IntegrityCheck
operator|.
name|AUTHOR_NAME_CHECKER
argument_list|)
expr_stmt|;
name|assertWrong
argument_list|(
literal|", and Kurt Cobain and A. Einstein"
argument_list|,
name|IntegrityCheck
operator|.
name|AUTHOR_NAME_CHECKER
argument_list|)
expr_stmt|;
name|assertWrong
argument_list|(
literal|"Donald E. Knuth and Kurt Cobain and ,"
argument_list|,
name|IntegrityCheck
operator|.
name|AUTHOR_NAME_CHECKER
argument_list|)
expr_stmt|;
name|assertWrong
argument_list|(
literal|"and Kurt Cobain and A. Einstein"
argument_list|,
name|IntegrityCheck
operator|.
name|AUTHOR_NAME_CHECKER
argument_list|)
expr_stmt|;
name|assertWrong
argument_list|(
literal|"Donald E. Knuth and Kurt Cobain and"
argument_list|,
name|IntegrityCheck
operator|.
name|AUTHOR_NAME_CHECKER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTitleChecks ()
specifier|public
name|void
name|testTitleChecks
parameter_list|()
block|{
name|assertCorrect
argument_list|(
literal|"This is a title"
argument_list|,
name|IntegrityCheck
operator|.
name|TITLE_CHECKER
argument_list|)
expr_stmt|;
name|assertWrong
argument_list|(
literal|"This is a Title"
argument_list|,
name|IntegrityCheck
operator|.
name|TITLE_CHECKER
argument_list|)
expr_stmt|;
name|assertCorrect
argument_list|(
literal|"This is a {T}itle"
argument_list|,
name|IntegrityCheck
operator|.
name|TITLE_CHECKER
argument_list|)
expr_stmt|;
name|assertCorrect
argument_list|(
literal|"{This is a Title}"
argument_list|,
name|IntegrityCheck
operator|.
name|TITLE_CHECKER
argument_list|)
expr_stmt|;
name|assertCorrect
argument_list|(
literal|"This is a {Title}"
argument_list|,
name|IntegrityCheck
operator|.
name|TITLE_CHECKER
argument_list|)
expr_stmt|;
name|assertCorrect
argument_list|(
literal|"{A Model-Driven Approach for Monitoring {ebBP} BusinessTransactions}"
argument_list|,
name|IntegrityCheck
operator|.
name|TITLE_CHECKER
argument_list|)
expr_stmt|;
block|}
DECL|method|assertWrong (String value, IntegrityCheck.Checker yearChecker)
specifier|private
name|void
name|assertWrong
parameter_list|(
name|String
name|value
parameter_list|,
name|IntegrityCheck
operator|.
name|Checker
name|yearChecker
parameter_list|)
block|{
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|messages
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|BibtexEntry
operator|.
name|KEY_FIELD
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
name|yearChecker
operator|.
name|check
argument_list|(
name|value
argument_list|,
literal|"field"
argument_list|,
name|entry
argument_list|,
name|messages
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|messages
operator|.
name|toString
argument_list|()
argument_list|,
name|messages
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCorrect (String value, IntegrityCheck.Checker yearChecker)
specifier|private
name|void
name|assertCorrect
parameter_list|(
name|String
name|value
parameter_list|,
name|IntegrityCheck
operator|.
name|Checker
name|yearChecker
parameter_list|)
block|{
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|messages
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|BibtexEntry
operator|.
name|KEY_FIELD
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
name|yearChecker
operator|.
name|check
argument_list|(
name|value
argument_list|,
literal|"field"
argument_list|,
name|entry
argument_list|,
name|messages
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

