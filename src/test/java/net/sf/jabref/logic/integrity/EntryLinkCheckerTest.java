begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.integrity
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|EntryLinkCheckerTest
specifier|public
class|class
name|EntryLinkCheckerTest
block|{
DECL|field|database
specifier|private
name|BibDatabase
name|database
decl_stmt|;
DECL|field|checker
specifier|private
name|EntryLinkChecker
name|checker
decl_stmt|;
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|database
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
name|checker
operator|=
operator|new
name|EntryLinkChecker
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testEntryLinkChecker ()
specifier|public
name|void
name|testEntryLinkChecker
parameter_list|()
block|{
operator|new
name|EntryLinkChecker
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckNoFields ()
specifier|public
name|void
name|testCheckNoFields
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|checker
operator|.
name|check
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckNonRelatedFieldsOnly ()
specifier|public
name|void
name|testCheckNonRelatedFieldsOnly
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|checker
operator|.
name|check
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckNonExistingCrossref ()
specifier|public
name|void
name|testCheckNonExistingCrossref
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"crossref"
argument_list|,
literal|"banana"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|message
init|=
name|checker
operator|.
name|check
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|,
name|message
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckExistingCrossref ()
specifier|public
name|void
name|testCheckExistingCrossref
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"crossref"
argument_list|,
literal|"banana"
argument_list|)
expr_stmt|;
name|BibEntry
name|entry2
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry2
operator|.
name|setCiteKey
argument_list|(
literal|"banana"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|message
init|=
name|checker
operator|.
name|check
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckExistingRelated ()
specifier|public
name|void
name|testCheckExistingRelated
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"related"
argument_list|,
literal|"banana,pineapple"
argument_list|)
expr_stmt|;
name|BibEntry
name|entry2
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry2
operator|.
name|setCiteKey
argument_list|(
literal|"banana"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry2
argument_list|)
expr_stmt|;
name|BibEntry
name|entry3
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry3
operator|.
name|setCiteKey
argument_list|(
literal|"pineapple"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|message
init|=
name|checker
operator|.
name|check
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckNonExistingRelated ()
specifier|public
name|void
name|testCheckNonExistingRelated
parameter_list|()
block|{
name|BibEntry
name|entry1
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry1
operator|.
name|setField
argument_list|(
literal|"related"
argument_list|,
literal|"banana,pineapple,strawberry"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry1
argument_list|)
expr_stmt|;
name|BibEntry
name|entry2
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry2
operator|.
name|setCiteKey
argument_list|(
literal|"banana"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry2
argument_list|)
expr_stmt|;
name|BibEntry
name|entry3
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry3
operator|.
name|setCiteKey
argument_list|(
literal|"pineapple"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|message
init|=
name|checker
operator|.
name|check
argument_list|(
name|entry1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|,
name|message
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

