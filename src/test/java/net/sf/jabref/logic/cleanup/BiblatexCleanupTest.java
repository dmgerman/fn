begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.cleanup
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BiblatexCleanupTest
specifier|public
class|class
name|BiblatexCleanupTest
block|{
DECL|field|worker
specifier|private
name|BiblatexCleanup
name|worker
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|worker
operator|=
operator|new
name|BiblatexCleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|convertToBiblatexMovesYearMonthToDate ()
specifier|public
name|void
name|convertToBiblatexMovesYearMonthToDate
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2011"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
literal|"#jan#"
argument_list|)
expr_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2011-01"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|convertToBiblatexDateAlreadyPresent ()
specifier|public
name|void
name|convertToBiblatexDateAlreadyPresent
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2011"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
literal|"#jan#"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"date"
argument_list|,
literal|"2012"
argument_list|)
expr_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2011"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"#jan#"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2012"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

