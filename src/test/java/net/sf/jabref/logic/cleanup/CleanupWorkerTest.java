begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.cleanup
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FileField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|CleanupWorkerTest
specifier|public
class|class
name|CleanupWorkerTest
block|{
annotation|@
name|Rule
DECL|field|testFolder
specifier|public
name|TemporaryFolder
name|testFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|initWithNullPresetThrowsException ()
specifier|public
name|void
name|initWithNullPresetThrowsException
parameter_list|()
block|{
operator|new
name|CleanupWorker
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|cleanupNullThrowsException ()
specifier|public
name|void
name|cleanupNullThrowsException
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupDoesNothingByDefault ()
specifier|public
name|void
name|cleanupDoesNothingByDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
literal|"Toot"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"pdf"
argument_list|,
literal|"aPdfFile"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"some"
argument_list|,
literal|"1st"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
literal|"http://dx.doi.org/10.1016/0001-8708(80)90035-3"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
literal|"01"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
literal|"1-2"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"date"
argument_list|,
literal|"01/1999"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"pdf"
argument_list|,
literal|"aPdfFile"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"ps"
argument_list|,
literal|"aPsFile"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
literal|"link::"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"<b>hallo</b> units 1 A case AlGaAs and latex $\\alpha$$\\beta$"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
literal|"RÃ©flexions"
argument_list|)
expr_stmt|;
name|File
name|tempFile
init|=
name|testFolder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|FileField
operator|.
name|ParsedFileField
name|fileField
init|=
operator|new
name|FileField
operator|.
name|ParsedFileField
argument_list|(
literal|""
argument_list|,
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileField
operator|.
name|getStringRepresentation
argument_list|(
name|fileField
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
init|=
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|changes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|upgradeExternalLinksMoveFromPdfToFile ()
specifier|public
name|void
name|upgradeExternalLinksMoveFromPdfToFile
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setCleanUpUpgradeExternalLinks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"pdf"
argument_list|,
literal|"aPdfFile"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aPdfFile:aPdfFile:PDF"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|upgradeExternalLinksMoveFromPsToFile ()
specifier|public
name|void
name|upgradeExternalLinksMoveFromPsToFile
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setCleanUpUpgradeExternalLinks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"ps"
argument_list|,
literal|"aPsFile"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aPsFile:aPsFile:PostScript"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupSupercriptChangesFirstToLatex ()
specifier|public
name|void
name|cleanupSupercriptChangesFirstToLatex
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setCleanUpSuperscripts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"some"
argument_list|,
literal|"1st"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\\textsuperscript{st}"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"some"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupDoiRemovesLeadingHttp ()
specifier|public
name|void
name|cleanupDoiRemovesLeadingHttp
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setCleanUpDOI
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
literal|"http://dx.doi.org/10.1016/0001-8708(80)90035-3"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"10.1016/0001-8708(80)90035-3"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"doi"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupDoiReturnsChanges ()
specifier|public
name|void
name|cleanupDoiReturnsChanges
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setCleanUpDOI
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
literal|"http://dx.doi.org/10.1016/0001-8708(80)90035-3"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
init|=
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|FieldChange
name|expectedChange
init|=
operator|new
name|FieldChange
argument_list|(
name|entry
argument_list|,
literal|"doi"
argument_list|,
literal|"http://dx.doi.org/10.1016/0001-8708(80)90035-3"
argument_list|,
literal|"10.1016/0001-8708(80)90035-3"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expectedChange
argument_list|)
argument_list|,
name|changes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupMonthChangesNumberToBibtex ()
specifier|public
name|void
name|cleanupMonthChangesNumberToBibtex
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setCleanUpMonth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
literal|"01"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"#jan#"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupPagenumbersConvertsSingleDashToDouble ()
specifier|public
name|void
name|cleanupPagenumbersConvertsSingleDashToDouble
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setCleanUpPageNumbers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
literal|"1-2"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1--2"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupDatesConvertsToCorrectFormat ()
specifier|public
name|void
name|cleanupDatesConvertsToCorrectFormat
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setCleanUpDate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"date"
argument_list|,
literal|"01/1999"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1999-01"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupFixFileLinksMovesSingleDescriptionToLink ()
specifier|public
name|void
name|cleanupFixFileLinksMovesSingleDescriptionToLink
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setFixFileLinks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
literal|"link::"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|":link:"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupRelativePathsConvertAbsoluteToRelativePath ()
specifier|public
name|void
name|cleanupRelativePathsConvertAbsoluteToRelativePath
parameter_list|()
throws|throws
name|IOException
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setMakePathsRelative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|File
name|tempFile
init|=
name|testFolder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|FileField
operator|.
name|ParsedFileField
name|fileField
init|=
operator|new
name|FileField
operator|.
name|ParsedFileField
argument_list|(
literal|""
argument_list|,
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileField
operator|.
name|getStringRepresentation
argument_list|(
name|fileField
argument_list|)
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|testFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|FileField
operator|.
name|ParsedFileField
name|newFileField
init|=
operator|new
name|FileField
operator|.
name|ParsedFileField
argument_list|(
literal|""
argument_list|,
name|tempFile
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FileField
operator|.
name|getStringRepresentation
argument_list|(
name|newFileField
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupRenamePdfRenamesRelativeFile ()
specifier|public
name|void
name|cleanupRenamePdfRenamesRelativeFile
parameter_list|()
throws|throws
name|IOException
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setRenamePDF
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|File
name|tempFile
init|=
name|testFolder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
literal|"Toot"
argument_list|)
expr_stmt|;
name|FileField
operator|.
name|ParsedFileField
name|fileField
init|=
operator|new
name|FileField
operator|.
name|ParsedFileField
argument_list|(
literal|""
argument_list|,
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileField
operator|.
name|getStringRepresentation
argument_list|(
name|fileField
argument_list|)
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|testFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|FileField
operator|.
name|ParsedFileField
name|newFileField
init|=
operator|new
name|FileField
operator|.
name|ParsedFileField
argument_list|(
literal|""
argument_list|,
literal|"Toot.tmp"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FileField
operator|.
name|getStringRepresentation
argument_list|(
name|newFileField
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupHtmlStripsHtmlTag ()
specifier|public
name|void
name|cleanupHtmlStripsHtmlTag
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setConvertHTMLToLatex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"<b>hallo</b>"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupUnitsConvertsOneAmpereToLatex ()
specifier|public
name|void
name|cleanupUnitsConvertsOneAmpereToLatex
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setConvertUnits
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"1 A"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1~{A}"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupCasesAddsBracketAroundAluminiumGalliumArsenid ()
specifier|public
name|void
name|cleanupCasesAddsBracketAroundAluminiumGalliumArsenid
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setConvertCase
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"AlGaAs"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{AlGaAs}"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupLatexMergesTwoLatexMathEnvironments ()
specifier|public
name|void
name|cleanupLatexMergesTwoLatexMathEnvironments
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setConvertLaTeX
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"$\\alpha$$\\beta$"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$\\alpha\\beta$"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupUnicodeConvertsAcuteToLatex ()
specifier|public
name|void
name|cleanupUnicodeConvertsAcuteToLatex
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setConvertUnicodeToLatex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
literal|"RÃ©flexions"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"R{\\'{e}}flexions"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"abstract"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|convertToBiblatexMovesJournalToJournaltitle ()
specifier|public
name|void
name|convertToBiblatexMovesJournalToJournaltitle
parameter_list|()
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setConvertToBiblatex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|CleanupWorker
name|worker
init|=
operator|new
name|CleanupWorker
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|worker
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"journal"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"journaltitle"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

