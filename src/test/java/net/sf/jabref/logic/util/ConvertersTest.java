begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|Converters
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ConvertersTest
specifier|public
class|class
name|ConvertersTest
block|{
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumberOfModes ()
specifier|public
name|void
name|testNumberOfModes
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unicode to LaTeX"
argument_list|,
name|Converters
operator|.
name|UNICODE_TO_LATEX
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"HTML to LaTeX"
argument_list|,
name|Converters
operator|.
name|HTML_TO_LATEX
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnicodeToLatexConversion ()
specifier|public
name|void
name|testUnicodeToLatexConversion
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Converters
operator|.
name|UNICODE_TO_LATEX
operator|.
name|convert
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|Converters
operator|.
name|UNICODE_TO_LATEX
operator|.
name|convert
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{{\\aa}}{\\\"{a}}{\\\"{o}}"
argument_list|,
name|Converters
operator|.
name|UNICODE_TO_LATEX
operator|.
name|convert
argument_list|(
literal|"\u00E5\u00E4\u00F6"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHTMLToLatexConversion ()
specifier|public
name|void
name|testHTMLToLatexConversion
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Converters
operator|.
name|HTML_TO_LATEX
operator|.
name|convert
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|Converters
operator|.
name|HTML_TO_LATEX
operator|.
name|convert
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{{\\aa}}{\\\"{a}}{\\\"{o}}"
argument_list|,
name|Converters
operator|.
name|HTML_TO_LATEX
operator|.
name|convert
argument_list|(
literal|"&aring;&auml;&ouml;"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\\'{\\i}}"
argument_list|,
name|Converters
operator|.
name|HTML_TO_LATEX
operator|.
name|convert
argument_list|(
literal|"i&#x301;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

