begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.util.io
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexTestData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|FileBasedTestCase
specifier|public
class|class
name|FileBasedTestCase
block|{
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
DECL|field|rootDir
specifier|private
name|Path
name|rootDir
decl_stmt|;
annotation|@
name|Rule
DECL|field|temporaryFolder
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|Globals
operator|.
name|prefs
operator|=
name|mock
argument_list|(
name|JabRefPreferences
operator|.
name|class
argument_list|)
expr_stmt|;
name|BibDatabase
name|database
init|=
name|BibtexTestData
operator|.
name|getBibtexDatabase
argument_list|()
decl_stmt|;
name|entry
operator|=
name|database
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|rootDir
operator|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
expr_stmt|;
name|Path
name|subDir
init|=
name|Files
operator|.
name|createDirectory
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
literal|"Organization Science"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|pdfSubDir
init|=
name|Files
operator|.
name|createDirectory
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
literal|"pdfs"
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|subDir
operator|.
name|resolve
argument_list|(
literal|"HipKro03 - Hello.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
literal|"HipKro03 - Hello.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|pdfSubSubDir
init|=
name|Files
operator|.
name|createDirectory
argument_list|(
name|pdfSubDir
operator|.
name|resolve
argument_list|(
literal|"sub"
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|pdfSubSubDir
operator|.
name|resolve
argument_list|(
literal|"HipKro03-sub.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
literal|"2002"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dir2003
init|=
name|Files
operator|.
name|createDirectory
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
literal|"2003"
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dir2003
operator|.
name|resolve
argument_list|(
literal|"Paper by HipKro03.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dirTest
init|=
name|Files
operator|.
name|createDirectory
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dirTest
operator|.
name|resolve
argument_list|(
literal|".TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dirTest
operator|.
name|resolve
argument_list|(
literal|"TEST["
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dirTest
operator|.
name|resolve
argument_list|(
literal|"TE.ST"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dirTest
operator|.
name|resolve
argument_list|(
literal|"foo.dat"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|graphicsDir
init|=
name|Files
operator|.
name|createDirectory
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
literal|"graphicsDir"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|graphicsSubDir
init|=
name|Files
operator|.
name|createDirectories
argument_list|(
name|graphicsDir
operator|.
name|resolve
argument_list|(
literal|"subDir"
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|graphicsSubDir
operator|.
name|resolve
argument_list|(
literal|"HipKro03test.jpg"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|graphicsSubDir
operator|.
name|resolve
argument_list|(
literal|"HipKro03test.png"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindAssociatedFiles ()
specifier|public
name|void
name|testFindAssociatedFiles
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|extensions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jpg"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dirs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
literal|"graphicsDir"
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|,
name|rootDir
operator|.
name|resolve
argument_list|(
literal|"pdfs"
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|BibEntry
argument_list|,
name|List
argument_list|<
name|File
argument_list|>
argument_list|>
name|results
init|=
name|FileUtil
operator|.
name|findAssociatedFiles
argument_list|(
name|entries
argument_list|,
name|extensions
argument_list|,
name|dirs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|entry
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|entry
argument_list|)
operator|.
name|contains
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"graphicsDir"
argument_list|,
literal|"subDir"
argument_list|,
literal|"HipKro03test.jpg"
argument_list|)
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|entry
argument_list|)
operator|.
name|contains
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"graphicsDir"
argument_list|,
literal|"subDir"
argument_list|,
literal|"HipKro03test.png"
argument_list|)
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|entry
argument_list|)
operator|.
name|contains
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"pdfs"
argument_list|,
literal|"sub"
argument_list|,
literal|"HipKro03-sub.pdf"
argument_list|)
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindFilesException ()
specifier|public
name|void
name|testFindFilesException
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|extensions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jpg"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dirs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rootDir
operator|.
name|resolve
argument_list|(
literal|"asdfasdf/asdfasdf"
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|File
argument_list|>
name|results
init|=
name|FileFinder
operator|.
name|findFiles
argument_list|(
name|extensions
argument_list|,
name|dirs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testFindFilesNullPointerException ()
specifier|public
name|void
name|testFindFilesNullPointerException
parameter_list|()
block|{
name|FileFinder
operator|.
name|findFiles
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

