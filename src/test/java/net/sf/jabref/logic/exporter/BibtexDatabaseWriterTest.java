begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.exporter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|FieldFormatterCleanup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|config
operator|.
name|SaveOrderConfig
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
operator|.
name|LowerCaseFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|AllEntriesGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|ExplicitGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|GroupHierarchyType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|ImportFormat
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|AbstractBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|DatabaseBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexString
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|CustomEntryType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|BibtexDatabaseWriterTest
specifier|public
class|class
name|BibtexDatabaseWriterTest
block|{
DECL|field|databaseWriter
specifier|private
name|BibtexDatabaseWriter
argument_list|<
name|StringSaveSession
argument_list|>
name|databaseWriter
decl_stmt|;
DECL|field|database
specifier|private
name|BibDatabase
name|database
decl_stmt|;
DECL|field|metaData
specifier|private
name|MetaData
name|metaData
decl_stmt|;
DECL|field|bibtexContext
specifier|private
name|BibDatabaseContext
name|bibtexContext
decl_stmt|;
DECL|field|importFormatPreferences
specifier|private
name|ImportFormatPreferences
name|importFormatPreferences
decl_stmt|;
DECL|field|prefs
specifier|private
name|JabRefPreferences
name|prefs
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
comment|// Write to a string instead of to a file
name|databaseWriter
operator|=
operator|new
name|BibtexDatabaseWriter
argument_list|<>
argument_list|(
name|StringSaveSession
operator|::
operator|new
argument_list|)
expr_stmt|;
name|database
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
name|metaData
operator|=
operator|new
name|MetaData
argument_list|()
expr_stmt|;
name|bibtexContext
operator|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
name|metaData
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|importFormatPreferences
operator|=
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|writeWithNullContextThrowsException ()
specifier|public
name|void
name|writeWithNullContextThrowsException
parameter_list|()
throws|throws
name|Exception
block|{
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|writeWithNullEntriesThrowsException ()
specifier|public
name|void
name|writeWithNullEntriesThrowsException
parameter_list|()
throws|throws
name|Exception
block|{
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
literal|null
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|writeWithNullPreferencesThrowsException ()
specifier|public
name|void
name|writeWithNullPreferencesThrowsException
parameter_list|()
throws|throws
name|Exception
block|{
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEncoding ()
specifier|public
name|void
name|writeEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writePreamble ()
specifier|public
name|void
name|writePreamble
parameter_list|()
throws|throws
name|Exception
block|{
name|database
operator|.
name|setPreamble
argument_list|(
literal|"Test preamble"
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Preamble{Test preamble}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writePreambleAndEncoding ()
specifier|public
name|void
name|writePreambleAndEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|database
operator|.
name|setPreamble
argument_list|(
literal|"Test preamble"
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Preamble{Test preamble}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEntry ()
specifier|public
name|void
name|writeEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: databaseType:bibtex;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEncodingAndEntry ()
specifier|public
name|void
name|writeEncodingAndEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: databaseType:bibtex;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEpilogue ()
specifier|public
name|void
name|writeEpilogue
parameter_list|()
throws|throws
name|Exception
block|{
name|database
operator|.
name|setEpilog
argument_list|(
literal|"Test epilog"
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"Test epilog"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEpilogueAndEncoding ()
specifier|public
name|void
name|writeEpilogueAndEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|database
operator|.
name|setEpilog
argument_list|(
literal|"Test epilog"
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"Test epilog"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeMetadata ()
specifier|public
name|void
name|writeMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|DatabaseBibtexKeyPattern
name|bibtexKeyPattern
init|=
operator|new
name|DatabaseBibtexKeyPattern
argument_list|(
name|prefs
operator|.
name|getKeyPattern
argument_list|()
argument_list|)
decl_stmt|;
name|bibtexKeyPattern
operator|.
name|setDefaultValue
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setBibtexKeyPattern
argument_list|(
name|bibtexKeyPattern
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: keypatterndefault:test;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeMetadataAndEncoding ()
specifier|public
name|void
name|writeMetadataAndEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|DatabaseBibtexKeyPattern
name|bibtexKeyPattern
init|=
operator|new
name|DatabaseBibtexKeyPattern
argument_list|(
name|prefs
operator|.
name|getKeyPattern
argument_list|()
argument_list|)
decl_stmt|;
name|bibtexKeyPattern
operator|.
name|setDefaultValue
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setBibtexKeyPattern
argument_list|(
name|bibtexKeyPattern
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: keypatterndefault:test;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeGroups ()
specifier|public
name|void
name|writeGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupTreeNode
name|groupRoot
init|=
name|GroupTreeNode
operator|.
name|fromGroup
argument_list|(
operator|new
name|AllEntriesGroup
argument_list|()
argument_list|)
decl_stmt|;
name|groupRoot
operator|.
name|addSubgroup
argument_list|(
operator|new
name|ExplicitGroup
argument_list|(
literal|"test"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|KEYWORD_SEPARATOR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setGroups
argument_list|(
name|groupRoot
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
comment|// @formatter:off
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: groupstree:"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"0 AllEntriesGroup:;"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"1 ExplicitGroup:test\\;2\\;;"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// @formatter:on
block|}
annotation|@
name|Test
DECL|method|writeGroupsAndEncoding ()
specifier|public
name|void
name|writeGroupsAndEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|GroupTreeNode
name|groupRoot
init|=
name|GroupTreeNode
operator|.
name|fromGroup
argument_list|(
operator|new
name|AllEntriesGroup
argument_list|()
argument_list|)
decl_stmt|;
name|groupRoot
operator|.
name|addChild
argument_list|(
name|GroupTreeNode
operator|.
name|fromGroup
argument_list|(
operator|new
name|ExplicitGroup
argument_list|(
literal|"test"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|KEYWORD_SEPARATOR
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setGroups
argument_list|(
name|groupRoot
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
comment|// @formatter:off
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: groupstree:"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"0 AllEntriesGroup:;"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"1 ExplicitGroup:test\\;2\\;;"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// @formatter:on
block|}
annotation|@
name|Test
DECL|method|writeString ()
specifier|public
name|void
name|writeString
parameter_list|()
throws|throws
name|Exception
block|{
name|database
operator|.
name|addString
argument_list|(
operator|new
name|BibtexString
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|,
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@String{name = {content}}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeStringAndEncoding ()
specifier|public
name|void
name|writeStringAndEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|database
operator|.
name|addString
argument_list|(
operator|new
name|BibtexString
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|,
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@String{name = {content}}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEntryWithCustomizedTypeAlsoWritesTypeDeclaration ()
specifier|public
name|void
name|writeEntryWithCustomizedTypeAlsoWritesTypeDeclaration
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
operator|new
name|CustomEntryType
argument_list|(
literal|"customizedType"
argument_list|,
literal|"required"
argument_list|,
literal|"optional"
argument_list|)
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
literal|"customizedType"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Customizedtype{,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: databaseType:bibtex;}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-entrytype: Customizedtype: req[required] opt[optional]}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|EntryTypes
operator|.
name|removeAllCustomEntryTypes
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|roundtrip ()
specifier|public
name|void
name|roundtrip
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testBibtexFile
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/testbib/complex.bib"
argument_list|)
decl_stmt|;
name|Charset
name|encoding
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
name|ImportFormat
operator|.
name|getReader
argument_list|(
name|testBibtexFile
argument_list|,
name|encoding
argument_list|)
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|encoding
argument_list|)
operator|.
name|withSaveInOriginalOrder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|result
operator|.
name|getMetaData
argument_list|()
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|context
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|testBibtexFile
argument_list|,
name|encoding
operator|.
name|name
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|scanner
operator|.
name|useDelimiter
argument_list|(
literal|"\\A"
argument_list|)
operator|.
name|next
argument_list|()
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|roundtripWithUserComment ()
specifier|public
name|void
name|roundtripWithUserComment
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testBibtexFile
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/testbib/bibWithUserComments.bib"
argument_list|)
decl_stmt|;
name|Charset
name|encoding
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
name|ImportFormat
operator|.
name|getReader
argument_list|(
name|testBibtexFile
argument_list|,
name|encoding
argument_list|)
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|encoding
argument_list|)
operator|.
name|withSaveInOriginalOrder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|result
operator|.
name|getMetaData
argument_list|()
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|context
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|testBibtexFile
argument_list|,
name|encoding
operator|.
name|name
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|scanner
operator|.
name|useDelimiter
argument_list|(
literal|"\\A"
argument_list|)
operator|.
name|next
argument_list|()
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|roundtripWithUserCommentAndEntryChange ()
specifier|public
name|void
name|roundtripWithUserCommentAndEntryChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testBibtexFile
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/testbib/bibWithUserComments.bib"
argument_list|)
decl_stmt|;
name|Charset
name|encoding
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
name|ImportFormat
operator|.
name|getReader
argument_list|(
name|testBibtexFile
argument_list|,
name|encoding
argument_list|)
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|BibEntry
name|entry
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
literal|"1137631"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Mr. Author"
argument_list|)
expr_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|encoding
argument_list|)
operator|.
name|withSaveInOriginalOrder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|result
operator|.
name|getMetaData
argument_list|()
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|context
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/testbib/bibWithUserCommentAndEntryChange.bib"
argument_list|)
argument_list|,
name|encoding
operator|.
name|name
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|scanner
operator|.
name|useDelimiter
argument_list|(
literal|"\\A"
argument_list|)
operator|.
name|next
argument_list|()
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|roundtripWithUserCommentBeforeStringAndChange ()
specifier|public
name|void
name|roundtripWithUserCommentBeforeStringAndChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testBibtexFile
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/testbib/complex.bib"
argument_list|)
decl_stmt|;
name|Charset
name|encoding
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
name|ImportFormat
operator|.
name|getReader
argument_list|(
name|testBibtexFile
argument_list|,
name|encoding
argument_list|)
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
for|for
control|(
name|BibtexString
name|string
range|:
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringValues
argument_list|()
control|)
block|{
comment|// Mark them as changed
name|string
operator|.
name|setContent
argument_list|(
name|string
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|encoding
argument_list|)
operator|.
name|withSaveInOriginalOrder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|result
operator|.
name|getMetaData
argument_list|()
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|context
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|testBibtexFile
argument_list|,
name|encoding
operator|.
name|name
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|scanner
operator|.
name|useDelimiter
argument_list|(
literal|"\\A"
argument_list|)
operator|.
name|next
argument_list|()
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|writeSavedSerializationOfEntryIfUnchanged ()
specifier|public
name|void
name|writeSavedSerializationOfEntryIfUnchanged
parameter_list|()
throws|throws
name|Exception
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Mr. author"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setParsedSerialization
argument_list|(
literal|"presaved serialization"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"presaved serialization"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: databaseType:bibtex;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reformatEntryIfAskedToDoSo ()
specifier|public
name|void
name|reformatEntryIfAskedToDoSo
parameter_list|()
throws|throws
name|Exception
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Mr. author"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setParsedSerialization
argument_list|(
literal|"wrong serialization"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withReformatFile
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  author = {Mr. author},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: databaseType:bibtex;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeSavedSerializationOfStringIfUnchanged ()
specifier|public
name|void
name|writeSavedSerializationOfStringIfUnchanged
parameter_list|()
throws|throws
name|Exception
block|{
name|BibtexString
name|string
init|=
operator|new
name|BibtexString
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|string
operator|.
name|setParsedSerialization
argument_list|(
literal|"serialization"
argument_list|)
expr_stmt|;
name|database
operator|.
name|addString
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"serialization"
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reformatStringIfAskedToDoSo ()
specifier|public
name|void
name|reformatStringIfAskedToDoSo
parameter_list|()
throws|throws
name|Exception
block|{
name|BibtexString
name|string
init|=
operator|new
name|BibtexString
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|string
operator|.
name|setParsedSerialization
argument_list|(
literal|"wrong serialization"
argument_list|)
expr_stmt|;
name|database
operator|.
name|addString
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withReformatFile
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@String{name = {content}}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeSaveActions ()
specifier|public
name|void
name|writeSaveActions
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldFormatterCleanups
name|saveActions
init|=
operator|new
name|FieldFormatterCleanups
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|FieldFormatterCleanup
argument_list|(
literal|"title"
argument_list|,
operator|new
name|LowerCaseFormatter
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|setSaveActions
argument_list|(
name|saveActions
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: saveActions:enabled;"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"title[lower_case]"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|";}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeSaveOrderConfig ()
specifier|public
name|void
name|writeSaveOrderConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|SaveOrderConfig
name|saveOrderConfig
init|=
operator|new
name|SaveOrderConfig
argument_list|(
literal|false
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
literal|"author"
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
literal|"year"
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
literal|"abstract"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|setSaveOrderConfig
argument_list|(
name|saveOrderConfig
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: saveOrderConfig:specified;author;false;year;true;abstract;false;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeCustomKeyPattern ()
specifier|public
name|void
name|writeCustomKeyPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractBibtexKeyPattern
name|pattern
init|=
operator|new
name|DatabaseBibtexKeyPattern
argument_list|(
name|prefs
operator|.
name|getKeyPattern
argument_list|()
argument_list|)
decl_stmt|;
name|pattern
operator|.
name|setDefaultValue
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|addBibtexKeyPattern
argument_list|(
literal|"article"
argument_list|,
literal|"articleTest"
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setBibtexKeyPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: keypattern_article:articleTest;}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: keypatterndefault:test;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeBiblatexMode ()
specifier|public
name|void
name|writeBiblatexMode
parameter_list|()
throws|throws
name|Exception
block|{
name|metaData
operator|.
name|setMode
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: databaseType:biblatex;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeProtectedFlag ()
specifier|public
name|void
name|writeProtectedFlag
parameter_list|()
throws|throws
name|Exception
block|{
name|metaData
operator|.
name|markAsProtected
argument_list|()
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: protectedFlag:true;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeContentSelectors ()
specifier|public
name|void
name|writeContentSelectors
parameter_list|()
throws|throws
name|Exception
block|{
name|metaData
operator|.
name|setContentSelectors
argument_list|(
literal|"title"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testWord"
argument_list|,
literal|"word2"
argument_list|)
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: selector_title:testWord;word2;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeFileDirectories ()
specifier|public
name|void
name|writeFileDirectories
parameter_list|()
throws|throws
name|Exception
block|{
name|metaData
operator|.
name|setDefaultFileDirectory
argument_list|(
literal|"\\Literature\\"
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setUserFileDirectory
argument_list|(
literal|"defaultOwner-user"
argument_list|,
literal|"D:\\Documents"
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: fileDirectory:\\\\Literature\\\\;}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: fileDirectory-defaultOwner-user:D:\\\\Documents;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeNotEmptyContentSelectors ()
specifier|public
name|void
name|writeNotEmptyContentSelectors
parameter_list|()
throws|throws
name|Exception
block|{
name|metaData
operator|.
name|setContentSelectors
argument_list|(
literal|"title"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeNotCompletelyEmptyContentSelectors ()
specifier|public
name|void
name|writeNotCompletelyEmptyContentSelectors
parameter_list|()
throws|throws
name|Exception
block|{
name|metaData
operator|.
name|setContentSelectors
argument_list|(
literal|"title"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEntriesSorted ()
specifier|public
name|void
name|writeEntriesSorted
parameter_list|()
throws|throws
name|Exception
block|{
name|SaveOrderConfig
name|saveOrderConfig
init|=
operator|new
name|SaveOrderConfig
argument_list|(
literal|false
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
literal|"author"
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
literal|"year"
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
literal|"abstract"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|setSaveOrderConfig
argument_list|(
name|saveOrderConfig
argument_list|)
expr_stmt|;
name|BibEntry
name|firstEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|firstEntry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|firstEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|firstEntry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|BibEntry
name|secondEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|secondEntry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|secondEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|secondEntry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2010"
argument_list|)
expr_stmt|;
name|BibEntry
name|thirdEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|thirdEntry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|thirdEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|thirdEntry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|secondEntry
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|thirdEntry
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|firstEntry
argument_list|)
expr_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|database
operator|.
name|getEntries
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  author = {A},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  year   = {2000},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  author = {A},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  year   = {2010},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  author = {B},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  year   = {2000},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: databaseType:bibtex;}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: saveOrderConfig:specified;author;false;year;true;abstract;false;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEntriesInOriginalOrderWhenNoSaveOrderConfigIsSetInMetadata ()
specifier|public
name|void
name|writeEntriesInOriginalOrderWhenNoSaveOrderConfigIsSetInMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|BibEntry
name|firstEntry
init|=
operator|new
name|BibEntry
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|firstEntry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|firstEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|firstEntry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2010"
argument_list|)
expr_stmt|;
name|BibEntry
name|secondEntry
init|=
operator|new
name|BibEntry
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|secondEntry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|secondEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|secondEntry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|BibEntry
name|thirdEntry
init|=
operator|new
name|BibEntry
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|thirdEntry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|thirdEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|thirdEntry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|firstEntry
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|secondEntry
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|thirdEntry
argument_list|)
expr_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withSaveInOriginalOrder
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|StringSaveSession
name|session
init|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibtexContext
argument_list|,
name|database
operator|.
name|getEntries
argument_list|()
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  author = {A},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  year   = {2010},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  author = {B},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  year   = {2000},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  author = {A},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  year   = {2000},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: databaseType:bibtex;}"
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|session
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

