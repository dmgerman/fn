begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.preferences
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|preferences
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|LastFocusedTabPreferencesTest
specifier|public
class|class
name|LastFocusedTabPreferencesTest
block|{
DECL|field|previousValue
specifier|private
specifier|static
name|String
name|previousValue
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|savePreferenceLastFocus ()
specifier|public
specifier|static
name|void
name|savePreferenceLastFocus
parameter_list|()
block|{
name|previousValue
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_FOCUSED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|restorePreferenceLastFocus ()
specifier|public
specifier|static
name|void
name|restorePreferenceLastFocus
parameter_list|()
block|{
if|if
condition|(
name|previousValue
operator|!=
literal|null
condition|)
block|{
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_FOCUSED
argument_list|,
name|previousValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLastFocusedTab ()
specifier|public
name|void
name|testLastFocusedTab
parameter_list|()
throws|throws
name|Exception
block|{
name|LastFocusedTabPreferences
name|prefs
init|=
operator|new
name|LastFocusedTabPreferences
argument_list|(
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|whatever
init|=
operator|new
name|File
argument_list|(
literal|"whatever"
argument_list|)
decl_stmt|;
name|prefs
operator|.
name|setLastFocusedTab
argument_list|(
name|whatever
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prefs
operator|.
name|hadLastFocus
argument_list|(
name|whatever
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLastFocusedTabNull ()
specifier|public
name|void
name|testLastFocusedTabNull
parameter_list|()
throws|throws
name|Exception
block|{
name|LastFocusedTabPreferences
name|prefs
init|=
operator|new
name|LastFocusedTabPreferences
argument_list|(
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|whatever
init|=
operator|new
name|File
argument_list|(
literal|"whatever"
argument_list|)
decl_stmt|;
name|prefs
operator|.
name|setLastFocusedTab
argument_list|(
name|whatever
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prefs
operator|.
name|hadLastFocus
argument_list|(
name|whatever
argument_list|)
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|setLastFocusedTab
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prefs
operator|.
name|hadLastFocus
argument_list|(
name|whatever
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

