begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @version 11.11.2008 | 21:51:54  */
end_comment

begin_class
DECL|class|EntryFromFileCreatorManagerTest
specifier|public
class|class
name|EntryFromFileCreatorManagerTest
block|{
annotation|@
name|Test
DECL|method|testGetCreator ()
specifier|public
name|void
name|testGetCreator
parameter_list|()
throws|throws
name|Exception
block|{
name|EntryFromFileCreatorManager
name|manager
init|=
operator|new
name|EntryFromFileCreatorManager
argument_list|()
decl_stmt|;
name|EntryFromFileCreator
name|creator
init|=
name|manager
operator|.
name|getEntryCreator
argument_list|(
name|ImportDataTest
operator|.
name|NOT_EXISTING_PDF
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|creator
argument_list|)
expr_stmt|;
name|creator
operator|=
name|manager
operator|.
name|getEntryCreator
argument_list|(
name|ImportDataTest
operator|.
name|FILE_IN_DATABASE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|creator
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|creator
operator|.
name|accept
argument_list|(
name|ImportDataTest
operator|.
name|FILE_IN_DATABASE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testAddEntrysFromFiles ()
specifier|public
name|void
name|testAddEntrysFromFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|FileReader
argument_list|(
name|ImportDataTest
operator|.
name|UNLINKED_FILES_TEST_BIB
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|database
init|=
name|result
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|ImportDataTest
operator|.
name|FILE_NOT_IN_DATABASE
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|ImportDataTest
operator|.
name|NOT_EXISTING_PDF
argument_list|)
expr_stmt|;
name|EntryFromFileCreatorManager
name|manager
init|=
operator|new
name|EntryFromFileCreatorManager
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|manager
operator|.
name|addEntrysFromFiles
argument_list|(
name|files
argument_list|,
name|database
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|/**          * One file doesn't exist, so adding it as an entry should lead to an          * error message.          */
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|file1Found
init|=
literal|false
decl_stmt|;
name|boolean
name|file2Found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|database
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|String
name|filesInfo
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filesInfo
operator|.
name|contains
argument_list|(
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|file1Found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|filesInfo
operator|.
name|contains
argument_list|(
name|files
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|file2Found
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|file1Found
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|file2Found
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

