begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test cases for the RISImporter  *  * @author $Author: coezbek $  */
end_comment

begin_class
DECL|class|RISImporterTest
specifier|public
class|class
name|RISImporterTest
block|{
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|==
literal|null
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIsRecognizedFormat ()
specifier|public
name|void
name|testIsRecognizedFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|RisImporter
name|importer
init|=
operator|new
name|RisImporter
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|importer
operator|.
name|isRecognizedFormat
argument_list|(
name|RISImporterTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"RisImporterTest1.ris"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessSubSup ()
specifier|public
name|void
name|testProcessSubSup
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hm
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hm
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
literal|"/sub 3/"
argument_list|)
expr_stmt|;
name|IsiImporter
operator|.
name|processSubSup
argument_list|(
name|hm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$_3$"
argument_list|,
name|hm
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|hm
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
literal|"/sub   3   /"
argument_list|)
expr_stmt|;
name|IsiImporter
operator|.
name|processSubSup
argument_list|(
name|hm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$_3$"
argument_list|,
name|hm
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|hm
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
literal|"/sub 31/"
argument_list|)
expr_stmt|;
name|IsiImporter
operator|.
name|processSubSup
argument_list|(
name|hm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$_{31}$"
argument_list|,
name|hm
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|hm
operator|.
name|put
argument_list|(
literal|"abstract"
argument_list|,
literal|"/sub 3/"
argument_list|)
expr_stmt|;
name|IsiImporter
operator|.
name|processSubSup
argument_list|(
name|hm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$_3$"
argument_list|,
name|hm
operator|.
name|get
argument_list|(
literal|"abstract"
argument_list|)
argument_list|)
expr_stmt|;
name|hm
operator|.
name|put
argument_list|(
literal|"review"
argument_list|,
literal|"/sub 31/"
argument_list|)
expr_stmt|;
name|IsiImporter
operator|.
name|processSubSup
argument_list|(
name|hm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$_{31}$"
argument_list|,
name|hm
operator|.
name|get
argument_list|(
literal|"review"
argument_list|)
argument_list|)
expr_stmt|;
name|hm
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
literal|"/sup 3/"
argument_list|)
expr_stmt|;
name|IsiImporter
operator|.
name|processSubSup
argument_list|(
name|hm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$^3$"
argument_list|,
name|hm
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|hm
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
literal|"/sup 31/"
argument_list|)
expr_stmt|;
name|IsiImporter
operator|.
name|processSubSup
argument_list|(
name|hm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$^{31}$"
argument_list|,
name|hm
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|hm
operator|.
name|put
argument_list|(
literal|"abstract"
argument_list|,
literal|"/sup 3/"
argument_list|)
expr_stmt|;
name|IsiImporter
operator|.
name|processSubSup
argument_list|(
name|hm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$^3$"
argument_list|,
name|hm
operator|.
name|get
argument_list|(
literal|"abstract"
argument_list|)
argument_list|)
expr_stmt|;
name|hm
operator|.
name|put
argument_list|(
literal|"review"
argument_list|,
literal|"/sup 31/"
argument_list|)
expr_stmt|;
name|IsiImporter
operator|.
name|processSubSup
argument_list|(
name|hm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$^{31}$"
argument_list|,
name|hm
operator|.
name|get
argument_list|(
literal|"review"
argument_list|)
argument_list|)
expr_stmt|;
name|hm
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
literal|"/sub $Hello/"
argument_list|)
expr_stmt|;
name|IsiImporter
operator|.
name|processSubSup
argument_list|(
name|hm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$_{\\$Hello}$"
argument_list|,
name|hm
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testImportEntries ()
specifier|public
name|void
name|testImportEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|RisImporter
name|importer
init|=
operator|new
name|RisImporter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
init|=
name|importer
operator|.
name|importEntries
argument_list|(
name|RISImporterTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"RisImporterTest1.ris"
argument_list|)
argument_list|,
operator|new
name|OutputPrinterToNull
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Editorial: Open Source and Empirical Software Engineering"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Harrison, Warren"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Empirical Software Engineering"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"journal"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2001"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"6"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"volume"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"number"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"193--194"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"#sep#"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

