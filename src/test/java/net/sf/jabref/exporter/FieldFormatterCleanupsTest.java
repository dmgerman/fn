begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.exporter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|FieldFormatterCleanup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|FieldFormatterCleanupsTest
specifier|public
class|class
name|FieldFormatterCleanupsTest
block|{
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpPreferences ()
specifier|public
specifier|static
name|void
name|setUpPreferences
parameter_list|()
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|==
literal|null
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|entry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|INPROCEEDINGS
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
literal|"6055279"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Educational session 1"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"booktitle"
argument_list|,
literal|"Custom Integrated Circuits Conference (CICC), 2011 IEEE"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2011"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"mont"
argument_list|,
literal|"Sept."
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
literal|"1-7"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
literal|"Start of the above-titled section of the conference proceedings record."
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
literal|"10.1109/CICC.2011.6055279"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"issn"
argument_list|,
literal|"0886-5930"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkSimpleUseCase ()
specifier|public
name|void
name|checkSimpleUseCase
parameter_list|()
block|{
name|FieldFormatterCleanups
name|actions
init|=
operator|new
name|FieldFormatterCleanups
argument_list|(
literal|true
argument_list|,
literal|"title[IdentityFormatter]"
argument_list|)
decl_stmt|;
name|actions
operator|.
name|applySaveActions
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Educational session 1"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidSaveActionSting ()
specifier|public
name|void
name|invalidSaveActionSting
parameter_list|()
block|{
name|FieldFormatterCleanups
name|actions
init|=
operator|new
name|FieldFormatterCleanups
argument_list|(
literal|true
argument_list|,
literal|"title"
argument_list|)
decl_stmt|;
name|actions
operator|.
name|applySaveActions
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Educational session 1"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkLowerCaseSaveAction ()
specifier|public
name|void
name|checkLowerCaseSaveAction
parameter_list|()
block|{
name|FieldFormatterCleanups
name|actions
init|=
operator|new
name|FieldFormatterCleanups
argument_list|(
literal|true
argument_list|,
literal|"title[LowerCaseChanger]"
argument_list|)
decl_stmt|;
name|actions
operator|.
name|applySaveActions
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"educational session 1"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkTwoSaveActionsForOneField ()
specifier|public
name|void
name|checkTwoSaveActionsForOneField
parameter_list|()
block|{
name|FieldFormatterCleanups
name|actions
init|=
operator|new
name|FieldFormatterCleanups
argument_list|(
literal|true
argument_list|,
literal|"title[LowerCaseChanger,IdentityFormatter]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|actions
operator|.
name|getConfiguredActions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|actions
operator|.
name|applySaveActions
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"educational session 1"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkThreeSaveActionsForOneField ()
specifier|public
name|void
name|checkThreeSaveActionsForOneField
parameter_list|()
block|{
name|FieldFormatterCleanups
name|actions
init|=
operator|new
name|FieldFormatterCleanups
argument_list|(
literal|true
argument_list|,
literal|"title[LowerCaseChanger,IdentityFormatter,DateFormatter]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|actions
operator|.
name|getConfiguredActions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|actions
operator|.
name|applySaveActions
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"educational session 1"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkMultipleSaveActions ()
specifier|public
name|void
name|checkMultipleSaveActions
parameter_list|()
block|{
name|FieldFormatterCleanups
name|actions
init|=
operator|new
name|FieldFormatterCleanups
argument_list|(
literal|true
argument_list|,
literal|"pages[PageNumbersFormatter]title[LowerCaseChanger]"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldFormatterCleanup
argument_list|>
name|formatterCleanups
init|=
name|actions
operator|.
name|getConfiguredActions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|formatterCleanups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldFormatterCleanup
name|cleanup
range|:
name|formatterCleanups
control|)
block|{
if|if
condition|(
name|cleanup
operator|.
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"LowerCaseChanger"
argument_list|,
name|cleanup
operator|.
name|getFormatter
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cleanup
operator|.
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pages"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"PageNumbersFormatter"
argument_list|,
name|cleanup
operator|.
name|getFormatter
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|actions
operator|.
name|applySaveActions
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"educational session 1"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1--7"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkMultipleSaveActionsWithMultipleFormatters ()
specifier|public
name|void
name|checkMultipleSaveActionsWithMultipleFormatters
parameter_list|()
block|{
name|FieldFormatterCleanups
name|actions
init|=
operator|new
name|FieldFormatterCleanups
argument_list|(
literal|true
argument_list|,
literal|"pages[PageNumbersFormatter,DateFormatter]title[LowerCaseChanger]"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldFormatterCleanup
argument_list|>
name|formatterCleanups
init|=
name|actions
operator|.
name|getConfiguredActions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|formatterCleanups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldFormatterCleanup
name|cleanup
range|:
name|formatterCleanups
control|)
block|{
if|if
condition|(
name|cleanup
operator|.
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"LowerCaseChanger"
argument_list|,
name|cleanup
operator|.
name|getFormatter
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cleanup
operator|.
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pages"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
literal|"PageNumbersFormatter"
operator|.
name|equals
argument_list|(
name|cleanup
operator|.
name|getFormatter
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
operator|||
literal|"DateFormatter"
operator|.
name|equals
argument_list|(
name|cleanup
operator|.
name|getFormatter
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Wrong formatter for pages field: "
operator|+
name|cleanup
operator|.
name|getFormatter
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|actions
operator|.
name|applySaveActions
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"educational session 1"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1--7"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|eraseFormatterRemovesField ()
specifier|public
name|void
name|eraseFormatterRemovesField
parameter_list|()
block|{
name|FieldFormatterCleanups
name|actions
init|=
operator|new
name|FieldFormatterCleanups
argument_list|(
literal|true
argument_list|,
literal|"mont[EraseFormatter]"
argument_list|)
decl_stmt|;
name|actions
operator|.
name|applySaveActions
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"mont"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getDescriptionCallsFormatter ()
specifier|public
name|void
name|getDescriptionCallsFormatter
parameter_list|()
block|{
name|Formatter
name|formatter
init|=
name|mock
argument_list|(
name|Formatter
operator|.
name|class
argument_list|)
decl_stmt|;
name|FieldFormatterCleanup
name|cleanup
init|=
operator|new
name|FieldFormatterCleanup
argument_list|(
literal|"testField"
argument_list|,
name|formatter
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|formatter
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Format field %s"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Format field testField"
argument_list|,
name|cleanup
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

