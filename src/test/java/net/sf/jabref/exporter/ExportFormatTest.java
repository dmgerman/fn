begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.exporter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|exporter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationLoader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_class
DECL|class|ExportFormatTest
specifier|public
class|class
name|ExportFormatTest
block|{
annotation|@
name|Rule
DECL|field|testFolder
specifier|public
name|TemporaryFolder
name|testFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|ExportFormats
operator|.
name|initAllExports
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|journalAbbreviationLoader
operator|=
operator|new
name|JournalAbbreviationLoader
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExportingEmptyDatabaseLayoutBasedFormat ()
specifier|public
name|void
name|testExportingEmptyDatabaseLayoutBasedFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IExportFormat
argument_list|>
name|exportFormats
init|=
name|ExportFormats
operator|.
name|getExportFormats
argument_list|()
decl_stmt|;
name|IExportFormat
name|exportFormat
init|=
name|exportFormats
operator|.
name|get
argument_list|(
literal|"ris"
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|testFolder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|tmpFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|String
name|filename
init|=
name|tmpFile
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|Charset
name|charset
init|=
name|Charsets
operator|.
name|UTF_8
decl_stmt|;
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|()
decl_stmt|;
name|exportFormat
operator|.
name|performExport
argument_list|(
name|database
argument_list|,
name|metaData
argument_list|,
name|filename
argument_list|,
name|charset
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FileReader
name|fileReader
init|=
operator|new
name|FileReader
argument_list|(
name|tmpFile
argument_list|)
init|)
block|{
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|512
index|]
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|fileReader
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
comment|// Empty file
block|}
block|}
annotation|@
name|Test
DECL|method|testExportingEmptyDatabaseClassBasedFormat ()
specifier|public
name|void
name|testExportingEmptyDatabaseClassBasedFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IExportFormat
argument_list|>
name|exportFormats
init|=
name|ExportFormats
operator|.
name|getExportFormats
argument_list|()
decl_stmt|;
name|IExportFormat
name|exportFormat
init|=
name|exportFormats
operator|.
name|get
argument_list|(
literal|"oocalc"
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"exporttest"
argument_list|,
literal|"oocalc"
argument_list|)
decl_stmt|;
name|tmpFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|String
name|filename
init|=
name|tmpFile
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|Charset
name|charset
init|=
name|Charsets
operator|.
name|UTF_8
decl_stmt|;
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|()
decl_stmt|;
name|exportFormat
operator|.
name|performExport
argument_list|(
name|database
argument_list|,
name|metaData
argument_list|,
name|filename
argument_list|,
name|charset
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FileReader
name|fileReader
init|=
operator|new
name|FileReader
argument_list|(
name|tmpFile
argument_list|)
init|)
block|{
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|512
index|]
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|fileReader
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
comment|// Empty file
block|}
block|}
block|}
end_class

end_unit

