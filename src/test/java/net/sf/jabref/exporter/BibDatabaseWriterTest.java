begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.exporter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ImportFormatReader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|labelpattern
operator|.
name|DatabaseLabelPattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|AllEntriesGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|ExplicitGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|GroupHierarchyType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_class
DECL|class|BibDatabaseWriterTest
specifier|public
class|class
name|BibDatabaseWriterTest
block|{
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|writeWithNullWriterThrowsException ()
specifier|public
name|void
name|writeWithNullWriterThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|writer
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writePartOfDatabase
argument_list|(
literal|null
argument_list|,
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|mock
argument_list|(
name|SavePreferences
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|writeWithNullContextThrowsException ()
specifier|public
name|void
name|writeWithNullContextThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|writer
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writePartOfDatabase
argument_list|(
name|mock
argument_list|(
name|Writer
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|writeWithNullEntriesThrowsException ()
specifier|public
name|void
name|writeWithNullEntriesThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|writer
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writePartOfDatabase
argument_list|(
name|mock
argument_list|(
name|Writer
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|writeWithNullPreferencesThrowsException ()
specifier|public
name|void
name|writeWithNullPreferencesThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|writer
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writePartOfDatabase
argument_list|(
name|mock
argument_list|(
name|Writer
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEncoding ()
specifier|public
name|void
name|writeEncoding
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writePreamble ()
specifier|public
name|void
name|writePreamble
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|setPreamble
argument_list|(
literal|"Test preamble"
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Preamble{Test preamble}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writePreambleAndEncoding ()
specifier|public
name|void
name|writePreambleAndEncoding
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|setPreamble
argument_list|(
literal|"Test preamble"
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Preamble{Test preamble}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEntry ()
specifier|public
name|void
name|writeEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEncodingAndEntry ()
specifier|public
name|void
name|writeEncodingAndEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEpilogue ()
specifier|public
name|void
name|writeEpilogue
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|setEpilog
argument_list|(
literal|"Test epilog"
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"Test epilog"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEpilogueAndEncoding ()
specifier|public
name|void
name|writeEpilogueAndEncoding
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|setEpilog
argument_list|(
literal|"Test epilog"
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"Test epilog"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeMetadata ()
specifier|public
name|void
name|writeMetadata
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|()
decl_stmt|;
name|DatabaseLabelPattern
name|labelPattern
init|=
operator|new
name|DatabaseLabelPattern
argument_list|()
decl_stmt|;
name|labelPattern
operator|.
name|setDefaultValue
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setLabelPattern
argument_list|(
name|labelPattern
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|BibDatabase
argument_list|()
argument_list|,
name|metaData
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: keypatterndefault:test;}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeMetadataAndEncoding ()
specifier|public
name|void
name|writeMetadataAndEncoding
parameter_list|()
throws|throws
name|IOException
block|{
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|()
decl_stmt|;
name|DatabaseLabelPattern
name|labelPattern
init|=
operator|new
name|DatabaseLabelPattern
argument_list|()
decl_stmt|;
name|labelPattern
operator|.
name|setDefaultValue
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setLabelPattern
argument_list|(
name|labelPattern
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|BibDatabase
argument_list|()
argument_list|,
name|metaData
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: keypatterndefault:test;}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeGroups ()
specifier|public
name|void
name|writeGroups
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|()
decl_stmt|;
name|GroupTreeNode
name|groupRoot
init|=
operator|new
name|GroupTreeNode
argument_list|(
operator|new
name|AllEntriesGroup
argument_list|()
argument_list|)
decl_stmt|;
name|groupRoot
operator|.
name|addChild
argument_list|(
operator|new
name|GroupTreeNode
argument_list|(
operator|new
name|ExplicitGroup
argument_list|(
literal|"test"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setGroups
argument_list|(
name|groupRoot
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|BibDatabase
argument_list|()
argument_list|,
name|metaData
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
comment|// @formatter:off
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: groupsversion:3;}"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: groupstree:"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"0 AllEntriesGroup:;"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"1 ExplicitGroup:test\\;2\\;;"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// @formatter:on
block|}
annotation|@
name|Test
DECL|method|writeGroupsAndEncoding ()
specifier|public
name|void
name|writeGroupsAndEncoding
parameter_list|()
throws|throws
name|IOException
block|{
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|()
decl_stmt|;
name|GroupTreeNode
name|groupRoot
init|=
operator|new
name|GroupTreeNode
argument_list|(
operator|new
name|AllEntriesGroup
argument_list|()
argument_list|)
decl_stmt|;
name|groupRoot
operator|.
name|addChild
argument_list|(
operator|new
name|GroupTreeNode
argument_list|(
operator|new
name|ExplicitGroup
argument_list|(
literal|"test"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setGroups
argument_list|(
name|groupRoot
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|BibDatabase
argument_list|()
argument_list|,
name|metaData
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
comment|// @formatter:off
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: groupsversion:3;}"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-meta: groupstree:"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"0 AllEntriesGroup:;"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"1 ExplicitGroup:test\\;2\\;;"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// @formatter:on
block|}
annotation|@
name|Test
DECL|method|writeString ()
specifier|public
name|void
name|writeString
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|addString
argument_list|(
operator|new
name|BibtexString
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|,
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@String{name = {content}}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeStringAndEncoding ()
specifier|public
name|void
name|writeStringAndEncoding
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|addString
argument_list|(
operator|new
name|BibtexString
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|,
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"% Encoding: US-ASCII"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@String{name = {content}}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeEntryWithCustomizedTypeAlsoWritesTypeDeclaration ()
specifier|public
name|void
name|writeEntryWithCustomizedTypeAlsoWritesTypeDeclaration
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
operator|new
name|CustomEntryType
argument_list|(
literal|"customizedType"
argument_list|,
literal|"required"
argument_list|,
literal|"optional"
argument_list|)
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
literal|"customizedType"
argument_list|)
expr_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Customizedtype{,"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Comment{jabref-entrytype: Customizedtype: req[required] opt[optional]}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtrip ()
specifier|public
name|void
name|roundtrip
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|testBibtexFile
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/testbib/complex.bib"
argument_list|)
decl_stmt|;
name|Charset
name|encoding
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
name|ImportFormatReader
operator|.
name|getReader
argument_list|(
name|testBibtexFile
argument_list|,
name|encoding
argument_list|)
argument_list|)
decl_stmt|;
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withEncoding
argument_list|(
name|encoding
argument_list|)
operator|.
name|withSaveInOriginalOrder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|result
operator|.
name|getMetaData
argument_list|()
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|testBibtexFile
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scanner
operator|.
name|useDelimiter
argument_list|(
literal|"\\A"
argument_list|)
operator|.
name|next
argument_list|()
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|writeSavedSerializationOfEntryIfUnchanged ()
specifier|public
name|void
name|writeSavedSerializationOfEntryIfUnchanged
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Mr. author"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setParsedSerialization
argument_list|(
literal|"presaved serialization"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"presaved serialization"
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reformatEntryIfAskedToDoSo ()
specifier|public
name|void
name|reformatEntryIfAskedToDoSo
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Mr. author"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setParsedSerialization
argument_list|(
literal|"wrong serialization"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withReformatFile
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@Article{,"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"  author = {Mr. author}"
operator|+
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeSavedSerializationOfStringIfUnchanged ()
specifier|public
name|void
name|writeSavedSerializationOfStringIfUnchanged
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|BibtexString
name|string
init|=
operator|new
name|BibtexString
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|string
operator|.
name|setParsedSerialization
argument_list|(
literal|"serialization"
argument_list|)
expr_stmt|;
name|database
operator|.
name|addString
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|SavePreferences
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"serialization"
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reformatStringIfAskedToDoSo ()
specifier|public
name|void
name|reformatStringIfAskedToDoSo
parameter_list|()
throws|throws
name|IOException
block|{
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibDatabaseWriter
argument_list|()
decl_stmt|;
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|BibtexString
name|string
init|=
operator|new
name|BibtexString
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|string
operator|.
name|setParsedSerialization
argument_list|(
literal|"wrong serialization"
argument_list|)
expr_stmt|;
name|database
operator|.
name|addString
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|database
argument_list|,
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|SavePreferences
name|preferences
init|=
operator|new
name|SavePreferences
argument_list|()
operator|.
name|withReformatFile
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|databaseWriter
operator|.
name|writePartOfDatabase
argument_list|(
name|stringWriter
argument_list|,
name|context
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"@String{name = {content}}"
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

