begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|autocompleter
operator|.
name|AbstractAutoCompleter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|autocompleter
operator|.
name|AutoCompleterFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|autocompleter
operator|.
name|DefaultAutoCompleter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|autocompleter
operator|.
name|NameFieldAutoCompleter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|testutils
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * @author kahlert, cordes  */
end_comment

begin_class
DECL|class|AutoCompleterTest
specifier|public
class|class
name|AutoCompleterTest
block|{
DECL|field|OTHER_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|OTHER_FIELD
init|=
literal|"title"
decl_stmt|;
DECL|field|AUTHOR_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_FIELD
init|=
literal|"author"
decl_stmt|;
DECL|field|CROSSREF_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|CROSSREF_FIELD
init|=
literal|"crossref"
decl_stmt|;
DECL|field|ENTIRE_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|ENTIRE_FIELD
init|=
literal|"journal"
decl_stmt|;
DECL|field|PATH_TO_TEST_BIBTEX
specifier|public
specifier|static
specifier|final
name|String
name|PATH_TO_TEST_BIBTEX
init|=
literal|"src/test/resources/net/sf/jabref/bibtexFiles/test.bib"
decl_stmt|;
annotation|@
name|Test
DECL|method|testAutoCompleterFactory ()
specifier|public
name|void
name|testAutoCompleterFactory
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|AbstractAutoCompleter
name|autoCompleter
init|=
name|AutoCompleterFactory
operator|.
name|getFor
argument_list|(
name|AUTHOR_FIELD
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|autoCompleter
operator|instanceof
name|NameFieldAutoCompleter
argument_list|)
expr_stmt|;
name|autoCompleter
operator|=
name|AutoCompleterFactory
operator|.
name|getFor
argument_list|(
name|OTHER_FIELD
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|autoCompleter
operator|instanceof
name|DefaultAutoCompleter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultAutoCompleter ()
specifier|public
name|void
name|testDefaultAutoCompleter
parameter_list|()
block|{
name|AbstractAutoCompleter
name|autoCompleter
init|=
name|AutoCompleterFactory
operator|.
name|getFor
argument_list|(
name|OTHER_FIELD
argument_list|)
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"authentication"
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"authentication"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"authentication"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"authentication"
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"aut"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"aut"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// 1 for case-sensitive search, 2 for case insensitive search (Authornames also included)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Aut"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// "Aut" triggers case-sensitive search, now only "Authornames" is returned
name|assertEquals
argument_list|(
literal|"context"
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"con"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"con"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"osta"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"osta"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCrossRefCompleter ()
specifier|public
name|void
name|testCrossRefCompleter
parameter_list|()
block|{
name|AbstractAutoCompleter
name|autoCompleter
init|=
name|AutoCompleterFactory
operator|.
name|getFor
argument_list|(
name|CROSSREF_FIELD
argument_list|)
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"1102917"
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"1102917"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"1102917"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1102917"
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"11029"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"11029"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"osta"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"osta"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEntireFieldCompleter ()
specifier|public
name|void
name|testEntireFieldCompleter
parameter_list|()
block|{
name|AbstractAutoCompleter
name|autoCompleter
init|=
name|AutoCompleterFactory
operator|.
name|getFor
argument_list|(
name|ENTIRE_FIELD
argument_list|)
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Personal Ubiquitous Comput."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Personal Ubiquitous Comput."
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Personal Ubiquitous Comput."
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Personal Ubiquitous Comput."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Pers"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Pers"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"osta"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"osta"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNameFieldCompleter ()
specifier|public
name|void
name|testNameFieldCompleter
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|AbstractAutoCompleter
name|autoCompleter
init|=
name|AutoCompleterFactory
operator|.
name|getFor
argument_list|(
name|AUTHOR_FIELD
argument_list|)
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|autoCompleter
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// tweak preferences to match test cases
name|boolean
name|oldAutocomplete
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoComplete"
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"autoComplete"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|boolean
name|oldAutoCompFF
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoCompLF"
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"autoCompFF"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|boolean
name|oldAutoCompLF
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoCompLF"
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"autoCompLF"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|String
name|oldACFM
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOCOMPLETE_FIRSTNAME_MODE
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOCOMPLETE_FIRSTNAME_MODE
argument_list|,
name|JabRefPreferences
operator|.
name|AUTOCOMPLETE_FIRSTNAME_MODE_BOTH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Kostakos, V."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Kostakos"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Kostakos"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Kostakos, V."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Kosta"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Kosta"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Kostakos, Vassilis"
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Kostakos, Va"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Kostakos, Va"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Vassilis Kostakos"
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Va"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Va"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"osta"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"osta"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Eric von Hippel"
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Eric"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Eric"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"von Hippel, E."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"von"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"von"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reagle, Jr., J. M."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Reagle"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Reagle"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reagle, Jr., Joseph M."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Reagle, Jr., Jo"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Reagle, Jr., Jo"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Joseph M. Reagle, Jr."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Joseph"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Joseph"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"van den Huevel, Jr., J. A."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"van den"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"van den"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Johan A van den Huevel, Jr."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Joh"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Joh"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Jr. Sherry, John F."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Jr. S"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Jr."
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Sherry, John F., J."
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Sherry"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|autoCompleter
operator|.
name|complete
argument_list|(
literal|"Sherry"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// restore settings
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"autoComplete"
argument_list|,
name|oldAutocomplete
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"autoCompFF"
argument_list|,
name|oldAutoCompFF
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"autoCompLF"
argument_list|,
name|oldAutoCompLF
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOCOMPLETE_FIRSTNAME_MODE
argument_list|,
name|oldACFM
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEntryEditorForNameFieldAutoCompleter ()
specifier|public
name|void
name|testEntryEditorForNameFieldAutoCompleter
parameter_list|()
block|{
comment|// construct an EntryEditor ...
name|JabRef
name|jabref
init|=
name|TestUtils
operator|.
name|getInitializedJabRef
argument_list|()
decl_stmt|;
name|BibtexEntry
name|bibtexEntry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|bibtexEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Brigitte Laurant"
argument_list|)
expr_stmt|;
name|FieldEditor
name|authorTextField
init|=
operator|new
name|FieldTextArea
argument_list|(
literal|"author"
argument_list|,
literal|"Hans Meiser"
argument_list|)
decl_stmt|;
name|EntryEditor
name|editor
init|=
operator|new
name|EntryEditor
argument_list|(
name|jabref
operator|.
name|jrf
argument_list|,
name|jabref
operator|.
name|jrf
operator|.
name|basePanel
argument_list|()
argument_list|,
name|bibtexEntry
argument_list|)
decl_stmt|;
comment|// perform action ...
name|editor
operator|.
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|authorTextField
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// test content of stored words in autocompleter ...
name|AbstractAutoCompleter
name|autoCompleter
init|=
name|jabref
operator|.
name|jrf
operator|.
name|basePanel
argument_list|()
operator|.
name|getAutoCompleter
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|autoCompleter
operator|.
name|indexContainsWord
argument_list|(
literal|"Hans Meiser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|autoCompleter
operator|.
name|indexContainsWord
argument_list|(
literal|"Meiser, Hans"
argument_list|)
argument_list|)
expr_stmt|;
name|TestUtils
operator|.
name|closeJabRef
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEntryEditorForFieldAnotherAutoCompleter ()
specifier|public
name|void
name|testEntryEditorForFieldAnotherAutoCompleter
parameter_list|()
block|{
comment|// construct an EntryEditor ...
name|JabRef
name|jabref
init|=
name|TestUtils
operator|.
name|getInitializedJabRef
argument_list|()
decl_stmt|;
name|BibtexEntry
name|bibtexEntry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|bibtexEntry
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"Testtext"
argument_list|)
expr_stmt|;
name|FieldEditor
name|authorTextField
init|=
operator|new
name|FieldTextArea
argument_list|(
literal|"journal"
argument_list|,
literal|"New Testtext"
argument_list|)
decl_stmt|;
name|EntryEditor
name|editor
init|=
operator|new
name|EntryEditor
argument_list|(
name|jabref
operator|.
name|jrf
argument_list|,
name|jabref
operator|.
name|jrf
operator|.
name|basePanel
argument_list|()
argument_list|,
name|bibtexEntry
argument_list|)
decl_stmt|;
comment|// perform action ...
name|editor
operator|.
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|authorTextField
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// test content of stored words in autocompleter ...
name|AbstractAutoCompleter
name|autoCompleter
init|=
name|jabref
operator|.
name|jrf
operator|.
name|basePanel
argument_list|()
operator|.
name|getAutoCompleter
argument_list|(
literal|"journal"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|autoCompleter
operator|.
name|indexContainsWord
argument_list|(
literal|"New Testtext"
argument_list|)
argument_list|)
expr_stmt|;
name|TestUtils
operator|.
name|closeJabRef
argument_list|()
expr_stmt|;
block|}
DECL|method|getDatabase ()
specifier|private
name|BibtexDatabase
name|getDatabase
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|File
name|fileToLoad
init|=
operator|new
name|File
argument_list|(
name|PATH_TO_TEST_BIBTEX
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
name|JabRef
operator|.
name|openBibFile
argument_list|(
name|fileToLoad
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|filledDatabase
init|=
name|pr
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
return|return
name|filledDatabase
return|;
block|}
block|}
end_class

end_unit

