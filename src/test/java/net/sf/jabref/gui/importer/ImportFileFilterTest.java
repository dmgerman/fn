begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.importer
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|ImportFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|ImportFileFilterTest
specifier|public
class|class
name|ImportFileFilterTest
block|{
annotation|@
name|Test
DECL|method|nameWithSingleExtensions ()
specifier|public
name|void
name|nameWithSingleExtensions
parameter_list|()
block|{
name|ImportFormat
name|importFormatSingleExtension
init|=
name|mock
argument_list|(
name|ImportFormat
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|importFormatSingleExtension
operator|.
name|getFormatName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Single Extension"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|importFormatSingleExtension
operator|.
name|getExtensions
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|".abc"
argument_list|)
argument_list|)
expr_stmt|;
name|ImportFileFilter
name|importFileFilter
init|=
operator|new
name|ImportFileFilter
argument_list|(
name|importFormatSingleExtension
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Single Extension (*.abc)"
argument_list|,
name|importFileFilter
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameWithMultipleExtensions ()
specifier|public
name|void
name|nameWithMultipleExtensions
parameter_list|()
block|{
name|ImportFormat
name|importFormatMultipleExtensions
init|=
name|mock
argument_list|(
name|ImportFormat
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|importFormatMultipleExtensions
operator|.
name|getFormatName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"Multiple Extensions"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|importFormatMultipleExtensions
operator|.
name|getExtensions
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|".abc"
argument_list|,
literal|".xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|ImportFileFilter
name|importFileFilter
init|=
operator|new
name|ImportFileFilter
argument_list|(
name|importFormatMultipleExtensions
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Multiple Extensions (*.abc, *.xyz)"
argument_list|,
name|importFileFilter
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

