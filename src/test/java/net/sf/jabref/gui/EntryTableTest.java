begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|testutils
operator|.
name|category
operator|.
name|GUITests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|swing
operator|.
name|fixture
operator|.
name|JTableCellFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|swing
operator|.
name|fixture
operator|.
name|JTableFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Specific Use-Case:  * I import a database. Then I doubleclick on the first entry in the table to open the entry editor.  * Then I click on the first entry again, and scroll through all of the lists entries, without having to click  * on the table again.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|GUITests
operator|.
name|class
argument_list|)
DECL|class|EntryTableTest
specifier|public
class|class
name|EntryTableTest
extends|extends
name|AbstractUITest
block|{
DECL|field|SCROLL_ACTION_EXECUTION
specifier|private
specifier|final
specifier|static
name|int
name|SCROLL_ACTION_EXECUTION
init|=
literal|5
decl_stmt|;
DECL|field|TEST_FILE_NAME
specifier|private
specifier|final
specifier|static
name|String
name|TEST_FILE_NAME
init|=
literal|"testbib/testjabref.bib"
decl_stmt|;
DECL|field|DOWN
specifier|private
specifier|final
specifier|static
name|int
name|DOWN
init|=
name|KeyEvent
operator|.
name|VK_DOWN
decl_stmt|;
DECL|field|UP
specifier|private
specifier|final
specifier|static
name|int
name|UP
init|=
name|KeyEvent
operator|.
name|VK_UP
decl_stmt|;
DECL|field|TITLE_COLUMN_INDEX
specifier|private
specifier|final
specifier|static
name|int
name|TITLE_COLUMN_INDEX
init|=
literal|5
decl_stmt|;
annotation|@
name|Test
DECL|method|scrollThroughEntryList ()
specifier|public
name|void
name|scrollThroughEntryList
parameter_list|()
block|{
name|String
name|path
init|=
name|getAbsolutePath
argument_list|(
name|TEST_FILE_NAME
argument_list|)
decl_stmt|;
name|importBibIntoNewDatabase
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|JTableFixture
name|entryTable
init|=
name|mainFrame
operator|.
name|table
argument_list|()
decl_stmt|;
comment|//use a pattern from the first row to select it since it seems to be the best way to get the cell object
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"256.*"
argument_list|)
decl_stmt|;
name|JTableCellFixture
name|firstCell
init|=
name|entryTable
operator|.
name|cell
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|entryTable
operator|.
name|selectRows
argument_list|(
literal|0
argument_list|)
operator|.
name|doubleClick
argument_list|()
expr_stmt|;
comment|//delay has to be shortened so that double click is recognized
name|robot
argument_list|()
operator|.
name|settings
argument_list|()
operator|.
name|delayBetweenEvents
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|firstCell
operator|.
name|doubleClick
argument_list|()
expr_stmt|;
name|robot
argument_list|()
operator|.
name|settings
argument_list|()
operator|.
name|delayBetweenEvents
argument_list|(
name|SPEED_NORMAL
argument_list|)
expr_stmt|;
name|firstCell
operator|.
name|click
argument_list|()
expr_stmt|;
comment|//is the first table entry selected?
name|assertColumnValue
argument_list|(
name|entryTable
argument_list|,
literal|0
argument_list|,
name|TITLE_COLUMN_INDEX
argument_list|,
name|entryTable
operator|.
name|selectionValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//go throught the table and check if the entry with the correct index is selected
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SCROLL_ACTION_EXECUTION
condition|;
name|i
operator|++
control|)
block|{
name|robot
argument_list|()
operator|.
name|pressAndReleaseKey
argument_list|(
name|DOWN
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entryTable
operator|.
name|selectionValue
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertColumnValue
argument_list|(
name|entryTable
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|TITLE_COLUMN_INDEX
argument_list|,
name|entryTable
operator|.
name|selectionValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//do the same going up again
for|for
control|(
name|int
name|i
init|=
name|SCROLL_ACTION_EXECUTION
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|robot
argument_list|()
operator|.
name|pressAndReleaseKey
argument_list|(
name|UP
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entryTable
operator|.
name|selectionValue
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertColumnValue
argument_list|(
name|entryTable
argument_list|,
name|i
operator|-
literal|1
argument_list|,
name|TITLE_COLUMN_INDEX
argument_list|,
name|entryTable
operator|.
name|selectionValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeDatabase
argument_list|()
expr_stmt|;
name|exitJabRef
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

