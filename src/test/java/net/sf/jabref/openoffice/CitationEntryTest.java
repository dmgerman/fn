begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.openoffice
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|openoffice
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CitationEntryTest
specifier|public
class|class
name|CitationEntryTest
block|{
annotation|@
name|Test
DECL|method|testCitEntryInitalPageInfo ()
specifier|public
name|void
name|testCitEntryInitalPageInfo
parameter_list|()
block|{
name|CitationEntry
name|citEntry
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark"
argument_list|,
literal|"Context"
argument_list|,
literal|"Info"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|citEntry
operator|.
name|pageInfoChanged
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|citEntry
operator|.
name|getPageInfo
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Info"
argument_list|,
name|citEntry
operator|.
name|getPageInfo
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RefMark"
argument_list|,
name|citEntry
operator|.
name|getRefMarkName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Context"
argument_list|,
name|citEntry
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCitEntryOptionalInitalPageInfo ()
specifier|public
name|void
name|testCitEntryOptionalInitalPageInfo
parameter_list|()
block|{
name|CitationEntry
name|citEntry
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark"
argument_list|,
literal|"Context"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"Info"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|citEntry
operator|.
name|pageInfoChanged
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|citEntry
operator|.
name|getPageInfo
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Info"
argument_list|,
name|citEntry
operator|.
name|getPageInfo
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RefMark"
argument_list|,
name|citEntry
operator|.
name|getRefMarkName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Context"
argument_list|,
name|citEntry
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCitEntryInitalPageInfoChanged ()
specifier|public
name|void
name|testCitEntryInitalPageInfoChanged
parameter_list|()
block|{
name|CitationEntry
name|citEntry
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark"
argument_list|,
literal|"Context"
argument_list|,
literal|"Info"
argument_list|)
decl_stmt|;
name|citEntry
operator|.
name|setPageInfo
argument_list|(
literal|"Other info"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|citEntry
operator|.
name|pageInfoChanged
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|citEntry
operator|.
name|getPageInfo
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Other info"
argument_list|,
name|citEntry
operator|.
name|getPageInfo
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCitEntryInitalPageInfoRemoved ()
specifier|public
name|void
name|testCitEntryInitalPageInfoRemoved
parameter_list|()
block|{
name|CitationEntry
name|citEntry
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark"
argument_list|,
literal|"Context"
argument_list|,
literal|"Info"
argument_list|)
decl_stmt|;
name|citEntry
operator|.
name|setPageInfo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|citEntry
operator|.
name|pageInfoChanged
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|citEntry
operator|.
name|getPageInfo
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCitEntryNoInitalPageInfo ()
specifier|public
name|void
name|testCitEntryNoInitalPageInfo
parameter_list|()
block|{
name|CitationEntry
name|citEntry
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark"
argument_list|,
literal|"Context"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|citEntry
operator|.
name|pageInfoChanged
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|citEntry
operator|.
name|getPageInfo
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCitEntryNoInitalPageInfoChanged ()
specifier|public
name|void
name|testCitEntryNoInitalPageInfoChanged
parameter_list|()
block|{
name|CitationEntry
name|citEntry
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark"
argument_list|,
literal|"Context"
argument_list|)
decl_stmt|;
name|citEntry
operator|.
name|setPageInfo
argument_list|(
literal|"Other info"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|citEntry
operator|.
name|pageInfoChanged
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|citEntry
operator|.
name|getPageInfo
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Other info"
argument_list|,
name|citEntry
operator|.
name|getPageInfo
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCitEntryEquals ()
specifier|public
name|void
name|testCitEntryEquals
parameter_list|()
block|{
name|CitationEntry
name|citEntry1
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark"
argument_list|,
literal|"Context"
argument_list|,
literal|"Info"
argument_list|)
decl_stmt|;
name|CitationEntry
name|citEntry2
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark2"
argument_list|,
literal|"Context"
argument_list|,
literal|"Info"
argument_list|)
decl_stmt|;
name|CitationEntry
name|citEntry3
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark"
argument_list|,
literal|"Other Context"
argument_list|,
literal|"Other Info"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|citEntry1
argument_list|,
name|citEntry1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|citEntry1
argument_list|,
name|citEntry3
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|citEntry1
argument_list|,
name|citEntry2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|citEntry1
argument_list|,
literal|"Random String"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCitEntryCompareTo ()
specifier|public
name|void
name|testCitEntryCompareTo
parameter_list|()
block|{
name|CitationEntry
name|citEntry1
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark"
argument_list|,
literal|"Context"
argument_list|,
literal|"Info"
argument_list|)
decl_stmt|;
name|CitationEntry
name|citEntry2
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark2"
argument_list|,
literal|"Context"
argument_list|,
literal|"Info"
argument_list|)
decl_stmt|;
name|CitationEntry
name|citEntry3
init|=
operator|new
name|CitationEntry
argument_list|(
literal|"RefMark"
argument_list|,
literal|"Other Context"
argument_list|,
literal|"Other Info"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|citEntry1
operator|.
name|compareTo
argument_list|(
name|citEntry1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|citEntry1
operator|.
name|compareTo
argument_list|(
name|citEntry3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|citEntry1
operator|.
name|compareTo
argument_list|(
name|citEntry2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|citEntry2
operator|.
name|compareTo
argument_list|(
name|citEntry1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

