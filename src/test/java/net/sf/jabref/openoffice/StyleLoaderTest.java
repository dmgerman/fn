begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.openoffice
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|openoffice
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRef
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationLoader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationRepository
import|;
end_import

begin_class
DECL|class|StyleLoaderTest
specifier|public
class|class
name|StyleLoaderTest
block|{
DECL|field|backup
specifier|private
name|JabRefPreferences
name|backup
decl_stmt|;
DECL|field|preferences
specifier|private
name|OpenOfficePreferences
name|preferences
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|backup
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|==
literal|null
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|journalAbbreviationLoader
operator|==
literal|null
condition|)
block|{
name|Globals
operator|.
name|journalAbbreviationLoader
operator|=
name|mock
argument_list|(
name|JournalAbbreviationLoader
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|preferences
operator|=
operator|new
name|OpenOfficePreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|Globals
operator|.
name|prefs
operator|.
name|overwritePreferences
argument_list|(
name|backup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|throwNPEWithNullPreferences ()
specifier|public
name|void
name|throwNPEWithNullPreferences
parameter_list|()
block|{
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
literal|null
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Charset
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|throwNPEWithNullRepository ()
specifier|public
name|void
name|throwNPEWithNullRepository
parameter_list|()
block|{
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
name|mock
argument_list|(
name|OpenOfficePreferences
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mock
argument_list|(
name|Charset
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|throwNPEWithNullCharset ()
specifier|public
name|void
name|throwNPEWithNullCharset
parameter_list|()
block|{
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
name|mock
argument_list|(
name|OpenOfficePreferences
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetStylesWithEmptyExternal ()
specifier|public
name|void
name|testGetStylesWithEmptyExternal
parameter_list|()
block|{
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddStyleLeadsToOneMoreStyle ()
specifier|public
name|void
name|testAddStyleLeadsToOneMoreStyle
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|beforeAdding
init|=
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|JabRef
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|loader
operator|.
name|addStyle
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeAdding
operator|+
literal|1
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddInvalidStyleLeadsToNoMoreStyle ()
specifier|public
name|void
name|testAddInvalidStyleLeadsToNoMoreStyle
parameter_list|()
block|{
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXTERNAL_STYLE_FILES
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|beforeAdding
init|=
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|loader
operator|.
name|addStyle
argument_list|(
literal|"DefinitelyNotAValidFileNameOrWeAreExtremelyUnlucky"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeAdding
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitalizeWithOneExternalFile ()
specifier|public
name|void
name|testInitalizeWithOneExternalFile
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|JabRef
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitalizeWithIncorrectExternalFile ()
specifier|public
name|void
name|testInitalizeWithIncorrectExternalFile
parameter_list|()
block|{
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"DefinitelyNotAValidFileNameOrWeAreExtremelyUnlucky"
argument_list|)
argument_list|)
expr_stmt|;
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
operator|new
name|OpenOfficePreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitalizeWithOneExternalFileRemoveStyle ()
specifier|public
name|void
name|testInitalizeWithOneExternalFileRemoveStyle
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|JabRef
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
operator|new
name|OpenOfficePreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OOBibStyle
argument_list|>
name|toremove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|beforeRemoving
init|=
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|OOBibStyle
name|style
range|:
name|loader
operator|.
name|getStyles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|style
operator|.
name|isFromResource
argument_list|()
condition|)
block|{
name|toremove
operator|.
name|add
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|OOBibStyle
name|style
range|:
name|toremove
control|)
block|{
name|assertTrue
argument_list|(
name|loader
operator|.
name|removeStyle
argument_list|(
name|style
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|beforeRemoving
operator|-
literal|1
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitalizeWithOneExternalFileRemoveStyleUpdatesPreferences ()
specifier|public
name|void
name|testInitalizeWithOneExternalFileRemoveStyleUpdatesPreferences
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|JabRef
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OOBibStyle
argument_list|>
name|toremove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OOBibStyle
name|style
range|:
name|loader
operator|.
name|getStyles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|style
operator|.
name|isFromResource
argument_list|()
condition|)
block|{
name|toremove
operator|.
name|add
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|OOBibStyle
name|style
range|:
name|toremove
control|)
block|{
name|assertTrue
argument_list|(
name|loader
operator|.
name|removeStyle
argument_list|(
name|style
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|preferences
operator|.
name|getExternalStyles
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddSameStyleTwiceLeadsToOneMoreStyle ()
specifier|public
name|void
name|testAddSameStyleTwiceLeadsToOneMoreStyle
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
operator|new
name|OpenOfficePreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|beforeAdding
init|=
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|JabRef
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|loader
operator|.
name|addStyle
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|loader
operator|.
name|addStyle
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeAdding
operator|+
literal|1
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testAddNullStyleThrowsNPE ()
specifier|public
name|void
name|testAddNullStyleThrowsNPE
parameter_list|()
block|{
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
operator|new
name|OpenOfficePreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|addStyle
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDefaultUsedStyle ()
specifier|public
name|void
name|testGetDefaultUsedStyle
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|remove
argument_list|(
name|JabRefPreferences
operator|.
name|OO_BIBLIOGRAPHY_STYLE_FILE
argument_list|)
expr_stmt|;
name|StyleLoader
name|loader
init|=
operator|new
name|StyleLoader
argument_list|(
operator|new
name|OpenOfficePreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
argument_list|,
name|mock
argument_list|(
name|JournalAbbreviationRepository
operator|.
name|class
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|OOBibStyle
name|style
init|=
name|loader
operator|.
name|getUsedStyle
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|style
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|,
name|style
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|,
name|preferences
operator|.
name|getCurrentStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

