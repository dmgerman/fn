begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|CaseChangersTest
specifier|public
class|class
name|CaseChangersTest
extends|extends
name|TestCase
block|{
DECL|method|testNumberOfModes ()
specifier|public
name|void
name|testNumberOfModes
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"lower"
argument_list|,
name|CaseChangers
operator|.
name|LOWER
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UPPER"
argument_list|,
name|CaseChangers
operator|.
name|UPPER
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper first"
argument_list|,
name|CaseChangers
operator|.
name|UPPER_FIRST
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper Each First"
argument_list|,
name|CaseChangers
operator|.
name|UPPER_EACH_FIRST
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper Each First and of the Skipped"
argument_list|,
name|CaseChangers
operator|.
name|UPPER_EACH_FIRST_SKIP_SMALL_WORDS
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testChangeCaseLower ()
specifier|public
name|void
name|testChangeCaseLower
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|CaseChangers
operator|.
name|LOWER
operator|.
name|changeCase
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lower"
argument_list|,
name|CaseChangers
operator|.
name|LOWER
operator|.
name|changeCase
argument_list|(
literal|"LOWER"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testChangeCaseUpper ()
specifier|public
name|void
name|testChangeCaseUpper
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|CaseChangers
operator|.
name|UPPER
operator|.
name|changeCase
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOWER"
argument_list|,
name|CaseChangers
operator|.
name|UPPER
operator|.
name|changeCase
argument_list|(
literal|"LOWER"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UPPER"
argument_list|,
name|CaseChangers
operator|.
name|UPPER
operator|.
name|changeCase
argument_list|(
literal|"upper"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UPPER"
argument_list|,
name|CaseChangers
operator|.
name|UPPER
operator|.
name|changeCase
argument_list|(
literal|"UPPER"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testChangeCaseUpperFirst ()
specifier|public
name|void
name|testChangeCaseUpperFirst
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|CaseChangers
operator|.
name|UPPER_FIRST
operator|.
name|changeCase
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper first"
argument_list|,
name|CaseChangers
operator|.
name|UPPER_FIRST
operator|.
name|changeCase
argument_list|(
literal|"upper First"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testChangeCaseUpperEachFirst ()
specifier|public
name|void
name|testChangeCaseUpperEachFirst
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|CaseChangers
operator|.
name|UPPER_EACH_FIRST
operator|.
name|changeCase
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper Each First"
argument_list|,
name|CaseChangers
operator|.
name|UPPER_EACH_FIRST
operator|.
name|changeCase
argument_list|(
literal|"upper each First"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testChangeCaseUpperEachFirstSkipSmallerWords ()
specifier|public
name|void
name|testChangeCaseUpperEachFirstSkipSmallerWords
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|CaseChangers
operator|.
name|UPPER_EACH_FIRST_SKIP_SMALL_WORDS
operator|.
name|changeCase
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper Each First and"
argument_list|,
name|CaseChangers
operator|.
name|UPPER_EACH_FIRST_SKIP_SMALL_WORDS
operator|.
name|changeCase
argument_list|(
literal|"upper each First and"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper Each First and"
argument_list|,
name|CaseChangers
operator|.
name|UPPER_EACH_FIRST_SKIP_SMALL_WORDS
operator|.
name|changeCase
argument_list|(
literal|"upper each First aNd"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Upper Each First and"
argument_list|,
name|CaseChangers
operator|.
name|UPPER_EACH_FIRST_SKIP_SMALL_WORDS
operator|.
name|changeCase
argument_list|(
literal|"upper each First AND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

