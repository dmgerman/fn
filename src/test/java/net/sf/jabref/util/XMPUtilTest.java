begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|COSVisitorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Limitations: The test suite only handles UTF8. Not UTF16.  *  * @author Christopher Oezbek<oezi@oezi.de>  */
end_comment

begin_class
DECL|class|XMPUtilTest
specifier|public
class|class
name|XMPUtilTest
block|{
DECL|field|SRC_TEST_ESOURCES_ENCRYPTED_PDF
specifier|public
specifier|static
specifier|final
name|String
name|SRC_TEST_ESOURCES_ENCRYPTED_PDF
init|=
literal|"src/test/resources/encrypted.pdf"
decl_stmt|;
comment|/**      * Wrap bibtex-data (<bibtex:author>...) into an rdf:Description.      *      * @param bibtex      * @return      */
DECL|method|bibtexDescription (String bibtex)
specifier|public
specifier|static
name|String
name|bibtexDescription
parameter_list|(
name|String
name|bibtex
parameter_list|)
block|{
return|return
literal|"<rdf:Description rdf:about='' xmlns:bibtex='http://jabref.sourceforge.net/bibteXMP/'>\n"
operator|+
name|bibtex
operator|+
literal|"\n"
operator|+
literal|"</rdf:Description>\n"
return|;
block|}
comment|/**      * Wrap bibtex-descriptions (rdf:Description) into the xpacket header.      *      * @param bibtexDescriptions      * @return      */
DECL|method|bibtexXPacket (String bibtexDescriptions)
specifier|public
specifier|static
name|String
name|bibtexXPacket
parameter_list|(
name|String
name|bibtexDescriptions
parameter_list|)
block|{
name|StringBuilder
name|xmp
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|xmp
operator|.
name|append
argument_list|(
literal|"<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>\n"
argument_list|)
expr_stmt|;
name|xmp
operator|.
name|append
argument_list|(
literal|"<x:xmpmeta xmlns:x='adobe:ns:meta/'>\n"
argument_list|)
expr_stmt|;
name|xmp
operator|.
name|append
argument_list|(
literal|"<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/' xmlns:rdfs='http://www.w3.org/2000/01/rdf-schema#'>\n"
argument_list|)
expr_stmt|;
name|xmp
operator|.
name|append
argument_list|(
name|bibtexDescriptions
argument_list|)
expr_stmt|;
name|xmp
operator|.
name|append
argument_list|(
literal|"</rdf:RDF>\n"
argument_list|)
expr_stmt|;
name|xmp
operator|.
name|append
argument_list|(
literal|"</x:xmpmeta>\n"
argument_list|)
expr_stmt|;
name|xmp
operator|.
name|append
argument_list|(
literal|"<?xpacket end='r'?>"
argument_list|)
expr_stmt|;
return|return
name|xmp
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Write a manually constructed xmp-string to file      *      * @param xmpString      * @throws Exception      */
DECL|method|writeManually (File tempFile, String xmpString)
specifier|public
name|void
name|writeManually
parameter_list|(
name|File
name|tempFile
parameter_list|,
name|String
name|xmpString
parameter_list|)
throws|throws
name|Exception
block|{
name|PDDocument
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|tempFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: Cannot add metadata to encrypted document."
argument_list|)
expr_stmt|;
comment|//System.exit(1);
block|}
name|PDDocumentCatalog
name|catalog
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
comment|// Convert to UTF8 and make available for metadata.
name|ByteArrayOutputStream
name|bs
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamWriter
name|os
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|bs
argument_list|,
literal|"UTF8"
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|xmpString
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bs
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|PDMetadata
name|metadataStream
init|=
operator|new
name|PDMetadata
argument_list|(
name|document
argument_list|,
name|in
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|catalog
operator|.
name|setMetadata
argument_list|(
name|metadataStream
argument_list|)
expr_stmt|;
name|document
operator|.
name|save
argument_list|(
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|bibtexString2BibtexEntry (String s)
specifier|public
specifier|static
name|BibtexEntry
name|bibtexString2BibtexEntry
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|c
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|bibtexEntry2BibtexString (BibtexEntry e)
specifier|public
specifier|static
name|String
name|bibtexEntry2BibtexString
parameter_list|(
name|BibtexEntry
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|e
operator|.
name|write
argument_list|(
name|sw
argument_list|,
operator|new
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|LatexFieldFormatter
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* TEST DATA */
DECL|method|t1BibtexString ()
specifier|public
name|String
name|t1BibtexString
parameter_list|()
block|{
return|return
literal|"@article{canh05,\n"
operator|+
literal|"  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},\n"
operator|+
literal|"  title = {Effective work practices for floss development: A model and propositions},\n"
operator|+
literal|"  booktitle = {Hawaii International Conference On System Sciences (HICSS)},\n"
operator|+
literal|"  year = {2005},\n"
operator|+
literal|"  owner = {oezbek},\n"
operator|+
literal|"  timestamp = {2006.05.29},\n"
operator|+
literal|"  url = {http://james.howison.name/publications.html}}\n"
return|;
block|}
DECL|method|t1BibtexEntry ()
specifier|public
name|BibtexEntry
name|t1BibtexEntry
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|XMPUtilTest
operator|.
name|bibtexString2BibtexEntry
argument_list|(
name|t1BibtexString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|t2XMP ()
specifier|public
name|String
name|t2XMP
parameter_list|()
block|{
return|return
literal|"<rdf:Description rdf:about='' xmlns:bibtex='http://jabref.sourceforge.net/bibteXMP/' "
operator|+
literal|"bibtex:title='ï¿½ptï¿½mzï¿½tï¿½ï¿½n' "
operator|+
literal|"bibtex:bibtexkey='OezbekC06' "
operator|+
literal|"bibtex:entrytype='INCOLLECTION' "
operator|+
literal|"bibtex:year='2003' "
operator|+
literal|"bibtex:booktitle='Proceedings of the of the 25th International Conference on \n Software-Engineering (Portland, Oregon)' "
operator|+
literal|">\n"
operator|+
literal|"<bibtex:pdf>YeKis03 - Towards.pdf</bibtex:pdf>\n"
operator|+
literal|"</rdf:Description>\n"
return|;
block|}
DECL|method|t2BibtexString ()
specifier|public
name|String
name|t2BibtexString
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|XMPUtilTest
operator|.
name|bibtexEntry2BibtexString
argument_list|(
name|t2BibtexEntry
argument_list|()
argument_list|)
return|;
block|}
DECL|method|t2BibtexEntry ()
specifier|public
name|BibtexEntry
name|t2BibtexEntry
parameter_list|()
block|{
name|BibtexEntry
name|e
init|=
operator|new
name|BibtexEntry
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|,
name|BibtexEntryType
operator|.
name|INCOLLECTION
argument_list|)
decl_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"ï¿½ptï¿½mzï¿½tï¿½ï¿½n"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"bibtexkey"
argument_list|,
literal|"OezbekC06"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2003"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"booktitle"
argument_list|,
literal|"Proceedings of the of the 25th International Conference on Software-Engineering (Portland, Oregon)"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"pdf"
argument_list|,
literal|"YeKis03 - Towards.pdf"
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
DECL|method|t3BibtexEntry ()
specifier|public
name|BibtexEntry
name|t3BibtexEntry
parameter_list|()
block|{
name|BibtexEntry
name|e
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|e
operator|.
name|setType
argument_list|(
name|BibtexEntryType
operator|.
name|INPROCEEDINGS
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Hypersonic ultra-sound"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"bibtexkey"
argument_list|,
literal|"Clarkson06"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Kelly Clarkson and Ozzy Osbourne"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"International Journal of High Fidelity"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"booktitle"
argument_list|,
literal|"Catch-22"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"editor"
argument_list|,
literal|"Huey Duck and Dewey Duck and Louie Duck"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"pdf"
argument_list|,
literal|"YeKis03 - Towards.pdf"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
literal|"peanut,butter,jelly"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"1982"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
literal|"#jul#"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
literal|"The success of the Linux operating system has demonstrated the viability of an alternative form of software development ï¿½ open source software ï¿½ that challenges traditional assumptions about software markets. Understanding what drives open source developers to participate in open source projects is crucial for assessing the impact of open source software. This article identifies two broad types of motivations that account for their participation in open source projects. The first category includes internal factors such as intrinsic motivation and altruism, and the second category focuses on external rewards such as expected future returns and personal needs. This article also reports the results of a survey administered to open source programmers."
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
DECL|method|t3BibtexString ()
specifier|public
name|String
name|t3BibtexString
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|XMPUtilTest
operator|.
name|bibtexEntry2BibtexString
argument_list|(
name|t3BibtexEntry
argument_list|()
argument_list|)
return|;
block|}
DECL|method|t3XMP ()
specifier|public
name|String
name|t3XMP
parameter_list|()
block|{
return|return
name|XMPUtilTest
operator|.
name|bibtexDescription
argument_list|(
literal|"<bibtex:title>Hypersonic ultra-sound</bibtex:title>\n"
operator|+
literal|"<bibtex:author><rdf:Seq>\n"
operator|+
literal|"<rdf:li>Kelly Clarkson</rdf:li>"
operator|+
literal|"<rdf:li>Ozzy Osbourne</rdf:li>"
operator|+
literal|"</rdf:Seq></bibtex:author>"
operator|+
literal|"<bibtex:editor><rdf:Seq>"
operator|+
literal|"<rdf:li>Huey Duck</rdf:li>"
operator|+
literal|"<rdf:li>Dewey Duck</rdf:li>"
operator|+
literal|"<rdf:li>Louie Duck</rdf:li>"
operator|+
literal|"</rdf:Seq></bibtex:editor>"
operator|+
literal|"<bibtex:bibtexkey>Clarkson06</bibtex:bibtexkey>"
operator|+
literal|"<bibtex:journal>International Journal of High Fidelity</bibtex:journal>"
operator|+
literal|"<bibtex:booktitle>Catch-22</bibtex:booktitle>"
operator|+
literal|"<bibtex:pdf>YeKis03 - Towards.pdf</bibtex:pdf>"
operator|+
literal|"<bibtex:keywords>peanut,butter,jelly</bibtex:keywords>"
operator|+
literal|"<bibtex:entrytype>Inproceedings</bibtex:entrytype>"
operator|+
literal|"<bibtex:year>1982</bibtex:year>"
operator|+
literal|"<bibtex:month>#jul#</bibtex:month>"
operator|+
literal|"<bibtex:abstract>The success of the Linux operating system has demonstrated the viability of an alternative form of software development ï¿½ open source software ï¿½ that challenges traditional assumptions about software markets. Understanding what drives open source developers to participate in open source projects is crucial for assessing the impact of open source software. This article identifies two broad types of motivations that account for their participation in open source projects. The first category includes internal factors such as intrinsic motivation and altruism, and the second category focuses on external rewards such as expected future returns and personal needs. This article also reports the results of a survey administered to open source programmers.</bibtex:abstract>"
argument_list|)
return|;
block|}
comment|/**      * The PDF file that basically all operations are done upon.      */
DECL|field|pdfFile
name|File
name|pdfFile
decl_stmt|;
comment|/**      * Create a temporary PDF-file with a single empty page.      */
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|COSVisitorException
block|{
name|pdfFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"JabRef"
argument_list|,
literal|".pdf"
argument_list|)
expr_stmt|;
name|PDDocument
name|pdf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pdf
operator|=
operator|new
name|PDDocument
argument_list|()
expr_stmt|;
name|pdf
operator|.
name|addPage
argument_list|(
operator|new
name|PDPage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Need page to open in Acrobat
name|pdf
operator|.
name|save
argument_list|(
name|pdfFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|pdf
operator|!=
literal|null
condition|)
block|{
name|pdf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Don't forget to initialize the preferences
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|==
literal|null
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
comment|// Store Privacy Settings
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|use
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useXmpPrivacyFilter"
argument_list|)
expr_stmt|;
name|privacyFilters
operator|=
name|prefs
operator|.
name|getStringArray
argument_list|(
name|JabRefPreferences
operator|.
name|XMP_PRIVACY_FILTERS
argument_list|)
expr_stmt|;
comment|// The code assumes privacy filters to be off
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"useXmpPrivacyFilter"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|field|prefs
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|use
name|boolean
name|use
decl_stmt|;
DECL|field|privacyFilters
name|String
index|[]
name|privacyFilters
decl_stmt|;
comment|/**      * Delete the temporary file.      */
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|pdfFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"useXmpPrivacyFilter"
argument_list|,
name|use
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringArray
argument_list|(
name|JabRefPreferences
operator|.
name|XMP_PRIVACY_FILTERS
argument_list|,
name|privacyFilters
argument_list|)
expr_stmt|;
block|}
comment|/**      * Most basic test for reading.      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testReadXMPSimple ()
specifier|public
name|void
name|testReadXMPSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bibtex
init|=
literal|"<bibtex:year>2003</bibtex:year>\n"
operator|+
literal|"<bibtex:title>Beach sand convolution by surf-wave optimzation</bibtex:title>\n"
operator|+
literal|"<bibtex:bibtexkey>OezbekC06</bibtex:bibtexkey>\n"
decl_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|XMPUtilTest
operator|.
name|bibtexDescription
argument_list|(
name|bibtex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"OezbekC06"
argument_list|,
name|e
operator|.
name|getCiteKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2003"
argument_list|,
name|e
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Beach sand convolution by surf-wave optimzation"
argument_list|,
name|e
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BibtexEntryType
operator|.
name|OTHER
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Is UTF8 handling working? This is because Java by default uses the      * platform encoding or a special UTF-kind.      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testReadXMPUTF8 ()
specifier|public
name|void
name|testReadXMPUTF8
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bibtex
init|=
literal|"<bibtex:year>2003</bibtex:year>\n"
operator|+
literal|"<bibtex:title>ï¿½ptï¿½mzï¿½tï¿½ï¿½n</bibtex:title>\n"
operator|+
literal|"<bibtex:bibtexkey>OezbekC06</bibtex:bibtexkey>\n"
decl_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|XMPUtilTest
operator|.
name|bibtexDescription
argument_list|(
name|bibtex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"OezbekC06"
argument_list|,
name|e
operator|.
name|getCiteKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2003"
argument_list|,
name|e
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ï¿½ptï¿½mzï¿½tï¿½ï¿½n"
argument_list|,
name|e
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BibtexEntryType
operator|.
name|OTHER
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make sure that the privacy filter works.      *      * @throws IOException          Should not happen.      * @throws TransformerException Should not happen.      */
annotation|@
name|Test
DECL|method|testPrivacyFilter ()
specifier|public
name|void
name|testPrivacyFilter
parameter_list|()
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
block|{
name|BibtexEntry
name|e
init|=
name|t1BibtexEntry
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"useXmpPrivacyFilter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringArray
argument_list|(
name|JabRefPreferences
operator|.
name|XMP_PRIVACY_FILTERS
argument_list|,
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"note"
argument_list|)
expr_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|x
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bibtexkey"
argument_list|,
literal|"booktitle"
argument_list|,
literal|"owner"
argument_list|,
literal|"timestamp"
argument_list|,
literal|"url"
argument_list|,
literal|"year"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedFields
argument_list|,
name|x
operator|.
name|getAllFields
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// First set:
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"useXmpPrivacyFilter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringArray
argument_list|(
name|JabRefPreferences
operator|.
name|XMP_PRIVACY_FILTERS
argument_list|,
literal|"author;title;note;booktitle;year;owner;timestamp"
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|t1BibtexEntry
argument_list|()
decl_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|x
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ts
init|=
name|x
operator|.
name|getAllFields
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|ts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ts
operator|.
name|contains
argument_list|(
literal|"bibtextype"
argument_list|)
expr_stmt|;
name|ts
operator|.
name|contains
argument_list|(
literal|"bibtexkey"
argument_list|)
expr_stmt|;
name|ts
operator|.
name|contains
argument_list|(
literal|"year"
argument_list|)
expr_stmt|;
name|ts
operator|.
name|contains
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Are authors and editors correctly read?      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testReadXMPSeq ()
specifier|public
name|void
name|testReadXMPSeq
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bibtex
init|=
literal|"<bibtex:author><rdf:Seq>\n"
operator|+
literal|"<rdf:li>Kelly Clarkson</rdf:li>"
operator|+
literal|"<rdf:li>Ozzy Osbourne</rdf:li>"
operator|+
literal|"</rdf:Seq></bibtex:author>"
operator|+
literal|"<bibtex:editor><rdf:Seq>"
operator|+
literal|"<rdf:li>Huey Duck</rdf:li>"
operator|+
literal|"<rdf:li>Dewey Duck</rdf:li>"
operator|+
literal|"<rdf:li>Louie Duck</rdf:li>"
operator|+
literal|"</rdf:Seq></bibtex:editor>"
operator|+
literal|"<bibtex:bibtexkey>Clarkson06</bibtex:bibtexkey>"
decl_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|XMPUtilTest
operator|.
name|bibtexDescription
argument_list|(
name|bibtex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Clarkson06"
argument_list|,
name|e
operator|.
name|getCiteKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Kelly Clarkson and Ozzy Osbourne"
argument_list|,
name|e
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Huey Duck and Dewey Duck and Louie Duck"
argument_list|,
name|e
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BibtexEntryType
operator|.
name|OTHER
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Is the XMPEntryType correctly set?      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testReadXMPEntryType ()
specifier|public
name|void
name|testReadXMPEntryType
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bibtex
init|=
literal|"<bibtex:entrytype>ARticle</bibtex:entrytype>"
decl_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|XMPUtilTest
operator|.
name|bibtexDescription
argument_list|(
name|bibtex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BibtexEntryType
operator|.
name|ARTICLE
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readManually (File tempFile)
specifier|public
specifier|static
name|String
name|readManually
parameter_list|(
name|File
name|tempFile
parameter_list|)
throws|throws
name|IOException
block|{
name|PDDocument
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|tempFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: Cannot add metadata to encrypted document."
argument_list|)
expr_stmt|;
comment|//System.exit(1);
block|}
name|PDDocumentCatalog
name|catalog
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDMetadata
name|meta
init|=
name|catalog
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// PDMetadata.getInputStreamAsString() does not work
comment|// Convert to UTF8 and make available for metadata.
name|InputStreamReader
name|is
init|=
operator|new
name|InputStreamReader
argument_list|(
name|meta
operator|.
name|createInputStream
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
decl_stmt|;
return|return
name|XMPUtilTest
operator|.
name|slurp
argument_list|(
name|is
argument_list|)
operator|.
name|trim
argument_list|()
return|;
comment|// Trim to kill padding end-newline.
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Test whether the helper function work correctly.      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testWriteReadManually ()
specifier|public
name|void
name|testWriteReadManually
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bibtex
init|=
literal|"<bibtex:year>2003</bibtex:year>\n"
operator|+
literal|"<bibtex:title>ï¿½ptï¿½mzï¿½tï¿½ï¿½n</bibtex:title>\n"
operator|+
literal|"<bibtex:bibtexkey>OezbekC06</bibtex:bibtexkey>\n"
decl_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|XMPUtilTest
operator|.
name|bibtexDescription
argument_list|(
name|bibtex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|XMPUtilTest
operator|.
name|bibtexDescription
argument_list|(
name|bibtex
argument_list|)
argument_list|)
argument_list|,
name|XMPUtilTest
operator|.
name|readManually
argument_list|(
name|pdfFile
argument_list|)
argument_list|)
expr_stmt|;
name|bibtex
operator|=
literal|"<bibtex:author><rdf:Seq>\n"
operator|+
literal|"<rdf:li>Kelly Clarkson</rdf:li>"
operator|+
literal|"<rdf:li>Ozzy Osbourne</rdf:li>"
operator|+
literal|"</rdf:Seq></bibtex:author>"
operator|+
literal|"<bibtex:editor><rdf:Seq>"
operator|+
literal|"<rdf:li>Huey Duck</rdf:li>"
operator|+
literal|"<rdf:li>Dewey Duck</rdf:li>"
operator|+
literal|"<rdf:li>Louie Duck</rdf:li>"
operator|+
literal|"</rdf:Seq></bibtex:editor>"
operator|+
literal|"<bibtex:bibtexkey>Clarkson06</bibtex:bibtexkey>"
expr_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|XMPUtilTest
operator|.
name|bibtexDescription
argument_list|(
name|bibtex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|XMPUtilTest
operator|.
name|bibtexDescription
argument_list|(
name|bibtex
argument_list|)
argument_list|)
argument_list|,
name|XMPUtilTest
operator|.
name|readManually
argument_list|(
name|pdfFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that readXMP and writeXMP work together.      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testReadWriteXMP ()
specifier|public
name|void
name|testReadWriteXMP
parameter_list|()
throws|throws
name|Exception
block|{
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{canh05,"
operator|+
literal|"  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},"
operator|+
literal|"\n"
operator|+
literal|"  title = {Effective work practices for floss development: A model and propositions},"
operator|+
literal|"\n"
operator|+
literal|"  booktitle = {Hawaii International Conference On System Sciences (HICSS)},"
operator|+
literal|"\n"
operator|+
literal|"  year = {2005},"
operator|+
literal|"\n"
operator|+
literal|"  owner = {oezbek},"
operator|+
literal|"\n"
operator|+
literal|"  timestamp = {2006.05.29},"
operator|+
literal|"\n"
operator|+
literal|"  url = {http://james.howison.name/publications.html}"
operator|+
literal|"\n"
operator|+
literal|"}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|c
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|c
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|x
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|e
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
comment|/**      * Are newlines in the XML processed correctly?      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testNewlineHandling ()
specifier|public
name|void
name|testNewlineHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bibtex
init|=
literal|"<bibtex:title>\nHallo\nWorld \nthis \n is\n\nnot \n\nan \n\n exercise \n \n.\n \n\n</bibtex:title>\n"
operator|+
literal|"<bibtex:tabs>\nHallo\tWorld \tthis \t is\t\tnot \t\tan \t\n exercise \t \n.\t \n\t</bibtex:tabs>\n"
operator|+
literal|"<bibtex:abstract>\n\nAbstract preserve\n\t Whitespace\n\n</bibtex:abstract>"
decl_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|XMPUtilTest
operator|.
name|bibtexDescription
argument_list|(
name|bibtex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hallo World this is not an exercise ."
argument_list|,
name|e
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hallo World this is not an exercise ."
argument_list|,
name|e
operator|.
name|getField
argument_list|(
literal|"tabs"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\n\nAbstract preserve\n\t Whitespace\n\n"
argument_list|,
name|e
operator|.
name|getField
argument_list|(
literal|"abstract"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test whether XMP.readFile can deal with text-properties that are not      * element-nodes, but attribute-nodes      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testAttributeRead ()
specifier|public
name|void
name|testAttributeRead
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test 1 has attributes
name|String
name|bibtex
init|=
name|t2XMP
argument_list|()
decl_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|bibtex
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t2BibtexEntry
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmpty ()
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests whether writing BibTex.xmp will preserve existing XMP-descriptions.      *      * @throws Exception (indicating an failure)      */
annotation|@
name|Test
DECL|method|testSimpleUpdate ()
specifier|public
name|void
name|testSimpleUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s
init|=
literal|"<rdf:Description rdf:about=''"
operator|+
literal|"  xmlns:xmp='http://ns.adobe.com/xap/1.0/'>"
operator|+
literal|"<xmp:CreatorTool>Acrobat PDFMaker 7.0.7</xmp:CreatorTool>"
operator|+
literal|"<xmp:ModifyDate>2006-08-07T18:50:24+02:00</xmp:ModifyDate>"
operator|+
literal|"<xmp:CreateDate>2006-08-07T14:44:24+02:00</xmp:CreateDate>"
operator|+
literal|"<xmp:MetadataDate>2006-08-07T18:50:24+02:00</xmp:MetadataDate>"
operator|+
literal|"</rdf:Description>"
operator|+
literal|""
operator|+
literal|"<rdf:Description rdf:about=''"
operator|+
literal|"  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>"
operator|+
literal|"<xapMM:DocumentID>uuid:843cd67d-495e-4c1e-a4cd-64178f6b3299</xapMM:DocumentID>"
operator|+
literal|"<xapMM:InstanceID>uuid:1e56b4c0-6782-440d-ba76-d2b3d87547d1</xapMM:InstanceID>"
operator|+
literal|"<xapMM:VersionID>"
operator|+
literal|"<rdf:Seq>"
operator|+
literal|"<rdf:li>17</rdf:li>"
operator|+
literal|"</rdf:Seq>"
operator|+
literal|"</xapMM:VersionID>"
operator|+
literal|"</rdf:Description>"
operator|+
literal|""
operator|+
literal|"<rdf:Description rdf:about=''"
operator|+
literal|"  xmlns:dc='http://purl.org/dc/elements/1.1/'>"
operator|+
literal|"<dc:format>application/pdf</dc:format>"
operator|+
literal|"</rdf:Description>"
decl_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
comment|// Nothing there yet, but should not crash
name|Assert
operator|.
name|assertNull
argument_list|(
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"<rdf:Description rdf:about=''"
operator|+
literal|"  xmlns:xmp='http://ns.adobe.com/xap/1.0/'>"
operator|+
literal|"<xmp:CreatorTool>Acrobat PDFMaker 7.0.7</xmp:CreatorTool>"
operator|+
literal|"<xmp:ModifyDate>2006-08-07T18:50:24+02:00</xmp:ModifyDate>"
operator|+
literal|"<xmp:CreateDate>2006-08-07T14:44:24+02:00</xmp:CreateDate>"
operator|+
literal|"<xmp:MetadataDate>2006-08-07T18:50:24+02:00</xmp:MetadataDate>"
operator|+
literal|"</rdf:Description>"
operator|+
literal|""
operator|+
literal|"<rdf:Description rdf:about=''"
operator|+
literal|"  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>"
operator|+
literal|"<xapMM:DocumentID>uuid:843cd67d-495e-4c1e-a4cd-64178f6b3299</xapMM:DocumentID>"
operator|+
literal|"<xapMM:InstanceID>uuid:1e56b4c0-6782-440d-ba76-d2b3d87547d1</xapMM:InstanceID>"
operator|+
literal|"<xapMM:VersionID>"
operator|+
literal|"<rdf:Seq>"
operator|+
literal|"<rdf:li>17</rdf:li>"
operator|+
literal|"</rdf:Seq>"
operator|+
literal|"</xapMM:VersionID>"
operator|+
literal|"</rdf:Description>"
operator|+
literal|""
operator|+
literal|"<rdf:Description rdf:about=''"
operator|+
literal|"  xmlns:dc='http://purl.org/dc/elements/1.1/'>"
operator|+
literal|"<dc:format>application/pdf</dc:format>"
operator|+
literal|"<dc:title>"
operator|+
literal|"<rdf:Alt>"
operator|+
literal|"<rdf:li xml:lang='x-default'>Questionnaire.pdf</rdf:li>"
operator|+
literal|"</rdf:Alt>"
operator|+
literal|"</dc:title>"
operator|+
literal|""
operator|+
literal|"</rdf:Description>"
expr_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
comment|// Title is Questionnaire.pdf so the DublinCore fallback should hit
comment|// in...
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|{
comment|// Now write new packet and check if it was correctly written
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|t1BibtexEntry
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t1BibtexEntry
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// This is what we really want to test: Is the rest of the
comment|// descriptions still there?
name|PDDocument
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Cannot read metadata from encrypted document."
argument_list|)
throw|;
block|}
name|PDDocumentCatalog
name|catalog
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDMetadata
name|metaRaw
init|=
name|catalog
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|XMPMetadata
name|meta
decl_stmt|;
if|if
condition|(
name|metaRaw
operator|!=
literal|null
condition|)
block|{
name|meta
operator|=
operator|new
name|XMPMetadata
argument_list|(
name|XMLUtil
operator|.
name|parse
argument_list|(
name|metaRaw
operator|.
name|createInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|meta
operator|=
operator|new
name|XMPMetadata
argument_list|()
expr_stmt|;
block|}
name|meta
operator|.
name|addXMLNSMapping
argument_list|(
name|XMPSchemaBibtex
operator|.
name|NAMESPACE
argument_list|,
name|XMPSchemaBibtex
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XMPSchema
argument_list|>
name|schemas
init|=
name|meta
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|meta
operator|.
name|getSchemasByNamespaceURI
argument_list|(
name|XMPSchemaBibtex
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|meta
operator|.
name|getSchemasByNamespaceURI
argument_list|(
name|XMPSchemaDublinCore
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|XMPSchemaDublinCore
name|dc
init|=
operator|(
name|XMPSchemaDublinCore
operator|)
name|schemas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|dc
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|meta
operator|.
name|getSchemasByNamespaceURI
argument_list|(
name|XMPSchemaBasic
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|XMPSchemaBasic
name|bs
init|=
operator|(
name|XMPSchemaBasic
operator|)
name|schemas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Acrobat PDFMaker 7.0.7"
argument_list|,
name|bs
operator|.
name|getCreatorTool
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
literal|2006
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
name|Calendar
operator|.
name|AUGUST
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|c
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT+2"
argument_list|)
argument_list|)
expr_stmt|;
name|Calendar
name|other
init|=
name|bs
operator|.
name|getCreateDate
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c
operator|.
name|getTimeZone
argument_list|()
operator|.
name|hasSameRules
argument_list|(
name|other
operator|.
name|getTimeZone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|meta
operator|.
name|getSchemasByNamespaceURI
argument_list|(
name|XMPSchemaMediaManagement
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|XMPSchemaMediaManagement
name|mm
init|=
operator|(
name|XMPSchemaMediaManagement
operator|)
name|schemas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"17"
argument_list|,
name|mm
operator|.
name|getSequenceList
argument_list|(
literal|"xapMM:VersionID"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Now alter the Bibtex entry, write it and do all the checks again
name|BibtexEntry
name|toSet
init|=
name|t1BibtexEntry
argument_list|()
decl_stmt|;
name|toSet
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Pokemon!"
argument_list|)
expr_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|toSet
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|toSet
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// This is what we really want to test: Is the rest of the
comment|// descriptions still there?
name|PDDocument
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Cannot read metadata from encrypted document."
argument_list|)
throw|;
block|}
name|PDDocumentCatalog
name|catalog
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDMetadata
name|metaRaw
init|=
name|catalog
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|XMPMetadata
name|meta
decl_stmt|;
if|if
condition|(
name|metaRaw
operator|!=
literal|null
condition|)
block|{
name|meta
operator|=
operator|new
name|XMPMetadata
argument_list|(
name|XMLUtil
operator|.
name|parse
argument_list|(
name|metaRaw
operator|.
name|createInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|meta
operator|=
operator|new
name|XMPMetadata
argument_list|()
expr_stmt|;
block|}
name|meta
operator|.
name|addXMLNSMapping
argument_list|(
name|XMPSchemaBibtex
operator|.
name|NAMESPACE
argument_list|,
name|XMPSchemaBibtex
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XMPSchema
argument_list|>
name|schemas
init|=
name|meta
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|meta
operator|.
name|getSchemasByNamespaceURI
argument_list|(
name|XMPSchemaBibtex
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|meta
operator|.
name|getSchemasByNamespaceURI
argument_list|(
name|XMPSchemaDublinCore
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|XMPSchemaDublinCore
name|dc
init|=
operator|(
name|XMPSchemaDublinCore
operator|)
name|schemas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|dc
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|meta
operator|.
name|getSchemasByNamespaceURI
argument_list|(
name|XMPSchemaBasic
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|XMPSchemaBasic
name|bs
init|=
operator|(
name|XMPSchemaBasic
operator|)
name|schemas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Acrobat PDFMaker 7.0.7"
argument_list|,
name|bs
operator|.
name|getCreatorTool
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
literal|2006
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|c
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT+2"
argument_list|)
argument_list|)
expr_stmt|;
name|Calendar
name|other
init|=
name|bs
operator|.
name|getCreateDate
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|,
name|other
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c
operator|.
name|getTimeZone
argument_list|()
operator|.
name|hasSameRules
argument_list|(
name|other
operator|.
name|getTimeZone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|meta
operator|.
name|getSchemasByNamespaceURI
argument_list|(
name|XMPSchemaMediaManagement
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|XMPSchemaMediaManagement
name|mm
init|=
operator|(
name|XMPSchemaMediaManagement
operator|)
name|schemas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"17"
argument_list|,
name|mm
operator|.
name|getSequenceList
argument_list|(
literal|"xapMM:VersionID"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Is XML in text properties properly escaped?      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testXMLEscape ()
specifier|public
name|void
name|testXMLEscape
parameter_list|()
throws|throws
name|Exception
block|{
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{canh05,"
operator|+
literal|"  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},"
operator|+
literal|"\n"
operator|+
literal|"  title = {</bibtex:title> \" bla \" '' ''&&&  for floss development: A model and propositions},"
operator|+
literal|"\n"
operator|+
literal|"  booktitle = {<randomXML>},"
operator|+
literal|"\n"
operator|+
literal|"  year = {2005},"
operator|+
literal|"\n"
operator|+
literal|"  owner = {oezbek},"
operator|+
literal|"\n"
operator|+
literal|"  timestamp = {2006.05.29},"
operator|+
literal|"\n"
operator|+
literal|"  url = {http://james.howison.name/publications.html}"
operator|+
literal|"\n"
operator|+
literal|"}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|c
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|c
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|x
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|e
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEqualsBibtexEntry (BibtexEntry expected, BibtexEntry actual)
specifier|public
name|void
name|assertEqualsBibtexEntry
parameter_list|(
name|BibtexEntry
name|expected
parameter_list|,
name|BibtexEntry
name|actual
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getCiteKey
argument_list|()
argument_list|,
name|actual
operator|.
name|getCiteKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getType
argument_list|()
argument_list|,
name|actual
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|expected
operator|.
name|getAllFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"author"
argument_list|)
operator|||
name|field
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"editor"
argument_list|)
condition|)
block|{
name|AuthorList
name|expectedAuthors
init|=
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|expected
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|AuthorList
name|actualAuthors
init|=
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|actual
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAuthors
argument_list|,
name|actualAuthors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"comparing "
operator|+
name|field
argument_list|,
name|expected
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|,
name|actual
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getAllFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|getAllFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @depends XMPUtilTest.testReadMultiple()      */
annotation|@
name|Test
DECL|method|testXMPreadString ()
specifier|public
name|void
name|testXMPreadString
parameter_list|()
throws|throws
name|Exception
block|{
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{canh05,"
operator|+
literal|"  author = {Crowston, K. and Annabi, H.},\n"
operator|+
literal|"  title = {Title A}}\n"
operator|+
literal|"@inProceedings{foo,"
operator|+
literal|"  author={Norton Bar}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|c
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xmp
init|=
name|XMPUtil
operator|.
name|toXMP
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/* Test minimal syntaxical completeness */
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"xpacket"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"adobe:ns:meta"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"<bibtex:bibtexkey>canh05</bibtex:bibtexkey>"
argument_list|)
operator|>
literal|0
operator|||
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"bibtex:bibtexkey="
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"<rdf:li>Norton Bar</rdf:li>"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"id='W5M0MpCehiHzreSzNTczkc9d'?>"
argument_list|)
operator|>
literal|0
operator|||
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"id=\"W5M0MpCehiHzreSzNTczkc9d\"?>"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'"
argument_list|)
operator|>
literal|0
operator|||
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\""
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"<rdf:Description"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"<?xpacket end='w'?>"
argument_list|)
operator|>
literal|0
operator|||
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"<?xpacket end=\"w\"?>"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|/* Test contents of string */
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|xmp
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|a
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BibtexEntry
name|b
init|=
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getCiteKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
condition|)
block|{
name|BibtexEntry
name|tmp
init|=
name|a
decl_stmt|;
name|a
operator|=
name|b
expr_stmt|;
name|b
operator|=
name|tmp
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"canh05"
argument_list|,
name|a
operator|.
name|getCiteKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"K. Crowston and H. Annabi"
argument_list|,
name|a
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Title A"
argument_list|,
name|a
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BibtexEntryType
operator|.
name|ARTICLE
argument_list|,
name|a
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|b
operator|.
name|getCiteKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Norton Bar"
argument_list|,
name|b
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BibtexEntryType
operator|.
name|INPROCEEDINGS
argument_list|,
name|b
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests whether it is possible to read several BibtexEntries      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testReadMultiple ()
specifier|public
name|void
name|testReadMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bibtex
init|=
name|t2XMP
argument_list|()
operator|+
name|t3XMP
argument_list|()
decl_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|XMPUtilTest
operator|.
name|bibtexXPacket
argument_list|(
name|bibtex
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read from file
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|a
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BibtexEntry
name|b
init|=
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getCiteKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Clarkson06"
argument_list|)
condition|)
block|{
name|BibtexEntry
name|tmp
init|=
name|a
decl_stmt|;
name|a
operator|=
name|b
expr_stmt|;
name|b
operator|=
name|tmp
expr_stmt|;
block|}
name|assertEqualsBibtexEntry
argument_list|(
name|t2BibtexEntry
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t3BibtexEntry
argument_list|()
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests whether it is possible to write several Bibtexentries      *      * @throws TransformerException      * @throws IOException      */
annotation|@
name|Test
DECL|method|testWriteMultiple ()
specifier|public
name|void
name|testWriteMultiple
parameter_list|()
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|t2BibtexEntry
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|t3BibtexEntry
argument_list|()
argument_list|)
expr_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|l
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|l
operator|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|a
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BibtexEntry
name|b
init|=
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getCiteKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Clarkson06"
argument_list|)
condition|)
block|{
name|BibtexEntry
name|tmp
init|=
name|a
decl_stmt|;
name|a
operator|=
name|b
expr_stmt|;
name|b
operator|=
name|tmp
expr_stmt|;
block|}
name|assertEqualsBibtexEntry
argument_list|(
name|t2BibtexEntry
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t3BibtexEntry
argument_list|()
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadWriteDC ()
specifier|public
name|void
name|testReadWriteDC
parameter_list|()
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|t3BibtexEntry
argument_list|()
argument_list|)
expr_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|l
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|PDDocument
name|document
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: Cannot add metadata to encrypted document."
argument_list|)
expr_stmt|;
comment|//System.exit(1);
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Kelly Clarkson and Ozzy Osbourne"
argument_list|,
name|document
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hypersonic ultra-sound"
argument_list|,
name|document
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Huey Duck and Dewey Duck and Louie Duck"
argument_list|,
name|document
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|getCustomMetadataValue
argument_list|(
literal|"bibtex/editor"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Clarkson06"
argument_list|,
name|document
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|getCustomMetadataValue
argument_list|(
literal|"bibtex/bibtexkey"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"peanut,butter,jelly"
argument_list|,
name|document
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|getKeywords
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t3BibtexEntry
argument_list|()
argument_list|,
name|XMPUtil
operator|.
name|getBibtexEntryFromDocumentInformation
argument_list|(
name|document
operator|.
name|getDocumentInformation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PDDocumentCatalog
name|catalog
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDMetadata
name|metaRaw
init|=
name|catalog
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaRaw
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
return|return;
block|}
name|XMPMetadata
name|meta
init|=
operator|new
name|XMPMetadata
argument_list|(
name|XMLUtil
operator|.
name|parse
argument_list|(
name|metaRaw
operator|.
name|createInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|meta
operator|.
name|addXMLNSMapping
argument_list|(
name|XMPSchemaBibtex
operator|.
name|NAMESPACE
argument_list|,
name|XMPSchemaBibtex
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Check Dublin Core
name|List
argument_list|<
name|XMPSchema
argument_list|>
name|schemas
init|=
name|meta
operator|.
name|getSchemasByNamespaceURI
argument_list|(
literal|"http://purl.org/dc/elements/1.1/"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|XMPSchemaDublinCore
name|dcSchema
init|=
operator|(
name|XMPSchemaDublinCore
operator|)
name|schemas
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dcSchema
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hypersonic ultra-sound"
argument_list|,
name|dcSchema
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1982-07"
argument_list|,
name|dcSchema
operator|.
name|getSequenceList
argument_list|(
literal|"dc:date"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Kelly Clarkson"
argument_list|,
name|dcSchema
operator|.
name|getCreators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Ozzy Osbourne"
argument_list|,
name|dcSchema
operator|.
name|getCreators
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Huey Duck"
argument_list|,
name|dcSchema
operator|.
name|getContributors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Dewey Duck"
argument_list|,
name|dcSchema
operator|.
name|getContributors
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Louie Duck"
argument_list|,
name|dcSchema
operator|.
name|getContributors
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"InProceedings"
argument_list|,
name|dcSchema
operator|.
name|getTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bibtex/bibtexkey/Clarkson06"
argument_list|,
name|dcSchema
operator|.
name|getRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"peanut"
argument_list|,
name|dcSchema
operator|.
name|getSubjects
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"butter"
argument_list|,
name|dcSchema
operator|.
name|getSubjects
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"jelly"
argument_list|,
name|dcSchema
operator|.
name|getSubjects
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|/**              * Bibtexkey, Journal, pdf, booktitle              */
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dcSchema
operator|.
name|getRelationships
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t3BibtexEntry
argument_list|()
argument_list|,
name|XMPUtil
operator|.
name|getBibtexEntryFromDublinCore
argument_list|(
name|dcSchema
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWriteSingleUpdatesDCAndInfo ()
specifier|public
name|void
name|testWriteSingleUpdatesDCAndInfo
parameter_list|()
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|t3BibtexEntry
argument_list|()
argument_list|)
expr_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|l
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|PDDocument
name|document
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: Cannot add metadata to encrypted document."
argument_list|)
expr_stmt|;
comment|//System.exit(1);
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Kelly Clarkson and Ozzy Osbourne"
argument_list|,
name|document
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hypersonic ultra-sound"
argument_list|,
name|document
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Huey Duck and Dewey Duck and Louie Duck"
argument_list|,
name|document
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|getCustomMetadataValue
argument_list|(
literal|"bibtex/editor"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Clarkson06"
argument_list|,
name|document
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|getCustomMetadataValue
argument_list|(
literal|"bibtex/bibtexkey"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"peanut,butter,jelly"
argument_list|,
name|document
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|getKeywords
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t3BibtexEntry
argument_list|()
argument_list|,
name|XMPUtil
operator|.
name|getBibtexEntryFromDocumentInformation
argument_list|(
name|document
operator|.
name|getDocumentInformation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PDDocumentCatalog
name|catalog
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDMetadata
name|metaRaw
init|=
name|catalog
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaRaw
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|XMPMetadata
name|meta
init|=
operator|new
name|XMPMetadata
argument_list|(
name|XMLUtil
operator|.
name|parse
argument_list|(
name|metaRaw
operator|.
name|createInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|meta
operator|.
name|addXMLNSMapping
argument_list|(
name|XMPSchemaBibtex
operator|.
name|NAMESPACE
argument_list|,
name|XMPSchemaBibtex
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Check Dublin Core
name|List
argument_list|<
name|XMPSchema
argument_list|>
name|schemas
init|=
name|meta
operator|.
name|getSchemasByNamespaceURI
argument_list|(
literal|"http://purl.org/dc/elements/1.1/"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|XMPSchemaDublinCore
name|dcSchema
init|=
operator|(
name|XMPSchemaDublinCore
operator|)
name|schemas
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dcSchema
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hypersonic ultra-sound"
argument_list|,
name|dcSchema
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1982-07"
argument_list|,
name|dcSchema
operator|.
name|getSequenceList
argument_list|(
literal|"dc:date"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Kelly Clarkson"
argument_list|,
name|dcSchema
operator|.
name|getCreators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Ozzy Osbourne"
argument_list|,
name|dcSchema
operator|.
name|getCreators
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Huey Duck"
argument_list|,
name|dcSchema
operator|.
name|getContributors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Dewey Duck"
argument_list|,
name|dcSchema
operator|.
name|getContributors
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Louie Duck"
argument_list|,
name|dcSchema
operator|.
name|getContributors
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"InProceedings"
argument_list|,
name|dcSchema
operator|.
name|getTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bibtex/bibtexkey/Clarkson06"
argument_list|,
name|dcSchema
operator|.
name|getRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"peanut"
argument_list|,
name|dcSchema
operator|.
name|getSubjects
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"butter"
argument_list|,
name|dcSchema
operator|.
name|getSubjects
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"jelly"
argument_list|,
name|dcSchema
operator|.
name|getSubjects
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|/**              * Bibtexkey, Journal, pdf, booktitle              */
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dcSchema
operator|.
name|getRelationships
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t3BibtexEntry
argument_list|()
argument_list|,
name|XMPUtil
operator|.
name|getBibtexEntryFromDublinCore
argument_list|(
name|dcSchema
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReadRawXMP ()
specifier|public
name|void
name|testReadRawXMP
parameter_list|()
throws|throws
name|Exception
block|{
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{canh05,"
operator|+
literal|"  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},\n"
operator|+
literal|"  title = {Effective work practices for floss development: A model and propositions},\n"
operator|+
literal|"  booktitle = {Hawaii International Conference On System Sciences (HICSS)},\n"
operator|+
literal|"  year = {2005},\n"
operator|+
literal|"  owner = {oezbek},\n"
operator|+
literal|"  timestamp = {2006.05.29},\n"
operator|+
literal|"  url = {http://james.howison.name/publications.html}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|c
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|c
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|XMPMetadata
name|metadata
init|=
name|XMPUtil
operator|.
name|readRawXMP
argument_list|(
name|pdfFile
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XMPSchema
argument_list|>
name|schemas
init|=
name|metadata
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|metadata
operator|.
name|getSchemasByNamespaceURI
argument_list|(
name|XMPSchemaBibtex
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|XMPSchemaBibtex
name|bib
init|=
operator|(
name|XMPSchemaBibtex
operator|)
name|schemas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|authors
init|=
name|bib
operator|.
name|getSequenceList
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|authors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"K. Crowston"
argument_list|,
name|authors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"H. Annabi"
argument_list|,
name|authors
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"J. Howison"
argument_list|,
name|authors
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"C. Masango"
argument_list|,
name|authors
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Article"
argument_list|,
name|bib
operator|.
name|getTextProperty
argument_list|(
literal|"entrytype"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Effective work practices for floss development: A model and propositions"
argument_list|,
name|bib
operator|.
name|getTextProperty
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hawaii International Conference On System Sciences (HICSS)"
argument_list|,
name|bib
operator|.
name|getTextProperty
argument_list|(
literal|"booktitle"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2005"
argument_list|,
name|bib
operator|.
name|getTextProperty
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"oezbek"
argument_list|,
name|bib
operator|.
name|getTextProperty
argument_list|(
literal|"owner"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://james.howison.name/publications.html"
argument_list|,
name|bib
operator|.
name|getTextProperty
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test whether the command-line client works correctly with writing a      * single entry      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testCommandLineSingleBib ()
specifier|public
name|void
name|testCommandLineSingleBib
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First check conversion from .bib to .xmp
name|File
name|tempBib
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"JabRef"
argument_list|,
literal|".bib"
argument_list|)
decl_stmt|;
name|FileWriter
name|fileWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileWriter
operator|=
operator|new
name|FileWriter
argument_list|(
name|tempBib
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
name|t1BibtexString
argument_list|()
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|s
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|XMPUtil
operator|.
name|main
argument_list|(
name|tempBib
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|xmp
init|=
name|s
operator|.
name|toString
argument_list|()
decl_stmt|;
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|xmp
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t1BibtexEntry
argument_list|()
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fileWriter
operator|!=
literal|null
condition|)
block|{
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|tempBib
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @depends XMPUtil.writeXMP      */
annotation|@
name|Test
DECL|method|testCommandLineSinglePdf ()
specifier|public
name|void
name|testCommandLineSinglePdf
parameter_list|()
throws|throws
name|Exception
block|{
block|{
comment|// Write XMP to file
name|BibtexEntry
name|e
init|=
name|t1BibtexEntry
argument_list|()
decl_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|s
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|XMPUtil
operator|.
name|main
argument_list|(
name|pdfFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|bibtex
init|=
name|s
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|bibtex
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|c
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|x
init|=
name|c
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|e
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
comment|// Write XMP to file
name|BibtexEntry
name|e
init|=
name|t1BibtexEntry
argument_list|()
decl_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|s
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|XMPUtil
operator|.
name|main
argument_list|(
literal|"-x"
argument_list|,
name|pdfFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|xmp
init|=
name|s
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|/* Test minimal syntaxical completeness */
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"xpacket"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"adobe:ns:meta"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"<bibtex:bibtexkey>canh05</bibtex:bibtexkey>"
argument_list|)
operator|>
literal|0
operator|||
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"bibtex:bibtexkey="
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"<rdf:li>K. Crowston</rdf:li>"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"id='W5M0MpCehiHzreSzNTczkc9d'?>"
argument_list|)
operator|>
literal|0
operator|||
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"id=\"W5M0MpCehiHzreSzNTczkc9d\"?>"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'"
argument_list|)
operator|>
literal|0
operator|||
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\""
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"<rdf:Description"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"<?xpacket end='w'?>"
argument_list|)
operator|>
literal|0
operator|||
name|xmp
operator|.
name|indexOf
argument_list|(
literal|"<?xpacket end=\"w\"?>"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|/* Test contents of string */
name|writeManually
argument_list|(
name|pdfFile
argument_list|,
name|xmp
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t1BibtexEntry
argument_list|()
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test whether the command-line client can pick one of several entries from      * a bibtex file      *      * @throws Exception      */
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testCommandLineByKey ()
specifier|public
name|void
name|testCommandLineByKey
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tempBib
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"JabRef"
argument_list|,
literal|".bib"
argument_list|)
decl_stmt|;
name|FileWriter
name|fileWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileWriter
operator|=
operator|new
name|FileWriter
argument_list|(
name|tempBib
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
name|t1BibtexString
argument_list|()
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
name|t2BibtexString
argument_list|()
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|{
comment|// First try canh05
name|ByteArrayOutputStream
name|s
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|XMPUtil
operator|.
name|main
argument_list|(
literal|"canh05"
argument_list|,
name|tempBib
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|pdfFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// PDF should be annotated:
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t1BibtexEntry
argument_list|()
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now try OezbekC06
name|ByteArrayOutputStream
name|s
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|XMPUtil
operator|.
name|main
argument_list|(
literal|"OezbekC06"
argument_list|,
name|tempBib
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|pdfFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// PDF should be annotated:
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t2BibtexEntry
argument_list|()
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fileWriter
operator|!=
literal|null
condition|)
block|{
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|tempBib
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Test whether the command-line client can deal with several bibtex      * entries.      */
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testCommandLineSeveral ()
specifier|public
name|void
name|testCommandLineSeveral
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tempBib
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"JabRef"
argument_list|,
literal|".bib"
argument_list|)
decl_stmt|;
name|FileWriter
name|fileWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileWriter
operator|=
operator|new
name|FileWriter
argument_list|(
name|tempBib
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
name|t1BibtexString
argument_list|()
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
name|t3BibtexString
argument_list|()
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|s
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|XMPUtil
operator|.
name|main
argument_list|(
name|tempBib
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|pdfFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|a
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BibtexEntry
name|b
init|=
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getCiteKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Clarkson06"
argument_list|)
condition|)
block|{
name|BibtexEntry
name|tmp
init|=
name|a
decl_stmt|;
name|a
operator|=
name|b
expr_stmt|;
name|b
operator|=
name|tmp
expr_stmt|;
block|}
name|BibtexEntry
name|t1
init|=
name|t1BibtexEntry
argument_list|()
decl_stmt|;
name|BibtexEntry
name|t3
init|=
name|t3BibtexEntry
argument_list|()
decl_stmt|;
comment|// Writing and reading will resolve strings!
name|t3
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
literal|"July"
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t1
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|assertEqualsBibtexEntry
argument_list|(
name|t3
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fileWriter
operator|!=
literal|null
condition|)
block|{
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|tempBib
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Test that readXMP and writeXMP work together.      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testResolveStrings ()
specifier|public
name|void
name|testResolveStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|ParserResult
name|original
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@string{ crow = \"Crowston, K.\"}\n"
operator|+
literal|"@string{ anna = \"Annabi, H.\"}\n"
operator|+
literal|"@string{ howi = \"Howison, J.\"}\n"
operator|+
literal|"@string{ masa = \"Masango, C.\"}\n"
operator|+
literal|"@article{canh05,"
operator|+
literal|"  author = {#crow# and #anna# and #howi# and #masa#},"
operator|+
literal|"\n"
operator|+
literal|"  title = {Effective work practices for floss development: A model and propositions},"
operator|+
literal|"\n"
operator|+
literal|"  booktitle = {Hawaii International Conference On System Sciences (HICSS)},"
operator|+
literal|"\n"
operator|+
literal|"  year = {2005},"
operator|+
literal|"\n"
operator|+
literal|"  owner = {oezbek},"
operator|+
literal|"\n"
operator|+
literal|"  timestamp = {2006.05.29},"
operator|+
literal|"\n"
operator|+
literal|"  url = {http://james.howison.name/publications.html}"
operator|+
literal|"\n"
operator|+
literal|"}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|c
init|=
name|original
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|e
init|=
name|c
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|e
argument_list|,
name|original
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|l
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntry
name|x
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
literal|"Crowston, K. and Annabi, H. and Howison, J. and Masango, C."
argument_list|)
argument_list|,
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|x
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that we cannot use encrypted PDFs.      */
annotation|@
name|Test
DECL|method|testEncryption ()
specifier|public
name|void
name|testEncryption
parameter_list|()
throws|throws
name|Exception
block|{
comment|// // PDF was created using:
comment|//
comment|// PDDocument pdf = null;
comment|// try {
comment|// pdf = new PDDocument();
comment|// pdf.addPage(new PDPage()); // Need page to open in Acrobat
comment|// pdf.encrypt("hello", "world");
comment|// pdf.save("d:/download/encrypted.pdf");
comment|// } finally {
comment|// if (pdf != null)
comment|// pdf.close();
comment|// }
comment|//
try|try
block|{
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|XMPUtilTest
operator|.
name|SRC_TEST_ESOURCES_ENCRYPTED_PDF
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EncryptionNotSupportedException
name|ignored
parameter_list|)
block|{         }
try|try
block|{
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|XMPUtilTest
operator|.
name|SRC_TEST_ESOURCES_ENCRYPTED_PDF
argument_list|,
name|t1BibtexEntry
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EncryptionNotSupportedException
name|ignored
parameter_list|)
block|{         }
block|}
comment|/**      * A better testcase for resolveStrings. Makes sure that also the document      * information and dublin core are written correctly.      *<p/>      * Data was contributed by Philip K.F. HÃ¶lzenspies (p.k.f.holzenspies [at] utwente.nl).      *      * @throws IOException      * @throws TransformerException      */
annotation|@
name|Test
DECL|method|testResolveStrings2 ()
specifier|public
name|void
name|testResolveStrings2
parameter_list|()
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
name|ParserResult
name|result
init|=
name|BibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|FileReader
argument_list|(
literal|"src/test/resources/net/sf/jabref/util/twente.bib"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Arvind"
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|resolveForStrings
argument_list|(
literal|"#Arvind#"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthorList
name|originalAuthors
init|=
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
literal|"Patterson, David and Arvind and Asanov\\'\\i{}c, Krste and Chiou, Derek and Hoe, James and Kozyrakis, Christos and Lu, S{hih-Lien} and Oskin, Mark and Rabaey, Jan and Wawrzynek, John"
argument_list|)
decl_stmt|;
try|try
block|{
name|XMPUtil
operator|.
name|writeXMP
argument_list|(
name|pdfFile
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
literal|"Patterson06"
argument_list|)
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test whether we the main function can load the bibtex correctly
name|BibtexEntry
name|b
init|=
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|pdfFile
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|originalAuthors
argument_list|,
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|b
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next check from Document Information
try|try
init|(
name|PDDocument
name|document
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|pdfFile
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|originalAuthors
argument_list|,
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|document
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|getAuthor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
name|XMPUtil
operator|.
name|getBibtexEntryFromDocumentInformation
argument_list|(
name|document
operator|.
name|getDocumentInformation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|originalAuthors
argument_list|,
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|b
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now check from Dublin Core
name|PDDocumentCatalog
name|catalog
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDMetadata
name|metaRaw
init|=
name|catalog
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaRaw
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|XMPMetadata
name|meta
init|=
operator|new
name|XMPMetadata
argument_list|(
name|XMLUtil
operator|.
name|parse
argument_list|(
name|metaRaw
operator|.
name|createInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|meta
operator|.
name|addXMLNSMapping
argument_list|(
name|XMPSchemaBibtex
operator|.
name|NAMESPACE
argument_list|,
name|XMPSchemaBibtex
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XMPSchema
argument_list|>
name|schemas
init|=
name|meta
operator|.
name|getSchemasByNamespaceURI
argument_list|(
literal|"http://purl.org/dc/elements/1.1/"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|XMPSchemaDublinCore
name|dcSchema
init|=
operator|(
name|XMPSchemaDublinCore
operator|)
name|schemas
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dcSchema
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"David Patterson"
argument_list|,
name|dcSchema
operator|.
name|getCreators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Arvind"
argument_list|,
name|dcSchema
operator|.
name|getCreators
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Krste Asanov\\'\\i{}c"
argument_list|,
name|dcSchema
operator|.
name|getCreators
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
name|XMPUtil
operator|.
name|getBibtexEntryFromDublinCore
argument_list|(
name|dcSchema
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|originalAuthors
argument_list|,
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|b
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pdfFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Read the contents of a reader as one string      *      * @param reader      * @return      * @throws IOException      */
DECL|method|slurp (Reader reader)
specifier|public
specifier|static
name|String
name|slurp
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
literal|4092
index|]
decl_stmt|;
name|StringBuilder
name|totalBuffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|bytesRead
decl_stmt|;
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|reader
operator|.
name|read
argument_list|(
name|chars
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|bytesRead
operator|==
literal|4092
condition|)
block|{
name|totalBuffer
operator|.
name|append
argument_list|(
name|chars
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|totalBuffer
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|totalBuffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

