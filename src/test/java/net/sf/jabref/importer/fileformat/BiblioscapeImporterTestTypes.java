begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.importer.fileformat
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
operator|.
name|BibtexEntryAssert
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|BiblioscapeImporterTestTypes
specifier|public
class|class
name|BiblioscapeImporterTestTypes
block|{
DECL|field|bsImporter
specifier|private
name|BiblioscapeImporter
name|bsImporter
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|0
argument_list|)
DECL|field|biblioscapeType
specifier|public
name|String
name|biblioscapeType
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
DECL|field|expectedBibType
specifier|public
name|String
name|expectedBibType
decl_stmt|;
annotation|@
name|Parameters
DECL|method|types ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
index|[]
argument_list|>
name|types
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"journal"
block|,
literal|"article"
block|}
block|,
block|{
literal|"book section"
block|,
literal|"inbook"
block|}
block|,
block|{
literal|"book"
block|,
literal|"book"
block|}
block|,
block|{
literal|"conference"
block|,
literal|"inproceedings"
block|}
block|,
block|{
literal|"proceedings"
block|,
literal|"inproceedings"
block|}
block|,
block|{
literal|"report"
block|,
literal|"techreport"
block|}
block|,
block|{
literal|"master thesis"
block|,
literal|"mastersthesis"
block|}
block|,
block|{
literal|"thesis"
block|,
literal|"phdthesis"
block|}
block|,
block|{
literal|"master"
block|,
literal|"misc"
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|bsImporter
operator|=
operator|new
name|BiblioscapeImporter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|importConvertsToCorrectBibType ()
specifier|public
name|void
name|importConvertsToCorrectBibType
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|bsInput
init|=
literal|"--AU-- Baklouti, F.\n"
operator|+
literal|"--YP-- 1999\n"
operator|+
literal|"--KW-- Cells; Rna; Isoforms\n"
operator|+
literal|"--TI-- Blood\n"
operator|+
literal|"--RT-- "
operator|+
name|biblioscapeType
operator|+
literal|"\n"
operator|+
literal|"------"
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibEntries
init|=
name|bsImporter
operator|.
name|importDatabase
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bsInput
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Baklouti, F."
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
literal|"Cells; Rna; Isoforms"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Blood"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"1999"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|expectedBibType
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bibEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntryAssert
operator|.
name|assertEquals
argument_list|(
name|entry
argument_list|,
name|bibEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

