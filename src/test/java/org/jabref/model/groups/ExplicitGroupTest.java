begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.groups
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|ExplicitGroupTest
specifier|public
class|class
name|ExplicitGroupTest
block|{
DECL|field|group
specifier|private
name|ExplicitGroup
name|group
decl_stmt|;
DECL|field|group2
specifier|private
name|ExplicitGroup
name|group2
decl_stmt|;
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|group
operator|=
operator|new
name|ExplicitGroup
argument_list|(
literal|"myExplicitGroup"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|group2
operator|=
operator|new
name|ExplicitGroup
argument_list|(
literal|"myExplicitGroup2"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addSingleGroupToEmptyBibEntryChangesGroupsField ()
specifier|public
name|void
name|addSingleGroupToEmptyBibEntryChangesGroupsField
parameter_list|()
block|{
name|group
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"myExplicitGroup"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addSingleGroupToNonemptyBibEntryAppendsToGroupsField ()
specifier|public
name|void
name|addSingleGroupToNonemptyBibEntryAppendsToGroupsField
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|,
literal|"some thing"
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"some thing, myExplicitGroup"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addTwoGroupsToBibEntryChangesGroupsField ()
specifier|public
name|void
name|addTwoGroupsToBibEntryChangesGroupsField
parameter_list|()
block|{
name|group
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|group2
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"myExplicitGroup, myExplicitGroup2"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addDuplicateGroupDoesNotChangeGroupsField ()
specifier|public
name|void
name|addDuplicateGroupDoesNotChangeGroupsField
parameter_list|()
throws|throws
name|Exception
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|,
literal|"myExplicitGroup"
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"myExplicitGroup"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// For https://github.com/JabRef/jabref/issues/2334
DECL|method|removeDoesNotChangeFieldIfContainsNameAsPart ()
specifier|public
name|void
name|removeDoesNotChangeFieldIfContainsNameAsPart
parameter_list|()
throws|throws
name|Exception
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|,
literal|"myExplicitGroup_alternative"
argument_list|)
expr_stmt|;
name|group
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"myExplicitGroup_alternative"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// For https://github.com/JabRef/jabref/issues/2334
DECL|method|removeDoesNotChangeFieldIfContainsNameAsWord ()
specifier|public
name|void
name|removeDoesNotChangeFieldIfContainsNameAsWord
parameter_list|()
throws|throws
name|Exception
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|,
literal|"myExplicitGroup alternative"
argument_list|)
expr_stmt|;
name|group
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"myExplicitGroup alternative"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// For https://github.com/JabRef/jabref/issues/1873
DECL|method|containsOnlyMatchesCompletePhraseWithWhitespace ()
specifier|public
name|void
name|containsOnlyMatchesCompletePhraseWithWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|,
literal|"myExplicitGroup b"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// For https://github.com/JabRef/jabref/issues/1873
DECL|method|containsOnlyMatchesCompletePhraseWithSlash ()
specifier|public
name|void
name|containsOnlyMatchesCompletePhraseWithSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|,
literal|"myExplicitGroup/b"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// For https://github.com/JabRef/jabref/issues/2394
DECL|method|containsMatchesPhraseWithBrackets ()
specifier|public
name|void
name|containsMatchesPhraseWithBrackets
parameter_list|()
throws|throws
name|Exception
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|GROUPS
argument_list|,
literal|"[aa] Subgroup1"
argument_list|)
expr_stmt|;
name|ExplicitGroup
name|explicitGroup
init|=
operator|new
name|ExplicitGroup
argument_list|(
literal|"[aa] Subgroup1"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|explicitGroup
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

