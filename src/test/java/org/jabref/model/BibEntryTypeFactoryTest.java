begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model
package|package
name|org
operator|.
name|jabref
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntryTypesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|BibField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|FieldPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|types
operator|.
name|BiblatexEntryTypeDefinitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|types
operator|.
name|BibtexEntryTypeDefinitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|types
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|types
operator|.
name|IEEETranEntryTypeDefinitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|types
operator|.
name|StandardEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|types
operator|.
name|UnknownEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_class
DECL|class|BibEntryTypeFactoryTest
class|class
name|BibEntryTypeFactoryTest
block|{
DECL|field|UNKNOWN_TYPE
specifier|private
specifier|static
specifier|final
name|EntryType
name|UNKNOWN_TYPE
init|=
operator|new
name|UnknownEntryType
argument_list|(
literal|"unknownType"
argument_list|)
decl_stmt|;
DECL|field|CUSTOM_TYPE
specifier|private
specifier|static
specifier|final
name|EntryType
name|CUSTOM_TYPE
init|=
operator|new
name|UnknownEntryType
argument_list|(
literal|"customType"
argument_list|)
decl_stmt|;
DECL|field|newCustomType
specifier|private
name|BibEntryType
name|newCustomType
decl_stmt|;
DECL|field|overwrittenStandardType
specifier|private
name|BibEntryType
name|overwrittenStandardType
decl_stmt|;
DECL|field|entryTypesManager
specifier|private
name|BibEntryTypesManager
name|entryTypesManager
decl_stmt|;
DECL|method|mode ()
specifier|private
specifier|static
name|Stream
argument_list|<
name|BibDatabaseMode
argument_list|>
name|mode
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
return|;
block|}
annotation|@
name|BeforeEach
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
block|{
name|newCustomType
operator|=
operator|new
name|BibEntryType
argument_list|(
name|CUSTOM_TYPE
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|BibField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
name|FieldPriority
operator|.
name|IMPORTANT
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|overwrittenStandardType
operator|=
operator|new
name|BibEntryType
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|BibField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
name|FieldPriority
operator|.
name|IMPORTANT
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|entryTypesManager
operator|=
operator|new
name|BibEntryTypesManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|allTypesBibtexAreCorrect ()
name|void
name|allTypesBibtexAreCorrect
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|BibEntryType
argument_list|>
name|defaultTypes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|BibtexEntryTypeDefinitions
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|defaultTypes
operator|.
name|addAll
argument_list|(
name|IEEETranEntryTypeDefinitions
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultTypes
argument_list|,
name|entryTypesManager
operator|.
name|getAllTypes
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|allTypesBiblatexAreCorrect ()
name|void
name|allTypesBiblatexAreCorrect
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|BibEntryType
argument_list|>
name|defaultTypes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|BiblatexEntryTypeDefinitions
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|defaultTypes
argument_list|,
name|entryTypesManager
operator|.
name|getAllTypes
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|unknownTypeIsNotFound (BibDatabaseMode mode)
name|void
name|unknownTypeIsNotFound
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|entryTypesManager
operator|.
name|enrich
argument_list|(
name|UNKNOWN_TYPE
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryTypesManager
operator|.
name|isCustomType
argument_list|(
name|UNKNOWN_TYPE
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|newCustomEntryTypeFound (BibDatabaseMode mode)
name|void
name|newCustomEntryTypeFound
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|entryTypesManager
operator|.
name|addCustomizedEntryType
argument_list|(
name|newCustomType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|newCustomType
argument_list|)
argument_list|,
name|entryTypesManager
operator|.
name|enrich
argument_list|(
name|CUSTOM_TYPE
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|registeredBibEntryTypeIsContainedInListOfCustomizedEntryTypes (BibDatabaseMode mode)
name|void
name|registeredBibEntryTypeIsContainedInListOfCustomizedEntryTypes
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|entryTypesManager
operator|.
name|addCustomizedEntryType
argument_list|(
name|newCustomType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|newCustomType
argument_list|)
argument_list|,
name|entryTypesManager
operator|.
name|getAllCustomTypes
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|registerBibEntryTypeDoesNotAffectOtherMode ()
name|void
name|registerBibEntryTypeDoesNotAffectOtherMode
parameter_list|()
block|{
name|entryTypesManager
operator|.
name|addCustomizedEntryType
argument_list|(
name|newCustomType
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryTypesManager
operator|.
name|getAllTypes
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
operator|.
name|contains
argument_list|(
name|newCustomType
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|overwriteBibEntryTypeFields (BibDatabaseMode mode)
name|void
name|overwriteBibEntryTypeFields
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|entryTypesManager
operator|.
name|addCustomizedEntryType
argument_list|(
name|newCustomType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|BibEntryType
name|newBibEntryTypeTitle
init|=
operator|new
name|BibEntryType
argument_list|(
name|CUSTOM_TYPE
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|BibField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
name|FieldPriority
operator|.
name|IMPORTANT
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|entryTypesManager
operator|.
name|addCustomizedEntryType
argument_list|(
name|newBibEntryTypeTitle
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|newBibEntryTypeTitle
argument_list|)
argument_list|,
name|entryTypesManager
operator|.
name|enrich
argument_list|(
name|CUSTOM_TYPE
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|overwriteStandardTypeRequiredFields (BibDatabaseMode mode)
name|void
name|overwriteStandardTypeRequiredFields
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|entryTypesManager
operator|.
name|addCustomizedEntryType
argument_list|(
name|overwrittenStandardType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|overwrittenStandardType
argument_list|)
argument_list|,
name|entryTypesManager
operator|.
name|enrich
argument_list|(
name|overwrittenStandardType
operator|.
name|getType
argument_list|()
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|registeredCustomizedStandardEntryTypeIsNotContainedInListOfCustomEntryTypes (BibDatabaseMode mode)
name|void
name|registeredCustomizedStandardEntryTypeIsNotContainedInListOfCustomEntryTypes
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|entryTypesManager
operator|.
name|addCustomizedEntryType
argument_list|(
name|overwrittenStandardType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|entryTypesManager
operator|.
name|getAllCustomTypes
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|standardTypeIsStillAccessibleIfOverwritten (BibDatabaseMode mode)
name|void
name|standardTypeIsStillAccessibleIfOverwritten
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|entryTypesManager
operator|.
name|addCustomizedEntryType
argument_list|(
name|overwrittenStandardType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryTypesManager
operator|.
name|isCustomType
argument_list|(
name|overwrittenStandardType
operator|.
name|getType
argument_list|()
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

