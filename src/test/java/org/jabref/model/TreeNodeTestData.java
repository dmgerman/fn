begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model
package|package
name|org
operator|.
name|jabref
operator|.
name|model
package|;
end_package

begin_class
DECL|class|TreeNodeTestData
specifier|public
class|class
name|TreeNodeTestData
block|{
comment|/**      * Gets the marked node in the following tree: Root A A (= parent) B (<-- this)      */
DECL|method|getNodeInSimpleTree (TreeNodeMock root)
specifier|public
specifier|static
name|TreeNodeMock
name|getNodeInSimpleTree
parameter_list|(
name|TreeNodeMock
name|root
parameter_list|)
block|{
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|parent
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|parent
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|getNodeInSimpleTree ()
specifier|public
specifier|static
name|TreeNodeMock
name|getNodeInSimpleTree
parameter_list|()
block|{
return|return
name|getNodeInSimpleTree
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Gets the marked node in the following tree: Root A A A (= grand parent) B B (= parent) C (<-- this) D (= child) C      * C C B B A      */
DECL|method|getNodeInComplexTree (TreeNodeMock root)
specifier|public
specifier|static
name|TreeNodeMock
name|getNodeInComplexTree
parameter_list|(
name|TreeNodeMock
name|root
parameter_list|)
block|{
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|grandParent
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|grandParent
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|grandParent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|parent
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|grandParent
operator|.
name|addChild
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|grandParent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|grandParent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|parent
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|getNodeInComplexTree ()
specifier|public
specifier|static
name|TreeNodeMock
name|getNodeInComplexTree
parameter_list|()
block|{
return|return
name|getNodeInComplexTree
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Gets the marked in the following tree: Root A A A (<- this) A      */
DECL|method|getNodeAsChild (TreeNodeMock root)
specifier|public
specifier|static
name|TreeNodeMock
name|getNodeAsChild
parameter_list|(
name|TreeNodeMock
name|root
parameter_list|)
block|{
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
name|TreeNodeMock
name|node
init|=
operator|new
name|TreeNodeMock
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|root
operator|.
name|addChild
argument_list|(
operator|new
name|TreeNodeMock
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
comment|/**      * This is just a dummy class deriving from TreeNode<T> so that we can test the generic class      */
DECL|class|TreeNodeMock
specifier|public
specifier|static
class|class
name|TreeNodeMock
extends|extends
name|TreeNode
argument_list|<
name|TreeNodeMock
argument_list|>
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|TreeNodeMock ()
specifier|public
name|TreeNodeMock
parameter_list|()
block|{
name|this
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|TreeNodeMock (String name)
specifier|public
name|TreeNodeMock
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|TreeNodeMock
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TreeNodeMock{"
operator|+
literal|"name='"
operator|+
name|name
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
DECL|method|copyNode ()
specifier|public
name|TreeNodeMock
name|copyNode
parameter_list|()
block|{
return|return
operator|new
name|TreeNodeMock
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

