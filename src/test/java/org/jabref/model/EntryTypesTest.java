begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model
package|package
name|org
operator|.
name|jabref
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BiblatexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|CustomEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|IEEETranEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_class
DECL|class|EntryTypesTest
class|class
name|EntryTypesTest
block|{
DECL|field|newCustomType
specifier|private
name|CustomEntryType
name|newCustomType
decl_stmt|;
DECL|field|overwrittenStandardType
specifier|private
name|CustomEntryType
name|overwrittenStandardType
decl_stmt|;
DECL|method|mode ()
specifier|private
specifier|static
name|Stream
argument_list|<
name|Object
argument_list|>
name|mode
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
return|;
block|}
DECL|method|defaultTypeAndMode ()
specifier|private
specifier|static
name|Stream
argument_list|<
name|Arguments
argument_list|>
name|defaultTypeAndMode
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|Arguments
operator|.
name|of
argument_list|(
name|BiblatexEntryTypes
operator|.
name|MISC
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
argument_list|,
name|Arguments
operator|.
name|of
argument_list|(
name|BibtexEntryTypes
operator|.
name|MISC
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
return|;
block|}
DECL|method|modeAndOtherMode ()
specifier|private
specifier|static
name|Stream
argument_list|<
name|Arguments
argument_list|>
name|modeAndOtherMode
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|Arguments
operator|.
name|of
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
argument_list|,
name|Arguments
operator|.
name|of
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
return|;
block|}
DECL|method|standardArticleTypeAndMode ()
specifier|private
specifier|static
name|Stream
argument_list|<
name|Arguments
argument_list|>
name|standardArticleTypeAndMode
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|Arguments
operator|.
name|of
argument_list|(
name|BiblatexEntryTypes
operator|.
name|ARTICLE
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
argument_list|,
name|Arguments
operator|.
name|of
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|BeforeEach
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
block|{
name|newCustomType
operator|=
operator|new
name|CustomEntryType
argument_list|(
literal|"customType"
argument_list|,
literal|"required"
argument_list|,
literal|"optional"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newRequiredFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
operator|.
name|getRequiredFields
argument_list|()
argument_list|)
decl_stmt|;
name|newRequiredFields
operator|.
name|add
argument_list|(
literal|"additional"
argument_list|)
expr_stmt|;
name|overwrittenStandardType
operator|=
operator|new
name|CustomEntryType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
operator|.
name|getName
argument_list|()
argument_list|,
name|newRequiredFields
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"optional"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterEach
DECL|method|tearDown ()
name|void
name|tearDown
parameter_list|()
block|{
name|EntryTypes
operator|.
name|removeAllCustomEntryTypes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|assertDefaultValuesBibtex ()
name|void
name|assertDefaultValuesBibtex
parameter_list|()
block|{
name|List
argument_list|<
name|EntryType
argument_list|>
name|sortedDefaultType
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BibtexEntryTypes
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|sortedDefaultType
operator|.
name|addAll
argument_list|(
name|IEEETranEntryTypes
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedDefaultType
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EntryType
argument_list|>
name|sortedEntryTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|EntryTypes
operator|.
name|getAllValues
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedEntryTypes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sortedDefaultType
argument_list|,
name|sortedEntryTypes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|assertDefaultValuesBiblatex ()
name|void
name|assertDefaultValuesBiblatex
parameter_list|()
block|{
name|List
argument_list|<
name|EntryType
argument_list|>
name|sortedDefaultType
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BiblatexEntryTypes
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedDefaultType
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EntryType
argument_list|>
name|sortedEntryTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|EntryTypes
operator|.
name|getAllValues
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedEntryTypes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sortedDefaultType
argument_list|,
name|sortedEntryTypes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|unknownTypeIsNotFound (BibDatabaseMode mode)
name|void
name|unknownTypeIsNotFound
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|EntryTypes
operator|.
name|getType
argument_list|(
literal|"aaaaarticle"
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|EntryTypes
operator|.
name|getStandardType
argument_list|(
literal|"aaaaarticle"
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"defaultTypeAndMode"
argument_list|)
DECL|method|unknownTypeIsConvertedToMiscByGetTypeOrDefault (EntryType defaultType, BibDatabaseMode mode)
name|void
name|unknownTypeIsConvertedToMiscByGetTypeOrDefault
parameter_list|(
name|EntryType
name|defaultType
parameter_list|,
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|defaultType
argument_list|,
name|EntryTypes
operator|.
name|getTypeOrDefault
argument_list|(
literal|"unknowntype"
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|registerCustomEntryType (BibDatabaseMode mode)
name|void
name|registerCustomEntryType
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
name|newCustomType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|newCustomType
argument_list|)
argument_list|,
name|EntryTypes
operator|.
name|getType
argument_list|(
literal|"customType"
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|registeredCustomEntryTypeIsContainedInListOfCustomizedEntryTypes (BibDatabaseMode mode)
name|void
name|registeredCustomEntryTypeIsContainedInListOfCustomizedEntryTypes
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
name|newCustomType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|newCustomType
argument_list|)
argument_list|,
name|EntryTypes
operator|.
name|getAllCustomTypes
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"modeAndOtherMode"
argument_list|)
DECL|method|registerCustomEntryTypeDoesNotAffectOtherMode (BibDatabaseMode mode, BibDatabaseMode otherMode)
name|void
name|registerCustomEntryTypeDoesNotAffectOtherMode
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|,
name|BibDatabaseMode
name|otherMode
parameter_list|)
block|{
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
name|newCustomType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|EntryTypes
operator|.
name|getAllValues
argument_list|(
name|otherMode
argument_list|)
operator|.
name|contains
argument_list|(
name|newCustomType
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|overwriteCustomEntryTypeFields (BibDatabaseMode mode)
name|void
name|overwriteCustomEntryTypeFields
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
name|newCustomType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|CustomEntryType
name|newCustomEntryTypeAuthorRequired
init|=
operator|new
name|CustomEntryType
argument_list|(
literal|"customType"
argument_list|,
name|FieldName
operator|.
name|AUTHOR
argument_list|,
literal|"optional"
argument_list|)
decl_stmt|;
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
name|newCustomEntryTypeAuthorRequired
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|newCustomEntryTypeAuthorRequired
argument_list|)
argument_list|,
name|EntryTypes
operator|.
name|getType
argument_list|(
literal|"customType"
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|overwriteStandardTypeRequiredFields (BibDatabaseMode mode)
name|void
name|overwriteStandardTypeRequiredFields
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
name|overwrittenStandardType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|overwrittenStandardType
argument_list|)
argument_list|,
name|EntryTypes
operator|.
name|getType
argument_list|(
name|overwrittenStandardType
operator|.
name|getName
argument_list|()
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"mode"
argument_list|)
DECL|method|registeredCustomizedStandardEntryTypeIsContainedInListOfCustomizedEntryTypes (BibDatabaseMode mode)
name|void
name|registeredCustomizedStandardEntryTypeIsContainedInListOfCustomizedEntryTypes
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
name|overwrittenStandardType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|overwrittenStandardType
argument_list|)
argument_list|,
name|EntryTypes
operator|.
name|getAllModifiedStandardTypes
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"standardArticleTypeAndMode"
argument_list|)
DECL|method|standardTypeIsStillAcessibleIfOverwritten (EntryType standardArticleType, BibDatabaseMode mode)
name|void
name|standardTypeIsStillAcessibleIfOverwritten
parameter_list|(
name|EntryType
name|standardArticleType
parameter_list|,
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
name|overwrittenStandardType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|standardArticleType
argument_list|)
argument_list|,
name|EntryTypes
operator|.
name|getStandardType
argument_list|(
name|overwrittenStandardType
operator|.
name|getName
argument_list|()
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"standardArticleTypeAndMode"
argument_list|)
DECL|method|standardTypeIsRestoredAfterDeletionOfOverwrittenType (EntryType standardArticleType, BibDatabaseMode mode)
name|void
name|standardTypeIsRestoredAfterDeletionOfOverwrittenType
parameter_list|(
name|EntryType
name|standardArticleType
parameter_list|,
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
name|overwrittenStandardType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|EntryTypes
operator|.
name|removeType
argument_list|(
name|overwrittenStandardType
operator|.
name|getName
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|standardArticleType
argument_list|)
argument_list|,
name|EntryTypes
operator|.
name|getType
argument_list|(
name|overwrittenStandardType
operator|.
name|getName
argument_list|()
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"standardArticleTypeAndMode"
argument_list|)
DECL|method|standardTypeCannotBeRemoved (EntryType standardArticleType, BibDatabaseMode mode)
name|void
name|standardTypeCannotBeRemoved
parameter_list|(
name|EntryType
name|standardArticleType
parameter_list|,
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|EntryTypes
operator|.
name|removeType
argument_list|(
name|standardArticleType
operator|.
name|getName
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|standardArticleType
argument_list|)
argument_list|,
name|EntryTypes
operator|.
name|getType
argument_list|(
name|standardArticleType
operator|.
name|getName
argument_list|()
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"modeAndOtherMode"
argument_list|)
DECL|method|overwriteStandardTypeRequiredFieldsDoesNotAffectOtherMode (BibDatabaseMode mode, BibDatabaseMode otherMode)
name|void
name|overwriteStandardTypeRequiredFieldsDoesNotAffectOtherMode
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|,
name|BibDatabaseMode
name|otherMode
parameter_list|)
block|{
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
name|overwrittenStandardType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|EntryTypes
operator|.
name|getAllValues
argument_list|(
name|otherMode
argument_list|)
operator|.
name|contains
argument_list|(
name|overwrittenStandardType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

