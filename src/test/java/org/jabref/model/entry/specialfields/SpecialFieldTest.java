begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry.specialfields
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|SpecialFieldTest
specifier|public
class|class
name|SpecialFieldTest
block|{
annotation|@
name|Test
DECL|method|getSpecialFieldInstanceFromFieldNameValid ()
specifier|public
name|void
name|getSpecialFieldInstanceFromFieldNameValid
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|SpecialField
operator|.
name|RANKING
argument_list|)
argument_list|,
name|SpecialField
operator|.
name|getSpecialFieldInstanceFromFieldName
argument_list|(
literal|"ranking"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getSpecialFieldInstanceFromFieldNameEmptyForInvalidField ()
specifier|public
name|void
name|getSpecialFieldInstanceFromFieldNameEmptyForInvalidField
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|SpecialField
operator|.
name|getSpecialFieldInstanceFromFieldName
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isSpecialFieldTrueForValidField ()
specifier|public
name|void
name|isSpecialFieldTrueForValidField
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|SpecialField
operator|.
name|isSpecialField
argument_list|(
literal|"ranking"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isSpecialFieldFalseForInvalidField ()
specifier|public
name|void
name|isSpecialFieldFalseForInvalidField
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|SpecialField
operator|.
name|isSpecialField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

