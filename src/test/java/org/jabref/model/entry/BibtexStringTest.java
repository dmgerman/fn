begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
DECL|class|BibtexStringTest
specifier|public
class|class
name|BibtexStringTest
block|{
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
block|{
comment|// Instantiate
name|BibtexString
name|bs
init|=
operator|new
name|BibtexString
argument_list|(
literal|"AAA"
argument_list|,
literal|"An alternative action"
argument_list|)
decl_stmt|;
name|bs
operator|.
name|setId
argument_list|(
literal|"ID"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID"
argument_list|,
name|bs
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA"
argument_list|,
name|bs
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"An alternative action"
argument_list|,
name|bs
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BibtexString
operator|.
name|Type
operator|.
name|OTHER
argument_list|,
name|bs
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clone
name|BibtexString
name|bs2
init|=
operator|(
name|BibtexString
operator|)
name|bs
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|bs
operator|.
name|getId
argument_list|()
argument_list|,
name|bs2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bs
operator|.
name|getName
argument_list|()
argument_list|,
name|bs2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bs
operator|.
name|getContent
argument_list|()
argument_list|,
name|bs2
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bs
operator|.
name|getType
argument_list|()
argument_list|,
name|bs2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change cloned BibtexString
name|bs2
operator|.
name|setId
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|bs
operator|.
name|getId
argument_list|()
argument_list|,
name|bs2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|bs2
operator|.
name|setName
argument_list|(
literal|"aOG"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BibtexString
operator|.
name|Type
operator|.
name|AUTHOR
argument_list|,
name|bs2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|bs2
operator|.
name|setContent
argument_list|(
literal|"Oscar Gustafsson"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aOG"
argument_list|,
name|bs2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Oscar Gustafsson"
argument_list|,
name|bs2
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getContentNeverReturnsNull ()
specifier|public
name|void
name|getContentNeverReturnsNull
parameter_list|()
block|{
name|BibtexString
name|bs
init|=
operator|new
name|BibtexString
argument_list|(
literal|"SomeName"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bs
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

