begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|EntryLinkListTest
specifier|public
class|class
name|EntryLinkListTest
block|{
DECL|field|key
specifier|private
name|String
name|key
init|=
literal|"test"
decl_stmt|;
DECL|field|database
specifier|private
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
DECL|field|links
specifier|private
name|List
argument_list|<
name|ParsedEntryLink
argument_list|>
name|links
init|=
name|EntryLinkList
operator|.
name|parse
argument_list|(
name|key
argument_list|,
name|database
argument_list|)
decl_stmt|;
DECL|field|link
specifier|private
name|ParsedEntryLink
name|link
init|=
name|links
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|givenFieldValueAndDatabaseWhenParsingThenExpectKey ()
specifier|public
name|void
name|givenFieldValueAndDatabaseWhenParsingThenExpectKey
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|key
argument_list|,
name|link
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|givenFieldValueAndDatabaseWhenParsingThenExpectDataBase ()
specifier|public
name|void
name|givenFieldValueAndDatabaseWhenParsingThenExpectDataBase
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|database
argument_list|,
name|link
operator|.
name|getDataBase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|givenFieldValueAndDatabaseWhenParsingThenExpectEmptyLinkedEntry ()
specifier|public
name|void
name|givenFieldValueAndDatabaseWhenParsingThenExpectEmptyLinkedEntry
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|link
operator|.
name|getLinkedEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|givenFieldValueAndDatabaseWhenParsingThenExpectLink ()
specifier|public
name|void
name|givenFieldValueAndDatabaseWhenParsingThenExpectLink
parameter_list|()
block|{
name|ParsedEntryLink
name|expected
init|=
operator|new
name|ParsedEntryLink
argument_list|(
name|key
argument_list|,
name|database
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|givenNullFieldValueAndDatabaseWhenParsingThenExpectLinksIsEmpty ()
specifier|public
name|void
name|givenNullFieldValueAndDatabaseWhenParsingThenExpectLinksIsEmpty
parameter_list|()
block|{
name|links
operator|=
name|EntryLinkList
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|database
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|links
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

