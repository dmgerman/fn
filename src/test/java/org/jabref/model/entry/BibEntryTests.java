begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|InternalField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|OrFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|BibEntryTests
specifier|public
class|class
name|BibEntryTests
block|{
DECL|field|keywordEntry
specifier|private
name|BibEntry
name|keywordEntry
decl_stmt|;
DECL|field|emptyEntry
specifier|private
name|BibEntry
name|emptyEntry
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
comment|// Default entry for most keyword and some type tests
name|keywordEntry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|keywordEntry
operator|.
name|setType
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|)
expr_stmt|;
name|keywordEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|KEYWORDS
argument_list|,
literal|"Foo, Bar"
argument_list|)
expr_stmt|;
name|keywordEntry
operator|.
name|setChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Empty entry for some tests
name|emptyEntry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|emptyEntry
operator|.
name|setType
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|)
expr_stmt|;
name|emptyEntry
operator|.
name|setChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultConstructor ()
specifier|public
name|void
name|testDefaultConstructor
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|StandardEntryType
operator|.
name|Misc
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|allFieldsPresentDefault ()
specifier|public
name|void
name|allFieldsPresentDefault
parameter_list|()
block|{
name|BibEntry
name|e
init|=
operator|new
name|BibEntry
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|)
decl_stmt|;
name|e
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|JOURNAL
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrFields
argument_list|>
name|requiredFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|requiredFields
operator|.
name|add
argument_list|(
operator|new
name|OrFields
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|requiredFields
operator|.
name|add
argument_list|(
operator|new
name|OrFields
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|allFieldsPresent
argument_list|(
name|requiredFields
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|requiredFields
operator|.
name|add
argument_list|(
operator|new
name|OrFields
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|allFieldsPresent
argument_list|(
name|requiredFields
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|allFieldsPresentOr ()
specifier|public
name|void
name|allFieldsPresentOr
parameter_list|()
block|{
name|BibEntry
name|e
init|=
operator|new
name|BibEntry
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|)
decl_stmt|;
name|e
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|JOURNAL
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrFields
argument_list|>
name|requiredFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|requiredFields
operator|.
name|add
argument_list|(
operator|new
name|OrFields
argument_list|(
name|StandardField
operator|.
name|JOURNAL
argument_list|,
name|StandardField
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|allFieldsPresent
argument_list|(
name|requiredFields
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|requiredFields
operator|.
name|add
argument_list|(
operator|new
name|OrFields
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|,
name|StandardField
operator|.
name|ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|allFieldsPresent
argument_list|(
name|requiredFields
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isNullCiteKeyThrowsNPE ()
specifier|public
name|void
name|isNullCiteKeyThrowsNPE
parameter_list|()
block|{
name|BibEntry
name|e
init|=
operator|new
name|BibEntry
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|)
decl_stmt|;
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|e
operator|.
name|setCiteKey
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isEmptyCiteKey ()
specifier|public
name|void
name|isEmptyCiteKey
parameter_list|()
block|{
name|BibEntry
name|e
init|=
operator|new
name|BibEntry
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|hasCiteKey
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCiteKey
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|hasCiteKey
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCiteKey
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|hasCiteKey
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|clearField
argument_list|(
name|InternalField
operator|.
name|KEY_FIELD
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|hasCiteKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|settingTypeToNullThrowsException ()
specifier|public
name|void
name|settingTypeToNullThrowsException
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|keywordEntry
operator|.
name|setType
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasDateWithYearNumericalMonthString ()
specifier|public
name|void
name|getFieldOrAliasDateWithYearNumericalMonthString
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|,
literal|"2003"
argument_list|)
expr_stmt|;
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2003-03"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAlias
argument_list|(
name|StandardField
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasDateWithYearAbbreviatedMonth ()
specifier|public
name|void
name|getFieldOrAliasDateWithYearAbbreviatedMonth
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|,
literal|"2003"
argument_list|)
expr_stmt|;
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|,
literal|"#mar#"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2003-03"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAlias
argument_list|(
name|StandardField
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasDateWithYearAbbreviatedMonthString ()
specifier|public
name|void
name|getFieldOrAliasDateWithYearAbbreviatedMonthString
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|,
literal|"2003"
argument_list|)
expr_stmt|;
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|,
literal|"mar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2003-03"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAlias
argument_list|(
name|StandardField
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasDateWithOnlyYear ()
specifier|public
name|void
name|getFieldOrAliasDateWithOnlyYear
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|,
literal|"2003"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2003"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAlias
argument_list|(
name|StandardField
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasYearWithDateYYYY ()
specifier|public
name|void
name|getFieldOrAliasYearWithDateYYYY
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|DATE
argument_list|,
literal|"2003"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2003"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAlias
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasYearWithDateYYYYMM ()
specifier|public
name|void
name|getFieldOrAliasYearWithDateYYYYMM
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|DATE
argument_list|,
literal|"2003-03"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2003"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAlias
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasYearWithDateYYYYMMDD ()
specifier|public
name|void
name|getFieldOrAliasYearWithDateYYYYMMDD
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|DATE
argument_list|,
literal|"2003-03-30"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2003"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAlias
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasMonthWithDateYYYYReturnsNull ()
specifier|public
name|void
name|getFieldOrAliasMonthWithDateYYYYReturnsNull
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|DATE
argument_list|,
literal|"2003"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAlias
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasMonthWithDateYYYYMM ()
specifier|public
name|void
name|getFieldOrAliasMonthWithDateYYYYMM
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|DATE
argument_list|,
literal|"2003-03"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"#mar#"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAlias
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasMonthWithDateYYYYMMDD ()
specifier|public
name|void
name|getFieldOrAliasMonthWithDateYYYYMMDD
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|DATE
argument_list|,
literal|"2003-03-30"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"#mar#"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAlias
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasLatexFreeAlreadyFreeValueIsUnchanged ()
specifier|public
name|void
name|getFieldOrAliasLatexFreeAlreadyFreeValueIsUnchanged
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
literal|"A Title Without any LaTeX commands"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"A Title Without any LaTeX commands"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAliasLatexFree
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasLatexFreeAlreadyFreeAliasValueIsUnchanged ()
specifier|public
name|void
name|getFieldOrAliasLatexFreeAlreadyFreeAliasValueIsUnchanged
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|JOURNAL
argument_list|,
literal|"A Title Without any LaTeX commands"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"A Title Without any LaTeX commands"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAliasLatexFree
argument_list|(
name|StandardField
operator|.
name|JOURNALTITLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasLatexFreeBracesAreRemoved ()
specifier|public
name|void
name|getFieldOrAliasLatexFreeBracesAreRemoved
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
literal|"{A Title with some {B}ra{C}es}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"A Title with some BraCes"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAliasLatexFree
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasLatexFreeBracesAreRemovedFromAlias ()
specifier|public
name|void
name|getFieldOrAliasLatexFreeBracesAreRemovedFromAlias
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|JOURNAL
argument_list|,
literal|"{A Title with some {B}ra{C}es}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"A Title with some BraCes"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAliasLatexFree
argument_list|(
name|StandardField
operator|.
name|JOURNALTITLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFieldOrAliasLatexFreeComplexConversionInAlias ()
specifier|public
name|void
name|getFieldOrAliasLatexFreeComplexConversionInAlias
parameter_list|()
block|{
name|emptyEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|JOURNAL
argument_list|,
literal|"A 32~{mA} {$\\Sigma\\Delta$}-modulator"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"A 32 mA Î£Î-modulator"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getFieldOrAliasLatexFree
argument_list|(
name|StandardField
operator|.
name|JOURNALTITLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setNullField ()
specifier|public
name|void
name|setNullField
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|emptyEntry
operator|.
name|setField
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNullKeywordThrowsNPE ()
specifier|public
name|void
name|addNullKeywordThrowsNPE
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|keywordEntry
operator|.
name|addKeyword
argument_list|(
operator|(
name|Keyword
operator|)
literal|null
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putNullKeywordListThrowsNPE ()
specifier|public
name|void
name|putNullKeywordListThrowsNPE
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
operator|(
name|KeywordList
operator|)
literal|null
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putNullKeywordSeparatorThrowsNPE ()
specifier|public
name|void
name|putNullKeywordSeparatorThrowsNPE
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSeparatedKeywordsAreCorrect ()
specifier|public
name|void
name|testGetSeparatedKeywordsAreCorrect
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|KeywordList
argument_list|(
literal|"Foo"
argument_list|,
literal|"Bar"
argument_list|)
argument_list|,
name|keywordEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddKeywordIsCorrect ()
specifier|public
name|void
name|testAddKeywordIsCorrect
parameter_list|()
block|{
name|keywordEntry
operator|.
name|addKeyword
argument_list|(
literal|"FooBar"
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|KeywordList
argument_list|(
literal|"Foo"
argument_list|,
literal|"Bar"
argument_list|,
literal|"FooBar"
argument_list|)
argument_list|,
name|keywordEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddKeywordHasChanged ()
specifier|public
name|void
name|testAddKeywordHasChanged
parameter_list|()
block|{
name|keywordEntry
operator|.
name|addKeyword
argument_list|(
literal|"FooBar"
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keywordEntry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddKeywordTwiceYiedsOnlyOne ()
specifier|public
name|void
name|testAddKeywordTwiceYiedsOnlyOne
parameter_list|()
block|{
name|keywordEntry
operator|.
name|addKeyword
argument_list|(
literal|"FooBar"
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|keywordEntry
operator|.
name|addKeyword
argument_list|(
literal|"FooBar"
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|KeywordList
argument_list|(
literal|"Foo"
argument_list|,
literal|"Bar"
argument_list|,
literal|"FooBar"
argument_list|)
argument_list|,
name|keywordEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addKeywordIsCaseSensitive ()
specifier|public
name|void
name|addKeywordIsCaseSensitive
parameter_list|()
block|{
name|keywordEntry
operator|.
name|addKeyword
argument_list|(
literal|"FOO"
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|KeywordList
argument_list|(
literal|"Foo"
argument_list|,
literal|"Bar"
argument_list|,
literal|"FOO"
argument_list|)
argument_list|,
name|keywordEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddKeywordWithDifferentCapitalizationChanges ()
specifier|public
name|void
name|testAddKeywordWithDifferentCapitalizationChanges
parameter_list|()
block|{
name|keywordEntry
operator|.
name|addKeyword
argument_list|(
literal|"FOO"
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keywordEntry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddKeywordEmptyKeywordIsNotAdded ()
specifier|public
name|void
name|testAddKeywordEmptyKeywordIsNotAdded
parameter_list|()
block|{
name|keywordEntry
operator|.
name|addKeyword
argument_list|(
literal|""
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|KeywordList
argument_list|(
literal|"Foo"
argument_list|,
literal|"Bar"
argument_list|)
argument_list|,
name|keywordEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddKeywordEmptyKeywordNotChanged ()
specifier|public
name|void
name|testAddKeywordEmptyKeywordNotChanged
parameter_list|()
block|{
name|keywordEntry
operator|.
name|addKeyword
argument_list|(
literal|""
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|keywordEntry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|texNewBibEntryHasNoKeywords ()
specifier|public
name|void
name|texNewBibEntryHasNoKeywords
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|emptyEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|texNewBibEntryHasNoKeywordsEvenAfterAddingEmptyKeyword ()
specifier|public
name|void
name|texNewBibEntryHasNoKeywordsEvenAfterAddingEmptyKeyword
parameter_list|()
block|{
name|emptyEntry
operator|.
name|addKeyword
argument_list|(
literal|""
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|emptyEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|texNewBibEntryAfterAddingEmptyKeywordNotChanged ()
specifier|public
name|void
name|texNewBibEntryAfterAddingEmptyKeywordNotChanged
parameter_list|()
block|{
name|emptyEntry
operator|.
name|addKeyword
argument_list|(
literal|""
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|emptyEntry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddKeywordsWorksAsExpected ()
specifier|public
name|void
name|testAddKeywordsWorksAsExpected
parameter_list|()
block|{
name|emptyEntry
operator|.
name|addKeywords
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Foo"
argument_list|,
literal|"Bar"
argument_list|)
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|KeywordList
argument_list|(
literal|"Foo"
argument_list|,
literal|"Bar"
argument_list|)
argument_list|,
name|emptyEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutKeywordsOverwritesOldKeywords ()
specifier|public
name|void
name|testPutKeywordsOverwritesOldKeywords
parameter_list|()
block|{
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Yin"
argument_list|,
literal|"Yang"
argument_list|)
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|KeywordList
argument_list|(
literal|"Yin"
argument_list|,
literal|"Yang"
argument_list|)
argument_list|,
name|keywordEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutKeywordsHasChanged ()
specifier|public
name|void
name|testPutKeywordsHasChanged
parameter_list|()
block|{
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Yin"
argument_list|,
literal|"Yang"
argument_list|)
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keywordEntry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutKeywordsPutEmpyListErasesPreviousKeywords ()
specifier|public
name|void
name|testPutKeywordsPutEmpyListErasesPreviousKeywords
parameter_list|()
block|{
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keywordEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutKeywordsPutEmpyListHasChanged ()
specifier|public
name|void
name|testPutKeywordsPutEmpyListHasChanged
parameter_list|()
block|{
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keywordEntry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutKeywordsPutEmpyListToEmptyBibentry ()
specifier|public
name|void
name|testPutKeywordsPutEmpyListToEmptyBibentry
parameter_list|()
block|{
name|emptyEntry
operator|.
name|putKeywords
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|emptyEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutKeywordsPutEmpyListToEmptyBibentryNotChanged ()
specifier|public
name|void
name|testPutKeywordsPutEmpyListToEmptyBibentryNotChanged
parameter_list|()
block|{
name|emptyEntry
operator|.
name|putKeywords
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|emptyEntry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putKeywordsToEmptyReturnsNoChange ()
specifier|public
name|void
name|putKeywordsToEmptyReturnsNoChange
parameter_list|()
block|{
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|emptyEntry
operator|.
name|putKeywords
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|clearKeywordsReturnsChange ()
specifier|public
name|void
name|clearKeywordsReturnsChange
parameter_list|()
block|{
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|FieldChange
argument_list|(
name|keywordEntry
argument_list|,
name|StandardField
operator|.
name|KEYWORDS
argument_list|,
literal|"Foo, Bar"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeKeywordsReturnsChange ()
specifier|public
name|void
name|changeKeywordsReturnsChange
parameter_list|()
block|{
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Test"
argument_list|,
literal|"FooTest"
argument_list|)
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|FieldChange
argument_list|(
name|keywordEntry
argument_list|,
name|StandardField
operator|.
name|KEYWORDS
argument_list|,
literal|"Foo, Bar"
argument_list|,
literal|"Test, FooTest"
argument_list|)
argument_list|)
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putKeywordsToSameReturnsNoChange ()
specifier|public
name|void
name|putKeywordsToSameReturnsNoChange
parameter_list|()
block|{
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Foo"
argument_list|,
literal|"Bar"
argument_list|)
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getKeywordsReturnsParsedKeywordListFromKeywordsField ()
specifier|public
name|void
name|getKeywordsReturnsParsedKeywordListFromKeywordsField
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|KEYWORDS
argument_list|,
literal|"w1, w2a w2b, w3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|KeywordList
argument_list|(
literal|"w1"
argument_list|,
literal|"w2a w2b"
argument_list|,
literal|"w3"
argument_list|)
argument_list|,
name|entry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeKeywordsOnEntryWithoutKeywordsDoesNothing ()
specifier|public
name|void
name|removeKeywordsOnEntryWithoutKeywordsDoesNothing
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|entry
operator|.
name|removeKeywords
argument_list|(
name|SpecialField
operator|.
name|RANKING
operator|.
name|getKeyWords
argument_list|()
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeKeywordsWithEmptyListDoesNothing ()
specifier|public
name|void
name|removeKeywordsWithEmptyListDoesNothing
parameter_list|()
block|{
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"kw1"
argument_list|,
literal|"kw2"
argument_list|)
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|keywordEntry
operator|.
name|removeKeywords
argument_list|(
operator|new
name|KeywordList
argument_list|()
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeKeywordsWithNonExistingKeywordsDoesNothing ()
specifier|public
name|void
name|removeKeywordsWithNonExistingKeywordsDoesNothing
parameter_list|()
block|{
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"kw1"
argument_list|,
literal|"kw2"
argument_list|)
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|keywordEntry
operator|.
name|removeKeywords
argument_list|(
name|KeywordList
operator|.
name|parse
argument_list|(
literal|"kw3, kw4"
argument_list|,
literal|','
argument_list|)
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"kw1"
argument_list|,
literal|"kw2"
argument_list|)
argument_list|,
name|keywordEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeKeywordsWithExistingKeywordsRemovesThem ()
specifier|public
name|void
name|removeKeywordsWithExistingKeywordsRemovesThem
parameter_list|()
block|{
name|keywordEntry
operator|.
name|putKeywords
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"kw1"
argument_list|,
literal|"kw2"
argument_list|,
literal|"kw3"
argument_list|)
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|keywordEntry
operator|.
name|removeKeywords
argument_list|(
name|KeywordList
operator|.
name|parse
argument_list|(
literal|"kw1, kw2"
argument_list|,
literal|','
argument_list|)
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|change
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|KeywordList
operator|.
name|parse
argument_list|(
literal|"kw3"
argument_list|,
literal|','
argument_list|)
argument_list|,
name|keywordEntry
operator|.
name|getKeywords
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setCiteKey ()
specifier|public
name|void
name|setCiteKey
parameter_list|()
block|{
name|BibEntry
name|be
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|be
operator|.
name|hasCiteKey
argument_list|()
argument_list|)
expr_stmt|;
name|be
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"Albert Einstein"
argument_list|)
expr_stmt|;
name|be
operator|.
name|setCiteKey
argument_list|(
literal|"Einstein1931"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|be
operator|.
name|hasCiteKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Einstein1931"
argument_list|)
argument_list|,
name|be
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Albert Einstein"
argument_list|)
argument_list|,
name|be
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|be
operator|.
name|clearField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|be
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

