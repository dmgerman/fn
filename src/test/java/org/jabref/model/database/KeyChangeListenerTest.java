begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.database
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|KeyChangeListenerTest
specifier|public
class|class
name|KeyChangeListenerTest
block|{
DECL|field|db
specifier|private
name|BibDatabase
name|db
decl_stmt|;
DECL|field|entry1
specifier|private
name|BibEntry
name|entry1
decl_stmt|;
DECL|field|entry2
specifier|private
name|BibEntry
name|entry2
decl_stmt|;
DECL|field|entry3
specifier|private
name|BibEntry
name|entry3
decl_stmt|;
DECL|field|entry4
specifier|private
name|BibEntry
name|entry4
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|db
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
name|entry1
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|entry1
operator|.
name|setCiteKey
argument_list|(
literal|"Entry1"
argument_list|)
expr_stmt|;
name|entry1
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|CROSSREF
argument_list|,
literal|"Entry4"
argument_list|)
expr_stmt|;
name|db
operator|.
name|insertEntry
argument_list|(
name|entry1
argument_list|)
expr_stmt|;
name|entry2
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|entry2
operator|.
name|setCiteKey
argument_list|(
literal|"Entry2"
argument_list|)
expr_stmt|;
name|entry2
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|RELATED
argument_list|,
literal|"Entry1,Entry3"
argument_list|)
expr_stmt|;
name|db
operator|.
name|insertEntry
argument_list|(
name|entry2
argument_list|)
expr_stmt|;
name|entry3
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|entry3
operator|.
name|setCiteKey
argument_list|(
literal|"Entry3"
argument_list|)
expr_stmt|;
name|entry3
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|RELATED
argument_list|,
literal|"Entry1,Entry2,Entry3"
argument_list|)
expr_stmt|;
name|db
operator|.
name|insertEntry
argument_list|(
name|entry3
argument_list|)
expr_stmt|;
name|entry4
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|entry4
operator|.
name|setCiteKey
argument_list|(
literal|"Entry4"
argument_list|)
expr_stmt|;
name|db
operator|.
name|insertEntry
argument_list|(
name|entry4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCrossrefChanged ()
specifier|public
name|void
name|testCrossrefChanged
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Entry4"
argument_list|)
argument_list|,
name|entry1
operator|.
name|getField
argument_list|(
literal|"crossref"
argument_list|)
argument_list|)
expr_stmt|;
name|entry4
operator|.
name|setCiteKey
argument_list|(
literal|"Banana"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Banana"
argument_list|)
argument_list|,
name|entry1
operator|.
name|getField
argument_list|(
literal|"crossref"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelatedChanged ()
specifier|public
name|void
name|testRelatedChanged
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Entry1,Entry3"
argument_list|)
argument_list|,
name|entry2
operator|.
name|getField
argument_list|(
literal|"related"
argument_list|)
argument_list|)
expr_stmt|;
name|entry1
operator|.
name|setCiteKey
argument_list|(
literal|"Banana"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Banana,Entry3"
argument_list|)
argument_list|,
name|entry2
operator|.
name|getField
argument_list|(
literal|"related"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelatedChangedInSameEntry ()
specifier|public
name|void
name|testRelatedChangedInSameEntry
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Entry1,Entry2,Entry3"
argument_list|)
argument_list|,
name|entry3
operator|.
name|getField
argument_list|(
literal|"related"
argument_list|)
argument_list|)
expr_stmt|;
name|entry3
operator|.
name|setCiteKey
argument_list|(
literal|"Banana"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Entry1,Entry2,Banana"
argument_list|)
argument_list|,
name|entry3
operator|.
name|getField
argument_list|(
literal|"related"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCrossrefRemoved ()
specifier|public
name|void
name|testCrossrefRemoved
parameter_list|()
block|{
name|entry4
operator|.
name|clearField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|entry1
operator|.
name|getField
argument_list|(
literal|"crossref"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCrossrefEntryRemoved ()
specifier|public
name|void
name|testCrossrefEntryRemoved
parameter_list|()
block|{
name|db
operator|.
name|removeEntry
argument_list|(
name|entry4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|entry1
operator|.
name|getField
argument_list|(
literal|"crossref"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelatedEntryRemoved ()
specifier|public
name|void
name|testRelatedEntryRemoved
parameter_list|()
block|{
name|db
operator|.
name|removeEntry
argument_list|(
name|entry1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Entry3"
argument_list|)
argument_list|,
name|entry2
operator|.
name|getField
argument_list|(
literal|"related"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelatedAllEntriesRemoved ()
specifier|public
name|void
name|testRelatedAllEntriesRemoved
parameter_list|()
block|{
name|db
operator|.
name|removeEntry
argument_list|(
name|entry1
argument_list|)
expr_stmt|;
name|db
operator|.
name|removeEntry
argument_list|(
name|entry3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|entry2
operator|.
name|getField
argument_list|(
literal|"related"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

