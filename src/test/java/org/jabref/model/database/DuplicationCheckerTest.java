begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.database
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|DuplicationCheckerTest
specifier|public
class|class
name|DuplicationCheckerTest
block|{
DECL|field|database
specifier|private
name|BibDatabase
name|database
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|database
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEntry ()
specifier|public
name|void
name|addEntry
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addAndRemoveEntry ()
specifier|public
name|void
name|addAndRemoveEntry
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|database
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeCiteKey ()
specifier|public
name|void
name|changeCiteKey
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"BBB"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"BBB"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setCiteKeySameKeyDifferentEntries ()
specifier|public
name|void
name|setCiteKeySameKeyDifferentEntries
parameter_list|()
block|{
name|BibEntry
name|entry0
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry0
operator|.
name|setCiteKey
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry0
argument_list|)
expr_stmt|;
name|BibEntry
name|entry1
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry1
operator|.
name|setCiteKey
argument_list|(
literal|"BBB"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"BBB"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|entry1
operator|.
name|setCiteKey
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"BBB"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeMultipleCiteKeys ()
specifier|public
name|void
name|removeMultipleCiteKeys
parameter_list|()
block|{
name|BibEntry
name|entry0
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry0
operator|.
name|setCiteKey
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry0
argument_list|)
expr_stmt|;
name|BibEntry
name|entry1
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry1
operator|.
name|setCiteKey
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry1
argument_list|)
expr_stmt|;
name|BibEntry
name|entry2
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry2
operator|.
name|setCiteKey
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|database
operator|.
name|removeEntry
argument_list|(
name|entry2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|database
operator|.
name|removeEntry
argument_list|(
name|entry1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|database
operator|.
name|removeEntry
argument_list|(
name|entry0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEmptyCiteKey ()
specifier|public
name|void
name|addEmptyCiteKey
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEmptyCiteKey ()
specifier|public
name|void
name|removeEmptyCiteKey
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|database
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

