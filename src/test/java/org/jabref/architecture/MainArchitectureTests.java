begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.architecture
package|package
name|org
operator|.
name|jabref
operator|.
name|architecture
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|MainArchitectureTests
specifier|public
class|class
name|MainArchitectureTests
block|{
DECL|field|CLASS_ORG_JABREF_GLOBALS
specifier|public
specifier|static
specifier|final
name|String
name|CLASS_ORG_JABREF_GLOBALS
init|=
literal|"org.jabref.Globals"
decl_stmt|;
DECL|field|PACKAGE_JAVAX_SWING
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGE_JAVAX_SWING
init|=
literal|"javax.swing"
decl_stmt|;
DECL|field|PACKAGE_JAVA_AWT
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGE_JAVA_AWT
init|=
literal|"java.awt"
decl_stmt|;
DECL|field|PACKAGE_JAVA_FX
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGE_JAVA_FX
init|=
literal|"javafx"
decl_stmt|;
DECL|field|PACKAGE_ORG_JABREF_GUI
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGE_ORG_JABREF_GUI
init|=
literal|"org.jabref.gui"
decl_stmt|;
DECL|field|PACKAGE_ORG_JABREF_LOGIC
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGE_ORG_JABREF_LOGIC
init|=
literal|"org.jabref.logic"
decl_stmt|;
DECL|field|PACKAGE_ORG_JABREF_MODEL
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGE_ORG_JABREF_MODEL
init|=
literal|"org.jabref.model"
decl_stmt|;
DECL|field|EXCEPTION_PACKAGE_JAVA_AWT_GEOM
specifier|private
specifier|static
specifier|final
name|String
name|EXCEPTION_PACKAGE_JAVA_AWT_GEOM
init|=
literal|"java.awt.geom"
decl_stmt|;
DECL|field|EXCEPTION_PACKAGE_JAVA_FX_COLLECTIONS
specifier|private
specifier|static
specifier|final
name|String
name|EXCEPTION_PACKAGE_JAVA_FX_COLLECTIONS
init|=
literal|"javafx.collections"
decl_stmt|;
DECL|field|EXCEPTION_PACKAGE_JAVA_FX_BEANS
specifier|private
specifier|static
specifier|final
name|String
name|EXCEPTION_PACKAGE_JAVA_FX_BEANS
init|=
literal|"javafx.beans"
decl_stmt|;
DECL|field|EXCEPTION_CLASS_JAVA_FX_COLOR
specifier|private
specifier|static
specifier|final
name|String
name|EXCEPTION_CLASS_JAVA_FX_COLOR
init|=
literal|"javafx.scene.paint.Color"
decl_stmt|;
DECL|field|firstPackage
specifier|private
specifier|final
name|String
name|firstPackage
decl_stmt|;
DECL|field|secondPackage
specifier|private
specifier|final
name|String
name|secondPackage
decl_stmt|;
DECL|field|exceptions
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|exceptions
decl_stmt|;
DECL|method|MainArchitectureTests (String firstPackage, String secondPackage)
specifier|public
name|MainArchitectureTests
parameter_list|(
name|String
name|firstPackage
parameter_list|,
name|String
name|secondPackage
parameter_list|)
block|{
name|this
operator|.
name|firstPackage
operator|=
name|firstPackage
expr_stmt|;
name|this
operator|.
name|secondPackage
operator|=
name|secondPackage
expr_stmt|;
comment|// Add exceptions for the architectural test here
comment|// Note that bending the architectural constraints should not be done inconsiderately
name|exceptions
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logicExceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|logicExceptions
operator|.
name|add
argument_list|(
name|EXCEPTION_PACKAGE_JAVA_AWT_GEOM
argument_list|)
expr_stmt|;
name|logicExceptions
operator|.
name|add
argument_list|(
name|EXCEPTION_PACKAGE_JAVA_FX_COLLECTIONS
argument_list|)
expr_stmt|;
name|logicExceptions
operator|.
name|add
argument_list|(
name|EXCEPTION_PACKAGE_JAVA_FX_BEANS
argument_list|)
expr_stmt|;
name|logicExceptions
operator|.
name|add
argument_list|(
name|EXCEPTION_CLASS_JAVA_FX_COLOR
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|modelExceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|modelExceptions
operator|.
name|add
argument_list|(
name|EXCEPTION_PACKAGE_JAVA_FX_COLLECTIONS
argument_list|)
expr_stmt|;
name|modelExceptions
operator|.
name|add
argument_list|(
name|EXCEPTION_CLASS_JAVA_FX_COLOR
argument_list|)
expr_stmt|;
name|modelExceptions
operator|.
name|add
argument_list|(
name|EXCEPTION_PACKAGE_JAVA_FX_COLLECTIONS
argument_list|)
expr_stmt|;
name|modelExceptions
operator|.
name|add
argument_list|(
name|EXCEPTION_PACKAGE_JAVA_FX_BEANS
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|put
argument_list|(
name|PACKAGE_ORG_JABREF_LOGIC
argument_list|,
name|logicExceptions
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|put
argument_list|(
name|PACKAGE_ORG_JABREF_MODEL
argument_list|,
name|modelExceptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index} -- is {0} independent of {1}?"
argument_list|)
DECL|method|data ()
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|PACKAGE_ORG_JABREF_LOGIC
block|,
name|PACKAGE_JAVA_AWT
block|}
block|,
block|{
name|PACKAGE_ORG_JABREF_LOGIC
block|,
name|PACKAGE_JAVAX_SWING
block|}
block|,
block|{
name|PACKAGE_ORG_JABREF_LOGIC
block|,
name|PACKAGE_JAVA_FX
block|}
block|,
block|{
name|PACKAGE_ORG_JABREF_LOGIC
block|,
name|PACKAGE_ORG_JABREF_GUI
block|}
block|,
block|{
name|PACKAGE_ORG_JABREF_LOGIC
block|,
name|CLASS_ORG_JABREF_GLOBALS
block|}
block|,
block|{
name|PACKAGE_ORG_JABREF_MODEL
block|,
name|PACKAGE_JAVA_AWT
block|}
block|,
block|{
name|PACKAGE_ORG_JABREF_MODEL
block|,
name|PACKAGE_JAVAX_SWING
block|}
block|,
block|{
name|PACKAGE_ORG_JABREF_MODEL
block|,
name|PACKAGE_JAVA_FX
block|}
block|,
block|{
name|PACKAGE_ORG_JABREF_MODEL
block|,
name|PACKAGE_ORG_JABREF_GUI
block|}
block|,
block|{
name|PACKAGE_ORG_JABREF_MODEL
block|,
name|PACKAGE_ORG_JABREF_LOGIC
block|}
block|,
block|{
name|PACKAGE_ORG_JABREF_MODEL
block|,
name|CLASS_ORG_JABREF_GLOBALS
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|firstPackageIsIndependentOfSecondPackage ()
specifier|public
name|void
name|firstPackageIsIndependentOfSecondPackage
parameter_list|()
throws|throws
name|IOException
block|{
name|Predicate
argument_list|<
name|String
argument_list|>
name|isExceptionPackage
init|=
parameter_list|(
name|s
parameter_list|)
lambda|->
name|s
operator|.
name|startsWith
argument_list|(
literal|"import "
operator|+
name|secondPackage
argument_list|)
operator|&&
name|exceptions
operator|.
name|getOrDefault
argument_list|(
name|firstPackage
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|exception
lambda|->
name|s
operator|.
name|startsWith
argument_list|(
literal|"import "
operator|+
name|exception
argument_list|)
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|isPackage
init|=
parameter_list|(
name|s
parameter_list|)
lambda|->
name|s
operator|.
name|startsWith
argument_list|(
literal|"package "
operator|+
name|firstPackage
argument_list|)
decl_stmt|;
try|try
init|(
name|Stream
argument_list|<
name|Path
argument_list|>
name|pathStream
init|=
name|Files
operator|.
name|walk
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/main/"
argument_list|)
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|pathStream
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".java"
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|p
lambda|->
block|{
lambda|try
block|{
return|return
name|Files
operator|.
name|readAllLines
argument_list|(
name|p
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|isPackage
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|)
function|.filter
parameter_list|(
function|p ->
block|{
try|try
block|{
return|return
name|Files
operator|.
name|readAllLines
argument_list|(
name|p
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|isExceptionPackage
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
end_class

begin_expr_stmt
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The following classes are not allowed to depend on "
operator|+
name|secondPackage
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|files
argument_list|)
expr_stmt|;
end_expr_stmt

unit|}     } }
end_unit

