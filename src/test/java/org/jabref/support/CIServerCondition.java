begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.support
package|package
name|org
operator|.
name|jabref
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AnnotatedElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|extension
operator|.
name|ConditionEvaluationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|extension
operator|.
name|ExecutionCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|extension
operator|.
name|ExtensionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|platform
operator|.
name|commons
operator|.
name|util
operator|.
name|AnnotationUtils
import|;
end_import

begin_class
DECL|class|CIServerCondition
specifier|public
class|class
name|CIServerCondition
implements|implements
name|ExecutionCondition
block|{
DECL|field|ENABLED
specifier|private
specifier|static
specifier|final
name|ConditionEvaluationResult
name|ENABLED
init|=
name|ConditionEvaluationResult
operator|.
name|enabled
argument_list|(
literal|"not on CI server"
argument_list|)
decl_stmt|;
DECL|method|isCIServer ()
specifier|private
specifier|static
name|boolean
name|isCIServer
parameter_list|()
block|{
comment|// See http://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables
comment|// See https://circleci.com/docs/environment-variables
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|getenv
argument_list|(
literal|"CI"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Containers and tests are disabled if they are annotated with {@link DisabledOnCIServer} and they tests are run on      * the CI server.      */
annotation|@
name|Override
DECL|method|evaluateExecutionCondition (ExtensionContext context)
specifier|public
name|ConditionEvaluationResult
name|evaluateExecutionCondition
parameter_list|(
name|ExtensionContext
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isCIServer
argument_list|()
condition|)
block|{
return|return
name|ENABLED
return|;
block|}
name|Optional
argument_list|<
name|AnnotatedElement
argument_list|>
name|element
init|=
name|context
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|DisabledOnCIServer
argument_list|>
name|disabled
init|=
name|AnnotationUtils
operator|.
name|findAnnotation
argument_list|(
name|element
argument_list|,
name|DisabledOnCIServer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|disabled
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|String
name|reason
init|=
name|disabled
operator|.
name|map
argument_list|(
name|DisabledOnCIServer
operator|::
name|value
argument_list|)
operator|.
name|filter
argument_list|(
name|StringUtil
operator|::
name|isNotBlank
argument_list|)
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
name|element
operator|.
name|get
argument_list|()
operator|+
literal|" is disabled on CI server"
argument_list|)
decl_stmt|;
return|return
name|ConditionEvaluationResult
operator|.
name|disabled
argument_list|(
name|reason
argument_list|)
return|;
block|}
return|return
name|ENABLED
return|;
block|}
block|}
end_class

end_unit

