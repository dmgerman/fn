begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.mergeentries
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|extension
operator|.
name|ExtendWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testfx
operator|.
name|framework
operator|.
name|junit5
operator|.
name|ApplicationExtension
import|;
end_import

begin_class
annotation|@
name|ExtendWith
argument_list|(
name|ApplicationExtension
operator|.
name|class
argument_list|)
DECL|class|DiffHighlightingTest
class|class
name|DiffHighlightingTest
block|{
DECL|method|assertEquals (List<Text> expected, List<Text> actual)
specifier|public
specifier|static
name|void
name|assertEquals
parameter_list|(
name|List
argument_list|<
name|Text
argument_list|>
name|expected
parameter_list|,
name|List
argument_list|<
name|Text
argument_list|>
name|actual
parameter_list|)
block|{
comment|// Need to compare string values since Texts with the same string are not considered equal
name|Assertions
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|actual
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Moreover, make sure that style classes are correct
name|List
argument_list|<
name|String
argument_list|>
name|expectedStyles
init|=
name|expected
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|text
lambda|->
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualStyles
init|=
name|actual
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|text
lambda|->
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertEquals
argument_list|(
name|expectedStyles
argument_list|,
name|actualStyles
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateDiffHighlightingBothNullThrowsNPE ()
name|void
name|testGenerateDiffHighlightingBothNullThrowsNPE
parameter_list|()
block|{
name|Assertions
operator|.
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DiffHighlighting
operator|.
name|generateDiffHighlighting
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullSeparatorThrowsNPE ()
name|void
name|testNullSeparatorThrowsNPE
parameter_list|()
block|{
name|Assertions
operator|.
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DiffHighlighting
operator|.
name|generateDiffHighlighting
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateDiffHighlightingNoDiff ()
name|void
name|testGenerateDiffHighlightingNoDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|generateDiffHighlighting
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateDiffHighlightingSingleWordAddTextWordDiff ()
name|void
name|testGenerateDiffHighlightingSingleWordAddTextWordDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DiffHighlighting
operator|.
name|forRemoved
argument_list|(
literal|"foo "
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|generateDiffHighlighting
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateDiffHighlightingSingleWordAddTextCharacterDiff ()
name|void
name|testGenerateDiffHighlightingSingleWordAddTextCharacterDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|generateDiffHighlighting
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateDiffHighlightingSingleWordDeleteTextWordDiff ()
name|void
name|testGenerateDiffHighlightingSingleWordDeleteTextWordDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DiffHighlighting
operator|.
name|forRemoved
argument_list|(
literal|"foobar "
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|generateDiffHighlighting
argument_list|(
literal|"foobar"
argument_list|,
literal|"foo"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateDiffHighlightingSingleWordDeleteTextCharacterDiff ()
name|void
name|testGenerateDiffHighlightingSingleWordDeleteTextCharacterDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forRemoved
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forRemoved
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forRemoved
argument_list|(
literal|"r"
argument_list|)
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|generateDiffHighlighting
argument_list|(
literal|"foobar"
argument_list|,
literal|"foo"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|generateSymmetricHighlightingSingleWordAddTextWordDiff ()
name|void
name|generateSymmetricHighlightingSingleWordAddTextWordDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|DiffHighlighting
operator|.
name|forChanged
argument_list|(
literal|"foo "
argument_list|)
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|generateSymmetricHighlightingSingleWordAddTextCharacterDiff ()
name|void
name|generateSymmetricHighlightingSingleWordAddTextCharacterDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|generateSymmetricHighlightingSingleWordDeleteTextWordDiff ()
name|void
name|generateSymmetricHighlightingSingleWordDeleteTextWordDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|DiffHighlighting
operator|.
name|forChanged
argument_list|(
literal|"foobar "
argument_list|)
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
literal|"foobar"
argument_list|,
literal|"foo"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|generateSymmetricHighlightingSingleWordDeleteTextCharacterDiff ()
name|void
name|generateSymmetricHighlightingSingleWordDeleteTextCharacterDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"r"
argument_list|)
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
literal|"foobar"
argument_list|,
literal|"foo"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|generateSymmetricHighlightingMultipleWordsDeleteTextCharacterDiff ()
name|void
name|generateSymmetricHighlightingMultipleWordsDeleteTextCharacterDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"o"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"r"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"n"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"o"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"m"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"e"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"t"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"h"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"i"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"n"
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"g"
argument_list|)
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
literal|"foobar and something"
argument_list|,
literal|"foo and thing"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|generateSymmetricHighlightingMultipleWordsDeleteTextWordDiff ()
name|void
name|generateSymmetricHighlightingMultipleWordsDeleteTextWordDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"foo "
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"bar "
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"and "
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forAdded
argument_list|(
literal|"some "
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
literal|"thing "
argument_list|)
argument_list|)
argument_list|,
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
literal|"foo bar and some thing"
argument_list|,
literal|"foo and thing"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

