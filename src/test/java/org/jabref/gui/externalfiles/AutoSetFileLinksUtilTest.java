begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.externalfiles
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|AutoLinkPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FileDirectoryPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|AutoSetFileLinksUtilTest
specifier|public
class|class
name|AutoSetFileLinksUtilTest
block|{
DECL|field|fileDirPrefs
specifier|private
specifier|final
name|FileDirectoryPreferences
name|fileDirPrefs
init|=
name|mock
argument_list|(
name|FileDirectoryPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|autoLinkPrefs
specifier|private
specifier|final
name|AutoLinkPreferences
name|autoLinkPrefs
init|=
operator|new
name|AutoLinkPreferences
argument_list|(
literal|false
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|';'
argument_list|)
decl_stmt|;
DECL|field|databaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|databaseContext
init|=
name|mock
argument_list|(
name|BibDatabaseContext
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|externalFileTypes
specifier|private
specifier|final
name|ExternalFileTypes
name|externalFileTypes
init|=
name|mock
argument_list|(
name|ExternalFileTypes
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|entry
specifier|private
specifier|final
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|(
literal|"article"
argument_list|)
decl_stmt|;
DECL|field|folder
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"CiteKey"
argument_list|)
expr_stmt|;
name|folder
operator|.
name|newFile
argument_list|(
literal|"CiteKey.pdf"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|databaseContext
operator|.
name|getFileDirectoriesAsPaths
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|externalFileTypes
operator|.
name|getExternalFileTypeSelection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|externalFileTypes
operator|.
name|getDefaultExternalFileTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
block|{
comment|//Due to mocking the externalFileType class, the file extension will not be found
name|List
argument_list|<
name|LinkedFile
argument_list|>
name|expected
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|"CiteKey.pdf"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|AutoSetFileLinksUtil
name|util
init|=
operator|new
name|AutoSetFileLinksUtil
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LinkedFile
argument_list|>
name|actual
init|=
name|util
operator|.
name|findassociatedNotLinkedFiles
argument_list|(
name|entry
argument_list|,
name|databaseContext
argument_list|,
name|fileDirPrefs
argument_list|,
name|autoLinkPrefs
argument_list|,
name|externalFileTypes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

