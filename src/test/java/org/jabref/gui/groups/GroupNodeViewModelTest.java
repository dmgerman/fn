begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.groups
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|StateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|CurrentThreadTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AbstractGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupHierarchyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|WordKeywordGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|GroupNodeViewModelTest
specifier|public
class|class
name|GroupNodeViewModelTest
block|{
DECL|field|stateManager
specifier|private
name|StateManager
name|stateManager
decl_stmt|;
DECL|field|databaseContext
specifier|private
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|viewModel
specifier|private
name|GroupNodeViewModel
name|viewModel
decl_stmt|;
DECL|field|taskExecutor
specifier|private
name|TaskExecutor
name|taskExecutor
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|stateManager
operator|=
name|mock
argument_list|(
name|StateManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|stateManager
operator|.
name|getSelectedEntries
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|FXCollections
operator|.
name|emptyObservableList
argument_list|()
argument_list|)
expr_stmt|;
name|databaseContext
operator|=
operator|new
name|BibDatabaseContext
argument_list|()
expr_stmt|;
name|taskExecutor
operator|=
operator|new
name|CurrentThreadTaskExecutor
argument_list|()
expr_stmt|;
name|viewModel
operator|=
name|getViewModelForGroup
argument_list|(
operator|new
name|WordKeywordGroup
argument_list|(
literal|"Test group"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|"test"
argument_list|,
literal|"search"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getDisplayNameConvertsLatexToUnicode ()
specifier|public
name|void
name|getDisplayNameConvertsLatexToUnicode
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupNodeViewModel
name|viewModel
init|=
name|getViewModelForGroup
argument_list|(
operator|new
name|WordKeywordGroup
argument_list|(
literal|"\\beta"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|"test"
argument_list|,
literal|"search"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Î²"
argument_list|,
name|viewModel
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|alwaysMatchedByEmptySearchString ()
specifier|public
name|void
name|alwaysMatchedByEmptySearchString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|viewModel
operator|.
name|isMatchedBy
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isMatchedIfContainsPartOfSearchString ()
specifier|public
name|void
name|isMatchedIfContainsPartOfSearchString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|viewModel
operator|.
name|isMatchedBy
argument_list|(
literal|"est"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getViewModelForGroup (AbstractGroup group)
specifier|private
name|GroupNodeViewModel
name|getViewModelForGroup
parameter_list|(
name|AbstractGroup
name|group
parameter_list|)
block|{
return|return
operator|new
name|GroupNodeViewModel
argument_list|(
name|databaseContext
argument_list|,
name|stateManager
argument_list|,
name|taskExecutor
argument_list|,
name|group
argument_list|)
return|;
block|}
block|}
end_class

end_unit

