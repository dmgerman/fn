begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.groups
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|StateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|CurrentThreadTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AbstractGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AutomaticKeywordGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupHierarchyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|WordKeywordGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|GroupNodeViewModelTest
specifier|public
class|class
name|GroupNodeViewModelTest
block|{
DECL|field|stateManager
specifier|private
name|StateManager
name|stateManager
decl_stmt|;
DECL|field|databaseContext
specifier|private
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|viewModel
specifier|private
name|GroupNodeViewModel
name|viewModel
decl_stmt|;
DECL|field|taskExecutor
specifier|private
name|TaskExecutor
name|taskExecutor
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|stateManager
operator|=
name|mock
argument_list|(
name|StateManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|stateManager
operator|.
name|getSelectedEntries
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|FXCollections
operator|.
name|emptyObservableList
argument_list|()
argument_list|)
expr_stmt|;
name|databaseContext
operator|=
operator|new
name|BibDatabaseContext
argument_list|()
expr_stmt|;
name|taskExecutor
operator|=
operator|new
name|CurrentThreadTaskExecutor
argument_list|()
expr_stmt|;
name|viewModel
operator|=
name|getViewModelForGroup
argument_list|(
operator|new
name|WordKeywordGroup
argument_list|(
literal|"Test group"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|"test"
argument_list|,
literal|"search"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getDisplayNameConvertsLatexToUnicode ()
specifier|public
name|void
name|getDisplayNameConvertsLatexToUnicode
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupNodeViewModel
name|viewModel
init|=
name|getViewModelForGroup
argument_list|(
operator|new
name|WordKeywordGroup
argument_list|(
literal|"\\beta"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|"test"
argument_list|,
literal|"search"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Î²"
argument_list|,
name|viewModel
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|alwaysMatchedByEmptySearchString ()
specifier|public
name|void
name|alwaysMatchedByEmptySearchString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|viewModel
operator|.
name|isMatchedBy
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isMatchedIfContainsPartOfSearchString ()
specifier|public
name|void
name|isMatchedIfContainsPartOfSearchString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|viewModel
operator|.
name|isMatchedBy
argument_list|(
literal|"est"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|treeOfAutomaticKeywordGroupIsCombined ()
specifier|public
name|void
name|treeOfAutomaticKeywordGroupIsCombined
parameter_list|()
throws|throws
name|Exception
block|{
name|BibEntry
name|entryOne
init|=
operator|new
name|BibEntry
argument_list|()
operator|.
name|withField
argument_list|(
literal|"keywords"
argument_list|,
literal|"A> B> B1, A> C"
argument_list|)
decl_stmt|;
name|BibEntry
name|entryTwo
init|=
operator|new
name|BibEntry
argument_list|()
operator|.
name|withField
argument_list|(
literal|"keywords"
argument_list|,
literal|"A> D, E"
argument_list|)
decl_stmt|;
name|BibEntry
name|entryThree
init|=
operator|new
name|BibEntry
argument_list|()
operator|.
name|withField
argument_list|(
literal|"keywords"
argument_list|,
literal|"A> B> B2"
argument_list|)
decl_stmt|;
name|databaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|insertEntries
argument_list|(
name|entryOne
argument_list|,
name|entryTwo
argument_list|,
name|entryThree
argument_list|)
expr_stmt|;
name|AutomaticKeywordGroup
name|group
init|=
operator|new
name|AutomaticKeywordGroup
argument_list|(
literal|"Keywords"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|"keywords"
argument_list|,
literal|','
argument_list|,
literal|'>'
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|expectedGroupA
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"A"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|expectedGroupB
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"B"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> B"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|expectedGroupB1
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"B1"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> B> B1"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|expectedGroupB2
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"B2"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> B> B2"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|expectedGroupC
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"C"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> C"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|expectedGroupD
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"D"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> D"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|expectedGroupE
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"E"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"E"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|expectedA
init|=
name|getViewModelForGroup
argument_list|(
name|expectedGroupA
argument_list|)
decl_stmt|;
name|GroupTreeNode
name|expectedB
init|=
name|expectedA
operator|.
name|addSubgroup
argument_list|(
name|expectedGroupB
argument_list|)
decl_stmt|;
name|expectedB
operator|.
name|addSubgroup
argument_list|(
name|expectedGroupB1
argument_list|)
expr_stmt|;
name|expectedB
operator|.
name|addSubgroup
argument_list|(
name|expectedGroupB2
argument_list|)
expr_stmt|;
name|expectedA
operator|.
name|addSubgroup
argument_list|(
name|expectedGroupC
argument_list|)
expr_stmt|;
name|expectedA
operator|.
name|addSubgroup
argument_list|(
name|expectedGroupD
argument_list|)
expr_stmt|;
name|GroupNodeViewModel
name|expectedE
init|=
name|getViewModelForGroup
argument_list|(
name|expectedGroupE
argument_list|)
decl_stmt|;
name|ObservableList
argument_list|<
name|GroupNodeViewModel
argument_list|>
name|expected
init|=
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
name|expectedA
argument_list|,
name|expectedE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|groupViewModel
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|draggedOnTopOfGroupAddsBeforeIt ()
specifier|public
name|void
name|draggedOnTopOfGroupAddsBeforeIt
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupNodeViewModel
name|rootViewModel
init|=
name|getViewModelForGroup
argument_list|(
operator|new
name|WordKeywordGroup
argument_list|(
literal|"root"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupA
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"A"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupB
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"B"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> B"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupC
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"C"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> B> B1"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupAViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupA
argument_list|)
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupBViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupB
argument_list|)
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupCViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupC
argument_list|)
argument_list|)
decl_stmt|;
name|groupCViewModel
operator|.
name|draggedOn
argument_list|(
name|groupBViewModel
argument_list|,
name|DroppingMouseLocation
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|groupAViewModel
argument_list|,
name|groupCViewModel
argument_list|,
name|groupBViewModel
argument_list|)
argument_list|,
name|rootViewModel
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|draggedOnBottomOfGroupAddsAfterIt ()
specifier|public
name|void
name|draggedOnBottomOfGroupAddsAfterIt
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupNodeViewModel
name|rootViewModel
init|=
name|getViewModelForGroup
argument_list|(
operator|new
name|WordKeywordGroup
argument_list|(
literal|"root"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupA
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"A"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupB
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"B"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> B"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupC
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"C"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> B> B1"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupAViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupA
argument_list|)
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupBViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupB
argument_list|)
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupCViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupC
argument_list|)
argument_list|)
decl_stmt|;
name|groupCViewModel
operator|.
name|draggedOn
argument_list|(
name|groupAViewModel
argument_list|,
name|DroppingMouseLocation
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|groupAViewModel
argument_list|,
name|groupCViewModel
argument_list|,
name|groupBViewModel
argument_list|)
argument_list|,
name|rootViewModel
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|draggedOnBottomOfGroupAddsAfterItWhenSourceGroupWasBefore ()
specifier|public
name|void
name|draggedOnBottomOfGroupAddsAfterItWhenSourceGroupWasBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupNodeViewModel
name|rootViewModel
init|=
name|getViewModelForGroup
argument_list|(
operator|new
name|WordKeywordGroup
argument_list|(
literal|"root"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupA
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"A"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupB
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"B"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> B"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupC
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"C"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> B> B1"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupAViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupA
argument_list|)
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupBViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupB
argument_list|)
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupCViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupC
argument_list|)
argument_list|)
decl_stmt|;
name|groupAViewModel
operator|.
name|draggedOn
argument_list|(
name|groupBViewModel
argument_list|,
name|DroppingMouseLocation
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|groupBViewModel
argument_list|,
name|groupAViewModel
argument_list|,
name|groupCViewModel
argument_list|)
argument_list|,
name|rootViewModel
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|draggedOnTopOfGroupAddsBeforeItWhenSourceGroupWasBefore ()
specifier|public
name|void
name|draggedOnTopOfGroupAddsBeforeItWhenSourceGroupWasBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupNodeViewModel
name|rootViewModel
init|=
name|getViewModelForGroup
argument_list|(
operator|new
name|WordKeywordGroup
argument_list|(
literal|"root"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupA
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"A"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupB
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"B"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> B"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|WordKeywordGroup
name|groupC
init|=
operator|new
name|WordKeywordGroup
argument_list|(
literal|"C"
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|"keywords"
argument_list|,
literal|"A> B> B1"
argument_list|,
literal|true
argument_list|,
literal|','
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupAViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupA
argument_list|)
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupBViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupB
argument_list|)
argument_list|)
decl_stmt|;
name|GroupNodeViewModel
name|groupCViewModel
init|=
name|getViewModelForGroup
argument_list|(
name|rootViewModel
operator|.
name|addSubgroup
argument_list|(
name|groupC
argument_list|)
argument_list|)
decl_stmt|;
name|groupAViewModel
operator|.
name|draggedOn
argument_list|(
name|groupCViewModel
argument_list|,
name|DroppingMouseLocation
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|groupBViewModel
argument_list|,
name|groupAViewModel
argument_list|,
name|groupCViewModel
argument_list|)
argument_list|,
name|rootViewModel
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getViewModelForGroup (AbstractGroup group)
specifier|private
name|GroupNodeViewModel
name|getViewModelForGroup
parameter_list|(
name|AbstractGroup
name|group
parameter_list|)
block|{
return|return
operator|new
name|GroupNodeViewModel
argument_list|(
name|databaseContext
argument_list|,
name|stateManager
argument_list|,
name|taskExecutor
argument_list|,
name|group
argument_list|)
return|;
block|}
DECL|method|getViewModelForGroup (GroupTreeNode group)
specifier|private
name|GroupNodeViewModel
name|getViewModelForGroup
parameter_list|(
name|GroupTreeNode
name|group
parameter_list|)
block|{
return|return
operator|new
name|GroupNodeViewModel
argument_list|(
name|databaseContext
argument_list|,
name|stateManager
argument_list|,
name|taskExecutor
argument_list|,
name|group
argument_list|)
return|;
block|}
block|}
end_class

end_unit

