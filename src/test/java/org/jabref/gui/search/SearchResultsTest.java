begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.search
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|testutils
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|swing
operator|.
name|core
operator|.
name|ComponentFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|swing
operator|.
name|edt
operator|.
name|FailOnThreadViolationRepaintManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|swing
operator|.
name|finder
operator|.
name|WindowFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|swing
operator|.
name|fixture
operator|.
name|FrameFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|swing
operator|.
name|fixture
operator|.
name|JTextComponentFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|swing
operator|.
name|junit
operator|.
name|testcase
operator|.
name|AssertJSwingJUnitTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Tag
argument_list|(
literal|"GUITest"
argument_list|)
DECL|class|SearchResultsTest
specifier|public
class|class
name|SearchResultsTest
extends|extends
name|AssertJSwingJUnitTestCase
block|{
DECL|field|frameFixture
specifier|private
name|FrameFixture
name|frameFixture
decl_stmt|;
annotation|@
name|BeforeAll
DECL|method|before ()
specifier|public
specifier|static
name|void
name|before
parameter_list|()
block|{
name|FailOnThreadViolationRepaintManager
operator|.
name|uninstall
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSetUp ()
specifier|protected
name|void
name|onSetUp
parameter_list|()
block|{
name|TestUtils
operator|.
name|initJabRef
argument_list|()
expr_stmt|;
name|frameFixture
operator|=
name|WindowFinder
operator|.
name|findFrame
argument_list|(
name|JFrame
operator|.
name|class
argument_list|)
operator|.
name|withTimeout
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|using
argument_list|(
name|robot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTearDown ()
specifier|protected
name|void
name|onTearDown
parameter_list|()
block|{
name|frameFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|frameFixture
operator|=
literal|null
expr_stmt|;
name|TestUtils
operator|.
name|closeJabRef
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSearchFieldQuery ()
specifier|public
name|void
name|testSearchFieldQuery
parameter_list|()
block|{
name|frameFixture
operator|.
name|menuItemWithPath
argument_list|(
literal|"Search"
argument_list|,
literal|"Search"
argument_list|)
operator|.
name|click
argument_list|()
expr_stmt|;
name|JTextComponentFixture
name|searchField
init|=
name|frameFixture
operator|.
name|textBox
argument_list|()
decl_stmt|;
name|ComponentFinder
name|finder
init|=
name|robot
argument_list|()
operator|.
name|finder
argument_list|()
decl_stmt|;
comment|/*         BasePanel panel = finder.findByType(BasePanel.class);         Collection<BibEntry> entries = panel.getDatabase().getEntries();          searchField.deleteText().enterText("");         Assert.assertEquals(19, entries.size());          searchField.deleteText().enterText("entrytype=article");         Assert.assertFalse(entries.stream().noneMatch(entry -> entry.isSearchHit()));         Assert.assertEquals(5, entries.stream().filter(entry -> entry.isSearchHit()).count());          searchField.deleteText().enterText("entrytype=proceedings");         Assert.assertFalse(entries.stream().noneMatch(entry -> entry.isSearchHit()));         Assert.assertEquals(13, entries.stream().filter(entry -> entry.isSearchHit()).count());          searchField.deleteText().enterText("entrytype=book");         Assert.assertFalse(entries.stream().noneMatch(entry -> entry.isSearchHit()));         Assert.assertEquals(1, entries.stream().filter(entry -> entry.isSearchHit()).count());         */
block|}
annotation|@
name|Test
DECL|method|testSeachWithoutResults ()
specifier|public
name|void
name|testSeachWithoutResults
parameter_list|()
block|{
comment|/*         frameFixture.menuItemWithPath("Search", "Search").click();         JTextComponentFixture searchField = frameFixture.textBox();         ComponentFinder finder = robot().finder();         BasePanel panel = finder.findByType(BasePanel.class);         Collection<BibEntry> entries = panel.getDatabase().getEntries();          searchField.deleteText().enterText("asdf");         Assert.assertTrue(entries.stream().noneMatch(entry -> entry.isSearchHit()));         */
block|}
annotation|@
name|Test
DECL|method|testSearchInvalidQuery ()
specifier|public
name|void
name|testSearchInvalidQuery
parameter_list|()
block|{
comment|/*         frameFixture.menuItemWithPath("Search", "Search").click();         JTextComponentFixture searchField = frameFixture.textBox();         ComponentFinder finder = robot().finder();         BasePanel panel = finder.findByType(BasePanel.class);         Collection<BibEntry> entries = panel.getDatabase().getEntries();          searchField.deleteText().enterText("asdf[");         Assert.assertTrue(entries.stream().noneMatch(entry -> entry.isSearchHit()));         */
block|}
block|}
end_class

end_unit

