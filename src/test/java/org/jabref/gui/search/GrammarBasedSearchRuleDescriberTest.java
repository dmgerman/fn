begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.search
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|TextFlow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|search
operator|.
name|rules
operator|.
name|describer
operator|.
name|GrammarBasedSearchRuleDescriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TooltipTextUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|search
operator|.
name|rules
operator|.
name|GrammarBasedSearchRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|GrammarBasedSearchRuleDescriberTest
specifier|public
class|class
name|GrammarBasedSearchRuleDescriberTest
block|{
DECL|method|createDescription (String query, boolean caseSensitive, boolean regExp)
specifier|private
name|TextFlow
name|createDescription
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|,
name|boolean
name|regExp
parameter_list|)
block|{
name|GrammarBasedSearchRule
name|grammarBasedSearchRule
init|=
operator|new
name|GrammarBasedSearchRule
argument_list|(
name|caseSensitive
argument_list|,
name|regExp
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|grammarBasedSearchRule
operator|.
name|validateSearchStrings
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|GrammarBasedSearchRuleDescriber
name|describer
init|=
operator|new
name|GrammarBasedSearchRuleDescriber
argument_list|(
name|caseSensitive
argument_list|,
name|regExp
argument_list|,
name|grammarBasedSearchRule
operator|.
name|getTree
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|describer
operator|.
name|getDescription
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testSimpleQueryCaseSensitiveRegex ()
specifier|public
name|void
name|testSimpleQueryCaseSensitiveRegex
parameter_list|()
block|{
name|double
name|textSize
init|=
literal|13
decl_stmt|;
name|String
name|query
init|=
literal|"a=b"
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTexts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"This search contains entries in which "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"a"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the regular expression "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"b"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|". "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"The search is case sensitive."
argument_list|)
argument_list|)
decl_stmt|;
name|TextFlow
name|description
init|=
name|createDescription
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfDescriptionEqualsExpectedTexts
argument_list|(
name|description
argument_list|,
name|expectedTexts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleQueryCaseSensitive ()
specifier|public
name|void
name|testSimpleQueryCaseSensitive
parameter_list|()
block|{
name|double
name|textSize
init|=
literal|13
decl_stmt|;
name|String
name|query
init|=
literal|"a=b"
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTexts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"This search contains entries in which "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"a"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the term "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"b"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|". "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"The search is case sensitive."
argument_list|)
argument_list|)
decl_stmt|;
name|TextFlow
name|description
init|=
name|createDescription
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfDescriptionEqualsExpectedTexts
argument_list|(
name|description
argument_list|,
name|expectedTexts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleQuery ()
specifier|public
name|void
name|testSimpleQuery
parameter_list|()
block|{
name|double
name|textSize
init|=
literal|13
decl_stmt|;
name|String
name|query
init|=
literal|"a=b"
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTexts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"This search contains entries in which "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"a"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the term "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"b"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|". "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"The search is case insensitive."
argument_list|)
argument_list|)
decl_stmt|;
name|TextFlow
name|description
init|=
name|createDescription
argument_list|(
name|query
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfDescriptionEqualsExpectedTexts
argument_list|(
name|description
argument_list|,
name|expectedTexts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleQueryRegex ()
specifier|public
name|void
name|testSimpleQueryRegex
parameter_list|()
block|{
name|double
name|textSize
init|=
literal|13
decl_stmt|;
name|String
name|query
init|=
literal|"a=b"
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTexts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"This search contains entries in which "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"a"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the regular expression "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"b"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|". "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"The search is case insensitive."
argument_list|)
argument_list|)
decl_stmt|;
name|TextFlow
name|description
init|=
name|createDescription
argument_list|(
name|query
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfDescriptionEqualsExpectedTexts
argument_list|(
name|description
argument_list|,
name|expectedTexts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComplexQueryCaseSensitiveRegex ()
specifier|public
name|void
name|testComplexQueryCaseSensitiveRegex
parameter_list|()
block|{
name|double
name|textSize
init|=
literal|13
decl_stmt|;
name|String
name|query
init|=
literal|"not a=b and c=e or e=\"x\""
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTexts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"This search contains entries in which "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"not "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"a"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the regular expression "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"b"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" and "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"c"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the regular expression "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"e"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" or "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"e"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the regular expression "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"x"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|". "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"The search is case sensitive."
argument_list|)
argument_list|)
decl_stmt|;
name|TextFlow
name|description
init|=
name|createDescription
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfDescriptionEqualsExpectedTexts
argument_list|(
name|description
argument_list|,
name|expectedTexts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComplexQueryRegex ()
specifier|public
name|void
name|testComplexQueryRegex
parameter_list|()
block|{
name|double
name|textSize
init|=
literal|13
decl_stmt|;
name|String
name|query
init|=
literal|"not a=b and c=e or e=\"x\""
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTexts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"This search contains entries in which "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"not "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"a"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the regular expression "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"b"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" and "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"c"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the regular expression "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"e"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" or "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"e"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the regular expression "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"x"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|". "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"The search is case insensitive."
argument_list|)
argument_list|)
decl_stmt|;
name|TextFlow
name|description
init|=
name|createDescription
argument_list|(
name|query
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfDescriptionEqualsExpectedTexts
argument_list|(
name|description
argument_list|,
name|expectedTexts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComplexQueryCaseSensitive ()
specifier|public
name|void
name|testComplexQueryCaseSensitive
parameter_list|()
block|{
name|double
name|textSize
init|=
literal|13
decl_stmt|;
name|String
name|query
init|=
literal|"not a=b and c=e or e=\"x\""
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTexts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"This search contains entries in which "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"not "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"a"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the term "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"b"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" and "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"c"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the term "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"e"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" or "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"e"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the term "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"x"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|". "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"The search is case sensitive."
argument_list|)
argument_list|)
decl_stmt|;
name|TextFlow
name|description
init|=
name|createDescription
argument_list|(
name|query
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfDescriptionEqualsExpectedTexts
argument_list|(
name|description
argument_list|,
name|expectedTexts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComplexQuery ()
specifier|public
name|void
name|testComplexQuery
parameter_list|()
block|{
name|double
name|textSize
init|=
literal|13
decl_stmt|;
name|String
name|query
init|=
literal|"not a=b and c=e or e=\"x\""
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTexts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"This search contains entries in which "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"not "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"a"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the term "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"b"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" and "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"c"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the term "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"e"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" or "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"the field "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"e"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" contains the term "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"x"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|". "
argument_list|)
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"The search is case insensitive."
argument_list|)
argument_list|)
decl_stmt|;
name|TextFlow
name|description
init|=
name|createDescription
argument_list|(
name|query
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfDescriptionEqualsExpectedTexts
argument_list|(
name|description
argument_list|,
name|expectedTexts
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

