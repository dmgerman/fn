begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.fieldeditors
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Alert
operator|.
name|AlertType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|StandardExternalFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BackgroundTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|CurrentThreadTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|URLDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FilePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|io
operator|.
name|TempDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Answers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyZeroInteractions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|LinkedFileViewModelTest
class|class
name|LinkedFileViewModelTest
block|{
DECL|field|tempFile
specifier|private
name|Path
name|tempFile
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|JabRefPreferences
name|preferences
init|=
name|mock
argument_list|(
name|JabRefPreferences
operator|.
name|class
argument_list|,
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
DECL|field|linkedFile
specifier|private
name|LinkedFile
name|linkedFile
decl_stmt|;
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
DECL|field|databaseContext
specifier|private
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|taskExecutor
specifier|private
name|TaskExecutor
name|taskExecutor
decl_stmt|;
DECL|field|dialogService
specifier|private
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|externalFileType
specifier|private
name|ExternalFileTypes
name|externalFileType
init|=
name|mock
argument_list|(
name|ExternalFileTypes
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|filePreferences
specifier|private
name|FilePreferences
name|filePreferences
init|=
name|mock
argument_list|(
name|FilePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp (@empDir Path tempFolder)
name|void
name|setUp
parameter_list|(
annotation|@
name|TempDir
name|Path
name|tempFolder
parameter_list|)
throws|throws
name|Exception
block|{
name|entry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|databaseContext
operator|=
operator|new
name|BibDatabaseContext
argument_list|()
expr_stmt|;
name|taskExecutor
operator|=
name|mock
argument_list|(
name|TaskExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|dialogService
operator|=
name|mock
argument_list|(
name|DialogService
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|externalFileType
operator|.
name|getExternalFileTypeSelection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|ExternalFileTypes
operator|.
name|getDefaultExternalFileTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|externalFileType
operator|.
name|getExternalFileTypeByMimeType
argument_list|(
literal|"application/pdf"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|StandardExternalFileType
operator|.
name|PDF
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|externalFileType
operator|.
name|getExternalFileTypeByExt
argument_list|(
literal|"pdf"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|StandardExternalFileType
operator|.
name|PDF
argument_list|)
argument_list|)
expr_stmt|;
name|tempFile
operator|=
name|tempFolder
operator|.
name|resolve
argument_list|(
literal|"temporaryFile"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteWhenFilePathNotPresentReturnsTrue ()
name|void
name|deleteWhenFilePathNotPresentReturnsTrue
parameter_list|()
block|{
comment|// Making this a spy, so we can inject an empty optional without digging into the implementation
name|linkedFile
operator|=
name|spy
argument_list|(
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|"nonexistent file"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|linkedFile
argument_list|)
operator|.
name|findIn
argument_list|(
name|any
argument_list|(
name|BibDatabaseContext
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|FilePreferences
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|LinkedFileViewModel
name|viewModel
init|=
operator|new
name|LinkedFileViewModel
argument_list|(
name|linkedFile
argument_list|,
name|entry
argument_list|,
name|databaseContext
argument_list|,
name|taskExecutor
argument_list|,
name|dialogService
argument_list|,
name|preferences
argument_list|,
name|externalFileType
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
name|viewModel
operator|.
name|delete
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|removed
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|dialogService
argument_list|)
expr_stmt|;
comment|// dialog was never shown
block|}
annotation|@
name|Test
DECL|method|deleteWhenRemoveChosenReturnsTrueButDoesNotDeletesFile ()
name|void
name|deleteWhenRemoveChosenReturnsTrueButDoesNotDeletesFile
parameter_list|()
block|{
name|linkedFile
operator|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|tempFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dialogService
operator|.
name|showCustomButtonDialogAndWait
argument_list|(
name|any
argument_list|(
name|AlertType
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|Optional
operator|.
name|of
argument_list|(
name|invocation
operator|.
name|getArgument
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// first vararg - remove button
name|LinkedFileViewModel
name|viewModel
init|=
operator|new
name|LinkedFileViewModel
argument_list|(
name|linkedFile
argument_list|,
name|entry
argument_list|,
name|databaseContext
argument_list|,
name|taskExecutor
argument_list|,
name|dialogService
argument_list|,
name|preferences
argument_list|,
name|externalFileType
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
name|viewModel
operator|.
name|delete
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|removed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tempFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteWhenDeleteChosenReturnsTrueAndDeletesFile ()
name|void
name|deleteWhenDeleteChosenReturnsTrueAndDeletesFile
parameter_list|()
block|{
name|linkedFile
operator|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|tempFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dialogService
operator|.
name|showCustomButtonDialogAndWait
argument_list|(
name|any
argument_list|(
name|AlertType
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|Optional
operator|.
name|of
argument_list|(
name|invocation
operator|.
name|getArgument
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// second vararg - delete button
name|LinkedFileViewModel
name|viewModel
init|=
operator|new
name|LinkedFileViewModel
argument_list|(
name|linkedFile
argument_list|,
name|entry
argument_list|,
name|databaseContext
argument_list|,
name|taskExecutor
argument_list|,
name|dialogService
argument_list|,
name|preferences
argument_list|,
name|externalFileType
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
name|viewModel
operator|.
name|delete
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|removed
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tempFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteMissingFileReturnsTrue ()
name|void
name|deleteMissingFileReturnsTrue
parameter_list|()
block|{
name|linkedFile
operator|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|"!!nonexistent file!!"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dialogService
operator|.
name|showCustomButtonDialogAndWait
argument_list|(
name|any
argument_list|(
name|AlertType
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|Optional
operator|.
name|of
argument_list|(
name|invocation
operator|.
name|getArgument
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// second vararg - delete button
name|LinkedFileViewModel
name|viewModel
init|=
operator|new
name|LinkedFileViewModel
argument_list|(
name|linkedFile
argument_list|,
name|entry
argument_list|,
name|databaseContext
argument_list|,
name|taskExecutor
argument_list|,
name|dialogService
argument_list|,
name|preferences
argument_list|,
name|externalFileType
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
name|viewModel
operator|.
name|delete
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|removed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteWhenDialogCancelledReturnsFalseAndDoesNotRemoveFile ()
name|void
name|deleteWhenDialogCancelledReturnsFalseAndDoesNotRemoveFile
parameter_list|()
block|{
name|linkedFile
operator|=
operator|new
name|LinkedFile
argument_list|(
literal|"desc"
argument_list|,
name|tempFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|"pdf"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dialogService
operator|.
name|showCustomButtonDialogAndWait
argument_list|(
name|any
argument_list|(
name|AlertType
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ButtonType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|Optional
operator|.
name|of
argument_list|(
name|invocation
operator|.
name|getArgument
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// third vararg - cancel button
name|LinkedFileViewModel
name|viewModel
init|=
operator|new
name|LinkedFileViewModel
argument_list|(
name|linkedFile
argument_list|,
name|entry
argument_list|,
name|databaseContext
argument_list|,
name|taskExecutor
argument_list|,
name|dialogService
argument_list|,
name|preferences
argument_list|,
name|externalFileType
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
name|viewModel
operator|.
name|delete
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|removed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tempFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|downloadDoesNotOverwriteFileTypeExtension ()
name|void
name|downloadDoesNotOverwriteFileTypeExtension
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|linkedFile
operator|=
operator|new
name|LinkedFile
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://arxiv.org/pdf/1207.0408v1"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|databaseContext
operator|=
name|mock
argument_list|(
name|BibDatabaseContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|filePreferences
operator|.
name|getFileNamePattern
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"[bibtexkey]"
argument_list|)
expr_stmt|;
comment|//use this variant, as we cannot mock the linkedFileHandler cause it's initialized inside the viewModel
name|when
argument_list|(
name|preferences
operator|.
name|getFilePreferences
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|filePreferences
argument_list|)
expr_stmt|;
name|LinkedFileViewModel
name|viewModel
init|=
operator|new
name|LinkedFileViewModel
argument_list|(
name|linkedFile
argument_list|,
name|entry
argument_list|,
name|databaseContext
argument_list|,
operator|new
name|CurrentThreadTaskExecutor
argument_list|()
argument_list|,
name|dialogService
argument_list|,
name|preferences
argument_list|,
name|externalFileType
argument_list|)
decl_stmt|;
name|BackgroundTask
argument_list|<
name|Path
argument_list|>
name|task
init|=
name|viewModel
operator|.
name|prepareDownloadTask
argument_list|(
name|tempFile
operator|.
name|getParent
argument_list|()
argument_list|,
operator|new
name|URLDownload
argument_list|(
literal|"http://arxiv.org/pdf/1207.0408v1"
argument_list|)
argument_list|)
decl_stmt|;
name|task
operator|.
name|onSuccess
argument_list|(
name|destination
lambda|->
block|{
name|LinkedFile
name|newLinkedFile
init|=
name|LinkedFilesEditorViewModel
operator|.
name|fromFile
argument_list|(
name|destination
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|tempFile
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|,
name|externalFileType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"asdf.PDF"
argument_list|,
name|newLinkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PDF"
argument_list|,
name|newLinkedFile
operator|.
name|getFileType
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|task
operator|.
name|onFailure
argument_list|(
name|Assertions
operator|::
name|fail
argument_list|)
expr_stmt|;
operator|new
name|CurrentThreadTaskExecutor
argument_list|()
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

