begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.autocompleter
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|Author
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|AutoCompleterUtil
operator|.
name|getRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_class
DECL|class|PersonNameSuggestionProviderTest
specifier|public
class|class
name|PersonNameSuggestionProviderTest
block|{
DECL|field|vassilisKostakos
specifier|private
specifier|static
specifier|final
name|Author
name|vassilisKostakos
init|=
operator|new
name|Author
argument_list|(
literal|"Vassilis"
argument_list|,
literal|"V."
argument_list|,
literal|""
argument_list|,
literal|"Kostakos"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
DECL|field|autoCompleter
specifier|private
name|PersonNameSuggestionProvider
name|autoCompleter
decl_stmt|;
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
DECL|method|initAutoCompleterWithNullFieldThrowsException ()
specifier|public
name|void
name|initAutoCompleterWithNullFieldThrowsException
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|PersonNameSuggestionProvider
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|autoCompleter
operator|=
operator|new
name|PersonNameSuggestionProvider
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Vassilis Kostakos"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeWithoutAddingAnythingReturnsNothing ()
specifier|public
name|void
name|completeWithoutAddingAnythingReturnsNothing
parameter_list|()
block|{
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"test"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeAfterAddingNullReturnsNothing ()
specifier|public
name|void
name|completeAfterAddingNullReturnsNothing
parameter_list|()
block|{
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"test"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeAfterAddingEmptyEntryReturnsNothing ()
specifier|public
name|void
name|completeAfterAddingEmptyEntryReturnsNothing
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"test"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeAfterAddingEntryWithoutFieldReturnsNothing ()
specifier|public
name|void
name|completeAfterAddingEntryWithoutFieldReturnsNothing
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"testTitle"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"test"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeNameReturnsName ()
specifier|public
name|void
name|completeNameReturnsName
parameter_list|()
block|{
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"Kostakos"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|vassilisKostakos
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfNameReturnsName ()
specifier|public
name|void
name|completeBeginningOfNameReturnsName
parameter_list|()
block|{
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"Kosta"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|vassilisKostakos
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeLowercaseBeginningOfNameReturnsName ()
specifier|public
name|void
name|completeLowercaseBeginningOfNameReturnsName
parameter_list|()
block|{
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"kosta"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|vassilisKostakos
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|completeNullThrowsException ()
specifier|public
name|void
name|completeNullThrowsException
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|null
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeEmptyStringReturnsNothing ()
specifier|public
name|void
name|completeEmptyStringReturnsNothing
parameter_list|()
block|{
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|""
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeReturnsMultipleResults ()
specifier|public
name|void
name|completeReturnsMultipleResults
parameter_list|()
block|{
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|BibEntry
name|entryTwo
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entryTwo
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Kosta"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entryTwo
argument_list|)
expr_stmt|;
name|Author
name|authorTwo
init|=
operator|new
name|Author
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|"Kosta"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"Ko"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|authorTwo
argument_list|,
name|vassilisKostakos
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completePartOfNameReturnsName ()
specifier|public
name|void
name|completePartOfNameReturnsName
parameter_list|()
block|{
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"osta"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|vassilisKostakos
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfFirstNameReturnsName ()
specifier|public
name|void
name|completeBeginningOfFirstNameReturnsName
parameter_list|()
block|{
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"Vas"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|vassilisKostakos
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfFirstNameReturnsNameWithJr ()
specifier|public
name|void
name|completeBeginningOfFirstNameReturnsNameWithJr
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Reagle, Jr., Joseph M."
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Author
name|author
init|=
operator|new
name|Author
argument_list|(
literal|"Joseph M."
argument_list|,
literal|"J. M."
argument_list|,
literal|""
argument_list|,
literal|"Reagle"
argument_list|,
literal|"Jr."
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"Jos"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|author
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfFirstNameReturnsNameWithVon ()
specifier|public
name|void
name|completeBeginningOfFirstNameReturnsNameWithVon
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Eric von Hippel"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Author
name|author
init|=
operator|new
name|Author
argument_list|(
literal|"Eric"
argument_list|,
literal|"E."
argument_list|,
literal|"von"
argument_list|,
literal|"Hippel"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"Eric"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|author
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfLastNameReturnsNameWithUmlauts ()
specifier|public
name|void
name|completeBeginningOfLastNameReturnsNameWithUmlauts
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Honig BÃ¤r"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Author
name|author
init|=
operator|new
name|Author
argument_list|(
literal|"Honig"
argument_list|,
literal|"H."
argument_list|,
literal|""
argument_list|,
literal|"BÃ¤r"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"BÃ¤"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|author
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeVonReturnsName ()
specifier|public
name|void
name|completeVonReturnsName
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Eric von Hippel"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Author
name|author
init|=
operator|new
name|Author
argument_list|(
literal|"Eric"
argument_list|,
literal|"E."
argument_list|,
literal|"von"
argument_list|,
literal|"Hippel"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"von"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|author
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|completeBeginningOfFullNameReturnsName ()
specifier|public
name|void
name|completeBeginningOfFullNameReturnsName
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"field"
argument_list|,
literal|"Vassilis Kostakos"
argument_list|)
expr_stmt|;
name|autoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Author
argument_list|>
name|result
init|=
name|autoCompleter
operator|.
name|call
argument_list|(
name|getRequest
argument_list|(
operator|(
literal|"Kostakos, Va"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|vassilisKostakos
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

