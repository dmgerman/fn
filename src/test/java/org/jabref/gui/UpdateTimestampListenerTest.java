begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|preferences
operator|.
name|TimestampPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|UpdateTimestampListenerTest
class|class
name|UpdateTimestampListenerTest
block|{
DECL|field|database
specifier|private
name|BibDatabase
name|database
decl_stmt|;
DECL|field|bibEntry
specifier|private
name|BibEntry
name|bibEntry
decl_stmt|;
DECL|field|preferencesMock
specifier|private
name|JabRefPreferences
name|preferencesMock
decl_stmt|;
DECL|field|timestampPreferencesMock
specifier|private
name|TimestampPreferences
name|timestampPreferencesMock
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
block|{
name|database
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
name|bibEntry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|database
operator|.
name|insertEntries
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
name|preferencesMock
operator|=
name|mock
argument_list|(
name|JabRefPreferences
operator|.
name|class
argument_list|)
expr_stmt|;
name|timestampPreferencesMock
operator|=
name|mock
argument_list|(
name|TimestampPreferences
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|preferencesMock
operator|.
name|getTimestampPreferences
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|timestampPreferencesMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateTimestampEnabled ()
name|void
name|updateTimestampEnabled
parameter_list|()
block|{
specifier|final
name|String
name|timestampField
init|=
literal|"timestamp"
decl_stmt|;
specifier|final
name|String
name|baseDate
init|=
literal|"2000-1-1"
decl_stmt|;
specifier|final
name|String
name|newDate
init|=
literal|"2000-1-2"
decl_stmt|;
specifier|final
name|boolean
name|includeTimestamp
init|=
literal|true
decl_stmt|;
name|when
argument_list|(
name|timestampPreferencesMock
operator|.
name|getTimestampField
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|timestampField
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timestampPreferencesMock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newDate
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timestampPreferencesMock
operator|.
name|includeTimestamps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|includeTimestamp
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|setField
argument_list|(
name|timestampField
argument_list|,
name|baseDate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|baseDate
argument_list|)
argument_list|,
name|bibEntry
operator|.
name|getField
argument_list|(
name|timestampField
argument_list|)
argument_list|,
literal|"Initial timestamp not set correctly"
argument_list|)
expr_stmt|;
name|database
operator|.
name|registerListener
argument_list|(
operator|new
name|UpdateTimestampListener
argument_list|(
name|preferencesMock
argument_list|)
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|setField
argument_list|(
literal|"test"
argument_list|,
literal|"some value"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|newDate
argument_list|)
argument_list|,
name|bibEntry
operator|.
name|getField
argument_list|(
name|timestampField
argument_list|)
argument_list|,
literal|"Timestamp not set correctly after entry changed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateTimestampDisabled ()
name|void
name|updateTimestampDisabled
parameter_list|()
block|{
specifier|final
name|String
name|timestampField
init|=
literal|"timestamp"
decl_stmt|;
specifier|final
name|String
name|baseDate
init|=
literal|"2000-1-1"
decl_stmt|;
specifier|final
name|String
name|newDate
init|=
literal|"2000-1-2"
decl_stmt|;
specifier|final
name|boolean
name|includeTimestamp
init|=
literal|false
decl_stmt|;
name|when
argument_list|(
name|timestampPreferencesMock
operator|.
name|getTimestampField
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|timestampField
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timestampPreferencesMock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newDate
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timestampPreferencesMock
operator|.
name|includeTimestamps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|includeTimestamp
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|setField
argument_list|(
name|timestampField
argument_list|,
name|baseDate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|baseDate
argument_list|)
argument_list|,
name|bibEntry
operator|.
name|getField
argument_list|(
name|timestampField
argument_list|)
argument_list|,
literal|"Initial timestamp not set correctly"
argument_list|)
expr_stmt|;
name|database
operator|.
name|registerListener
argument_list|(
operator|new
name|UpdateTimestampListener
argument_list|(
name|preferencesMock
argument_list|)
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|setField
argument_list|(
literal|"test"
argument_list|,
literal|"some value"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|baseDate
argument_list|)
argument_list|,
name|bibEntry
operator|.
name|getField
argument_list|(
name|timestampField
argument_list|)
argument_list|,
literal|"New timestamp set after entry changed even though updates were disabled"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

