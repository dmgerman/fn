begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|TreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|TreeNodeTestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|RecursiveTreeItemTest
class|class
name|RecursiveTreeItemTest
block|{
DECL|field|rootTreeItem
specifier|private
name|RecursiveTreeItem
argument_list|<
name|TreeNodeTestData
operator|.
name|TreeNodeMock
argument_list|>
name|rootTreeItem
decl_stmt|;
DECL|field|root
specifier|private
name|TreeNodeTestData
operator|.
name|TreeNodeMock
name|root
decl_stmt|;
DECL|field|filterPredicate
specifier|private
name|ObjectProperty
argument_list|<
name|Predicate
argument_list|<
name|TreeNodeTestData
operator|.
name|TreeNodeMock
argument_list|>
argument_list|>
name|filterPredicate
decl_stmt|;
DECL|field|node
specifier|private
name|TreeNodeTestData
operator|.
name|TreeNodeMock
name|node
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|=
operator|new
name|TreeNodeTestData
operator|.
name|TreeNodeMock
argument_list|()
expr_stmt|;
name|node
operator|=
name|TreeNodeTestData
operator|.
name|getNodeInSimpleTree
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|node
operator|.
name|setName
argument_list|(
literal|"test node"
argument_list|)
expr_stmt|;
name|filterPredicate
operator|=
operator|new
name|SimpleObjectProperty
argument_list|<>
argument_list|()
expr_stmt|;
name|rootTreeItem
operator|=
operator|new
name|RecursiveTreeItem
argument_list|<>
argument_list|(
name|root
argument_list|,
name|TreeNode
operator|::
name|getChildren
argument_list|,
name|filterPredicate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addsAllChildrenNodes ()
name|void
name|addsAllChildrenNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
argument_list|,
name|rootTreeItem
operator|.
name|getChildren
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|TreeItem
operator|::
name|getValue
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addsAllChildrenOfChildNode ()
name|void
name|addsAllChildrenOfChildNode
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|root
operator|.
name|getChildAt
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getChildren
argument_list|()
argument_list|,
name|rootTreeItem
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|TreeItem
operator|::
name|getValue
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|respectsFilter ()
name|void
name|respectsFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|filterPredicate
operator|.
name|setValue
argument_list|(
name|item
lambda|->
name|item
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|node
operator|.
name|getParent
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|rootTreeItem
operator|.
name|getChildren
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|TreeItem
operator|::
name|getValue
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|node
argument_list|)
argument_list|,
name|rootTreeItem
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|TreeItem
operator|::
name|getValue
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

