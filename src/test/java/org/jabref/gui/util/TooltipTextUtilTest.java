begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|search
operator|.
name|TextFlowEqualityHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TooltipTextUtilTest
specifier|public
class|class
name|TooltipTextUtilTest
block|{
annotation|@
name|Test
DECL|method|testCreateText ()
specifier|public
name|void
name|testCreateText
parameter_list|()
block|{
name|String
name|testText
init|=
literal|"this is a test text"
decl_stmt|;
name|Text
name|text
init|=
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|testText
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|NORMAL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Regular"
argument_list|,
name|text
operator|.
name|getFont
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testText
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateTextBold ()
specifier|public
name|void
name|testCreateTextBold
parameter_list|()
block|{
name|String
name|testText
init|=
literal|"this is a test text"
decl_stmt|;
name|Text
name|text
init|=
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|testText
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tooltip-text-bold"
argument_list|,
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testText
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateTextItalic ()
specifier|public
name|void
name|testCreateTextItalic
parameter_list|()
block|{
name|String
name|testText
init|=
literal|"this is a test text"
decl_stmt|;
name|Text
name|text
init|=
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|testText
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|ITALIC
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tooltip-text-italic"
argument_list|,
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testText
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateTextMonospaced ()
specifier|public
name|void
name|testCreateTextMonospaced
parameter_list|()
block|{
name|String
name|testText
init|=
literal|"this is a test text"
decl_stmt|;
name|Text
name|text
init|=
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|testText
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|MONOSPACED
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tooltip-text-monospaced"
argument_list|,
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testText
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTextToHTMLStringBold ()
specifier|public
name|void
name|testTextToHTMLStringBold
parameter_list|()
block|{
name|String
name|testText
init|=
literal|"this is a test text"
decl_stmt|;
name|Text
name|text
init|=
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|testText
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
decl_stmt|;
name|String
name|htmlString
init|=
name|TooltipTextUtil
operator|.
name|textToHTMLString
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<b>"
operator|+
name|testText
operator|+
literal|"</b>"
argument_list|,
name|htmlString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTextToHTMLStringItalic ()
specifier|public
name|void
name|testTextToHTMLStringItalic
parameter_list|()
block|{
name|String
name|testText
init|=
literal|"this is a test text"
decl_stmt|;
name|Text
name|text
init|=
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|testText
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|ITALIC
argument_list|)
decl_stmt|;
name|String
name|htmlString
init|=
name|TooltipTextUtil
operator|.
name|textToHTMLString
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<i>"
operator|+
name|testText
operator|+
literal|"</i>"
argument_list|,
name|htmlString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTextToHTMLStringMonospaced ()
specifier|public
name|void
name|testTextToHTMLStringMonospaced
parameter_list|()
block|{
name|String
name|testText
init|=
literal|"this is a test text"
decl_stmt|;
name|Text
name|text
init|=
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|testText
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|MONOSPACED
argument_list|)
decl_stmt|;
name|String
name|htmlString
init|=
name|TooltipTextUtil
operator|.
name|textToHTMLString
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<kbd>"
operator|+
name|testText
operator|+
literal|"</kbd>"
argument_list|,
name|htmlString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTextToHTMLStringMonospacedBold ()
specifier|public
name|void
name|testTextToHTMLStringMonospacedBold
parameter_list|()
block|{
name|String
name|testText
init|=
literal|"this is a test text"
decl_stmt|;
name|Text
name|text
init|=
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|testText
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|MONOSPACED
argument_list|)
decl_stmt|;
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"tooltip-text-bold"
argument_list|)
expr_stmt|;
name|String
name|htmlString
init|=
name|TooltipTextUtil
operator|.
name|textToHTMLString
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<b><kbd>"
operator|+
name|testText
operator|+
literal|"</kbd></b>"
argument_list|,
name|htmlString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTextToHTMLStringWithLinebreaks ()
specifier|public
name|void
name|testTextToHTMLStringWithLinebreaks
parameter_list|()
block|{
name|String
name|testText
init|=
literal|"this\nis a\ntest text"
decl_stmt|;
name|Text
name|text
init|=
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|testText
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|NORMAL
argument_list|)
decl_stmt|;
name|String
name|htmlString
init|=
name|TooltipTextUtil
operator|.
name|textToHTMLString
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"this<br>is a<br>test text"
argument_list|,
name|htmlString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormatToTextsNoReplacements ()
specifier|public
name|void
name|testFormatToTextsNoReplacements
parameter_list|()
block|{
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTextList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedTextList
operator|.
name|add
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"This search contains entries in which any field contains the regular expression "
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"This search contains entries in which any field contains the regular expression "
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|textList
init|=
name|TooltipTextUtil
operator|.
name|formatToTexts
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfTextsEqualsExpectedTexts
argument_list|(
name|expectedTextList
argument_list|,
name|textList
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormatToTextsEnd ()
specifier|public
name|void
name|testFormatToTextsEnd
parameter_list|()
block|{
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTextList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedTextList
operator|.
name|add
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"This search contains entries in which any field contains the regular expression "
argument_list|)
argument_list|)
expr_stmt|;
name|expectedTextList
operator|.
name|add
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"replacing text"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"This search contains entries in which any field contains the regular expression<b>%0</b>"
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|textList
init|=
name|TooltipTextUtil
operator|.
name|formatToTexts
argument_list|(
name|test
argument_list|,
operator|new
name|TooltipTextUtil
operator|.
name|TextReplacement
argument_list|(
literal|"<b>%0</b>"
argument_list|,
literal|"replacing text"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfTextsEqualsExpectedTexts
argument_list|(
name|expectedTextList
argument_list|,
name|textList
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormatToTextsBegin ()
specifier|public
name|void
name|testFormatToTextsBegin
parameter_list|()
block|{
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTextList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedTextList
operator|.
name|add
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"replacing text"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|)
expr_stmt|;
name|expectedTextList
operator|.
name|add
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" This search contains entries in which any field contains the regular expression"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"<b>%0</b> This search contains entries in which any field contains the regular expression"
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|textList
init|=
name|TooltipTextUtil
operator|.
name|formatToTexts
argument_list|(
name|test
argument_list|,
operator|new
name|TooltipTextUtil
operator|.
name|TextReplacement
argument_list|(
literal|"<b>%0</b>"
argument_list|,
literal|"replacing text"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfTextsEqualsExpectedTexts
argument_list|(
name|expectedTextList
argument_list|,
name|textList
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormatToTextsMiddle ()
specifier|public
name|void
name|testFormatToTextsMiddle
parameter_list|()
block|{
name|List
argument_list|<
name|Text
argument_list|>
name|expectedTextList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedTextList
operator|.
name|add
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"This search contains entries "
argument_list|)
argument_list|)
expr_stmt|;
name|expectedTextList
operator|.
name|add
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|"replacing text"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|)
expr_stmt|;
name|expectedTextList
operator|.
name|add
argument_list|(
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
literal|" in which any field contains the regular expression"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"This search contains entries<b>%0</b> in which any field contains the regular expression"
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|textList
init|=
name|TooltipTextUtil
operator|.
name|formatToTexts
argument_list|(
name|test
argument_list|,
operator|new
name|TooltipTextUtil
operator|.
name|TextReplacement
argument_list|(
literal|"<b>%0</b>"
argument_list|,
literal|"replacing text"
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|BOLD
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TextFlowEqualityHelper
operator|.
name|checkIfTextsEqualsExpectedTexts
argument_list|(
name|expectedTextList
argument_list|,
name|textList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

