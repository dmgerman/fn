begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.keyboard
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|InputEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|KeyCode
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|KeyCombination
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|PreferencesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assumptions
operator|.
name|assumeFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_comment
comment|/**  * Test class for the keybindings dialog view model  */
end_comment

begin_class
DECL|class|KeyBindingsDialogViewModelTest
specifier|public
class|class
name|KeyBindingsDialogViewModelTest
block|{
DECL|field|model
specifier|private
name|KeyBindingsDialogViewModel
name|model
decl_stmt|;
DECL|field|keyBindingRepository
specifier|private
name|KeyBindingRepository
name|keyBindingRepository
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|keyBindingRepository
operator|=
operator|new
name|KeyBindingRepository
argument_list|()
expr_stmt|;
name|model
operator|=
operator|new
name|KeyBindingsDialogViewModel
argument_list|(
name|keyBindingRepository
argument_list|,
name|mock
argument_list|(
name|DialogService
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PreferencesService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidKeyBindingIsNotSaved ()
specifier|public
name|void
name|testInvalidKeyBindingIsNotSaved
parameter_list|()
block|{
name|setKeyBindingViewModel
argument_list|(
name|KeyBinding
operator|.
name|COPY
argument_list|)
expr_stmt|;
name|KeyEvent
name|shortcutKeyEvent
init|=
operator|new
name|KeyEvent
argument_list|(
name|KeyEvent
operator|.
name|KEY_RELEASED
argument_list|,
literal|"Q"
argument_list|,
literal|"Q"
argument_list|,
name|KeyCode
operator|.
name|Q
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|COPY
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setNewBindingForCurrent
argument_list|(
name|shortcutKeyEvent
argument_list|)
expr_stmt|;
name|KeyCombination
name|combination
init|=
name|KeyCombination
operator|.
name|keyCombination
argument_list|(
name|keyBindingRepository
operator|.
name|get
argument_list|(
name|KeyBinding
operator|.
name|COPY
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|combination
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|saveKeyBindings
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|COPY
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecialKeysValidKeyBindingIsSaved ()
specifier|public
name|void
name|testSpecialKeysValidKeyBindingIsSaved
parameter_list|()
block|{
name|setKeyBindingViewModel
argument_list|(
name|KeyBinding
operator|.
name|IMPORT_INTO_NEW_DATABASE
argument_list|)
expr_stmt|;
name|KeyEvent
name|shortcutKeyEvent
init|=
operator|new
name|KeyEvent
argument_list|(
name|KeyEvent
operator|.
name|KEY_RELEASED
argument_list|,
literal|"F1"
argument_list|,
literal|"F1"
argument_list|,
name|KeyCode
operator|.
name|F1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|IMPORT_INTO_NEW_DATABASE
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setNewBindingForCurrent
argument_list|(
name|shortcutKeyEvent
argument_list|)
expr_stmt|;
name|KeyCombination
name|combination
init|=
name|KeyCombination
operator|.
name|keyCombination
argument_list|(
name|keyBindingRepository
operator|.
name|get
argument_list|(
name|KeyBinding
operator|.
name|IMPORT_INTO_NEW_DATABASE
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|combination
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|saveKeyBindings
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|IMPORT_INTO_NEW_DATABASE
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyBindingCategory ()
specifier|public
name|void
name|testKeyBindingCategory
parameter_list|()
block|{
name|KeyBindingViewModel
name|bindViewModel
init|=
operator|new
name|KeyBindingViewModel
argument_list|(
name|keyBindingRepository
argument_list|,
name|KeyBindingCategory
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|model
operator|.
name|selectedKeyBindingProperty
argument_list|()
operator|.
name|set
argument_list|(
name|bindViewModel
argument_list|)
expr_stmt|;
name|KeyEvent
name|shortcutKeyEvent
init|=
operator|new
name|KeyEvent
argument_list|(
name|KeyEvent
operator|.
name|KEY_PRESSED
argument_list|,
literal|"M"
argument_list|,
literal|"M"
argument_list|,
name|KeyCode
operator|.
name|M
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|CLEANUP
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setNewBindingForCurrent
argument_list|(
name|shortcutKeyEvent
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|model
operator|.
name|selectedKeyBindingProperty
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getKeyBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomNewKeyKeyBindingInRepository ()
specifier|public
name|void
name|testRandomNewKeyKeyBindingInRepository
parameter_list|()
block|{
name|setKeyBindingViewModel
argument_list|(
name|KeyBinding
operator|.
name|CLEANUP
argument_list|)
expr_stmt|;
name|KeyEvent
name|shortcutKeyEvent
init|=
operator|new
name|KeyEvent
argument_list|(
name|KeyEvent
operator|.
name|KEY_PRESSED
argument_list|,
literal|"K"
argument_list|,
literal|"K"
argument_list|,
name|KeyCode
operator|.
name|K
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|CLEANUP
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setNewBindingForCurrent
argument_list|(
name|shortcutKeyEvent
argument_list|)
expr_stmt|;
name|KeyCombination
name|combination
init|=
name|KeyCombination
operator|.
name|keyCombination
argument_list|(
name|keyBindingRepository
operator|.
name|get
argument_list|(
name|KeyBinding
operator|.
name|CLEANUP
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|combination
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyCombination
operator|.
name|valueOf
argument_list|(
name|KeyBinding
operator|.
name|CLEANUP
operator|.
name|getDefaultKeyBinding
argument_list|()
argument_list|)
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSaveNewKeyBindingsToPreferences ()
specifier|public
name|void
name|testSaveNewKeyBindingsToPreferences
parameter_list|()
block|{
name|assumeFalse
argument_list|(
name|OS
operator|.
name|OS_X
argument_list|)
expr_stmt|;
name|setKeyBindingViewModel
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|)
expr_stmt|;
name|KeyEvent
name|shortcutKeyEvent
init|=
operator|new
name|KeyEvent
argument_list|(
name|KeyEvent
operator|.
name|KEY_PRESSED
argument_list|,
literal|"J"
argument_list|,
literal|"J"
argument_list|,
name|KeyCode
operator|.
name|J
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setNewBindingForCurrent
argument_list|(
name|shortcutKeyEvent
argument_list|)
expr_stmt|;
name|model
operator|.
name|saveKeyBindings
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSaveNewSpecialKeysKeyBindingsToPreferences ()
specifier|public
name|void
name|testSaveNewSpecialKeysKeyBindingsToPreferences
parameter_list|()
block|{
name|setKeyBindingViewModel
argument_list|(
name|KeyBinding
operator|.
name|UNMARK_ENTRIES
argument_list|)
expr_stmt|;
name|KeyEvent
name|shortcutKeyEvent
init|=
operator|new
name|KeyEvent
argument_list|(
name|KeyEvent
operator|.
name|KEY_PRESSED
argument_list|,
literal|"F1"
argument_list|,
literal|"F1"
argument_list|,
name|KeyCode
operator|.
name|F1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|UNMARK_ENTRIES
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setNewBindingForCurrent
argument_list|(
name|shortcutKeyEvent
argument_list|)
expr_stmt|;
name|model
operator|.
name|saveKeyBindings
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|UNMARK_ENTRIES
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAllKeyBindingsToDefault ()
specifier|public
name|void
name|testSetAllKeyBindingsToDefault
parameter_list|()
block|{
name|assumeFalse
argument_list|(
name|OS
operator|.
name|OS_X
argument_list|)
expr_stmt|;
name|setKeyBindingViewModel
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|)
expr_stmt|;
name|KeyEvent
name|shortcutKeyEvent
init|=
operator|new
name|KeyEvent
argument_list|(
name|KeyEvent
operator|.
name|KEY_PRESSED
argument_list|,
literal|"C"
argument_list|,
literal|"C"
argument_list|,
name|KeyCode
operator|.
name|C
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setNewBindingForCurrent
argument_list|(
name|shortcutKeyEvent
argument_list|)
expr_stmt|;
name|model
operator|.
name|saveKeyBindings
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|keyBindingRepository
operator|.
name|resetToDefault
argument_list|()
expr_stmt|;
name|model
operator|.
name|saveKeyBindings
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseEntryEditorCloseEntryKeybinding ()
specifier|public
name|void
name|testCloseEntryEditorCloseEntryKeybinding
parameter_list|()
block|{
name|KeyBindingViewModel
name|viewModel
init|=
name|setKeyBindingViewModel
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_ENTRY_EDITOR
argument_list|)
decl_stmt|;
name|model
operator|.
name|selectedKeyBindingProperty
argument_list|()
operator|.
name|set
argument_list|(
name|viewModel
argument_list|)
expr_stmt|;
name|KeyEvent
name|closeEditorEvent
init|=
operator|new
name|KeyEvent
argument_list|(
name|KeyEvent
operator|.
name|KEY_PRESSED
argument_list|,
literal|""
argument_list|,
literal|"
literal|"
argument_list|,
name|KeyCode
operator|.
name|ESCAPE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_ENTRY_EDITOR
operator|.
name|getDefaultKeyBinding
argument_list|()
argument_list|,
name|KeyCode
operator|.
name|ESCAPE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|KeyCombination
name|combi
init|=
name|KeyCombination
operator|.
name|valueOf
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_ENTRY_EDITOR
operator|.
name|getDefaultKeyBinding
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|combi
operator|.
name|match
argument_list|(
name|closeEditorEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_ENTRY_EDITOR
argument_list|,
name|closeEditorEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetSingleKeyBindingToDefault ()
specifier|public
name|void
name|testSetSingleKeyBindingToDefault
parameter_list|()
block|{
name|assumeFalse
argument_list|(
name|OS
operator|.
name|OS_X
argument_list|)
expr_stmt|;
name|KeyBindingViewModel
name|viewModel
init|=
name|setKeyBindingViewModel
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|)
decl_stmt|;
name|model
operator|.
name|selectedKeyBindingProperty
argument_list|()
operator|.
name|set
argument_list|(
name|viewModel
argument_list|)
expr_stmt|;
name|KeyEvent
name|shortcutKeyEvent
init|=
operator|new
name|KeyEvent
argument_list|(
name|KeyEvent
operator|.
name|KEY_PRESSED
argument_list|,
literal|"C"
argument_list|,
literal|"C"
argument_list|,
name|KeyCode
operator|.
name|C
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setNewBindingForCurrent
argument_list|(
name|shortcutKeyEvent
argument_list|)
expr_stmt|;
name|model
operator|.
name|saveKeyBindings
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|viewModel
operator|.
name|resetToDefault
argument_list|()
expr_stmt|;
name|model
operator|.
name|saveKeyBindings
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|keyBindingRepository
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|,
name|shortcutKeyEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConversionAwtKeyEventJavafxKeyEvent ()
specifier|public
name|void
name|testConversionAwtKeyEventJavafxKeyEvent
parameter_list|()
block|{
name|assumeFalse
argument_list|(
name|OS
operator|.
name|OS_X
argument_list|)
expr_stmt|;
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
name|evt
init|=
operator|new
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
argument_list|(
name|mock
argument_list|(
name|JFrame
operator|.
name|class
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|,
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
operator|.
name|VK_S
argument_list|,
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
operator|.
name|CHAR_UNDEFINED
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|KeyBinding
argument_list|>
name|keyBinding
init|=
name|keyBindingRepository
operator|.
name|mapToKeyBinding
argument_list|(
name|evt
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|KeyBinding
operator|.
name|SAVE_DATABASE
argument_list|)
argument_list|,
name|keyBinding
argument_list|)
expr_stmt|;
block|}
DECL|method|setKeyBindingViewModel (KeyBinding binding)
specifier|private
name|KeyBindingViewModel
name|setKeyBindingViewModel
parameter_list|(
name|KeyBinding
name|binding
parameter_list|)
block|{
name|KeyBindingViewModel
name|bindViewModel
init|=
operator|new
name|KeyBindingViewModel
argument_list|(
name|keyBindingRepository
argument_list|,
name|binding
argument_list|,
name|binding
operator|.
name|getDefaultKeyBinding
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|selectedKeyBindingProperty
argument_list|()
operator|.
name|set
argument_list|(
name|bindViewModel
argument_list|)
expr_stmt|;
return|return
name|bindViewModel
return|;
block|}
block|}
end_class

end_unit

