begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.protectedterms
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|ProtectedTermsLoaderTest
specifier|public
class|class
name|ProtectedTermsLoaderTest
block|{
DECL|field|loader
specifier|private
name|ProtectedTermsLoader
name|loader
decl_stmt|;
annotation|@
name|Rule
DECL|field|temporaryFolder
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|loader
operator|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetProtectedTerms ()
specifier|public
name|void
name|testGetProtectedTerms
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|List
argument_list|<
name|ProtectedTermsList
argument_list|>
name|backupList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|loader
operator|.
name|getProtectedTermsLists
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProtectedTermsList
name|list
range|:
name|backupList
control|)
block|{
name|loader
operator|.
name|removeProtectedTermsList
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|loader
operator|.
name|getProtectedTermsLists
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|ProtectedTermsLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/net/sf/jabref/logic/protectedterms/namedterms.terms"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|loader
operator|.
name|addProtectedTermsListFromFile
argument_list|(
name|filename
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Einstein"
argument_list|)
argument_list|,
name|loader
operator|.
name|getProtectedTerms
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddProtectedTermsListFromFile ()
specifier|public
name|void
name|testAddProtectedTermsListFromFile
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|ProtectedTermsLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/net/sf/jabref/logic/protectedterms/namedterms.terms"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|loader
operator|.
name|getProtectedTermsLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|addProtectedTermsListFromFile
argument_list|(
name|filename
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|loader
operator|.
name|getProtectedTermsLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadProtectedTermsListFromFileReadsDescription ()
specifier|public
name|void
name|testReadProtectedTermsListFromFileReadsDescription
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|FileNotFoundException
block|{
name|File
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|ProtectedTermsLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/net/sf/jabref/logic/protectedterms/namedterms.terms"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|ProtectedTermsList
name|list
init|=
name|ProtectedTermsLoader
operator|.
name|readProtectedTermsListFromFile
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Term list"
argument_list|,
name|list
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadProtectedTermsListFromFileDisabledWorks ()
specifier|public
name|void
name|testReadProtectedTermsListFromFileDisabledWorks
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|FileNotFoundException
block|{
name|File
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|ProtectedTermsLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/net/sf/jabref/logic/protectedterms/namedterms.terms"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|ProtectedTermsList
name|list
init|=
name|ProtectedTermsLoader
operator|.
name|readProtectedTermsListFromFile
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadProtectedTermsListFromFileEnabledWorks ()
specifier|public
name|void
name|testReadProtectedTermsListFromFileEnabledWorks
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|FileNotFoundException
block|{
name|File
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|ProtectedTermsLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/net/sf/jabref/logic/protectedterms/namedterms.terms"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|ProtectedTermsList
name|list
init|=
name|ProtectedTermsLoader
operator|.
name|readProtectedTermsListFromFile
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadProtectedTermsListFromFileIsNotInternalList ()
specifier|public
name|void
name|testReadProtectedTermsListFromFileIsNotInternalList
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|FileNotFoundException
block|{
name|File
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|ProtectedTermsLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/net/sf/jabref/logic/protectedterms/namedterms.terms"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|ProtectedTermsList
name|list
init|=
name|ProtectedTermsLoader
operator|.
name|readProtectedTermsListFromFile
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|isInternalList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadProtectedTermsListFromFileNoDescriptionGivesDefaultDescription ()
specifier|public
name|void
name|testReadProtectedTermsListFromFileNoDescriptionGivesDefaultDescription
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|FileNotFoundException
block|{
name|File
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|ProtectedTermsLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/net/sf/jabref/logic/protectedterms/unnamedterms.terms"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|ProtectedTermsList
name|list
init|=
name|ProtectedTermsLoader
operator|.
name|readProtectedTermsListFromFile
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"The text after the last line starting with # will be used"
argument_list|)
argument_list|,
name|list
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewListsAreIncluded ()
specifier|public
name|void
name|testNewListsAreIncluded
parameter_list|()
block|{
name|ProtectedTermsLoader
name|localLoader
init|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|localLoader
operator|.
name|getProtectedTermsLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewListsAreEnabled ()
specifier|public
name|void
name|testNewListsAreEnabled
parameter_list|()
block|{
name|ProtectedTermsLoader
name|localLoader
init|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ProtectedTermsList
name|list
range|:
name|localLoader
operator|.
name|getProtectedTermsLists
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|list
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInitalizedAllInternalDisabled ()
specifier|public
name|void
name|testInitalizedAllInternalDisabled
parameter_list|()
block|{
name|ProtectedTermsLoader
name|localLoader
init|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ProtectedTermsList
name|list
range|:
name|localLoader
operator|.
name|getProtectedTermsLists
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|list
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUnknownExternalFileWillNotLoad ()
specifier|public
name|void
name|testUnknownExternalFileWillNotLoad
parameter_list|()
block|{
name|ProtectedTermsLoader
name|localLoader
init|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"someUnlikelyNameThatNeverWillExist"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|localLoader
operator|.
name|getProtectedTermsLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllDisabledNoWords ()
specifier|public
name|void
name|testAllDisabledNoWords
parameter_list|()
block|{
name|ProtectedTermsLoader
name|localLoader
init|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|localLoader
operator|.
name|getProtectedTerms
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoNotLoadTheSameInternalListTwice ()
specifier|public
name|void
name|testDoNotLoadTheSameInternalListTwice
parameter_list|()
block|{
name|ProtectedTermsLoader
name|localLoader
init|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|localLoader
operator|.
name|getProtectedTermsLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddNewTermListAddsList ()
specifier|public
name|void
name|testAddNewTermListAddsList
parameter_list|()
throws|throws
name|IOException
block|{
name|ProtectedTermsLoader
name|localLoader
init|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|localLoader
operator|.
name|addNewProtectedTermsList
argument_list|(
literal|"My new list"
argument_list|,
name|temporaryFolder
operator|.
name|newFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|localLoader
operator|.
name|getProtectedTermsLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddNewTermListNewListInList ()
specifier|public
name|void
name|testAddNewTermListNewListInList
parameter_list|()
throws|throws
name|IOException
block|{
name|ProtectedTermsLoader
name|localLoader
init|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ProtectedTermsList
name|newList
init|=
name|localLoader
operator|.
name|addNewProtectedTermsList
argument_list|(
literal|"My new list"
argument_list|,
name|temporaryFolder
operator|.
name|newFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|localLoader
operator|.
name|getProtectedTermsLists
argument_list|()
operator|.
name|contains
argument_list|(
name|newList
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveTermList ()
specifier|public
name|void
name|testRemoveTermList
parameter_list|()
throws|throws
name|IOException
block|{
name|ProtectedTermsLoader
name|localLoader
init|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ProtectedTermsList
name|newList
init|=
name|localLoader
operator|.
name|addNewProtectedTermsList
argument_list|(
literal|"My new list"
argument_list|,
name|temporaryFolder
operator|.
name|newFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|localLoader
operator|.
name|removeProtectedTermsList
argument_list|(
name|newList
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveTermListReduceTheCount ()
specifier|public
name|void
name|testRemoveTermListReduceTheCount
parameter_list|()
throws|throws
name|IOException
block|{
name|ProtectedTermsLoader
name|localLoader
init|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ProtectedTermsList
name|newList
init|=
name|localLoader
operator|.
name|addNewProtectedTermsList
argument_list|(
literal|"My new list"
argument_list|,
name|temporaryFolder
operator|.
name|newFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|localLoader
operator|.
name|removeProtectedTermsList
argument_list|(
name|newList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|localLoader
operator|.
name|getProtectedTermsLists
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddNewTermListSetsCorrectDescription ()
specifier|public
name|void
name|testAddNewTermListSetsCorrectDescription
parameter_list|()
throws|throws
name|IOException
block|{
name|ProtectedTermsLoader
name|localLoader
init|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ProtectedTermsList
name|newList
init|=
name|localLoader
operator|.
name|addNewProtectedTermsList
argument_list|(
literal|"My new list"
argument_list|,
name|temporaryFolder
operator|.
name|newFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"My new list"
argument_list|,
name|newList
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

