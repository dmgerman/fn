begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.util
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|UpdateFieldTest
specifier|public
class|class
name|UpdateFieldTest
block|{
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|entry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldWorksEmptyField ()
specifier|public
name|void
name|testUpdateFieldWorksEmptyField
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|entry
operator|.
name|hasField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2016"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldWorksNonEmptyField ()
specifier|public
name|void
name|testUpdateFieldWorksNonEmptyField
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2015"
argument_list|)
expr_stmt|;
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2016"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldHasChanged ()
specifier|public
name|void
name|testUpdateFieldHasChanged
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|entry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldValidFieldChange ()
specifier|public
name|void
name|testUpdateFieldValidFieldChange
parameter_list|()
block|{
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|change
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldCorrectFieldChangeContentsEmptyField ()
specifier|public
name|void
name|testUpdateFieldCorrectFieldChangeContentsEmptyField
parameter_list|()
block|{
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|change
operator|.
name|get
argument_list|()
operator|.
name|getOldValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"year"
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2016"
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getNewValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldCorrectFieldChangeContentsNonEmptyField ()
specifier|public
name|void
name|testUpdateFieldCorrectFieldChangeContentsNonEmptyField
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2015"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2015"
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getOldValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"year"
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2016"
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getNewValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldSameValueNoChange ()
specifier|public
name|void
name|testUpdateFieldSameValueNoChange
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|change
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldSameValueNotChange ()
specifier|public
name|void
name|testUpdateFieldSameValueNotChange
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldSetToNullClears ()
specifier|public
name|void
name|testUpdateFieldSetToNullClears
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|hasField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldSetEmptyToNullClears ()
specifier|public
name|void
name|testUpdateFieldSetEmptyToNullClears
parameter_list|()
block|{
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|hasField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldSetToNullHasFieldChangeContents ()
specifier|public
name|void
name|testUpdateFieldSetToNullHasFieldChangeContents
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|change
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldSetRmptyToNullHasNoFieldChangeContents ()
specifier|public
name|void
name|testUpdateFieldSetRmptyToNullHasNoFieldChangeContents
parameter_list|()
block|{
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|change
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldSetToNullCorrectFieldChangeContents ()
specifier|public
name|void
name|testUpdateFieldSetToNullCorrectFieldChangeContents
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|change
operator|.
name|get
argument_list|()
operator|.
name|getNewValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"year"
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2016"
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getOldValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldSameContentClears ()
specifier|public
name|void
name|testUpdateFieldSameContentClears
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|hasField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldSameContentHasChanged ()
specifier|public
name|void
name|testUpdateFieldSameContentHasChanged
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldSameContentHasFieldChange ()
specifier|public
name|void
name|testUpdateFieldSameContentHasFieldChange
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|change
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateFieldSameContentHasCorrectFieldChange ()
specifier|public
name|void
name|testUpdateFieldSameContentHasCorrectFieldChange
parameter_list|()
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|change
operator|.
name|get
argument_list|()
operator|.
name|getNewValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"year"
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2016"
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getOldValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
argument_list|,
name|change
operator|.
name|get
argument_list|()
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateNonDisplayableFieldUpdates ()
specifier|public
name|void
name|testUpdateNonDisplayableFieldUpdates
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|entry
operator|.
name|hasField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateField
operator|.
name|updateNonDisplayableField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|hasField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2016"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateNonDisplayableFieldHasNotChanged ()
specifier|public
name|void
name|testUpdateNonDisplayableFieldHasNotChanged
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|entry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateField
operator|.
name|updateNonDisplayableField
argument_list|(
name|entry
argument_list|,
literal|"year"
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|hasChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

