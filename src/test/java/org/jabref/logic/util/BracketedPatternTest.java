begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.util
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
operator|.
name|BracketedPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_class
DECL|class|BracketedPatternTest
specifier|public
class|class
name|BracketedPatternTest
block|{
DECL|field|bibentry
specifier|private
name|BibEntry
name|bibentry
decl_stmt|;
DECL|field|database
specifier|private
name|BibDatabase
name|database
decl_stmt|;
DECL|field|dbentry
specifier|private
name|BibEntry
name|dbentry
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|bibentry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|bibentry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"O. Kitsune"
argument_list|)
expr_stmt|;
name|bibentry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2017"
argument_list|)
expr_stmt|;
name|bibentry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
literal|"213--216"
argument_list|)
expr_stmt|;
name|dbentry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|dbentry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setCiteKey
argument_list|(
literal|"HipKro03"
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Eric von Hippel and Georg von Krogh"
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Open Source Software and the \"Private-Collective\" Innovation Model: Issues for Organization Science"
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"Organization Science"
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2003"
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setField
argument_list|(
literal|"volume"
argument_list|,
literal|"14"
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
literal|"209--223"
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setField
argument_list|(
literal|"number"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setField
argument_list|(
literal|"address"
argument_list|,
literal|"Institute for Operations Research and the Management Sciences (INFORMS), Linthicum, Maryland, USA"
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
literal|"http://dx.doi.org/10.1287/orsc.14.2.209.14992"
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setField
argument_list|(
literal|"issn"
argument_list|,
literal|"1526-5455"
argument_list|)
expr_stmt|;
name|dbentry
operator|.
name|setField
argument_list|(
literal|"publisher"
argument_list|,
literal|"INFORMS"
argument_list|)
expr_stmt|;
name|database
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|dbentry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bibentryExpansionTest ()
specifier|public
name|void
name|bibentryExpansionTest
parameter_list|()
block|{
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|(
literal|"[year]_[auth]_[firstpage]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2017_Kitsune_213"
argument_list|,
name|pattern
operator|.
name|expand
argument_list|(
name|bibentry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nullDatabaseExpansionTest ()
specifier|public
name|void
name|nullDatabaseExpansionTest
parameter_list|()
block|{
name|BibDatabase
name|another_database
init|=
literal|null
decl_stmt|;
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|(
literal|"[year]_[auth]_[firstpage]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2017_Kitsune_213"
argument_list|,
name|pattern
operator|.
name|expand
argument_list|(
name|bibentry
argument_list|,
name|another_database
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pureauthTest ()
specifier|public
name|void
name|pureauthTest
parameter_list|()
block|{
name|BibDatabase
name|another_database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|(
literal|"[pureauth]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Kitsune"
argument_list|,
name|pattern
operator|.
name|expand
argument_list|(
name|bibentry
argument_list|,
name|another_database
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyDatabaseExpansionTest ()
specifier|public
name|void
name|emptyDatabaseExpansionTest
parameter_list|()
block|{
name|BibDatabase
name|another_database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|(
literal|"[year]_[auth]_[firstpage]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2017_Kitsune_213"
argument_list|,
name|pattern
operator|.
name|expand
argument_list|(
name|bibentry
argument_list|,
name|another_database
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|databaseWithStringsExpansionTest ()
specifier|public
name|void
name|databaseWithStringsExpansionTest
parameter_list|()
block|{
name|BibDatabase
name|another_database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|BibtexString
name|string
init|=
operator|new
name|BibtexString
argument_list|(
literal|"sgr"
argument_list|,
literal|"Saulius GraÅ¾ulis"
argument_list|)
decl_stmt|;
name|another_database
operator|.
name|addString
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|bibentry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|bibentry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"#sgr#"
argument_list|)
expr_stmt|;
name|bibentry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2017"
argument_list|)
expr_stmt|;
name|bibentry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
literal|"213--216"
argument_list|)
expr_stmt|;
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|(
literal|"[year]_[auth]_[firstpage]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2017_GraÅ¾ulis_213"
argument_list|,
name|pattern
operator|.
name|expand
argument_list|(
name|bibentry
argument_list|,
name|another_database
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unbalancedBracketExpansionTest ()
specifier|public
name|void
name|unbalancedBracketExpansionTest
parameter_list|()
block|{
comment|// FIXME: this test throws the ugly 'java.lang.IllegalStateException: Toolkit not initialized'
comment|// exception for some reason; the exception should not occur in the application! Should figure
comment|// out how to suppress it.
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|(
literal|"[year]_[auth_[firstpage]"
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|""
argument_list|,
name|pattern
operator|.
name|expand
argument_list|(
name|bibentry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unbalancedLastBracketExpansionTest ()
specifier|public
name|void
name|unbalancedLastBracketExpansionTest
parameter_list|()
block|{
comment|// FIXME: this test throws the ugly 'java.lang.IllegalStateException: Toolkit not initialized'
comment|// exception for some reason; the exception should not occur in the application! Should figure
comment|// out how to suppress it.
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|(
literal|"[year]_[auth]_[firstpage"
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|""
argument_list|,
name|pattern
operator|.
name|expand
argument_list|(
name|bibentry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|entryTypeExpansionTest ()
specifier|public
name|void
name|entryTypeExpansionTest
parameter_list|()
block|{
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|(
literal|"[entrytype]:[year]_[auth]_[pages]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Misc:2017_Kitsune_213--216"
argument_list|,
name|pattern
operator|.
name|expand
argument_list|(
name|bibentry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|entryTypeExpansionLowercaseTest ()
specifier|public
name|void
name|entryTypeExpansionLowercaseTest
parameter_list|()
block|{
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|(
literal|"[entrytype:lower]:[year]_[auth]_[firstpage]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"misc:2017_Kitsune_213"
argument_list|,
name|pattern
operator|.
name|expand
argument_list|(
name|bibentry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|suppliedBibentryBracketExpansionTest ()
specifier|public
name|void
name|suppliedBibentryBracketExpansionTest
parameter_list|()
block|{
name|BibDatabase
name|another_database
init|=
literal|null
decl_stmt|;
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|(
literal|"[year]_[auth]_[firstpage]"
argument_list|)
decl_stmt|;
name|BibEntry
name|another_bibentry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|another_bibentry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"GraÅ¾ulis, Saulius"
argument_list|)
expr_stmt|;
name|another_bibentry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2017"
argument_list|)
expr_stmt|;
name|another_bibentry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
literal|"213--216"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2017_GraÅ¾ulis_213"
argument_list|,
name|pattern
operator|.
name|expand
argument_list|(
name|another_bibentry
argument_list|,
literal|';'
argument_list|,
name|another_database
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nullBibentryBracketExpansionTest ()
specifier|public
name|void
name|nullBibentryBracketExpansionTest
parameter_list|()
block|{
name|BibDatabase
name|another_database
init|=
literal|null
decl_stmt|;
name|BibEntry
name|another_bibentry
init|=
literal|null
decl_stmt|;
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|(
literal|"[year]_[auth]_[firstpage]"
argument_list|)
decl_stmt|;
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|pattern
operator|.
name|expand
argument_list|(
name|another_bibentry
argument_list|,
literal|';'
argument_list|,
name|another_database
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bracketedExpressionDefaultConstructorTest ()
specifier|public
name|void
name|bracketedExpressionDefaultConstructorTest
parameter_list|()
block|{
name|BibDatabase
name|another_database
init|=
literal|null
decl_stmt|;
name|BracketedPattern
name|pattern
init|=
operator|new
name|BracketedPattern
argument_list|()
decl_stmt|;
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|pattern
operator|.
name|expand
argument_list|(
name|bibentry
argument_list|,
literal|';'
argument_list|,
name|another_database
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFieldAndFormat ()
specifier|public
name|void
name|testFieldAndFormat
parameter_list|()
block|{
name|Character
name|separator
init|=
literal|';'
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Eric von Hippel and Georg von Krogh"
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[author]"
argument_list|,
name|separator
argument_list|,
name|dbentry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[unknownkey]"
argument_list|,
name|separator
argument_list|,
name|dbentry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[:]"
argument_list|,
name|separator
argument_list|,
name|dbentry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[:lower]"
argument_list|,
name|separator
argument_list|,
name|dbentry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"eric von hippel and georg von krogh"
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[author:lower]"
argument_list|,
name|separator
argument_list|,
name|dbentry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HipKro03"
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[bibtexkey]"
argument_list|,
name|separator
argument_list|,
name|dbentry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HipKro03"
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[bibtexkey:]"
argument_list|,
name|separator
argument_list|,
name|dbentry
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolvedFieldAndFormat ()
specifier|public
name|void
name|testResolvedFieldAndFormat
parameter_list|()
block|{
name|BibEntry
name|child
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|child
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|CROSSREF
argument_list|,
literal|"HipKro03"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|Character
name|separator
init|=
literal|';'
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Eric von Hippel and Georg von Krogh"
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[author]"
argument_list|,
name|separator
argument_list|,
name|child
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[unknownkey]"
argument_list|,
name|separator
argument_list|,
name|child
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[:]"
argument_list|,
name|separator
argument_list|,
name|child
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[:lower]"
argument_list|,
name|separator
argument_list|,
name|child
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"eric von hippel and georg von krogh"
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[author:lower]"
argument_list|,
name|separator
argument_list|,
name|child
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
comment|// the bibtexkey is not inherited
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[bibtexkey]"
argument_list|,
name|separator
argument_list|,
name|child
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[bibtexkey:]"
argument_list|,
name|separator
argument_list|,
name|child
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolvedParentNotInDatabase ()
specifier|public
name|void
name|testResolvedParentNotInDatabase
parameter_list|()
block|{
name|BibEntry
name|child
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|child
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|CROSSREF
argument_list|,
literal|"HipKro03"
argument_list|)
expr_stmt|;
name|database
operator|.
name|removeEntry
argument_list|(
name|dbentry
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|BracketedPattern
operator|.
name|expandBrackets
argument_list|(
literal|"[author]"
argument_list|,
literal|';'
argument_list|,
name|child
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

