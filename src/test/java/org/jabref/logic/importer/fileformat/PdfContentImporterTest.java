begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fileformat
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|StandardFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|StandardEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|PdfContentImporterTest
class|class
name|PdfContentImporterTest
block|{
DECL|field|importer
specifier|private
name|PdfContentImporter
name|importer
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
block|{
name|importer
operator|=
operator|new
name|PdfContentImporter
argument_list|(
name|mock
argument_list|(
name|ImportFormatPreferences
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testsGetExtensions ()
name|void
name|testsGetExtensions
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|StandardFileType
operator|.
name|PDF
argument_list|,
name|importer
operator|.
name|getFileType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDescription ()
name|void
name|testGetDescription
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"PdfContentImporter parses data of the first page of the PDF and creates a BibTeX entry. Currently, Springer and IEEE formats are supported."
argument_list|,
name|importer
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doesNotHandleEncryptedPdfs ()
name|void
name|doesNotHandleEncryptedPdfs
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|PdfContentImporter
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/pdfs/encrypted.pdf"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|result
init|=
name|importer
operator|.
name|importDatabase
argument_list|(
name|file
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|importTwiceWorksAsExpected ()
name|void
name|importTwiceWorksAsExpected
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|PdfContentImporter
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/pdfs/minimal.pdf"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|result
init|=
name|importer
operator|.
name|importDatabase
argument_list|(
name|file
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|expected
init|=
operator|new
name|BibEntry
argument_list|(
name|StandardEntryType
operator|.
name|InProceedings
argument_list|)
decl_stmt|;
name|expected
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"1 "
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setFiles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|,
literal|"PDF"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|resultSecondImport
init|=
name|importer
operator|.
name|importDatabase
argument_list|(
name|file
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|resultSecondImport
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParsingEditorWithoutPagesorSeriesInformation ()
name|void
name|testParsingEditorWithoutPagesorSeriesInformation
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|(
name|StandardEntryType
operator|.
name|InProceedings
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"Anke LÃ¼deling and Merja KytÃ¶ (Eds.)"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|EDITOR
argument_list|,
literal|"Anke LÃ¼deling and Merja KytÃ¶"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|PUBLISHER
argument_list|,
literal|"Springer"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
literal|"Corpus Linguistics â An International Handbook â LÃ¼deling, Anke, KytÃ¶, Merja (Eds.)"
argument_list|)
expr_stmt|;
name|String
name|firstPageContents
init|=
literal|"Corpus Linguistics â An International Handbook â LÃ¼deling, Anke,\n"
operator|+
literal|"KytÃ¶, Merja (Eds.)\n"
operator|+
literal|"\n"
operator|+
literal|"Anke LÃ¼deling, Merja KytÃ¶ (Eds.)\n"
operator|+
literal|"\n"
operator|+
literal|"VOLUME 2\n"
operator|+
literal|"\n"
operator|+
literal|"This handbook provides an up-to-date survey of the field of corpus linguistics, a HandbÃ¼cher zur Sprach- und\n"
operator|+
literal|"field whose methodology has revolutionized much of the empirical work done in Kommunikationswissenschaft / Handbooks\n"
operator|+
literal|"\n"
operator|+
literal|"of Linguistics and Communication Science\n"
operator|+
literal|"most fields of linguistic study over the past decade. (HSK) 29/2\n"
operator|+
literal|"\n"
operator|+
literal|"vii, 578 pages\n"
operator|+
literal|"Corpus linguistics investigates human language by starting out from large\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|entry
argument_list|)
argument_list|,
name|importer
operator|.
name|getEntryFromPDFContent
argument_list|(
name|firstPageContents
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

