begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fileformat
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_class
DECL|class|BiblioscapeImporterTestTypes
specifier|public
class|class
name|BiblioscapeImporterTestTypes
block|{
DECL|method|types ()
specifier|private
specifier|static
name|Stream
argument_list|<
name|String
index|[]
argument_list|>
name|types
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"journal"
block|,
literal|"article"
block|}
block|,
block|{
literal|"book section"
block|,
literal|"inbook"
block|}
block|,
block|{
literal|"book"
block|,
literal|"book"
block|}
block|,
block|{
literal|"conference"
block|,
literal|"inproceedings"
block|}
block|,
block|{
literal|"proceedings"
block|,
literal|"inproceedings"
block|}
block|,
block|{
literal|"report"
block|,
literal|"techreport"
block|}
block|,
block|{
literal|"master thesis"
block|,
literal|"mastersthesis"
block|}
block|,
block|{
literal|"thesis"
block|,
literal|"phdthesis"
block|}
block|,
block|{
literal|"master"
block|,
literal|"misc"
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"types"
argument_list|)
DECL|method|importConvertsToCorrectBibType (String biblioscapeType, String bibtexType)
specifier|public
name|void
name|importConvertsToCorrectBibType
parameter_list|(
name|String
name|biblioscapeType
parameter_list|,
name|String
name|bibtexType
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|bsInput
init|=
literal|"--AU-- Baklouti, F.\n"
operator|+
literal|"--YP-- 1999\n"
operator|+
literal|"--KW-- Cells; Rna; Isoforms\n"
operator|+
literal|"--TI-- Blood\n"
operator|+
literal|"--RT-- "
operator|+
name|biblioscapeType
operator|+
literal|"\n"
operator|+
literal|"------"
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibEntries
init|=
operator|new
name|BiblioscapeImporter
argument_list|()
operator|.
name|importDatabase
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|bsInput
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Baklouti, F."
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
literal|"Cells; Rna; Isoforms"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Blood"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"1999"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|bibtexType
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
name|bibEntries
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

