begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fileformat
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|SavePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
operator|.
name|LowerCaseFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|AbstractBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|DatabaseBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|GlobalBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|FieldFormatterCleanup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|FieldFormatterCleanups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AllEntriesGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|ExplicitGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupHierarchyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|RegexKeywordGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|WordKeywordGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|SaveOrderConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|DummyFileUpdateMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|FileUpdateMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|function
operator|.
name|Executable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Answers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|BibtexParserTest
class|class
name|BibtexParserTest
block|{
DECL|field|importFormatPreferences
specifier|private
name|ImportFormatPreferences
name|importFormatPreferences
decl_stmt|;
DECL|field|parser
specifier|private
name|BibtexParser
name|parser
decl_stmt|;
DECL|field|fileMonitor
specifier|private
name|FileUpdateMonitor
name|fileMonitor
init|=
operator|new
name|DummyFileUpdateMonitor
argument_list|()
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
block|{
name|importFormatPreferences
operator|=
name|mock
argument_list|(
name|ImportFormatPreferences
operator|.
name|class
argument_list|,
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|importFormatPreferences
operator|.
name|getKeywordSeparator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|parser
operator|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
operator|new
name|DummyFileUpdateMonitor
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseWithNullThrowsNullPointerException ()
name|void
name|parseWithNullThrowsNullPointerException
parameter_list|()
throws|throws
name|Exception
block|{
name|Executable
name|toBeTested
init|=
parameter_list|()
lambda|->
name|parser
operator|.
name|parse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
name|toBeTested
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fromStringRecognizesEntry ()
name|void
name|fromStringRecognizesEntry
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|parser
operator|.
name|parseEntries
argument_list|(
literal|"@article{test,author={Ed von Test}}"
argument_list|)
decl_stmt|;
name|BibEntry
name|expected
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setCiteKey
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Ed von Test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fromStringReturnsEmptyListFromEmptyString ()
name|void
name|fromStringReturnsEmptyListFromEmptyString
parameter_list|()
throws|throws
name|ParseException
block|{
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|parser
operator|.
name|parseEntries
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fromStringReturnsEmptyListIfNoEntryRecognized ()
name|void
name|fromStringReturnsEmptyListIfNoEntryRecognized
parameter_list|()
throws|throws
name|ParseException
block|{
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|parser
operator|.
name|parseEntries
argument_list|(
literal|"@@article@@{{{{{{}"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleFromStringRecognizesEntry ()
name|void
name|singleFromStringRecognizesEntry
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@article{canh05,"
operator|+
literal|"  author = {Crowston, K. and Annabi, H.},\n"
operator|+
literal|"  title = {Title A}}\n"
argument_list|,
name|importFormatPreferences
argument_list|,
name|fileMonitor
argument_list|)
decl_stmt|;
name|BibEntry
name|expected
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setCiteKey
argument_list|(
literal|"canh05"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Crowston, K. and Annabi, H."
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Title A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|expected
argument_list|)
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleFromStringRecognizesEntryInMultiple ()
name|void
name|singleFromStringRecognizesEntryInMultiple
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@article{canh05,"
operator|+
literal|"  author = {Crowston, K. and Annabi, H.},\n"
operator|+
literal|"  title = {Title A}}\n"
operator|+
literal|"@inProceedings{foo,"
operator|+
literal|"  author={Norton Bar}}"
argument_list|,
name|importFormatPreferences
argument_list|,
name|fileMonitor
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|parsed
operator|.
name|get
argument_list|()
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|equals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"canh05"
argument_list|)
argument_list|)
operator|||
name|parsed
operator|.
name|get
argument_list|()
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|equals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleFromStringReturnsEmptyFromEmptyString ()
name|void
name|singleFromStringReturnsEmptyFromEmptyString
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|""
argument_list|,
name|importFormatPreferences
argument_list|,
name|fileMonitor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleFromStringReturnsEmptyIfNoEntryRecognized ()
name|void
name|singleFromStringReturnsEmptyIfNoEntryRecognized
parameter_list|()
throws|throws
name|ParseException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
literal|"@@article@@{{{{{{}"
argument_list|,
name|importFormatPreferences
argument_list|,
name|fileMonitor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntry ()
name|void
name|parseRecognizesEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseQuotedEntries ()
name|void
name|parseQuotedEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author=\"Ed von Test\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryOnlyWithKey ()
name|void
name|parseRecognizesEntryOnlyWithKey
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryWithWhitespaceAtBegining ()
name|void
name|parseRecognizesEntryWithWhitespaceAtBegining
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|" @article{test,author={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryWithWhitespace ()
name|void
name|parseRecognizesEntryWithWhitespace
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article { test,author={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryWithNewlines ()
name|void
name|parseRecognizesEntryWithNewlines
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article\n{\ntest,author={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryWithUnknownType ()
name|void
name|parseRecognizesEntryWithUnknownType
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@unknown{test,author={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unknown"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryWithVeryLongType ()
name|void
name|parseRecognizesEntryWithVeryLongType
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@thisIsALongStringToTestMaybeItIsToLongWhoKnowsNOTme{test,author={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"thisisalongstringtotestmaybeitistolongwhoknowsnotme"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryInParenthesis ()
name|void
name|parseRecognizesEntryInParenthesis
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article(test,author={Ed von Test})"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryWithBigNumbers ()
name|void
name|parseRecognizesEntryWithBigNumbers
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{canh05,"
operator|+
literal|"isbn = 1234567890123456789,\n"
operator|+
literal|"isbn2 = {1234567890123456789},\n"
operator|+
literal|"small = 1234,\n"
operator|+
literal|"}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"canh05"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"1234567890123456789"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"isbn"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"1234567890123456789"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"isbn2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"1234"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"small"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesBibtexKeyWithSpecialCharacters ()
name|void
name|parseRecognizesBibtexKeyWithSpecialCharacters
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{te_st:with-special(characters),author={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"te_st:with-special(characters)"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryWhereLastFieldIsFinishedWithComma ()
name|void
name|parseRecognizesEntryWhereLastFieldIsFinishedWithComma
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={Ed von Test},}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryWithAtInField ()
name|void
name|parseRecognizesEntryWithAtInField
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={Ed von T@st}}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|expected
init|=
operator|new
name|BibEntry
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
operator|.
name|withField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
literal|"test"
argument_list|)
operator|.
name|withField
argument_list|(
literal|"author"
argument_list|,
literal|"Ed von T@st"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryPrecedingComment ()
name|void
name|parseRecognizesEntryPrecedingComment
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|comment
init|=
literal|"@Comment{@article{myarticle,}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@inproceedings{blabla, title={the proceedings of bl@bl@}; }"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
decl_stmt|;
name|String
name|entryWithComment
init|=
name|comment
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@article{test,author={Ed von T@st}}"
decl_stmt|;
name|BibEntry
name|expected
init|=
operator|new
name|BibEntry
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
operator|.
name|withField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
literal|"test"
argument_list|)
operator|.
name|withField
argument_list|(
literal|"author"
argument_list|,
literal|"Ed von T@st"
argument_list|)
decl_stmt|;
name|expected
operator|.
name|setCommentsBeforeEntry
argument_list|(
name|comment
argument_list|)
expr_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|entryWithComment
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getUserComments
argument_list|()
argument_list|,
name|parsed
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUserComments
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesMultipleEntries ()
name|void
name|parseRecognizesMultipleEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|BibEntry
name|firstEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|firstEntry
operator|.
name|setType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
name|firstEntry
operator|.
name|setCiteKey
argument_list|(
literal|"canh05"
argument_list|)
expr_stmt|;
name|firstEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Crowston, K. and Annabi, H."
argument_list|)
expr_stmt|;
name|firstEntry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Title A"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|firstEntry
argument_list|)
expr_stmt|;
name|BibEntry
name|secondEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|secondEntry
operator|.
name|setType
argument_list|(
literal|"inproceedings"
argument_list|)
expr_stmt|;
name|secondEntry
operator|.
name|setCiteKey
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|secondEntry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Norton Bar"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|secondEntry
argument_list|)
expr_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{canh05,"
operator|+
literal|"  author = {Crowston, K. and Annabi, H.},\n"
operator|+
literal|"  title = {Title A}}\n"
operator|+
literal|"@inProceedings{foo,"
operator|+
literal|"  author={Norton Bar}}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseSetsParsedSerialization ()
name|void
name|parseSetsParsedSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|firstEntry
init|=
literal|"@article{canh05,"
operator|+
literal|"  author = {Crowston, K. and Annabi, H.},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  title = {Title A}}"
operator|+
name|OS
operator|.
name|NEWLINE
decl_stmt|;
name|String
name|secondEntry
init|=
literal|"@inProceedings{foo,"
operator|+
literal|"  author={Norton Bar}}"
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|firstEntry
operator|+
name|secondEntry
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
literal|"canh05"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|firstEntry
argument_list|,
name|entry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|secondEntry
argument_list|,
name|entry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|parseRecognizesMultipleEntriesOnSameLine ()
name|void
name|parseRecognizesMultipleEntriesOnSameLine
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|BibEntry
name|firstEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|firstEntry
operator|.
name|setType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
name|firstEntry
operator|.
name|setCiteKey
argument_list|(
literal|"canh05"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|firstEntry
argument_list|)
expr_stmt|;
name|BibEntry
name|secondEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|secondEntry
operator|.
name|setType
argument_list|(
literal|"inproceedings"
argument_list|)
expr_stmt|;
name|secondEntry
operator|.
name|setCiteKey
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|secondEntry
argument_list|)
expr_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{canh05}"
operator|+
literal|"@inProceedings{foo}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseCombinesMultipleAuthorFields ()
name|void
name|parseCombinesMultipleAuthorFields
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={Ed von Test},author={Second Author},author={Third Author}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test and Second Author and Third Author"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseCombinesMultipleEditorFields ()
name|void
name|parseCombinesMultipleEditorFields
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,editor={Ed von Test},editor={Second Author},editor={Third Author}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test and Second Author and Third Author"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseCombinesMultipleKeywordsFields ()
name|void
name|parseCombinesMultipleKeywordsFields
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,Keywords={Test},Keywords={Second Keyword},Keywords={Third Keyword}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Test, Second Keyword, Third Keyword"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"keywords"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesHeaderButIgnoresEncoding ()
name|void
name|parseRecognizesHeaderButIgnoresEncoding
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"This file was created with JabRef 2.1 beta 2."
operator|+
literal|"\n"
operator|+
literal|"Encoding: Cp1252"
operator|+
literal|"\n"
operator|+
literal|""
operator|+
literal|"\n"
operator|+
literal|"@INPROCEEDINGS{CroAnnHow05,"
operator|+
literal|"\n"
operator|+
literal|"  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},"
operator|+
literal|"\n"
operator|+
literal|"  title = {Effective work practices for floss development: A model and propositions},"
operator|+
literal|"\n"
operator|+
literal|"  booktitle = {Hawaii International Conference On System Sciences (HICSS)},"
operator|+
literal|"\n"
operator|+
literal|"  year = {2005},"
operator|+
literal|"\n"
operator|+
literal|"  owner = {oezbek},"
operator|+
literal|"\n"
operator|+
literal|"  timestamp = {2006.05.29},"
operator|+
literal|"\n"
operator|+
literal|"  url = {http://james.howison.name/publications.html}"
operator|+
literal|"\n"
operator|+
literal|"}))"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|result
operator|.
name|getMetaData
argument_list|()
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inproceedings"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"CroAnnHow05"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Crowston, K. and Annabi, H. and Howison, J. and Masango, C."
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Effective work practices for floss development: A model and propositions"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Hawaii International Conference On System Sciences (HICSS)"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"booktitle"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2005"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"oezbek"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"owner"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2006.05.29"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"timestamp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"http://james.howison.name/publications.html"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesFormatedEntry ()
name|void
name|parseRecognizesFormatedEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
operator|+
literal|"@INPROCEEDINGS{CroAnnHow05,"
operator|+
literal|"\n"
operator|+
literal|"  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},"
operator|+
literal|"\n"
operator|+
literal|"  title = {Effective work practices for floss development: A model and propositions},"
operator|+
literal|"\n"
operator|+
literal|"  booktitle = {Hawaii International Conference On System Sciences (HICSS)},"
operator|+
literal|"\n"
operator|+
literal|"  year = {2005},"
operator|+
literal|"\n"
operator|+
literal|"  owner = {oezbek},"
operator|+
literal|"\n"
operator|+
literal|"  timestamp = {2006.05.29},"
operator|+
literal|"\n"
operator|+
literal|"  url = {http://james.howison.name/publications.html}"
operator|+
literal|"\n"
operator|+
literal|"}))"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inproceedings"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"CroAnnHow05"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Crowston, K. and Annabi, H. and Howison, J. and Masango, C."
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Effective work practices for floss development: A model and propositions"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Hawaii International Conference On System Sciences (HICSS)"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"booktitle"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2005"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"oezbek"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"owner"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2006.05.29"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"timestamp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"http://james.howison.name/publications.html"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesFieldValuesInQuotationMarks ()
name|void
name|parseRecognizesFieldValuesInQuotationMarks
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author=\"Ed von Test\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesNumbersWithoutBracketsOrQuotationMarks ()
name|void
name|parseRecognizesNumbersWithoutBracketsOrQuotationMarks
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,year = 2005}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2005"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesUppercaseFields ()
name|void
name|parseRecognizesUppercaseFields
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,AUTHOR={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesAbsoluteFile ()
name|void
name|parseRecognizesAbsoluteFile
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,file = {D:\\Documents\\literature\\Tansel-PRL2006.pdf}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"D:\\Documents\\literature\\Tansel-PRL2006.pdf"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesDateFieldWithConcatenation ()
name|void
name|parseRecognizesDateFieldWithConcatenation
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,date = {1-4~} # nov}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"1-4~#nov#"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseReturnsEmptyListIfNoEntryRecognized ()
name|void
name|parseReturnsEmptyListIfNoEntryRecognized
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},"
operator|+
literal|"\n"
operator|+
literal|"  title = {Effective work practices for floss development: A model and propositions},"
operator|+
literal|"\n"
operator|+
literal|"  booktitle = {Hawaii International Conference On System Sciences (HICSS)},"
operator|+
literal|"\n"
operator|+
literal|"  year = {2005},"
operator|+
literal|"\n"
operator|+
literal|"  owner = {oezbek},"
operator|+
literal|"\n"
operator|+
literal|"  timestamp = {2006.05.29},"
operator|+
literal|"\n"
operator|+
literal|"  url = {http://james.howison.name/publications.html}"
operator|+
literal|"\n"
operator|+
literal|"}))"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseReturnsEmptyListIfNoEntryExistent ()
name|void
name|parseReturnsEmptyListIfNoEntryExistent
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"This was created with JabRef 2.1 beta 2."
operator|+
literal|"\n"
operator|+
literal|"Encoding: Cp1252"
operator|+
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesDuplicateBibtexKeys ()
name|void
name|parseRecognizesDuplicateBibtexKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{canh05,"
operator|+
literal|"  author = {Crowston, K. and Annabi, H.},\n"
operator|+
literal|"  title = {Title A}}\n"
operator|+
literal|"@inProceedings{canh05,"
operator|+
literal|"  author={Norton Bar}}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|duplicateKeys
init|=
name|result
operator|.
name|getDuplicateKeys
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|duplicateKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"canh05"
argument_list|,
name|duplicateKeys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseNotWarnsAboutEntryWithoutBibtexKey ()
name|void
name|parseNotWarnsAboutEntryWithoutBibtexKey
parameter_list|()
throws|throws
name|IOException
block|{
name|BibEntry
name|expected
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Ed von Test"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{,author={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresAndWarnsAboutEntryWithUnmatchedOpenBracket ()
name|void
name|parseIgnoresAndWarnsAboutEntryWithUnmatchedOpenBracket
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={author missing bracket}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseAddsEscapedOpenBracketToFieldValue ()
name|void
name|parseAddsEscapedOpenBracketToFieldValue
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,review={escaped \\{ bracket}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"escaped \\{ bracket"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"review"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseAddsEscapedClosingBracketToFieldValue ()
name|void
name|parseAddsEscapedClosingBracketToFieldValue
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,review={escaped \\} bracket}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"escaped \\} bracket"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"review"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresAndWarnsAboutEntryWithUnmatchedOpenBracketInQuotationMarks ()
name|void
name|parseIgnoresAndWarnsAboutEntryWithUnmatchedOpenBracketInQuotationMarks
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author=\"author {missing bracket\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresArbitraryContentAfterEntry ()
name|void
name|parseIgnoresArbitraryContentAfterEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={author bracket }}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|,
literal|"Size should be one, but was "
operator|+
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"}"
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEpilog
argument_list|()
argument_list|,
literal|"Epilog should be preserved"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseWarnsAboutUnmatchedContentInEntryWithoutComma ()
name|void
name|parseWarnsAboutUnmatchedContentInEntryWithoutComma
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={author bracket } too much}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"author bracket #too##much#"
argument_list|)
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseWarnsAboutUnmatchedContentInEntry ()
name|void
name|parseWarnsAboutUnmatchedContentInEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={author bracket }, too much}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|,
literal|"There should be warnings"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|,
literal|"Size should be zero, but was "
operator|+
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseAcceptsEntryWithAtSymbolInBrackets ()
name|void
name|parseAcceptsEntryWithAtSymbolInBrackets
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={author @ good}}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"author @ good"
argument_list|)
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesEntryWithAtSymbolInQuotationMarks ()
name|void
name|parseRecognizesEntryWithAtSymbolInQuotationMarks
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author=\"author @ good\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"author @ good"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesFieldsWithBracketsEnclosedInQuotationMarks ()
name|void
name|parseRecognizesFieldsWithBracketsEnclosedInQuotationMarks
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author=\"Test {Ed {von} Test}\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Test {Ed {von} Test}"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesFieldsWithEscapedQuotationMarks ()
name|void
name|parseRecognizesFieldsWithEscapedQuotationMarks
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Quotes in fields of the form key = "value" have to be escaped by putting them into braces
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author=\"Test {\" Test}\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Test {\" Test}"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresAndWarnsAboutEntryWithFieldsThatAreNotSeperatedByComma ()
name|void
name|parseIgnoresAndWarnsAboutEntryWithFieldsThatAreNotSeperatedByComma
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={Ed von Test} year=2005}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresAndWarnsAboutCorruptedEntryButRecognizeOthers ()
name|void
name|parseIgnoresAndWarnsAboutCorruptedEntryButRecognizeOthers
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={author missing bracket}"
operator|+
literal|"@article{test,author={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesMonthFieldsWithFollowingComma ()
name|void
name|parseRecognizesMonthFieldsWithFollowingComma
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={Ed von Test},month={8,}},"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parsed
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"8,"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesPreamble ()
name|void
name|parseRecognizesPreamble
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@preamble{some text and \\latex}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"some text and \\latex"
argument_list|)
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesUppercasePreamble ()
name|void
name|parseRecognizesUppercasePreamble
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@PREAMBLE{some text and \\latex}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"some text and \\latex"
argument_list|)
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesPreambleWithWhitespace ()
name|void
name|parseRecognizesPreambleWithWhitespace
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@preamble {some text and \\latex}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"some text and \\latex"
argument_list|)
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesPreambleInParenthesis ()
name|void
name|parseRecognizesPreambleInParenthesis
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@preamble(some text and \\latex)"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"some text and \\latex"
argument_list|)
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesPreambleWithConcatenation ()
name|void
name|parseRecognizesPreambleWithConcatenation
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@preamble{\"some text\" # \"and \\latex\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"\"some text\" # \"and \\latex\""
argument_list|)
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesString ()
name|void
name|parseRecognizesString
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@string{bourdieu = {Bourdieu, Pierre}}"
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexString
name|string
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringValues
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bourdieu"
argument_list|,
name|string
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bourdieu, Pierre"
argument_list|,
name|string
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseSavesOneNewlineAfterStringInParsedSerialization ()
name|void
name|parseSavesOneNewlineAfterStringInParsedSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|string
init|=
literal|"@string{bourdieu = {Bourdieu, Pierre}}"
operator|+
name|OS
operator|.
name|NEWLINE
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|string
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexString
name|parsedString
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringValues
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|string
argument_list|,
name|parsedString
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesStringWithWhitespace ()
name|void
name|parseRecognizesStringWithWhitespace
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@string {bourdieu = {Bourdieu, Pierre}}"
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexString
name|parsedString
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringValues
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bourdieu"
argument_list|,
name|parsedString
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bourdieu, Pierre"
argument_list|,
name|parsedString
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesStringInParenthesis ()
name|void
name|parseRecognizesStringInParenthesis
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@string(bourdieu = {Bourdieu, Pierre})"
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexString
name|parsedString
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringValues
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bourdieu"
argument_list|,
name|parsedString
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bourdieu, Pierre"
argument_list|,
name|parsedString
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesMultipleStrings ()
name|void
name|parseRecognizesMultipleStrings
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@string{bourdieu = {Bourdieu, Pierre}}"
operator|+
literal|"@string{adieu = {Adieu, Pierre}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|BibtexString
argument_list|>
name|iterator
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringValues
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BibtexString
name|first
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BibtexString
name|second
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Sort them because we can't be sure about the order
if|if
condition|(
name|first
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"adieu"
argument_list|)
condition|)
block|{
name|BibtexString
name|tmp
init|=
name|first
decl_stmt|;
name|first
operator|=
name|second
expr_stmt|;
name|second
operator|=
name|tmp
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bourdieu"
argument_list|,
name|first
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bourdieu, Pierre"
argument_list|,
name|first
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"adieu"
argument_list|,
name|second
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Adieu, Pierre"
argument_list|,
name|second
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesStringAndEntry ()
name|void
name|parseRecognizesStringAndEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
operator|+
literal|"@string{bourdieu = {Bourdieu, Pierre}}"
operator|+
literal|"@book{bourdieu-2002-questions-sociologie, "
operator|+
literal|"	Address = {Paris},"
operator|+
literal|"	Author = bourdieu,"
operator|+
literal|"	Isbn = 2707318256,"
operator|+
literal|"	Publisher = {Minuit},"
operator|+
literal|"	Title = {Questions de sociologie},"
operator|+
literal|"	Year = 2002"
operator|+
literal|"}"
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexString
name|parsedString
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringValues
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bourdieu"
argument_list|,
name|parsedString
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bourdieu, Pierre"
argument_list|,
name|parsedString
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"book"
argument_list|,
name|parsedEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"bourdieu-2002-questions-sociologie"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Paris"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"address"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"#bourdieu#"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2707318256"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"isbn"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Minuit"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"publisher"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Questions de sociologie"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"2002"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseWarnsAboutStringsWithSameNameAndOnlyKeepsOne ()
name|void
name|parseWarnsAboutStringsWithSameNameAndOnlyKeepsOne
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@string{bourdieu = {Bourdieu, Pierre}}"
operator|+
literal|"@string{bourdieu = {Other}}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresComments ()
name|void
name|parseIgnoresComments
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@comment{some text and \\latex}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresUpercaseComments ()
name|void
name|parseIgnoresUpercaseComments
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@COMMENT{some text and \\latex}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresCommentsBeforeEntry ()
name|void
name|parseIgnoresCommentsBeforeEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@comment{some text and \\latex}"
operator|+
literal|"@article{test,author={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|parsedEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parsedEntry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresCommentsAfterEntry ()
name|void
name|parseIgnoresCommentsAfterEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={Ed von Test}}"
operator|+
literal|"@comment{some text and \\latex}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|parsedEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parsedEntry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresText ()
name|void
name|parseIgnoresText
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"comment{some text and \\latex"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresTextBeforeEntry ()
name|void
name|parseIgnoresTextBeforeEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"comment{some text and \\latex"
operator|+
literal|"@article{test,author={Ed von Test}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|parsedEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parsedEntry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresTextAfterEntry ()
name|void
name|parseIgnoresTextAfterEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author={Ed von Test}}"
operator|+
literal|"comment{some text and \\latex"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|parsedEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parsedEntry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Ed von Test"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseConvertsNewlineToSpace ()
name|void
name|parseConvertsNewlineToSpace
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,a = {a\nb}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"a b"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseConvertsMultipleNewlinesToSpace ()
name|void
name|parseConvertsMultipleNewlinesToSpace
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,a = {a\n\nb},"
operator|+
literal|"b = {a\n \nb},"
operator|+
literal|"c = {a \n \n b}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"a b"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"a b"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"a b"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseConvertsTabToSpace ()
name|void
name|parseConvertsTabToSpace
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,a = {a\tb}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"a b"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseConvertsMultipleTabsToSpace ()
name|void
name|parseConvertsMultipleTabsToSpace
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,a = {a\t\tb},"
operator|+
literal|"b = {a\t \tb},"
operator|+
literal|"c = {a \t \t b}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"a b"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"a b"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"a b"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parsePreservesMultipleSpacesInNonWrappableField ()
name|void
name|parsePreservesMultipleSpacesInNonWrappableField
parameter_list|()
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|importFormatPreferences
operator|.
name|getFieldContentParserPreferences
argument_list|()
operator|.
name|getNonWrappableFields
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
name|BibtexParser
name|parser
init|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
name|fileMonitor
argument_list|)
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{canh05,file = {ups  sala}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"ups  sala"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parsePreservesTabsInAbstractField ()
name|void
name|parsePreservesTabsInAbstractField
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{canh05,abstract = {ups  \tsala}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"ups  \tsala"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parsePreservesNewlineInAbstractField ()
name|void
name|parsePreservesNewlineInAbstractField
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{canh05,abstract = {ups \nsala}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"ups "
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"sala"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseHandlesAccentsCorrectly ()
name|void
name|parseHandlesAccentsCorrectly
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{test,author = {H\'{e}lne Fiaux}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|parsedEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"H\'{e}lne Fiaux"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for #669      */
annotation|@
name|Test
DECL|method|parsePreambleAndEntryWithoutNewLine ()
name|void
name|parsePreambleAndEntryWithoutNewLine
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@preamble{some text and \\latex}@article{test,author = {H\'{e}lne Fiaux}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"some text and \\latex"
argument_list|)
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"article"
argument_list|,
name|parsedEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"H\'{e}lne Fiaux"
argument_list|)
argument_list|,
name|parsedEntry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseFileHeaderAndPreambleWithoutNewLine ()
name|void
name|parseFileHeaderAndPreambleWithoutNewLine
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"\\% Encoding: US-ASCII@preamble{some text and \\latex}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"some text and \\latex"
argument_list|)
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseSavesEntryInParsedSerialization ()
name|void
name|parseSavesEntryInParsedSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testEntry
init|=
literal|"@article{test,author={Ed von Test}}"
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|testEntry
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testEntry
argument_list|,
name|parsedEntry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseSavesOneNewlineAfterEntryInParsedSerialization ()
name|void
name|parseSavesOneNewlineAfterEntryInParsedSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testEntry
init|=
literal|"@article{test,author={Ed von Test}}"
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|testEntry
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testEntry
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|parsedEntry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseSavesNewlinesBeforeEntryInParsedSerialization ()
name|void
name|parseSavesNewlinesBeforeEntryInParsedSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testEntry
init|=
literal|"@article{test,author={Ed von Test}}"
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|testEntry
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|testEntry
argument_list|,
name|parsedEntry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRemovesEncodingLineInParsedSerialization ()
name|void
name|parseRemovesEncodingLineInParsedSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testEntry
init|=
literal|"@article{test,author={Ed von Test}}"
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|SavePreferences
operator|.
name|ENCODING_PREFIX
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|testEntry
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|testEntry
argument_list|,
name|parsedEntry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseSavesNewlinesBetweenEntriesInParsedSerialization ()
name|void
name|parseSavesNewlinesBetweenEntriesInParsedSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testEntryOne
init|=
literal|"@article{test1,author={Ed von Test}}"
decl_stmt|;
name|String
name|testEntryTwo
init|=
literal|"@article{test2,author={Ed von Test}}"
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|testEntryOne
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|testEntryTwo
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|BibEntry
argument_list|>
name|iterator
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BibEntry
name|first
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BibEntry
name|second
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Sort them because we can't be sure about the order
if|if
condition|(
name|first
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|equals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
condition|)
block|{
name|BibEntry
name|tmp
init|=
name|first
decl_stmt|;
name|first
operator|=
name|second
expr_stmt|;
name|second
operator|=
name|tmp
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testEntryOne
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|first
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|testEntryTwo
argument_list|,
name|second
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresWhitespaceInEpilogue ()
name|void
name|parseIgnoresWhitespaceInEpilogue
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"   "
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEpilog
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIgnoresWhitespaceInEpilogueAfterEntry ()
name|void
name|parseIgnoresWhitespaceInEpilogueAfterEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testEntry
init|=
literal|"@article{test,author={Ed von Test}}"
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|testEntry
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  "
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testEntry
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|parsedEntry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEpilog
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseTrimsWhitespaceInEpilogueAfterEntry ()
name|void
name|parseTrimsWhitespaceInEpilogueAfterEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testEntry
init|=
literal|"@article{test,author={Ed von Test}}"
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|testEntry
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|" epilogue "
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedEntries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|parsedEntry
init|=
name|parsedEntries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testEntry
operator|+
name|OS
operator|.
name|NEWLINE
argument_list|,
name|parsedEntry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"epilogue"
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEpilog
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesSaveActionsAfterEntry ()
name|void
name|parseRecognizesSaveActionsAfterEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|parserResult
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@InProceedings{6055279,\n"
operator|+
literal|"  Title                    = {Educational session 1},\n"
operator|+
literal|"  Booktitle                = {Custom Integrated Circuits Conference (CICC), 2011 IEEE},\n"
operator|+
literal|"  Year                     = {2011},\n"
operator|+
literal|"  Month                    = {Sept},\n"
operator|+
literal|"  Pages                    = {1-7},\n"
operator|+
literal|"  Abstract                 = {Start of the above-titled section of the conference proceedings record.},\n"
operator|+
literal|"  DOI                      = {10.1109/CICC.2011.6055279},\n"
operator|+
literal|"  ISSN                     = {0886-5930}\n"
operator|+
literal|"}\n"
operator|+
literal|"\n"
operator|+
literal|"@comment{jabref-meta: saveActions:enabled;title[lower_case]}"
argument_list|)
argument_list|)
decl_stmt|;
name|FieldFormatterCleanups
name|saveActions
init|=
name|parserResult
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSaveActions
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|saveActions
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|FieldFormatterCleanup
argument_list|(
literal|"title"
argument_list|,
operator|new
name|LowerCaseFormatter
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|saveActions
operator|.
name|getConfiguredActions
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|integrationTestSaveActions ()
name|void
name|integrationTestSaveActions
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|parserResult
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@comment{jabref-meta: saveActions:enabled;title[lower_case]}"
argument_list|)
argument_list|)
decl_stmt|;
name|FieldFormatterCleanups
name|saveActions
init|=
name|parserResult
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSaveActions
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|saveActions
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|FieldFormatterCleanup
argument_list|(
literal|"title"
argument_list|,
operator|new
name|LowerCaseFormatter
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|saveActions
operator|.
name|getConfiguredActions
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|integrationTestCustomEntryType ()
name|void
name|integrationTestCustomEntryType
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@comment{jabref-entrytype: Lecturenotes: req[author;title] opt[language;url]}"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|EntryType
argument_list|>
name|customEntryTypes
init|=
name|result
operator|.
name|getEntryTypes
argument_list|()
decl_stmt|;
name|EntryType
name|entryType
init|=
name|customEntryTypes
operator|.
name|get
argument_list|(
literal|"Lecturenotes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|customEntryTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lecturenotes"
argument_list|,
name|customEntryTypes
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lecturenotes"
argument_list|,
name|entryType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|)
argument_list|)
argument_list|,
name|entryType
operator|.
name|getRequiredFields
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"language"
argument_list|,
literal|"url"
argument_list|)
argument_list|)
argument_list|,
name|entryType
operator|.
name|getOptionalFields
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|integrationTestSaveOrderConfig ()
name|void
name|integrationTestSaveOrderConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@Comment{jabref-meta: saveOrderConfig:specified;author;false;year;true;abstract;false;}"
argument_list|)
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|SaveOrderConfig
argument_list|>
name|saveOrderConfig
init|=
name|result
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSaveOrderConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|SaveOrderConfig
argument_list|(
literal|false
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
literal|"author"
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
literal|"year"
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
literal|"abstract"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
name|saveOrderConfig
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|integrationTestCustomKeyPattern ()
name|void
name|integrationTestCustomKeyPattern
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@comment{jabref-meta: keypattern_article:articleTest;}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@comment{jabref-meta: keypatterndefault:test;}"
argument_list|)
argument_list|)
decl_stmt|;
name|GlobalBibtexKeyPattern
name|pattern
init|=
name|mock
argument_list|(
name|GlobalBibtexKeyPattern
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractBibtexKeyPattern
name|bibtexKeyPattern
init|=
name|result
operator|.
name|getMetaData
argument_list|()
operator|.
name|getCiteKeyPattern
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|AbstractBibtexKeyPattern
name|expectedPattern
init|=
operator|new
name|DatabaseBibtexKeyPattern
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|expectedPattern
operator|.
name|setDefaultValue
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|expectedPattern
operator|.
name|addBibtexKeyPattern
argument_list|(
literal|"article"
argument_list|,
literal|"articleTest"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPattern
argument_list|,
name|bibtexKeyPattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|integrationTestBiblatexMode ()
name|void
name|integrationTestBiblatexMode
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@comment{jabref-meta: databaseType:biblatex;}"
argument_list|)
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|BibDatabaseMode
argument_list|>
name|mode
init|=
name|result
operator|.
name|getMetaData
argument_list|()
operator|.
name|getMode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|,
name|mode
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|integrationTestGroupTree ()
name|void
name|integrationTestGroupTree
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@comment{jabref-meta: groupsversion:3;}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@comment{jabref-meta: groupstree:"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"0 AllEntriesGroup:;"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"1 KeywordGroup:FrÃ©chet\\;0\\;keywords\\;FrechetSpace\\;0\\;1\\;;"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"1 KeywordGroup:Invariant theory\\;0\\;keywords\\;GIT\\;0\\;0\\;;"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"1 ExplicitGroup:TestGroup\\;0\\;Key1\\;Key2\\;;"
operator|+
literal|"}"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupTreeNode
name|root
init|=
name|result
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|AllEntriesGroup
argument_list|(
literal|"All entries"
argument_list|)
argument_list|,
name|root
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|root
operator|.
name|getNumberOfChildren
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RegexKeywordGroup
argument_list|(
literal|"FrÃ©chet"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|"keywords"
argument_list|,
literal|"FrechetSpace"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|WordKeywordGroup
argument_list|(
literal|"Invariant theory"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|"keywords"
argument_list|,
literal|"GIT"
argument_list|,
literal|false
argument_list|,
literal|','
argument_list|,
literal|false
argument_list|)
argument_list|,
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Key1"
argument_list|,
literal|"Key2"
argument_list|)
argument_list|,
operator|(
operator|(
name|ExplicitGroup
operator|)
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getGroup
argument_list|()
operator|)
operator|.
name|getLegacyEntryKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|integrationTestProtectedFlag ()
name|void
name|integrationTestProtectedFlag
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@comment{jabref-meta: protectedFlag:true;}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getMetaData
argument_list|()
operator|.
name|isProtected
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|integrationTestContentSelectors ()
name|void
name|integrationTestContentSelectors
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@Comment{jabref-meta: selector_status:approved;captured;received;status;}"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|"approved"
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|"captured"
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|"received"
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|"status"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
argument_list|,
name|result
operator|.
name|getMetaData
argument_list|()
operator|.
name|getContentSelectors
argument_list|()
operator|.
name|getSelectorValuesForField
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseReallyUnknownType ()
name|void
name|parseReallyUnknownType
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bibtexEntry
init|=
literal|"@ReallyUnknownType{test,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|" Comment                  = {testentry}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|parser
operator|.
name|parseEntries
argument_list|(
name|bibtexEntry
argument_list|)
decl_stmt|;
name|BibEntry
name|expectedEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|expectedEntry
operator|.
name|setType
argument_list|(
literal|"Reallyunknowntype"
argument_list|)
expr_stmt|;
name|expectedEntry
operator|.
name|setCiteKey
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|expectedEntry
operator|.
name|setField
argument_list|(
literal|"comment"
argument_list|,
literal|"testentry"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expectedEntry
argument_list|)
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseOtherTypeTest ()
name|void
name|parseOtherTypeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bibtexEntry
init|=
literal|"@Other{test,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|" Comment                  = {testentry}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|parser
operator|.
name|parseEntries
argument_list|(
name|bibtexEntry
argument_list|)
decl_stmt|;
name|BibEntry
name|expectedEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|expectedEntry
operator|.
name|setType
argument_list|(
literal|"Other"
argument_list|)
expr_stmt|;
name|expectedEntry
operator|.
name|setCiteKey
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|expectedEntry
operator|.
name|setField
argument_list|(
literal|"comment"
argument_list|,
literal|"testentry"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expectedEntry
argument_list|)
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRecognizesDatabaseID ()
name|void
name|parseRecognizesDatabaseID
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expectedDatabaseID
init|=
literal|"q1w2e3r4t5z6"
decl_stmt|;
name|StringBuilder
name|sharedDatabaseFileContent
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"\\% DBID: "
argument_list|)
operator|.
name|append
argument_list|(
name|expectedDatabaseID
argument_list|)
operator|.
name|append
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
operator|.
name|append
argument_list|(
literal|"@Article{a}"
argument_list|)
decl_stmt|;
name|ParserResult
name|parserResult
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|sharedDatabaseFileContent
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|actualDatabaseID
init|=
name|parserResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getSharedDatabaseID
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedDatabaseID
argument_list|,
name|actualDatabaseID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseDoesNotRecognizeDatabaseIDasUserComment ()
name|void
name|parseDoesNotRecognizeDatabaseIDasUserComment
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|sharedDatabaseFileContent
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"\\% Encoding: UTF-8"
argument_list|)
operator|.
name|append
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
operator|.
name|append
argument_list|(
literal|"\\% DBID: q1w2e3r4t5z6"
argument_list|)
operator|.
name|append
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
operator|.
name|append
argument_list|(
literal|"@Article{a}"
argument_list|)
decl_stmt|;
name|ParserResult
name|parserResult
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|sharedDatabaseFileContent
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|parserResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUserComments
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|integrationTestFileDirectories ()
name|void
name|integrationTestFileDirectories
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@comment{jabref-meta: fileDirectory:\\\\Literature\\\\;}"
operator|+
literal|"@comment{jabref-meta: fileDirectory-defaultOwner-user:D:\\\\Documents;}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\\Literature\\"
argument_list|,
name|result
operator|.
name|getMetaData
argument_list|()
operator|.
name|getDefaultFileDirectory
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"D:\\Documents"
argument_list|,
name|result
operator|.
name|getMetaData
argument_list|()
operator|.
name|getUserFileDirectory
argument_list|(
literal|"defaultOwner-user"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseReturnsEntriesInSameOrder ()
name|void
name|parseReturnsEntriesInSameOrder
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|BibEntry
name|first
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|first
operator|.
name|setType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
name|first
operator|.
name|setCiteKey
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|BibEntry
name|second
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|second
operator|.
name|setType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
name|second
operator|.
name|setCiteKey
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|BibEntry
name|third
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|third
operator|.
name|setType
argument_list|(
literal|"inproceedings"
argument_list|)
expr_stmt|;
name|third
operator|.
name|setCiteKey
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|third
argument_list|)
expr_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@article{a}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@article{b}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@inProceedings{c}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parsePrecedingComment ()
name|void
name|parsePrecedingComment
parameter_list|()
throws|throws
name|IOException
block|{
comment|// @formatter:off
name|String
name|bibtexEntry
init|=
literal|"% Some random comment that should stay here"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{test,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Author                   = {Foo Bar},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Journal                  = {International Journal of Something},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Note                     = {some note},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Number                   = {1}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
decl_stmt|;
comment|// @formatter:on
comment|// read in bibtex string
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|bibtexEntry
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|entries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Foo Bar"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bibtexEntry
argument_list|,
name|entry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseCommentAndEntryInOneLine ()
name|void
name|parseCommentAndEntryInOneLine
parameter_list|()
throws|throws
name|IOException
block|{
comment|// @formatter:off
name|String
name|bibtexEntry
init|=
literal|"Some random comment that should stay here @Article{test,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Author                   = {Foo Bar},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Journal                  = {International Journal of Something},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Note                     = {some note},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Number                   = {1}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
decl_stmt|;
comment|// @formatter:on
comment|// read in bibtex string
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|bibtexEntry
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|entries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"Foo Bar"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bibtexEntry
argument_list|,
name|entry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|preserveEncodingPrefixInsideEntry ()
name|void
name|preserveEncodingPrefixInsideEntry
parameter_list|()
throws|throws
name|ParseException
block|{
name|BibEntry
name|expected
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setCiteKey
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
name|SavePreferences
operator|.
name|ENCODING_PREFIX
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parsed
init|=
name|parser
operator|.
name|parseEntries
argument_list|(
literal|"@article{test,author={"
operator|+
name|SavePreferences
operator|.
name|ENCODING_PREFIX
operator|+
literal|"}}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseBracketedComment ()
name|void
name|parseBracketedComment
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|commentText
init|=
literal|"@Comment{someComment}"
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|commentText
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|commentText
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEpilog
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRegularCommentBeforeEntry ()
name|void
name|parseRegularCommentBeforeEntry
parameter_list|()
throws|throws
name|IOException
block|{
comment|// @formatter:off
name|String
name|bibtexEntry
init|=
literal|"@Comment{someComment} "
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{test,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Author                   = {Foo Bar},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Journal                  = {International Journal of Something},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Note                     = {some note},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Number                   = {1}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
decl_stmt|;
comment|// @formatter:on
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|bibtexEntry
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|entries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|bibtexEntry
argument_list|,
name|entry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseCommentWithoutBrackets ()
name|void
name|parseCommentWithoutBrackets
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|commentText
init|=
literal|"@Comment someComment"
decl_stmt|;
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|commentText
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|commentText
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEpilog
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseCommentWithoutBracketsBeforeEntry ()
name|void
name|parseCommentWithoutBracketsBeforeEntry
parameter_list|()
throws|throws
name|IOException
block|{
comment|// @formatter:off
name|String
name|bibtexEntry
init|=
literal|"@Comment someComment  "
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{test,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Author                   = {Foo Bar},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Journal                  = {International Journal of Something},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Note                     = {some note},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Number                   = {1}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
decl_stmt|;
comment|// @formatter:on
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|bibtexEntry
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|entries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|bibtexEntry
argument_list|,
name|entry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseCommentContainingEntries ()
name|void
name|parseCommentContainingEntries
parameter_list|()
throws|throws
name|IOException
block|{
comment|// @formatter:off
name|String
name|bibtexEntry
init|=
literal|"@Comment{@article{myarticle,}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@inproceedings{blabla, title={the proceedings of blabla}; }"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"} "
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{test,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Author                   = {Foo Bar},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Journal                  = {International Journal of Something},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Note                     = {some note},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Number                   = {1}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
decl_stmt|;
comment|// @formatter:on
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|bibtexEntry
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|entries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|bibtexEntry
argument_list|,
name|entry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseCommentContainingEntriesAndAtSymbols ()
name|void
name|parseCommentContainingEntriesAndAtSymbols
parameter_list|()
throws|throws
name|IOException
block|{
comment|// @formatter:off
name|String
name|bibtexEntry
init|=
literal|"@Comment{@article{myarticle,}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@inproceedings{blabla, title={the proceedings of bl@bl@}; }"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"} "
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"@Article{test,"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Author                   = {Foo@Bar},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Journal                  = {International Journal of Something},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Note                     = {some note},"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"  Number                   = {1}"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"}"
decl_stmt|;
comment|// @formatter:on
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|bibtexEntry
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
name|entries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|bibtexEntry
argument_list|,
name|entry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseEmptyPreambleLeadsToEmpty ()
name|void
name|parseEmptyPreambleLeadsToEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"@preamble{}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseEmptyFileLeadsToPreamble ()
name|void
name|parseEmptyFileLeadsToPreamble
parameter_list|()
throws|throws
name|IOException
block|{
name|ParserResult
name|result
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseYearWithMonthString ()
name|void
name|parseYearWithMonthString
parameter_list|()
throws|throws
name|Exception
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|result
init|=
name|parser
operator|.
name|parseSingleEntry
argument_list|(
literal|"@ARTICLE{HipKro03, year = {2003}, month = #FEB# }"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Date
argument_list|(
literal|2003
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|()
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseYearWithMonthNumber ()
name|void
name|parseYearWithMonthNumber
parameter_list|()
throws|throws
name|Exception
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|result
init|=
name|parser
operator|.
name|parseSingleEntry
argument_list|(
literal|"@ARTICLE{HipKro03, year = {2003}, month = 2 }"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Date
argument_list|(
literal|2003
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|()
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseYear ()
name|void
name|parseYear
parameter_list|()
throws|throws
name|Exception
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|result
init|=
name|parser
operator|.
name|parseSingleEntry
argument_list|(
literal|"@ARTICLE{HipKro03, year = {2003} }"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Date
argument_list|(
literal|2003
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|()
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

