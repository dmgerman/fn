begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|DummyFileUpdateMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Answers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|DatabaseFileLookupTest
class|class
name|DatabaseFileLookupTest
block|{
DECL|field|database
specifier|private
name|BibDatabase
name|database
decl_stmt|;
DECL|field|entries
specifier|private
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
decl_stmt|;
DECL|field|entry1
specifier|private
name|BibEntry
name|entry1
decl_stmt|;
DECL|field|entry2
specifier|private
name|BibEntry
name|entry2
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ParserResult
name|result
init|=
operator|new
name|BibtexImporter
argument_list|(
name|mock
argument_list|(
name|ImportFormatPreferences
operator|.
name|class
argument_list|,
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
argument_list|)
argument_list|,
operator|new
name|DummyFileUpdateMonitor
argument_list|()
argument_list|)
operator|.
name|importDatabase
argument_list|(
name|ImportDataTest
operator|.
name|UNLINKED_FILES_TEST_BIB
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|database
operator|=
name|result
operator|.
name|getDatabase
argument_list|()
expr_stmt|;
name|entries
operator|=
name|database
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|entry1
operator|=
name|database
operator|.
name|getEntryByKey
argument_list|(
literal|"entry1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|entry2
operator|=
name|database
operator|.
name|getEntryByKey
argument_list|(
literal|"entry2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the prerequisites of this test-class itself.      */
annotation|@
name|Test
DECL|method|testTestDatabase ()
name|void
name|testTestDatabase
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|database
operator|.
name|getEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entry1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entry2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

