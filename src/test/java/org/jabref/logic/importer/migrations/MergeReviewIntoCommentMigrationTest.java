begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.migrations
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|migrations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Disabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|MergeReviewIntoCommentMigrationTest
class|class
name|MergeReviewIntoCommentMigrationTest
block|{
DECL|field|action
specifier|private
name|MergeReviewIntoCommentMigration
name|action
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|action
operator|=
operator|new
name|MergeReviewIntoCommentMigration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noFields ()
specifier|public
name|void
name|noFields
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
name|createMinimalBibEntry
argument_list|()
decl_stmt|;
name|ParserResult
name|actualParserResult
init|=
operator|new
name|ParserResult
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|)
decl_stmt|;
name|action
operator|.
name|performMigration
argument_list|(
name|actualParserResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
argument_list|,
name|actualParserResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
literal|"Entry1"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewField ()
specifier|public
name|void
name|reviewField
parameter_list|()
block|{
name|BibEntry
name|actualEntry
init|=
name|createMinimalBibEntry
argument_list|()
decl_stmt|;
name|actualEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|REVIEW
argument_list|,
literal|"My Review"
argument_list|)
expr_stmt|;
name|ParserResult
name|actualParserResult
init|=
operator|new
name|ParserResult
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|actualEntry
argument_list|)
argument_list|)
decl_stmt|;
name|BibEntry
name|expectedEntry
init|=
name|createMinimalBibEntry
argument_list|()
decl_stmt|;
name|expectedEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|COMMENT
argument_list|,
literal|"My Review"
argument_list|)
expr_stmt|;
name|action
operator|.
name|performMigration
argument_list|(
name|actualParserResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedEntry
argument_list|,
name|actualParserResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
literal|"Entry1"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commentField ()
specifier|public
name|void
name|commentField
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
name|createMinimalBibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|COMMENT
argument_list|,
literal|"My Comment"
argument_list|)
expr_stmt|;
name|ParserResult
name|actualParserResult
init|=
operator|new
name|ParserResult
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|)
decl_stmt|;
name|action
operator|.
name|performMigration
argument_list|(
name|actualParserResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
argument_list|,
name|actualParserResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
literal|"Entry1"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Disabled
argument_list|(
literal|"Re-enable if the MergeReviewIntoCommentMigration.mergeCommentFieldIfPresent() does not block and wait for user input."
argument_list|)
DECL|method|reviewAndCommentField ()
specifier|public
name|void
name|reviewAndCommentField
parameter_list|()
block|{
name|BibEntry
name|actualEntry
init|=
name|createMinimalBibEntry
argument_list|()
decl_stmt|;
name|actualEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|REVIEW
argument_list|,
literal|"My Review"
argument_list|)
expr_stmt|;
name|actualEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|COMMENT
argument_list|,
literal|"My Comment"
argument_list|)
expr_stmt|;
name|ParserResult
name|actualParserResult
init|=
operator|new
name|ParserResult
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|actualEntry
argument_list|)
argument_list|)
decl_stmt|;
name|BibEntry
name|expectedEntry
init|=
name|createMinimalBibEntry
argument_list|()
decl_stmt|;
name|expectedEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|COMMENT
argument_list|,
literal|"My Comment\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Review"
argument_list|)
operator|+
literal|":\nMy Review"
argument_list|)
expr_stmt|;
name|action
operator|.
name|performMigration
argument_list|(
name|actualParserResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedEntry
argument_list|,
name|actualParserResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
literal|"Entry1"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createMinimalBibEntry ()
specifier|private
name|BibEntry
name|createMinimalBibEntry
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"Entry1"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
literal|"A random entry!"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
literal|"JabRef DEVELOPERS"
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
block|}
end_class

end_unit

