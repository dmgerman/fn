begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fetcher
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|FetcherException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BiblatexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|testutils
operator|.
name|category
operator|.
name|FetcherTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|FetcherTests
operator|.
name|class
argument_list|)
DECL|class|ArXivTest
specifier|public
class|class
name|ArXivTest
block|{
DECL|field|expectedException
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|finder
specifier|private
name|ArXiv
name|finder
decl_stmt|;
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
DECL|field|sliceTheoremPaper
specifier|private
name|BibEntry
name|sliceTheoremPaper
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|ImportFormatPreferences
name|importFormatPreferences
init|=
name|mock
argument_list|(
name|ImportFormatPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|importFormatPreferences
operator|.
name|getKeywordSeparator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|finder
operator|=
operator|new
name|ArXiv
argument_list|(
name|importFormatPreferences
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|sliceTheoremPaper
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|sliceTheoremPaper
operator|.
name|setType
argument_list|(
name|BiblatexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|sliceTheoremPaper
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Tobias Diez"
argument_list|)
expr_stmt|;
name|sliceTheoremPaper
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Slice theorem for FrÃ©chet group actions and covariant symplectic field theory"
argument_list|)
expr_stmt|;
name|sliceTheoremPaper
operator|.
name|setField
argument_list|(
literal|"date"
argument_list|,
literal|"2014-05-09"
argument_list|)
expr_stmt|;
name|sliceTheoremPaper
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
literal|"A general slice theorem for the action of a Fr\\'echet Lie group on a Fr\\'echet manifolds is established. The Nash-Moser theorem provides the fundamental tool to generalize the result of Palais to this infinite-dimensional setting. The presented slice theorem is illustrated by its application to gauge theories: the action of the gauge transformation group admits smooth slices at every point and thus the gauge orbit space is stratified by Fr\\'echet manifolds. Furthermore, a covariant and symplectic formulation of classical field theory is proposed and extensively discussed. At the root of this novel framework is the incorporation of field degrees of freedom F and spacetime M into the product manifold F * M. The induced bigrading of differential forms is used in order to carry over the usual symplectic theory to this new setting. The examples of the Klein-Gordon field and general Yang-Mills theory illustrate that the presented approach conveniently handles the occurring symmetries."
argument_list|)
expr_stmt|;
name|sliceTheoremPaper
operator|.
name|setField
argument_list|(
literal|"eprint"
argument_list|,
literal|"1405.2249v1"
argument_list|)
expr_stmt|;
name|sliceTheoremPaper
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
literal|"online:http\\://arxiv.org/pdf/1405.2249v1:PDF"
argument_list|)
expr_stmt|;
name|sliceTheoremPaper
operator|.
name|setField
argument_list|(
literal|"eprinttype"
argument_list|,
literal|"arXiv"
argument_list|)
expr_stmt|;
name|sliceTheoremPaper
operator|.
name|setField
argument_list|(
literal|"eprintclass"
argument_list|,
literal|"math-ph"
argument_list|)
expr_stmt|;
name|sliceTheoremPaper
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
literal|"math-ph, math.DG, math.MP, math.SG, 58B99, 58Z05, 58B25, 22E65, 58D19, 53D20, 53D42"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doiNotPresent ()
specifier|public
name|void
name|doiNotPresent
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|finder
operator|.
name|findFullText
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|rejectNullParameter ()
specifier|public
name|void
name|rejectNullParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|finder
operator|.
name|findFullText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findByDOI ()
specifier|public
name|void
name|findByDOI
parameter_list|()
throws|throws
name|IOException
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
literal|"10.1529/biophysj.104.047340"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://arxiv.org/pdf/cond-mat/0406246v1"
argument_list|)
argument_list|)
argument_list|,
name|finder
operator|.
name|findFullText
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findByEprint ()
specifier|public
name|void
name|findByEprint
parameter_list|()
throws|throws
name|IOException
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"eprint"
argument_list|,
literal|"1603.06570"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://arxiv.org/pdf/1603.06570v1"
argument_list|)
argument_list|)
argument_list|,
name|finder
operator|.
name|findFullText
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findByEprintWithPrefix ()
specifier|public
name|void
name|findByEprintWithPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"eprint"
argument_list|,
literal|"arXiv:1603.06570"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://arxiv.org/pdf/1603.06570v1"
argument_list|)
argument_list|)
argument_list|,
name|finder
operator|.
name|findFullText
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findByEprintWithUnknownDOI ()
specifier|public
name|void
name|findByEprintWithUnknownDOI
parameter_list|()
throws|throws
name|IOException
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
literal|"10.1529/unknown"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"eprint"
argument_list|,
literal|"1603.06570"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://arxiv.org/pdf/1603.06570v1"
argument_list|)
argument_list|)
argument_list|,
name|finder
operator|.
name|findFullText
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notFoundByUnknownDOI ()
specifier|public
name|void
name|notFoundByUnknownDOI
parameter_list|()
throws|throws
name|IOException
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
literal|"10.1529/unknown"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|finder
operator|.
name|findFullText
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notFoundByUnknownId ()
specifier|public
name|void
name|notFoundByUnknownId
parameter_list|()
throws|throws
name|IOException
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"eprint"
argument_list|,
literal|"1234.12345"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|finder
operator|.
name|findFullText
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchEntryByPartOfTitle ()
specifier|public
name|void
name|searchEntryByPartOfTitle
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|sliceTheoremPaper
argument_list|)
argument_list|,
name|finder
operator|.
name|performSearch
argument_list|(
literal|"ti:\"slice theorem for Frechet\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchEntryByPartOfTitleWithAcuteAccent ()
specifier|public
name|void
name|searchEntryByPartOfTitleWithAcuteAccent
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|sliceTheoremPaper
argument_list|)
argument_list|,
name|finder
operator|.
name|performSearch
argument_list|(
literal|"ti:\"slice theorem for FrÃ©chet\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchEntryByOldId ()
specifier|public
name|void
name|searchEntryByOldId
parameter_list|()
throws|throws
name|Exception
block|{
name|BibEntry
name|expected
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setType
argument_list|(
name|BiblatexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"H1 Collaboration"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Multi-Electron Production at High Transverse Momenta in ep Collisions at HERA"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"date"
argument_list|,
literal|"2003-07-07"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
literal|"Multi-electron production is studied at high electron transverse momentum in positron- and electron-proton collisions using the H1 detector at HERA. The data correspond to an integrated luminosity of 115 pb-1. Di-electron and tri-electron event yields are measured. Cross sections are derived in a restricted phase space region dominated by photon-photon collisions. In general good agreement is found with the Standard Model predictions. However, for electron pair invariant masses above 100 GeV, three di-electron events and three tri-electron events are observed, compared to Standard Model expectations of 0.30 \\pm 0.04 and 0.23 \\pm 0.04, respectively."
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"eprint"
argument_list|,
literal|"hep-ex/0307015v1"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
literal|"online:http\\://arxiv.org/pdf/hep-ex/0307015v1:PDF"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"eprinttype"
argument_list|,
literal|"arXiv"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"eprintclass"
argument_list|,
literal|"hep-ex"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
literal|"hep-ex"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
literal|"10.1140/epjc/s2003-01326-x"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
literal|"journaltitle"
argument_list|,
literal|"Eur.Phys.J.C31:17-29,2003"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|expected
argument_list|)
argument_list|,
name|finder
operator|.
name|performSearchById
argument_list|(
literal|"hep-ex/0307015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchEntryByIdWith4DigitsAndVersion ()
specifier|public
name|void
name|searchEntryByIdWith4DigitsAndVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|sliceTheoremPaper
argument_list|)
argument_list|,
name|finder
operator|.
name|performSearchById
argument_list|(
literal|"1405.2249v1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchEntryByIdWith4Digits ()
specifier|public
name|void
name|searchEntryByIdWith4Digits
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|sliceTheoremPaper
argument_list|)
argument_list|,
name|finder
operator|.
name|performSearchById
argument_list|(
literal|"1405.2249"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchEntryByIdWith4DigitsAndPrefix ()
specifier|public
name|void
name|searchEntryByIdWith4DigitsAndPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|sliceTheoremPaper
argument_list|)
argument_list|,
name|finder
operator|.
name|performSearchById
argument_list|(
literal|"arXiv:1405.2249"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchEntryByIdWith5Digits ()
specifier|public
name|void
name|searchEntryByIdWith5Digits
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"An Optimal Convergence Theorem for Mean Curvature Flow of Arbitrary Codimension in Hyperbolic Spaces"
argument_list|)
argument_list|,
name|finder
operator|.
name|performSearchById
argument_list|(
literal|"1503.06747"
argument_list|)
operator|.
name|flatMap
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchWithMalformedIdThrowsException ()
specifier|public
name|void
name|searchWithMalformedIdThrowsException
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|FetcherException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"incorrect id format"
argument_list|)
expr_stmt|;
name|finder
operator|.
name|performSearchById
argument_list|(
literal|"123412345"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

