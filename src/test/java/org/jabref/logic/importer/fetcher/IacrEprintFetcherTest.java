begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fetcher
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|FetcherException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BiblatexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|testutils
operator|.
name|category
operator|.
name|FetcherTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Disabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|DisplayName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Answers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
annotation|@
name|FetcherTest
DECL|class|IacrEprintFetcherTest
specifier|public
class|class
name|IacrEprintFetcherTest
block|{
DECL|field|fetcher
specifier|private
name|IacrEprintFetcher
name|fetcher
decl_stmt|;
DECL|field|abram2017
specifier|private
name|BibEntry
name|abram2017
decl_stmt|;
DECL|field|beierle2016
specifier|private
name|BibEntry
name|beierle2016
decl_stmt|;
DECL|field|delgado2017
specifier|private
name|BibEntry
name|delgado2017
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|fetcher
operator|=
operator|new
name|IacrEprintFetcher
argument_list|(
name|mock
argument_list|(
name|ImportFormatPreferences
operator|.
name|class
argument_list|,
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
argument_list|)
argument_list|)
expr_stmt|;
name|abram2017
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|abram2017
operator|.
name|setType
argument_list|(
name|BiblatexEntryTypes
operator|.
name|MISC
argument_list|)
expr_stmt|;
name|abram2017
operator|.
name|setField
argument_list|(
literal|"bibtexkey"
argument_list|,
literal|"cryptoeprint:2017:1118"
argument_list|)
expr_stmt|;
name|abram2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|abram2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
literal|"Ittai Abraham and Dahlia Malkhi and Kartik Nayak and Ling Ren and Alexander Spiegelman"
argument_list|)
expr_stmt|;
name|abram2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|,
literal|"2017-11-18"
argument_list|)
expr_stmt|;
name|abram2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|HOWPUBLISHED
argument_list|,
literal|"Cryptology ePrint Archive, Report 2017/1118"
argument_list|)
expr_stmt|;
name|abram2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|NOTE
argument_list|,
literal|"\\url{https://eprint.iacr.org/2017/1118}"
argument_list|)
expr_stmt|;
name|abram2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
literal|"Solida: A Blockchain Protocol Based on Reconfigurable Byzantine Consensus"
argument_list|)
expr_stmt|;
name|abram2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|,
literal|"https://eprint.iacr.org/2017/1118/20171124:064527"
argument_list|)
expr_stmt|;
name|abram2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|VERSION
argument_list|,
literal|"20171124:064527"
argument_list|)
expr_stmt|;
name|abram2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
literal|"2017"
argument_list|)
expr_stmt|;
name|beierle2016
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|beierle2016
operator|.
name|setType
argument_list|(
name|BiblatexEntryTypes
operator|.
name|MISC
argument_list|)
expr_stmt|;
name|beierle2016
operator|.
name|setField
argument_list|(
literal|"bibtexkey"
argument_list|,
literal|"cryptoeprint:2016:119"
argument_list|)
expr_stmt|;
name|beierle2016
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|beierle2016
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
literal|"Christof Beierle and Thorsten Kranz and Gregor Leander"
argument_list|)
expr_stmt|;
name|beierle2016
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|,
literal|"2017-02-17"
argument_list|)
expr_stmt|;
name|beierle2016
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|HOWPUBLISHED
argument_list|,
literal|"Cryptology ePrint Archive, Report 2016/119"
argument_list|)
expr_stmt|;
name|beierle2016
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|NOTE
argument_list|,
literal|"\\url{https://eprint.iacr.org/2016/119}"
argument_list|)
expr_stmt|;
name|beierle2016
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
literal|"Lightweight Multiplication in GF(2^n) with Applications to MDS Matrices"
argument_list|)
expr_stmt|;
name|beierle2016
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|,
literal|"https://eprint.iacr.org/2016/119/20170217:150415"
argument_list|)
expr_stmt|;
name|beierle2016
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|VERSION
argument_list|,
literal|"20170217:150415"
argument_list|)
expr_stmt|;
name|beierle2016
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
literal|"2016"
argument_list|)
expr_stmt|;
name|delgado2017
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|delgado2017
operator|.
name|setType
argument_list|(
name|BiblatexEntryTypes
operator|.
name|MISC
argument_list|)
expr_stmt|;
name|delgado2017
operator|.
name|setField
argument_list|(
literal|"bibtexkey"
argument_list|,
literal|"cryptoeprint:2017:1095"
argument_list|)
expr_stmt|;
name|delgado2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|delgado2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
literal|"Sergi Delgado-Segura and Cristina PÃ©rez-SolÃ  and Guillermo Navarro-Arribas and Jordi Herrera-JoancomartÃ­"
argument_list|)
expr_stmt|;
name|delgado2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|,
literal|"2018-01-19"
argument_list|)
expr_stmt|;
name|delgado2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|HOWPUBLISHED
argument_list|,
literal|"Cryptology ePrint Archive, Report 2017/1095"
argument_list|)
expr_stmt|;
name|delgado2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|NOTE
argument_list|,
literal|"\\url{https://eprint.iacr.org/2017/1095}"
argument_list|)
expr_stmt|;
name|delgado2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
literal|"Analysis of the Bitcoin UTXO set"
argument_list|)
expr_stmt|;
name|delgado2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|,
literal|"https://eprint.iacr.org/2017/1095/20180119:113352"
argument_list|)
expr_stmt|;
name|delgado2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|VERSION
argument_list|,
literal|"20180119:113352"
argument_list|)
expr_stmt|;
name|delgado2017
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
literal|"2017"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByIdWithValidId1 ()
specifier|public
name|void
name|searchByIdWithValidId1
parameter_list|()
throws|throws
name|FetcherException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|fetchedEntry
init|=
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|"Report 2017/1118 "
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fetchedEntry
operator|.
name|get
argument_list|()
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|fetchedEntry
operator|.
name|get
argument_list|()
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|abram2017
argument_list|)
argument_list|,
name|fetchedEntry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByIdWithValidId2 ()
specifier|public
name|void
name|searchByIdWithValidId2
parameter_list|()
throws|throws
name|FetcherException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|fetchedEntry
init|=
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|"iacr ePrint 2016/119"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fetchedEntry
operator|.
name|get
argument_list|()
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|fetchedEntry
operator|.
name|get
argument_list|()
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|beierle2016
argument_list|)
argument_list|,
name|fetchedEntry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByIdWithValidIdAndNonAsciiChars ()
specifier|public
name|void
name|searchByIdWithValidIdAndNonAsciiChars
parameter_list|()
throws|throws
name|FetcherException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|fetchedEntry
init|=
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|"some random 2017/1095 stuff around the id"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fetchedEntry
operator|.
name|get
argument_list|()
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|fetchedEntry
operator|.
name|get
argument_list|()
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|delgado2017
argument_list|)
argument_list|,
name|fetchedEntry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByIdWithEmptyIdFails ()
specifier|public
name|void
name|searchByIdWithEmptyIdFails
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|FetcherException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByIdWithInvalidReportNumberFails ()
specifier|public
name|void
name|searchByIdWithInvalidReportNumberFails
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|FetcherException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|"2016/1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByIdWithInvalidYearFails ()
specifier|public
name|void
name|searchByIdWithInvalidYearFails
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|FetcherException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|"16/115"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByIdWithInvalidIdFails ()
specifier|public
name|void
name|searchByIdWithInvalidIdFails
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|FetcherException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|"asdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchForNonexistentIdFails ()
specifier|public
name|void
name|searchForNonexistentIdFails
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|FetcherException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|"2016/6425"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetName ()
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|IacrEprintFetcher
operator|.
name|NAME
argument_list|,
name|fetcher
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByIdForWithdrawnPaperFails ()
specifier|public
name|void
name|searchByIdForWithdrawnPaperFails
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|FetcherException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|"1998/016"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|searchByIdWithOldHtmlFormatAndCheckDate ()
specifier|public
name|void
name|searchByIdWithOldHtmlFormatAndCheckDate
parameter_list|()
throws|throws
name|FetcherException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|fetchedEntry
init|=
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|"1997/006"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"1997-05-04"
argument_list|)
argument_list|,
name|fetchedEntry
operator|.
name|get
argument_list|()
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|DisplayName
argument_list|(
literal|"Get all entries with old HTML format (except withdrawn ones)"
argument_list|)
annotation|@
name|ParameterizedTest
argument_list|(
name|name
operator|=
literal|"Fetch for id: {0}"
argument_list|)
annotation|@
name|MethodSource
argument_list|(
literal|"allNonWithdrawnIdsWithOldHtmlFormat"
argument_list|)
annotation|@
name|Disabled
argument_list|(
literal|"Takes a lot of time - should only be called manually"
argument_list|)
DECL|method|searchByIdWithOldHtmlFormatWithoutDateCheck (String id)
specifier|public
name|void
name|searchByIdWithOldHtmlFormatWithoutDateCheck
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|FetcherException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|fetchedEntry
init|=
name|fetcher
operator|.
name|performSearchById
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fetchedEntry
operator|.
name|isPresent
argument_list|()
argument_list|,
literal|"Expected to get an entry for id "
operator|+
name|id
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|fetchedEntry
operator|.
name|get
argument_list|()
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|)
argument_list|,
literal|"Expected non empty date field, entry is\n"
operator|+
name|fetchedEntry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fetchedEntry
operator|.
name|get
argument_list|()
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|10
argument_list|,
literal|"Expected yyyy-MM-dd date format, entry is\n"
operator|+
name|fetchedEntry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|fetchedEntry
operator|.
name|get
argument_list|()
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|)
argument_list|,
literal|"Expected non empty abstract field, entry is\n"
operator|+
name|fetchedEntry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Helper method for allNonWithdrawnIdsWithOldHtmlFormat.      *      * @param year  The year of the generated IDs (e.g. 1996)      * @param maxId The maximum ID to generate in the given year (e.g. 112)      * @return A list of IDs in the from yyyy/iii (e.g. [1996/001, 1996/002, ..., 1996/112]      */
DECL|method|getIdsFor (int year, int maxId)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getIdsFor
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|maxId
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|maxId
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%04d/%03d"
argument_list|,
name|year
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Parameter provider (method name is passed as a string)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|allNonWithdrawnIdsWithOldHtmlFormat ()
specifier|private
specifier|static
name|Stream
argument_list|<
name|String
argument_list|>
name|allNonWithdrawnIdsWithOldHtmlFormat
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|withdrawnIds
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1998/016"
argument_list|,
literal|"1999/006"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ids
operator|.
name|addAll
argument_list|(
name|getIdsFor
argument_list|(
literal|1996
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|ids
operator|.
name|addAll
argument_list|(
name|getIdsFor
argument_list|(
literal|1997
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|ids
operator|.
name|addAll
argument_list|(
name|getIdsFor
argument_list|(
literal|1998
argument_list|,
literal|26
argument_list|)
argument_list|)
expr_stmt|;
name|ids
operator|.
name|addAll
argument_list|(
name|getIdsFor
argument_list|(
literal|1999
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|ids
operator|.
name|removeAll
argument_list|(
name|withdrawnIds
argument_list|)
expr_stmt|;
return|return
name|ids
operator|.
name|stream
argument_list|()
return|;
block|}
block|}
end_class

end_unit

