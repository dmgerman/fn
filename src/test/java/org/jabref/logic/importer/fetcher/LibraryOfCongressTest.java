begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fetcher
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|UnknownField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|testutils
operator|.
name|category
operator|.
name|FetcherTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|FetcherTest
DECL|class|LibraryOfCongressTest
specifier|public
class|class
name|LibraryOfCongressTest
block|{
DECL|field|fetcher
specifier|private
name|LibraryOfCongress
name|fetcher
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|ImportFormatPreferences
name|prefs
init|=
name|mock
argument_list|(
name|ImportFormatPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|prefs
operator|.
name|getKeywordSeparator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|fetcher
operator|=
operator|new
name|LibraryOfCongress
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|performSearchById ()
specifier|public
name|void
name|performSearchById
parameter_list|()
throws|throws
name|Exception
block|{
name|BibEntry
name|expected
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|ADDRESS
argument_list|,
literal|"Burlington, MA"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"West, Matthew"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|ISBN
argument_list|,
literal|"0123751063 (pbk.)"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
operator|new
name|UnknownField
argument_list|(
literal|"issuance"
argument_list|)
argument_list|,
literal|"monographic"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|KEYWORDS
argument_list|,
literal|"Database design, Data structures (Computer science)"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|LANGUAGE
argument_list|,
literal|"eng"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
operator|new
name|UnknownField
argument_list|(
literal|"lccn"
argument_list|)
argument_list|,
literal|"2010045158"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|NOTE
argument_list|,
literal|"Matthew West., Includes index."
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
operator|new
name|UnknownField
argument_list|(
literal|"oclc"
argument_list|)
argument_list|,
literal|"ocn665135773"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|PUBLISHER
argument_list|,
literal|"Morgan Kaufmann"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
operator|new
name|UnknownField
argument_list|(
literal|"source"
argument_list|)
argument_list|,
literal|"DLC"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
literal|"Developing high quality data models"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|,
literal|"2011"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|expected
argument_list|)
argument_list|,
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|"2010045158"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|performSearchByEmptyId ()
specifier|public
name|void
name|performSearchByEmptyId
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|performSearchByInvalidId ()
specifier|public
name|void
name|performSearchByInvalidId
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|fetcher
operator|.
name|performSearchById
argument_list|(
literal|"xxx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

