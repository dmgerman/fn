begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.util
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|paint
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AbstractGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AutomaticGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AutomaticKeywordGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AutomaticPersonsGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|ExplicitGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupHierarchyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|GroupsParserTest
specifier|public
class|class
name|GroupsParserTest
block|{
annotation|@
name|Test
comment|// For https://github.com/JabRef/jabref/issues/1681
DECL|method|fromStringParsesExplicitGroupWithEscapedCharacterInName ()
specifier|public
name|void
name|fromStringParsesExplicitGroupWithEscapedCharacterInName
parameter_list|()
throws|throws
name|Exception
block|{
name|ExplicitGroup
name|expected
init|=
operator|new
name|ExplicitGroup
argument_list|(
literal|"B{\\\"{o}}hmer"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|AbstractGroup
name|parsed
init|=
name|GroupsParser
operator|.
name|fromString
argument_list|(
literal|"ExplicitGroup:B{\\\\\"{o}}hmer;0;"
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
DECL|method|fromStringThrowsParseExceptionForNotEscapedGroupName ()
specifier|public
name|void
name|fromStringThrowsParseExceptionForNotEscapedGroupName
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupsParser
operator|.
name|fromString
argument_list|(
literal|"ExplicitGroup:slit\\\\;0\\;mertsch_slit2_2007\\;;"
argument_list|,
literal|','
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testImportSubGroups ()
specifier|public
name|void
name|testImportSubGroups
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|orderedData
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"0 AllEntriesGroup:"
argument_list|,
literal|"1 ExplicitGroup:1;0;"
argument_list|,
literal|"2 ExplicitGroup:2;0;"
argument_list|,
literal|"0 ExplicitGroup:3;0;"
argument_list|)
decl_stmt|;
comment|//Create group hierarchy:
comment|//  Level 0 Name: All entries
comment|//  Level 1 Name: 1
comment|//  Level 2 Name: 2
comment|//  Level 1 Name: 3
name|GroupTreeNode
name|rootNode
init|=
operator|new
name|GroupTreeNode
argument_list|(
operator|new
name|ExplicitGroup
argument_list|(
literal|"All entries"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|','
argument_list|)
argument_list|)
decl_stmt|;
name|AbstractGroup
name|firstSubGrpLvl1
init|=
operator|new
name|ExplicitGroup
argument_list|(
literal|"1"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|rootNode
operator|.
name|addSubgroup
argument_list|(
name|firstSubGrpLvl1
argument_list|)
expr_stmt|;
name|AbstractGroup
name|subLvl2
init|=
operator|new
name|ExplicitGroup
argument_list|(
literal|"2"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|rootNode
operator|.
name|getFirstChild
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|c
lambda|->
name|c
operator|.
name|addSubgroup
argument_list|(
name|subLvl2
argument_list|)
argument_list|)
expr_stmt|;
name|AbstractGroup
name|thirdSubGrpLvl1
init|=
operator|new
name|ExplicitGroup
argument_list|(
literal|"3"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|rootNode
operator|.
name|addSubgroup
argument_list|(
name|thirdSubGrpLvl1
argument_list|)
expr_stmt|;
name|GroupTreeNode
name|parsedNode
init|=
name|GroupsParser
operator|.
name|importGroups
argument_list|(
name|orderedData
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rootNode
operator|.
name|getChildren
argument_list|()
argument_list|,
name|parsedNode
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fromStringParsesExplicitGroupWithIconAndDesrcitpion ()
specifier|public
name|void
name|fromStringParsesExplicitGroupWithIconAndDesrcitpion
parameter_list|()
throws|throws
name|Exception
block|{
name|ExplicitGroup
name|expected
init|=
operator|new
name|ExplicitGroup
argument_list|(
literal|"myExplicitGroup"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|expected
operator|.
name|setIconCode
argument_list|(
literal|"test icon"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setExpanded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|ALICEBLUE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setDescription
argument_list|(
literal|"test description"
argument_list|)
expr_stmt|;
name|AbstractGroup
name|parsed
init|=
name|GroupsParser
operator|.
name|fromString
argument_list|(
literal|"StaticGroup:myExplicitGroup;0;1;0xf0f8ffff;test icon;test description;"
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fromStringParsesAutomaticKeywordGroup ()
specifier|public
name|void
name|fromStringParsesAutomaticKeywordGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|AutomaticGroup
name|expected
init|=
operator|new
name|AutomaticKeywordGroup
argument_list|(
literal|"myAutomaticGroup"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|"keywords"
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|AbstractGroup
name|parsed
init|=
name|GroupsParser
operator|.
name|fromString
argument_list|(
literal|"AutomaticKeywordGroup:myAutomaticGroup;0;keywords;,;1;;;;"
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fromStringParsesAutomaticPersonGroup ()
specifier|public
name|void
name|fromStringParsesAutomaticPersonGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|AutomaticPersonsGroup
name|expected
init|=
operator|new
name|AutomaticPersonsGroup
argument_list|(
literal|"myAutomaticGroup"
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
literal|"authors"
argument_list|)
decl_stmt|;
name|AbstractGroup
name|parsed
init|=
name|GroupsParser
operator|.
name|fromString
argument_list|(
literal|"AutomaticPersonsGroup:myAutomaticGroup;0;authors;1;;;;"
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
DECL|method|fromStringUnknownGroupThrowsException ()
specifier|public
name|void
name|fromStringUnknownGroupThrowsException
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupsParser
operator|.
name|fromString
argument_list|(
literal|"0 UnknownGroup:myUnknownGroup;0;;1;;;;"
argument_list|,
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

