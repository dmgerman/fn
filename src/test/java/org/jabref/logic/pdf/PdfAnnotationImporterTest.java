begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.pdf
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|pdf
operator|.
name|FileAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|pdf
operator|.
name|FileAnnotationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|PdfAnnotationImporterTest
specifier|public
class|class
name|PdfAnnotationImporterTest
block|{
DECL|field|importer
specifier|private
specifier|final
name|AnnotationImporter
name|importer
init|=
operator|new
name|PdfAnnotationImporter
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|invalidPath ()
specifier|public
name|void
name|invalidPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"/asdf/does/not/exist.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidDirectory ()
specifier|public
name|void
name|invalidDirectory
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidDocumentType ()
specifier|public
name|void
name|invalidDocumentType
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/write-protected.docx"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noAnnotationsWriteProtected ()
specifier|public
name|void
name|noAnnotationsWriteProtected
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/write-protected.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noAnnotationsEncrypted ()
specifier|public
name|void
name|noAnnotationsEncrypted
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/encrypted.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoAnnotationsThesisExample ()
specifier|public
name|void
name|twoAnnotationsThesisExample
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/thesis-example.pdf"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noAnnotationsMinimal ()
specifier|public
name|void
name|noAnnotationsMinimal
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/minimal.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inlineNoteMinimal ()
specifier|public
name|void
name|inlineNoteMinimal
parameter_list|()
block|{
specifier|final
name|FileAnnotation
name|expected
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"Linus Dietz"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|20
argument_list|,
literal|25
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"inline note annotation"
argument_list|,
name|FileAnnotationType
operator|.
name|FREETEXT
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/minimal-inlinenote.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|popupNoteMinimal ()
specifier|public
name|void
name|popupNoteMinimal
parameter_list|()
block|{
specifier|final
name|FileAnnotation
name|expected
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"Linus Dietz"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|20
argument_list|,
literal|17
argument_list|,
literal|24
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"A simple pop-up note"
argument_list|,
name|FileAnnotationType
operator|.
name|TEXT
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/minimal-popup.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|highlightMinimalFoxit ()
specifier|public
name|void
name|highlightMinimalFoxit
parameter_list|()
block|{
specifier|final
name|FileAnnotation
name|expectedLinkedAnnotation
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"lynyus"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|5
argument_list|,
literal|31
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"this is a foxit highlight"
argument_list|,
name|FileAnnotationType
operator|.
name|HIGHLIGHT
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileAnnotation
name|expected
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"lynyus"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|5
argument_list|,
literal|31
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"Hello"
argument_list|,
name|FileAnnotationType
operator|.
name|HIGHLIGHT
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|expectedLinkedAnnotation
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/minimal-foxithighlight.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|highlightNoNoteMinimal ()
specifier|public
name|void
name|highlightNoNoteMinimal
parameter_list|()
block|{
specifier|final
name|FileAnnotation
name|expectedLinkedAnnotation
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"Linus Dietz"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|20
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|FileAnnotationType
operator|.
name|HIGHLIGHT
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileAnnotation
name|expected
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"Linus Dietz"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|20
argument_list|,
literal|28
argument_list|,
literal|39
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"World"
argument_list|,
name|FileAnnotationType
operator|.
name|HIGHLIGHT
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|expectedLinkedAnnotation
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/minimal-highlight-no-note.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|squigglyWithNoteMinimal ()
specifier|public
name|void
name|squigglyWithNoteMinimal
parameter_list|()
block|{
specifier|final
name|FileAnnotation
name|expectedLinkedAnnotation
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"lynyus"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|40
argument_list|,
literal|25
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"Squiggly note"
argument_list|,
name|FileAnnotationType
operator|.
name|SQUIGGLY
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileAnnotation
name|expected
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"lynyus"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|40
argument_list|,
literal|25
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"ello"
argument_list|,
name|FileAnnotationType
operator|.
name|SQUIGGLY
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|expectedLinkedAnnotation
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/minimal-squiggly.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|strikeoutWithNoteMinimal ()
specifier|public
name|void
name|strikeoutWithNoteMinimal
parameter_list|()
block|{
specifier|final
name|FileAnnotation
name|expectedLinkedAnnotation
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"lynyus"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|13
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"striked out"
argument_list|,
name|FileAnnotationType
operator|.
name|STRIKEOUT
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileAnnotation
name|expected
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"lynyus"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|13
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"World"
argument_list|,
name|FileAnnotationType
operator|.
name|STRIKEOUT
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|expectedLinkedAnnotation
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/minimal-strikeout.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|highlightWithNoteMinimal ()
specifier|public
name|void
name|highlightWithNoteMinimal
parameter_list|()
block|{
specifier|final
name|FileAnnotation
name|expectedLinkedAnnotation
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"Linus Dietz"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|20
argument_list|,
literal|32
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"linked note to highlight"
argument_list|,
name|FileAnnotationType
operator|.
name|HIGHLIGHT
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileAnnotation
name|expected
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"Linus Dietz"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|20
argument_list|,
literal|32
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"World"
argument_list|,
name|FileAnnotationType
operator|.
name|HIGHLIGHT
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|expectedLinkedAnnotation
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/minimal-highlight-with-note.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|underlineWithNoteMinimal ()
specifier|public
name|void
name|underlineWithNoteMinimal
parameter_list|()
block|{
specifier|final
name|FileAnnotation
name|expectedLinkedAnnotation
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"Linus Dietz"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|20
argument_list|,
literal|36
argument_list|,
literal|9
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"underlined"
argument_list|,
name|FileAnnotationType
operator|.
name|UNDERLINE
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileAnnotation
name|expected
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"Linus Dietz"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|20
argument_list|,
literal|36
argument_list|,
literal|9
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"Hello"
argument_list|,
name|FileAnnotationType
operator|.
name|UNDERLINE
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|expectedLinkedAnnotation
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/minimal-underline.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|polygonNoNoteMinimal ()
specifier|public
name|void
name|polygonNoNoteMinimal
parameter_list|()
block|{
specifier|final
name|FileAnnotation
name|expected
init|=
operator|new
name|FileAnnotation
argument_list|(
literal|"Linus Dietz"
argument_list|,
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
literal|3
argument_list|,
literal|16
argument_list|,
literal|9
argument_list|,
literal|21
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"polygon annotation"
argument_list|,
name|FileAnnotationType
operator|.
name|POLYGON
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|importer
operator|.
name|importAnnotations
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/pdfs/minimal-polygon.pdf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

