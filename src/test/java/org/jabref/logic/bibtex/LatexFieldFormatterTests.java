begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.bibtex
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Answers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|LatexFieldFormatterTests
specifier|public
class|class
name|LatexFieldFormatterTests
block|{
DECL|field|formatter
specifier|private
name|LatexFieldFormatter
name|formatter
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|this
operator|.
name|formatter
operator|=
operator|new
name|LatexFieldFormatter
argument_list|(
name|mock
argument_list|(
name|LatexFieldFormatterPreferences
operator|.
name|class
argument_list|,
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|normalizeNewlineInAbstractField ()
specifier|public
name|void
name|normalizeNewlineInAbstractField
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fieldName
init|=
literal|"abstract"
decl_stmt|;
name|String
name|text
init|=
literal|"lorem"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|" ipsum lorem ipsum\nlorem ipsum \rlorem ipsum\r\ntest"
decl_stmt|;
comment|// The newlines are normalized according to the globally configured newline setting in the formatter
name|String
name|expected
init|=
literal|"{"
operator|+
literal|"lorem"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|" ipsum lorem ipsum"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"lorem ipsum "
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"lorem ipsum"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"test"
operator|+
literal|"}"
decl_stmt|;
name|String
name|result
init|=
name|formatter
operator|.
name|format
argument_list|(
name|text
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|preserveNewlineInAbstractField ()
specifier|public
name|void
name|preserveNewlineInAbstractField
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fieldName
init|=
literal|"abstract"
decl_stmt|;
comment|// The newlines are normalized according to the globally configured newline setting in the formatter
name|String
name|text
init|=
literal|"lorem ipsum lorem ipsum"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"lorem ipsum lorem ipsum"
operator|+
name|OS
operator|.
name|NEWLINE
decl_stmt|;
name|String
name|result
init|=
name|formatter
operator|.
name|format
argument_list|(
name|text
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"{"
operator|+
name|text
operator|+
literal|"}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|preserveMultipleNewlinesInAbstractField ()
specifier|public
name|void
name|preserveMultipleNewlinesInAbstractField
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fieldName
init|=
literal|"abstract"
decl_stmt|;
comment|// The newlines are normalized according to the globally configured newline setting in the formatter
name|String
name|text
init|=
literal|"lorem ipsum lorem ipsum"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"lorem ipsum lorem ipsum"
operator|+
name|OS
operator|.
name|NEWLINE
decl_stmt|;
name|String
name|result
init|=
name|formatter
operator|.
name|format
argument_list|(
name|text
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"{"
operator|+
name|text
operator|+
literal|"}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|preserveNewlineInReviewField ()
specifier|public
name|void
name|preserveNewlineInReviewField
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fieldName
init|=
literal|"review"
decl_stmt|;
comment|// The newlines are normalized according to the globally configured newline setting in the formatter
name|String
name|text
init|=
literal|"lorem ipsum lorem ipsum"
operator|+
name|OS
operator|.
name|NEWLINE
operator|+
literal|"lorem ipsum lorem ipsum"
operator|+
name|OS
operator|.
name|NEWLINE
decl_stmt|;
name|String
name|result
init|=
name|formatter
operator|.
name|format
argument_list|(
name|text
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"{"
operator|+
name|text
operator|+
literal|"}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeWhitespaceFromNonMultiLineFields ()
specifier|public
name|void
name|removeWhitespaceFromNonMultiLineFields
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|original
init|=
literal|"I\nshould\nnot\ninclude\nadditional\nwhitespaces  \nor\n\ttabs."
decl_stmt|;
name|String
name|expected
init|=
literal|"{I should not include additional whitespaces or tabs.}"
decl_stmt|;
name|String
name|title
init|=
name|formatter
operator|.
name|format
argument_list|(
name|original
argument_list|,
literal|"title"
argument_list|)
decl_stmt|;
name|String
name|any
init|=
name|formatter
operator|.
name|format
argument_list|(
name|original
argument_list|,
literal|"anyotherfield"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|any
argument_list|)
expr_stmt|;
block|}
DECL|method|reportUnbalancedBracing ()
specifier|public
name|void
name|reportUnbalancedBracing
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|unbalanced
init|=
literal|"{"
decl_stmt|;
name|assertThrows
argument_list|(
name|InvalidFieldValueException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|formatter
operator|.
name|format
argument_list|(
name|unbalanced
argument_list|,
literal|"anyfield"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|reportUnbalancedBracingWithEscapedBraces ()
specifier|public
name|void
name|reportUnbalancedBracingWithEscapedBraces
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|unbalanced
init|=
literal|"{\\}"
decl_stmt|;
name|assertThrows
argument_list|(
name|InvalidFieldValueException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|formatter
operator|.
name|format
argument_list|(
name|unbalanced
argument_list|,
literal|"anyfield"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tolerateBalancedBrace ()
specifier|public
name|void
name|tolerateBalancedBrace
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|text
init|=
literal|"Incorporating evolutionary {Measures into Conservation Prioritization}"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{"
operator|+
name|text
operator|+
literal|"}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
name|text
argument_list|,
literal|"anyfield"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tolerateEscapeCharacters ()
specifier|public
name|void
name|tolerateEscapeCharacters
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|text
init|=
literal|"Incorporating {\\O}evolutionary {Measures into Conservation Prioritization}"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{"
operator|+
name|text
operator|+
literal|"}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
name|text
argument_list|,
literal|"anyfield"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hashEnclosedWordsGetRealStringsInMonthField ()
specifier|public
name|void
name|hashEnclosedWordsGetRealStringsInMonthField
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|text
init|=
literal|"#jan# - #feb#"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jan #{ - } # feb"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
name|text
argument_list|,
literal|"month"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hashEnclosedWordsGetRealStringsInMonthFieldBecauseMonthIsStandardField ()
specifier|public
name|void
name|hashEnclosedWordsGetRealStringsInMonthFieldBecauseMonthIsStandardField
parameter_list|()
throws|throws
name|Exception
block|{
name|LatexFieldFormatterPreferences
name|latexFieldFormatterPreferences
init|=
operator|new
name|LatexFieldFormatterPreferences
argument_list|(
literal|false
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
operator|new
name|FieldContentParserPreferences
argument_list|()
argument_list|)
decl_stmt|;
name|LatexFieldFormatter
name|formatter
init|=
operator|new
name|LatexFieldFormatter
argument_list|(
name|latexFieldFormatterPreferences
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"#jan# - #feb#"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jan #{ - } # feb"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
name|text
argument_list|,
literal|"month"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

