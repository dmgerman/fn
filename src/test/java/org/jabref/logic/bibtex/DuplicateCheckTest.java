begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.bibtex
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|DuplicateCheckTest
specifier|public
class|class
name|DuplicateCheckTest
block|{
DECL|field|simpleArticle
specifier|private
name|BibEntry
name|simpleArticle
decl_stmt|;
DECL|field|unrelatedArticle
specifier|private
name|BibEntry
name|unrelatedArticle
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|simpleArticle
operator|=
operator|new
name|BibEntry
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
literal|"Single Author"
argument_list|)
operator|.
name|withField
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
literal|"A serious paper about something"
argument_list|)
operator|.
name|withField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
literal|"2017"
argument_list|)
expr_stmt|;
name|unrelatedArticle
operator|=
operator|new
name|BibEntry
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
literal|"Completely Different"
argument_list|)
operator|.
name|withField
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
literal|"Holy Moly Uffdada und Trallalla"
argument_list|)
operator|.
name|withField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
literal|"1992"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDuplicateDetection ()
specifier|public
name|void
name|testDuplicateDetection
parameter_list|()
block|{
name|BibEntry
name|one
init|=
operator|new
name|BibEntry
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|BibEntry
name|two
init|=
operator|new
name|BibEntry
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|one
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Billy Bob"
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Billy Bob"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|one
argument_list|,
name|two
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"James Joyce"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|one
argument_list|,
name|two
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Billy Bob"
argument_list|)
expr_stmt|;
name|two
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|BOOK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|one
argument_list|,
name|two
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|two
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|one
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2005"
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"2005"
argument_list|)
expr_stmt|;
name|one
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"A title"
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"A title"
argument_list|)
expr_stmt|;
name|one
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|one
argument_list|,
name|two
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.01
argument_list|,
name|DuplicateCheck
operator|.
name|compareEntriesStrictly
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|one
argument_list|,
name|two
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.75
argument_list|,
name|DuplicateCheck
operator|.
name|compareEntriesStrictly
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|one
operator|.
name|setField
argument_list|(
literal|"number"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"volume"
argument_list|,
literal|"21"
argument_list|)
expr_stmt|;
name|one
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
literal|"334--337"
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
literal|"334--337"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|one
argument_list|,
name|two
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"number"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|one
operator|.
name|setField
argument_list|(
literal|"volume"
argument_list|,
literal|"21"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|one
argument_list|,
name|two
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"volume"
argument_list|,
literal|"22"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|one
argument_list|,
name|two
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|one
argument_list|,
name|two
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|one
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|one
argument_list|,
name|two
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|two
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"Another title"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|one
argument_list|,
name|two
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWordCorrelation ()
specifier|public
name|void
name|testWordCorrelation
parameter_list|()
block|{
name|String
name|d1
init|=
literal|"Characterization of Calanus finmarchicus habitat in the North Sea"
decl_stmt|;
name|String
name|d2
init|=
literal|"Characterization of Calunus finmarchicus habitat in the North Sea"
decl_stmt|;
name|String
name|d3
init|=
literal|"Characterization of Calanus glacialissss habitat in the South Sea"
decl_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
operator|(
name|DuplicateCheck
operator|.
name|correlateByWords
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
operator|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.78
argument_list|,
operator|(
name|DuplicateCheck
operator|.
name|correlateByWords
argument_list|(
name|d1
argument_list|,
name|d3
argument_list|)
operator|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.78
argument_list|,
operator|(
name|DuplicateCheck
operator|.
name|correlateByWords
argument_list|(
name|d2
argument_list|,
name|d3
argument_list|)
operator|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoUnrelatedEntriesAreNoDuplicates ()
specifier|public
name|void
name|twoUnrelatedEntriesAreNoDuplicates
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|simpleArticle
argument_list|,
name|unrelatedArticle
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoUnrelatedEntriesWithDifferentDoisAreNoDuplicates ()
specifier|public
name|void
name|twoUnrelatedEntriesWithDifferentDoisAreNoDuplicates
parameter_list|()
block|{
name|simpleArticle
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|,
literal|"10.1016/j.is.2004.02.002"
argument_list|)
expr_stmt|;
name|unrelatedArticle
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|,
literal|"10.1016/j.is.2004.02.00X"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|simpleArticle
argument_list|,
name|unrelatedArticle
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoUnrelatedEntriesWithEqualDoisAreDuplicates ()
specifier|public
name|void
name|twoUnrelatedEntriesWithEqualDoisAreDuplicates
parameter_list|()
block|{
name|simpleArticle
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|,
literal|"10.1016/j.is.2004.02.002"
argument_list|)
expr_stmt|;
name|unrelatedArticle
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|,
literal|"10.1016/j.is.2004.02.002"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|simpleArticle
argument_list|,
name|unrelatedArticle
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoUnrelatedEntriesWithEqualPmidAreDuplicates ()
specifier|public
name|void
name|twoUnrelatedEntriesWithEqualPmidAreDuplicates
parameter_list|()
block|{
name|simpleArticle
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|PMID
argument_list|,
literal|"12345678"
argument_list|)
expr_stmt|;
name|unrelatedArticle
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|PMID
argument_list|,
literal|"12345678"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|simpleArticle
argument_list|,
name|unrelatedArticle
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoUnrelatedEntriesWithEqualEprintAreDuplicates ()
specifier|public
name|void
name|twoUnrelatedEntriesWithEqualEprintAreDuplicates
parameter_list|()
block|{
name|simpleArticle
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|EPRINT
argument_list|,
literal|"12345678"
argument_list|)
expr_stmt|;
name|unrelatedArticle
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|EPRINT
argument_list|,
literal|"12345678"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|simpleArticle
argument_list|,
name|unrelatedArticle
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoEntriesWithSameDoiButDifferentTypesAreDuplicates ()
specifier|public
name|void
name|twoEntriesWithSameDoiButDifferentTypesAreDuplicates
parameter_list|()
block|{
name|simpleArticle
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|,
literal|"10.1016/j.is.2004.02.002"
argument_list|)
expr_stmt|;
name|BibEntry
name|duplicateWithDifferentType
init|=
operator|(
name|BibEntry
operator|)
name|simpleArticle
operator|.
name|clone
argument_list|()
decl_stmt|;
name|duplicateWithDifferentType
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|INCOLLECTION
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|simpleArticle
argument_list|,
name|duplicateWithDifferentType
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

