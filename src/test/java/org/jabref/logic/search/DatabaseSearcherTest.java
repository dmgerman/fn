begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.search
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|StandardEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|DatabaseSearcherTest
specifier|public
class|class
name|DatabaseSearcherTest
block|{
DECL|field|INVALID_SEARCH_QUERY
specifier|public
specifier|static
specifier|final
name|SearchQuery
name|INVALID_SEARCH_QUERY
init|=
operator|new
name|SearchQuery
argument_list|(
literal|"\\asd123{}asdf"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|database
specifier|private
name|BibDatabase
name|database
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|database
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMatchesFromEmptyDatabase ()
specifier|public
name|void
name|testNoMatchesFromEmptyDatabase
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|matches
init|=
operator|new
name|DatabaseSearcher
argument_list|(
operator|new
name|SearchQuery
argument_list|(
literal|"whatever"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|database
argument_list|)
operator|.
name|getMatches
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|matches
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMatchesFromEmptyDatabaseWithInvalidSearchExpression ()
specifier|public
name|void
name|testNoMatchesFromEmptyDatabaseWithInvalidSearchExpression
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|matches
init|=
operator|new
name|DatabaseSearcher
argument_list|(
name|INVALID_SEARCH_QUERY
argument_list|,
name|database
argument_list|)
operator|.
name|getMatches
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|matches
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDatabaseFromMatchesDatabaseWithEmptyEntries ()
specifier|public
name|void
name|testGetDatabaseFromMatchesDatabaseWithEmptyEntries
parameter_list|()
block|{
name|database
operator|.
name|insertEntry
argument_list|(
operator|new
name|BibEntry
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|matches
init|=
operator|new
name|DatabaseSearcher
argument_list|(
operator|new
name|SearchQuery
argument_list|(
literal|"whatever"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|database
argument_list|)
operator|.
name|getMatches
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|matches
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMatchesFromDatabaseWithArticleTypeEntry ()
specifier|public
name|void
name|testNoMatchesFromDatabaseWithArticleTypeEntry
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"harrer"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|matches
init|=
operator|new
name|DatabaseSearcher
argument_list|(
operator|new
name|SearchQuery
argument_list|(
literal|"whatever"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|database
argument_list|)
operator|.
name|getMatches
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|matches
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCorrectMatchFromDatabaseWithArticleTypeEntry ()
specifier|public
name|void
name|testCorrectMatchFromDatabaseWithArticleTypeEntry
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"harrer"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|matches
init|=
operator|new
name|DatabaseSearcher
argument_list|(
operator|new
name|SearchQuery
argument_list|(
literal|"harrer"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|database
argument_list|)
operator|.
name|getMatches
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
name|matches
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMatchesFromEmptyDatabaseWithInvalidQuery ()
specifier|public
name|void
name|testNoMatchesFromEmptyDatabaseWithInvalidQuery
parameter_list|()
block|{
name|SearchQuery
name|query
init|=
operator|new
name|SearchQuery
argument_list|(
literal|"asdf["
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DatabaseSearcher
name|databaseSearcher
init|=
operator|new
name|DatabaseSearcher
argument_list|(
name|query
argument_list|,
name|database
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|databaseSearcher
operator|.
name|getMatches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCorrectMatchFromDatabaseWithIncollectionTypeEntry ()
specifier|public
name|void
name|testCorrectMatchFromDatabaseWithIncollectionTypeEntry
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|(
name|StandardEntryType
operator|.
name|InCollection
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"tonho"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|SearchQuery
name|query
init|=
operator|new
name|SearchQuery
argument_list|(
literal|"tonho"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|matches
init|=
operator|new
name|DatabaseSearcher
argument_list|(
name|query
argument_list|,
name|database
argument_list|)
operator|.
name|getMatches
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
name|matches
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMatchesFromDatabaseWithTwoEntries ()
specifier|public
name|void
name|testNoMatchesFromDatabaseWithTwoEntries
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|BibEntry
argument_list|(
name|StandardEntryType
operator|.
name|InCollection
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"tonho"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|SearchQuery
name|query
init|=
operator|new
name|SearchQuery
argument_list|(
literal|"tonho"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DatabaseSearcher
name|databaseSearcher
init|=
operator|new
name|DatabaseSearcher
argument_list|(
name|query
argument_list|,
name|database
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|,
name|databaseSearcher
operator|.
name|getMatches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMatchesFromDabaseWithIncollectionTypeEntry ()
specifier|public
name|void
name|testNoMatchesFromDabaseWithIncollectionTypeEntry
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|(
name|StandardEntryType
operator|.
name|InCollection
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"tonho"
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|SearchQuery
name|query
init|=
operator|new
name|SearchQuery
argument_list|(
literal|"asdf"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DatabaseSearcher
name|databaseSearcher
init|=
operator|new
name|DatabaseSearcher
argument_list|(
name|query
argument_list|,
name|database
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|databaseSearcher
operator|.
name|getMatches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMatchFromDatabaseWithEmptyEntry ()
specifier|public
name|void
name|testNoMatchFromDatabaseWithEmptyEntry
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|SearchQuery
name|query
init|=
operator|new
name|SearchQuery
argument_list|(
literal|"tonho"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DatabaseSearcher
name|databaseSearcher
init|=
operator|new
name|DatabaseSearcher
argument_list|(
name|query
argument_list|,
name|database
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|databaseSearcher
operator|.
name|getMatches
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

