begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.layout.format
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|ReplaceUnicodeLigaturesFormatterTest
specifier|public
class|class
name|ReplaceUnicodeLigaturesFormatterTest
block|{
DECL|field|formatter
specifier|private
name|ReplaceUnicodeLigaturesFormatter
name|formatter
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|formatter
operator|=
operator|new
name|ReplaceUnicodeLigaturesFormatter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPlainFormat ()
specifier|public
name|void
name|testPlainFormat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"lorem ipsum"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"lorem ipsum"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleLigatures ()
specifier|public
name|void
name|testSingleLigatures
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"AA"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"\uA732"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fi"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"ï¬"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"et"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"\uD83D\uDE70"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLigatureSequence ()
specifier|public
name|void
name|testLigatureSequence
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"aefffflstue"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Ã¦ï¬ï¬ï¬áµ«"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSampleInput ()
specifier|public
name|void
name|testSampleInput
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"AEneas"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"Ãneas"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

