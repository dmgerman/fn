begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.layout.format
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|AuthorAndToSemicolonReplacerTest
class|class
name|AuthorAndToSemicolonReplacerTest
block|{
DECL|method|data ()
specifier|private
specifier|static
name|Stream
argument_list|<
name|Arguments
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|Arguments
operator|.
name|of
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Arguments
operator|.
name|of
argument_list|(
literal|"Someone, Van Something"
argument_list|,
literal|"Someone, Van Something"
argument_list|)
argument_list|,
name|Arguments
operator|.
name|of
argument_list|(
literal|"John Smith and Black Brown, Peter"
argument_list|,
literal|"John Smith; Black Brown, Peter"
argument_list|)
argument_list|,
name|Arguments
operator|.
name|of
argument_list|(
literal|"von Neumann, John and Smith, John and Black Brown, Peter"
argument_list|,
literal|"von Neumann, John; Smith, John; Black Brown, Peter"
argument_list|)
argument_list|,
name|Arguments
operator|.
name|of
argument_list|(
literal|"John von Neumann and John Smith and Peter Black Brown"
argument_list|,
literal|"John von Neumann; John Smith; Peter Black Brown"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"data"
argument_list|)
DECL|method|testFormat (String input, String expected)
name|void
name|testFormat
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|LayoutFormatter
name|a
init|=
operator|new
name|AuthorAndToSemicolonReplacer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|a
operator|.
name|format
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

