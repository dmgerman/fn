begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.layout.format
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNull
import|;
end_import

begin_class
DECL|class|OrdinalTest
specifier|public
class|class
name|OrdinalTest
block|{
annotation|@
name|Test
DECL|method|testEmpty ()
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNull ()
specifier|public
name|void
name|testNull
parameter_list|()
block|{
name|assertNull
argument_list|(
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleDigit ()
specifier|public
name|void
name|testSingleDigit
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3rd"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4th"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiDigits ()
specifier|public
name|void
name|testMultiDigits
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"11th"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"111th"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"111"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"21st"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"21"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAlreadyOrdinals ()
specifier|public
name|void
name|testAlreadyOrdinals
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"111th"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"111th"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"22nd"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"22nd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullSentence ()
specifier|public
name|void
name|testFullSentence
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"1st edn."
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"1 edn."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st edition"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"1st edition"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The 2nd conference on 3rd.14th"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"The 2 conference on 3.14"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLetters ()
specifier|public
name|void
name|testLetters
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"abCD eFg"
argument_list|,
operator|new
name|Ordinal
argument_list|()
operator|.
name|format
argument_list|(
literal|"abCD eFg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

