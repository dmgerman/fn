begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.layout
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|InternalField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|UnknownField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_comment
comment|/**  * The test class LayoutEntryTest test the net.sf.jabref.export.layout.LayoutEntry. Indirectly the  * net.sf.jabref.export.layout.Layout is tested too.  *<p/>  * The LayoutEntry creates a human readable String assigned with HTML formatters. To test the Highlighting Feature, an  * instance of LayoutEntry will be instantiated via Layout and LayoutHelper. With these instance the doLayout() Method  * is called several times for each test case. To simulate a search, a BibEntry will be created, which will be used by  * LayoutEntry.  *  * There are five test cases: - The shown result text has no words which should be highlighted. - There is one word  * which will be highlighted ignoring case sensitivity. - There are two words which will be highlighted ignoring case  * sensitivity. - There is one word which will be highlighted case sensitivity. - There are more words which will be  * highlighted case sensitivity.  */
end_comment

begin_class
DECL|class|LayoutEntryTest
specifier|public
class|class
name|LayoutEntryTest
block|{
DECL|field|mBTE
specifier|private
name|BibEntry
name|mBTE
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|mBTE
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|ABSTRACT
argument_list|,
literal|"In this paper, we initiate a formal study of security on Android: Google's new open-source platform for mobile devices. Tags: Paper android google Open-Source Devices"
argument_list|)
expr_stmt|;
comment|//  Specifically, we present a core typed language to describe Android applications, and to reason about their data-flow security properties. Our operational semantics and type system provide some necessary foundations to help both users and developers of Android applications deal with their security concerns.
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|KEYWORDS
argument_list|,
literal|"android, mobile devices, security"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
operator|new
name|UnknownField
argument_list|(
literal|"posted-at"
argument_list|)
argument_list|,
literal|"2010-08-11 15:00:49"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|LOCATION
argument_list|,
literal|"Dublin, Ireland"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setCiteKey
argument_list|(
literal|"chaudhuri-plas09"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|PAGES
argument_list|,
literal|"1--7"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|BOOKTITLE
argument_list|,
literal|"PLAS '09: Proceedings of the ACM SIGPLAN Fourth Workshop on Programming Languages and Analysis for Security"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
operator|new
name|UnknownField
argument_list|(
literal|"citeulike-article-id"
argument_list|)
argument_list|,
literal|"7615801"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
operator|new
name|UnknownField
argument_list|(
literal|"citeulike-linkout-1"
argument_list|)
argument_list|,
literal|"http://dx.doi.org/10.1145/1554339.1554341"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|URL
argument_list|,
literal|"http://dx.doi.org/10.1145/1554339.1554341"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|PUBLISHER
argument_list|,
literal|"ACM"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|InternalField
operator|.
name|TIMESTAMP
argument_list|,
literal|"2010.11.11"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"Chaudhuri, Avik"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
literal|"Language-based security on Android"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|ADDRESS
argument_list|,
literal|"New York, NY, USA"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|SpecialField
operator|.
name|PRIORITY
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|ISBN
argument_list|,
literal|"978-1-60558-645-8"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|InternalField
operator|.
name|OWNER
argument_list|,
literal|"Arne"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|,
literal|"2009"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
operator|new
name|UnknownField
argument_list|(
literal|"citeulike-linkout-0"
argument_list|)
argument_list|,
literal|"http://portal.acm.org/citation.cfm?id=1554339.1554341"
argument_list|)
expr_stmt|;
name|mBTE
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|DOI
argument_list|,
literal|"10.1145/1554339.1554341"
argument_list|)
expr_stmt|;
block|}
DECL|method|layout (String layoutFile, BibEntry entry)
specifier|public
name|String
name|layout
parameter_list|(
name|String
name|layoutFile
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|StringReader
name|sr
init|=
operator|new
name|StringReader
argument_list|(
name|layoutFile
operator|.
name|replace
argument_list|(
literal|"__NEWLINE__"
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|Layout
name|layout
init|=
operator|new
name|LayoutHelper
argument_list|(
name|sr
argument_list|,
name|mock
argument_list|(
name|LayoutFormatterPreferences
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getLayoutFromText
argument_list|()
decl_stmt|;
return|return
name|layout
operator|.
name|doLayout
argument_list|(
name|entry
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testParseMethodCalls ()
specifier|public
name|void
name|testParseMethodCalls
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bla"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla,"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bla"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla,"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"_bla.bla.blub,"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_bla.bla.blub"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"_bla.bla.blub,"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla,foo"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bla"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla,foo"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla,foo"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla(\"test\"),foo(\"fark\")"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bla"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla(\"test\"),foo(\"fark\")"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla(\"test\"),foo(\"fark\")"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla(\"test\"),foo(\"fark\")"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fark"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla(\"test\"),foo(\"fark\")"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla(test),foo(fark)"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bla"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla(test),foo(fark)"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla(test),foo(fark)"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla(test),foo(fark)"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fark"
argument_list|,
operator|(
name|LayoutEntry
operator|.
name|parseMethodsCalls
argument_list|(
literal|"bla(test),foo(fark)"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

