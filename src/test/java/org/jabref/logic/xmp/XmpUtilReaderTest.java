begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.xmp
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|DummyFileUpdateMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|FileUpdateMonitor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|DublinCoreSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Answers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|XmpUtilReaderTest
specifier|public
class|class
name|XmpUtilReaderTest
block|{
DECL|field|tempFolder
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|tempFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|fileMonitor
specifier|private
specifier|static
specifier|final
name|FileUpdateMonitor
name|fileMonitor
init|=
operator|new
name|DummyFileUpdateMonitor
argument_list|()
decl_stmt|;
DECL|field|xmpPreferences
specifier|private
name|XmpPreferences
name|xmpPreferences
decl_stmt|;
DECL|field|parser
specifier|private
name|BibtexParser
name|parser
decl_stmt|;
comment|/**      * Create a temporary PDF-file with a single empty page.      */
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|ImportFormatPreferences
name|importFormatPreferences
init|=
name|mock
argument_list|(
name|ImportFormatPreferences
operator|.
name|class
argument_list|,
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|importFormatPreferences
operator|.
name|getEncoding
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|xmpPreferences
operator|=
name|mock
argument_list|(
name|XmpPreferences
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// The code assumes privacy filters to be off
name|when
argument_list|(
name|xmpPreferences
operator|.
name|isUseXMPPrivacyFilter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|xmpPreferences
operator|.
name|getKeywordSeparator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|parser
operator|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
name|fileMonitor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests reading of dublinCore metadata.      */
annotation|@
name|Test
DECL|method|testReadArticleDublinCoreReadRawXmp ()
specifier|public
name|void
name|testReadArticleDublinCoreReadRawXmp
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|ParseException
block|{
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|XmpUtilShared
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"article_dublinCore.pdf"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XMPMetadata
argument_list|>
name|meta
init|=
name|XmpUtilReader
operator|.
name|readRawXmp
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|DublinCoreSchema
name|dcSchema
init|=
name|meta
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDublinCoreSchema
argument_list|()
decl_stmt|;
name|DublinCoreExtractor
name|dcExtractor
init|=
operator|new
name|DublinCoreExtractor
argument_list|(
name|dcSchema
argument_list|,
name|xmpPreferences
argument_list|,
operator|new
name|BibEntry
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry
init|=
name|dcExtractor
operator|.
name|extractBibtexEntry
argument_list|()
decl_stmt|;
name|String
name|bibString
init|=
name|Resources
operator|.
name|toString
argument_list|(
name|XmpUtilShared
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"article_dublinCore.bib"
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entryFromBibFile
init|=
name|parser
operator|.
name|parseSingleEntry
argument_list|(
name|bibString
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entryFromBibFile
operator|.
name|get
argument_list|()
argument_list|,
name|entry
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests reading of dublinCore metadata.      */
annotation|@
name|Test
DECL|method|testReadArticleDublinCoreReadXmp ()
specifier|public
name|void
name|testReadArticleDublinCoreReadXmp
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|ParseException
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|XmpUtilReader
operator|.
name|readXmp
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|XmpUtilShared
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"article_dublinCore.pdf"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
name|xmpPreferences
argument_list|)
decl_stmt|;
name|BibEntry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bibString
init|=
name|Resources
operator|.
name|toString
argument_list|(
name|XmpUtilShared
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"article_dublinCore.bib"
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entryFromBibFile
init|=
name|parser
operator|.
name|parseSingleEntry
argument_list|(
name|bibString
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entryFromBibFile
operator|.
name|get
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests an pdf file with an empty metadata section.      */
annotation|@
name|Test
DECL|method|testReadEmtpyMetadata ()
specifier|public
name|void
name|testReadEmtpyMetadata
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|XmpUtilReader
operator|.
name|readXmp
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|XmpUtilShared
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"empty_metadata.pdf"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
name|xmpPreferences
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test non XMP metadata. Metadata are included in the PDInformation      */
annotation|@
name|Test
DECL|method|testReadPDMetadata ()
specifier|public
name|void
name|testReadPDMetadata
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|ParseException
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|XmpUtilReader
operator|.
name|readXmp
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|XmpUtilShared
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"PD_metadata.pdf"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
name|xmpPreferences
argument_list|)
decl_stmt|;
name|String
name|bibString
init|=
name|Resources
operator|.
name|toString
argument_list|(
name|XmpUtilShared
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"PD_metadata.bib"
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entryFromBibFile
init|=
name|parser
operator|.
name|parseSingleEntry
argument_list|(
name|bibString
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entryFromBibFile
operator|.
name|get
argument_list|()
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

