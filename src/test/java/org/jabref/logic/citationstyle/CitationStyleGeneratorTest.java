begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.citationstyle
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|TestEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Disabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|Disabled
argument_list|(
literal|"For some reason, instead of vol and pp we get null. No idea about the origin of this problem."
argument_list|)
DECL|class|CitationStyleGeneratorTest
class|class
name|CitationStyleGeneratorTest
block|{
annotation|@
name|Test
DECL|method|testIgnoreNewLine ()
name|void
name|testIgnoreNewLine
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
literal|"Last, First and\nDoe, Jane"
argument_list|)
expr_stmt|;
comment|// if the default citation style changes this has to be modified
name|String
name|expected
init|=
literal|"<div class=\"csl-entry\">\n"
operator|+
literal|"<div class=\"csl-left-margin\">[1]</div><div class=\"csl-right-inline\">F. Last and J. Doe, .</div>\n"
operator|+
literal|"</div>\n"
decl_stmt|;
name|String
name|citation
init|=
name|CitationStyleGenerator
operator|.
name|generateCitation
argument_list|(
name|entry
argument_list|,
name|CitationStyle
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|citation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIgnoreCarriageReturnNewLine ()
name|void
name|testIgnoreCarriageReturnNewLine
parameter_list|()
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
literal|"Last, First and\r\nDoe, Jane"
argument_list|)
expr_stmt|;
comment|// if the default citation style changes this has to be modified
name|String
name|expected
init|=
literal|"<div class=\"csl-entry\">\n"
operator|+
literal|"<div class=\"csl-left-margin\">[1]</div><div class=\"csl-right-inline\">F. Last and J. Doe, .</div>\n"
operator|+
literal|"</div>\n"
decl_stmt|;
name|String
name|citation
init|=
name|CitationStyleGenerator
operator|.
name|generateCitation
argument_list|(
name|entry
argument_list|,
name|CitationStyle
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|citation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingCitationStyle ()
name|void
name|testMissingCitationStyle
parameter_list|()
block|{
name|String
name|expected
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cannot generate preview based on selected citation style."
argument_list|)
decl_stmt|;
name|String
name|citation
init|=
name|CitationStyleGenerator
operator|.
name|generateCitation
argument_list|(
operator|new
name|BibEntry
argument_list|()
argument_list|,
literal|"faulty citation style"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|citation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsciiDocFormat ()
name|void
name|testAsciiDocFormat
parameter_list|()
block|{
name|String
name|expectedCitation
init|=
literal|"[1] B. Smith, B. Jones, and J. Williams, ``Title of the test entry,'' __BibTeX Journal__, vol. 34, no. 3, pp. 45â67, Jul. 2016.\n"
decl_stmt|;
name|BibEntry
name|entry
init|=
name|TestEntry
operator|.
name|getTestEntry
argument_list|()
decl_stmt|;
name|String
name|style
init|=
name|CitationStyle
operator|.
name|getDefault
argument_list|()
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|CitationStyleOutputFormat
name|format
init|=
name|CitationStyleOutputFormat
operator|.
name|ASCII_DOC
decl_stmt|;
name|String
name|actualCitation
init|=
name|CitationStyleGenerator
operator|.
name|generateCitation
argument_list|(
name|entry
argument_list|,
name|style
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCitation
argument_list|,
name|actualCitation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHtmlFormat ()
name|void
name|testHtmlFormat
parameter_list|()
block|{
name|String
name|expectedCitation
init|=
literal|"<div class=\"csl-entry\">\n"
operator|+
literal|"<div class=\"csl-left-margin\">[1]</div><div class=\"csl-right-inline\">B. Smith, B. Jones, and J. Williams, âTitle of the test entry,â<i>BibTeX Journal</i>, vol. 34, no. 3, pp. 45â67, Jul. 2016.</div>\n"
operator|+
literal|"</div>\n"
decl_stmt|;
name|BibEntry
name|entry
init|=
name|TestEntry
operator|.
name|getTestEntry
argument_list|()
decl_stmt|;
name|String
name|style
init|=
name|CitationStyle
operator|.
name|getDefault
argument_list|()
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|CitationStyleOutputFormat
name|format
init|=
name|CitationStyleOutputFormat
operator|.
name|HTML
decl_stmt|;
name|String
name|actualCitation
init|=
name|CitationStyleGenerator
operator|.
name|generateCitation
argument_list|(
name|entry
argument_list|,
name|style
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCitation
argument_list|,
name|actualCitation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRtfFormat ()
name|void
name|testRtfFormat
parameter_list|()
block|{
name|String
name|expectedCitation
init|=
literal|"[1]\\tab B. Smith, B. Jones, and J. Williams, \\uc0\\u8220{}Title of the test entry,\\uc0\\u8221{} {\\i{}BibTeX Journal}, vol. 34, no. 3, pp. 45\\uc0\\u8211{}67, Jul. 2016.\r\n"
decl_stmt|;
name|BibEntry
name|entry
init|=
name|TestEntry
operator|.
name|getTestEntry
argument_list|()
decl_stmt|;
name|String
name|style
init|=
name|CitationStyle
operator|.
name|getDefault
argument_list|()
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|CitationStyleOutputFormat
name|format
init|=
name|CitationStyleOutputFormat
operator|.
name|RTF
decl_stmt|;
name|String
name|actualCitation
init|=
name|CitationStyleGenerator
operator|.
name|generateCitation
argument_list|(
name|entry
argument_list|,
name|style
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCitation
argument_list|,
name|actualCitation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTextFormat ()
name|void
name|testTextFormat
parameter_list|()
block|{
name|String
name|expectedCitation
init|=
literal|"[1]B. Smith, B. Jones, and J. Williams, âTitle of the test entry,â BibTeX Journal, vol. 34, no. 3, pp. 45â67, Jul. 2016.\n"
decl_stmt|;
name|BibEntry
name|entry
init|=
name|TestEntry
operator|.
name|getTestEntry
argument_list|()
decl_stmt|;
name|String
name|style
init|=
name|CitationStyle
operator|.
name|getDefault
argument_list|()
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|CitationStyleOutputFormat
name|format
init|=
name|CitationStyleOutputFormat
operator|.
name|TEXT
decl_stmt|;
name|String
name|actualCitation
init|=
name|CitationStyleGenerator
operator|.
name|generateCitation
argument_list|(
name|entry
argument_list|,
name|style
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCitation
argument_list|,
name|actualCitation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXslFoFormat ()
name|void
name|testXslFoFormat
parameter_list|()
block|{
name|String
name|expectedCitation
init|=
literal|"<fo:block id=\"Smith2016\">\n"
operator|+
literal|"<fo:table table-layout=\"fixed\" width=\"100%\">\n"
operator|+
literal|"<fo:table-column column-number=\"1\" column-width=\"2.5em\"/>\n"
operator|+
literal|"<fo:table-column column-number=\"2\" column-width=\"proportional-column-width(1)\"/>\n"
operator|+
literal|"<fo:table-body>\n"
operator|+
literal|"<fo:table-row>\n"
operator|+
literal|"<fo:table-cell>\n"
operator|+
literal|"<fo:block>[1]</fo:block>\n"
operator|+
literal|"</fo:table-cell>\n"
operator|+
literal|"<fo:table-cell>\n"
operator|+
literal|"<fo:block>B. Smith, B. Jones, and J. Williams, âTitle of the test entry,â<fo:inline font-style=\"italic\">BibTeX Journal</fo:inline>, vol. 34, no. 3, pp. 45â67, Jul. 2016.</fo:block>\n"
operator|+
literal|"</fo:table-cell>\n"
operator|+
literal|"</fo:table-row>\n"
operator|+
literal|"</fo:table-body>\n"
operator|+
literal|"</fo:table>\n"
operator|+
literal|"</fo:block>\n"
decl_stmt|;
name|BibEntry
name|entry
init|=
name|TestEntry
operator|.
name|getTestEntry
argument_list|()
decl_stmt|;
name|String
name|style
init|=
name|CitationStyle
operator|.
name|getDefault
argument_list|()
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|CitationStyleOutputFormat
name|format
init|=
name|CitationStyleOutputFormat
operator|.
name|XSL_FO
decl_stmt|;
name|String
name|actualCitation
init|=
name|CitationStyleGenerator
operator|.
name|generateCitation
argument_list|(
name|entry
argument_list|,
name|style
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCitation
argument_list|,
name|actualCitation
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

