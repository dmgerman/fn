begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.integrity
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|PagesCheckerBibLatexTest
class|class
name|PagesCheckerBibLatexTest
block|{
DECL|field|checker
specifier|private
name|PagesChecker
name|checker
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
block|{
name|BibDatabaseContext
name|database
init|=
operator|new
name|BibDatabaseContext
argument_list|()
decl_stmt|;
name|database
operator|.
name|setMode
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
expr_stmt|;
name|checker
operator|=
operator|new
name|PagesChecker
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|acceptsSinglePage ()
name|void
name|acceptsSinglePage
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|checker
operator|.
name|checkValue
argument_list|(
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|acceptsSinglePageRange ()
name|void
name|acceptsSinglePageRange
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|checker
operator|.
name|checkValue
argument_list|(
literal|"12-15"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|acceptsSinglePageRangeWithDoubleDashes ()
name|void
name|acceptsSinglePageRangeWithDoubleDashes
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|checker
operator|.
name|checkValue
argument_list|(
literal|"12--15"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|acceptsSinglePageRangeWithEnDashes ()
name|void
name|acceptsSinglePageRangeWithEnDashes
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|checker
operator|.
name|checkValue
argument_list|(
literal|"12â15"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|acceptsSinglePageRangeWithPagePrefix ()
name|void
name|acceptsSinglePageRangeWithPagePrefix
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|checker
operator|.
name|checkValue
argument_list|(
literal|"R795--R804"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|acceptsMultiplePageRange ()
name|void
name|acceptsMultiplePageRange
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|checker
operator|.
name|checkValue
argument_list|(
literal|"12-15,18-29"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|acceptsOpenEndPageRange ()
name|void
name|acceptsOpenEndPageRange
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|checker
operator|.
name|checkValue
argument_list|(
literal|"-15"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|acceptsOpenStartPageRange ()
name|void
name|acceptsOpenStartPageRange
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|checker
operator|.
name|checkValue
argument_list|(
literal|"12-"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|complainsAboutPPrefix ()
name|void
name|complainsAboutPPrefix
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"should contain a valid page number range"
argument_list|)
argument_list|,
name|checker
operator|.
name|checkValue
argument_list|(
literal|"p. 12"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|complainsAboutPPPrefix ()
name|void
name|complainsAboutPPPrefix
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"should contain a valid page number range"
argument_list|)
argument_list|,
name|checker
operator|.
name|checkValue
argument_list|(
literal|"pp. 12-15"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

