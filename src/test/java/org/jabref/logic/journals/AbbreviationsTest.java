begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.journals
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|AbbreviationsTest
specifier|public
class|class
name|AbbreviationsTest
block|{
DECL|field|prefs
specifier|private
name|JournalAbbreviationPreferences
name|prefs
decl_stmt|;
DECL|field|abbreviations
specifier|private
name|JournalAbbreviationLoader
name|abbreviations
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|prefs
operator|=
name|mock
argument_list|(
name|JournalAbbreviationPreferences
operator|.
name|class
argument_list|)
expr_stmt|;
name|abbreviations
operator|=
operator|new
name|JournalAbbreviationLoader
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNextAbbreviationAbbreviatesIEEEJournalTitle ()
specifier|public
name|void
name|getNextAbbreviationAbbreviatesIEEEJournalTitle
parameter_list|()
block|{
name|when
argument_list|(
name|prefs
operator|.
name|useIEEEAbbreviations
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"#IEEE_J_PROC#"
argument_list|,
name|abbreviations
operator|.
name|getRepository
argument_list|(
name|prefs
argument_list|)
operator|.
name|getNextAbbreviation
argument_list|(
literal|"Proceedings of the IEEE"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNextAbbreviationExpandsIEEEAbbreviation ()
specifier|public
name|void
name|getNextAbbreviationExpandsIEEEAbbreviation
parameter_list|()
block|{
name|when
argument_list|(
name|prefs
operator|.
name|useIEEEAbbreviations
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Proceedings of the IEEE"
argument_list|,
name|abbreviations
operator|.
name|getRepository
argument_list|(
name|prefs
argument_list|)
operator|.
name|getNextAbbreviation
argument_list|(
literal|"#IEEE_J_PROC#"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNextAbbreviationAbbreviatesJournalTitle ()
specifier|public
name|void
name|getNextAbbreviationAbbreviatesJournalTitle
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Proc. IEEE"
argument_list|,
name|abbreviations
operator|.
name|getRepository
argument_list|(
name|prefs
argument_list|)
operator|.
name|getNextAbbreviation
argument_list|(
literal|"Proceedings of the IEEE"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNextAbbreviationRemovesPoint ()
specifier|public
name|void
name|getNextAbbreviationRemovesPoint
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Proc IEEE"
argument_list|,
name|abbreviations
operator|.
name|getRepository
argument_list|(
name|prefs
argument_list|)
operator|.
name|getNextAbbreviation
argument_list|(
literal|"Proc. IEEE"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNextAbbreviationExpandsAbbreviation ()
specifier|public
name|void
name|getNextAbbreviationExpandsAbbreviation
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Proceedings of the IEEE"
argument_list|,
name|abbreviations
operator|.
name|getRepository
argument_list|(
name|prefs
argument_list|)
operator|.
name|getNextAbbreviation
argument_list|(
literal|"Proc IEEE"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

