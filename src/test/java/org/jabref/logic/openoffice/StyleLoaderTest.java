begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.openoffice
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatterPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Answers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|StyleLoaderTest
specifier|public
class|class
name|StyleLoaderTest
block|{
DECL|field|numberOfInternalStyles
specifier|private
specifier|static
name|int
name|numberOfInternalStyles
init|=
literal|2
decl_stmt|;
DECL|field|loader
specifier|private
name|StyleLoader
name|loader
decl_stmt|;
DECL|field|preferences
specifier|private
name|OpenOfficePreferences
name|preferences
decl_stmt|;
DECL|field|layoutPreferences
specifier|private
name|LayoutFormatterPreferences
name|layoutPreferences
decl_stmt|;
DECL|field|encoding
specifier|private
name|Charset
name|encoding
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|preferences
operator|=
name|mock
argument_list|(
name|OpenOfficePreferences
operator|.
name|class
argument_list|,
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
argument_list|)
expr_stmt|;
name|layoutPreferences
operator|=
name|mock
argument_list|(
name|LayoutFormatterPreferences
operator|.
name|class
argument_list|,
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
argument_list|)
expr_stmt|;
name|encoding
operator|=
name|StandardCharsets
operator|.
name|UTF_8
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|throwNPEWithNullPreferences ()
specifier|public
name|void
name|throwNPEWithNullPreferences
parameter_list|()
block|{
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
literal|null
argument_list|,
name|layoutPreferences
argument_list|,
name|mock
argument_list|(
name|Charset
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|throwNPEWithNullLayoutPreferences ()
specifier|public
name|void
name|throwNPEWithNullLayoutPreferences
parameter_list|()
block|{
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|mock
argument_list|(
name|OpenOfficePreferences
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mock
argument_list|(
name|Charset
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|throwNPEWithNullCharset ()
specifier|public
name|void
name|throwNPEWithNullCharset
parameter_list|()
block|{
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|mock
argument_list|(
name|OpenOfficePreferences
operator|.
name|class
argument_list|)
argument_list|,
name|layoutPreferences
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetStylesWithEmptyExternal ()
specifier|public
name|void
name|testGetStylesWithEmptyExternal
parameter_list|()
block|{
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddStyleLeadsToOneMoreStyle ()
specifier|public
name|void
name|testAddStyleLeadsToOneMoreStyle
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|StyleLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|loader
operator|.
name|addStyleIfValid
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfInternalStyles
operator|+
literal|1
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddInvalidStyleLeadsToNoMoreStyle ()
specifier|public
name|void
name|testAddInvalidStyleLeadsToNoMoreStyle
parameter_list|()
block|{
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|int
name|beforeAdding
init|=
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|loader
operator|.
name|addStyleIfValid
argument_list|(
literal|"DefinitelyNotAValidFileNameOrWeAreExtremelyUnlucky"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeAdding
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitalizeWithOneExternalFile ()
specifier|public
name|void
name|testInitalizeWithOneExternalFile
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|StyleLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|preferences
operator|.
name|getExternalStyles
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfInternalStyles
operator|+
literal|1
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitalizeWithIncorrectExternalFile ()
specifier|public
name|void
name|testInitalizeWithIncorrectExternalFile
parameter_list|()
block|{
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"DefinitelyNotAValidFileNameOrWeAreExtremelyUnlucky"
argument_list|)
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfInternalStyles
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitalizeWithOneExternalFileRemoveStyle ()
specifier|public
name|void
name|testInitalizeWithOneExternalFileRemoveStyle
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|StyleLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|preferences
operator|.
name|getExternalStyles
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OOBibStyle
argument_list|>
name|toremove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|beforeRemoving
init|=
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|OOBibStyle
name|style
range|:
name|loader
operator|.
name|getStyles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|style
operator|.
name|isFromResource
argument_list|()
condition|)
block|{
name|toremove
operator|.
name|add
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|OOBibStyle
name|style
range|:
name|toremove
control|)
block|{
name|assertTrue
argument_list|(
name|loader
operator|.
name|removeStyle
argument_list|(
name|style
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|beforeRemoving
operator|-
literal|1
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"This tests the preferences that are mocked away"
argument_list|)
DECL|method|testInitalizeWithOneExternalFileRemoveStyleUpdatesPreferences ()
specifier|public
name|void
name|testInitalizeWithOneExternalFileRemoveStyleUpdatesPreferences
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|StyleLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|preferences
operator|.
name|getExternalStyles
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OOBibStyle
argument_list|>
name|toremove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OOBibStyle
name|style
range|:
name|loader
operator|.
name|getStyles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|style
operator|.
name|isFromResource
argument_list|()
condition|)
block|{
name|toremove
operator|.
name|add
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|OOBibStyle
name|style
range|:
name|toremove
control|)
block|{
name|assertTrue
argument_list|(
name|loader
operator|.
name|removeStyle
argument_list|(
name|style
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|preferences
operator|.
name|getExternalStyles
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddSameStyleTwiceLeadsToOneMoreStyle ()
specifier|public
name|void
name|testAddSameStyleTwiceLeadsToOneMoreStyle
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|int
name|beforeAdding
init|=
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
name|Paths
operator|.
name|get
argument_list|(
name|StyleLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|loader
operator|.
name|addStyleIfValid
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|loader
operator|.
name|addStyleIfValid
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeAdding
operator|+
literal|1
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testAddNullStyleThrowsNPE ()
specifier|public
name|void
name|testAddNullStyleThrowsNPE
parameter_list|()
block|{
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|loader
operator|.
name|addStyleIfValid
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDefaultUsedStyleWhenEmpty ()
specifier|public
name|void
name|testGetDefaultUsedStyleWhenEmpty
parameter_list|()
block|{
name|when
argument_list|(
name|preferences
operator|.
name|getCurrentStyle
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|clearCurrentStyle
argument_list|()
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|OOBibStyle
name|style
init|=
name|loader
operator|.
name|getUsedStyle
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|style
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|,
name|style
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|,
name|preferences
operator|.
name|getCurrentStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetStoredUsedStyle ()
specifier|public
name|void
name|testGetStoredUsedStyle
parameter_list|()
block|{
name|when
argument_list|(
name|preferences
operator|.
name|getCurrentStyle
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_NUMERICAL_STYLE_PATH
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|OOBibStyle
name|style
init|=
name|loader
operator|.
name|getUsedStyle
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|style
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_NUMERICAL_STYLE_PATH
argument_list|,
name|style
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_NUMERICAL_STYLE_PATH
argument_list|,
name|preferences
operator|.
name|getCurrentStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"This tests the preferences that are mocked away"
argument_list|)
DECL|method|testGtDefaultUsedStyleWhenIncorrect ()
specifier|public
name|void
name|testGtDefaultUsedStyleWhenIncorrect
parameter_list|()
block|{
name|when
argument_list|(
name|preferences
operator|.
name|getCurrentStyle
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"ljlkjlkjnljnvdlsjniuhwelfhuewfhlkuewhfuwhelu"
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|OOBibStyle
name|style
init|=
name|loader
operator|.
name|getUsedStyle
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|style
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|,
name|style
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|,
name|preferences
operator|.
name|getCurrentStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveInternalStyleReturnsFalseAndDoNotRemove ()
specifier|public
name|void
name|testRemoveInternalStyleReturnsFalseAndDoNotRemove
parameter_list|()
block|{
name|preferences
operator|.
name|setExternalStyles
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|layoutPreferences
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OOBibStyle
argument_list|>
name|toremove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OOBibStyle
name|style
range|:
name|loader
operator|.
name|getStyles
argument_list|()
control|)
block|{
if|if
condition|(
name|style
operator|.
name|isFromResource
argument_list|()
condition|)
block|{
name|toremove
operator|.
name|add
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|loader
operator|.
name|removeStyle
argument_list|(
name|toremove
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfInternalStyles
argument_list|,
name|loader
operator|.
name|getStyles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

