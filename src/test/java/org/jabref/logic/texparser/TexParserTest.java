begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.texparser
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|texparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|texparser
operator|.
name|Citation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|texparser
operator|.
name|CrossingKeysResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|texparser
operator|.
name|TexParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|DummyFileUpdateMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Answers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|TexParserTest
class|class
name|TexParserTest
block|{
DECL|field|DARWIN
specifier|private
specifier|final
name|String
name|DARWIN
init|=
literal|"Darwin1888"
decl_stmt|;
DECL|field|EINSTEIN
specifier|private
specifier|final
name|String
name|EINSTEIN
init|=
literal|"Einstein1920"
decl_stmt|;
DECL|field|UNRESOLVED
specifier|private
specifier|final
name|String
name|UNRESOLVED
init|=
literal|"UnresolvedKey"
decl_stmt|;
DECL|field|importFormatPreferences
specifier|private
name|ImportFormatPreferences
name|importFormatPreferences
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
block|{
name|importFormatPreferences
operator|=
name|mock
argument_list|(
name|ImportFormatPreferences
operator|.
name|class
argument_list|,
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterEach
DECL|method|tearDown ()
name|void
name|tearDown
parameter_list|()
block|{
name|importFormatPreferences
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testCite (String key, String citeString, boolean match)
specifier|private
name|void
name|testCite
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|citeString
parameter_list|,
name|boolean
name|match
parameter_list|)
block|{
name|TexParserResult
name|texParserResult
init|=
operator|new
name|DefaultTexParser
argument_list|()
operator|.
name|parse
argument_list|(
name|citeString
argument_list|)
decl_stmt|;
name|TexParserResult
name|expectedResult
init|=
operator|new
name|TexParserResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
condition|)
block|{
name|expectedResult
operator|.
name|getCitations
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|getCitations
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Citation
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|citeString
operator|.
name|length
argument_list|()
argument_list|,
name|citeString
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|texParserResult
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchCite (String citeString)
specifier|private
name|void
name|testMatchCite
parameter_list|(
name|String
name|citeString
parameter_list|)
block|{
name|testCite
argument_list|(
name|UNRESOLVED
argument_list|,
name|citeString
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonMatchCite (String citeString)
specifier|private
name|void
name|testNonMatchCite
parameter_list|(
name|String
name|citeString
parameter_list|)
block|{
name|testCite
argument_list|(
name|UNRESOLVED
argument_list|,
name|citeString
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCiteCommands ()
name|void
name|testCiteCommands
parameter_list|()
block|{
name|testMatchCite
argument_list|(
literal|"\\cite[pre][post]{UnresolvedKey}"
argument_list|)
expr_stmt|;
name|testMatchCite
argument_list|(
literal|"\\cite*{UnresolvedKey}"
argument_list|)
expr_stmt|;
name|testMatchCite
argument_list|(
literal|"\\parencite[post]{UnresolvedKey}"
argument_list|)
expr_stmt|;
name|testMatchCite
argument_list|(
literal|"\\cite[pre][post]{UnresolvedKey}"
argument_list|)
expr_stmt|;
name|testMatchCite
argument_list|(
literal|"\\citep{UnresolvedKey}"
argument_list|)
expr_stmt|;
name|testNonMatchCite
argument_list|(
literal|"\\citet21312{123U123n123resolvedKey}"
argument_list|)
expr_stmt|;
name|testNonMatchCite
argument_list|(
literal|"\\1cite[pr234e][post]{UnresolvedKey}"
argument_list|)
expr_stmt|;
name|testNonMatchCite
argument_list|(
literal|"\\citep55{5}UnresolvedKey}"
argument_list|)
expr_stmt|;
name|testNonMatchCite
argument_list|(
literal|"\\cit2et{UnresolvedKey}"
argument_list|)
expr_stmt|;
block|}
DECL|method|addCite (CrossingKeysResult expectedResult, String key, Path texFile, int line, int colStart, int colEnd, String lineText, boolean insert)
specifier|private
name|void
name|addCite
parameter_list|(
name|CrossingKeysResult
name|expectedResult
parameter_list|,
name|String
name|key
parameter_list|,
name|Path
name|texFile
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|colStart
parameter_list|,
name|int
name|colEnd
parameter_list|,
name|String
name|lineText
parameter_list|,
name|boolean
name|insert
parameter_list|)
block|{
name|Citation
name|citation
init|=
operator|new
name|Citation
argument_list|(
name|texFile
argument_list|,
name|line
argument_list|,
name|colStart
argument_list|,
name|colEnd
argument_list|,
name|lineText
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expectedResult
operator|.
name|getParserResult
argument_list|()
operator|.
name|getCitations
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|expectedResult
operator|.
name|getParserResult
argument_list|()
operator|.
name|getCitations
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|expectedResult
operator|.
name|getParserResult
argument_list|()
operator|.
name|getCitations
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|contains
argument_list|(
name|citation
argument_list|)
condition|)
block|{
name|expectedResult
operator|.
name|getParserResult
argument_list|()
operator|.
name|getCitations
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|add
argument_list|(
name|citation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|insert
condition|)
block|{
name|BibEntry
name|clonedEntry
init|=
operator|(
name|BibEntry
operator|)
name|expectedResult
operator|.
name|getMasterDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|expectedResult
operator|.
name|getNewDatabase
argument_list|()
operator|.
name|insertEntry
argument_list|(
name|clonedEntry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectedResult
operator|.
name|getUnresolvedKeys
argument_list|()
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleFile ()
name|void
name|testSingleFile
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|InputStream
name|originalStream
init|=
name|TexParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"origin.bib"
argument_list|)
decl_stmt|;
name|Path
name|texFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TexParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"paper.tex"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStreamReader
name|originalReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|originalStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|ParserResult
name|result
init|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
operator|new
name|DummyFileUpdateMonitor
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|originalReader
argument_list|)
decl_stmt|;
name|TexParserResult
name|parserResult
init|=
operator|new
name|DefaultTexParser
argument_list|()
operator|.
name|parse
argument_list|(
name|texFile
argument_list|)
decl_stmt|;
name|TexParserResult
name|expectedParserResult
init|=
operator|new
name|TexParserResult
argument_list|()
decl_stmt|;
name|expectedParserResult
operator|.
name|getFileList
argument_list|()
operator|.
name|add
argument_list|(
name|texFile
argument_list|)
expr_stmt|;
name|CrossingKeysResult
name|crossingResult
init|=
operator|new
name|CrossingKeys
argument_list|(
name|parserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|resolveKeys
argument_list|()
decl_stmt|;
name|CrossingKeysResult
name|expectedCrossingResult
init|=
operator|new
name|CrossingKeysResult
argument_list|(
name|expectedParserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|EINSTEIN
argument_list|,
name|texFile
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|19
argument_list|,
literal|"\\cite{Einstein1920}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|EINSTEIN
argument_list|,
name|texFile
argument_list|,
literal|6
argument_list|,
literal|14
argument_list|,
literal|33
argument_list|,
literal|"Einstein said \\cite{Einstein1920} that lorem impsum, consectetur adipiscing elit."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|DARWIN
argument_list|,
name|texFile
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|17
argument_list|,
literal|"\\cite{Darwin1888}."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|DARWIN
argument_list|,
name|texFile
argument_list|,
literal|7
argument_list|,
literal|67
argument_list|,
literal|84
argument_list|,
literal|"Nunc ultricies leo nec libero rhoncus, eu vehicula enim efficitur. \\cite{Darwin1888}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCrossingResult
argument_list|,
name|crossingResult
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTwoFiles ()
name|void
name|testTwoFiles
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|String
name|NEWTON
init|=
literal|"Newton1999"
decl_stmt|;
name|InputStream
name|originalStream
init|=
name|TexParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"origin.bib"
argument_list|)
decl_stmt|;
name|Path
name|texFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TexParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"paper.tex"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|texFile2
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TexParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"paper2.tex"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStreamReader
name|originalReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|originalStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|ParserResult
name|result
init|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
operator|new
name|DummyFileUpdateMonitor
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|originalReader
argument_list|)
decl_stmt|;
name|TexParserResult
name|parserResult
init|=
operator|new
name|DefaultTexParser
argument_list|()
operator|.
name|parse
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|texFile
argument_list|,
name|texFile2
argument_list|)
argument_list|)
decl_stmt|;
name|TexParserResult
name|expectedParserResult
init|=
operator|new
name|TexParserResult
argument_list|()
decl_stmt|;
name|expectedParserResult
operator|.
name|getFileList
argument_list|()
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|texFile
argument_list|,
name|texFile2
argument_list|)
argument_list|)
expr_stmt|;
name|CrossingKeysResult
name|crossingResult
init|=
operator|new
name|CrossingKeys
argument_list|(
name|parserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|resolveKeys
argument_list|()
decl_stmt|;
name|CrossingKeysResult
name|expectedCrossingResult
init|=
operator|new
name|CrossingKeysResult
argument_list|(
name|expectedParserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|EINSTEIN
argument_list|,
name|texFile
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|19
argument_list|,
literal|"\\cite{Einstein1920}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|EINSTEIN
argument_list|,
name|texFile
argument_list|,
literal|6
argument_list|,
literal|14
argument_list|,
literal|33
argument_list|,
literal|"Einstein said \\cite{Einstein1920} that lorem impsum, consectetur adipiscing elit."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|EINSTEIN
argument_list|,
name|texFile2
argument_list|,
literal|5
argument_list|,
literal|48
argument_list|,
literal|67
argument_list|,
literal|"This is some content trying to cite a bib file: \\cite{Einstein1920}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|DARWIN
argument_list|,
name|texFile
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|17
argument_list|,
literal|"\\cite{Darwin1888}."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|DARWIN
argument_list|,
name|texFile
argument_list|,
literal|7
argument_list|,
literal|67
argument_list|,
literal|84
argument_list|,
literal|"Nunc ultricies leo nec libero rhoncus, eu vehicula enim efficitur. \\cite{Darwin1888}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|DARWIN
argument_list|,
name|texFile2
argument_list|,
literal|4
argument_list|,
literal|48
argument_list|,
literal|65
argument_list|,
literal|"This is some content trying to cite a bib file: \\cite{Darwin1888}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|NEWTON
argument_list|,
name|texFile2
argument_list|,
literal|6
argument_list|,
literal|48
argument_list|,
literal|65
argument_list|,
literal|"This is some content trying to cite a bib file: \\cite{Newton1999}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCrossingResult
argument_list|,
name|crossingResult
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDuplicateFiles ()
name|void
name|testDuplicateFiles
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|InputStream
name|originalStream
init|=
name|TexParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"origin.bib"
argument_list|)
decl_stmt|;
name|Path
name|texFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TexParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"paper.tex"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStreamReader
name|originalReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|originalStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|ParserResult
name|result
init|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
operator|new
name|DummyFileUpdateMonitor
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|originalReader
argument_list|)
decl_stmt|;
name|TexParserResult
name|parserResult
init|=
operator|new
name|DefaultTexParser
argument_list|()
operator|.
name|parse
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|texFile
argument_list|,
name|texFile
argument_list|)
argument_list|)
decl_stmt|;
name|TexParserResult
name|expectedParserResult
init|=
operator|new
name|TexParserResult
argument_list|()
decl_stmt|;
name|expectedParserResult
operator|.
name|getFileList
argument_list|()
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|texFile
argument_list|,
name|texFile
argument_list|)
argument_list|)
expr_stmt|;
name|CrossingKeysResult
name|crossingResult
init|=
operator|new
name|CrossingKeys
argument_list|(
name|parserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|resolveKeys
argument_list|()
decl_stmt|;
name|CrossingKeysResult
name|expectedCrossingResult
init|=
operator|new
name|CrossingKeysResult
argument_list|(
name|expectedParserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|EINSTEIN
argument_list|,
name|texFile
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|19
argument_list|,
literal|"\\cite{Einstein1920}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|EINSTEIN
argument_list|,
name|texFile
argument_list|,
literal|6
argument_list|,
literal|14
argument_list|,
literal|33
argument_list|,
literal|"Einstein said \\cite{Einstein1920} that lorem impsum, consectetur adipiscing elit."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|DARWIN
argument_list|,
name|texFile
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|17
argument_list|,
literal|"\\cite{Darwin1888}."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|DARWIN
argument_list|,
name|texFile
argument_list|,
literal|7
argument_list|,
literal|67
argument_list|,
literal|84
argument_list|,
literal|"Nunc ultricies leo nec libero rhoncus, eu vehicula enim efficitur. \\cite{Darwin1888}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCrossingResult
argument_list|,
name|crossingResult
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUnknownKey ()
name|void
name|testUnknownKey
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|String
name|UNKNOWN
init|=
literal|"UnknownKey"
decl_stmt|;
name|InputStream
name|originalStream
init|=
name|TexParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"origin.bib"
argument_list|)
decl_stmt|;
name|Path
name|texFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TexParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"unknown_key.tex"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStreamReader
name|originalReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|originalStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|ParserResult
name|result
init|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
operator|new
name|DummyFileUpdateMonitor
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|originalReader
argument_list|)
decl_stmt|;
name|TexParserResult
name|parserResult
init|=
operator|new
name|DefaultTexParser
argument_list|()
operator|.
name|parse
argument_list|(
name|texFile
argument_list|)
decl_stmt|;
name|TexParserResult
name|expectedParserResult
init|=
operator|new
name|TexParserResult
argument_list|()
decl_stmt|;
name|expectedParserResult
operator|.
name|getFileList
argument_list|()
operator|.
name|add
argument_list|(
name|texFile
argument_list|)
expr_stmt|;
name|CrossingKeysResult
name|crossingResult
init|=
operator|new
name|CrossingKeys
argument_list|(
name|parserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|resolveKeys
argument_list|()
decl_stmt|;
name|CrossingKeysResult
name|expectedCrossingResult
init|=
operator|new
name|CrossingKeysResult
argument_list|(
name|expectedParserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|EINSTEIN
argument_list|,
name|texFile
argument_list|,
literal|5
argument_list|,
literal|48
argument_list|,
literal|67
argument_list|,
literal|"This is some content trying to cite a bib file: \\cite{Einstein1920}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|DARWIN
argument_list|,
name|texFile
argument_list|,
literal|4
argument_list|,
literal|48
argument_list|,
literal|65
argument_list|,
literal|"This is some content trying to cite a bib file: \\cite{Darwin1888}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|UNKNOWN
argument_list|,
name|texFile
argument_list|,
literal|6
argument_list|,
literal|48
argument_list|,
literal|65
argument_list|,
literal|"This is some content trying to cite a bib file: \\cite{UnknownKey}"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCrossingResult
argument_list|,
name|crossingResult
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFileNotFound ()
name|void
name|testFileNotFound
parameter_list|()
block|{
name|TexParserResult
name|parserResult
init|=
operator|new
name|DefaultTexParser
argument_list|()
operator|.
name|parse
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"file_not_found.tex"
argument_list|)
argument_list|)
decl_stmt|;
name|TexParserResult
name|expectedParserResult
init|=
operator|new
name|TexParserResult
argument_list|()
decl_stmt|;
name|expectedParserResult
operator|.
name|getFileList
argument_list|()
operator|.
name|add
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"file_not_found.tex"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedParserResult
argument_list|,
name|parserResult
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDuplicateBibDatabaseConfiguration ()
name|void
name|testDuplicateBibDatabaseConfiguration
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|InputStream
name|originalStream
init|=
name|TexParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"config.bib"
argument_list|)
decl_stmt|;
name|Path
name|texFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TexParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"paper.tex"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStreamReader
name|originalReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|originalStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|ParserResult
name|result
init|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
operator|new
name|DummyFileUpdateMonitor
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|originalReader
argument_list|)
decl_stmt|;
name|TexParserResult
name|parserResult
init|=
operator|new
name|DefaultTexParser
argument_list|()
operator|.
name|parse
argument_list|(
name|texFile
argument_list|)
decl_stmt|;
name|CrossingKeysResult
name|crossingResult
init|=
operator|new
name|CrossingKeys
argument_list|(
name|parserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|resolveKeys
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"\"Maintained by \" # maintainer"
argument_list|)
argument_list|,
name|crossingResult
operator|.
name|getNewDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|crossingResult
operator|.
name|getNewDatabase
argument_list|()
operator|.
name|getStringCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNestedFiles ()
name|void
name|testNestedFiles
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|InputStream
name|originalStream
init|=
name|TexParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"origin.bib"
argument_list|)
decl_stmt|;
name|Path
name|texFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TexParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"nested.tex"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|texFile2
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TexParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"nested2.tex"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|texFile3
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TexParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"paper.tex"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStreamReader
name|originalReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|originalStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|ParserResult
name|result
init|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
operator|new
name|DummyFileUpdateMonitor
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|originalReader
argument_list|)
decl_stmt|;
name|TexParserResult
name|parserResult
init|=
operator|new
name|DefaultTexParser
argument_list|()
operator|.
name|parse
argument_list|(
name|texFile
argument_list|)
decl_stmt|;
name|TexParserResult
name|expectedParserResult
init|=
operator|new
name|TexParserResult
argument_list|()
decl_stmt|;
name|expectedParserResult
operator|.
name|getFileList
argument_list|()
operator|.
name|add
argument_list|(
name|texFile
argument_list|)
expr_stmt|;
name|expectedParserResult
operator|.
name|getNestedFiles
argument_list|()
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|texFile2
argument_list|,
name|texFile3
argument_list|)
argument_list|)
expr_stmt|;
name|CrossingKeysResult
name|crossingResult
init|=
operator|new
name|CrossingKeys
argument_list|(
name|parserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|resolveKeys
argument_list|()
decl_stmt|;
name|CrossingKeysResult
name|expectedCrossingResult
init|=
operator|new
name|CrossingKeysResult
argument_list|(
name|expectedParserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|EINSTEIN
argument_list|,
name|texFile
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"paper.tex"
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|19
argument_list|,
literal|"\\cite{Einstein1920}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|EINSTEIN
argument_list|,
name|texFile
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"paper.tex"
argument_list|)
argument_list|,
literal|6
argument_list|,
literal|14
argument_list|,
literal|33
argument_list|,
literal|"Einstein said \\cite{Einstein1920} that lorem impsum, consectetur adipiscing elit."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|DARWIN
argument_list|,
name|texFile
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"paper.tex"
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|17
argument_list|,
literal|"\\cite{Darwin1888}."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCite
argument_list|(
name|expectedCrossingResult
argument_list|,
name|DARWIN
argument_list|,
name|texFile
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"paper.tex"
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|67
argument_list|,
literal|84
argument_list|,
literal|"Nunc ultricies leo nec libero rhoncus, eu vehicula enim efficitur. \\cite{Darwin1888}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCrossingResult
argument_list|,
name|crossingResult
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCrossRef ()
name|void
name|testCrossRef
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|String
name|EINSTEIN_A
init|=
literal|"Einstein1920a"
decl_stmt|;
name|String
name|EINSTEIN_B
init|=
literal|"Einstein1920b"
decl_stmt|;
name|String
name|EINSTEIN21
init|=
literal|"Einstein1921"
decl_stmt|;
name|String
name|EINSTEIN_C
init|=
literal|"Einstein1920c"
decl_stmt|;
name|InputStream
name|originalStream
init|=
name|TexParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"origin.bib"
argument_list|)
decl_stmt|;
name|Path
name|texFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TexParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"crossref.tex"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStreamReader
name|originalReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|originalStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|ParserResult
name|result
init|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
operator|new
name|DummyFileUpdateMonitor
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|originalReader
argument_list|)
decl_stmt|;
name|TexParserResult
name|parserResult
init|=
operator|new
name|DefaultTexParser
argument_list|()
operator|.
name|parse
argument_list|(
name|texFile
argument_list|)
decl_stmt|;
name|TexParserResult
name|expectedParserResult
init|=
operator|new
name|TexParserResult
argument_list|()
decl_stmt|;
name|expectedParserResult
operator|.
name|getFileList
argument_list|()
operator|.
name|add
argument_list|(
name|texFile
argument_list|)
expr_stmt|;
name|CrossingKeysResult
name|crossingResult
init|=
operator|new
name|CrossingKeys
argument_list|(
name|parserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|resolveKeys
argument_list|()
decl_stmt|;
name|CrossingKeysResult
name|expectedCrossingResult
init|=
operator|new
name|CrossingKeysResult
argument_list|(
name|expectedParserResult
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expectedParserResult
operator|.
name|getCitations
argument_list|()
operator|.
name|put
argument_list|(
name|EINSTEIN_A
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedParserResult
operator|.
name|getCitations
argument_list|()
operator|.
name|get
argument_list|(
name|EINSTEIN_A
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Citation
argument_list|(
name|texFile
argument_list|,
literal|4
argument_list|,
literal|48
argument_list|,
literal|68
argument_list|,
literal|"This is some content trying to cite a bib file: \\cite{Einstein1920a}"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCrossingResult
operator|.
name|getNewDatabase
argument_list|()
operator|.
name|insertEntry
argument_list|(
operator|(
name|BibEntry
operator|)
name|expectedCrossingResult
operator|.
name|getMasterDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
name|EINSTEIN_A
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|expectedCrossingResult
operator|.
name|getNewDatabase
argument_list|()
operator|.
name|insertEntry
argument_list|(
operator|(
name|BibEntry
operator|)
name|expectedCrossingResult
operator|.
name|getMasterDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
name|EINSTEIN
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|expectedParserResult
operator|.
name|getCitations
argument_list|()
operator|.
name|put
argument_list|(
name|EINSTEIN_B
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedParserResult
operator|.
name|getCitations
argument_list|()
operator|.
name|get
argument_list|(
name|EINSTEIN_B
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Citation
argument_list|(
name|texFile
argument_list|,
literal|5
argument_list|,
literal|48
argument_list|,
literal|68
argument_list|,
literal|"This is some content trying to cite a bib file: \\cite{Einstein1920b}"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCrossingResult
operator|.
name|getNewDatabase
argument_list|()
operator|.
name|insertEntry
argument_list|(
operator|(
name|BibEntry
operator|)
name|expectedCrossingResult
operator|.
name|getMasterDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
name|EINSTEIN_B
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|expectedCrossingResult
operator|.
name|getUnresolvedKeys
argument_list|()
operator|.
name|add
argument_list|(
name|EINSTEIN21
argument_list|)
expr_stmt|;
name|expectedParserResult
operator|.
name|getCitations
argument_list|()
operator|.
name|put
argument_list|(
name|EINSTEIN_C
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedParserResult
operator|.
name|getCitations
argument_list|()
operator|.
name|get
argument_list|(
name|EINSTEIN_C
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Citation
argument_list|(
name|texFile
argument_list|,
literal|6
argument_list|,
literal|48
argument_list|,
literal|68
argument_list|,
literal|"This is some content trying to cite a bib file: \\cite{Einstein1920c}"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCrossingResult
operator|.
name|getNewDatabase
argument_list|()
operator|.
name|insertEntry
argument_list|(
operator|(
name|BibEntry
operator|)
name|expectedCrossingResult
operator|.
name|getMasterDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
name|EINSTEIN_C
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|expectedParserResult
operator|.
name|getCitations
argument_list|()
operator|.
name|put
argument_list|(
name|UNRESOLVED
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedParserResult
operator|.
name|getCitations
argument_list|()
operator|.
name|get
argument_list|(
name|UNRESOLVED
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Citation
argument_list|(
name|texFile
argument_list|,
literal|7
argument_list|,
literal|48
argument_list|,
literal|68
argument_list|,
literal|"This is some content trying to cite a bib file: \\cite{UnresolvedKey}"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCrossingResult
operator|.
name|getUnresolvedKeys
argument_list|()
operator|.
name|add
argument_list|(
name|UNRESOLVED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCrossingResult
argument_list|,
name|crossingResult
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

