begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.exporter
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatterPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XmpPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Answers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|XmpExporterTest
specifier|public
class|class
name|XmpExporterTest
block|{
DECL|field|exporter
specifier|private
name|Exporter
name|exporter
decl_stmt|;
DECL|field|databaseContext
specifier|private
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|encoding
specifier|private
name|Charset
name|encoding
decl_stmt|;
DECL|field|testFolder
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|testFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TemplateExporter
argument_list|>
name|customFormats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|LayoutFormatterPreferences
name|layoutPreferences
init|=
name|mock
argument_list|(
name|LayoutFormatterPreferences
operator|.
name|class
argument_list|,
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|SavePreferences
name|savePreferences
init|=
name|mock
argument_list|(
name|SavePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|XmpPreferences
name|xmpPreferences
init|=
name|mock
argument_list|(
name|XmpPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExporterFactory
name|exporterFactory
init|=
name|ExporterFactory
operator|.
name|create
argument_list|(
name|customFormats
argument_list|,
name|layoutPreferences
argument_list|,
name|savePreferences
argument_list|,
name|xmpPreferences
argument_list|)
decl_stmt|;
name|exporter
operator|=
name|exporterFactory
operator|.
name|getExporterByName
argument_list|(
literal|"xmp"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|databaseContext
operator|=
operator|new
name|BibDatabaseContext
argument_list|()
expr_stmt|;
name|encoding
operator|=
name|StandardCharsets
operator|.
name|UTF_8
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|exportSingleEntry ()
specifier|public
name|void
name|exportSingleEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|testFolder
operator|.
name|newFile
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Alan Turing"
argument_list|)
expr_stmt|;
name|exporter
operator|.
name|export
argument_list|(
name|databaseContext
argument_list|,
name|file
argument_list|,
name|encoding
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|lines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<rdf:li>Alan Turing</rdf:li>"
argument_list|,
name|lines
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeMultipleEntriesInASingleFile ()
specifier|public
name|void
name|writeMultipleEntriesInASingleFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|testFolder
operator|.
name|newFile
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|BibEntry
name|entryTuring
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entryTuring
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Alan Turing"
argument_list|)
expr_stmt|;
name|BibEntry
name|entryArmbrust
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entryArmbrust
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Michael Armbrust"
argument_list|)
expr_stmt|;
name|entryArmbrust
operator|.
name|setCiteKey
argument_list|(
literal|"Armbrust2010"
argument_list|)
expr_stmt|;
name|exporter
operator|.
name|export
argument_list|(
name|databaseContext
argument_list|,
name|file
argument_list|,
name|encoding
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|entryTuring
argument_list|,
name|entryArmbrust
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|33
argument_list|,
name|lines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<rdf:li>Alan Turing</rdf:li>"
argument_list|,
name|lines
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<rdf:li>Michael Armbrust</rdf:li>"
argument_list|,
name|lines
operator|.
name|get
argument_list|(
literal|17
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeMultipleEntriesInDifferentFiles ()
specifier|public
name|void
name|writeMultipleEntriesInDifferentFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|testFolder
operator|.
name|newFile
argument_list|(
literal|"split"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|BibEntry
name|entryTuring
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entryTuring
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Alan Turing"
argument_list|)
expr_stmt|;
name|BibEntry
name|entryArmbrust
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entryArmbrust
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
literal|"Michael Armbrust"
argument_list|)
expr_stmt|;
name|entryArmbrust
operator|.
name|setCiteKey
argument_list|(
literal|"Armbrust2010"
argument_list|)
expr_stmt|;
name|exporter
operator|.
name|export
argument_list|(
name|databaseContext
argument_list|,
name|file
argument_list|,
name|encoding
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|entryTuring
argument_list|,
name|entryArmbrust
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|Path
name|fileTuring
init|=
name|Paths
operator|.
name|get
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|entryTuring
operator|.
name|getId
argument_list|()
operator|+
literal|"_null.xmp"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|linesTuring
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|fileTuring
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|linesTuring
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<rdf:li>Alan Turing</rdf:li>"
argument_list|,
name|linesTuring
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|fileArmbrust
init|=
name|Paths
operator|.
name|get
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|entryArmbrust
operator|.
name|getId
argument_list|()
operator|+
literal|"_Armbrust2010.xmp"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|linesArmbrust
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|fileArmbrust
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|linesArmbrust
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<rdf:li>Michael Armbrust</rdf:li>"
argument_list|,
name|linesArmbrust
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

