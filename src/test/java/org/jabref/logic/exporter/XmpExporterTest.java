begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.exporter
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XmpPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|io
operator|.
name|TempDir
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|XmpExporterTest
specifier|public
class|class
name|XmpExporterTest
block|{
DECL|field|exporter
specifier|private
name|Exporter
name|exporter
decl_stmt|;
DECL|field|databaseContext
specifier|private
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|encoding
specifier|private
name|Charset
name|encoding
decl_stmt|;
DECL|field|xmpPreferences
specifier|private
specifier|final
name|XmpPreferences
name|xmpPreferences
init|=
name|mock
argument_list|(
name|XmpPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|exporter
operator|=
operator|new
name|XmpExporter
argument_list|(
name|xmpPreferences
argument_list|)
expr_stmt|;
name|databaseContext
operator|=
operator|new
name|BibDatabaseContext
argument_list|()
expr_stmt|;
name|encoding
operator|=
name|StandardCharsets
operator|.
name|UTF_8
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|exportSingleEntry (@empDir Path testFolder)
specifier|public
name|void
name|exportSingleEntry
parameter_list|(
annotation|@
name|TempDir
name|Path
name|testFolder
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"ThisIsARandomlyNamedFile"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"Alan Turing"
argument_list|)
expr_stmt|;
name|exporter
operator|.
name|export
argument_list|(
name|databaseContext
argument_list|,
name|file
argument_list|,
name|encoding
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|String
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|Files
operator|.
name|readAllLines
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
comment|//we are using \n to join, so we need it in the expected string as well, \r\n would fail
name|String
name|expected
init|=
literal|"<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n"
operator|+
literal|"<rdf:Description xmlns:dc=\"http://purl.org/dc/elements/1.1/\" rdf:about=\"\">\n"
operator|+
literal|"<dc:creator>\n"
operator|+
literal|"<rdf:Seq>\n"
operator|+
literal|"<rdf:li>Alan Turing</rdf:li>\n"
operator|+
literal|"</rdf:Seq>\n"
operator|+
literal|"</dc:creator>\n"
operator|+
literal|"<dc:format>application/pdf</dc:format>\n"
operator|+
literal|"<dc:type>\n"
operator|+
literal|"<rdf:Bag>\n"
operator|+
literal|"<rdf:li>Misc</rdf:li>\n"
operator|+
literal|"</rdf:Bag>\n"
operator|+
literal|"</dc:type>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"</rdf:RDF>"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeMultipleEntriesInASingleFile (@empDir Path testFolder)
specifier|public
name|void
name|writeMultipleEntriesInASingleFile
parameter_list|(
annotation|@
name|TempDir
name|Path
name|testFolder
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"ThisIsARandomlyNamedFile"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|BibEntry
name|entryTuring
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entryTuring
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"Alan Turing"
argument_list|)
expr_stmt|;
name|BibEntry
name|entryArmbrust
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entryArmbrust
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"Michael Armbrust"
argument_list|)
expr_stmt|;
name|entryArmbrust
operator|.
name|setCiteKey
argument_list|(
literal|"Armbrust2010"
argument_list|)
expr_stmt|;
name|exporter
operator|.
name|export
argument_list|(
name|databaseContext
argument_list|,
name|file
argument_list|,
name|encoding
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|entryTuring
argument_list|,
name|entryArmbrust
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|String
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|Files
operator|.
name|readAllLines
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
comment|//we are using \n to join, so we need it in the expected string as well, \r\n would fail
name|String
name|expected
init|=
literal|"<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n"
operator|+
literal|"<rdf:Description xmlns:dc=\"http://purl.org/dc/elements/1.1/\" rdf:about=\"\">\n"
operator|+
literal|"<dc:creator>\n"
operator|+
literal|"<rdf:Seq>\n"
operator|+
literal|"<rdf:li>Alan Turing</rdf:li>\n"
operator|+
literal|"</rdf:Seq>\n"
operator|+
literal|"</dc:creator>\n"
operator|+
literal|"<dc:format>application/pdf</dc:format>\n"
operator|+
literal|"<dc:type>\n"
operator|+
literal|"<rdf:Bag>\n"
operator|+
literal|"<rdf:li>Misc</rdf:li>\n"
operator|+
literal|"</rdf:Bag>\n"
operator|+
literal|"</dc:type>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"<rdf:Description xmlns:dc=\"http://purl.org/dc/elements/1.1/\" rdf:about=\"\">\n"
operator|+
literal|"<dc:creator>\n"
operator|+
literal|"<rdf:Seq>\n"
operator|+
literal|"<rdf:li>Michael Armbrust</rdf:li>\n"
operator|+
literal|"</rdf:Seq>\n"
operator|+
literal|"</dc:creator>\n"
operator|+
literal|"<dc:relation>\n"
operator|+
literal|"<rdf:Bag>\n"
operator|+
literal|"<rdf:li>bibtex/bibtexkey/Armbrust2010</rdf:li>\n"
operator|+
literal|"</rdf:Bag>\n"
operator|+
literal|"</dc:relation>\n"
operator|+
literal|"<dc:format>application/pdf</dc:format>\n"
operator|+
literal|"<dc:type>\n"
operator|+
literal|"<rdf:Bag>\n"
operator|+
literal|"<rdf:li>Misc</rdf:li>\n"
operator|+
literal|"</rdf:Bag>\n"
operator|+
literal|"</dc:type>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"</rdf:RDF>"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|writeMultipleEntriesInDifferentFiles (@empDir Path testFolder)
specifier|public
name|void
name|writeMultipleEntriesInDifferentFiles
parameter_list|(
annotation|@
name|TempDir
name|Path
name|testFolder
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"split"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|BibEntry
name|entryTuring
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entryTuring
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"Alan Turing"
argument_list|)
expr_stmt|;
name|BibEntry
name|entryArmbrust
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entryArmbrust
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"Michael Armbrust"
argument_list|)
expr_stmt|;
name|entryArmbrust
operator|.
name|setCiteKey
argument_list|(
literal|"Armbrust2010"
argument_list|)
expr_stmt|;
name|exporter
operator|.
name|export
argument_list|(
name|databaseContext
argument_list|,
name|file
argument_list|,
name|encoding
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|entryTuring
argument_list|,
name|entryArmbrust
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|Path
name|fileTuring
init|=
name|Paths
operator|.
name|get
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|entryTuring
operator|.
name|getId
argument_list|()
operator|+
literal|"_null.xmp"
argument_list|)
decl_stmt|;
name|String
name|actualTuring
init|=
name|String
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|Files
operator|.
name|readAllLines
argument_list|(
name|fileTuring
argument_list|)
argument_list|)
decl_stmt|;
comment|//we are using \n to join, so we need it in the expected string as well, \r\n would fail
name|String
name|expectedTuring
init|=
literal|"<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n"
operator|+
literal|"<rdf:Description xmlns:dc=\"http://purl.org/dc/elements/1.1/\" rdf:about=\"\">\n"
operator|+
literal|"<dc:creator>\n"
operator|+
literal|"<rdf:Seq>\n"
operator|+
literal|"<rdf:li>Alan Turing</rdf:li>\n"
operator|+
literal|"</rdf:Seq>\n"
operator|+
literal|"</dc:creator>\n"
operator|+
literal|"<dc:format>application/pdf</dc:format>\n"
operator|+
literal|"<dc:type>\n"
operator|+
literal|"<rdf:Bag>\n"
operator|+
literal|"<rdf:li>Misc</rdf:li>\n"
operator|+
literal|"</rdf:Bag>\n"
operator|+
literal|"</dc:type>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"</rdf:RDF>"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedTuring
argument_list|,
name|actualTuring
argument_list|)
expr_stmt|;
name|Path
name|fileArmbrust
init|=
name|Paths
operator|.
name|get
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|entryArmbrust
operator|.
name|getId
argument_list|()
operator|+
literal|"_Armbrust2010.xmp"
argument_list|)
decl_stmt|;
name|String
name|actualArmbrust
init|=
name|String
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|Files
operator|.
name|readAllLines
argument_list|(
name|fileArmbrust
argument_list|)
argument_list|)
decl_stmt|;
comment|//we are using \n to join, so we need it in the expected string as well, \r\n would fail
name|String
name|expectedArmbrust
init|=
literal|"<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n"
operator|+
literal|"<rdf:Description xmlns:dc=\"http://purl.org/dc/elements/1.1/\" rdf:about=\"\">\n"
operator|+
literal|"<dc:creator>\n"
operator|+
literal|"<rdf:Seq>\n"
operator|+
literal|"<rdf:li>Michael Armbrust</rdf:li>\n"
operator|+
literal|"</rdf:Seq>\n"
operator|+
literal|"</dc:creator>\n"
operator|+
literal|"<dc:relation>\n"
operator|+
literal|"<rdf:Bag>\n"
operator|+
literal|"<rdf:li>bibtex/bibtexkey/Armbrust2010</rdf:li>\n"
operator|+
literal|"</rdf:Bag>\n"
operator|+
literal|"</dc:relation>\n"
operator|+
literal|"<dc:format>application/pdf</dc:format>\n"
operator|+
literal|"<dc:type>\n"
operator|+
literal|"<rdf:Bag>\n"
operator|+
literal|"<rdf:li>Misc</rdf:li>\n"
operator|+
literal|"</rdf:Bag>\n"
operator|+
literal|"</dc:type>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"</rdf:RDF>"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedArmbrust
argument_list|,
name|actualArmbrust
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|exportSingleEntryWithPrivacyFilter (@empDir Path testFolder)
specifier|public
name|void
name|exportSingleEntryWithPrivacyFilter
parameter_list|(
annotation|@
name|TempDir
name|Path
name|testFolder
parameter_list|)
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|xmpPreferences
operator|.
name|getXmpPrivacyFilter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|xmpPreferences
operator|.
name|isUseXMPPrivacyFilter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"ThisIsARandomlyNamedFile"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
literal|"Alan Turing"
argument_list|)
expr_stmt|;
name|exporter
operator|.
name|export
argument_list|(
name|databaseContext
argument_list|,
name|file
argument_list|,
name|encoding
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|String
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|Files
operator|.
name|readAllLines
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n"
operator|+
literal|"<rdf:Description xmlns:dc=\"http://purl.org/dc/elements/1.1/\" rdf:about=\"\">\n"
operator|+
literal|"<dc:format>application/pdf</dc:format>\n"
operator|+
literal|"<dc:type>\n"
operator|+
literal|"<rdf:Bag>\n"
operator|+
literal|"<rdf:li>Misc</rdf:li>\n"
operator|+
literal|"</rdf:Bag>\n"
operator|+
literal|"</dc:type>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"</rdf:RDF>"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

