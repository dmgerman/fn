begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.exporter
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatterPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XmpPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|extension
operator|.
name|ExtendWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junitpioneer
operator|.
name|jupiter
operator|.
name|TempDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
annotation|@
name|ExtendWith
argument_list|(
name|TempDirectory
operator|.
name|class
argument_list|)
DECL|class|ExporterTest
specifier|public
class|class
name|ExporterTest
block|{
DECL|field|databaseContext
specifier|public
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|charset
specifier|public
name|Charset
name|charset
decl_stmt|;
DECL|field|entries
specifier|public
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|databaseContext
operator|=
operator|new
name|BibDatabaseContext
argument_list|()
expr_stmt|;
name|charset
operator|=
name|StandardCharsets
operator|.
name|UTF_8
expr_stmt|;
name|entries
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
DECL|method|exportFormats ()
specifier|private
specifier|static
name|Stream
argument_list|<
name|Object
index|[]
argument_list|>
name|exportFormats
parameter_list|()
block|{
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TemplateExporter
argument_list|>
name|customFormats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LayoutFormatterPreferences
name|layoutPreferences
init|=
name|mock
argument_list|(
name|LayoutFormatterPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|SavePreferences
name|savePreferences
init|=
name|mock
argument_list|(
name|SavePreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|XmpPreferences
name|xmpPreferences
init|=
name|mock
argument_list|(
name|XmpPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExporterFactory
name|exporterFactory
init|=
name|ExporterFactory
operator|.
name|create
argument_list|(
name|customFormats
argument_list|,
name|layoutPreferences
argument_list|,
name|savePreferences
argument_list|,
name|xmpPreferences
argument_list|)
decl_stmt|;
for|for
control|(
name|Exporter
name|format
range|:
name|exporterFactory
operator|.
name|getExporters
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|format
block|,
name|format
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|stream
argument_list|()
return|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"exportFormats"
argument_list|)
DECL|method|testExportingEmptyDatabaseYieldsEmptyFile (Exporter exportFormat, String name, @TempDirectory.TempDir Path testFolder)
specifier|public
name|void
name|testExportingEmptyDatabaseYieldsEmptyFile
parameter_list|(
name|Exporter
name|exportFormat
parameter_list|,
name|String
name|name
parameter_list|,
annotation|@
name|TempDirectory
operator|.
name|TempDir
name|Path
name|testFolder
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|tmpFile
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"ARandomlyNamedFile"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|exportFormat
operator|.
name|export
argument_list|(
name|databaseContext
argument_list|,
name|tmpFile
argument_list|,
name|charset
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Files
operator|.
name|readAllLines
argument_list|(
name|tmpFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"exportFormats"
argument_list|)
DECL|method|testExportingNullDatabaseThrowsNPE (Exporter exportFormat, String name, @TempDirectory.TempDir Path testFolder)
specifier|public
name|void
name|testExportingNullDatabaseThrowsNPE
parameter_list|(
name|Exporter
name|exportFormat
parameter_list|,
name|String
name|name
parameter_list|,
annotation|@
name|TempDirectory
operator|.
name|TempDir
name|Path
name|testFolder
parameter_list|)
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|Path
name|tmpFile
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"ARandomlyNamedFile"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|exportFormat
operator|.
name|export
argument_list|(
literal|null
argument_list|,
name|tmpFile
argument_list|,
name|charset
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"exportFormats"
argument_list|)
DECL|method|testExportingNullEntriesThrowsNPE (Exporter exportFormat, String name, @TempDirectory.TempDir Path testFolder)
specifier|public
name|void
name|testExportingNullEntriesThrowsNPE
parameter_list|(
name|Exporter
name|exportFormat
parameter_list|,
name|String
name|name
parameter_list|,
annotation|@
name|TempDirectory
operator|.
name|TempDir
name|Path
name|testFolder
parameter_list|)
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|Path
name|tmpFile
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"ARandomlyNamedFile"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|exportFormat
operator|.
name|export
argument_list|(
name|databaseContext
argument_list|,
name|tmpFile
argument_list|,
name|charset
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

