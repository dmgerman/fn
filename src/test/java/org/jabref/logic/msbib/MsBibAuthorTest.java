begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.msbib
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|msbib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|Author
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|MsBibAuthorTest
specifier|public
class|class
name|MsBibAuthorTest
block|{
annotation|@
name|Test
DECL|method|testGetFirstName ()
specifier|public
name|void
name|testGetFirstName
parameter_list|()
block|{
name|Author
name|author
init|=
operator|new
name|Author
argument_list|(
literal|"Gustav Peter Johann"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Bach"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MsBibAuthor
name|msBibAuthor
init|=
operator|new
name|MsBibAuthor
argument_list|(
name|author
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Gustav"
argument_list|,
name|msBibAuthor
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMiddleName ()
specifier|public
name|void
name|testGetMiddleName
parameter_list|()
block|{
name|Author
name|author
init|=
operator|new
name|Author
argument_list|(
literal|"Gustav Peter Johann"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Bach"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MsBibAuthor
name|msBibAuthor
init|=
operator|new
name|MsBibAuthor
argument_list|(
name|author
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Peter Johann"
argument_list|,
name|msBibAuthor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNoMiddleName ()
specifier|public
name|void
name|testGetNoMiddleName
parameter_list|()
block|{
name|Author
name|author
init|=
operator|new
name|Author
argument_list|(
literal|"Gustav"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Bach"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MsBibAuthor
name|msBibAuthor
init|=
operator|new
name|MsBibAuthor
argument_list|(
name|author
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|msBibAuthor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNoFirstName ()
specifier|public
name|void
name|testGetNoFirstName
parameter_list|()
block|{
name|Author
name|author
init|=
operator|new
name|Author
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Bach"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MsBibAuthor
name|msBibAuthor
init|=
operator|new
name|MsBibAuthor
argument_list|(
name|author
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|msBibAuthor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLastName ()
specifier|public
name|void
name|testGetLastName
parameter_list|()
block|{
name|Author
name|author
init|=
operator|new
name|Author
argument_list|(
literal|"Gustav Peter Johann"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Bach"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MsBibAuthor
name|msBibAuthor
init|=
operator|new
name|MsBibAuthor
argument_list|(
name|author
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bach"
argument_list|,
name|msBibAuthor
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

