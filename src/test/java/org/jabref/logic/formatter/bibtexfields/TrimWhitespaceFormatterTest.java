begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.formatter.bibtexfields
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|bibtexfields
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|TrimWhitespaceFormatterTest
specifier|public
class|class
name|TrimWhitespaceFormatterTest
block|{
DECL|field|formatter
specifier|private
name|TrimWhitespaceFormatter
name|formatter
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|formatter
operator|=
operator|new
name|TrimWhitespaceFormatter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeHorizontalTabulations ()
specifier|public
name|void
name|removeHorizontalTabulations
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"\twhitespace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"whitespace\t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"\twhitespace\t\t"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeLineFeeds ()
specifier|public
name|void
name|removeLineFeeds
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"\nwhitespace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"whitespace\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"\nwhitespace\n\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeFormFeeds ()
specifier|public
name|void
name|removeFormFeeds
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"\fwhitespace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"whitespace\f"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"\fwhitespace\f\f"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeCarriageReturnFeeds ()
specifier|public
name|void
name|removeCarriageReturnFeeds
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"\rwhitespace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"whitespace\r"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"\rwhitespace\r\r"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeSeparatorSpaces ()
specifier|public
name|void
name|removeSeparatorSpaces
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|" whitespace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"whitespace "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|" whitespace  "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeMixedWhitespaceChars ()
specifier|public
name|void
name|removeMixedWhitespaceChars
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|" \r\t\fwhitespace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"whitespace \n \r"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitespace"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"   \f\t whitespace  \r \n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

