begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.formatter.bibtexfields
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|bibtexfields
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests in addition to the general tests from {@link org.jabref.logic.formatter.FormatterTest}  */
end_comment

begin_class
DECL|class|NormalizeDateFormatterTest
specifier|public
class|class
name|NormalizeDateFormatterTest
block|{
DECL|field|formatter
specifier|private
name|NormalizeDateFormatter
name|formatter
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|formatter
operator|=
operator|new
name|NormalizeDateFormatter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateYYYYMM0D ()
specifier|public
name|void
name|formatDateYYYYMM0D
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-11-08"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"2015-11-08"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateYYYYM0D ()
specifier|public
name|void
name|formatDateYYYYM0D
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01-08"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"2015-1-08"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateYYYYMD ()
specifier|public
name|void
name|formatDateYYYYMD
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01-08"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"2015-1-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateYYYYMM ()
specifier|public
name|void
name|formatDateYYYYMM
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-11"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"2015-11"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateYYYYM ()
specifier|public
name|void
name|formatDateYYYYM
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"2015-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateMMYY ()
specifier|public
name|void
name|formatDateMMYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-11"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"11/15"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateMYY ()
specifier|public
name|void
name|formatDateMYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"1/15"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDate0MYY ()
specifier|public
name|void
name|formatDate0MYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"01/15"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateMMYYYY ()
specifier|public
name|void
name|formatDateMMYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-11"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"11/2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateMYYYY ()
specifier|public
name|void
name|formatDateMYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"1/2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDate0MYYYY ()
specifier|public
name|void
name|formatDate0MYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"01/2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateMMMDDCommaYYYY ()
specifier|public
name|void
name|formatDateMMMDDCommaYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-11-08"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"November 08, 2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateMMMDCommaYYYY ()
specifier|public
name|void
name|formatDateMMMDCommaYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-11-08"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"November 8, 2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateMMMCommaYYYY ()
specifier|public
name|void
name|formatDateMMMCommaYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-11"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"November, 2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDate0DdotMMdotYYYY ()
specifier|public
name|void
name|formatDate0DdotMMdotYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-11-08"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"08.11.2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateDdotMMdotYYYY ()
specifier|public
name|void
name|formatDateDdotMMdotYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-11-08"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"8.11.2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateDDdotMMdotYYYY ()
specifier|public
name|void
name|formatDateDDdotMMdotYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-11-15"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"15.11.2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDate0Ddot0MdotYYYY ()
specifier|public
name|void
name|formatDate0Ddot0MdotYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01-08"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"08.01.2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateDdot0MdotYYYY ()
specifier|public
name|void
name|formatDateDdot0MdotYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01-08"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"8.01.2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateDDdot0MdotYYYY ()
specifier|public
name|void
name|formatDateDDdot0MdotYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01-15"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"15.01.2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDate0DdotMdotYYYY ()
specifier|public
name|void
name|formatDate0DdotMdotYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01-08"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"08.1.2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateDdotMdotYYYY ()
specifier|public
name|void
name|formatDateDdotMdotYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01-08"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"8.1.2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDateDDdotMdotYYYY ()
specifier|public
name|void
name|formatDateDDdotMdotYYYY
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2015-01-15"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"15.1.2015"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatExample ()
specifier|public
name|void
name|formatExample
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2003-11-29"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
name|formatter
operator|.
name|getExampleInput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

