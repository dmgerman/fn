begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.formatter.bibtexfields
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|bibtexfields
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests in addition to the general tests from {@link org.jabref.logic.formatter.FormatterTest}  */
end_comment

begin_class
DECL|class|AddBracesFormatterTest
class|class
name|AddBracesFormatterTest
block|{
DECL|field|formatter
specifier|private
name|AddBracesFormatter
name|formatter
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|formatter
operator|=
operator|new
name|AddBracesFormatter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatAddsSingleEnclosingBraces ()
specifier|public
name|void
name|formatAddsSingleEnclosingBraces
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{test}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatKeepsUnmatchedBracesAtBeginning ()
specifier|public
name|void
name|formatKeepsUnmatchedBracesAtBeginning
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{test"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"{test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatKeepsUnmatchedBracesAtEnd ()
specifier|public
name|void
name|formatKeepsUnmatchedBracesAtEnd
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"test}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"test}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatKeepsShortString ()
specifier|public
name|void
name|formatKeepsShortString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"t"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"t"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatKeepsEmptyString ()
specifier|public
name|void
name|formatKeepsEmptyString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatKeepsDoubleEnclosingBraces ()
specifier|public
name|void
name|formatKeepsDoubleEnclosingBraces
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{{test}}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"{{test}}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatKeepsTripleEnclosingBraces ()
specifier|public
name|void
name|formatKeepsTripleEnclosingBraces
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{{{test}}}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"{{{test}}}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatKeepsNonMatchingBraces ()
specifier|public
name|void
name|formatKeepsNonMatchingBraces
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{A} and {B}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"{A} and {B}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatKeepsOnlyMatchingBraces ()
specifier|public
name|void
name|formatKeepsOnlyMatchingBraces
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{{A} and {B}}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"{{A} and {B}}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatDoesNotRemoveBracesInBrokenString ()
specifier|public
name|void
name|formatDoesNotRemoveBracesInBrokenString
parameter_list|()
block|{
comment|// We opt here for a conservative approach although one could argue that "A} and {B}" is also a valid return
name|assertEquals
argument_list|(
literal|"{A} and {B}}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|"{A} and {B}}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatExample ()
specifier|public
name|void
name|formatExample
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{In CDMA}"
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
name|formatter
operator|.
name|getExampleInput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

