begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.formatter
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
operator|.
name|ProtectTermsFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
operator|.
name|ProtectedTermsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
operator|.
name|ProtectedTermsPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_class
DECL|class|FormatterTest
class|class
name|FormatterTest
block|{
DECL|field|protectedTermsLoader
specifier|private
specifier|static
name|ProtectedTermsLoader
name|protectedTermsLoader
decl_stmt|;
annotation|@
name|BeforeAll
DECL|method|setUp ()
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|protectedTermsLoader
operator|=
operator|new
name|ProtectedTermsLoader
argument_list|(
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * When a new formatter is added by copy and pasting another formatter, it may happen that the<code>getKey()</code>      * method is not adapted. This results in duplicate keys, which this test tests for.      */
annotation|@
name|Test
DECL|method|allFormatterKeysAreUnique ()
specifier|public
name|void
name|allFormatterKeysAreUnique
parameter_list|()
block|{
comment|// idea for uniqueness checking by https://stackoverflow.com/a/44032568/873282
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|getFormatters
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|formatter
lambda|->
name|formatter
operator|.
name|getKey
argument_list|()
argument_list|,
name|Collectors
operator|.
name|counting
argument_list|()
argument_list|)
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
operator|>
literal|1
argument_list|)
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"getFormatters"
argument_list|)
DECL|method|getNameReturnsNotNull (Formatter formatter)
name|void
name|getNameReturnsNotNull
parameter_list|(
name|Formatter
name|formatter
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|formatter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"getFormatters"
argument_list|)
DECL|method|getNameReturnsNotEmpty (Formatter formatter)
name|void
name|getNameReturnsNotEmpty
parameter_list|(
name|Formatter
name|formatter
parameter_list|)
block|{
name|assertNotEquals
argument_list|(
literal|""
argument_list|,
name|formatter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"getFormatters"
argument_list|)
DECL|method|getKeyReturnsNotNull (Formatter formatter)
name|void
name|getKeyReturnsNotNull
parameter_list|(
name|Formatter
name|formatter
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|formatter
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"getFormatters"
argument_list|)
DECL|method|getKeyReturnsNotEmpty (Formatter formatter)
name|void
name|getKeyReturnsNotEmpty
parameter_list|(
name|Formatter
name|formatter
parameter_list|)
block|{
name|assertNotEquals
argument_list|(
literal|""
argument_list|,
name|formatter
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"getFormatters"
argument_list|)
DECL|method|formatOfNullThrowsException (Formatter formatter)
name|void
name|formatOfNullThrowsException
parameter_list|(
name|Formatter
name|formatter
parameter_list|)
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|formatter
operator|.
name|format
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"getFormatters"
argument_list|)
DECL|method|formatOfEmptyStringReturnsEmpty (Formatter formatter)
name|void
name|formatOfEmptyStringReturnsEmpty
parameter_list|(
name|Formatter
name|formatter
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"getFormatters"
argument_list|)
DECL|method|formatNotReturnsNull (Formatter formatter)
name|void
name|formatNotReturnsNull
parameter_list|(
name|Formatter
name|formatter
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"getFormatters"
argument_list|)
DECL|method|getDescriptionAlwaysNonEmpty (Formatter formatter)
name|void
name|getDescriptionAlwaysNonEmpty
parameter_list|(
name|Formatter
name|formatter
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|formatter
operator|.
name|getDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"getFormatters"
argument_list|)
DECL|method|getExampleInputAlwaysNonEmpty (Formatter formatter)
name|void
name|getExampleInputAlwaysNonEmpty
parameter_list|(
name|Formatter
name|formatter
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|formatter
operator|.
name|getExampleInput
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getFormatters ()
specifier|public
specifier|static
name|Stream
argument_list|<
name|Formatter
argument_list|>
name|getFormatters
parameter_list|()
block|{
comment|// all classes implementing {@link net.sf.jabref.model.cleanup.Formatter}
comment|// Alternative: Use reflection - https://github.com/ronmamo/reflections
comment|// @formatter:off
return|return
name|Stream
operator|.
name|concat
argument_list|(
name|Formatters
operator|.
name|getAll
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
comment|// following formatters are not contained in the list of all formatters, because
comment|// - the IdentityFormatter is not offered to the user,
comment|// - the ProtectTermsFormatter needs more configuration
name|Stream
operator|.
name|of
argument_list|(
operator|new
name|IdentityFormatter
argument_list|()
argument_list|,
operator|new
name|ProtectTermsFormatter
argument_list|(
name|protectedTermsLoader
argument_list|)
argument_list|)
argument_list|)
return|;
comment|// @formatter:on
block|}
block|}
end_class

end_unit

