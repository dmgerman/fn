begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.shared
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|shared
operator|.
name|exception
operator|.
name|InvalidDBMSConnectionPropertiesException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|shared
operator|.
name|DBMSType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|testutils
operator|.
name|category
operator|.
name|DatabaseTest
import|;
end_import

begin_class
annotation|@
name|DatabaseTest
DECL|class|TestConnector
specifier|public
class|class
name|TestConnector
block|{
DECL|method|getTestDBMSConnection (DBMSType dbmsType)
specifier|public
specifier|static
name|DBMSConnection
name|getTestDBMSConnection
parameter_list|(
name|DBMSType
name|dbmsType
parameter_list|)
throws|throws
name|SQLException
throws|,
name|InvalidDBMSConnectionPropertiesException
block|{
name|DBMSConnectionProperties
name|properties
init|=
name|getTestConnectionProperties
argument_list|(
name|dbmsType
argument_list|)
decl_stmt|;
return|return
operator|new
name|DBMSConnection
argument_list|(
name|properties
argument_list|)
return|;
block|}
DECL|method|getTestConnectionProperties (DBMSType dbmsType)
specifier|public
specifier|static
name|DBMSConnectionProperties
name|getTestConnectionProperties
parameter_list|(
name|DBMSType
name|dbmsType
parameter_list|)
block|{
if|if
condition|(
name|dbmsType
operator|==
name|DBMSType
operator|.
name|MYSQL
condition|)
block|{
return|return
operator|new
name|DBMSConnectionProperties
argument_list|(
name|dbmsType
argument_list|,
literal|"localhost"
argument_list|,
name|dbmsType
operator|.
name|getDefaultPort
argument_list|()
argument_list|,
literal|"jabref"
argument_list|,
literal|"root"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
return|;
block|}
if|if
condition|(
name|dbmsType
operator|==
name|DBMSType
operator|.
name|POSTGRESQL
condition|)
block|{
return|return
operator|new
name|DBMSConnectionProperties
argument_list|(
name|dbmsType
argument_list|,
literal|"localhost"
argument_list|,
name|dbmsType
operator|.
name|getDefaultPort
argument_list|()
argument_list|,
literal|"jabref"
argument_list|,
literal|"postgres"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
return|;
block|}
if|if
condition|(
name|dbmsType
operator|==
name|DBMSType
operator|.
name|ORACLE
condition|)
block|{
return|return
operator|new
name|DBMSConnectionProperties
argument_list|(
name|dbmsType
argument_list|,
literal|"localhost"
argument_list|,
name|dbmsType
operator|.
name|getDefaultPort
argument_list|()
argument_list|,
literal|"xe"
argument_list|,
literal|"travis"
argument_list|,
literal|"travis"
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
return|;
block|}
return|return
operator|new
name|DBMSConnectionProperties
argument_list|()
return|;
block|}
block|}
end_class

end_unit

