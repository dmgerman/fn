begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.l10n
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|LocalizationConsistencyTest
class|class
name|LocalizationConsistencyTest
block|{
annotation|@
name|Test
DECL|method|allFilesMustBeInLanguages ()
name|void
name|allFilesMustBeInLanguages
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|bundle
init|=
literal|"JabRef"
decl_stmt|;
comment|// e.g., "<bundle>_en.properties", where<bundle> is [JabRef, Menu]
name|Pattern
name|propertiesFile
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s_.{2,}.properties"
argument_list|,
name|bundle
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|localizationFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|directoryStream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"src/main/resources/l10n"
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|fullPath
range|:
name|directoryStream
control|)
block|{
name|String
name|fileName
init|=
name|fullPath
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertiesFile
operator|.
name|matcher
argument_list|(
name|fileName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|localizationFiles
operator|.
name|add
argument_list|(
name|fileName
operator|.
name|substring
argument_list|(
name|bundle
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|fileName
operator|.
name|length
argument_list|()
operator|-
literal|".properties"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|knownLanguages
init|=
name|Stream
operator|.
name|of
argument_list|(
name|Language
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Language
operator|::
name|getId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|knownLanguages
argument_list|,
name|localizationFiles
argument_list|,
literal|"There are some localization files that are not present in org.jabref.logic.l10n.Language or vice versa!"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ensureNoDuplicates ()
name|void
name|ensureNoDuplicates
parameter_list|()
block|{
name|String
name|bundle
init|=
literal|"JabRef"
decl_stmt|;
for|for
control|(
name|Language
name|lang
range|:
name|Language
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|propertyFilePath
init|=
name|String
operator|.
name|format
argument_list|(
literal|"/l10n/%s_%s.properties"
argument_list|,
name|bundle
argument_list|,
name|lang
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// read in
name|DuplicationDetectionProperties
name|properties
init|=
operator|new
name|DuplicationDetectionProperties
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|LocalizationConsistencyTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|propertyFilePath
argument_list|)
init|;
name|InputStreamReader
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|duplicates
init|=
name|properties
operator|.
name|getDuplicates
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|duplicates
argument_list|,
literal|"Duplicate keys inside bundle "
operator|+
name|bundle
operator|+
literal|"_"
operator|+
name|lang
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|keyValueShouldBeEqualForEnglishPropertiesMessages ()
name|void
name|keyValueShouldBeEqualForEnglishPropertiesMessages
parameter_list|()
block|{
name|Properties
name|englishKeys
init|=
name|LocalizationParser
operator|.
name|getProperties
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"/l10n/%s_%s.properties"
argument_list|,
literal|"JabRef"
argument_list|,
literal|"en"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|englishKeys
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|expectedKeyEqualsKey
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s=%s"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|actualKeyEqualsValue
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s=%s"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedKeyEqualsKey
argument_list|,
name|actualKeyEqualsValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|languageKeysShouldNotBeQuotedInFiles ()
name|void
name|languageKeysShouldNotBeQuotedInFiles
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|LocalizationEntry
argument_list|>
name|quotedEntries
init|=
name|LocalizationParser
operator|.
name|findLocalizationParametersStringsInJavaFiles
argument_list|(
name|LocalizationBundleForTest
operator|.
name|LANG
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|key
lambda|->
name|key
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|"_"
argument_list|)
operator|&&
name|key
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|LocalizationKey
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getPropertiesKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|quotedEntries
argument_list|,
literal|"Language keys must not be used quoted in code! Use \"This is a message\" instead of \"This_is_a_message\".\n"
operator|+
literal|"Please correct the following entries:\n"
operator|+
name|quotedEntries
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|key
lambda|->
name|String
operator|.
name|format
argument_list|(
literal|"\n%s (%s)\n"
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
name|key
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findMissingLocalizationKeys ()
name|void
name|findMissingLocalizationKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|LocalizationEntry
argument_list|>
name|missingKeys
init|=
name|LocalizationParser
operator|.
name|find
argument_list|(
name|LocalizationBundleForTest
operator|.
name|LANG
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|distinct
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|missingKeys
argument_list|,
literal|"DETECTED LANGUAGE KEYS WHICH ARE NOT IN THE ENGLISH LANGUAGE FILE\n"
operator|+
literal|"PASTE THESE INTO THE ENGLISH LANGUAGE FILE\n"
operator|+
name|missingKeys
operator|.
name|parallelStream
argument_list|()
operator|.
name|map
argument_list|(
name|key
lambda|->
name|String
operator|.
name|format
argument_list|(
literal|"%s=%s"
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\ "
argument_list|,
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|,
literal|"\n"
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findObsoleteLocalizationKeys ()
name|void
name|findObsoleteLocalizationKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|obsoleteKeys
init|=
name|LocalizationParser
operator|.
name|findObsolete
argument_list|(
name|LocalizationBundleForTest
operator|.
name|LANG
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|obsoleteKeys
argument_list|,
literal|"Obsolete keys found in language properties file: \n"
operator|+
name|obsoleteKeys
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"1. CHECK IF THE KEY IS REALLY NOT USED ANYMORE\n"
operator|+
literal|"2. REMOVE THESE FROM THE ENGLISH LANGUAGE FILE\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|localizationParameterMustIncludeAString ()
name|void
name|localizationParameterMustIncludeAString
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Must start or end with "
comment|// Localization.lang("test"), Localization.lang("test" + var), Localization.lang(var + "test")
comment|// TODO: Localization.lang(var1 + "test" + var2) not covered
comment|// Localization.lang("Problem downloading from %1", address)
name|Set
argument_list|<
name|LocalizationEntry
argument_list|>
name|keys
init|=
name|LocalizationParser
operator|.
name|findLocalizationParametersStringsInJavaFiles
argument_list|(
name|LocalizationBundleForTest
operator|.
name|LANG
argument_list|)
decl_stmt|;
for|for
control|(
name|LocalizationEntry
name|e
range|:
name|keys
control|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|||
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
argument_list|,
literal|"Illegal localization parameter found. Must include a String with potential concatenation or replacement parameters. Illegal parameter: Localization.lang("
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keys
operator|=
name|LocalizationParser
operator|.
name|findLocalizationParametersStringsInJavaFiles
argument_list|(
name|LocalizationBundleForTest
operator|.
name|MENU
argument_list|)
expr_stmt|;
for|for
control|(
name|LocalizationEntry
name|e
range|:
name|keys
control|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|||
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
argument_list|,
literal|"Illegal localization parameter found. Must include a String with potential concatenation or replacement parameters. Illegal parameter: Localization.lang("
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|installedLanguages ()
specifier|private
specifier|static
name|Language
index|[]
name|installedLanguages
parameter_list|()
block|{
return|return
name|Language
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"installedLanguages"
argument_list|)
DECL|method|resourceBundleExists (Language language)
name|void
name|resourceBundleExists
parameter_list|(
name|Language
name|language
parameter_list|)
block|{
name|Path
name|messagesPropertyFile
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"src/main/resources"
argument_list|)
operator|.
name|resolve
argument_list|(
name|Localization
operator|.
name|RESOURCE_PREFIX
operator|+
literal|"_"
operator|+
name|language
operator|.
name|getId
argument_list|()
operator|+
literal|".properties"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|messagesPropertyFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"installedLanguages"
argument_list|)
DECL|method|languageCanBeLoaded (Language language)
name|void
name|languageCanBeLoaded
parameter_list|(
name|Language
name|language
parameter_list|)
block|{
name|Locale
name|oldLocale
init|=
name|Locale
operator|.
name|getDefault
argument_list|()
decl_stmt|;
try|try
block|{
name|Locale
name|locale
init|=
name|Language
operator|.
name|convertToSupportedLocale
argument_list|(
name|language
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Locale
operator|.
name|setDefault
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|ResourceBundle
name|messages
init|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|Localization
operator|.
name|RESOURCE_PREFIX
argument_list|,
name|locale
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|messages
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Locale
operator|.
name|setDefault
argument_list|(
name|oldLocale
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DuplicationDetectionProperties
specifier|private
specifier|static
class|class
name|DuplicationDetectionProperties
extends|extends
name|Properties
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|duplicates
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|duplicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|DuplicationDetectionProperties ()
name|DuplicationDetectionProperties
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**          * Overriding the HashTable put() so we can check for duplicates          */
annotation|@
name|Override
DECL|method|put (Object key, Object value)
specifier|public
specifier|synchronized
name|Object
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|// Have we seen this key before?
if|if
condition|(
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|duplicates
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|getDuplicates ()
name|List
argument_list|<
name|String
argument_list|>
name|getDuplicates
parameter_list|()
block|{
return|return
name|duplicates
return|;
block|}
block|}
block|}
end_class

end_unit

