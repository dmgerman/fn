begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.cleanup
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|bibtexfields
operator|.
name|UnicodeToLatexFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
operator|.
name|UpperCaseFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|FieldFormatterCleanup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|StandardEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|InternalField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|FieldFormatterCleanupTest
specifier|public
class|class
name|FieldFormatterCleanupTest
block|{
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
DECL|field|fieldMap
specifier|private
name|Map
argument_list|<
name|Field
argument_list|,
name|String
argument_list|>
name|fieldMap
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|fieldMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|entry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
literal|"JabRef"
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
name|StandardField
operator|.
name|BOOKTITLE
argument_list|,
literal|"JabRefBook"
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|,
literal|"twohundredsixteen"
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|,
literal|"october"
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
name|StandardField
operator|.
name|ABSTRACT
argument_list|,
literal|"JabRefAbstract"
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
name|StandardField
operator|.
name|DOI
argument_list|,
literal|"jabrefdoi"
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
name|StandardField
operator|.
name|ISSN
argument_list|,
literal|"jabrefissn"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|fieldMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInternalAllField ()
specifier|public
name|void
name|testInternalAllField
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldFormatterCleanup
name|cleanup
init|=
operator|new
name|FieldFormatterCleanup
argument_list|(
name|InternalField
operator|.
name|INTERNAL_ALL_FIELD
argument_list|,
operator|new
name|UpperCaseFormatter
argument_list|()
argument_list|)
decl_stmt|;
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|BOOKTITLE
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|BOOKTITLE
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|ABSTRACT
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|ABSTRACT
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|DOI
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|DOI
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|ISSN
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|ISSN
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInternalAllTextFieldsField ()
specifier|public
name|void
name|testInternalAllTextFieldsField
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldFormatterCleanup
name|cleanup
init|=
operator|new
name|FieldFormatterCleanup
argument_list|(
name|InternalField
operator|.
name|INTERNAL_ALL_TEXT_FIELDS_FIELD
argument_list|,
operator|new
name|UpperCaseFormatter
argument_list|()
argument_list|)
decl_stmt|;
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|BOOKTITLE
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|BOOKTITLE
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|ABSTRACT
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|ABSTRACT
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|DOI
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|DOI
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldMap
operator|.
name|get
argument_list|(
name|StandardField
operator|.
name|ISSN
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|ISSN
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCleanupAllFieldsIgnoresKeyField ()
specifier|public
name|void
name|testCleanupAllFieldsIgnoresKeyField
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldFormatterCleanup
name|cleanup
init|=
operator|new
name|FieldFormatterCleanup
argument_list|(
name|InternalField
operator|.
name|INTERNAL_ALL_FIELD
argument_list|,
operator|new
name|UnicodeToLatexFormatter
argument_list|()
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|InternalField
operator|.
name|KEY_FIELD
argument_list|,
literal|"FranÃ§ois-Marie Arouet"
argument_list|)
expr_stmt|;
comment|// Contains Ã§, not in Basic Latin
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FranÃ§ois-Marie Arouet"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|InternalField
operator|.
name|KEY_FIELD
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCleanupAllTextFieldsIgnoresKeyField ()
specifier|public
name|void
name|testCleanupAllTextFieldsIgnoresKeyField
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldFormatterCleanup
name|cleanup
init|=
operator|new
name|FieldFormatterCleanup
argument_list|(
name|InternalField
operator|.
name|INTERNAL_ALL_TEXT_FIELDS_FIELD
argument_list|,
operator|new
name|UnicodeToLatexFormatter
argument_list|()
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|InternalField
operator|.
name|KEY_FIELD
argument_list|,
literal|"FranÃ§ois-Marie Arouet"
argument_list|)
expr_stmt|;
comment|// Contains Ã§, not in Basic Latin
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FranÃ§ois-Marie Arouet"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|InternalField
operator|.
name|KEY_FIELD
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCleanupKeyFieldCleansUpKeyField ()
specifier|public
name|void
name|testCleanupKeyFieldCleansUpKeyField
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldFormatterCleanup
name|cleanup
init|=
operator|new
name|FieldFormatterCleanup
argument_list|(
name|InternalField
operator|.
name|KEY_FIELD
argument_list|,
operator|new
name|UnicodeToLatexFormatter
argument_list|()
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|InternalField
operator|.
name|KEY_FIELD
argument_list|,
literal|"FranÃ§ois-Marie Arouet"
argument_list|)
expr_stmt|;
comment|// Contains Ã§, not in Basic Latin
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fran{\\c{c}}ois-Marie Arouet"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|InternalField
operator|.
name|KEY_FIELD
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

