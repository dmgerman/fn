begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.cleanup
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatterPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FileFieldWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FileDirectoryPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|extension
operator|.
name|ExtendWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junitpioneer
operator|.
name|jupiter
operator|.
name|TempDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Answers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|ExtendWith
argument_list|(
name|TempDirectory
operator|.
name|class
argument_list|)
DECL|class|RenamePdfCleanupTest
class|class
name|RenamePdfCleanupTest
block|{
DECL|field|context
specifier|private
name|BibDatabaseContext
name|context
decl_stmt|;
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
DECL|field|fileDirPrefs
specifier|private
name|FileDirectoryPreferences
name|fileDirPrefs
decl_stmt|;
DECL|field|layoutFormatterPreferences
specifier|private
name|LayoutFormatterPreferences
name|layoutFormatterPreferences
decl_stmt|;
annotation|@
name|BeforeEach
DECL|method|setUp (@empDirectory.TempDir Path testFolder)
name|void
name|setUp
parameter_list|(
annotation|@
name|TempDirectory
operator|.
name|TempDir
name|Path
name|testFolder
parameter_list|)
block|{
name|Path
name|path
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"test.bib"
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|()
decl_stmt|;
name|context
operator|=
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|BibDatabase
argument_list|()
argument_list|,
name|metaData
argument_list|,
operator|new
name|Defaults
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setDatabaseFile
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|fileDirPrefs
operator|=
name|mock
argument_list|(
name|FileDirectoryPreferences
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileDirPrefs
operator|.
name|isBibLocationAsPrimary
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//Set Biblocation as Primary Directory, otherwise the tmp folders won't be cleaned up correctly
name|entry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"Toot"
argument_list|)
expr_stmt|;
name|layoutFormatterPreferences
operator|=
name|mock
argument_list|(
name|LayoutFormatterPreferences
operator|.
name|class
argument_list|,
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for #466      */
annotation|@
name|Test
DECL|method|cleanupRenamePdfRenamesFileEvenIfOnlyDifferenceIsCase (@empDirectory.TempDir Path testFolder)
name|void
name|cleanupRenamePdfRenamesFileEvenIfOnlyDifferenceIsCase
parameter_list|(
annotation|@
name|TempDirectory
operator|.
name|TempDir
name|Path
name|testFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileNamePattern
init|=
literal|"[bibtexkey]"
decl_stmt|;
name|Path
name|path
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"toot.tmp"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|LinkedFile
name|fileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|fileField
argument_list|)
argument_list|)
expr_stmt|;
name|RenamePdfCleanup
name|cleanup
init|=
operator|new
name|RenamePdfCleanup
argument_list|(
literal|false
argument_list|,
name|context
argument_list|,
name|fileNamePattern
argument_list|,
name|fileDirPrefs
argument_list|)
decl_stmt|;
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|LinkedFile
name|newFileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|"Toot.tmp"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|newFileField
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupRenamePdfRenamesWithMultipleFiles (@empDirectory.TempDir Path testFolder)
name|void
name|cleanupRenamePdfRenamesWithMultipleFiles
parameter_list|(
annotation|@
name|TempDirectory
operator|.
name|TempDir
name|Path
name|testFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileNamePattern
init|=
literal|"[bibtexkey] - [fulltitle]"
decl_stmt|;
name|Path
name|path
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"Toot.tmp"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|File
name|tempFile
init|=
name|path
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"test title"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RenamePdfCleanup
name|cleanup
init|=
operator|new
name|RenamePdfCleanup
argument_list|(
literal|false
argument_list|,
name|context
argument_list|,
name|fileNamePattern
argument_list|,
name|fileDirPrefs
argument_list|)
decl_stmt|;
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|"Toot - test title.tmp"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupRenamePdfRenamesFileStartingWithBibtexKey (@empDirectory.TempDir Path testFolder)
name|void
name|cleanupRenamePdfRenamesFileStartingWithBibtexKey
parameter_list|(
annotation|@
name|TempDirectory
operator|.
name|TempDir
name|Path
name|testFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileNamePattern
init|=
literal|"[bibtexkey] - [fulltitle]"
decl_stmt|;
name|Path
name|path
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"Toot.tmp"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|LinkedFile
name|fileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|fileField
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"test title"
argument_list|)
expr_stmt|;
name|RenamePdfCleanup
name|cleanup
init|=
operator|new
name|RenamePdfCleanup
argument_list|(
literal|false
argument_list|,
name|context
argument_list|,
name|fileNamePattern
argument_list|,
name|fileDirPrefs
argument_list|)
decl_stmt|;
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|LinkedFile
name|newFileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|"Toot - test title.tmp"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|newFileField
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupRenamePdfRenamesFileInSameFolder (@empDirectory.TempDir Path testFolder)
name|void
name|cleanupRenamePdfRenamesFileInSameFolder
parameter_list|(
annotation|@
name|TempDirectory
operator|.
name|TempDir
name|Path
name|testFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileNamePattern
init|=
literal|"[bibtexkey] - [fulltitle]"
decl_stmt|;
name|Path
name|path
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"Toot.pdf"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|LinkedFile
name|fileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|"Toot.pdf"
argument_list|,
literal|"PDF"
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|fileField
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"test title"
argument_list|)
expr_stmt|;
name|RenamePdfCleanup
name|cleanup
init|=
operator|new
name|RenamePdfCleanup
argument_list|(
literal|false
argument_list|,
name|context
argument_list|,
name|fileNamePattern
argument_list|,
name|fileDirPrefs
argument_list|)
decl_stmt|;
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|LinkedFile
name|newFileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|"Toot - test title.pdf"
argument_list|,
literal|"PDF"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|newFileField
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupSingleField (@empDirectory.TempDir Path testFolder)
name|void
name|cleanupSingleField
parameter_list|(
annotation|@
name|TempDirectory
operator|.
name|TempDir
name|Path
name|testFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileNamePattern
init|=
literal|"[bibtexkey] - [fulltitle]"
decl_stmt|;
name|Path
name|path
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"Toot.pdf"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|LinkedFile
name|fileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|"Toot.pdf"
argument_list|,
literal|"PDF"
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|fileField
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"test title"
argument_list|)
expr_stmt|;
name|RenamePdfCleanup
name|cleanup
init|=
operator|new
name|RenamePdfCleanup
argument_list|(
literal|false
argument_list|,
name|context
argument_list|,
name|fileNamePattern
argument_list|,
name|fileDirPrefs
argument_list|,
name|fileField
argument_list|)
decl_stmt|;
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|LinkedFile
name|newFileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|"Toot - test title.pdf"
argument_list|,
literal|"PDF"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|newFileField
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cleanupGetTargetFilename (@empDirectory.TempDir Path testFolder)
name|void
name|cleanupGetTargetFilename
parameter_list|(
annotation|@
name|TempDirectory
operator|.
name|TempDir
name|Path
name|testFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileNamePattern
init|=
literal|"[bibtexkey] - [fulltitle]"
decl_stmt|;
name|Path
name|path
init|=
name|testFolder
operator|.
name|resolve
argument_list|(
literal|"Toot.pdf"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|LinkedFile
name|fileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|"Toot.pdf"
argument_list|,
literal|"PDF"
argument_list|)
decl_stmt|;
name|RenamePdfCleanup
name|cleanup
init|=
operator|new
name|RenamePdfCleanup
argument_list|(
literal|false
argument_list|,
name|context
argument_list|,
name|fileNamePattern
argument_list|,
name|fileDirPrefs
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|fileField
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"test title"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Toot - test title.pdf"
argument_list|,
name|cleanup
operator|.
name|getTargetFileName
argument_list|(
name|fileField
argument_list|,
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

