begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.cleanup
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatterPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FileFieldWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FileDirectoryPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|MoveFilesCleanupTest
specifier|public
class|class
name|MoveFilesCleanupTest
block|{
DECL|field|bibFolder
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|bibFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|pdfFolder
specifier|private
name|File
name|pdfFolder
decl_stmt|;
DECL|field|databaseContext
specifier|private
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|cleanup
specifier|private
name|MoveFilesCleanup
name|cleanup
decl_stmt|;
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
DECL|field|fileDirPrefs
specifier|private
name|FileDirectoryPreferences
name|fileDirPrefs
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|()
decl_stmt|;
name|pdfFolder
operator|=
name|bibFolder
operator|.
name|newFolder
argument_list|()
expr_stmt|;
name|metaData
operator|.
name|setDefaultFileDirectory
argument_list|(
name|pdfFolder
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|databaseContext
operator|=
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|BibDatabase
argument_list|()
argument_list|,
name|metaData
argument_list|,
operator|new
name|Defaults
argument_list|()
argument_list|)
expr_stmt|;
name|databaseContext
operator|.
name|setDatabaseFile
argument_list|(
name|bibFolder
operator|.
name|newFile
argument_list|(
literal|"test.bib"
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setCiteKey
argument_list|(
literal|"Toot"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
literal|"test title"
argument_list|)
expr_stmt|;
name|fileDirPrefs
operator|=
name|mock
argument_list|(
name|FileDirectoryPreferences
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileDirPrefs
operator|.
name|isBibLocationAsPrimary
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//Biblocation as Primary overwrites all other dirs, therefore we set it to false here
block|}
annotation|@
name|Test
DECL|method|movesFileFromSubfolder ()
specifier|public
name|void
name|movesFileFromSubfolder
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|subfolder
init|=
name|bibFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|File
name|fileBefore
init|=
operator|new
name|File
argument_list|(
name|subfolder
argument_list|,
literal|"test.pdf"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileBefore
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|subfolder
argument_list|,
literal|"test.pdf"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|LinkedFile
name|fileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|fileBefore
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|fileField
argument_list|)
argument_list|)
expr_stmt|;
name|cleanup
operator|=
operator|new
name|MoveFilesCleanup
argument_list|(
name|databaseContext
argument_list|,
literal|""
argument_list|,
name|fileDirPrefs
argument_list|,
name|mock
argument_list|(
name|LayoutFormatterPreferences
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fileBefore
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|fileAfter
init|=
operator|new
name|File
argument_list|(
name|pdfFolder
argument_list|,
literal|"test.pdf"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileAfter
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|fileAfter
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|movesFileFromSubfolderMultiple ()
specifier|public
name|void
name|movesFileFromSubfolderMultiple
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|subfolder
init|=
name|bibFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|File
name|fileBefore
init|=
operator|new
name|File
argument_list|(
name|subfolder
argument_list|,
literal|"test.pdf"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileBefore
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileBefore
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|LinkedFile
name|fileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|fileBefore
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|fileField
argument_list|,
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cleanup
operator|=
operator|new
name|MoveFilesCleanup
argument_list|(
name|databaseContext
argument_list|,
literal|""
argument_list|,
name|fileDirPrefs
argument_list|,
name|mock
argument_list|(
name|LayoutFormatterPreferences
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fileBefore
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|fileAfter
init|=
operator|new
name|File
argument_list|(
name|pdfFolder
argument_list|,
literal|"test.pdf"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileAfter
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|fileAfter
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|movesFileFromSubfolderWithFileDirPattern ()
specifier|public
name|void
name|movesFileFromSubfolderWithFileDirPattern
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|subfolder
init|=
name|bibFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|File
name|fileBefore
init|=
operator|new
name|File
argument_list|(
name|subfolder
argument_list|,
literal|"test.pdf"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileBefore
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|subfolder
argument_list|,
literal|"test.pdf"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|LinkedFile
name|fileField
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|fileBefore
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"file"
argument_list|,
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
name|fileField
argument_list|)
argument_list|)
expr_stmt|;
name|cleanup
operator|=
operator|new
name|MoveFilesCleanup
argument_list|(
name|databaseContext
argument_list|,
literal|"\\EntryType"
argument_list|,
name|fileDirPrefs
argument_list|,
name|mock
argument_list|(
name|LayoutFormatterPreferences
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|cleanup
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fileBefore
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|after
init|=
name|pdfFolder
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"Misc"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"test.pdf"
argument_list|)
decl_stmt|;
name|Path
name|relativefileDir
init|=
name|pdfFolder
operator|.
name|toPath
argument_list|()
operator|.
name|relativize
argument_list|(
name|after
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|FileFieldWriter
operator|.
name|getStringRepresentation
argument_list|(
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|relativefileDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

