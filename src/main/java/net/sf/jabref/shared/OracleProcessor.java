begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.shared
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|shared
operator|.
name|listener
operator|.
name|OracleNotificationListener
import|;
end_import

begin_import
import|import
name|oracle
operator|.
name|jdbc
operator|.
name|OracleConnection
import|;
end_import

begin_import
import|import
name|oracle
operator|.
name|jdbc
operator|.
name|OracleStatement
import|;
end_import

begin_import
import|import
name|oracle
operator|.
name|jdbc
operator|.
name|dcn
operator|.
name|DatabaseChangeRegistration
import|;
end_import

begin_comment
comment|/**  * Processes all incoming or outgoing bib data to Oracle database and manages its structure.  */
end_comment

begin_class
DECL|class|OracleProcessor
specifier|public
class|class
name|OracleProcessor
extends|extends
name|DBMSProcessor
block|{
DECL|field|oracleConnection
specifier|private
name|OracleConnection
name|oracleConnection
decl_stmt|;
DECL|field|listener
specifier|private
name|OracleNotificationListener
name|listener
decl_stmt|;
DECL|field|databaseChangeRegistration
specifier|private
name|DatabaseChangeRegistration
name|databaseChangeRegistration
decl_stmt|;
DECL|method|OracleProcessor (DBMSConnection connection)
specifier|public
name|OracleProcessor
parameter_list|(
name|DBMSConnection
name|connection
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates and sets up the needed tables and columns according to the database type.      *      * @throws SQLException      */
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeUpdate
argument_list|(
literal|"CREATE TABLE \"ENTRY\" ("
operator|+
literal|"\"SHARED_ID\" NUMBER NOT NULL, "
operator|+
literal|"\"TYPE\" VARCHAR2(255) NULL, "
operator|+
literal|"\"VERSION\" NUMBER DEFAULT 1, "
operator|+
literal|"CONSTRAINT \"ENTRY_PK\" PRIMARY KEY (\"SHARED_ID\"))"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeUpdate
argument_list|(
literal|"CREATE SEQUENCE \"ENTRY_SEQ\""
argument_list|)
expr_stmt|;
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeUpdate
argument_list|(
literal|"CREATE TRIGGER \"ENTRY_T\" BEFORE INSERT ON \"ENTRY\" "
operator|+
literal|"FOR EACH ROW BEGIN SELECT \"ENTRY_SEQ\".NEXTVAL INTO :NEW.shared_id FROM DUAL; END;"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeUpdate
argument_list|(
literal|"CREATE TABLE \"FIELD\" ("
operator|+
literal|"\"ENTRY_SHARED_ID\" NUMBER NOT NULL, "
operator|+
literal|"\"NAME\" VARCHAR2(255) NOT NULL, "
operator|+
literal|"\"VALUE\" CLOB NULL, "
operator|+
literal|"CONSTRAINT \"ENTRY_SHARED_ID_FK\" FOREIGN KEY (\"ENTRY_SHARED_ID\") "
operator|+
literal|"REFERENCES \"ENTRY\"(\"SHARED_ID\") ON DELETE CASCADE)"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeUpdate
argument_list|(
literal|"CREATE TABLE \"METADATA\" ("
operator|+
literal|"\"KEY\"  VARCHAR2(255) NULL,"
operator|+
literal|"\"VALUE\"  CLOB NOT NULL)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|escape (String expression)
name|String
name|escape
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
return|return
literal|"\""
operator|+
name|expression
operator|+
literal|"\""
return|;
block|}
annotation|@
name|Override
DECL|method|startNotificationListener (DBMSSynchronizer dbmsSynchronizer)
specifier|public
name|void
name|startNotificationListener
parameter_list|(
name|DBMSSynchronizer
name|dbmsSynchronizer
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
operator|new
name|OracleNotificationListener
argument_list|(
name|dbmsSynchronizer
argument_list|)
expr_stmt|;
try|try
block|{
name|oracleConnection
operator|=
operator|(
name|OracleConnection
operator|)
name|connection
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|OracleConnection
operator|.
name|DCN_NOTIFY_ROWIDS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|OracleConnection
operator|.
name|DCN_QUERY_CHANGE_NOTIFICATION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|databaseChangeRegistration
operator|=
name|oracleConnection
operator|.
name|registerDatabaseChangeNotification
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|databaseChangeRegistration
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|statement
init|=
name|oracleConnection
operator|.
name|createStatement
argument_list|()
init|)
block|{
operator|(
operator|(
name|OracleStatement
operator|)
name|statement
operator|)
operator|.
name|setDatabaseChangeRegistration
argument_list|(
name|databaseChangeRegistration
argument_list|)
expr_stmt|;
name|StringBuilder
name|selectQuery
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"SELECT 1 FROM "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"METADATA"
argument_list|)
argument_list|)
decl_stmt|;
comment|// this execution registers all tables mentioned in selectQuery
name|statement
operator|.
name|executeQuery
argument_list|(
name|selectQuery
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SQL Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stopNotificationListener ()
specifier|public
name|void
name|stopNotificationListener
parameter_list|()
block|{
try|try
block|{
name|oracleConnection
operator|.
name|unregisterDatabaseChangeNotification
argument_list|(
name|databaseChangeRegistration
argument_list|)
expr_stmt|;
name|oracleConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SQL Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|notifyClients ()
specifier|public
name|void
name|notifyClients
parameter_list|()
block|{
comment|// Do nothing because Oracle triggers notifications automatically.
block|}
block|}
end_class

end_unit

