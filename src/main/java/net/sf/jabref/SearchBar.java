begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ItemEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ItemListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBoxMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButtonMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|CaretEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|CaretListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|autocompleter
operator|.
name|AbstractAutoCompleter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|autocompleter
operator|.
name|FuzzyTextSearchStrategy
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|AutoCompleteListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|SearchResultsDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|BasicSearch
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|SearchExpression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|SearchExpressionParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|SearchMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gpl
operator|.
name|JSplitButton
operator|.
name|JSplitButton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gpl
operator|.
name|JSplitButton
operator|.
name|action
operator|.
name|SplitButtonActionListener
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|impl
operator|.
name|filter
operator|.
name|TextSearchStrategy
import|;
end_import

begin_class
DECL|class|SearchBar
specifier|public
class|class
name|SearchBar
extends|extends
name|JPanel
implements|implements
name|ActionListener
implements|,
name|KeyListener
implements|,
name|ItemListener
implements|,
name|CaretListener
implements|,
name|ErrorMessageDisplay
block|{
DECL|field|frame
specifier|private
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|searchField
specifier|private
name|JSearchTextField
name|searchField
decl_stmt|;
DECL|field|searchButton
specifier|private
name|JSplitButton
name|searchButton
decl_stmt|;
DECL|field|popupMenu
specifier|private
name|JPopupMenu
name|popupMenu
decl_stmt|;
DECL|field|escape
specifier|private
name|JMenuItem
name|escape
decl_stmt|;
DECL|field|increment
DECL|field|floatSearch
DECL|field|hideSearch
DECL|field|liveFilterSearch
DECL|field|showResultsInDialog
DECL|field|searchAllBases
specifier|private
name|JRadioButtonMenuItem
name|increment
decl_stmt|,
name|floatSearch
decl_stmt|,
name|hideSearch
decl_stmt|,
name|liveFilterSearch
decl_stmt|,
name|showResultsInDialog
decl_stmt|,
name|searchAllBases
decl_stmt|;
DECL|field|settings
specifier|private
name|JMenu
name|settings
decl_stmt|;
DECL|field|select
DECL|field|caseSensitive
DECL|field|regExpSearch
DECL|field|highLightWords
DECL|field|searchAutoComplete
specifier|private
name|JCheckBoxMenuItem
name|select
decl_stmt|,
name|caseSensitive
decl_stmt|,
name|regExpSearch
decl_stmt|,
name|highLightWords
decl_stmt|,
name|searchAutoComplete
decl_stmt|;
DECL|field|autoCompleteSupport
name|AutoCompleteSupport
argument_list|<
name|String
argument_list|>
name|autoCompleteSupport
decl_stmt|;
DECL|field|incSearcher
name|IncrementalSearcher
name|incSearcher
decl_stmt|;
DECL|field|searchDialog
name|SearchResultsDialog
name|searchDialog
init|=
literal|null
decl_stmt|;
DECL|field|autoCompleteListener
name|AutoCompleteListener
name|autoCompleteListener
init|=
literal|null
decl_stmt|;
comment|/** 	 * subscribed Objects 	 */
DECL|field|listeners
specifier|private
name|Vector
argument_list|<
name|SearchTextListener
argument_list|>
name|listeners
init|=
operator|new
name|Vector
argument_list|<
name|SearchTextListener
argument_list|>
argument_list|()
decl_stmt|;
comment|// private JButton escape = new JButton(Globals.lang("Clear"));
comment|/** This button's text will be set later. */
comment|// private JCheckBoxMenuItem searchReq, searchOpt, searchGen,searchAll;
DECL|field|incSearch
DECL|field|startedFloatSearch
DECL|field|startedFilterSearch
specifier|private
name|boolean
name|incSearch
init|=
literal|false
decl_stmt|,
name|startedFloatSearch
init|=
literal|false
decl_stmt|,
name|startedFilterSearch
init|=
literal|false
decl_stmt|;
DECL|field|incSearchPos
specifier|private
name|int
name|incSearchPos
init|=
operator|-
literal|1
decl_stmt|;
comment|// To keep track of where we are in
comment|// an incremental search. -1 means
comment|// that the search is inactive.
DECL|method|SearchBar (JabRefFrame frame)
specifier|public
name|SearchBar
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|setLayout
argument_list|(
operator|new
name|GridBagLayout
argument_list|()
argument_list|)
expr_stmt|;
name|GridBagConstraints
name|c
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|initSearchField
argument_list|()
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|add
argument_list|(
name|searchField
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|initSearchButton
argument_list|()
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|EAST
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
name|GridBagConstraints
operator|.
name|RELATIVE
expr_stmt|;
name|this
operator|.
name|add
argument_list|(
name|searchButton
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|autoCompleteSupport
operator|=
operator|new
name|AutoCompleteSupport
argument_list|<
name|String
argument_list|>
argument_list|(
name|searchField
argument_list|)
expr_stmt|;
name|autoCompleteSupport
operator|.
name|install
argument_list|()
expr_stmt|;
comment|// setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
comment|// setLayout(new FlowLayout(FlowLayout.CENTER, 0, 1)); //his,
comment|// BoxLayout.X_AXIS));
comment|// setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
comment|// search.setPreferredSize(new Dimension(60,
comment|// searchField.getPreferredSize().height));
comment|// search.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
name|incSearcher
operator|=
operator|new
name|IncrementalSearcher
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
comment|// setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.magenta));
comment|// Add an item listener that makes sure we only listen for key events
comment|// when incremental search is turned on.
comment|// Add the global focus listener, so a menu item can see if this field
comment|// was focused when
comment|// an action was called.
name|searchField
operator|.
name|addFocusListener
argument_list|(
name|Globals
operator|.
name|focusListener
argument_list|)
expr_stmt|;
comment|// searchField.setIcon(GUIGlobals.getImage("search"));
name|searchField
operator|.
name|setTextWhenNotFocused
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search..."
argument_list|)
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// searchField.addCaretListener(this);
name|searchField
operator|.
name|addFocusListener
argument_list|(
operator|new
name|FocusAdapter
argument_list|()
block|{
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
comment|// if (increment.isSelected())
comment|// searchField.setText("");
block|}
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
name|incSearch
operator|=
literal|false
expr_stmt|;
name|incSearchPos
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Reset incremental
comment|// search. This makes the
comment|// incremental search reset
comment|// once the user moves focus to
comment|// somewhere else.
if|if
condition|(
name|increment
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// searchField.setText("");
comment|// System.out.println("focuslistener");
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// escape.addActionListener(this);
comment|// escape.setEnabled(false); // enabled after searching
name|searchAutoComplete
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchAutoComplete"
argument_list|,
name|searchAutoComplete
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SearchBar
operator|.
name|this
operator|.
name|frame
operator|.
name|basePanel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SearchBar
operator|.
name|this
operator|.
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|updateSearchManager
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// this.setLayout(gbl);
comment|// con.gridwidth = GridBagConstraints.REMAINDER;
comment|// con.fill = GridBagConstraints.NONE;
comment|// con.weightx = 1;
comment|// searchField.setSize(new Dimension(60, 10));
comment|// gbl.setConstraints(searchField,con);
comment|// searchField.setSize(new Dimension(60, 10));
comment|// con.gridwidth = 1;
comment|// gbl.setConstraints(escape,con);
comment|// this.add(escape) ;
name|searchField
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Repeat incremental search"
argument_list|)
argument_list|,
literal|"repeat"
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"repeat"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|increment
operator|.
name|isSelected
argument_list|()
condition|)
name|repeatIncremental
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Clear search"
argument_list|)
argument_list|,
literal|"escape"
argument_list|)
expr_stmt|;
comment|/* 		 * searchField.getActionMap().put("escape", new AbstractAction() { 		 * public void actionPerformed(ActionEvent e) { hideAway(); 		 * //SearchManager2.this.actionPerformed(new ActionEvent(escape, 0, 		 * "")); } }); 		 */
comment|// setSearchButtonSizes();
name|updateSearchButtonText
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * DONE 	 * Initializes the search button and its popup menu  	 */
DECL|method|initSearchButton ()
specifier|private
name|void
name|initSearchButton
parameter_list|()
block|{
comment|// Create search button
name|searchButton
operator|=
operator|new
name|JSplitButton
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"search"
argument_list|)
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|setMinimumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|50
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|setBackground
argument_list|(
name|searchField
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|setContentAreaFilled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|setOpaque
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|addSplitButtonActionListener
argument_list|(
operator|new
name|SplitButtonActionListener
argument_list|()
block|{
specifier|public
name|void
name|buttonClicked
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|actionPerformed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|splitButtonClicked
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{ 			}
block|}
argument_list|)
expr_stmt|;
comment|// Populate popup menu and add it to search button
name|popupMenu
operator|=
operator|new
name|JPopupMenu
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|escape
operator|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Clear results"
argument_list|)
argument_list|)
expr_stmt|;
name|escape
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|escape
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|initSearchModeMenu
argument_list|()
expr_stmt|;
for|for
control|(
name|SearchMode
name|mode
range|:
name|SearchMode
operator|.
name|values
argument_list|()
control|)
block|{
name|popupMenu
operator|.
name|add
argument_list|(
name|getSearchModeMenuItem
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|popupMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|initSearchSettingsMenu
argument_list|()
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|JMenuItem
name|help
init|=
operator|new
name|JMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Help"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"help"
argument_list|)
argument_list|)
decl_stmt|;
name|help
operator|.
name|addActionListener
argument_list|(
operator|new
name|HelpAction
argument_list|(
name|Globals
operator|.
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|searchHelp
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Help"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|setPopupMenu
argument_list|(
name|popupMenu
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * DONE 	 * Initializes the popup menu items controlling search settings 	 */
DECL|method|initSearchSettingsMenu ()
specifier|private
name|void
name|initSearchSettingsMenu
parameter_list|()
block|{
comment|// Create menu items
name|settings
operator|=
operator|new
name|JMenu
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Settings"
argument_list|)
argument_list|)
expr_stmt|;
name|select
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Select matches"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|caseSensitive
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Case sensitive"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"caseSensitiveSearch"
argument_list|)
argument_list|)
expr_stmt|;
name|regExpSearch
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Use regular expressions"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"regExpSearch"
argument_list|)
argument_list|)
expr_stmt|;
name|highLightWords
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Highlight Words"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"highLightWords"
argument_list|)
argument_list|)
expr_stmt|;
name|searchAutoComplete
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Autocomplete names"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchAutoComplete"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add them to the menu
name|settings
operator|.
name|add
argument_list|(
name|select
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|caseSensitive
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|regExpSearch
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|highLightWords
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|searchAutoComplete
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * DONE 	 * Initializes the popup menu items controlling the search mode 	 */
DECL|method|initSearchModeMenu ()
specifier|private
name|void
name|initSearchModeMenu
parameter_list|()
block|{
name|ButtonGroup
name|searchMethod
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchMode
name|mode
range|:
name|SearchMode
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Create menu items
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|Filter
case|:
name|hideSearch
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Float
case|:
name|floatSearch
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"floatSearch"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Global
case|:
name|searchAllBases
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchAllBases"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Incremental
case|:
name|increment
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"incrementS"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LiveFilter
case|:
name|liveFilterSearch
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"searchModeLiveFilter"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResultsInDialog
case|:
name|showResultsInDialog
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"showSearchInDialog"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Set tooltips on menu items
name|getSearchModeMenuItem
argument_list|(
name|mode
argument_list|)
operator|.
name|setToolTipText
argument_list|(
name|mode
operator|.
name|getToolTipText
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add menu item to group
name|searchMethod
operator|.
name|add
argument_list|(
name|getSearchModeMenuItem
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Listen to selection changed events
name|getSearchModeMenuItem
argument_list|(
name|mode
argument_list|)
operator|.
name|addItemListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * DONE 	 * Initializes the search text field 	 */
DECL|method|initSearchField ()
specifier|private
name|void
name|initSearchField
parameter_list|()
block|{
comment|// Create search text field
name|searchField
operator|=
operator|new
name|JSearchTextField
argument_list|()
expr_stmt|;
name|searchField
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * DONE 	 * Enum collecting all the different possible search methods 	 */
DECL|enum|SearchMode
specifier|private
enum|enum
name|SearchMode
block|{
DECL|enumConstant|Incremental
DECL|enumConstant|Globals.lang
DECL|enumConstant|Globals.lang
name|Incremental
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Incremental"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Incremental search"
argument_list|)
argument_list|)
block|,
DECL|enumConstant|Float
DECL|enumConstant|Globals.lang
DECL|enumConstant|Globals.lang
name|Float
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Float"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Gray out non-matching entries"
argument_list|)
argument_list|)
block|,
DECL|enumConstant|Filter
DECL|enumConstant|Globals.lang
DECL|enumConstant|Globals.lang
name|Filter
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Filter"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Hide non-matching entries"
argument_list|)
argument_list|)
block|,
DECL|enumConstant|LiveFilter
DECL|enumConstant|Globals.lang
DECL|enumConstant|Globals.lang
name|LiveFilter
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Live filter"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Automatically hide non-matching entries"
argument_list|)
argument_list|)
block|,
DECL|enumConstant|ResultsInDialog
DECL|enumConstant|Globals.lang
DECL|enumConstant|Globals.lang
name|ResultsInDialog
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show results in dialog"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show search results in a window"
argument_list|)
argument_list|)
block|,
DECL|enumConstant|Global
DECL|enumConstant|Globals.lang
DECL|enumConstant|Globals.lang
name|Global
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Global search"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search in all open databases"
argument_list|)
argument_list|)
block|;
DECL|field|displayName
specifier|private
name|String
name|displayName
decl_stmt|;
DECL|field|toolTipText
specifier|private
name|String
name|toolTipText
decl_stmt|;
DECL|method|SearchMode (String displayName, String toolTipText)
name|SearchMode
parameter_list|(
name|String
name|displayName
parameter_list|,
name|String
name|toolTipText
parameter_list|)
block|{
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
name|this
operator|.
name|toolTipText
operator|=
name|toolTipText
expr_stmt|;
block|}
DECL|method|getDisplayName ()
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
name|displayName
return|;
block|}
DECL|method|getToolTipText ()
specifier|public
name|String
name|getToolTipText
parameter_list|()
block|{
return|return
name|toolTipText
return|;
block|}
block|}
comment|/** 	 * DONE 	 * Returns the item in the popup menu of the search button corresponding to the given search mode 	 */
DECL|method|getSearchModeMenuItem (SearchMode mode)
specifier|private
name|JRadioButtonMenuItem
name|getSearchModeMenuItem
parameter_list|(
name|SearchMode
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|Incremental
case|:
return|return
name|increment
return|;
case|case
name|Filter
case|:
return|return
name|hideSearch
return|;
case|case
name|Float
case|:
return|return
name|floatSearch
return|;
case|case
name|Global
case|:
return|return
name|searchAllBases
return|;
case|case
name|LiveFilter
case|:
return|return
name|liveFilterSearch
return|;
case|case
name|ResultsInDialog
case|:
return|return
name|showResultsInDialog
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/* 	 * public void setAutoCompleteListener(AutoCompleteListener listener) { 	 * this.autoCompleteListener = listener; updateKeyListeners(); } 	 */
comment|/** 	 * Add the correct key listeners to the search text field, depending on 	 * whether and autocomplete listener has been set and whether incremental 	 * search is selected. 	 */
DECL|method|updateKeyListeners ()
specifier|protected
name|void
name|updateKeyListeners
parameter_list|()
block|{
comment|/* 		 * KeyListener[] listeners = searchField.getKeyListeners(); for 		 * (KeyListener listener : listeners) { 		 * searchField.removeKeyListener(listener); } if 		 * (increment.isSelected()) { searchField.addKeyListener(this); } 		 */
comment|/* 		 * else { if (searchAutoComplete.isSelected()&& autoCompleteListener != 		 * null) searchField.addKeyListener(autoCompleteListener); } 		 */
block|}
comment|/** 	 * Subscribe to the SearchListener and receive events, if the user searches 	 * for some thing. You will receive a list of words 	 *  	 * @param l 	 */
DECL|method|addSearchListener (SearchTextListener l)
specifier|public
name|void
name|addSearchListener
parameter_list|(
name|SearchTextListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|listeners
operator|.
name|contains
argument_list|(
name|l
argument_list|)
condition|)
return|return;
else|else
name|listeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
comment|// fire event for the new subscriber
name|l
operator|.
name|searchText
argument_list|(
name|getSearchwords
argument_list|(
name|searchField
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Remove object from the SearchListener 	 *  	 * @param l 	 */
DECL|method|removeSearchListener (SearchTextListener l)
specifier|public
name|void
name|removeSearchListener
parameter_list|(
name|SearchTextListener
name|l
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * parse the search string for valid words and return a list of words Like 	 * "The great Vikinger" will be ["The","great","Vikinger"] 	 *  	 * @param t 	 * @return 	 */
DECL|method|getSearchwords (String t)
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getSearchwords
parameter_list|(
name|String
name|t
parameter_list|)
block|{
comment|// for now ... just seperate words by whitespace and comma
comment|// First remove trailing white spaces and/or commas, then split
name|String
index|[]
name|strings
init|=
name|t
operator|.
name|replaceAll
argument_list|(
literal|"^[,\\s]+"
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|"[,\\s]+"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|words
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|strings
operator|.
name|length
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|words
argument_list|,
name|strings
argument_list|)
expr_stmt|;
return|return
name|words
return|;
block|}
comment|/** 	 * Fires an event if a search was started / canceled 	 *  	 * @param t 	 */
DECL|method|fireSearchlistenerEvent (String t)
specifier|private
name|void
name|fireSearchlistenerEvent
parameter_list|(
name|String
name|t
parameter_list|)
block|{
comment|// parse the Search string to words
name|ArrayList
argument_list|<
name|String
argument_list|>
name|words
decl_stmt|;
if|if
condition|(
operator|(
name|t
operator|==
literal|null
operator|)
operator|||
operator|(
name|t
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|words
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|words
operator|=
name|getSearchwords
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|// fire an event for every listener
for|for
control|(
name|SearchTextListener
name|s
range|:
name|listeners
control|)
name|s
operator|.
name|searchText
argument_list|(
name|words
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Instantiate the search dialog, unless it has already been instantiated: 	 */
DECL|method|instantiateSearchDialog ()
specifier|protected
name|void
name|instantiateSearchDialog
parameter_list|()
block|{
if|if
condition|(
name|searchDialog
operator|==
literal|null
condition|)
name|searchDialog
operator|=
operator|new
name|SearchResultsDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search results"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updatePrefs ()
specifier|public
name|void
name|updatePrefs
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"incrementS"
argument_list|,
name|increment
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchModeLiveFilter"
argument_list|,
name|liveFilterSearch
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"selectS"
argument_list|,
name|select
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"floatSearch"
argument_list|,
name|floatSearch
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"caseSensitiveSearch"
argument_list|,
name|caseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"regExpSearch"
argument_list|,
name|regExpSearch
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"highLightWords"
argument_list|,
name|highLightWords
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"showSearchInDialog"
argument_list|,
name|showResultsInDialog
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"searchAllBases"
argument_list|,
name|searchAllBases
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|startIncrementalSearch ()
specifier|public
name|void
name|startIncrementalSearch
parameter_list|()
block|{
name|increment
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// System.out.println("startIncrementalSearch");
name|searchField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Clears and focuses the search field if it is not focused. Otherwise, 	 * cycles to the next search type. 	 */
DECL|method|startSearch ()
specifier|public
name|void
name|startSearch
parameter_list|()
block|{
if|if
condition|(
name|increment
operator|.
name|isSelected
argument_list|()
operator|&&
name|incSearch
condition|)
block|{
name|repeatIncremental
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|searchField
operator|.
name|hasFocus
argument_list|()
condition|)
block|{
comment|// searchField.setText("");
comment|// searchField.selectAll(); TODO I disabled this
name|searchField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|increment
operator|.
name|isSelected
argument_list|()
condition|)
name|floatSearch
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|floatSearch
operator|.
name|isSelected
argument_list|()
condition|)
name|hideSearch
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|hideSearch
operator|.
name|isSelected
argument_list|()
condition|)
name|liveFilterSearch
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|liveFilterSearch
operator|.
name|isSelected
argument_list|()
condition|)
name|showResultsInDialog
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|showResultsInDialog
operator|.
name|isSelected
argument_list|()
condition|)
name|searchAllBases
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
block|{
name|increment
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|increment
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|increment
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|searchField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clearSearchLater ()
specifier|private
name|void
name|clearSearchLater
parameter_list|()
block|{
if|if
condition|(
name|frame
operator|.
name|basePanel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|clearSearch
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// do this after the button action is over
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|escape
condition|)
block|{
name|incSearch
operator|=
literal|false
expr_stmt|;
name|clearSearchLater
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|searchField
operator|)
operator|||
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|searchButton
operator|)
operator|)
operator|&&
operator|!
name|increment
operator|.
name|isSelected
argument_list|()
operator|&&
operator|(
name|frame
operator|.
name|basePanel
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|updatePrefs
argument_list|()
expr_stmt|;
comment|// Make sure the user's choices are recorded.
if|if
condition|(
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// An empty search field should cause the search to be cleared.
name|clearSearchLater
argument_list|()
expr_stmt|;
return|return;
block|}
comment|/* 			 * if(support == null || ! support.isInstalled()) { // TODO: Add 			 * proper autocomplete String[] autoCompletions = {"Test1", "Test2", 			 * "Test3", "T", "Te", "A"}; support = 			 * AutoCompleteSupport.install(searchField, 			 * GlazedLists.eventListOf(autoCompletions)); 			 * support.setFilterMode(TextMatcherEditor.CONTAINS); 			 * support.setTextMatchingStrategy(FUZZY_STRATEGY); } 			 */
comment|// AutoCompleteSupport support = AutoCompleteSupport.install(
comment|// searchField, GlazedLists.eventListOf(autoCompletions));
name|fireSearchlistenerEvent
argument_list|(
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO I disabled this
comment|// Setup search parameters common to both normal and float.
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|searchOptions
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|searchOptions
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO I disabled this
name|SearchRuleSet
name|searchRules
init|=
operator|new
name|SearchRuleSet
argument_list|()
decl_stmt|;
name|SearchRule
name|rule1
decl_stmt|;
name|rule1
operator|=
operator|new
name|BasicSearch
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"caseSensitiveSearch"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"regExpSearch"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// this searches specified fields if specified,
comment|// and all fields otherwise
name|rule1
operator|=
operator|new
name|SearchExpression
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|,
name|searchOptions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// we'll do a search in all fields
block|}
name|searchRules
operator|.
name|addRule
argument_list|(
name|rule1
argument_list|)
expr_stmt|;
comment|// TODO: Reneable these
if|if
condition|(
operator|!
name|searchRules
operator|.
name|validateSearchStrings
argument_list|(
name|searchOptions
argument_list|)
condition|)
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search failed: illegal search expression"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
return|return;
block|}
name|SearchWorker
name|worker
init|=
operator|new
name|SearchWorker
argument_list|(
name|searchRules
argument_list|,
name|searchOptions
argument_list|)
decl_stmt|;
name|worker
operator|.
name|getWorker
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
name|worker
operator|.
name|getCallBack
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// escape.setEnabled(true);
if|if
condition|(
name|worker
operator|.
name|getHits
argument_list|()
operator|>
literal|0
condition|)
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|mainTable
operator|.
name|setSelected
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SearchWorker
class|class
name|SearchWorker
extends|extends
name|AbstractWorker
block|{
DECL|field|rules
specifier|private
name|SearchRuleSet
name|rules
decl_stmt|;
DECL|field|searchTerm
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|searchTerm
decl_stmt|;
DECL|field|hits
name|int
name|hits
init|=
literal|0
decl_stmt|;
DECL|method|SearchWorker (SearchRuleSet rules, Hashtable<String, String> searchTerm)
specifier|public
name|SearchWorker
parameter_list|(
name|SearchRuleSet
name|rules
parameter_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|searchTerm
parameter_list|)
block|{
name|this
operator|.
name|rules
operator|=
name|rules
expr_stmt|;
name|this
operator|.
name|searchTerm
operator|=
name|searchTerm
expr_stmt|;
block|}
DECL|method|getHits ()
specifier|public
name|int
name|getHits
parameter_list|()
block|{
return|return
name|hits
return|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|searchAllBases
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// Search only the current database:
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|boolean
name|hit
init|=
name|rules
operator|.
name|applyRule
argument_list|(
name|searchTerm
argument_list|,
name|entry
argument_list|)
operator|>
literal|0
decl_stmt|;
name|entry
operator|.
name|setSearchHit
argument_list|(
name|hit
argument_list|)
expr_stmt|;
if|if
condition|(
name|hit
condition|)
name|hits
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Search all databases:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|frame
operator|.
name|getTabbedPane
argument_list|()
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BasePanel
name|p
init|=
name|frame
operator|.
name|baseAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|p
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|boolean
name|hit
init|=
name|rules
operator|.
name|applyRule
argument_list|(
name|searchTerm
argument_list|,
name|entry
argument_list|)
operator|>
literal|0
decl_stmt|;
name|entry
operator|.
name|setSearchHit
argument_list|(
name|hit
argument_list|)
expr_stmt|;
if|if
condition|(
name|hit
condition|)
name|hits
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Searched database. Number of hits"
argument_list|)
operator|+
literal|": "
operator|+
name|hits
argument_list|)
expr_stmt|;
comment|// Show the result in the chosen way:
if|if
condition|(
name|searchAllBases
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// Search all databases. This means we need to use the search
comment|// results dialog.
comment|// Turn off other search mode, if activated:
if|if
condition|(
name|startedFloatSearch
condition|)
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|mainTable
operator|.
name|stopShowingFloatSearch
argument_list|()
expr_stmt|;
name|startedFloatSearch
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|startedFilterSearch
condition|)
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
name|startedFilterSearch
operator|=
literal|false
expr_stmt|;
block|}
comment|// Make sure the search dialog is instantiated and cleared:
name|instantiateSearchDialog
argument_list|()
expr_stmt|;
name|searchDialog
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|frame
operator|.
name|getTabbedPane
argument_list|()
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BasePanel
name|p
init|=
name|frame
operator|.
name|baseAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|p
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|isSearchHit
argument_list|()
condition|)
name|searchDialog
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|searchDialog
operator|.
name|selectFirstEntry
argument_list|()
expr_stmt|;
name|searchDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|showResultsInDialog
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// Turn off other search mode, if activated:
if|if
condition|(
name|startedFloatSearch
condition|)
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|mainTable
operator|.
name|stopShowingFloatSearch
argument_list|()
expr_stmt|;
name|startedFloatSearch
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|startedFilterSearch
condition|)
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
name|startedFilterSearch
operator|=
literal|false
expr_stmt|;
block|}
comment|// Make sure the search dialog is instantiated and cleared:
name|instantiateSearchDialog
argument_list|()
expr_stmt|;
name|searchDialog
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|isSearchHit
argument_list|()
condition|)
name|searchDialog
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|,
name|frame
operator|.
name|basePanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|searchDialog
operator|.
name|selectFirstEntry
argument_list|()
expr_stmt|;
name|searchDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hideSearch
operator|.
name|isSelected
argument_list|()
operator|||
name|liveFilterSearch
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// Filtering search - removes non-hits from the table:
if|if
condition|(
name|startedFloatSearch
condition|)
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|mainTable
operator|.
name|stopShowingFloatSearch
argument_list|()
expr_stmt|;
name|startedFloatSearch
operator|=
literal|false
expr_stmt|;
block|}
name|startedFilterSearch
operator|=
literal|true
expr_stmt|;
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|setSearchMatcher
argument_list|(
name|SearchMatcher
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Float search - floats hits to the top of the table:
if|if
condition|(
name|startedFilterSearch
condition|)
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
name|startedFilterSearch
operator|=
literal|false
expr_stmt|;
block|}
name|startedFloatSearch
operator|=
literal|true
expr_stmt|;
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|mainTable
operator|.
name|showFloatSearch
argument_list|(
name|SearchMatcher
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
comment|// Afterwards, select all text in the search field.
comment|// searchField.select(0,
comment|// searchField.getSelectedItem().toString().length());
comment|// TODO I disabled this
block|}
block|}
DECL|method|clearSearch ()
specifier|public
name|void
name|clearSearch
parameter_list|()
block|{
if|if
condition|(
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|isShowingFloatSearch
argument_list|()
condition|)
block|{
name|startedFloatSearch
operator|=
literal|false
expr_stmt|;
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|mainTable
operator|.
name|stopShowingFloatSearch
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|isShowingFilterSearch
argument_list|()
condition|)
block|{
name|startedFilterSearch
operator|=
literal|false
expr_stmt|;
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|stopShowingSearchResults
argument_list|()
expr_stmt|;
block|}
comment|// clear search means that nothing is searched for
comment|// even if a word is written in the text field,
comment|// nothing should be highlighted
name|fireSearchlistenerEvent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// disable "Cancel" button to signal this to the user
comment|// escape.setEnabled(false);
block|}
DECL|method|itemStateChanged (ItemEvent e)
specifier|public
name|void
name|itemStateChanged
parameter_list|(
name|ItemEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|increment
condition|)
block|{
if|if
condition|(
name|startedFilterSearch
operator|||
name|startedFloatSearch
condition|)
block|{
name|clearSearch
argument_list|()
expr_stmt|;
block|}
name|updateSearchButtonText
argument_list|()
expr_stmt|;
comment|// Make sure the correct key listener is activated:
name|updateKeyListeners
argument_list|()
expr_stmt|;
block|}
else|else
comment|/* if (e.getSource() == normal) */
block|{
name|updateSearchButtonText
argument_list|()
expr_stmt|;
comment|// If this search type is disabled, remove reordering from
comment|// all databases.
comment|/* 			 * if ((panel != null)&& increment.isSelected()) { clearSearch(); } 			 */
block|}
block|}
DECL|method|repeatIncremental ()
specifier|private
name|void
name|repeatIncremental
parameter_list|()
block|{
name|incSearchPos
operator|++
expr_stmt|;
if|if
condition|(
name|frame
operator|.
name|basePanel
argument_list|()
operator|!=
literal|null
condition|)
name|goIncremental
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Used for incremental search. Only activated when incremental is selected. 	 * 	 * The variable incSearchPos keeps track of which entry was last checked. 	 */
DECL|method|keyTyped (KeyEvent e)
specifier|public
name|void
name|keyTyped
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isControlDown
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|frame
operator|.
name|basePanel
argument_list|()
operator|!=
literal|null
condition|)
name|goIncremental
argument_list|()
expr_stmt|;
block|}
DECL|method|goIncremental ()
specifier|private
name|void
name|goIncremental
parameter_list|()
block|{
name|incSearch
operator|=
literal|true
expr_stmt|;
comment|// escape.setEnabled(true);
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|text
init|=
name|searchField
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|incSearchPos
operator|>=
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryCount
argument_list|()
condition|)
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|output
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' : "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Incremental search failed. Repeat to search from top."
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|incSearchPos
operator|=
operator|-
literal|1
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|searchField
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
return|return;
if|if
condition|(
name|incSearchPos
operator|<
literal|0
condition|)
name|incSearchPos
operator|=
literal|0
expr_stmt|;
name|BibtexEntry
name|be
init|=
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|mainTable
operator|.
name|getEntryAt
argument_list|(
name|incSearchPos
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|incSearcher
operator|.
name|search
argument_list|(
name|text
argument_list|,
name|be
argument_list|)
condition|)
block|{
name|incSearchPos
operator|++
expr_stmt|;
if|if
condition|(
name|incSearchPos
operator|<
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryCount
argument_list|()
condition|)
name|be
operator|=
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|mainTable
operator|.
name|getEntryAt
argument_list|(
name|incSearchPos
argument_list|)
expr_stmt|;
else|else
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|output
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' : "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Incremental search failed. Repeat to search from top."
argument_list|)
argument_list|)
expr_stmt|;
name|incSearchPos
operator|=
operator|-
literal|1
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|incSearchPos
operator|>=
literal|0
condition|)
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|selectSingleEntry
argument_list|(
name|incSearchPos
argument_list|)
expr_stmt|;
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|output
argument_list|(
literal|"'"
operator|+
name|text
operator|+
literal|"' "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"found"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * public void componentClosing() { frame.searchToggle.setSelected(false); 	 * if (frame.basePanel() != null) { if (startedFilterSearch || 	 * startedFloatSearch) clearSearch(); } } 	 */
DECL|method|keyPressed (KeyEvent e)
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{ 	}
DECL|method|keyReleased (KeyEvent e)
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{ 	}
DECL|method|caretUpdate (CaretEvent e)
specifier|public
name|void
name|caretUpdate
parameter_list|(
name|CaretEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|searchField
condition|)
block|{
name|updateSearchButtonText
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * Updates the text on the search button to reflect the type of search that 	 * will happen on click. 	 */
DECL|method|updateSearchButtonText ()
specifier|private
name|void
name|updateSearchButtonText
parameter_list|()
block|{
comment|// TODO: add search mode description
name|searchButton
operator|.
name|setToolTipText
argument_list|(
operator|!
name|increment
operator|.
name|isSelected
argument_list|()
operator|&&
name|SearchExpressionParser
operator|.
name|checkSyntax
argument_list|(
name|searchField
operator|.
name|getText
argument_list|()
argument_list|,
name|caseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|regExpSearch
operator|.
name|isSelected
argument_list|()
argument_list|)
operator|!=
literal|null
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search specified field(s)"
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search all fields"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * This method is required by the ErrorMessageDisplay interface, and lets 	 * this class serve as a callback for regular expression exceptions 	 * happening in DatabaseSearch. 	 *  	 * @param errorMessage 	 */
DECL|method|reportError (String errorMessage)
specifier|public
name|void
name|reportError
parameter_list|(
name|String
name|errorMessage
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
operator|.
name|basePanel
argument_list|()
argument_list|,
name|errorMessage
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Search error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * This method is required by the ErrorMessageDisplay interface, and lets 	 * this class serve as a callback for regular expression exceptions 	 * happening in DatabaseSearch. 	 *  	 * @param errorMessage 	 */
DECL|method|reportError (String errorMessage, Exception exception)
specifier|public
name|void
name|reportError
parameter_list|(
name|String
name|errorMessage
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
name|reportError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * public void setActiveBasePanel(BasePanel panel) { 	 * super.setActiveBasePanel(panel); if (panel != null) 	 * escape.setEnabled(panel.isShowingFloatSearch() || 	 * panel.isShowingFilterSearch()); else escape.setEnabled(false); } 	 */
comment|// Implementation based on
comment|// https://gmigdos.wordpress.com/2010/03/30/java-a-custom-jtextfield-for-searching/
DECL|class|JSearchTextField
specifier|public
class|class
name|JSearchTextField
extends|extends
name|JTextField
implements|implements
name|FocusListener
block|{
comment|// JPopupMenu popup = new JPopupMenu();
comment|// JList<String> list = new JList<String>();
DECL|field|textWhenNotFocused
specifier|private
name|String
name|textWhenNotFocused
decl_stmt|;
DECL|method|JSearchTextField ()
specifier|public
name|JSearchTextField
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|textWhenNotFocused
operator|=
literal|"Search..."
expr_stmt|;
name|this
operator|.
name|addFocusListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|/* 			 * this.getDocument().addDocumentListener(new DocumentListener() { 			 *  			 * @Override public void insertUpdate(DocumentEvent e) { 			 * updateAfterDocumentChange(); } 			 *  			 * @Override public void removeUpdate(DocumentEvent e) { 			 * updateAfterDocumentChange(); } 			 *  			 * @Override public void changedUpdate(DocumentEvent e) { 			 * //updateAfterDocumentChange(); } }); 			 */
comment|// popup.setFocusable(false);
comment|// popup.add(list);
block|}
DECL|method|setAutoCompleter (AbstractAutoCompleter searchCompleter)
specifier|public
name|void
name|setAutoCompleter
parameter_list|(
name|AbstractAutoCompleter
name|searchCompleter
parameter_list|)
block|{
name|autoCompleteSupport
operator|.
name|setAutoCompleter
argument_list|(
name|searchCompleter
argument_list|)
expr_stmt|;
block|}
comment|// public JSearchTextField() {
comment|// this("", 12);
comment|// }
comment|/* 		 * protected void updateAfterDocumentChange() { String[] autoCompletions 		 * = searchCompleter.complete(this.getText()); if(autoCompletions != 		 * null) { list.setListData(autoCompletions); //popup.setLayout(new 		 * BorderLayout()); /*for(String str : autoCompletions) { 		 * listData);.add(str); } 		 */
comment|// popup.add(new JPanel()); // your component
comment|// popup.setPopupSize(100, 100);
comment|/* 		 * if (!popup.isVisible()) popup.show(this, 0, this.getHeight()); 		 *  		 * //popup.repaint(); } 		 *  		 * } 		 */
DECL|method|getTextWhenNotFocused ()
specifier|public
name|String
name|getTextWhenNotFocused
parameter_list|()
block|{
return|return
name|this
operator|.
name|textWhenNotFocused
return|;
block|}
DECL|method|setTextWhenNotFocused (String newText)
specifier|public
name|void
name|setTextWhenNotFocused
parameter_list|(
name|String
name|newText
parameter_list|)
block|{
name|this
operator|.
name|textWhenNotFocused
operator|=
name|newText
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|paintComponent (Graphics g)
specifier|protected
name|void
name|paintComponent
parameter_list|(
name|Graphics
name|g
parameter_list|)
block|{
name|super
operator|.
name|paintComponent
argument_list|(
name|g
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|hasFocus
argument_list|()
operator|&&
operator|(
name|this
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
block|{
name|int
name|width
init|=
name|this
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|this
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|Font
name|prev
init|=
name|g
operator|.
name|getFont
argument_list|()
decl_stmt|;
name|Font
name|italic
init|=
name|prev
operator|.
name|deriveFont
argument_list|(
name|Font
operator|.
name|ITALIC
argument_list|)
decl_stmt|;
name|Color
name|prevColor
init|=
name|g
operator|.
name|getColor
argument_list|()
decl_stmt|;
comment|// g.setFont(italic);
name|g
operator|.
name|setColor
argument_list|(
name|UIManager
operator|.
name|getColor
argument_list|(
literal|"textInactiveText"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|h
init|=
name|g
operator|.
name|getFontMetrics
argument_list|()
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|int
name|textBottom
init|=
operator|(
name|height
operator|-
name|h
operator|)
operator|/
literal|2
operator|+
name|h
operator|-
literal|4
decl_stmt|;
name|int
name|x
init|=
name|this
operator|.
name|getInsets
argument_list|()
operator|.
name|left
decl_stmt|;
name|Graphics2D
name|g2d
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
name|RenderingHints
name|hints
init|=
name|g2d
operator|.
name|getRenderingHints
argument_list|()
decl_stmt|;
name|g2d
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_TEXT_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_TEXT_ANTIALIAS_ON
argument_list|)
expr_stmt|;
name|g2d
operator|.
name|drawString
argument_list|(
name|textWhenNotFocused
argument_list|,
name|x
argument_list|,
name|textBottom
argument_list|)
expr_stmt|;
name|g2d
operator|.
name|setRenderingHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
name|g
operator|.
name|setFont
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|prevColor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|focusGained (FocusEvent e)
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
name|this
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
DECL|method|focusLost (FocusEvent e)
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
name|this
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
comment|/* 		 * public String getText() { System.out.println("get text"); if 		 * (this.getSelectedItem() != null) { return 		 * this.getSelectedItem().toString(); } else return ""; 		 *  		 *  		 * } public void setText(String text) { this.setSelectedItem(text); } 		 */
block|}
DECL|method|setAutoCompleter (AbstractAutoCompleter searchCompleter)
specifier|public
name|void
name|setAutoCompleter
parameter_list|(
name|AbstractAutoCompleter
name|searchCompleter
parameter_list|)
block|{
name|this
operator|.
name|searchField
operator|.
name|setAutoCompleter
argument_list|(
name|searchCompleter
argument_list|)
expr_stmt|;
name|updateKeyListeners
argument_list|()
expr_stmt|;
comment|// Should I really call this here?
block|}
DECL|field|FUZZY_STRATEGY
specifier|public
specifier|static
specifier|final
name|Object
name|FUZZY_STRATEGY
init|=
operator|new
name|FuzzyStrategyFactory
argument_list|()
decl_stmt|;
DECL|class|FuzzyStrategyFactory
specifier|private
specifier|static
class|class
name|FuzzyStrategyFactory
implements|implements
name|TextSearchStrategy
operator|.
name|Factory
block|{
DECL|method|create (int mode, String filter)
specifier|public
name|TextSearchStrategy
name|create
parameter_list|(
name|int
name|mode
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
comment|// if(mode != TextMatcherEditor.CONTAINS)
comment|// throw new IllegalArgumentException("unrecognized mode: " + mode);
return|return
operator|new
name|FuzzyTextSearchStrategy
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

