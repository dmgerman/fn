begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBoxMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButtonMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|DocumentEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|DocumentListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|autocompleter
operator|.
name|AutoCompleter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|SearchTextListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinds
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchRule
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchRules
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|rules
operator|.
name|GrammarBasedSearchRule
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|rules
operator|.
name|util
operator|.
name|SentenceAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gpl
operator|.
name|JSplitButton
operator|.
name|JSplitButton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gpl
operator|.
name|JSplitButton
operator|.
name|action
operator|.
name|SplitButtonActionListener
import|;
end_import

begin_comment
comment|/**  * The search bar at the top of the screen allowing the user to search his database.  */
end_comment

begin_class
DECL|class|SearchBar
specifier|public
class|class
name|SearchBar
extends|extends
name|JPanel
block|{
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|searchField
specifier|private
name|JSearchTextField
name|searchField
decl_stmt|;
DECL|field|searchButton
specifier|private
name|JSplitButton
name|searchButton
decl_stmt|;
DECL|field|popupMenu
specifier|private
name|JPopupMenu
name|popupMenu
decl_stmt|;
DECL|field|clearSearch
specifier|private
name|JMenuItem
name|clearSearch
decl_stmt|;
DECL|field|modeIncremental
DECL|field|modeFloat
DECL|field|modeFilter
DECL|field|modeLiveFilter
DECL|field|modeResultsInDialog
specifier|private
name|JRadioButtonMenuItem
name|modeIncremental
decl_stmt|,
name|modeFloat
decl_stmt|,
name|modeFilter
decl_stmt|,
name|modeLiveFilter
decl_stmt|,
name|modeResultsInDialog
decl_stmt|,
DECL|field|modeGlobal
name|modeGlobal
decl_stmt|;
DECL|field|settings
specifier|private
name|JMenu
name|settings
decl_stmt|;
DECL|field|selectMatches
DECL|field|caseSensitive
DECL|field|regularExp
DECL|field|highlightWords
DECL|field|autoComplete
specifier|private
name|JCheckBoxMenuItem
name|selectMatches
decl_stmt|,
name|caseSensitive
decl_stmt|,
name|regularExp
decl_stmt|,
name|highlightWords
decl_stmt|,
name|autoComplete
decl_stmt|;
DECL|field|autoCompleteSupport
name|AutoCompleteSupport
argument_list|<
name|String
argument_list|>
name|autoCompleteSupport
decl_stmt|;
DECL|field|worker
name|SearchWorker
name|worker
decl_stmt|;
DECL|field|listeners
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|SearchTextListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|SearchTextListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Initializes the search bar.      *       * @param frame the main window      */
DECL|method|SearchBar (JabRefFrame frame)
specifier|public
name|SearchBar
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|worker
operator|=
operator|new
name|SearchWorker
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|// Init controls
name|setLayout
argument_list|(
operator|new
name|GridBagLayout
argument_list|()
argument_list|)
expr_stmt|;
name|GridBagConstraints
name|c
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|initSearchField
argument_list|()
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|add
argument_list|(
name|searchField
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|initSearchButton
argument_list|()
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|EAST
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
name|GridBagConstraints
operator|.
name|RELATIVE
expr_stmt|;
name|this
operator|.
name|add
argument_list|(
name|searchButton
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes the search button and its popup menu      */
DECL|method|initSearchButton ()
specifier|private
name|void
name|initSearchButton
parameter_list|()
block|{
comment|// Create search button
name|searchButton
operator|=
operator|new
name|JSplitButton
argument_list|(
name|IconTheme
operator|.
name|getImage
argument_list|(
literal|"search"
argument_list|)
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|setMinimumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|50
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|setBackground
argument_list|(
name|searchField
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|setContentAreaFilled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|setOpaque
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|addSplitButtonActionListener
argument_list|(
operator|new
name|SplitButtonActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|buttonClicked
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|performSearch
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|splitButtonClicked
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
comment|// Populate popup menu and add it to search button
name|popupMenu
operator|=
operator|new
name|JPopupMenu
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|clearSearch
operator|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Clear search"
argument_list|)
argument_list|)
expr_stmt|;
name|clearSearch
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|clearSearch
argument_list|()
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|clearSearch
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|initSearchModeMenu
argument_list|()
expr_stmt|;
for|for
control|(
name|SearchMode
name|mode
range|:
name|SearchMode
operator|.
name|values
argument_list|()
control|)
block|{
name|popupMenu
operator|.
name|add
argument_list|(
name|getSearchModeMenuItem
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|popupMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|initSearchSettingsMenu
argument_list|()
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|JMenuItem
name|help
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Help"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|getImage
argument_list|(
literal|"help"
argument_list|)
argument_list|)
decl_stmt|;
name|help
operator|.
name|addActionListener
argument_list|(
operator|new
name|HelpAction
argument_list|(
name|frame
operator|.
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|searchHelp
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Help"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|searchButton
operator|.
name|setPopupMenu
argument_list|(
name|popupMenu
argument_list|)
expr_stmt|;
name|updateSearchButtonText
argument_list|()
expr_stmt|;
block|}
comment|/**      * Initializes the popup menu items for controlling search settings      */
DECL|method|initSearchSettingsMenu ()
specifier|private
name|void
name|initSearchSettingsMenu
parameter_list|()
block|{
comment|// Create menu items
name|settings
operator|=
operator|new
name|JMenu
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Settings"
argument_list|)
argument_list|)
expr_stmt|;
name|selectMatches
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select matches"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_SELECT_MATCHES
argument_list|)
argument_list|)
expr_stmt|;
name|selectMatches
operator|.
name|addActionListener
argument_list|(
name|ae
lambda|->
name|updatePrefs
argument_list|()
argument_list|)
expr_stmt|;
name|caseSensitive
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Case sensitive"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_CASE_SENSITIVE
argument_list|)
argument_list|)
expr_stmt|;
name|caseSensitive
operator|.
name|addActionListener
argument_list|(
name|ae
lambda|->
name|updatePrefs
argument_list|()
argument_list|)
expr_stmt|;
name|regularExp
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Use regular expressions"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_REG_EXP
argument_list|)
argument_list|)
expr_stmt|;
name|regularExp
operator|.
name|addActionListener
argument_list|(
name|ae
lambda|->
name|updatePrefs
argument_list|()
argument_list|)
expr_stmt|;
name|highlightWords
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Highlight Words"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_HIGHLIGHT_WORDS
argument_list|)
argument_list|)
expr_stmt|;
name|highlightWords
operator|.
name|addActionListener
argument_list|(
name|ae
lambda|->
name|updatePrefs
argument_list|()
argument_list|)
expr_stmt|;
name|autoComplete
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autocomplete names"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_AUTO_COMPLETE
argument_list|)
argument_list|)
expr_stmt|;
name|autoComplete
operator|.
name|addActionListener
argument_list|(
name|ae
lambda|->
name|updatePrefs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add them to the menu
name|settings
operator|.
name|add
argument_list|(
name|selectMatches
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|caseSensitive
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|regularExp
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|highlightWords
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|autoComplete
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes the popup menu items controlling the search mode      */
DECL|method|initSearchModeMenu ()
specifier|private
name|void
name|initSearchModeMenu
parameter_list|()
block|{
name|ButtonGroup
name|searchMethod
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchMode
name|mode
range|:
name|SearchMode
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Create menu items
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|Incremental
case|:
name|modeIncremental
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_MODE_INCREMENTAL
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Float
case|:
name|modeFloat
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_MODE_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Filter
case|:
name|modeFilter
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|LiveFilter
case|:
name|modeLiveFilter
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_MODE_LIVE_FILTER
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResultsInDialog
case|:
name|modeResultsInDialog
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_MODE_RESULTS_IN_DIALOG
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Global
case|:
name|modeGlobal
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|mode
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_MODE_GLOBAL
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Set tooltips on menu items
name|getSearchModeMenuItem
argument_list|(
name|mode
argument_list|)
operator|.
name|setToolTipText
argument_list|(
name|mode
operator|.
name|getToolTipText
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add menu item to group
name|searchMethod
operator|.
name|add
argument_list|(
name|getSearchModeMenuItem
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Listen to selection changed events
name|getSearchModeMenuItem
argument_list|(
name|mode
argument_list|)
operator|.
name|addItemListener
argument_list|(
name|e
lambda|->
name|updateSearchButtonText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Initializes the search text field      */
DECL|method|initSearchField ()
specifier|private
name|void
name|initSearchField
parameter_list|()
block|{
name|searchField
operator|=
operator|new
name|JSearchTextField
argument_list|()
expr_stmt|;
name|searchField
operator|.
name|setTextWhenNotFocused
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Search..."
argument_list|)
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add autocompleter
name|autoCompleteSupport
operator|=
operator|new
name|AutoCompleteSupport
argument_list|<
name|String
argument_list|>
argument_list|(
name|searchField
argument_list|)
expr_stmt|;
name|autoCompleteSupport
operator|.
name|install
argument_list|()
expr_stmt|;
comment|// Add the global focus listener, so a menu item can see if this field was focused when an action was called.
name|searchField
operator|.
name|addFocusListener
argument_list|(
name|Globals
operator|.
name|focusListener
argument_list|)
expr_stmt|;
comment|// Search if user press enter
name|searchField
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|performSearch
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restart incremental search if focus was lost
name|searchField
operator|.
name|addFocusListener
argument_list|(
operator|new
name|FocusAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|getSearchMode
argument_list|()
operator|==
name|SearchMode
operator|.
name|Incremental
condition|)
block|{
name|clearSearch
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Register key binding to repeat the previous incremental search (i.e. jump to next match)
name|searchField
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
name|KeyBinds
operator|.
name|REPEAT_INCREMENTAL_SEARCH
argument_list|)
argument_list|,
literal|"repeat"
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"repeat"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|modeIncremental
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|performSearch
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Subscribe to changes to the text in the search field in order to "live search"
comment|// TODO: With this implementation "onSearchTextChanged" gets called two times when setText() is invoked (once for removing the initial string and then again for inserting the new one). This happens for example when an autocompletion is accepted.
name|searchField
operator|.
name|getDocument
argument_list|()
operator|.
name|addDocumentListener
argument_list|(
operator|new
name|DocumentListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|insertUpdate
parameter_list|(
name|DocumentEvent
name|e
parameter_list|)
block|{
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SearchBar
operator|.
name|class
argument_list|)
operator|.
name|debug
argument_list|(
literal|"Text insert: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|onSearchTextChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeUpdate
parameter_list|(
name|DocumentEvent
name|e
parameter_list|)
block|{
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SearchBar
operator|.
name|class
argument_list|)
operator|.
name|debug
argument_list|(
literal|"Text remove: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|onSearchTextChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|changedUpdate
parameter_list|(
name|DocumentEvent
name|e
parameter_list|)
block|{
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SearchBar
operator|.
name|class
argument_list|)
operator|.
name|debug
argument_list|(
literal|"Text updated: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the item in the popup menu of the search button corresponding to the given search mode      */
DECL|method|getSearchModeMenuItem (SearchMode mode)
specifier|private
name|JRadioButtonMenuItem
name|getSearchModeMenuItem
parameter_list|(
name|SearchMode
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|Incremental
case|:
return|return
name|modeIncremental
return|;
case|case
name|Filter
case|:
return|return
name|modeFilter
return|;
case|case
name|Float
case|:
return|return
name|modeFloat
return|;
case|case
name|Global
case|:
return|return
name|modeGlobal
return|;
case|case
name|LiveFilter
case|:
return|return
name|modeLiveFilter
return|;
case|case
name|ResultsInDialog
case|:
return|return
name|modeResultsInDialog
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Switches to another search mode.      *       * @param mode the new search mode      */
DECL|method|setSearchMode (SearchMode mode)
specifier|private
name|void
name|setSearchMode
parameter_list|(
name|SearchMode
name|mode
parameter_list|)
block|{
name|getSearchModeMenuItem
argument_list|(
name|mode
argument_list|)
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the currently activated search mode.      *       * @return current search mode      */
DECL|method|getSearchMode ()
specifier|private
name|SearchMode
name|getSearchMode
parameter_list|()
block|{
if|if
condition|(
name|modeIncremental
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|SearchMode
operator|.
name|Incremental
return|;
block|}
if|if
condition|(
name|modeFloat
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|SearchMode
operator|.
name|Float
return|;
block|}
if|if
condition|(
name|modeFilter
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|SearchMode
operator|.
name|Filter
return|;
block|}
if|if
condition|(
name|modeLiveFilter
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|SearchMode
operator|.
name|LiveFilter
return|;
block|}
if|if
condition|(
name|modeResultsInDialog
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|SearchMode
operator|.
name|ResultsInDialog
return|;
block|}
if|if
condition|(
name|modeGlobal
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|SearchMode
operator|.
name|Global
return|;
block|}
return|return
name|SearchMode
operator|.
name|Incremental
return|;
block|}
comment|/**      * Adds a SearchTextListener to the search bar. The added listener is immediately informed about the current search.      * Subscribers will be notified about searches.      *       * @param l SearchTextListener to be added      */
DECL|method|addSearchListener (SearchTextListener l)
specifier|public
name|void
name|addSearchListener
parameter_list|(
name|SearchTextListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|listeners
operator|.
name|contains
argument_list|(
name|l
argument_list|)
condition|)
block|{
return|return;
block|}
else|else
block|{
name|listeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|// fire event for the new subscriber
name|l
operator|.
name|searchText
argument_list|(
name|getSearchwords
argument_list|(
name|searchField
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove a SearchTextListener      *       * @param l SearchTextListener to be removed      */
DECL|method|removeSearchListener (SearchTextListener l)
specifier|public
name|void
name|removeSearchListener
parameter_list|(
name|SearchTextListener
name|l
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parses the search query for valid words and returns a list these words. For example, "The great Vikinger" will      * give ["The","great","Vikinger"]      *       * @param searchText the search query      * @return list of words found in the search query      */
DECL|method|getSearchwords (String searchText)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getSearchwords
parameter_list|(
name|String
name|searchText
parameter_list|)
block|{
return|return
operator|(
operator|new
name|SentenceAnalyzer
argument_list|(
name|searchText
argument_list|)
operator|)
operator|.
name|getWords
argument_list|()
return|;
block|}
comment|/**      * Fires an event if a search was started (or cleared)      *       * @param searchText the search query      */
DECL|method|fireSearchlistenerEvent (String searchText)
specifier|private
name|void
name|fireSearchlistenerEvent
parameter_list|(
name|String
name|searchText
parameter_list|)
block|{
comment|// Parse the search string to words
name|List
argument_list|<
name|String
argument_list|>
name|words
decl_stmt|;
if|if
condition|(
operator|(
name|searchText
operator|==
literal|null
operator|)
operator|||
operator|(
name|searchText
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|words
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|words
operator|=
name|getSearchwords
argument_list|(
name|searchText
argument_list|)
expr_stmt|;
block|}
comment|// Fire an event for every listener
for|for
control|(
name|SearchTextListener
name|s
range|:
name|listeners
control|)
block|{
name|s
operator|.
name|searchText
argument_list|(
name|words
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Save current settings.      */
DECL|method|updatePrefs ()
specifier|public
name|void
name|updatePrefs
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_MODE_INCREMENTAL
argument_list|,
name|modeIncremental
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_MODE_FLOAT
argument_list|,
name|modeFloat
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_MODE_LIVE_FILTER
argument_list|,
name|modeLiveFilter
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_MODE_RESULTS_IN_DIALOG
argument_list|,
name|modeResultsInDialog
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_MODE_GLOBAL
argument_list|,
name|modeGlobal
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_SELECT_MATCHES
argument_list|,
name|selectMatches
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_CASE_SENSITIVE
argument_list|,
name|caseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_REG_EXP
argument_list|,
name|regularExp
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_HIGHLIGHT_WORDS
argument_list|,
name|highlightWords
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_AUTO_COMPLETE
argument_list|,
name|autoComplete
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Switches search mode to incremental and sets the focus to the search field.      */
DECL|method|startIncrementalSearch ()
specifier|public
name|void
name|startIncrementalSearch
parameter_list|()
block|{
name|setSearchMode
argument_list|(
name|SearchMode
operator|.
name|Incremental
argument_list|)
expr_stmt|;
name|searchField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
comment|/**      * Focuses the search field if it is not focused. Otherwise, cycles to the next search type.      */
DECL|method|focus ()
specifier|public
name|void
name|focus
parameter_list|()
block|{
if|if
condition|(
name|searchField
operator|.
name|hasFocus
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|getSearchMode
argument_list|()
condition|)
block|{
case|case
name|Incremental
case|:
name|setSearchMode
argument_list|(
name|SearchMode
operator|.
name|Float
argument_list|)
expr_stmt|;
break|break;
case|case
name|Float
case|:
name|setSearchMode
argument_list|(
name|SearchMode
operator|.
name|Filter
argument_list|)
expr_stmt|;
break|break;
case|case
name|Filter
case|:
name|setSearchMode
argument_list|(
name|SearchMode
operator|.
name|LiveFilter
argument_list|)
expr_stmt|;
break|break;
case|case
name|LiveFilter
case|:
name|setSearchMode
argument_list|(
name|SearchMode
operator|.
name|ResultsInDialog
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResultsInDialog
case|:
name|setSearchMode
argument_list|(
name|SearchMode
operator|.
name|Global
argument_list|)
expr_stmt|;
break|break;
case|case
name|Global
case|:
name|setSearchMode
argument_list|(
name|SearchMode
operator|.
name|Incremental
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|searchField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Reacts to the change of the search text. A change in the search query results in an immediate search in      * incremental or live filter search mode.      */
DECL|method|onSearchTextChanged ()
specifier|private
name|void
name|onSearchTextChanged
parameter_list|()
block|{
if|if
condition|(
operator|(
name|getSearchMode
argument_list|()
operator|==
name|SearchMode
operator|.
name|Incremental
operator|)
operator|||
operator|(
name|getSearchMode
argument_list|()
operator|==
name|SearchMode
operator|.
name|LiveFilter
operator|)
condition|)
block|{
comment|// wait until the text is changed
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|performSearch
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Clears (asynchronously) the current search. This includes resetting the search text.      */
DECL|method|clearSearch ()
specifier|private
name|void
name|clearSearch
parameter_list|()
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|worker
operator|.
name|restart
argument_list|()
expr_stmt|;
name|searchField
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fireSearchlistenerEvent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a new search based on the current search query.      */
DECL|method|performSearch ()
specifier|private
name|void
name|performSearch
parameter_list|()
block|{
name|String
name|searchText
init|=
name|searchField
operator|.
name|getText
argument_list|()
decl_stmt|;
comment|// Notify others about the search
name|fireSearchlistenerEvent
argument_list|(
name|searchText
argument_list|)
expr_stmt|;
comment|// An empty search field should cause the search to be cleared.
if|if
condition|(
name|searchText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clearSearch
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|frame
operator|.
name|basePanel
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// TODO: General observation: Should SearchRule not contain the search query? That is upon creation the search rule safes the searchText as a private field. Then also the other methods would act versus the saved query, i.e. validateSearchString() without argument. Or is there a way a search rule is created without a search text?
comment|// Search
name|SearchRule
name|searchRule
init|=
name|SearchRules
operator|.
name|getSearchRuleByQuery
argument_list|(
name|searchText
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_CASE_SENSITIVE
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_REG_EXP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|searchRule
operator|.
name|validateSearchStrings
argument_list|(
name|searchText
argument_list|)
condition|)
block|{
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Search failed: illegal search expression"
argument_list|)
argument_list|)
expr_stmt|;
name|clearSearch
argument_list|()
expr_stmt|;
return|return;
block|}
name|worker
operator|.
name|initSearch
argument_list|(
name|searchRule
argument_list|,
name|searchText
argument_list|,
name|getSearchMode
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: What is the purpose of implementing the AbstractWorker interface if we call the worker that stupidly?
name|worker
operator|.
name|getWorker
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
name|worker
operator|.
name|getCallBack
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
comment|/**      * Updates the text on the search button to reflect the type of search that will happen on click.      */
DECL|method|updateSearchButtonText ()
specifier|private
name|void
name|updateSearchButtonText
parameter_list|()
block|{
if|if
condition|(
name|GrammarBasedSearchRule
operator|.
name|isValid
argument_list|(
name|caseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|regularExp
operator|.
name|isSelected
argument_list|()
argument_list|,
name|searchField
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
name|searchButton
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Search specified field(s)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|searchButton
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Search all fields"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the autocompleter used in the search field.      *       * @param searchCompleter the autocompleter      */
DECL|method|setAutoCompleter (AutoCompleter<String> searchCompleter)
specifier|public
name|void
name|setAutoCompleter
parameter_list|(
name|AutoCompleter
argument_list|<
name|String
argument_list|>
name|searchCompleter
parameter_list|)
block|{
name|this
operator|.
name|autoCompleteSupport
operator|.
name|setAutoCompleter
argument_list|(
name|searchCompleter
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

