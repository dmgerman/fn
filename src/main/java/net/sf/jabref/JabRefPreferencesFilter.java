begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|WrapLayout
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|AbstractTableModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
DECL|class|JabRefPreferencesFilter
specifier|public
class|class
name|JabRefPreferencesFilter
block|{
DECL|class|PreferencesTableModel
specifier|public
specifier|static
class|class
name|PreferencesTableModel
extends|extends
name|AbstractTableModel
block|{
DECL|field|preferences
specifier|private
specifier|final
name|List
argument_list|<
name|PreferenceOption
argument_list|>
name|preferences
decl_stmt|;
DECL|method|PreferencesTableModel (List<PreferenceOption> preferences)
specifier|public
name|PreferencesTableModel
parameter_list|(
name|List
argument_list|<
name|PreferenceOption
argument_list|>
name|preferences
parameter_list|)
block|{
name|this
operator|.
name|preferences
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|preferences
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getColumnName (int column)
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"type"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|column
operator|==
literal|1
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"key"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|column
operator|==
literal|2
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"value"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|column
operator|==
literal|3
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"default"
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|"n/a"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRowCount ()
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|preferences
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getColumnCount ()
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
annotation|@
name|Override
DECL|method|getValueAt (int rowIndex, int columnIndex)
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
if|if
condition|(
name|rowIndex
argument_list|<
literal|0
operator|||
name|rowIndex
operator|-
literal|1
argument_list|>
name|preferences
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|"n/a"
return|;
block|}
name|PreferenceOption
name|preferenceOption
init|=
name|preferences
operator|.
name|get
argument_list|(
name|rowIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnIndex
operator|==
literal|0
condition|)
block|{
return|return
name|preferenceOption
operator|.
name|type
return|;
block|}
elseif|else
if|if
condition|(
name|columnIndex
operator|==
literal|1
condition|)
block|{
return|return
name|preferenceOption
operator|.
name|key
return|;
block|}
elseif|else
if|if
condition|(
name|columnIndex
operator|==
literal|2
condition|)
block|{
return|return
name|preferenceOption
operator|.
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|columnIndex
operator|==
literal|3
condition|)
block|{
return|return
name|preferenceOption
operator|.
name|defaultValue
operator|.
name|orElse
argument_list|(
literal|"NULL"
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|"n/a"
return|;
block|}
block|}
block|}
DECL|class|JabRefPreferencesDialog
specifier|public
specifier|static
class|class
name|JabRefPreferencesDialog
extends|extends
name|JDialog
block|{
DECL|field|preferencesFilter
specifier|private
specifier|final
name|JabRefPreferencesFilter
name|preferencesFilter
decl_stmt|;
DECL|field|table
specifier|private
specifier|final
name|JTable
name|table
decl_stmt|;
DECL|field|showOnlyDeviatingPreferenceOptions
specifier|private
specifier|final
name|JCheckBox
name|showOnlyDeviatingPreferenceOptions
decl_stmt|;
DECL|field|count
specifier|private
specifier|final
name|JLabel
name|count
decl_stmt|;
DECL|method|JabRefPreferencesDialog (JabRefPreferencesFilter preferencesFilter, JFrame frame)
specifier|public
name|JabRefPreferencesDialog
parameter_list|(
name|JabRefPreferencesFilter
name|preferencesFilter
parameter_list|,
name|JFrame
name|frame
parameter_list|)
block|{
name|super
argument_list|(
name|frame
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// is modal
name|this
operator|.
name|preferencesFilter
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|preferencesFilter
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTitle
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Preferences"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|800
argument_list|,
literal|600
argument_list|)
argument_list|)
expr_stmt|;
name|JPanel
name|panel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|panel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|JPanel
name|northPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|northPanel
operator|.
name|setLayout
argument_list|(
operator|new
name|WrapLayout
argument_list|(
name|WrapLayout
operator|.
name|LEFT
argument_list|)
argument_list|)
expr_stmt|;
name|showOnlyDeviatingPreferenceOptions
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show only preferences deviating from their default value"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|showOnlyDeviatingPreferenceOptions
operator|.
name|addChangeListener
argument_list|(
name|x
lambda|->
name|updateModel
argument_list|()
argument_list|)
expr_stmt|;
name|northPanel
operator|.
name|add
argument_list|(
name|showOnlyDeviatingPreferenceOptions
argument_list|)
expr_stmt|;
name|count
operator|=
operator|new
name|JLabel
argument_list|()
expr_stmt|;
name|northPanel
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|northPanel
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|JTable
argument_list|()
expr_stmt|;
name|table
operator|.
name|setAutoCreateRowSorter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateModel
argument_list|()
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|table
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|this
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
DECL|method|updateModel ()
specifier|private
name|void
name|updateModel
parameter_list|()
block|{
name|List
argument_list|<
name|PreferenceOption
argument_list|>
name|preferenceOptions
decl_stmt|;
if|if
condition|(
name|showOnlyDeviatingPreferenceOptions
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|preferenceOptions
operator|=
name|preferencesFilter
operator|.
name|getDeviatingPreferences
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|preferenceOptions
operator|=
name|preferencesFilter
operator|.
name|getPreferenceOptions
argument_list|()
expr_stmt|;
block|}
name|table
operator|.
name|setModel
argument_list|(
operator|new
name|PreferencesTableModel
argument_list|(
name|preferenceOptions
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|.
name|setText
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(%d)"
argument_list|,
name|preferenceOptions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|enum|PreferenceType
specifier|public
enum|enum
name|PreferenceType
block|{
DECL|enumConstant|BOOLEAN
DECL|enumConstant|INTEGER
DECL|enumConstant|STRING
name|BOOLEAN
block|,
name|INTEGER
block|,
name|STRING
block|}
DECL|class|PreferenceOption
specifier|public
specifier|static
class|class
name|PreferenceOption
implements|implements
name|Comparable
argument_list|<
name|PreferenceOption
argument_list|>
block|{
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|Object
name|value
decl_stmt|;
DECL|field|defaultValue
specifier|private
specifier|final
name|Optional
argument_list|<
name|Object
argument_list|>
name|defaultValue
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|PreferenceType
name|type
decl_stmt|;
DECL|method|PreferenceOption (String key, Object value, Object defaultValue)
specifier|public
name|PreferenceOption
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|Object
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|getType
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
operator|&&
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|type
argument_list|,
name|getType
argument_list|(
name|defaultValue
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"types must match between default value and value"
argument_list|)
throw|;
block|}
block|}
DECL|method|getType (Object value)
specifier|private
name|PreferenceType
name|getType
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|PreferenceType
operator|.
name|BOOLEAN
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
name|PreferenceType
operator|.
name|INTEGER
return|;
block|}
else|else
block|{
return|return
name|PreferenceType
operator|.
name|STRING
return|;
block|}
block|}
DECL|method|isUnchanged ()
specifier|public
name|boolean
name|isUnchanged
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|value
argument_list|,
name|defaultValue
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isChanged ()
specifier|public
name|boolean
name|isChanged
parameter_list|()
block|{
return|return
operator|!
name|isUnchanged
argument_list|()
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s: %s=%s (%s)"
argument_list|,
name|type
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|defaultValue
operator|.
name|orElse
argument_list|(
literal|"NULL"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (PreferenceOption o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|PreferenceOption
name|o
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|compare
argument_list|(
name|this
operator|.
name|key
argument_list|,
name|o
operator|.
name|key
argument_list|,
name|String
operator|::
name|compareTo
argument_list|)
return|;
block|}
block|}
DECL|field|preferences
specifier|private
specifier|final
name|JabRefPreferences
name|preferences
decl_stmt|;
DECL|method|JabRefPreferencesFilter (JabRefPreferences preferences)
specifier|public
name|JabRefPreferencesFilter
parameter_list|(
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
name|this
operator|.
name|preferences
operator|=
name|preferences
expr_stmt|;
block|}
DECL|method|getPreferenceOptions ()
specifier|public
name|List
argument_list|<
name|PreferenceOption
argument_list|>
name|getPreferenceOptions
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaults
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|preferences
operator|.
name|defaults
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|prefs
init|=
name|preferences
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
return|return
name|prefs
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
operator|new
name|PreferenceOption
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|defaults
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getDeviatingPreferences ()
specifier|public
name|List
argument_list|<
name|PreferenceOption
argument_list|>
name|getDeviatingPreferences
parameter_list|()
block|{
return|return
name|getPreferenceOptions
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|PreferenceOption
operator|::
name|isChanged
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

