begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 Raik Nagel     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_comment
comment|// function : content for the about dialog
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// modified :
end_comment

begin_comment
comment|//            28.07.2005
end_comment

begin_comment
comment|//            - hide license button
end_comment

begin_package
DECL|package|net.sf.jabref.about
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|about
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|CardLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|BevelBorder
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_class
DECL|class|ExtendedInfoPanel
specifier|public
class|class
name|ExtendedInfoPanel
extends|extends
name|JPanel
implements|implements
name|AnimationListener
implements|,
name|ActionListener
block|{
DECL|field|cards
specifier|private
name|CardLayout
name|cards
decl_stmt|;
DECL|field|close
specifier|private
name|JButton
name|close
decl_stmt|;
DECL|field|about
specifier|private
name|AboutPanel
name|about
decl_stmt|;
DECL|field|infoPanel
specifier|private
name|JPanel
name|infoPanel
decl_stmt|;
DECL|field|animationIsRunning
specifier|private
name|boolean
name|animationIsRunning
init|=
literal|true
decl_stmt|;
DECL|field|mainListener
specifier|private
name|ActionListener
name|mainListener
decl_stmt|;
DECL|method|ExtendedInfoPanel (ActionListener mainFrame)
specifier|public
name|ExtendedInfoPanel
parameter_list|(
name|ActionListener
name|mainFrame
parameter_list|)
block|{
name|mainListener
operator|=
name|mainFrame
expr_stmt|;
comment|// animated area
name|about
operator|=
operator|new
name|AboutPanel
argument_list|()
expr_stmt|;
name|about
operator|.
name|addAnimationListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// scrallable html infos
name|JEditorPane
name|textPane
init|=
operator|new
name|JEditorPane
argument_list|()
decl_stmt|;
name|textPane
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//    URL helpURL = getClass().getResource( "/help/About.html" ) ;
comment|// try to load about.html for the locale language
name|URL
name|helpURL
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|GUIGlobals
operator|.
name|getLocaleHelpPath
argument_list|()
operator|+
name|GUIGlobals
operator|.
name|aboutPage
argument_list|)
decl_stmt|;
comment|// about.html could not detected => try to load the default version
if|if
condition|(
name|helpURL
operator|==
literal|null
condition|)
block|{
name|helpURL
operator|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|GUIGlobals
operator|.
name|helpPre
operator|+
name|GUIGlobals
operator|.
name|aboutPage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|helpURL
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|textPane
operator|.
name|setPage
argument_list|(
name|helpURL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Attempted to read a bad URL: "
operator|+
name|helpURL
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Couldn't find file: About.html"
argument_list|)
expr_stmt|;
block|}
name|JScrollPane
name|scroller
init|=
operator|new
name|JScrollPane
argument_list|(
name|textPane
argument_list|)
decl_stmt|;
name|scroller
operator|.
name|setPreferredSize
argument_list|(
name|about
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// overlapped animated/scrollable area
name|infoPanel
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|cards
operator|=
operator|new
name|CardLayout
argument_list|()
expr_stmt|;
name|infoPanel
operator|.
name|setLayout
argument_list|(
name|cards
argument_list|)
expr_stmt|;
name|infoPanel
operator|.
name|add
argument_list|(
name|about
argument_list|,
literal|"ani"
argument_list|)
expr_stmt|;
name|infoPanel
operator|.
name|add
argument_list|(
name|scroller
argument_list|,
literal|"inf"
argument_list|)
expr_stmt|;
comment|// Buttons
name|JPanel
name|buttonPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|buttonPanel
operator|.
name|setBackground
argument_list|(
name|Color
operator|.
name|white
argument_list|)
expr_stmt|;
name|buttonPanel
operator|.
name|setLayout
argument_list|(
operator|new
name|GridLayout
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|buttonPanel
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createBevelBorder
argument_list|(
name|BevelBorder
operator|.
name|RAISED
argument_list|)
argument_list|)
expr_stmt|;
name|buttonPanel
operator|.
name|add
argument_list|(
name|Box
operator|.
name|createGlue
argument_list|()
argument_list|)
expr_stmt|;
name|close
operator|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Skip"
argument_list|)
argument_list|)
expr_stmt|;
name|close
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|close
operator|.
name|setActionCommand
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
name|close
operator|.
name|setFocusable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JButton
name|license
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"License"
argument_list|)
argument_list|)
decl_stmt|;
name|license
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|license
operator|.
name|setActionCommand
argument_list|(
literal|"license"
argument_list|)
expr_stmt|;
name|license
operator|.
name|setFocusable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buttonPanel
operator|.
name|add
argument_list|(
name|close
argument_list|)
expr_stmt|;
comment|//    buttonPanel.add( license ) ;
name|buttonPanel
operator|.
name|add
argument_list|(
name|Box
operator|.
name|createGlue
argument_list|()
argument_list|)
expr_stmt|;
comment|// main panel
name|this
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|add
argument_list|(
name|infoPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|this
operator|.
name|add
argument_list|(
name|buttonPanel
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
comment|//    about.startAnimation();
block|}
DECL|method|animationReady ()
specifier|public
name|void
name|animationReady
parameter_list|()
block|{
name|animationIsRunning
operator|=
literal|false
expr_stmt|;
name|cards
operator|.
name|show
argument_list|(
name|infoPanel
argument_list|,
literal|"inf"
argument_list|)
expr_stmt|;
name|close
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Close"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed ( ActionEvent e )
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|cmd
init|=
name|e
operator|.
name|getActionCommand
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"close"
argument_list|)
condition|)
block|{
if|if
condition|(
name|animationIsRunning
condition|)
block|{
name|about
operator|.
name|skipAnimation
argument_list|()
expr_stmt|;
comment|// implicit call of AnimationListener.animationReady()
block|}
else|else
block|{
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mainListener
operator|.
name|actionPerformed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"license"
argument_list|)
condition|)
block|{
comment|//      showLicense() ;
name|mainListener
operator|.
name|actionPerformed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

