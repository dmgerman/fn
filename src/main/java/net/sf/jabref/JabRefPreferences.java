begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.  This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or  (at your option) any later version.   This program is distributed in the hope that it will be useful,  but WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  GNU General Public License for more details.   You should have received a copy of the GNU General Public License along  with this program; if not, write to the Free Software Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|InvalidPreferencesFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|EntryEditorTabList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|PersistenceTableColumnListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preftabs
operator|.
name|ImportSettingsTab
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|ImportFormat
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|autocompleter
operator|.
name|AutoCompletePreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|CleanupPreset
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|labelpattern
operator|.
name|GlobalLabelPattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|CustomEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|exporter
operator|.
name|CustomExportList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|exporter
operator|.
name|ExportComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|DroppedFileHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|CustomImportList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|RemotePreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldsUtils
import|;
end_import

begin_class
DECL|class|JabRefPreferences
specifier|public
class|class
name|JabRefPreferences
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JabRefPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EXTERNAL_FILE_TYPES
specifier|public
specifier|static
specifier|final
name|String
name|EXTERNAL_FILE_TYPES
init|=
literal|"externalFileTypes"
decl_stmt|;
comment|/**      * HashMap that contains all preferences which are set by default      */
DECL|field|defaults
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaults
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/* contents of the defaults HashMap that are defined in this class.      * There are more default parameters in this map which belong to separate preference classes.     */
DECL|field|EMACS_PATH
specifier|public
specifier|static
specifier|final
name|String
name|EMACS_PATH
init|=
literal|"emacsPath"
decl_stmt|;
DECL|field|EMACS_ADDITIONAL_PARAMETERS
specifier|public
specifier|static
specifier|final
name|String
name|EMACS_ADDITIONAL_PARAMETERS
init|=
literal|"emacsParameters"
decl_stmt|;
DECL|field|EMACS_23
specifier|public
specifier|static
specifier|final
name|String
name|EMACS_23
init|=
literal|"emacsUseV23InsertString"
decl_stmt|;
DECL|field|FONT_FAMILY
specifier|public
specifier|static
specifier|final
name|String
name|FONT_FAMILY
init|=
literal|"fontFamily"
decl_stmt|;
DECL|field|WIN_LOOK_AND_FEEL
specifier|public
specifier|static
specifier|final
name|String
name|WIN_LOOK_AND_FEEL
init|=
literal|"lookAndFeel"
decl_stmt|;
DECL|field|LATEX_EDITOR_PATH
specifier|public
specifier|static
specifier|final
name|String
name|LATEX_EDITOR_PATH
init|=
literal|"latexEditorPath"
decl_stmt|;
DECL|field|TEXSTUDIO_PATH
specifier|public
specifier|static
specifier|final
name|String
name|TEXSTUDIO_PATH
init|=
literal|"TeXstudioPath"
decl_stmt|;
DECL|field|WIN_EDT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|WIN_EDT_PATH
init|=
literal|"winEdtPath"
decl_stmt|;
DECL|field|TEXMAKER_PATH
specifier|public
specifier|static
specifier|final
name|String
name|TEXMAKER_PATH
init|=
literal|"texmakerPath"
decl_stmt|;
DECL|field|LANGUAGE
specifier|public
specifier|static
specifier|final
name|String
name|LANGUAGE
init|=
literal|"language"
decl_stmt|;
DECL|field|NAMES_LAST_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|NAMES_LAST_ONLY
init|=
literal|"namesLastOnly"
decl_stmt|;
DECL|field|ABBR_AUTHOR_NAMES
specifier|public
specifier|static
specifier|final
name|String
name|ABBR_AUTHOR_NAMES
init|=
literal|"abbrAuthorNames"
decl_stmt|;
DECL|field|NAMES_NATBIB
specifier|public
specifier|static
specifier|final
name|String
name|NAMES_NATBIB
init|=
literal|"namesNatbib"
decl_stmt|;
DECL|field|NAMES_FIRST_LAST
specifier|public
specifier|static
specifier|final
name|String
name|NAMES_FIRST_LAST
init|=
literal|"namesFf"
decl_stmt|;
DECL|field|BIBLATEX_DEFAULT_MODE
specifier|public
specifier|static
specifier|final
name|String
name|BIBLATEX_DEFAULT_MODE
init|=
literal|"biblatexMode"
decl_stmt|;
DECL|field|NAMES_AS_IS
specifier|public
specifier|static
specifier|final
name|String
name|NAMES_AS_IS
init|=
literal|"namesAsIs"
decl_stmt|;
DECL|field|TABLE_COLOR_CODES_ON
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_COLOR_CODES_ON
init|=
literal|"tableColorCodesOn"
decl_stmt|;
DECL|field|ENTRY_EDITOR_HEIGHT
specifier|public
specifier|static
specifier|final
name|String
name|ENTRY_EDITOR_HEIGHT
init|=
literal|"entryEditorHeight"
decl_stmt|;
DECL|field|PREVIEW_PANEL_HEIGHT
specifier|public
specifier|static
specifier|final
name|String
name|PREVIEW_PANEL_HEIGHT
init|=
literal|"previewPanelHeight"
decl_stmt|;
DECL|field|AUTO_RESIZE_MODE
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_RESIZE_MODE
init|=
literal|"autoResizeMode"
decl_stmt|;
DECL|field|WINDOW_MAXIMISED
specifier|public
specifier|static
specifier|final
name|String
name|WINDOW_MAXIMISED
init|=
literal|"windowMaximised"
decl_stmt|;
DECL|field|SIZE_Y
specifier|public
specifier|static
specifier|final
name|String
name|SIZE_Y
init|=
literal|"mainWindowSizeY"
decl_stmt|;
DECL|field|SIZE_X
specifier|public
specifier|static
specifier|final
name|String
name|SIZE_X
init|=
literal|"mainWindowSizeX"
decl_stmt|;
DECL|field|POS_Y
specifier|public
specifier|static
specifier|final
name|String
name|POS_Y
init|=
literal|"mainWindowPosY"
decl_stmt|;
DECL|field|POS_X
specifier|public
specifier|static
specifier|final
name|String
name|POS_X
init|=
literal|"mainWindowPosX"
decl_stmt|;
DECL|field|VIM_SERVER
specifier|public
specifier|static
specifier|final
name|String
name|VIM_SERVER
init|=
literal|"vimServer"
decl_stmt|;
DECL|field|VIM
specifier|public
specifier|static
specifier|final
name|String
name|VIM
init|=
literal|"vim"
decl_stmt|;
DECL|field|LYXPIPE
specifier|public
specifier|static
specifier|final
name|String
name|LYXPIPE
init|=
literal|"lyxpipe"
decl_stmt|;
DECL|field|USE_DEFAULT_LOOK_AND_FEEL
specifier|public
specifier|static
specifier|final
name|String
name|USE_DEFAULT_LOOK_AND_FEEL
init|=
literal|"useDefaultLookAndFeel"
decl_stmt|;
DECL|field|PROXY_PORT
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_PORT
init|=
literal|"proxyPort"
decl_stmt|;
DECL|field|PROXY_HOSTNAME
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_HOSTNAME
init|=
literal|"proxyHostname"
decl_stmt|;
DECL|field|PROXY_USE
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_USE
init|=
literal|"useProxy"
decl_stmt|;
DECL|field|PROXY_USERNAME
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_USERNAME
init|=
literal|"proxyUsername"
decl_stmt|;
DECL|field|PROXY_PASSWORD
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_PASSWORD
init|=
literal|"proxyPassword"
decl_stmt|;
DECL|field|PROXY_USE_AUTHENTICATION
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_USE_AUTHENTICATION
init|=
literal|"useProxyAuthentication"
decl_stmt|;
DECL|field|TABLE_PRIMARY_SORT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_PRIMARY_SORT_FIELD
init|=
literal|"priSort"
decl_stmt|;
DECL|field|TABLE_PRIMARY_SORT_DESCENDING
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_PRIMARY_SORT_DESCENDING
init|=
literal|"priDescending"
decl_stmt|;
DECL|field|TABLE_SECONDARY_SORT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_SECONDARY_SORT_FIELD
init|=
literal|"secSort"
decl_stmt|;
DECL|field|TABLE_SECONDARY_SORT_DESCENDING
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_SECONDARY_SORT_DESCENDING
init|=
literal|"secDescending"
decl_stmt|;
DECL|field|TABLE_TERTIARY_SORT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_TERTIARY_SORT_FIELD
init|=
literal|"terSort"
decl_stmt|;
DECL|field|TABLE_TERTIARY_SORT_DESCENDING
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_TERTIARY_SORT_DESCENDING
init|=
literal|"terDescending"
decl_stmt|;
DECL|field|REFORMAT_FILE_ON_SAVE_AND_EXPORT
specifier|public
specifier|static
specifier|final
name|String
name|REFORMAT_FILE_ON_SAVE_AND_EXPORT
init|=
literal|"reformatFileOnSaveAndExport"
decl_stmt|;
DECL|field|EXPORT_IN_ORIGINAL_ORDER
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_IN_ORIGINAL_ORDER
init|=
literal|"exportInOriginalOrder"
decl_stmt|;
DECL|field|EXPORT_IN_SPECIFIED_ORDER
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_IN_SPECIFIED_ORDER
init|=
literal|"exportInSpecifiedOrder"
decl_stmt|;
DECL|field|EXPORT_PRIMARY_SORT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_PRIMARY_SORT_FIELD
init|=
literal|"exportPriSort"
decl_stmt|;
DECL|field|EXPORT_PRIMARY_SORT_DESCENDING
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_PRIMARY_SORT_DESCENDING
init|=
literal|"exportPriDescending"
decl_stmt|;
DECL|field|EXPORT_SECONDARY_SORT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_SECONDARY_SORT_FIELD
init|=
literal|"exportSecSort"
decl_stmt|;
DECL|field|EXPORT_SECONDARY_SORT_DESCENDING
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_SECONDARY_SORT_DESCENDING
init|=
literal|"exportSecDescending"
decl_stmt|;
DECL|field|EXPORT_TERTIARY_SORT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_TERTIARY_SORT_FIELD
init|=
literal|"exportTerSort"
decl_stmt|;
DECL|field|EXPORT_TERTIARY_SORT_DESCENDING
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_TERTIARY_SORT_DESCENDING
init|=
literal|"exportTerDescending"
decl_stmt|;
DECL|field|NEWLINE
specifier|public
specifier|static
specifier|final
name|String
name|NEWLINE
init|=
literal|"newline"
decl_stmt|;
DECL|field|COLUMN_WIDTHS
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN_WIDTHS
init|=
literal|"columnWidths"
decl_stmt|;
DECL|field|COLUMN_NAMES
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN_NAMES
init|=
literal|"columnNames"
decl_stmt|;
DECL|field|SIDE_PANE_COMPONENT_PREFERRED_POSITIONS
specifier|public
specifier|static
specifier|final
name|String
name|SIDE_PANE_COMPONENT_PREFERRED_POSITIONS
init|=
literal|"sidePaneComponentPreferredPositions"
decl_stmt|;
DECL|field|SIDE_PANE_COMPONENT_NAMES
specifier|public
specifier|static
specifier|final
name|String
name|SIDE_PANE_COMPONENT_NAMES
init|=
literal|"sidePaneComponentNames"
decl_stmt|;
DECL|field|XMP_PRIVACY_FILTERS
specifier|public
specifier|static
specifier|final
name|String
name|XMP_PRIVACY_FILTERS
init|=
literal|"xmpPrivacyFilters"
decl_stmt|;
DECL|field|USE_XMP_PRIVACY_FILTER
specifier|public
specifier|static
specifier|final
name|String
name|USE_XMP_PRIVACY_FILTER
init|=
literal|"useXmpPrivacyFilter"
decl_stmt|;
DECL|field|SEARCH_MODE_FILTER
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_MODE_FILTER
init|=
literal|"searchModeFilter"
decl_stmt|;
DECL|field|SEARCH_CASE_SENSITIVE
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_CASE_SENSITIVE
init|=
literal|"caseSensitiveSearch"
decl_stmt|;
DECL|field|DEFAULT_AUTO_SORT
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_AUTO_SORT
init|=
literal|"defaultAutoSort"
decl_stmt|;
DECL|field|DEFAULT_SHOW_SOURCE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SHOW_SOURCE
init|=
literal|"defaultShowSource"
decl_stmt|;
DECL|field|STRINGS_SIZE_Y
specifier|public
specifier|static
specifier|final
name|String
name|STRINGS_SIZE_Y
init|=
literal|"stringsSizeY"
decl_stmt|;
DECL|field|STRINGS_SIZE_X
specifier|public
specifier|static
specifier|final
name|String
name|STRINGS_SIZE_X
init|=
literal|"stringsSizeX"
decl_stmt|;
DECL|field|STRINGS_POS_Y
specifier|public
specifier|static
specifier|final
name|String
name|STRINGS_POS_Y
init|=
literal|"stringsPosY"
decl_stmt|;
DECL|field|STRINGS_POS_X
specifier|public
specifier|static
specifier|final
name|String
name|STRINGS_POS_X
init|=
literal|"stringsPosX"
decl_stmt|;
DECL|field|DUPLICATES_SIZE_Y
specifier|public
specifier|static
specifier|final
name|String
name|DUPLICATES_SIZE_Y
init|=
literal|"duplicatesSizeY"
decl_stmt|;
DECL|field|DUPLICATES_SIZE_X
specifier|public
specifier|static
specifier|final
name|String
name|DUPLICATES_SIZE_X
init|=
literal|"duplicatesSizeX"
decl_stmt|;
DECL|field|DUPLICATES_POS_Y
specifier|public
specifier|static
specifier|final
name|String
name|DUPLICATES_POS_Y
init|=
literal|"duplicatesPosY"
decl_stmt|;
DECL|field|DUPLICATES_POS_X
specifier|public
specifier|static
specifier|final
name|String
name|DUPLICATES_POS_X
init|=
literal|"duplicatesPosX"
decl_stmt|;
DECL|field|MERGEENTRIES_SIZE_Y
specifier|public
specifier|static
specifier|final
name|String
name|MERGEENTRIES_SIZE_Y
init|=
literal|"mergeEntriesSizeY"
decl_stmt|;
DECL|field|MERGEENTRIES_SIZE_X
specifier|public
specifier|static
specifier|final
name|String
name|MERGEENTRIES_SIZE_X
init|=
literal|"mergeEntriesSizeX"
decl_stmt|;
DECL|field|MERGEENTRIES_POS_Y
specifier|public
specifier|static
specifier|final
name|String
name|MERGEENTRIES_POS_Y
init|=
literal|"mergeEntriesPosY"
decl_stmt|;
DECL|field|MERGEENTRIES_POS_X
specifier|public
specifier|static
specifier|final
name|String
name|MERGEENTRIES_POS_X
init|=
literal|"mergeEntriesPosX"
decl_stmt|;
DECL|field|LAST_EDITED
specifier|public
specifier|static
specifier|final
name|String
name|LAST_EDITED
init|=
literal|"lastEdited"
decl_stmt|;
DECL|field|OPEN_LAST_EDITED
specifier|public
specifier|static
specifier|final
name|String
name|OPEN_LAST_EDITED
init|=
literal|"openLastEdited"
decl_stmt|;
DECL|field|LAST_FOCUSED
specifier|public
specifier|static
specifier|final
name|String
name|LAST_FOCUSED
init|=
literal|"lastFocused"
decl_stmt|;
DECL|field|BACKUP
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP
init|=
literal|"backup"
decl_stmt|;
DECL|field|ENTRY_TYPE_FORM_WIDTH
specifier|public
specifier|static
specifier|final
name|String
name|ENTRY_TYPE_FORM_WIDTH
init|=
literal|"entryTypeFormWidth"
decl_stmt|;
DECL|field|ENTRY_TYPE_FORM_HEIGHT_FACTOR
specifier|public
specifier|static
specifier|final
name|String
name|ENTRY_TYPE_FORM_HEIGHT_FACTOR
init|=
literal|"entryTypeFormHeightFactor"
decl_stmt|;
DECL|field|AUTO_OPEN_FORM
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_OPEN_FORM
init|=
literal|"autoOpenForm"
decl_stmt|;
DECL|field|FILE_WORKING_DIRECTORY
specifier|public
specifier|static
specifier|final
name|String
name|FILE_WORKING_DIRECTORY
init|=
literal|"fileWorkingDirectory"
decl_stmt|;
DECL|field|IMPORT_WORKING_DIRECTORY
specifier|public
specifier|static
specifier|final
name|String
name|IMPORT_WORKING_DIRECTORY
init|=
literal|"importWorkingDirectory"
decl_stmt|;
DECL|field|EXPORT_WORKING_DIRECTORY
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_WORKING_DIRECTORY
init|=
literal|"exportWorkingDirectory"
decl_stmt|;
DECL|field|WORKING_DIRECTORY
specifier|public
specifier|static
specifier|final
name|String
name|WORKING_DIRECTORY
init|=
literal|"workingDirectory"
decl_stmt|;
DECL|field|NUMBER_COL_WIDTH
specifier|public
specifier|static
specifier|final
name|String
name|NUMBER_COL_WIDTH
init|=
literal|"numberColWidth"
decl_stmt|;
DECL|field|AUTO_COMPLETE
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_COMPLETE
init|=
literal|"autoComplete"
decl_stmt|;
DECL|field|SEARCH_PANE_POS_Y
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_PANE_POS_Y
init|=
literal|"searchPanePosY"
decl_stmt|;
DECL|field|SEARCH_PANE_POS_X
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_PANE_POS_X
init|=
literal|"searchPanePosX"
decl_stmt|;
DECL|field|SEARCH_REG_EXP
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_REG_EXP
init|=
literal|"regExpSearch"
decl_stmt|;
DECL|field|EDITOR_EMACS_KEYBINDINGS
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_EMACS_KEYBINDINGS
init|=
literal|"editorEMACSkeyBindings"
decl_stmt|;
DECL|field|EDITOR_EMACS_KEYBINDINGS_REBIND_CA
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_EMACS_KEYBINDINGS_REBIND_CA
init|=
literal|"editorEMACSkeyBindingsRebindCA"
decl_stmt|;
DECL|field|EDITOR_EMACS_KEYBINDINGS_REBIND_CF
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_EMACS_KEYBINDINGS_REBIND_CF
init|=
literal|"editorEMACSkeyBindingsRebindCF"
decl_stmt|;
DECL|field|GROUP_SHOW_NUMBER_OF_ELEMENTS
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_SHOW_NUMBER_OF_ELEMENTS
init|=
literal|"groupShowNumberOfElements"
decl_stmt|;
DECL|field|GROUP_AUTO_HIDE
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_AUTO_HIDE
init|=
literal|"groupAutoHide"
decl_stmt|;
DECL|field|GROUP_AUTO_SHOW
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_AUTO_SHOW
init|=
literal|"groupAutoShow"
decl_stmt|;
DECL|field|GROUP_EXPAND_TREE
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_EXPAND_TREE
init|=
literal|"groupExpandTree"
decl_stmt|;
DECL|field|GROUP_SHOW_DYNAMIC
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_SHOW_DYNAMIC
init|=
literal|"groupShowDynamic"
decl_stmt|;
DECL|field|GROUP_SHOW_ICONS
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_SHOW_ICONS
init|=
literal|"groupShowIcons"
decl_stmt|;
DECL|field|GROUPS_DEFAULT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|GROUPS_DEFAULT_FIELD
init|=
literal|"groupsDefaultField"
decl_stmt|;
DECL|field|GROUP_SELECT_MATCHES
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_SELECT_MATCHES
init|=
literal|"groupSelectMatches"
decl_stmt|;
DECL|field|GROUP_SHOW_OVERLAPPING
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_SHOW_OVERLAPPING
init|=
literal|"groupShowOverlapping"
decl_stmt|;
DECL|field|GROUP_INVERT_SELECTIONS
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_INVERT_SELECTIONS
init|=
literal|"groupInvertSelections"
decl_stmt|;
DECL|field|GROUP_INTERSECT_SELECTIONS
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_INTERSECT_SELECTIONS
init|=
literal|"groupIntersectSelections"
decl_stmt|;
DECL|field|GROUP_FLOAT_SELECTIONS
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_FLOAT_SELECTIONS
init|=
literal|"groupFloatSelections"
decl_stmt|;
DECL|field|EDIT_GROUP_MEMBERSHIP_MODE
specifier|public
specifier|static
specifier|final
name|String
name|EDIT_GROUP_MEMBERSHIP_MODE
init|=
literal|"groupEditGroupMembershipMode"
decl_stmt|;
DECL|field|GROUP_KEYWORD_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_KEYWORD_SEPARATOR
init|=
literal|"groupKeywordSeparator"
decl_stmt|;
DECL|field|AUTO_ASSIGN_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_ASSIGN_GROUP
init|=
literal|"autoAssignGroup"
decl_stmt|;
DECL|field|LIST_OF_FILE_COLUMNS
specifier|public
specifier|static
specifier|final
name|String
name|LIST_OF_FILE_COLUMNS
init|=
literal|"listOfFileColumns"
decl_stmt|;
DECL|field|EXTRA_FILE_COLUMNS
specifier|public
specifier|static
specifier|final
name|String
name|EXTRA_FILE_COLUMNS
init|=
literal|"extraFileColumns"
decl_stmt|;
DECL|field|ARXIV_COLUMN
specifier|public
specifier|static
specifier|final
name|String
name|ARXIV_COLUMN
init|=
literal|"arxivColumn"
decl_stmt|;
DECL|field|FILE_COLUMN
specifier|public
specifier|static
specifier|final
name|String
name|FILE_COLUMN
init|=
literal|"fileColumn"
decl_stmt|;
DECL|field|PREFER_URL_DOI
specifier|public
specifier|static
specifier|final
name|String
name|PREFER_URL_DOI
init|=
literal|"preferUrlDoi"
decl_stmt|;
DECL|field|URL_COLUMN
specifier|public
specifier|static
specifier|final
name|String
name|URL_COLUMN
init|=
literal|"urlColumn"
decl_stmt|;
DECL|field|DISABLE_ON_MULTIPLE_SELECTION
specifier|public
specifier|static
specifier|final
name|String
name|DISABLE_ON_MULTIPLE_SELECTION
init|=
literal|"disableOnMultipleSelection"
decl_stmt|;
DECL|field|CTRL_CLICK
specifier|public
specifier|static
specifier|final
name|String
name|CTRL_CLICK
init|=
literal|"ctrlClick"
decl_stmt|;
DECL|field|INCOMPLETE_ENTRY_BACKGROUND
specifier|public
specifier|static
specifier|final
name|String
name|INCOMPLETE_ENTRY_BACKGROUND
init|=
literal|"incompleteEntryBackground"
decl_stmt|;
DECL|field|FIELD_EDITOR_TEXT_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_EDITOR_TEXT_COLOR
init|=
literal|"fieldEditorTextColor"
decl_stmt|;
DECL|field|ACTIVE_FIELD_EDITOR_BACKGROUND_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|ACTIVE_FIELD_EDITOR_BACKGROUND_COLOR
init|=
literal|"activeFieldEditorBackgroundColor"
decl_stmt|;
DECL|field|INVALID_FIELD_BACKGROUND_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|INVALID_FIELD_BACKGROUND_COLOR
init|=
literal|"invalidFieldBackgroundColor"
decl_stmt|;
DECL|field|VALID_FIELD_BACKGROUND_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|VALID_FIELD_BACKGROUND_COLOR
init|=
literal|"validFieldBackgroundColor"
decl_stmt|;
DECL|field|MARKED_ENTRY_BACKGROUND5
specifier|public
specifier|static
specifier|final
name|String
name|MARKED_ENTRY_BACKGROUND5
init|=
literal|"markedEntryBackground5"
decl_stmt|;
DECL|field|MARKED_ENTRY_BACKGROUND4
specifier|public
specifier|static
specifier|final
name|String
name|MARKED_ENTRY_BACKGROUND4
init|=
literal|"markedEntryBackground4"
decl_stmt|;
DECL|field|MARKED_ENTRY_BACKGROUND3
specifier|public
specifier|static
specifier|final
name|String
name|MARKED_ENTRY_BACKGROUND3
init|=
literal|"markedEntryBackground3"
decl_stmt|;
DECL|field|MARKED_ENTRY_BACKGROUND2
specifier|public
specifier|static
specifier|final
name|String
name|MARKED_ENTRY_BACKGROUND2
init|=
literal|"markedEntryBackground2"
decl_stmt|;
DECL|field|MARKED_ENTRY_BACKGROUND1
specifier|public
specifier|static
specifier|final
name|String
name|MARKED_ENTRY_BACKGROUND1
init|=
literal|"markedEntryBackground1"
decl_stmt|;
DECL|field|MARKED_ENTRY_BACKGROUND0
specifier|public
specifier|static
specifier|final
name|String
name|MARKED_ENTRY_BACKGROUND0
init|=
literal|"markedEntryBackground0"
decl_stmt|;
DECL|field|VERY_GRAYED_OUT_TEXT
specifier|public
specifier|static
specifier|final
name|String
name|VERY_GRAYED_OUT_TEXT
init|=
literal|"veryGrayedOutText"
decl_stmt|;
DECL|field|VERY_GRAYED_OUT_BACKGROUND
specifier|public
specifier|static
specifier|final
name|String
name|VERY_GRAYED_OUT_BACKGROUND
init|=
literal|"veryGrayedOutBackground"
decl_stmt|;
DECL|field|GRAYED_OUT_TEXT
specifier|public
specifier|static
specifier|final
name|String
name|GRAYED_OUT_TEXT
init|=
literal|"grayedOutText"
decl_stmt|;
DECL|field|GRAYED_OUT_BACKGROUND
specifier|public
specifier|static
specifier|final
name|String
name|GRAYED_OUT_BACKGROUND
init|=
literal|"grayedOutBackground"
decl_stmt|;
DECL|field|GRID_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|GRID_COLOR
init|=
literal|"gridColor"
decl_stmt|;
DECL|field|TABLE_TEXT
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_TEXT
init|=
literal|"tableText"
decl_stmt|;
DECL|field|TABLE_OPT_FIELD_BACKGROUND
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_OPT_FIELD_BACKGROUND
init|=
literal|"tableOptFieldBackground"
decl_stmt|;
DECL|field|TABLE_REQ_FIELD_BACKGROUND
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_REQ_FIELD_BACKGROUND
init|=
literal|"tableReqFieldBackground"
decl_stmt|;
DECL|field|TABLE_BACKGROUND
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_BACKGROUND
init|=
literal|"tableBackground"
decl_stmt|;
DECL|field|TABLE_SHOW_GRID
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_SHOW_GRID
init|=
literal|"tableShowGrid"
decl_stmt|;
DECL|field|TABLE_ROW_PADDING
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_ROW_PADDING
init|=
literal|"tableRowPadding"
decl_stmt|;
DECL|field|MENU_FONT_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|MENU_FONT_SIZE
init|=
literal|"menuFontSize"
decl_stmt|;
DECL|field|OVERRIDE_DEFAULT_FONTS
specifier|public
specifier|static
specifier|final
name|String
name|OVERRIDE_DEFAULT_FONTS
init|=
literal|"overrideDefaultFonts"
decl_stmt|;
DECL|field|FONT_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|FONT_SIZE
init|=
literal|"fontSize"
decl_stmt|;
DECL|field|FONT_STYLE
specifier|public
specifier|static
specifier|final
name|String
name|FONT_STYLE
init|=
literal|"fontStyle"
decl_stmt|;
DECL|field|RECENT_FILES
specifier|public
specifier|static
specifier|final
name|String
name|RECENT_FILES
init|=
literal|"recentFiles"
decl_stmt|;
DECL|field|GENERAL_FIELDS
specifier|public
specifier|static
specifier|final
name|String
name|GENERAL_FIELDS
init|=
literal|"generalFields"
decl_stmt|;
DECL|field|RENAME_ON_MOVE_FILE_TO_FILE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|RENAME_ON_MOVE_FILE_TO_FILE_DIR
init|=
literal|"renameOnMoveFileToFileDir"
decl_stmt|;
DECL|field|MEMORY_STICK_MODE
specifier|public
specifier|static
specifier|final
name|String
name|MEMORY_STICK_MODE
init|=
literal|"memoryStickMode"
decl_stmt|;
DECL|field|DEFAULT_OWNER
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_OWNER
init|=
literal|"defaultOwner"
decl_stmt|;
DECL|field|GROUPS_VISIBLE_ROWS
specifier|public
specifier|static
specifier|final
name|String
name|GROUPS_VISIBLE_ROWS
init|=
literal|"groupsVisibleRows"
decl_stmt|;
DECL|field|DEFAULT_ENCODING
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ENCODING
init|=
literal|"defaultEncoding"
decl_stmt|;
DECL|field|TOOLBAR_VISIBLE
specifier|public
specifier|static
specifier|final
name|String
name|TOOLBAR_VISIBLE
init|=
literal|"toolbarVisible"
decl_stmt|;
DECL|field|HIGHLIGHT_GROUPS_MATCHING_ALL
specifier|public
specifier|static
specifier|final
name|String
name|HIGHLIGHT_GROUPS_MATCHING_ALL
init|=
literal|"highlightGroupsMatchingAll"
decl_stmt|;
DECL|field|HIGHLIGHT_GROUPS_MATCHING_ANY
specifier|public
specifier|static
specifier|final
name|String
name|HIGHLIGHT_GROUPS_MATCHING_ANY
init|=
literal|"highlightGroupsMatchingAny"
decl_stmt|;
DECL|field|UPDATE_TIMESTAMP
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_TIMESTAMP
init|=
literal|"updateTimestamp"
decl_stmt|;
DECL|field|TIME_STAMP_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|TIME_STAMP_FIELD
init|=
literal|"timeStampField"
decl_stmt|;
DECL|field|TIME_STAMP_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|TIME_STAMP_FORMAT
init|=
literal|"timeStampFormat"
decl_stmt|;
DECL|field|OVERWRITE_TIME_STAMP
specifier|public
specifier|static
specifier|final
name|String
name|OVERWRITE_TIME_STAMP
init|=
literal|"overwriteTimeStamp"
decl_stmt|;
DECL|field|USE_TIME_STAMP
specifier|public
specifier|static
specifier|final
name|String
name|USE_TIME_STAMP
init|=
literal|"useTimeStamp"
decl_stmt|;
DECL|field|WARN_ABOUT_DUPLICATES_IN_INSPECTION
specifier|public
specifier|static
specifier|final
name|String
name|WARN_ABOUT_DUPLICATES_IN_INSPECTION
init|=
literal|"warnAboutDuplicatesInInspection"
decl_stmt|;
DECL|field|UNMARK_ALL_ENTRIES_BEFORE_IMPORTING
specifier|public
specifier|static
specifier|final
name|String
name|UNMARK_ALL_ENTRIES_BEFORE_IMPORTING
init|=
literal|"unmarkAllEntriesBeforeImporting"
decl_stmt|;
DECL|field|MARK_IMPORTED_ENTRIES
specifier|public
specifier|static
specifier|final
name|String
name|MARK_IMPORTED_ENTRIES
init|=
literal|"markImportedEntries"
decl_stmt|;
DECL|field|GENERATE_KEYS_AFTER_INSPECTION
specifier|public
specifier|static
specifier|final
name|String
name|GENERATE_KEYS_AFTER_INSPECTION
init|=
literal|"generateKeysAfterInspection"
decl_stmt|;
DECL|field|NON_WRAPPABLE_FIELDS
specifier|public
specifier|static
specifier|final
name|String
name|NON_WRAPPABLE_FIELDS
init|=
literal|"nonWrappableFields"
decl_stmt|;
DECL|field|PUT_BRACES_AROUND_CAPITALS
specifier|public
specifier|static
specifier|final
name|String
name|PUT_BRACES_AROUND_CAPITALS
init|=
literal|"putBracesAroundCapitals"
decl_stmt|;
DECL|field|RESOLVE_STRINGS_ALL_FIELDS
specifier|public
specifier|static
specifier|final
name|String
name|RESOLVE_STRINGS_ALL_FIELDS
init|=
literal|"resolveStringsAllFields"
decl_stmt|;
DECL|field|DO_NOT_RESOLVE_STRINGS_FOR
specifier|public
specifier|static
specifier|final
name|String
name|DO_NOT_RESOLVE_STRINGS_FOR
init|=
literal|"doNotResolveStringsFor"
decl_stmt|;
DECL|field|PREVIEW_PRINT_BUTTON
specifier|public
specifier|static
specifier|final
name|String
name|PREVIEW_PRINT_BUTTON
init|=
literal|"previewPrintButton"
decl_stmt|;
DECL|field|PREVIEW_1
specifier|public
specifier|static
specifier|final
name|String
name|PREVIEW_1
init|=
literal|"preview1"
decl_stmt|;
DECL|field|PREVIEW_0
specifier|public
specifier|static
specifier|final
name|String
name|PREVIEW_0
init|=
literal|"preview0"
decl_stmt|;
DECL|field|ACTIVE_PREVIEW
specifier|public
specifier|static
specifier|final
name|String
name|ACTIVE_PREVIEW
init|=
literal|"activePreview"
decl_stmt|;
DECL|field|PREVIEW_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|PREVIEW_ENABLED
init|=
literal|"previewEnabled"
decl_stmt|;
DECL|field|CUSTOM_EXPORT_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_EXPORT_FORMAT
init|=
literal|"customExportFormat"
decl_stmt|;
DECL|field|CUSTOM_IMPORT_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_IMPORT_FORMAT
init|=
literal|"customImportFormat"
decl_stmt|;
DECL|field|PSVIEWER
specifier|public
specifier|static
specifier|final
name|String
name|PSVIEWER
init|=
literal|"psviewer"
decl_stmt|;
DECL|field|PDFVIEWER
specifier|public
specifier|static
specifier|final
name|String
name|PDFVIEWER
init|=
literal|"pdfviewer"
decl_stmt|;
DECL|field|BINDINGS
specifier|public
specifier|static
specifier|final
name|String
name|BINDINGS
init|=
literal|"bindings"
decl_stmt|;
DECL|field|BIND_NAMES
specifier|public
specifier|static
specifier|final
name|String
name|BIND_NAMES
init|=
literal|"bindNames"
decl_stmt|;
DECL|field|MARKED_ENTRY_BACKGROUND
specifier|public
specifier|static
specifier|final
name|String
name|MARKED_ENTRY_BACKGROUND
init|=
literal|"markedEntryBackground"
decl_stmt|;
DECL|field|KEY_PATTERN_REGEX
specifier|public
specifier|static
specifier|final
name|String
name|KEY_PATTERN_REGEX
init|=
literal|"KeyPatternRegex"
decl_stmt|;
DECL|field|KEY_PATTERN_REPLACEMENT
specifier|public
specifier|static
specifier|final
name|String
name|KEY_PATTERN_REPLACEMENT
init|=
literal|"KeyPatternReplacement"
decl_stmt|;
comment|// Currently, it is not possible to specify defaults for specific entry types
comment|// When this should be made possible, the code to inspect is net.sf.jabref.gui.preftabs.LabelPatternPrefTab.storeSettings() -> LabelPattern keypatterns = getLabelPattern(); etc
DECL|field|DEFAULT_LABEL_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_LABEL_PATTERN
init|=
literal|"defaultLabelPattern"
decl_stmt|;
DECL|field|SEARCH_MODE_FLOAT
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_MODE_FLOAT
init|=
literal|"floatSearch"
decl_stmt|;
DECL|field|GRAY_OUT_NON_HITS
specifier|public
specifier|static
specifier|final
name|String
name|GRAY_OUT_NON_HITS
init|=
literal|"grayOutNonHits"
decl_stmt|;
DECL|field|CONFIRM_DELETE
specifier|public
specifier|static
specifier|final
name|String
name|CONFIRM_DELETE
init|=
literal|"confirmDelete"
decl_stmt|;
DECL|field|WARN_BEFORE_OVERWRITING_KEY
specifier|public
specifier|static
specifier|final
name|String
name|WARN_BEFORE_OVERWRITING_KEY
init|=
literal|"warnBeforeOverwritingKey"
decl_stmt|;
DECL|field|AVOID_OVERWRITING_KEY
specifier|public
specifier|static
specifier|final
name|String
name|AVOID_OVERWRITING_KEY
init|=
literal|"avoidOverwritingKey"
decl_stmt|;
DECL|field|DISPLAY_KEY_WARNING_DIALOG_AT_STARTUP
specifier|public
specifier|static
specifier|final
name|String
name|DISPLAY_KEY_WARNING_DIALOG_AT_STARTUP
init|=
literal|"displayKeyWarningDialogAtStartup"
decl_stmt|;
DECL|field|DIALOG_WARNING_FOR_EMPTY_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DIALOG_WARNING_FOR_EMPTY_KEY
init|=
literal|"dialogWarningForEmptyKey"
decl_stmt|;
DECL|field|DIALOG_WARNING_FOR_DUPLICATE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DIALOG_WARNING_FOR_DUPLICATE_KEY
init|=
literal|"dialogWarningForDuplicateKey"
decl_stmt|;
DECL|field|ALLOW_TABLE_EDITING
specifier|public
specifier|static
specifier|final
name|String
name|ALLOW_TABLE_EDITING
init|=
literal|"allowTableEditing"
decl_stmt|;
DECL|field|OVERWRITE_OWNER
specifier|public
specifier|static
specifier|final
name|String
name|OVERWRITE_OWNER
init|=
literal|"overwriteOwner"
decl_stmt|;
DECL|field|USE_OWNER
specifier|public
specifier|static
specifier|final
name|String
name|USE_OWNER
init|=
literal|"useOwner"
decl_stmt|;
DECL|field|AUTOLINK_EXACT_KEY_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|AUTOLINK_EXACT_KEY_ONLY
init|=
literal|"autolinkExactKeyOnly"
decl_stmt|;
DECL|field|SHOW_FILE_LINKS_UPGRADE_WARNING
specifier|public
specifier|static
specifier|final
name|String
name|SHOW_FILE_LINKS_UPGRADE_WARNING
init|=
literal|"showFileLinksUpgradeWarning"
decl_stmt|;
DECL|field|SEARCH_DIALOG_HEIGHT
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_DIALOG_HEIGHT
init|=
literal|"searchDialogHeight"
decl_stmt|;
DECL|field|SEARCH_DIALOG_WIDTH
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_DIALOG_WIDTH
init|=
literal|"searchDialogWidth"
decl_stmt|;
DECL|field|IMPORT_INSPECTION_DIALOG_HEIGHT
specifier|public
specifier|static
specifier|final
name|String
name|IMPORT_INSPECTION_DIALOG_HEIGHT
init|=
literal|"importInspectionDialogHeight"
decl_stmt|;
DECL|field|IMPORT_INSPECTION_DIALOG_WIDTH
specifier|public
specifier|static
specifier|final
name|String
name|IMPORT_INSPECTION_DIALOG_WIDTH
init|=
literal|"importInspectionDialogWidth"
decl_stmt|;
DECL|field|SIDE_PANE_WIDTH
specifier|public
specifier|static
specifier|final
name|String
name|SIDE_PANE_WIDTH
init|=
literal|"sidePaneWidth"
decl_stmt|;
DECL|field|LAST_USED_EXPORT
specifier|public
specifier|static
specifier|final
name|String
name|LAST_USED_EXPORT
init|=
literal|"lastUsedExport"
decl_stmt|;
DECL|field|LAST_USED_IMPORT
specifier|public
specifier|static
specifier|final
name|String
name|LAST_USED_IMPORT
init|=
literal|"lastUsedImport"
decl_stmt|;
DECL|field|FLOAT_MARKED_ENTRIES
specifier|public
specifier|static
specifier|final
name|String
name|FLOAT_MARKED_ENTRIES
init|=
literal|"floatMarkedEntries"
decl_stmt|;
DECL|field|CITE_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|CITE_COMMAND
init|=
literal|"citeCommand"
decl_stmt|;
DECL|field|EXTERNAL_JOURNAL_LISTS
specifier|public
specifier|static
specifier|final
name|String
name|EXTERNAL_JOURNAL_LISTS
init|=
literal|"externalJournalLists"
decl_stmt|;
DECL|field|PERSONAL_JOURNAL_LIST
specifier|public
specifier|static
specifier|final
name|String
name|PERSONAL_JOURNAL_LIST
init|=
literal|"personalJournalList"
decl_stmt|;
DECL|field|GENERATE_KEYS_BEFORE_SAVING
specifier|public
specifier|static
specifier|final
name|String
name|GENERATE_KEYS_BEFORE_SAVING
init|=
literal|"generateKeysBeforeSaving"
decl_stmt|;
DECL|field|EMAIL_SUBJECT
specifier|public
specifier|static
specifier|final
name|String
name|EMAIL_SUBJECT
init|=
literal|"emailSubject"
decl_stmt|;
DECL|field|OPEN_FOLDERS_OF_ATTACHED_FILES
specifier|public
specifier|static
specifier|final
name|String
name|OPEN_FOLDERS_OF_ATTACHED_FILES
init|=
literal|"openFoldersOfAttachedFiles"
decl_stmt|;
DECL|field|KEY_GEN_ALWAYS_ADD_LETTER
specifier|public
specifier|static
specifier|final
name|String
name|KEY_GEN_ALWAYS_ADD_LETTER
init|=
literal|"keyGenAlwaysAddLetter"
decl_stmt|;
DECL|field|KEY_GEN_FIRST_LETTER_A
specifier|public
specifier|static
specifier|final
name|String
name|KEY_GEN_FIRST_LETTER_A
init|=
literal|"keyGenFirstLetterA"
decl_stmt|;
DECL|field|VALUE_DELIMITERS2
specifier|public
specifier|static
specifier|final
name|String
name|VALUE_DELIMITERS2
init|=
literal|"valueDelimiters"
decl_stmt|;
DECL|field|ENFORCE_LEGAL_BIBTEX_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ENFORCE_LEGAL_BIBTEX_KEY
init|=
literal|"enforceLegalBibtexKey"
decl_stmt|;
DECL|field|PROMPT_BEFORE_USING_AUTOSAVE
specifier|public
specifier|static
specifier|final
name|String
name|PROMPT_BEFORE_USING_AUTOSAVE
init|=
literal|"promptBeforeUsingAutosave"
decl_stmt|;
DECL|field|AUTO_SAVE_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_SAVE_INTERVAL
init|=
literal|"autoSaveInterval"
decl_stmt|;
DECL|field|AUTO_SAVE
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_SAVE
init|=
literal|"autoSave"
decl_stmt|;
DECL|field|USE_LOCK_FILES
specifier|public
specifier|static
specifier|final
name|String
name|USE_LOCK_FILES
init|=
literal|"useLockFiles"
decl_stmt|;
DECL|field|RUN_AUTOMATIC_FILE_SEARCH
specifier|public
specifier|static
specifier|final
name|String
name|RUN_AUTOMATIC_FILE_SEARCH
init|=
literal|"runAutomaticFileSearch"
decl_stmt|;
DECL|field|NUMERIC_FIELDS
specifier|public
specifier|static
specifier|final
name|String
name|NUMERIC_FIELDS
init|=
literal|"numericFields"
decl_stmt|;
DECL|field|DEFAULT_REG_EXP_SEARCH_EXPRESSION_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_REG_EXP_SEARCH_EXPRESSION_KEY
init|=
literal|"defaultRegExpSearchExpression"
decl_stmt|;
DECL|field|REG_EXP_SEARCH_EXPRESSION_KEY
specifier|public
specifier|static
specifier|final
name|String
name|REG_EXP_SEARCH_EXPRESSION_KEY
init|=
literal|"regExpSearchExpression"
decl_stmt|;
DECL|field|AUTOLINK_USE_REG_EXP_SEARCH_KEY
specifier|public
specifier|static
specifier|final
name|String
name|AUTOLINK_USE_REG_EXP_SEARCH_KEY
init|=
literal|"useRegExpSearch"
decl_stmt|;
DECL|field|DB_CONNECT_USERNAME
specifier|public
specifier|static
specifier|final
name|String
name|DB_CONNECT_USERNAME
init|=
literal|"dbConnectUsername"
decl_stmt|;
DECL|field|DB_CONNECT_DATABASE
specifier|public
specifier|static
specifier|final
name|String
name|DB_CONNECT_DATABASE
init|=
literal|"dbConnectDatabase"
decl_stmt|;
DECL|field|DB_CONNECT_HOSTNAME
specifier|public
specifier|static
specifier|final
name|String
name|DB_CONNECT_HOSTNAME
init|=
literal|"dbConnectHostname"
decl_stmt|;
DECL|field|DB_CONNECT_SERVER_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|DB_CONNECT_SERVER_TYPE
init|=
literal|"dbConnectServerType"
decl_stmt|;
DECL|field|BIB_LOC_AS_PRIMARY_DIR
specifier|public
specifier|static
specifier|final
name|String
name|BIB_LOC_AS_PRIMARY_DIR
init|=
literal|"bibLocAsPrimaryDir"
decl_stmt|;
DECL|field|SELECTED_FETCHER_INDEX
specifier|public
specifier|static
specifier|final
name|String
name|SELECTED_FETCHER_INDEX
init|=
literal|"selectedFetcherIndex"
decl_stmt|;
DECL|field|WEB_SEARCH_VISIBLE
specifier|public
specifier|static
specifier|final
name|String
name|WEB_SEARCH_VISIBLE
init|=
literal|"webSearchVisible"
decl_stmt|;
DECL|field|ALLOW_FILE_AUTO_OPEN_BROWSE
specifier|public
specifier|static
specifier|final
name|String
name|ALLOW_FILE_AUTO_OPEN_BROWSE
init|=
literal|"allowFileAutoOpenBrowse"
decl_stmt|;
DECL|field|CUSTOM_TAB_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_TAB_NAME
init|=
literal|"customTabName_"
decl_stmt|;
DECL|field|CUSTOM_TAB_FIELDS
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_TAB_FIELDS
init|=
literal|"customTabFields_"
decl_stmt|;
DECL|field|USER_FILE_DIR_INDIVIDUAL
specifier|public
specifier|static
specifier|final
name|String
name|USER_FILE_DIR_INDIVIDUAL
init|=
literal|"userFileDirIndividual"
decl_stmt|;
DECL|field|USER_FILE_DIR_IND_LEGACY
specifier|public
specifier|static
specifier|final
name|String
name|USER_FILE_DIR_IND_LEGACY
init|=
literal|"userFileDirInd_Legacy"
decl_stmt|;
DECL|field|USER_FILE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|USER_FILE_DIR
init|=
literal|"userFileDir"
decl_stmt|;
DECL|field|USE_UNIT_FORMATTER_ON_SEARCH
specifier|public
specifier|static
specifier|final
name|String
name|USE_UNIT_FORMATTER_ON_SEARCH
init|=
literal|"useUnitFormatterOnSearch"
decl_stmt|;
DECL|field|USE_CASE_KEEPER_ON_SEARCH
specifier|public
specifier|static
specifier|final
name|String
name|USE_CASE_KEEPER_ON_SEARCH
init|=
literal|"useCaseKeeperOnSearch"
decl_stmt|;
DECL|field|USE_CONVERT_TO_EQUATION
specifier|public
specifier|static
specifier|final
name|String
name|USE_CONVERT_TO_EQUATION
init|=
literal|"useConvertToEquation"
decl_stmt|;
DECL|field|USE_IEEE_ABRV
specifier|public
specifier|static
specifier|final
name|String
name|USE_IEEE_ABRV
init|=
literal|"useIEEEAbrv"
decl_stmt|;
DECL|field|AKS_AUTO_NAMING_PDFS_AGAIN
specifier|public
specifier|static
specifier|final
name|String
name|AKS_AUTO_NAMING_PDFS_AGAIN
init|=
literal|"AskAutoNamingPDFsAgain"
decl_stmt|;
DECL|field|CLEANUP_DOI
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_DOI
init|=
literal|"CleanUpDOI"
decl_stmt|;
DECL|field|CLEANUP_MONTH
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_MONTH
init|=
literal|"CleanUpMonth"
decl_stmt|;
DECL|field|CLEANUP_PAGE_NUMBERS
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_PAGE_NUMBERS
init|=
literal|"CleanUpPageNumbers"
decl_stmt|;
DECL|field|CLEANUP_DATE
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_DATE
init|=
literal|"CleanUpDate"
decl_stmt|;
DECL|field|CLEANUP_MAKE_PATHS_RELATIVE
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_MAKE_PATHS_RELATIVE
init|=
literal|"CleanUpMakePathsRelative"
decl_stmt|;
DECL|field|CLEANUP_RENAME_PDF
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_RENAME_PDF
init|=
literal|"CleanUpRenamePDF"
decl_stmt|;
DECL|field|CLEANUP_RENAME_PDF_ONLY_RELATIVE_PATHS
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_RENAME_PDF_ONLY_RELATIVE_PATHS
init|=
literal|"CleanUpRenamePDFonlyRelativePaths"
decl_stmt|;
DECL|field|CLEANUP_UPGRADE_EXTERNAL_LINKS
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_UPGRADE_EXTERNAL_LINKS
init|=
literal|"CleanUpUpgradeExternalLinks"
decl_stmt|;
DECL|field|CLEANUP_SUPERSCRIPTS
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_SUPERSCRIPTS
init|=
literal|"CleanUpSuperscripts"
decl_stmt|;
DECL|field|CLEANUP_HTML
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_HTML
init|=
literal|"CleanUpHTML"
decl_stmt|;
DECL|field|CLEANUP_CASE
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_CASE
init|=
literal|"CleanUpCase"
decl_stmt|;
DECL|field|CLEANUP_LATEX
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_LATEX
init|=
literal|"CleanUpLaTeX"
decl_stmt|;
DECL|field|CLEANUP_UNITS
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_UNITS
init|=
literal|"CleanUpUnits"
decl_stmt|;
DECL|field|CLEANUP_UNICODE
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_UNICODE
init|=
literal|"CleanUpUnicode"
decl_stmt|;
DECL|field|CLEANUP_CONVERT_TO_BIBLATEX
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_CONVERT_TO_BIBLATEX
init|=
literal|"CleanUpConvertToBiblatex"
decl_stmt|;
DECL|field|CLEANUP_FIX_FILE_LINKS
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_FIX_FILE_LINKS
init|=
literal|"CleanUpFixFileLinks"
decl_stmt|;
DECL|field|CLEANUP_DEFAULT_PRESET
specifier|public
specifier|static
specifier|final
name|CleanupPreset
name|CLEANUP_DEFAULT_PRESET
decl_stmt|;
static|static
block|{
name|EnumSet
argument_list|<
name|CleanupPreset
operator|.
name|CleanupStep
argument_list|>
name|deactivedJobs
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CLEAN_UP_UPGRADE_EXTERNAL_LINKS
argument_list|,
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|RENAME_PDF_ONLY_RELATIVE_PATHS
argument_list|,
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CONVERT_TO_BIBLATEX
argument_list|)
decl_stmt|;
name|CLEANUP_DEFAULT_PRESET
operator|=
operator|new
name|CleanupPreset
argument_list|(
name|EnumSet
operator|.
name|complementOf
argument_list|(
name|deactivedJobs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|PUSH_TO_APPLICATION
specifier|public
specifier|static
specifier|final
name|String
name|PUSH_TO_APPLICATION
init|=
literal|"pushToApplication"
decl_stmt|;
comment|// OpenOffice/LibreOffice preferences
DECL|field|OO_EXECUTABLE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|OO_EXECUTABLE_PATH
init|=
literal|"ooExecutablePath"
decl_stmt|;
DECL|field|OO_PATH
specifier|public
specifier|static
specifier|final
name|String
name|OO_PATH
init|=
literal|"ooPath"
decl_stmt|;
DECL|field|OO_JARS_PATH
specifier|public
specifier|static
specifier|final
name|String
name|OO_JARS_PATH
init|=
literal|"ooJarsPath"
decl_stmt|;
DECL|field|SHOW_OO_PANEL
specifier|public
specifier|static
specifier|final
name|String
name|SHOW_OO_PANEL
init|=
literal|"showOOPanel"
decl_stmt|;
DECL|field|SYNC_OO_WHEN_CITING
specifier|public
specifier|static
specifier|final
name|String
name|SYNC_OO_WHEN_CITING
init|=
literal|"syncOOWhenCiting"
decl_stmt|;
DECL|field|USE_ALL_OPEN_BASES
specifier|public
specifier|static
specifier|final
name|String
name|USE_ALL_OPEN_BASES
init|=
literal|"useAllOpenBases"
decl_stmt|;
DECL|field|OO_BIBLIOGRAPHY_STYLE_FILE
specifier|public
specifier|static
specifier|final
name|String
name|OO_BIBLIOGRAPHY_STYLE_FILE
init|=
literal|"ooBibliographyStyleFile"
decl_stmt|;
DECL|field|OO_USE_DEFAULT_AUTHORYEAR_STYLE
specifier|public
specifier|static
specifier|final
name|String
name|OO_USE_DEFAULT_AUTHORYEAR_STYLE
init|=
literal|"ooUseDefaultAuthoryearStyle"
decl_stmt|;
DECL|field|OO_USE_DEFAULT_NUMERICAL_STYLE
specifier|public
specifier|static
specifier|final
name|String
name|OO_USE_DEFAULT_NUMERICAL_STYLE
init|=
literal|"ooUseDefaultNumericalStyle"
decl_stmt|;
DECL|field|OO_CHOOSE_STYLE_DIRECTLY
specifier|public
specifier|static
specifier|final
name|String
name|OO_CHOOSE_STYLE_DIRECTLY
init|=
literal|"ooChooseStyleDirectly"
decl_stmt|;
DECL|field|OO_DIRECT_FILE
specifier|public
specifier|static
specifier|final
name|String
name|OO_DIRECT_FILE
init|=
literal|"ooDirectFile"
decl_stmt|;
DECL|field|OO_STYLE_DIRECTORY
specifier|public
specifier|static
specifier|final
name|String
name|OO_STYLE_DIRECTORY
init|=
literal|"ooStyleDirectory"
decl_stmt|;
comment|//non-default preferences
DECL|field|CUSTOM_TYPE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_TYPE_NAME
init|=
literal|"customTypeName_"
decl_stmt|;
DECL|field|CUSTOM_TYPE_REQ
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_TYPE_REQ
init|=
literal|"customTypeReq_"
decl_stmt|;
DECL|field|CUSTOM_TYPE_OPT
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_TYPE_OPT
init|=
literal|"customTypeOpt_"
decl_stmt|;
DECL|field|CUSTOM_TYPE_PRIOPT
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_TYPE_PRIOPT
init|=
literal|"customTypePriOpt_"
decl_stmt|;
DECL|field|VALUE_DELIMITERS
specifier|private
specifier|static
specifier|final
name|char
index|[]
index|[]
name|VALUE_DELIMITERS
init|=
operator|new
name|char
index|[]
index|[]
block|{
block|{
literal|'"'
block|,
literal|'"'
block|}
block|,
block|{
literal|'{'
block|,
literal|'}'
block|}
block|}
decl_stmt|;
DECL|field|WRAPPED_USERNAME
specifier|public
name|String
name|WRAPPED_USERNAME
decl_stmt|;
DECL|field|MARKING_WITH_NUMBER_PATTERN
specifier|public
specifier|final
name|String
name|MARKING_WITH_NUMBER_PATTERN
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|Preferences
name|prefs
decl_stmt|;
DECL|field|putBracesAroundCapitalsFields
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|putBracesAroundCapitalsFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
DECL|field|nonWrappableFields
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nonWrappableFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
DECL|field|keyPattern
specifier|private
name|GlobalLabelPattern
name|keyPattern
decl_stmt|;
comment|// Object containing custom export formats:
DECL|field|customExports
specifier|public
specifier|final
name|CustomExportList
name|customExports
decl_stmt|;
comment|// Helper string
DECL|field|USER_HOME
specifier|private
specifier|static
specifier|final
name|String
name|USER_HOME
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
decl_stmt|;
comment|/**      * Set with all custom {@link ImportFormat}s      */
DECL|field|customImports
specifier|public
specifier|final
name|CustomImportList
name|customImports
decl_stmt|;
comment|// Object containing info about customized entry editor tabs.
DECL|field|tabList
specifier|private
name|EntryEditorTabList
name|tabList
decl_stmt|;
comment|// The following field is used as a global variable during the export of a database.
comment|// By setting this field to the path of the database's default file directory, formatters
comment|// that should resolve external file paths can access this field. This is an ugly hack
comment|// to solve the problem of formatters not having access to any context except for the
comment|// string to be formatted and possible formatter arguments.
DECL|field|fileDirForDatabase
specifier|public
name|String
index|[]
name|fileDirForDatabase
decl_stmt|;
comment|// Similarly to the previous variable, this is a global that can be used during
comment|// the export of a database if the database filename should be output. If a database
comment|// is tied to a file on disk, this variable is set to that file before export starts:
DECL|field|databaseFile
specifier|public
name|File
name|databaseFile
decl_stmt|;
comment|// The following field is used as a global variable during the export of a database.
comment|// It is used to hold custom name formatters defined by a custom export filter.
comment|// It is set before the export starts:
DECL|field|customExportNameFormatters
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|customExportNameFormatters
decl_stmt|;
comment|// The only instance of this class:
DECL|field|singleton
specifier|private
specifier|static
name|JabRefPreferences
name|singleton
decl_stmt|;
DECL|method|getInstance ()
specifier|public
specifier|static
name|JabRefPreferences
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|JabRefPreferences
operator|.
name|singleton
operator|==
literal|null
condition|)
block|{
name|JabRefPreferences
operator|.
name|singleton
operator|=
operator|new
name|JabRefPreferences
argument_list|()
expr_stmt|;
block|}
return|return
name|JabRefPreferences
operator|.
name|singleton
return|;
block|}
comment|// The constructor is made private to enforce this as a singleton class:
DECL|method|JabRefPreferences ()
specifier|private
name|JabRefPreferences
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
literal|"jabref.xml"
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|importPreferences
argument_list|(
literal|"jabref.xml"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JabRefException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not import preferences from jabref.xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// load user preferences
name|prefs
operator|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|JabRef
operator|.
name|class
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TEXMAKER_PATH
argument_list|,
name|OS
operator|.
name|guessProgramPath
argument_list|(
literal|"texmaker"
argument_list|,
literal|"Texmaker"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WIN_EDT_PATH
argument_list|,
name|OS
operator|.
name|guessProgramPath
argument_list|(
literal|"WinEdt"
argument_list|,
literal|"WinEdt Team\\WinEdt"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|LATEX_EDITOR_PATH
argument_list|,
name|OS
operator|.
name|guessProgramPath
argument_list|(
literal|"LEd"
argument_list|,
literal|"LEd"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TEXSTUDIO_PATH
argument_list|,
name|OS
operator|.
name|guessProgramPath
argument_list|(
literal|"texstudio"
argument_list|,
literal|"TeXstudio"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|BIBLATEX_DEFAULT_MODE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
comment|//defaults.put(JabRefPreferences.PDFVIEWER, "/Applications/Preview.app");
comment|//defaults.put(JabRefPreferences.PSVIEWER, "/Applications/Preview.app");
comment|//defaults.put("htmlviewer", "/Applications/Safari.app");
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_PATH
argument_list|,
literal|"emacsclient"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_23
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_ADDITIONAL_PARAMETERS
argument_list|,
literal|"-n -e"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FONT_FAMILY
argument_list|,
literal|"SansSerif"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WIN_LOOK_AND_FEEL
argument_list|,
name|UIManager
operator|.
name|getSystemLookAndFeelClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
comment|//defaults.put(JabRefPreferences.PDFVIEWER, "cmd.exe /c start /b");
comment|//defaults.put(JabRefPreferences.PSVIEWER, "cmd.exe /c start /b");
comment|//defaults.put("htmlviewer", "cmd.exe /c start /b");
name|defaults
operator|.
name|put
argument_list|(
name|WIN_LOOK_AND_FEEL
argument_list|,
literal|"com.jgoodies.looks.windows.WindowsLookAndFeel"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_PATH
argument_list|,
literal|"emacsclient.exe"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_23
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_ADDITIONAL_PARAMETERS
argument_list|,
literal|"-n -e"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FONT_FAMILY
argument_list|,
literal|"Arial"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//defaults.put(JabRefPreferences.PDFVIEWER, "evince");
comment|//defaults.put(JabRefPreferences.PSVIEWER, "gv");
comment|//defaults.put("htmlviewer", "firefox");
name|defaults
operator|.
name|put
argument_list|(
name|WIN_LOOK_AND_FEEL
argument_list|,
literal|"com.jgoodies.plaf.plastic.Plastic3DLookAndFeel"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FONT_FAMILY
argument_list|,
literal|"SansSerif"
argument_list|)
expr_stmt|;
comment|// linux
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_PATH
argument_list|,
literal|"gnuclient"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_23
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_ADDITIONAL_PARAMETERS
argument_list|,
literal|"-batch -eval"
argument_list|)
expr_stmt|;
block|}
name|defaults
operator|.
name|put
argument_list|(
name|PUSH_TO_APPLICATION
argument_list|,
literal|"TeXstudio"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|RECENT_FILES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXTERNAL_FILE_TYPES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|KEY_PATTERN_REGEX
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|KEY_PATTERN_REPLACEMENT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Proxy
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_USE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_HOSTNAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_PORT
argument_list|,
literal|"80"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_USE_AUTHENTICATION
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_USERNAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_PASSWORD
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_DEFAULT_LOOK_AND_FEEL
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|LYXPIPE
argument_list|,
name|USER_HOME
operator|+
name|File
operator|.
name|separator
operator|+
literal|".lyx/lyxpipe"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|VIM
argument_list|,
literal|"vim"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|VIM_SERVER
argument_list|,
literal|"vim"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|POS_X
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|POS_Y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SIZE_X
argument_list|,
literal|840
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SIZE_Y
argument_list|,
literal|680
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WINDOW_MAXIMISED
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTO_RESIZE_MODE
argument_list|,
name|JTable
operator|.
name|AUTO_RESIZE_ALL_COLUMNS
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREVIEW_PANEL_HEIGHT
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ENTRY_EDITOR_HEIGHT
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_COLOR_CODES_ON
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|NAMES_AS_IS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// "Show names unchanged"
name|defaults
operator|.
name|put
argument_list|(
name|NAMES_FIRST_LAST
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// "Show 'Firstname Lastname'"
name|defaults
operator|.
name|put
argument_list|(
name|NAMES_NATBIB
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// "Natbib style"
name|defaults
operator|.
name|put
argument_list|(
name|ABBR_AUTHOR_NAMES
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// "Abbreviate names"
name|defaults
operator|.
name|put
argument_list|(
name|NAMES_LAST_ONLY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// "Show last names only"
comment|// system locale as default
name|defaults
operator|.
name|put
argument_list|(
name|LANGUAGE
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sorting preferences
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_PRIMARY_SORT_FIELD
argument_list|,
literal|"author"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_PRIMARY_SORT_DESCENDING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_SECONDARY_SORT_FIELD
argument_list|,
literal|"year"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_SECONDARY_SORT_DESCENDING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_TERTIARY_SORT_FIELD
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_TERTIARY_SORT_DESCENDING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|REFORMAT_FILE_ON_SAVE_AND_EXPORT
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// export order
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_IN_ORIGINAL_ORDER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_IN_SPECIFIED_ORDER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// export order: if EXPORT_IN_SPECIFIED_ORDER, then use following criteria
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_PRIMARY_SORT_FIELD
argument_list|,
literal|"bibtexkey"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_PRIMARY_SORT_DESCENDING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_SECONDARY_SORT_FIELD
argument_list|,
literal|"author"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_SECONDARY_SORT_DESCENDING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_TERTIARY_SORT_FIELD
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_TERTIARY_SORT_DESCENDING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|NEWLINE
argument_list|,
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SIDE_PANE_COMPONENT_NAMES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SIDE_PANE_COMPONENT_PREFERRED_POSITIONS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|COLUMN_NAMES
argument_list|,
literal|"entrytype;author/editor;title;year;journal/booktitle;bibtexkey"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|COLUMN_WIDTHS
argument_list|,
literal|"75;300;470;60;130;100"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PersistenceTableColumnListener
operator|.
name|ACTIVATE_PREF_KEY
argument_list|,
name|PersistenceTableColumnListener
operator|.
name|DEFAULT_ENABLED
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|XMP_PRIVACY_FILTERS
argument_list|,
literal|"pdf;timestamp;keywords;owner;note;review"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_XMP_PRIVACY_FILTER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|NUMBER_COL_WIDTH
argument_list|,
name|GUIGlobals
operator|.
name|NUMBER_COL_LENGTH
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WORKING_DIRECTORY
argument_list|,
name|USER_HOME
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_WORKING_DIRECTORY
argument_list|,
name|USER_HOME
argument_list|)
expr_stmt|;
comment|// Remembers working directory of last import
name|defaults
operator|.
name|put
argument_list|(
name|IMPORT_WORKING_DIRECTORY
argument_list|,
name|USER_HOME
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FILE_WORKING_DIRECTORY
argument_list|,
name|USER_HOME
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTO_OPEN_FORM
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ENTRY_TYPE_FORM_HEIGHT_FACTOR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ENTRY_TYPE_FORM_WIDTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|BACKUP
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OPEN_LAST_EDITED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|LAST_EDITED
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|LAST_FOCUSED
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STRINGS_POS_X
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STRINGS_POS_Y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STRINGS_SIZE_X
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STRINGS_SIZE_Y
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DUPLICATES_POS_X
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DUPLICATES_POS_Y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DUPLICATES_SIZE_X
argument_list|,
literal|800
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DUPLICATES_SIZE_Y
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MERGEENTRIES_POS_X
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MERGEENTRIES_POS_Y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MERGEENTRIES_SIZE_X
argument_list|,
literal|800
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MERGEENTRIES_SIZE_Y
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_SHOW_SOURCE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_AUTO_SORT
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SEARCH_CASE_SENSITIVE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SEARCH_MODE_FILTER
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SEARCH_REG_EXP
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SEARCH_PANE_POS_X
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SEARCH_PANE_POS_Y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EDITOR_EMACS_KEYBINDINGS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EDITOR_EMACS_KEYBINDINGS_REBIND_CA
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EDITOR_EMACS_KEYBINDINGS_REBIND_CF
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTO_COMPLETE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|AutoCompletePreferences
operator|.
name|putDefaults
argument_list|(
name|defaults
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_FLOAT_SELECTIONS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_INTERSECT_SELECTIONS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_INVERT_SELECTIONS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_SHOW_OVERLAPPING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_SELECT_MATCHES
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUPS_DEFAULT_FIELD
argument_list|,
literal|"keywords"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_SHOW_ICONS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_SHOW_DYNAMIC
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_EXPAND_TREE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_AUTO_SHOW
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_AUTO_HIDE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_SHOW_NUMBER_OF_ELEMENTS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTO_ASSIGN_GROUP
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_KEYWORD_SEPARATOR
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EDIT_GROUP_MEMBERSHIP_MODE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|HIGHLIGHT_GROUPS_MATCHING_ANY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|HIGHLIGHT_GROUPS_MATCHING_ALL
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TOOLBAR_VISIBLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_ENCODING
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUPS_VISIBLE_ROWS
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_OWNER
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MEMORY_STICK_MODE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|RENAME_ON_MOVE_FILE_TO_FILE_DIR
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// The general fields stuff is made obsolete by the CUSTOM_TAB_... entries.
name|defaults
operator|.
name|put
argument_list|(
name|GENERAL_FIELDS
argument_list|,
literal|"crossref;keywords;file;doi;url;urldate;"
operator|+
literal|"pdf;comment;owner"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FONT_STYLE
argument_list|,
name|java
operator|.
name|awt
operator|.
name|Font
operator|.
name|PLAIN
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FONT_SIZE
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OVERRIDE_DEFAULT_FONTS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MENU_FONT_SIZE
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_ROW_PADDING
argument_list|,
name|GUIGlobals
operator|.
name|TABLE_ROW_PADDING
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_SHOW_GRID
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// Main table color settings:
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_BACKGROUND
argument_list|,
literal|"255:255:255"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_REQ_FIELD_BACKGROUND
argument_list|,
literal|"230:235:255"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_OPT_FIELD_BACKGROUND
argument_list|,
literal|"230:255:230"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TABLE_TEXT
argument_list|,
literal|"0:0:0"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GRID_COLOR
argument_list|,
literal|"210:210:210"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GRAYED_OUT_BACKGROUND
argument_list|,
literal|"210:210:210"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GRAYED_OUT_TEXT
argument_list|,
literal|"40:40:40"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|VERY_GRAYED_OUT_BACKGROUND
argument_list|,
literal|"180:180:180"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|VERY_GRAYED_OUT_TEXT
argument_list|,
literal|"40:40:40"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MARKED_ENTRY_BACKGROUND0
argument_list|,
literal|"255:255:180"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MARKED_ENTRY_BACKGROUND1
argument_list|,
literal|"255:220:180"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MARKED_ENTRY_BACKGROUND2
argument_list|,
literal|"255:180:160"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MARKED_ENTRY_BACKGROUND3
argument_list|,
literal|"255:120:120"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MARKED_ENTRY_BACKGROUND4
argument_list|,
literal|"255:75:75"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MARKED_ENTRY_BACKGROUND5
argument_list|,
literal|"220:255:220"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|VALID_FIELD_BACKGROUND_COLOR
argument_list|,
literal|"255:255:255"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|INVALID_FIELD_BACKGROUND_COLOR
argument_list|,
literal|"255:0:0"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ACTIVE_FIELD_EDITOR_BACKGROUND_COLOR
argument_list|,
literal|"220:220:255"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FIELD_EDITOR_TEXT_COLOR
argument_list|,
literal|"0:0:0"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|INCOMPLETE_ENTRY_BACKGROUND
argument_list|,
literal|"250:175:175"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CTRL_CLICK
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DISABLE_ON_MULTIPLE_SELECTION
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|URL_COLUMN
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREFER_URL_DOI
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FILE_COLUMN
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ARXIV_COLUMN
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXTRA_FILE_COLUMNS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|LIST_OF_FILE_COLUMNS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SPECIALFIELDSENABLED
argument_list|,
name|SpecialFieldsUtils
operator|.
name|PREF_SPECIALFIELDSENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRIORITY
argument_list|,
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRIORITY_DEFAULT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_QUALITY
argument_list|,
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_QUALITY_DEFAULT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RANKING
argument_list|,
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RANKING_DEFAULT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RELEVANCE
argument_list|,
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RELEVANCE_DEFAULT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRINTED
argument_list|,
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRINTED_DEFAULT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_READ
argument_list|,
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_READ_DEFAULT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_AUTOSYNCSPECIALFIELDSTOKEYWORDS
argument_list|,
name|SpecialFieldsUtils
operator|.
name|PREF_AUTOSYNCSPECIALFIELDSTOKEYWORDS_DEFAULT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SERIALIZESPECIALFIELDS
argument_list|,
name|SpecialFieldsUtils
operator|.
name|PREF_SERIALIZESPECIALFIELDS_DEFAULT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_OWNER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OVERWRITE_OWNER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ALLOW_TABLE_EDITING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DIALOG_WARNING_FOR_DUPLICATE_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DIALOG_WARNING_FOR_EMPTY_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DISPLAY_KEY_WARNING_DIALOG_AT_STARTUP
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AVOID_OVERWRITING_KEY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WARN_BEFORE_OVERWRITING_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CONFIRM_DELETE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GRAY_OUT_NON_HITS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SEARCH_MODE_FLOAT
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_LABEL_PATTERN
argument_list|,
literal|"[authors3][year]"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREVIEW_ENABLED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ACTIVE_PREVIEW
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREVIEW_0
argument_list|,
literal|"<font face=\"arial\">"
operator|+
literal|"<b><i>\\bibtextype</i><a name=\"\\bibtexkey\">\\begin{bibtexkey} (\\bibtexkey)</a>"
operator|+
literal|"\\end{bibtexkey}</b><br>__NEWLINE__"
operator|+
literal|"\\begin{author} \\format[Authors(LastFirst,Initials,Semicolon,Amp),HTMLChars]{\\author}<BR>\\end{author}__NEWLINE__"
operator|+
literal|"\\begin{editor} \\format[Authors(LastFirst,Initials,Semicolon,Amp),HTMLChars]{\\editor} "
operator|+
literal|"<i>(\\format[IfPlural(Eds.,Ed.)]{\\editor})</i><BR>\\end{editor}__NEWLINE__"
operator|+
literal|"\\begin{title} \\format[HTMLChars]{\\title} \\end{title}<BR>__NEWLINE__"
operator|+
literal|"\\begin{chapter} \\format[HTMLChars]{\\chapter}<BR>\\end{chapter}__NEWLINE__"
operator|+
literal|"\\begin{journal}<em>\\format[HTMLChars]{\\journal},</em>\\end{journal}__NEWLINE__"
comment|// Include the booktitle field for @inproceedings, @proceedings, etc.
operator|+
literal|"\\begin{booktitle}<em>\\format[HTMLChars]{\\booktitle},</em>\\end{booktitle}__NEWLINE__"
operator|+
literal|"\\begin{school}<em>\\format[HTMLChars]{\\school},</em>\\end{school}__NEWLINE__"
operator|+
literal|"\\begin{institution}<em>\\format[HTMLChars]{\\institution},</em>\\end{institution}__NEWLINE__"
operator|+
literal|"\\begin{publisher}<em>\\format[HTMLChars]{\\publisher},</em>\\end{publisher}__NEWLINE__"
operator|+
literal|"\\begin{year}<b>\\year</b>\\end{year}\\begin{volume}<i>, \\volume</i>\\end{volume}"
operator|+
literal|"\\begin{pages}, \\format[FormatPagesForHTML]{\\pages} \\end{pages}__NEWLINE__"
operator|+
literal|"\\begin{abstract}<BR><BR><b>Abstract:</b> \\format[HTMLChars]{\\abstract} \\end{abstract}__NEWLINE__"
operator|+
literal|"\\begin{review}<BR><BR><b>Review:</b> \\format[HTMLChars]{\\review} \\end{review}"
operator|+
literal|"</dd>__NEWLINE__<p></p></font>"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREVIEW_1
argument_list|,
literal|"<font face=\"arial\">"
operator|+
literal|"<b><i>\\bibtextype</i><a name=\"\\bibtexkey\">\\begin{bibtexkey} (\\bibtexkey)</a>"
operator|+
literal|"\\end{bibtexkey}</b><br>__NEWLINE__"
operator|+
literal|"\\begin{author} \\format[Authors(LastFirst,Initials,Semicolon,Amp),HTMLChars]{\\author}<BR>\\end{author}__NEWLINE__"
operator|+
literal|"\\begin{editor} \\format[Authors(LastFirst,Initials,Semicolon,Amp),HTMLChars]{\\editor} "
operator|+
literal|"<i>(\\format[IfPlural(Eds.,Ed.)]{\\editor})</i><BR>\\end{editor}__NEWLINE__"
operator|+
literal|"\\begin{title} \\format[HTMLChars]{\\title} \\end{title}<BR>__NEWLINE__"
operator|+
literal|"\\begin{chapter} \\format[HTMLChars]{\\chapter}<BR>\\end{chapter}__NEWLINE__"
operator|+
literal|"\\begin{journal}<em>\\format[HTMLChars]{\\journal},</em>\\end{journal}__NEWLINE__"
comment|// Include the booktitle field for @inproceedings, @proceedings, etc.
operator|+
literal|"\\begin{booktitle}<em>\\format[HTMLChars]{\\booktitle},</em>\\end{booktitle}__NEWLINE__"
operator|+
literal|"\\begin{school}<em>\\format[HTMLChars]{\\school},</em>\\end{school}__NEWLINE__"
operator|+
literal|"\\begin{institution}<em>\\format[HTMLChars]{\\institution},</em>\\end{institution}__NEWLINE__"
operator|+
literal|"\\begin{publisher}<em>\\format[HTMLChars]{\\publisher},</em>\\end{publisher}__NEWLINE__"
operator|+
literal|"\\begin{year}<b>\\year</b>\\end{year}\\begin{volume}<i>, \\volume</i>\\end{volume}"
operator|+
literal|"\\begin{pages}, \\format[FormatPagesForHTML]{\\pages} \\end{pages}"
operator|+
literal|"</dd>__NEWLINE__<p></p></font>"
argument_list|)
expr_stmt|;
comment|// TODO: Currently not possible to edit this setting:
name|defaults
operator|.
name|put
argument_list|(
name|PREVIEW_PRINT_BUTTON
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DO_NOT_RESOLVE_STRINGS_FOR
argument_list|,
literal|"url"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|RESOLVE_STRINGS_ALL_FIELDS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PUT_BRACES_AROUND_CAPITALS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|//"title;journal;booktitle;review;abstract");
name|defaults
operator|.
name|put
argument_list|(
name|NON_WRAPPABLE_FIELDS
argument_list|,
literal|"pdf;ps;url;doi;file"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GENERATE_KEYS_AFTER_INSPECTION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MARK_IMPORTED_ENTRIES
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|UNMARK_ALL_ENTRIES_BEFORE_IMPORTING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WARN_ABOUT_DUPLICATES_IN_INSPECTION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_TIME_STAMP
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OVERWRITE_TIME_STAMP
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// default time stamp follows ISO-8601. Reason: https://xkcd.com/1179/
name|defaults
operator|.
name|put
argument_list|(
name|TIME_STAMP_FORMAT
argument_list|,
literal|"yyyy-MM-dd"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TIME_STAMP_FIELD
argument_list|,
name|InternalBibtexFields
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|UPDATE_TIMESTAMP
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GENERATE_KEYS_BEFORE_SAVING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|RemotePreferences
operator|.
name|USE_REMOTE_SERVER
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|RemotePreferences
operator|.
name|REMOTE_SERVER_PORT
argument_list|,
literal|6050
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PERSONAL_JOURNAL_LIST
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXTERNAL_JOURNAL_LISTS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CITE_COMMAND
argument_list|,
literal|"\\cite"
argument_list|)
expr_stmt|;
comment|// obsoleted by the app-specific ones (not any more?)
name|defaults
operator|.
name|put
argument_list|(
name|FLOAT_MARKED_ENTRIES
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|LAST_USED_EXPORT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SIDE_PANE_WIDTH
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|IMPORT_INSPECTION_DIALOG_WIDTH
argument_list|,
literal|650
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|IMPORT_INSPECTION_DIALOG_HEIGHT
argument_list|,
literal|650
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SEARCH_DIALOG_WIDTH
argument_list|,
literal|650
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SEARCH_DIALOG_HEIGHT
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SHOW_FILE_LINKS_UPGRADE_WARNING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTOLINK_EXACT_KEY_ONLY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|NUMERIC_FIELDS
argument_list|,
literal|"mittnum;author"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|RUN_AUTOMATIC_FILE_SEARCH
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_LOCK_FILES
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTO_SAVE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTO_SAVE_INTERVAL
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROMPT_BEFORE_USING_AUTOSAVE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ENFORCE_LEGAL_BIBTEX_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// Curly brackets ({}) are the default delimiters, not quotes (") as these cause trouble when they appear within the field value:
comment|// Currently, JabRef does not escape them
name|defaults
operator|.
name|put
argument_list|(
name|VALUE_DELIMITERS2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|KEY_GEN_FIRST_LETTER_A
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|KEY_GEN_ALWAYS_ADD_LETTER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// TODO l10n issue
name|defaults
operator|.
name|put
argument_list|(
name|EMAIL_SUBJECT
argument_list|,
literal|"References"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OPEN_FOLDERS_OF_ATTACHED_FILES
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ALLOW_FILE_AUTO_OPEN_BROWSE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WEB_SEARCH_VISIBLE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SELECTED_FETCHER_INDEX
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|BIB_LOC_AS_PRIMARY_DIR
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DB_CONNECT_SERVER_TYPE
argument_list|,
literal|"MySQL"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DB_CONNECT_HOSTNAME
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DB_CONNECT_DATABASE
argument_list|,
literal|"jabref"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DB_CONNECT_USERNAME
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AKS_AUTO_NAMING_PDFS_AGAIN
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|insertCleanupPreset
argument_list|(
name|defaults
argument_list|,
name|CLEANUP_DEFAULT_PRESET
argument_list|)
expr_stmt|;
comment|// defaults for DroppedFileHandler UI
name|defaults
operator|.
name|put
argument_list|(
name|DroppedFileHandler
operator|.
name|DFH_LEAVE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DroppedFileHandler
operator|.
name|DFH_COPY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DroppedFileHandler
operator|.
name|DFH_MOVE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DroppedFileHandler
operator|.
name|DFH_RENAME
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|//defaults.put("lastAutodetectedImport", "");
comment|//defaults.put("autoRemoveExactDuplicates", Boolean.FALSE);
comment|//defaults.put("confirmAutoRemoveExactDuplicates", Boolean.TRUE);
comment|//defaults.put("tempDir", System.getProperty("java.io.tmpdir"));
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Temporary directory: "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tempdir"
argument_list|)
argument_list|)
expr_stmt|;
comment|//defaults.put("keyPattern", new LabelPattern(KEY_PATTERN));
name|defaults
operator|.
name|put
argument_list|(
name|ImportSettingsTab
operator|.
name|PREF_IMPORT_ALWAYSUSE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ImportSettingsTab
operator|.
name|PREF_IMPORT_DEFAULT_PDF_IMPORT_STYLE
argument_list|,
name|ImportSettingsTab
operator|.
name|DEFAULT_STYLE
argument_list|)
expr_stmt|;
comment|// use BibTeX key appended with filename as default pattern
name|defaults
operator|.
name|put
argument_list|(
name|ImportSettingsTab
operator|.
name|PREF_IMPORT_FILENAMEPATTERN
argument_list|,
name|ImportSettingsTab
operator|.
name|DEFAULT_FILENAMEPATTERNS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|customExports
operator|=
operator|new
name|CustomExportList
argument_list|(
operator|new
name|ExportComparator
argument_list|()
argument_list|)
expr_stmt|;
name|customImports
operator|=
operator|new
name|CustomImportList
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|updateSpecialFieldHandling
argument_list|()
expr_stmt|;
name|WRAPPED_USERNAME
operator|=
literal|'['
operator|+
name|get
argument_list|(
name|DEFAULT_OWNER
argument_list|)
operator|+
literal|']'
expr_stmt|;
name|MARKING_WITH_NUMBER_PATTERN
operator|=
literal|"\\["
operator|+
name|get
argument_list|(
name|DEFAULT_OWNER
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"\\\\\\\\"
argument_list|)
operator|+
literal|":(\\d+)\\]"
expr_stmt|;
name|String
name|defaultExpression
init|=
literal|"**/.*[bibtexkey].*\\\\.[extension]"
decl_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_REG_EXP_SEARCH_EXPRESSION_KEY
argument_list|,
name|defaultExpression
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|REG_EXP_SEARCH_EXPRESSION_KEY
argument_list|,
name|defaultExpression
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTOLINK_USE_REG_EXP_SEARCH_KEY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_IEEE_ABRV
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_CONVERT_TO_EQUATION
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_CASE_KEEPER_ON_SEARCH
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_UNIT_FORMATTER_ON_SEARCH
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USER_FILE_DIR
argument_list|,
name|Globals
operator|.
name|FILE_FIELD
operator|+
name|Globals
operator|.
name|DIR_SUFFIX
argument_list|)
expr_stmt|;
try|try
block|{
name|defaults
operator|.
name|put
argument_list|(
name|USER_FILE_DIR_IND_LEGACY
argument_list|,
name|Globals
operator|.
name|FILE_FIELD
operator|+
name|Globals
operator|.
name|DIR_SUFFIX
operator|+
literal|'-'
operator|+
name|get
argument_list|(
name|DEFAULT_OWNER
argument_list|)
operator|+
literal|'@'
operator|+
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Legacy setting name - was a bug: @ not allowed inside BibTeX comment text. Retained for backward comp.
name|defaults
operator|.
name|put
argument_list|(
name|USER_FILE_DIR_INDIVIDUAL
argument_list|,
name|Globals
operator|.
name|FILE_FIELD
operator|+
name|Globals
operator|.
name|DIR_SUFFIX
operator|+
literal|'-'
operator|+
name|get
argument_list|(
name|DEFAULT_OWNER
argument_list|)
operator|+
literal|'-'
operator|+
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Valid setting name
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Hostname not found."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USER_FILE_DIR_IND_LEGACY
argument_list|,
name|Globals
operator|.
name|FILE_FIELD
operator|+
name|Globals
operator|.
name|DIR_SUFFIX
operator|+
literal|'-'
operator|+
name|get
argument_list|(
name|DEFAULT_OWNER
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USER_FILE_DIR_INDIVIDUAL
argument_list|,
name|Globals
operator|.
name|FILE_FIELD
operator|+
name|Globals
operator|.
name|DIR_SUFFIX
operator|+
literal|'-'
operator|+
name|get
argument_list|(
name|DEFAULT_OWNER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCustomTabFieldNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCustomTabFieldNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|customFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|defNumber
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// saved as CUSTOMTABNAME_def{number} and ; separated
name|String
name|fields
init|=
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def"
operator|+
name|defNumber
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|fields
operator|==
literal|null
operator|)
operator|||
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|customFields
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fields
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|defNumber
operator|++
expr_stmt|;
block|}
return|return
name|customFields
return|;
block|}
DECL|method|setLanguageDependentDefaultValues ()
specifier|public
name|void
name|setLanguageDependentDefaultValues
parameter_list|()
block|{
comment|// Entry editor tab 0:
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_NAME
operator|+
literal|"_def0"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"General"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def0"
argument_list|,
literal|"crossref;keywords;file;doi;url;"
operator|+
literal|"comment;owner;timestamp"
argument_list|)
expr_stmt|;
comment|// Entry editor tab 1:
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def1"
argument_list|,
literal|"abstract"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_NAME
operator|+
literal|"_def1"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Abstract"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Entry editor tab 2: Review Field - used for research comments, etc.
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def2"
argument_list|,
literal|"review"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_NAME
operator|+
literal|"_def2"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Review"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMAIL_SUBJECT
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"References"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|putBracesAroundCapitals (String fieldName)
specifier|public
name|boolean
name|putBracesAroundCapitals
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|putBracesAroundCapitalsFields
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
DECL|method|updateSpecialFieldHandling ()
specifier|public
name|void
name|updateSpecialFieldHandling
parameter_list|()
block|{
name|putBracesAroundCapitalsFields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|fieldString
init|=
name|get
argument_list|(
name|PUT_BRACES_AROUND_CAPITALS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fieldString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|fields
init|=
name|fieldString
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|putBracesAroundCapitalsFields
operator|.
name|add
argument_list|(
name|field
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|nonWrappableFields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fieldString
operator|=
name|get
argument_list|(
name|NON_WRAPPABLE_FIELDS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fieldString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|fields
init|=
name|fieldString
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|nonWrappableFields
operator|.
name|add
argument_list|(
name|field
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getValueDelimiters (int index)
specifier|public
name|char
name|getValueDelimiters
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getValueDelimiters
argument_list|()
index|[
name|index
index|]
return|;
block|}
DECL|method|getValueDelimiters ()
specifier|private
name|char
index|[]
name|getValueDelimiters
parameter_list|()
block|{
return|return
name|JabRefPreferences
operator|.
name|VALUE_DELIMITERS
index|[
name|getInt
argument_list|(
name|VALUE_DELIMITERS2
argument_list|)
index|]
return|;
block|}
comment|/**      * Check whether a key is set (differently from null).      *      * @param key The key to check.      * @return true if the key is set, false otherwise.      */
DECL|method|hasKey (String key)
specifier|public
name|boolean
name|hasKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|get (String key)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|get
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|get (String key, String def)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|def
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|def
argument_list|)
return|;
block|}
DECL|method|getBoolean (String key)
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|,
name|getBooleanDefault
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getBoolean (String key, boolean def)
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|def
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|,
name|def
argument_list|)
return|;
block|}
DECL|method|getBooleanDefault (String key)
specifier|private
name|boolean
name|getBooleanDefault
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getInt (String key)
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|getInt
argument_list|(
name|key
argument_list|,
name|getIntDefault
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getIntDefault (String key)
specifier|public
name|int
name|getIntDefault
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|put (String key, String value)
specifier|public
name|void
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|putBoolean (String key, boolean value)
specifier|public
name|void
name|putBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|putBoolean
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|putInt (String key, int value)
specifier|public
name|void
name|putInt
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|putInt
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|remove (String key)
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|prefs
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**      * Puts a list of strings into the Preferences, by linking its elements with ';' into a single string. Escape      * characters make the process transparent even if strings contain ';'.      */
DECL|method|putStringList (String key, List<String> value)
specifier|public
name|void
name|putStringList
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return;
block|}
name|put
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|val
lambda|->
name|StringUtil
operator|.
name|quote
argument_list|(
name|val
argument_list|,
literal|";"
argument_list|,
literal|'\\'
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|";"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a List of Strings containing the chosen columns.      */
DECL|method|getStringList (String key)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getStringList
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|names
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|StringReader
name|rd
init|=
operator|new
name|StringReader
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|rs
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|rs
operator|=
name|getNextUnit
argument_list|(
name|rd
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
return|return
name|res
return|;
block|}
comment|/**      * Looks up a color definition in preferences, and returns the Color object.      *      * @param key The key for this setting.      * @return The color corresponding to the setting.      */
DECL|method|getColor (String key)
specifier|public
name|Color
name|getColor
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
index|[]
name|rgb
init|=
name|getRgb
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|Color
argument_list|(
name|rgb
index|[
literal|0
index|]
argument_list|,
name|rgb
index|[
literal|1
index|]
argument_list|,
name|rgb
index|[
literal|2
index|]
argument_list|)
return|;
block|}
DECL|method|getDefaultColor (String key)
specifier|public
name|Color
name|getDefaultColor
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
index|[]
name|rgb
init|=
name|getRgb
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|Color
argument_list|(
name|rgb
index|[
literal|0
index|]
argument_list|,
name|rgb
index|[
literal|1
index|]
argument_list|,
name|rgb
index|[
literal|2
index|]
argument_list|)
return|;
block|}
comment|/**      * Set the default value for a key. This is useful for plugins that need to add default values for the prefs keys      * they use.      *      * @param key The preferences key.      * @param value The default value.      */
DECL|method|putDefaultValue (String key, Object value)
specifier|public
name|void
name|putDefaultValue
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|defaults
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stores a color in preferences.      *      * @param key The key for this setting.      * @param color The Color to store.      */
DECL|method|putColor (String key, Color color)
specifier|public
name|void
name|putColor
parameter_list|(
name|String
name|key
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
name|String
name|rgb
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|color
operator|.
name|getRed
argument_list|()
argument_list|)
operator|+
literal|':'
operator|+
name|color
operator|.
name|getGreen
argument_list|()
operator|+
literal|':'
operator|+
name|color
operator|.
name|getBlue
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|rgb
argument_list|)
expr_stmt|;
block|}
comment|/**      * Looks up a color definition in preferences, and returns an array containing the RGB values.      *      * @param value The key for this setting.      * @return The RGB values corresponding to this color setting.      */
DECL|method|getRgb (String value)
specifier|private
specifier|static
name|int
index|[]
name|getRgb
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
literal|3
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|value
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|elements
init|=
name|value
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|values
index|[
literal|2
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elements
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|values
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**      * Clear all preferences.      *      * @throws BackingStoreException      */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|BackingStoreException
block|{
name|prefs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|clear (String key)
specifier|public
name|void
name|clear
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|prefs
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**      * Calling this method will write all preferences into the preference store.      */
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|getBoolean
argument_list|(
name|MEMORY_STICK_MODE
argument_list|)
condition|)
block|{
try|try
block|{
name|exportPreferences
argument_list|(
literal|"jabref.xml"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JabRefException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not export preferences for memory stick mode: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|prefs
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Can not communicate with backing store"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Fetches key patterns from preferences.      * The implementation doesn't cache the results      *      * @return LabelPattern containing all keys. Returned LabelPattern has no parent      */
DECL|method|getKeyPattern ()
specifier|public
name|GlobalLabelPattern
name|getKeyPattern
parameter_list|()
block|{
name|keyPattern
operator|=
operator|new
name|GlobalLabelPattern
argument_list|()
expr_stmt|;
name|Preferences
name|pre
init|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|GlobalLabelPattern
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|String
index|[]
name|keys
init|=
name|pre
operator|.
name|keys
argument_list|()
decl_stmt|;
if|if
condition|(
name|keys
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|keyPattern
operator|.
name|addLabelPattern
argument_list|(
name|key
argument_list|,
name|pre
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"BackingStoreException in JabRefPreferences.getKeyPattern"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|keyPattern
return|;
block|}
comment|/**      * Adds the given key pattern to the preferences      *      * @param pattern the pattern to store      */
DECL|method|putKeyPattern (GlobalLabelPattern pattern)
specifier|public
name|void
name|putKeyPattern
parameter_list|(
name|GlobalLabelPattern
name|pattern
parameter_list|)
block|{
name|keyPattern
operator|=
name|pattern
expr_stmt|;
comment|// Store overridden definitions to Preferences.
name|Preferences
name|pre
init|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|GlobalLabelPattern
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|pre
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// We remove all old entries.
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"BackingStoreException in JabRefPreferences.putKeyPattern"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|allKeys
init|=
name|pattern
operator|.
name|getAllKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|allKeys
control|)
block|{
if|if
condition|(
operator|!
name|pattern
operator|.
name|isDefaultValue
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// no default value
comment|// the first entry in the array is the full pattern
comment|// see net.sf.jabref.logic.labelPattern.LabelPatternUtil.split(String)
name|pre
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|pattern
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getPreferences ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getPreferences
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|prefs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|key
range|:
name|this
operator|.
name|prefs
operator|.
name|keys
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|getObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"could not retrieve preference keys"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|prefs
return|;
block|}
DECL|method|getObject (String key)
specifier|private
name|Object
name|getObject
parameter_list|(
name|String
name|key
parameter_list|)
block|{
try|try
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
try|try
block|{
return|return
name|this
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e2
parameter_list|)
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|getNextUnit (Reader data)
specifier|private
specifier|static
name|String
name|getNextUnit
parameter_list|(
name|Reader
name|data
parameter_list|)
throws|throws
name|IOException
block|{
comment|// character last read
comment|// -1 if end of stream
comment|// initialization necessary, because of Java compiler
name|int
name|c
init|=
operator|-
literal|1
decl_stmt|;
comment|// last character was escape symbol
name|boolean
name|escape
init|=
literal|false
decl_stmt|;
comment|// true if a ";" is found
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|res
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|done
operator|&&
operator|(
operator|(
name|c
operator|=
name|data
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
name|escape
condition|)
block|{
name|escape
operator|=
literal|false
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|escape
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|c
operator|==
literal|';'
condition|)
block|{
if|if
condition|(
name|escape
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|res
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|escape
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|res
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
comment|// end of stream
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
comment|/**      * Stores all information about the entry type in preferences, with the tag given by number.      */
DECL|method|storeCustomEntryType (CustomEntryType tp, int number)
specifier|public
name|void
name|storeCustomEntryType
parameter_list|(
name|CustomEntryType
name|tp
parameter_list|,
name|int
name|number
parameter_list|)
block|{
name|String
name|nr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|number
argument_list|)
decl_stmt|;
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_NAME
operator|+
name|nr
argument_list|,
name|tp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_REQ
operator|+
name|nr
argument_list|,
name|tp
operator|.
name|getRequiredFieldsString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|optionalFields
init|=
name|tp
operator|.
name|getOptionalFields
argument_list|()
decl_stmt|;
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_OPT
operator|+
name|nr
argument_list|,
name|optionalFields
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|tp
operator|.
name|getPrimaryOptionalFields
argument_list|()
decl_stmt|;
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_PRIOPT
operator|+
name|nr
argument_list|,
name|primaryOptionalFields
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves all information about the entry type in preferences, with the tag given by number.      */
DECL|method|getCustomEntryType (int number)
specifier|public
name|CustomEntryType
name|getCustomEntryType
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|String
name|nr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|number
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_NAME
operator|+
name|nr
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|req
init|=
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_REQ
operator|+
name|nr
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|opt
init|=
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_OPT
operator|+
name|nr
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|priOpt
init|=
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_PRIOPT
operator|+
name|nr
argument_list|)
decl_stmt|;
if|if
condition|(
name|priOpt
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|CustomEntryType
argument_list|(
name|EntryUtil
operator|.
name|capitalizeFirst
argument_list|(
name|name
argument_list|)
argument_list|,
name|req
argument_list|,
name|opt
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|secondary
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|opt
argument_list|)
decl_stmt|;
name|secondary
operator|.
name|removeAll
argument_list|(
name|priOpt
argument_list|)
expr_stmt|;
return|return
operator|new
name|CustomEntryType
argument_list|(
name|EntryUtil
operator|.
name|capitalizeFirst
argument_list|(
name|name
argument_list|)
argument_list|,
name|req
argument_list|,
name|priOpt
argument_list|,
name|secondary
argument_list|)
return|;
block|}
comment|/**      * Removes all information about custom entry types with tags of      *      * @param number or higher.      */
DECL|method|purgeCustomEntryTypes (int number)
specifier|public
name|void
name|purgeCustomEntryTypes
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|purgeSeries
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_NAME
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|purgeSeries
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_REQ
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|purgeSeries
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_OPT
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|purgeSeries
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOM_TYPE_PRIOPT
argument_list|,
name|number
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes all entries keyed by prefix+number, where number is equal to or higher than the given number.      *      * @param number or higher.      */
DECL|method|purgeSeries (String prefix, int number)
specifier|public
name|void
name|purgeSeries
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|number
parameter_list|)
block|{
name|int
name|n
init|=
name|number
decl_stmt|;
while|while
condition|(
name|get
argument_list|(
name|prefix
operator|+
name|n
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|remove
argument_list|(
name|prefix
operator|+
name|n
argument_list|)
expr_stmt|;
name|n
operator|++
expr_stmt|;
block|}
block|}
DECL|method|getEntryEditorTabList ()
specifier|public
name|EntryEditorTabList
name|getEntryEditorTabList
parameter_list|()
block|{
if|if
condition|(
name|tabList
operator|==
literal|null
condition|)
block|{
name|updateEntryEditorTabList
argument_list|()
expr_stmt|;
block|}
return|return
name|tabList
return|;
block|}
DECL|method|updateEntryEditorTabList ()
specifier|public
name|void
name|updateEntryEditorTabList
parameter_list|()
block|{
name|tabList
operator|=
operator|new
name|EntryEditorTabList
argument_list|()
expr_stmt|;
block|}
comment|/**      * Exports Preferences to an XML file.      *      * @param filename String File to export to      */
DECL|method|exportPreferences (String filename)
specifier|public
name|void
name|exportPreferences
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|JabRefException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
init|)
block|{
name|prefs
operator|.
name|exportSubtree
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
decl||
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|JabRefException
argument_list|(
literal|"Could not export preferences"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not export preferences"
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Imports Preferences from an XML file.      *      * @param filename String File to import from      * @throws JabRefException thrown if importing the preferences failed due to an InvalidPreferencesFormatException      *                         or an IOException      */
DECL|method|importPreferences (String filename)
specifier|public
name|void
name|importPreferences
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|JabRefException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
init|)
block|{
name|Preferences
operator|.
name|importPreferences
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPreferencesFormatException
decl||
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|JabRefException
argument_list|(
literal|"Could not import preferences"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not import preferences"
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Determines whether the given field should be written without any sort of wrapping.      *      * @param fieldName The field name.      * @return true if the field should not be wrapped.      */
DECL|method|isNonWrappableField (String fieldName)
specifier|public
name|boolean
name|isNonWrappableField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|nonWrappableFields
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
comment|/**      * ONLY FOR TESTING!      *      * Do not use in production code. Otherwise the singleton pattern is broken and preferences might get lost.      *      * @param owPrefs      */
DECL|method|overwritePreferences (JabRefPreferences owPrefs)
specifier|public
name|void
name|overwritePreferences
parameter_list|(
name|JabRefPreferences
name|owPrefs
parameter_list|)
block|{
name|singleton
operator|=
name|owPrefs
expr_stmt|;
block|}
DECL|method|getDefaultEncoding ()
specifier|public
name|Charset
name|getDefaultEncoding
parameter_list|()
block|{
return|return
name|Charset
operator|.
name|forName
argument_list|(
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_ENCODING
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setDefaultEncoding (Charset encoding)
specifier|public
name|void
name|setDefaultEncoding
parameter_list|(
name|Charset
name|encoding
parameter_list|)
block|{
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_ENCODING
argument_list|,
name|encoding
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|insertCleanupPreset (Map<String, Object> storage, CleanupPreset preset)
specifier|private
specifier|static
name|void
name|insertCleanupPreset
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|storage
parameter_list|,
name|CleanupPreset
name|preset
parameter_list|)
block|{
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_SUPERSCRIPTS
argument_list|,
name|preset
operator|.
name|isCleanUpSuperscripts
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_DOI
argument_list|,
name|preset
operator|.
name|isCleanUpDOI
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_MONTH
argument_list|,
name|preset
operator|.
name|isCleanUpMonth
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_PAGE_NUMBERS
argument_list|,
name|preset
operator|.
name|isCleanUpPageNumbers
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_DATE
argument_list|,
name|preset
operator|.
name|isCleanUpDate
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_MAKE_PATHS_RELATIVE
argument_list|,
name|preset
operator|.
name|isMakePathsRelative
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_RENAME_PDF
argument_list|,
name|preset
operator|.
name|isRenamePDF
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_RENAME_PDF_ONLY_RELATIVE_PATHS
argument_list|,
name|preset
operator|.
name|isRenamePdfOnlyRelativePaths
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_UPGRADE_EXTERNAL_LINKS
argument_list|,
name|preset
operator|.
name|isCleanUpUpgradeExternalLinks
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_HTML
argument_list|,
name|preset
operator|.
name|isConvertHTMLToLatex
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_CASE
argument_list|,
name|preset
operator|.
name|isConvertCase
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_LATEX
argument_list|,
name|preset
operator|.
name|isConvertLaTeX
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_UNITS
argument_list|,
name|preset
operator|.
name|isConvertUnits
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_UNICODE
argument_list|,
name|preset
operator|.
name|isConvertUnicodeToLatex
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_CONVERT_TO_BIBLATEX
argument_list|,
name|preset
operator|.
name|isConvertToBiblatex
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_FIX_FILE_LINKS
argument_list|,
name|preset
operator|.
name|isFixFileLinks
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

