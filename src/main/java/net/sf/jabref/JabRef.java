begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2014 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|plastic
operator|.
name|Plastic3DLookAndFeel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|plastic
operator|.
name|theme
operator|.
name|SkyBluer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|FontUIResource
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|AutoSaveManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|ExportFormats
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|FileActions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|IExportFormat
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|SaveException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|SaveSession
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|PluginCore
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|PluginInstaller
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|SidePanePlugin
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|core
operator|.
name|JabRefPlugin
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|core
operator|.
name|generated
operator|.
name|_JabRefPlugin
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|plugin
operator|.
name|core
operator|.
name|generated
operator|.
name|_JabRefPlugin
operator|.
name|EntryFetcherExtension
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|remote
operator|.
name|RemotePreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|remote
operator|.
name|client
operator|.
name|RemoteListenerClient
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|remote
operator|.
name|JabRefMessageHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|splash
operator|.
name|SplashScreenLifecycle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|FileBasedLock
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|auximport
operator|.
name|AuxCommandLine
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jna
operator|.
name|Native
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jna
operator|.
name|NativeLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jna
operator|.
name|Pointer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jna
operator|.
name|WString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jna
operator|.
name|ptr
operator|.
name|PointerByReference
import|;
end_import

begin_comment
comment|/**  * JabRef Main Class - The application gets started here.  */
end_comment

begin_class
DECL|class|JabRef
specifier|public
class|class
name|JabRef
block|{
DECL|field|jrf
specifier|public
specifier|static
name|JabRefFrame
name|jrf
decl_stmt|;
DECL|field|MAX_DIALOG_WARNINGS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_DIALOG_WARNINGS
init|=
literal|10
decl_stmt|;
DECL|field|graphicFailure
specifier|private
name|boolean
name|graphicFailure
init|=
literal|false
decl_stmt|;
DECL|field|cli
specifier|private
name|JabRefCLI
name|cli
decl_stmt|;
DECL|field|splashScreen
specifier|private
name|SplashScreenLifecycle
name|splashScreen
init|=
operator|new
name|SplashScreenLifecycle
argument_list|()
decl_stmt|;
DECL|method|start (String[] args)
specifier|public
name|void
name|start
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|JabRefPreferences
name|prefs
init|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// See if there are plugins scheduled for deletion:
if|if
condition|(
name|prefs
operator|.
name|hasKey
argument_list|(
name|JabRefPreferences
operator|.
name|DELETE_PLUGINS
argument_list|)
operator|&&
operator|(
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|DELETE_PLUGINS
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|String
index|[]
name|toDelete
init|=
name|prefs
operator|.
name|getStringArray
argument_list|(
name|JabRefPreferences
operator|.
name|DELETE_PLUGINS
argument_list|)
decl_stmt|;
name|PluginInstaller
operator|.
name|deletePluginsOnStartup
argument_list|(
name|toDelete
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|DELETE_PLUGINS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_PROXY
argument_list|)
condition|)
block|{
comment|// NetworkTab.java ensures that proxyHostname and proxyPort are not null
name|System
operator|.
name|setProperty
argument_list|(
literal|"http.proxyHost"
argument_list|,
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|PROXY_HOSTNAME
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"http.proxyPort"
argument_list|,
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|PROXY_PORT
argument_list|)
argument_list|)
expr_stmt|;
comment|// currently, the following cannot be configured
if|if
condition|(
name|prefs
operator|.
name|get
argument_list|(
literal|"proxyUsername"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"http.proxyUser"
argument_list|,
name|prefs
operator|.
name|get
argument_list|(
literal|"proxyUsername"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"http.proxyPassword"
argument_list|,
name|prefs
operator|.
name|get
argument_list|(
literal|"proxyPassword"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The following two lines signal that the system proxy settings
comment|// should be used:
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.net.useSystemProxies"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"proxySet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|Globals
operator|.
name|startBackgroundTasks
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|setupLogging
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|setLanguage
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|setLanguageDependentDefaultValues
argument_list|()
expr_stmt|;
comment|/*          * The Plug-in System is started automatically on the first call to          * PluginCore.getManager().          *           * Plug-ins are activated on the first call to their getInstance method.          */
comment|// Update which fields should be treated as numeric, based on preferences:
name|BibtexFields
operator|.
name|setNumericFieldsFromPrefs
argument_list|()
expr_stmt|;
comment|/* Build list of Import and Export formats */
name|Globals
operator|.
name|importFormatReader
operator|.
name|resetImportFormats
argument_list|()
expr_stmt|;
name|BibtexEntryType
operator|.
name|loadCustomEntryTypes
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|initAllExports
argument_list|()
expr_stmt|;
comment|// Read list(s) of journal names and abbreviations:
name|Globals
operator|.
name|initializeJournalNames
argument_list|()
expr_stmt|;
comment|// Check for running JabRef
name|RemotePreferences
name|remotePreferences
init|=
operator|new
name|RemotePreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
decl_stmt|;
if|if
condition|(
name|remotePreferences
operator|.
name|useRemoteServer
argument_list|()
condition|)
block|{
name|Globals
operator|.
name|remoteListener
operator|.
name|open
argument_list|(
operator|new
name|JabRefMessageHandler
argument_list|(
name|this
argument_list|)
argument_list|,
name|remotePreferences
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|remoteListener
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|Globals
operator|.
name|remoteListener
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// we are alone, we start the server
block|}
else|else
block|{
comment|// we are not alone, there is already a server out there, try to contact already running JabRef:
if|if
condition|(
name|RemoteListenerClient
operator|.
name|sendToActiveJabRefInstance
argument_list|(
name|args
argument_list|,
name|remotePreferences
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
comment|/*                      * We have successfully sent our command line options                      * through the socket to another JabRef instance. So we                      * assume it's all taken care of, and quit.                      */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Arguments passed on to running JabRef instance. Shutting down."
argument_list|)
argument_list|)
expr_stmt|;
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|shutdownEverything
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|/*          * See if the user has a personal journal list set up. If so, add these          * journal names and abbreviations to the list:          */
name|String
name|personalJournalList
init|=
name|prefs
operator|.
name|get
argument_list|(
literal|"personalJournalList"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|personalJournalList
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|personalJournalList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|Globals
operator|.
name|journalAbbrev
operator|.
name|readJournalListFromFile
argument_list|(
operator|new
name|File
argument_list|(
name|personalJournalList
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Journal file not found"
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
literal|"personalJournalList"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// override used newline character with the one stored in the preferences
comment|// The preferences return the system newline character sequence as default
name|Globals
operator|.
name|NEWLINE
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|NEWLINE_LENGTH
operator|=
name|Globals
operator|.
name|NEWLINE
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|ON_WIN
condition|)
block|{
comment|// Set application user model id so that pinning JabRef to the Win7/8 taskbar works
comment|// Based on http://stackoverflow.com/a/1928830
name|JabRef
operator|.
name|setCurrentProcessExplicitAppUserModelID
argument_list|(
literal|"JabRef."
operator|+
name|Globals
operator|.
name|BUILD_INFO
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|//System.out.println(getCurrentProcessExplicitAppUserModelID());
block|}
name|Vector
argument_list|<
name|ParserResult
argument_list|>
name|loaded
init|=
name|processArguments
argument_list|(
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|loaded
operator|==
literal|null
operator|||
name|graphicFailure
operator|||
name|cli
operator|.
name|isDisableGui
argument_list|()
operator|||
name|cli
operator|.
name|isShowVersion
argument_list|()
condition|)
block|{
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|shutdownEverything
argument_list|()
expr_stmt|;
return|return;
block|}
name|openWindow
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
block|}
DECL|method|setLanguage (JabRefPreferences prefs)
specifier|private
name|void
name|setLanguage
parameter_list|(
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
name|String
name|langStr
init|=
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|LANGUAGE
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|langStr
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|String
name|language
decl_stmt|,
name|country
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|language
operator|=
name|langStr
expr_stmt|;
name|country
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|language
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|country
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
block|}
name|Globals
operator|.
name|setLanguage
argument_list|(
name|language
argument_list|,
name|country
argument_list|)
expr_stmt|;
block|}
comment|// Do not use this code in release version, it contains some memory leaks
DECL|method|getCurrentProcessExplicitAppUserModelID ()
specifier|public
specifier|static
name|String
name|getCurrentProcessExplicitAppUserModelID
parameter_list|()
block|{
specifier|final
name|PointerByReference
name|r
init|=
operator|new
name|PointerByReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|JabRef
operator|.
name|GetCurrentProcessExplicitAppUserModelID
argument_list|(
name|r
argument_list|)
operator|.
name|longValue
argument_list|()
operator|==
literal|0
condition|)
block|{
specifier|final
name|Pointer
name|p
init|=
name|r
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|p
operator|.
name|getString
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
return|;
comment|// here we leak native memory by lazyness
block|}
return|return
literal|"N/A"
return|;
block|}
DECL|method|setCurrentProcessExplicitAppUserModelID (final String appID)
specifier|private
specifier|static
name|void
name|setCurrentProcessExplicitAppUserModelID
parameter_list|(
specifier|final
name|String
name|appID
parameter_list|)
block|{
if|if
condition|(
name|JabRef
operator|.
name|SetCurrentProcessExplicitAppUserModelID
argument_list|(
operator|new
name|WString
argument_list|(
name|appID
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unable to set current process explicit AppUserModelID to: "
operator|+
name|appID
argument_list|)
throw|;
block|}
block|}
DECL|method|GetCurrentProcessExplicitAppUserModelID (PointerByReference appID)
specifier|private
specifier|static
specifier|native
name|NativeLong
name|GetCurrentProcessExplicitAppUserModelID
parameter_list|(
name|PointerByReference
name|appID
parameter_list|)
function_decl|;
DECL|method|SetCurrentProcessExplicitAppUserModelID (WString appID)
specifier|private
specifier|static
specifier|native
name|NativeLong
name|SetCurrentProcessExplicitAppUserModelID
parameter_list|(
name|WString
name|appID
parameter_list|)
function_decl|;
static|static
block|{
if|if
condition|(
name|Globals
operator|.
name|ON_WIN
condition|)
block|{
name|Native
operator|.
name|register
argument_list|(
literal|"shell32"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processArguments (String[] args, boolean initialStartup)
specifier|public
name|Vector
argument_list|<
name|ParserResult
argument_list|>
name|processArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|boolean
name|initialStartup
parameter_list|)
block|{
name|cli
operator|=
operator|new
name|JabRefCLI
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialStartup
operator|&&
name|cli
operator|.
name|isShowVersion
argument_list|()
condition|)
block|{
name|cli
operator|.
name|displayVersion
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|initialStartup
operator|&&
name|cli
operator|.
name|isHelp
argument_list|()
condition|)
block|{
name|cli
operator|.
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
comment|// TODO replace with optional one day
block|}
name|boolean
name|commandMode
init|=
name|cli
operator|.
name|isDisableGui
argument_list|()
operator|||
name|cli
operator|.
name|isFetcherEngine
argument_list|()
decl_stmt|;
comment|// First we quickly scan the command line parameters for any that signal
comment|// that the GUI
comment|// should not be opened. This is used to decide whether we should show the
comment|// splash screen or not.
if|if
condition|(
name|initialStartup
operator|&&
operator|!
name|commandMode
operator|&&
operator|!
name|cli
operator|.
name|isDisableSplash
argument_list|()
condition|)
block|{
try|try
block|{
name|splashScreen
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|graphicFailure
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to create graphical interface"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check if we should reset all preferences to default values:
if|if
condition|(
name|cli
operator|.
name|isPreferencesReset
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|cli
operator|.
name|getPreferencesReset
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"all"
argument_list|)
condition|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Setting all preferences to default values."
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to clear preferences."
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
index|[]
name|keys
init|=
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|hasKey
argument_list|(
name|key
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Resetting preference key '%0'"
argument_list|,
name|key
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|clear
argument_list|(
name|key
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unknown preference key '%0'"
argument_list|,
name|key
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Check if we should import preferences from a file:
if|if
condition|(
name|cli
operator|.
name|isPreferencesImport
argument_list|()
condition|)
block|{
try|try
block|{
name|Globals
operator|.
name|prefs
operator|.
name|importPreferences
argument_list|(
name|cli
operator|.
name|getPreferencesImport
argument_list|()
argument_list|)
expr_stmt|;
name|BibtexEntryType
operator|.
name|loadCustomEntryTypes
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|initAllExports
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Util
operator|.
name|pr
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Set up custom or default icon theme
comment|// Has to be done here as openBibFile requires an initialized icon theme (due to the implementation of special fields)
name|GUIGlobals
operator|.
name|setUpIconTheme
argument_list|()
expr_stmt|;
comment|// Vector to put imported/loaded database(s) in.
name|Vector
argument_list|<
name|ParserResult
argument_list|>
name|loaded
init|=
operator|new
name|Vector
argument_list|<
name|ParserResult
argument_list|>
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|toImport
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
operator|(
name|cli
operator|.
name|getLeftOver
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|String
name|aLeftOver
range|:
name|cli
operator|.
name|getLeftOver
argument_list|()
control|)
block|{
comment|// Leftover arguments that have a "bib" extension are interpreted as
comment|// bib files to open. Other files, and files that could not be opened
comment|// as bib, we try to import instead.
name|boolean
name|bibExtension
init|=
name|aLeftOver
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"bib"
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bibExtension
condition|)
block|{
name|pr
operator|=
name|JabRef
operator|.
name|openBibFile
argument_list|(
name|aLeftOver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|pr
operator|==
literal|null
operator|)
operator|||
operator|(
name|pr
operator|==
name|ParserResult
operator|.
name|INVALID_FORMAT
operator|)
condition|)
block|{
comment|// We will try to import this file. Normally we
comment|// will import it into a new tab, but if this import has
comment|// been initiated by another instance through the remote
comment|// listener, we will instead import it into the current database.
comment|// This will enable easy integration with web browers that can
comment|// open a reference file in JabRef.
if|if
condition|(
name|initialStartup
condition|)
block|{
name|toImport
operator|.
name|add
argument_list|(
name|aLeftOver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ParserResult
name|res
init|=
name|JabRef
operator|.
name|importToOpenBase
argument_list|(
name|aLeftOver
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|loaded
operator|.
name|add
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loaded
operator|.
name|add
argument_list|(
name|ParserResult
operator|.
name|INVALID_FORMAT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|pr
operator|!=
name|ParserResult
operator|.
name|FILE_LOCKED
condition|)
block|{
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
name|cli
operator|.
name|isFileImport
argument_list|()
condition|)
block|{
name|toImport
operator|.
name|add
argument_list|(
name|cli
operator|.
name|getFileImport
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|filenameString
range|:
name|toImport
control|)
block|{
name|ParserResult
name|pr
init|=
name|JabRef
operator|.
name|importFile
argument_list|(
name|filenameString
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
block|{
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
name|cli
operator|.
name|isImportToOpenBase
argument_list|()
condition|)
block|{
name|ParserResult
name|res
init|=
name|JabRef
operator|.
name|importToOpenBase
argument_list|(
name|cli
operator|.
name|getImportToOpenBase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|loaded
operator|.
name|add
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
name|cli
operator|.
name|isFetcherEngine
argument_list|()
condition|)
block|{
name|ParserResult
name|res
init|=
name|fetch
argument_list|(
name|cli
operator|.
name|getFetcherEngine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|loaded
operator|.
name|add
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cli
operator|.
name|isExportMatches
argument_list|()
condition|)
block|{
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|data
init|=
name|cli
operator|.
name|getExportMatches
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|searchTerm
init|=
name|data
index|[
literal|0
index|]
operator|.
name|replace
argument_list|(
literal|"\\$"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
comment|//enables blanks within the search term:
comment|//? stands for a blank
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|elementAt
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|dataBase
init|=
name|pr
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|SearchManagerNoGUI
name|smng
init|=
operator|new
name|SearchManagerNoGUI
argument_list|(
name|searchTerm
argument_list|,
name|dataBase
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|newBase
init|=
name|smng
operator|.
name|getDBfromMatches
argument_list|()
decl_stmt|;
comment|//newBase contains only match entries
comment|//export database
if|if
condition|(
operator|(
name|newBase
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|newBase
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|String
name|formatName
init|=
literal|null
decl_stmt|;
name|IExportFormat
name|format
decl_stmt|;
comment|//read in the export format, take default format if no format entered
switch|switch
condition|(
name|data
operator|.
name|length
condition|)
block|{
case|case
operator|(
literal|3
operator|)
case|:
block|{
name|formatName
operator|=
name|data
index|[
literal|2
index|]
expr_stmt|;
break|break;
block|}
case|case
operator|(
literal|2
operator|)
case|:
block|{
comment|//default ExportFormat: HTML table (with Abstract& BibTeX)
name|formatName
operator|=
literal|"tablerefsabsbib"
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Output file missing"
argument_list|)
operator|.
name|concat
argument_list|(
literal|". \n \t "
argument_list|)
operator|.
name|concat
argument_list|(
literal|"Usage"
argument_list|)
operator|.
name|concat
argument_list|(
literal|": "
argument_list|)
operator|+
name|JabRefCLI
operator|.
name|getExportMatchesSyntax
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// TODO replace with optional one day
block|}
block|}
comment|//end switch
comment|//export new database
name|format
operator|=
name|ExportFormats
operator|.
name|getExportFormat
argument_list|(
name|formatName
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
comment|// We have an ExportFormat instance:
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Exporting"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|format
operator|.
name|performExport
argument_list|(
name|newBase
argument_list|,
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|,
name|pr
operator|.
name|getEncoding
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not export file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|1
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unknown export format"
argument_list|)
operator|+
literal|": "
operator|+
name|formatName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*end if newBase != null*/
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No search matches."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The output option depends on a valid input option."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//end if(loaded.size> 0)
block|}
comment|//end exportMatches invoked
if|if
condition|(
name|cli
operator|.
name|isFileExport
argument_list|()
condition|)
block|{
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|data
init|=
name|cli
operator|.
name|getFileExport
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// This signals that the latest import should be stored in BibTeX
comment|// format to the given file.
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|elementAt
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pr
operator|.
name|isInvalid
argument_list|()
condition|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saving"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|SaveSession
name|session
init|=
name|FileActions
operator|.
name|saveDatabase
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_ENCODING
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Show just a warning message if encoding didn't work for all characters:
if|if
condition|(
operator|!
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|couldEncodeAll
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"The chosen encoding '%0' could not encode the following characters: "
argument_list|,
name|session
operator|.
name|getEncoding
argument_list|()
argument_list|)
operator|+
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|getProblemCharacters
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not save file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The output option depends on a valid import option."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// This signals that the latest import should be stored in the given
comment|// format to the given file.
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|elementAt
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Set the global variable for this database's file directory before exporting,
comment|// so formatters can resolve linked files correctly.
comment|// (This is an ugly hack!)
name|File
name|theFile
init|=
name|pr
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|theFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|theFile
operator|=
name|theFile
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
name|MetaData
name|metaData
init|=
name|pr
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|metaData
operator|.
name|setFile
argument_list|(
name|theFile
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|fileDirForDatabase
operator|=
name|metaData
operator|.
name|getFileDirectory
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|databaseFile
operator|=
name|metaData
operator|.
name|getFile
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Exporting"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|IExportFormat
name|format
init|=
name|ExportFormats
operator|.
name|getExportFormat
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
comment|// We have an ExportFormat instance:
try|try
block|{
name|format
operator|.
name|performExport
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|,
name|pr
operator|.
name|getEncoding
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not export file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unknown export format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The output option depends on a valid import option."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Util.pr(": Finished export");
if|if
condition|(
name|cli
operator|.
name|isPreferencesExport
argument_list|()
condition|)
block|{
try|try
block|{
name|Globals
operator|.
name|prefs
operator|.
name|exportPreferences
argument_list|(
name|cli
operator|.
name|getPreferencesExport
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Util
operator|.
name|pr
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
name|cli
operator|.
name|isAuxImport
argument_list|()
condition|)
block|{
name|boolean
name|usageMsg
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
comment|// bibtex file loaded
block|{
name|String
index|[]
name|data
init|=
name|cli
operator|.
name|getAuxImport
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|firstElement
argument_list|()
decl_stmt|;
name|AuxCommandLine
name|acl
init|=
operator|new
name|AuxCommandLine
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|BibtexDatabase
name|newBase
init|=
name|acl
operator|.
name|perform
argument_list|()
decl_stmt|;
name|boolean
name|notSavedMsg
init|=
literal|false
decl_stmt|;
comment|// write an output, if something could be resolved
if|if
condition|(
name|newBase
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|newBase
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|subName
init|=
name|StringUtil
operator|.
name|getCorrectFileName
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
literal|"bib"
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Saving"
argument_list|)
operator|+
literal|": "
operator|+
name|subName
argument_list|)
expr_stmt|;
name|SaveSession
name|session
init|=
name|FileActions
operator|.
name|saveDatabase
argument_list|(
name|newBase
argument_list|,
operator|new
name|MetaData
argument_list|()
argument_list|,
comment|// no Metadata
operator|new
name|File
argument_list|(
name|subName
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_ENCODING
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Show just a warning message if encoding didn't work for all characters:
if|if
condition|(
operator|!
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|couldEncodeAll
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"The chosen encoding '%0' could not encode the following characters: "
argument_list|,
name|session
operator|.
name|getEncoding
argument_list|()
argument_list|)
operator|+
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|getProblemCharacters
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not save file"
argument_list|)
operator|+
literal|" '"
operator|+
name|subName
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|notSavedMsg
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|notSavedMsg
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"no database generated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|usageMsg
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|usageMsg
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|usageMsg
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"no base-bibtex-file specified"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"usage"
argument_list|)
operator|+
literal|" :"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"jabref --aux infile[.aux],outfile[.bib] base-bibtex-file"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|loaded
return|;
block|}
comment|/**      * Run an entry fetcher from the command line.      *       * Note that this only works headlessly if the EntryFetcher does not show      * any GUI.      *       * @param fetchCommand      *            A string containing both the fetcher to use (id of      *            EntryFetcherExtension minus Fetcher) and the search query,      *            separated by a :      * @return A parser result containing the entries fetched or null if an      *         error occurred.      */
DECL|method|fetch (String fetchCommand)
specifier|private
name|ParserResult
name|fetch
parameter_list|(
name|String
name|fetchCommand
parameter_list|)
block|{
if|if
condition|(
operator|(
name|fetchCommand
operator|==
literal|null
operator|)
operator|||
operator|!
name|fetchCommand
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
operator|||
operator|(
name|fetchCommand
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|.
name|length
operator|!=
literal|2
operator|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Expected syntax for --fetch='<name of fetcher>:<query>'"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The following fetchers are available:"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|engine
init|=
name|fetchCommand
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|String
name|query
init|=
name|fetchCommand
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
name|EntryFetcher
name|fetcher
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EntryFetcherExtension
name|e
range|:
name|JabRefPlugin
operator|.
name|getInstance
argument_list|(
name|PluginCore
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|getEntryFetcherExtensions
argument_list|()
control|)
block|{
if|if
condition|(
name|engine
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getId
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"Fetcher"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|fetcher
operator|=
name|e
operator|.
name|getEntryFetcher
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fetcher
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not find fetcher '%0'"
argument_list|,
name|engine
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The following fetchers are available:"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|EntryFetcherExtension
name|e
range|:
name|JabRefPlugin
operator|.
name|getInstance
argument_list|(
name|PluginCore
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|getEntryFetcherExtensions
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|e
operator|.
name|getId
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"Fetcher"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Running Query '%0' with fetcher '%1'."
argument_list|,
name|query
argument_list|,
name|engine
argument_list|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Please wait..."
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|BibtexEntry
argument_list|>
name|result
init|=
operator|new
name|ImportInspectionCommandLine
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|fetcher
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|result
operator|==
literal|null
operator|)
operator|||
operator|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Query '%0' with fetcher '%1' did not return any results."
argument_list|,
name|query
argument_list|,
name|engine
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ParserResult
argument_list|(
name|result
argument_list|)
return|;
block|}
DECL|method|setLookAndFeel ()
specifier|private
name|void
name|setLookAndFeel
parameter_list|()
block|{
try|try
block|{
name|String
name|lookFeel
decl_stmt|;
name|String
name|systemLnF
init|=
name|UIManager
operator|.
name|getSystemLookAndFeelClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_DEFAULT_LOOK_AND_FEEL
argument_list|)
condition|)
block|{
comment|// Use system Look& Feel by default
name|lookFeel
operator|=
name|systemLnF
expr_stmt|;
block|}
else|else
block|{
name|lookFeel
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WIN_LOOK_AND_FEEL
argument_list|)
expr_stmt|;
block|}
comment|// At all cost, avoid ending up with the Metal look and feel:
if|if
condition|(
name|lookFeel
operator|.
name|equals
argument_list|(
literal|"javax.swing.plaf.metal.MetalLookAndFeel"
argument_list|)
condition|)
block|{
name|Plastic3DLookAndFeel
name|lnf
init|=
operator|new
name|Plastic3DLookAndFeel
argument_list|()
decl_stmt|;
name|Plastic3DLookAndFeel
operator|.
name|setCurrentTheme
argument_list|(
operator|new
name|SkyBluer
argument_list|()
argument_list|)
expr_stmt|;
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|Options
operator|.
name|setPopupDropShadowEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|lnf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|lookFeel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// javax.swing.UnsupportedLookAndFeelException (sure; see bug #1278) or ClassNotFoundException (unsure) may be thrown
comment|// specified look and feel does not exist on the classpath, so use system l&f
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|systemLnF
argument_list|)
expr_stmt|;
comment|// also set system l&f as default
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|WIN_LOOK_AND_FEEL
argument_list|,
name|systemLnF
argument_list|)
expr_stmt|;
comment|// notify the user
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|JabRef
operator|.
name|jrf
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unable to find the requested Look& Feel and thus the default one is used."
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// In JabRef v2.8, we did it only on NON-Mac. Now, we try on all platforms
name|boolean
name|overrideDefaultFonts
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OVERRIDE_DEFAULT_FONTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|overrideDefaultFonts
condition|)
block|{
name|int
name|fontSize
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|MENU_FONT_SIZE
argument_list|)
decl_stmt|;
name|UIDefaults
name|defaults
init|=
name|UIManager
operator|.
name|getDefaults
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|Object
argument_list|>
name|keys
init|=
name|defaults
operator|.
name|keys
argument_list|()
decl_stmt|;
name|Double
name|zoomLevel
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Object
name|key
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|key
operator|instanceof
name|String
operator|)
operator|&&
operator|(
operator|(
operator|(
name|String
operator|)
name|key
operator|)
operator|.
name|endsWith
argument_list|(
literal|".font"
argument_list|)
operator|)
condition|)
block|{
name|FontUIResource
name|font
init|=
operator|(
name|FontUIResource
operator|)
name|UIManager
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|zoomLevel
operator|==
literal|null
condition|)
block|{
comment|// zoomLevel not yet set, calculate it based on the first found font
name|zoomLevel
operator|=
operator|(
name|double
operator|)
name|fontSize
operator|/
operator|(
name|double
operator|)
name|font
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
name|font
operator|=
operator|new
name|FontUIResource
argument_list|(
name|font
operator|.
name|getName
argument_list|()
argument_list|,
name|font
operator|.
name|getStyle
argument_list|()
argument_list|,
name|fontSize
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|zoomLevel
operator|!=
literal|null
condition|)
block|{
name|GUIGlobals
operator|.
name|zoomLevel
operator|=
name|zoomLevel
expr_stmt|;
block|}
block|}
block|}
DECL|method|openWindow (Vector<ParserResult> loaded)
specifier|private
name|void
name|openWindow
parameter_list|(
name|Vector
argument_list|<
name|ParserResult
argument_list|>
name|loaded
parameter_list|)
block|{
comment|// Call the method performCompatibilityUpdate(), which does any
comment|// necessary changes for users with a preference set from an older
comment|// Jabref version.
name|Util
operator|.
name|performCompatibilityUpdate
argument_list|()
expr_stmt|;
comment|// Set up custom or default icon theme:
comment|// This is now done at processArguments
comment|// TODO: remove temporary registering of external file types?
name|Globals
operator|.
name|prefs
operator|.
name|updateExternalFileTypes
argument_list|()
expr_stmt|;
comment|// This property is set to make the Mac OSX Java VM move the menu bar to
comment|// the top of the screen, where Mac users expect it to be.
name|System
operator|.
name|setProperty
argument_list|(
literal|"apple.laf.useScreenMenuBar"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// Set antialiasing on everywhere. This only works in JRE>= 1.5.
comment|// Or... it doesn't work, period.
comment|// TODO test and maybe remove this! I found this commented out with no additional info ( payload@lavabit.com )
comment|// Enabled since JabRef 2.11 beta 4
name|System
operator|.
name|setProperty
argument_list|(
literal|"swing.aatext"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// Default is "on".
comment|// "lcd" instead of "on" because of http://wiki.netbeans.org/FaqFontRendering and http://docs.oracle.com/javase/6/docs/technotes/guides/2d/flags.html#aaFonts
name|System
operator|.
name|setProperty
argument_list|(
literal|"awt.useSystemAAFontSettings"
argument_list|,
literal|"lcd"
argument_list|)
expr_stmt|;
comment|// Set the Look& Feel for Swing.
try|try
block|{
name|setLookAndFeel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// If the option is enabled, open the last edited databases, if any.
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OPEN_LAST_EDITED
argument_list|)
operator|&&
operator|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_EDITED
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// How to handle errors in the databases to open?
name|String
index|[]
name|names
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringArray
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_EDITED
argument_list|)
decl_stmt|;
name|lastEdLoop
label|:
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|File
name|fileToOpen
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|loaded
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|elementAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|pr
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|equals
argument_list|(
name|fileToOpen
argument_list|)
condition|)
block|{
continue|continue
name|lastEdLoop
continue|;
block|}
block|}
if|if
condition|(
name|fileToOpen
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ParserResult
name|pr
init|=
name|JabRef
operator|.
name|openBibFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pr
operator|==
name|ParserResult
operator|.
name|INVALID_FORMAT
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|fileToOpen
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|!=
name|ParserResult
operator|.
name|FILE_LOCKED
condition|)
block|{
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|GUIGlobals
operator|.
name|init
argument_list|()
expr_stmt|;
name|GUIGlobals
operator|.
name|CURRENTFONT
operator|=
operator|new
name|Font
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_FAMILY
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_STYLE
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_SIZE
argument_list|)
argument_list|)
expr_stmt|;
comment|//Util.pr(": Initializing frame");
name|JabRef
operator|.
name|jrf
operator|=
operator|new
name|JabRefFrame
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Add all loaded databases to the frame:
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|postponed
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ParserResult
argument_list|>
name|failed
init|=
operator|new
name|ArrayList
argument_list|<
name|ParserResult
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ParserResult
argument_list|>
name|toOpenTab
init|=
operator|new
name|ArrayList
argument_list|<
name|ParserResult
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ParserResult
argument_list|>
name|i
init|=
name|loaded
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ParserResult
name|pr
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|isInvalid
argument_list|()
condition|)
block|{
name|failed
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|pr
operator|.
name|isPostponedAutosaveFound
argument_list|()
condition|)
block|{
if|if
condition|(
name|pr
operator|.
name|toOpenTab
argument_list|()
condition|)
block|{
comment|// things to be appended to an opened tab should be done after opening all tabs
comment|// add them to the list
name|toOpenTab
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JabRef
operator|.
name|jrf
operator|.
name|addParserResult
argument_list|(
name|pr
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|postponed
operator|.
name|add
argument_list|(
name|pr
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// finally add things to the currently opened tab
for|for
control|(
name|ParserResult
name|pr
range|:
name|toOpenTab
control|)
block|{
name|JabRef
operator|.
name|jrf
operator|.
name|addParserResult
argument_list|(
name|pr
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|isLoadSession
argument_list|()
condition|)
block|{
name|JabRef
operator|.
name|jrf
operator|.
name|loadSessionAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
argument_list|(
name|JabRef
operator|.
name|jrf
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|splashScreen
operator|.
name|hide
argument_list|()
expr_stmt|;
comment|/*JOptionPane.showMessageDialog(null, Globals.lang("Please note that this "             +"is an early beta version. Do not use it without backing up your files!"),                 Globals.lang("Beta version"), JOptionPane.WARNING_MESSAGE);*/
comment|// Start auto save timer:
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"autoSave"
argument_list|)
condition|)
block|{
name|Globals
operator|.
name|startAutoSaveManager
argument_list|(
name|JabRef
operator|.
name|jrf
argument_list|)
expr_stmt|;
block|}
comment|// If we are set to remember the window location, we also remember the maximised
comment|// state. This needs to be set after the window has been made visible, so we
comment|// do it here:
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WINDOW_MAXIMISED
argument_list|)
condition|)
block|{
name|JabRef
operator|.
name|jrf
operator|.
name|setExtendedState
argument_list|(
name|JFrame
operator|.
name|MAXIMIZED_BOTH
argument_list|)
expr_stmt|;
block|}
name|JabRef
operator|.
name|jrf
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WINDOW_MAXIMISED
argument_list|)
condition|)
block|{
name|JabRef
operator|.
name|jrf
operator|.
name|setExtendedState
argument_list|(
name|JFrame
operator|.
name|MAXIMIZED_BOTH
argument_list|)
expr_stmt|;
block|}
comment|// TEST TEST TEST TEST TEST TEST
name|startSidePanePlugins
argument_list|(
name|JabRef
operator|.
name|jrf
argument_list|)
expr_stmt|;
for|for
control|(
name|ParserResult
name|pr
range|:
name|failed
control|)
block|{
name|String
name|message
init|=
literal|"<html>"
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file '%0'."
argument_list|,
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"<p>"
operator|+
name|pr
operator|.
name|getErrorMessage
argument_list|()
operator|+
literal|"</html>"
decl_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|JabRef
operator|.
name|jrf
argument_list|,
name|message
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loaded
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"displayKeyWarningDialogAtStartup"
argument_list|)
operator|&&
name|pr
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
name|String
index|[]
name|wrns
init|=
name|pr
operator|.
name|warnings
argument_list|()
decl_stmt|;
name|StringBuilder
name|wrn
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Math
operator|.
name|min
argument_list|(
name|JabRef
operator|.
name|MAX_DIALOG_WARNINGS
argument_list|,
name|wrns
operator|.
name|length
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
name|wrn
operator|.
name|append
argument_list|(
name|j
operator|+
literal|1
argument_list|)
operator|.
name|append
argument_list|(
literal|". "
argument_list|)
operator|.
name|append
argument_list|(
name|wrns
index|[
name|j
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wrns
operator|.
name|length
operator|>
name|JabRef
operator|.
name|MAX_DIALOG_WARNINGS
condition|)
block|{
name|wrn
operator|.
name|append
argument_list|(
literal|"... "
argument_list|)
expr_stmt|;
name|wrn
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 warnings"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|wrns
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wrn
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|wrn
operator|.
name|deleteCharAt
argument_list|(
name|wrn
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|JabRef
operator|.
name|jrf
operator|.
name|showBaseAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|JabRef
operator|.
name|jrf
argument_list|,
name|wrn
operator|.
name|toString
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warnings"
argument_list|)
operator|+
literal|" ("
operator|+
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// After adding the databases, go through each and see if
comment|// any post open actions need to be done. For instance, checking
comment|// if we found new entry types that can be imported, or checking
comment|// if the database contents should be modified due to new features
comment|// in this version of JabRef.
comment|// Note that we have to check whether i does not go over baseCount().
comment|// This is because importToOpen might have been used, which adds to
comment|// loaded, but not to baseCount()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|i
operator|<
name|loaded
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
name|i
operator|<
name|JabRef
operator|.
name|jrf
operator|.
name|baseCount
argument_list|()
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BasePanel
name|panel
init|=
name|JabRef
operator|.
name|jrf
operator|.
name|baseAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|OpenDatabaseAction
operator|.
name|performPostOpenActions
argument_list|(
name|panel
argument_list|,
name|pr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//Util.pr(": Finished adding panels");
comment|// If any database loading was postponed due to an autosave, schedule them
comment|// for handing now:
if|if
condition|(
name|postponed
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|AutosaveStartupPrompter
name|asp
init|=
operator|new
name|AutosaveStartupPrompter
argument_list|(
name|JabRef
operator|.
name|jrf
argument_list|,
name|postponed
argument_list|)
decl_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|asp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|JabRef
operator|.
name|jrf
operator|.
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|new
name|FocusRequester
argument_list|(
operator|(
operator|(
name|BasePanel
operator|)
name|JabRef
operator|.
name|jrf
operator|.
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|mainTable
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Go through all registered instances of SidePanePlugin, and register them      * in the SidePaneManager.      *      * @param jrf The JabRefFrame.      */
DECL|method|startSidePanePlugins (JabRefFrame jrf)
specifier|private
name|void
name|startSidePanePlugins
parameter_list|(
name|JabRefFrame
name|jrf
parameter_list|)
block|{
name|JabRefPlugin
name|jabrefPlugin
init|=
name|JabRefPlugin
operator|.
name|getInstance
argument_list|(
name|PluginCore
operator|.
name|getManager
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|_JabRefPlugin
operator|.
name|SidePanePluginExtension
argument_list|>
name|plugins
init|=
name|jabrefPlugin
operator|.
name|getSidePanePluginExtensions
argument_list|()
decl_stmt|;
for|for
control|(
name|_JabRefPlugin
operator|.
name|SidePanePluginExtension
name|extension
range|:
name|plugins
control|)
block|{
name|SidePanePlugin
name|plugin
init|=
name|extension
operator|.
name|getSidePanePlugin
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|init
argument_list|(
name|jrf
argument_list|,
name|jrf
operator|.
name|sidePaneManager
argument_list|)
expr_stmt|;
name|SidePaneComponent
name|comp
init|=
name|plugin
operator|.
name|getSidePaneComponent
argument_list|()
decl_stmt|;
name|jrf
operator|.
name|sidePaneManager
operator|.
name|register
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|jrf
operator|.
name|addPluginMenuItem
argument_list|(
name|plugin
operator|.
name|getMenuItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openBibFile (String name, boolean ignoreAutosave)
specifier|public
specifier|static
name|ParserResult
name|openBibFile
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|ignoreAutosave
parameter_list|)
block|{
name|Globals
operator|.
name|logger
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Opening"
argument_list|)
operator|+
literal|": "
operator|+
name|name
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ParserResult
name|pr
init|=
operator|new
name|ParserResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|pr
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setInvalid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"File not found"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pr
return|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|ignoreAutosave
condition|)
block|{
name|boolean
name|autoSaveFound
init|=
name|AutoSaveManager
operator|.
name|newerAutoSaveExists
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|autoSaveFound
condition|)
block|{
comment|// We have found a newer autosave. Make a note of this, so it can be
comment|// handled after startup:
name|ParserResult
name|postp
init|=
operator|new
name|ParserResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|postp
operator|.
name|setPostponedAutosaveFound
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|postp
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|postp
return|;
block|}
block|}
if|if
condition|(
operator|!
name|FileBasedLock
operator|.
name|waitForFileLock
argument_list|(
name|file
argument_list|,
literal|10
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|name
operator|+
literal|"'. "
operator|+
literal|"File is locked by another JabRef instance."
argument_list|)
expr_stmt|;
return|return
name|ParserResult
operator|.
name|FILE_LOCKED
return|;
block|}
name|String
name|encoding
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_ENCODING
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
name|OpenDatabaseAction
operator|.
name|loadDatabase
argument_list|(
name|file
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|==
literal|null
condition|)
block|{
name|pr
operator|=
operator|new
name|ParserResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setInvalid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|pr
return|;
block|}
name|pr
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|pr
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
name|String
index|[]
name|warn
init|=
name|pr
operator|.
name|warnings
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|aWarn
range|:
name|warn
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
name|aWarn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pr
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ParserResult
name|pr
init|=
operator|new
name|ParserResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|pr
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setInvalid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setErrorMessage
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|pr
return|;
block|}
block|}
DECL|method|importFile (String argument)
specifier|private
specifier|static
name|ParserResult
name|importFile
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
name|String
index|[]
name|data
init|=
name|argument
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|data
operator|.
name|length
operator|>
literal|1
operator|)
operator|&&
operator|!
literal|"*"
operator|.
name|equals
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Importing"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|ON_WIN
condition|)
block|{
name|entries
operator|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importFromFile
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|,
name|JabRef
operator|.
name|jrf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entries
operator|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importFromFile
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|data
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"~"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|,
name|JabRef
operator|.
name|jrf
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParserResult
argument_list|(
name|entries
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Unknown import format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// * means "guess the format":
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Importing in unknown format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ImportFormatReader
operator|.
name|UnknownFormatImport
name|importResult
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|ON_WIN
condition|)
block|{
name|importResult
operator|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importUnknownFormat
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|importResult
operator|=
name|Globals
operator|.
name|importFormatReader
operator|.
name|importUnknownFormat
argument_list|(
name|data
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"~"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|importResult
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Format used"
argument_list|)
operator|+
literal|": "
operator|+
name|importResult
operator|.
name|format
argument_list|)
expr_stmt|;
return|return
name|importResult
operator|.
name|parserResult
return|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Could not find a suitable import format."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Will open a file (like importFile), but will also request JabRef to focus on this database       * @param argument See importFile.      * @return ParserResult with setToOpenTab(true)      */
DECL|method|importToOpenBase (String argument)
specifier|private
specifier|static
name|ParserResult
name|importToOpenBase
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
name|ParserResult
name|result
init|=
name|JabRef
operator|.
name|importFile
argument_list|(
name|argument
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setToOpenTab
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

