begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.search.rules
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|search
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|LatexToUnicode
import|;
end_import

begin_comment
comment|/**  * Search rule for contain-based search.  */
end_comment

begin_class
DECL|class|ContainBasedSearchRule
specifier|public
class|class
name|ContainBasedSearchRule
implements|implements
name|SearchRule
block|{
DECL|field|LATEX_TO_UNICODE_FORMATTER
specifier|private
specifier|static
specifier|final
name|LatexToUnicode
name|LATEX_TO_UNICODE_FORMATTER
init|=
operator|new
name|LatexToUnicode
argument_list|()
decl_stmt|;
DECL|field|caseSensitive
specifier|private
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
DECL|method|ContainBasedSearchRule (boolean caseSensitive)
specifier|public
name|ContainBasedSearchRule
parameter_list|(
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
block|}
DECL|method|isCaseSensitive ()
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|caseSensitive
return|;
block|}
annotation|@
name|Override
DECL|method|validateSearchStrings (String query)
specifier|public
name|boolean
name|validateSearchStrings
parameter_list|(
name|String
name|query
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|applyRule (String query, BibEntry bibEntry)
specifier|public
name|boolean
name|applyRule
parameter_list|(
name|String
name|query
parameter_list|,
name|BibEntry
name|bibEntry
parameter_list|)
block|{
name|String
name|searchString
init|=
name|query
decl_stmt|;
if|if
condition|(
operator|!
name|caseSensitive
condition|)
block|{
name|searchString
operator|=
name|searchString
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|unmatchedWords
init|=
operator|new
name|SentenceAnalyzer
argument_list|(
name|searchString
argument_list|)
operator|.
name|getWords
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldKey
range|:
name|bibEntry
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|String
name|formattedFieldContent
init|=
name|bibEntry
operator|.
name|getLatexFreeField
argument_list|(
name|fieldKey
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|caseSensitive
condition|)
block|{
name|formattedFieldContent
operator|=
name|formattedFieldContent
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|unmatchedWordsIterator
init|=
name|unmatchedWords
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|unmatchedWordsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|word
init|=
name|unmatchedWordsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|formattedFieldContent
operator|.
name|contains
argument_list|(
name|word
argument_list|)
condition|)
block|{
name|unmatchedWordsIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|unmatchedWords
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
comment|// Didn't match all words.
block|}
block|}
end_class

end_unit

