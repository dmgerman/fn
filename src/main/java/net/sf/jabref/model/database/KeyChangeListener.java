begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.database
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|event
operator|.
name|EntryRemovedEvent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|event
operator|.
name|FieldChangedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
operator|.
name|Subscribe
import|;
end_import

begin_class
DECL|class|KeyChangeListener
specifier|public
class|class
name|KeyChangeListener
block|{
DECL|field|database
specifier|private
specifier|final
name|BibDatabase
name|database
decl_stmt|;
DECL|field|keyFields
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|keyFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|KeyChangeListener (BibDatabase database)
specifier|public
name|KeyChangeListener
parameter_list|(
name|BibDatabase
name|database
parameter_list|)
block|{
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
comment|// Look for fields with FieldProperies.SINGLE_ENTRY_LINK or FieldProperties.MULTIPLE_ENTRY_LINK to speed up the search later
for|for
control|(
name|String
name|fieldName
range|:
name|InternalBibtexFields
operator|.
name|getAllPublicFieldNames
argument_list|()
control|)
block|{
if|if
condition|(
name|InternalBibtexFields
operator|.
name|getFieldExtras
argument_list|(
name|fieldName
argument_list|)
operator|.
name|contains
argument_list|(
name|FieldProperties
operator|.
name|SINGLE_ENTRY_LINK
argument_list|)
operator|||
name|InternalBibtexFields
operator|.
name|getFieldExtras
argument_list|(
name|fieldName
argument_list|)
operator|.
name|contains
argument_list|(
name|FieldProperties
operator|.
name|MULTIPLE_ENTRY_LINK
argument_list|)
condition|)
block|{
name|keyFields
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Subscribe
DECL|method|listen (FieldChangedEvent event)
specifier|public
name|void
name|listen
parameter_list|(
name|FieldChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|)
condition|)
block|{
name|String
name|newKey
init|=
name|event
operator|.
name|getNewValue
argument_list|()
decl_stmt|;
name|String
name|oldKey
init|=
name|event
operator|.
name|getOldValue
argument_list|()
decl_stmt|;
name|updateEntryLinks
argument_list|(
name|newKey
argument_list|,
name|oldKey
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Subscribe
DECL|method|listen (EntryRemovedEvent event)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryRemovedEvent
name|event
parameter_list|)
block|{
name|String
name|oldKey
init|=
name|event
operator|.
name|getBibEntry
argument_list|()
operator|.
name|getCiteKey
argument_list|()
decl_stmt|;
name|updateEntryLinks
argument_list|(
literal|null
argument_list|,
name|oldKey
argument_list|)
expr_stmt|;
block|}
DECL|method|updateEntryLinks (String newKey, String oldKey)
specifier|private
name|void
name|updateEntryLinks
parameter_list|(
name|String
name|newKey
parameter_list|,
name|String
name|oldKey
parameter_list|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|database
operator|.
name|getEntries
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|field
range|:
name|keyFields
control|)
block|{
name|entry
operator|.
name|getFieldOptional
argument_list|(
name|field
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|fieldContent
lambda|->
block|{
if|if
condition|(
name|InternalBibtexFields
operator|.
name|getFieldExtras
argument_list|(
name|field
argument_list|)
operator|.
name|contains
argument_list|(
name|FieldProperties
operator|.
name|SINGLE_ENTRY_LINK
argument_list|)
condition|)
block|{
name|replaceSingleKeyInField
argument_list|(
name|newKey
argument_list|,
name|oldKey
argument_list|,
name|entry
argument_list|,
name|field
argument_list|,
name|fieldContent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// MULTIPLE_ENTRY_LINK
name|replaceKeyInMultiplesKeyField
argument_list|(
name|newKey
argument_list|,
name|oldKey
argument_list|,
name|entry
argument_list|,
name|field
argument_list|,
name|fieldContent
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|replaceKeyInMultiplesKeyField (String newKey, String oldKey, BibEntry entry, String field, String fieldContent)
specifier|private
name|void
name|replaceKeyInMultiplesKeyField
parameter_list|(
name|String
name|newKey
parameter_list|,
name|String
name|oldKey
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|fieldContent
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldContent
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|keys
operator|.
name|indexOf
argument_list|(
name|oldKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|newKey
operator|==
literal|null
condition|)
block|{
name|keys
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keys
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|newKey
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|keys
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|replaceSingleKeyInField (String newKey, String oldKey, BibEntry entry, String field, String fieldContent)
specifier|private
name|void
name|replaceSingleKeyInField
parameter_list|(
name|String
name|newKey
parameter_list|,
name|String
name|oldKey
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|fieldContent
parameter_list|)
block|{
if|if
condition|(
name|fieldContent
operator|.
name|equals
argument_list|(
name|oldKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|newKey
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|newKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

