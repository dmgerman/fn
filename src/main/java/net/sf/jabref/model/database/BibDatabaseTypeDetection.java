begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.database
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibLatexEntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
DECL|class|BibDatabaseTypeDetection
specifier|public
class|class
name|BibDatabaseTypeDetection
block|{
DECL|field|bibtex
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|EntryType
argument_list|>
name|bibtex
init|=
name|BibtexEntryTypes
operator|.
name|ALL
decl_stmt|;
DECL|field|biblatex
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|EntryType
argument_list|>
name|biblatex
init|=
name|BibLatexEntryTypes
operator|.
name|ALL
decl_stmt|;
DECL|field|exclusiveBiblatex
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|EntryType
argument_list|>
name|exclusiveBiblatex
init|=
name|filterEntryTypes
argument_list|(
name|biblatex
argument_list|,
name|isNotIncludedIn
argument_list|(
name|bibtex
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Tries to infer the database type by examining a BibDatabase database.      *      * All checks are based on the case-insensitive comparison of entry tag names.      * Only standard BibTex and Biblatex entry types are considered in the decision process.      *      * 1. Check if any of the entries is a type exclusive to Biblatex      * 2. Check if any exclusive Biblatex fields are present      * 3. Otherwise return BibTex      *      * @param database a BibDatabase database      * @return the inferred database type      */
DECL|method|inferType (BibDatabase database)
specifier|public
specifier|static
name|BibDatabaseType
name|inferType
parameter_list|(
name|BibDatabase
name|database
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|entryTypes
init|=
name|getEntryTypes
argument_list|(
name|database
operator|.
name|getEntries
argument_list|()
argument_list|)
decl_stmt|;
comment|// type-based check
if|if
condition|(
name|entryTypes
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|isIncludedIn
argument_list|(
name|exclusiveBiblatex
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|BibDatabaseType
operator|.
name|BIBLATEX
return|;
block|}
else|else
block|{
comment|// field-based check
if|if
condition|(
name|database
operator|.
name|getEntries
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|hasBiblatexFields
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|BibDatabaseType
operator|.
name|BIBLATEX
return|;
block|}
block|}
return|return
name|BibDatabaseType
operator|.
name|BIBTEX
return|;
block|}
DECL|method|exclusiveBiblatexFields (String type)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|exclusiveBiblatexFields
parameter_list|(
name|String
name|type
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|EntryType
argument_list|>
name|biblatexType
init|=
name|BibLatexEntryTypes
operator|.
name|getType
argument_list|(
name|type
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|EntryType
argument_list|>
name|bibtexType
init|=
name|BibtexEntryTypes
operator|.
name|getType
argument_list|(
name|type
argument_list|)
decl_stmt|;
comment|// return empty array if this is no Biblatex or BibTex type
if|if
condition|(
operator|!
name|biblatexType
operator|.
name|isPresent
argument_list|()
operator|||
operator|!
name|bibtexType
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|bibtexFields
init|=
name|bibtexType
operator|.
name|get
argument_list|()
operator|.
name|getAllFields
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|biblatexFields
init|=
name|biblatexType
operator|.
name|get
argument_list|()
operator|.
name|getAllFields
argument_list|()
decl_stmt|;
return|return
name|biblatexFields
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|f
lambda|->
operator|!
name|bibtexFields
operator|.
name|contains
argument_list|(
name|f
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getEntryTypes (Collection<BibEntry> collection)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getEntryTypes
parameter_list|(
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|collection
parameter_list|)
block|{
return|return
name|collection
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|BibEntry
operator|::
name|getType
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|filterEntryTypes (List<EntryType> types, Predicate<EntryType> predicate)
specifier|private
specifier|static
name|List
argument_list|<
name|EntryType
argument_list|>
name|filterEntryTypes
parameter_list|(
name|List
argument_list|<
name|EntryType
argument_list|>
name|types
parameter_list|,
name|Predicate
argument_list|<
name|EntryType
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|types
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|predicate
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isNotIncludedIn (List<EntryType> collection)
specifier|private
specifier|static
name|Predicate
argument_list|<
name|EntryType
argument_list|>
name|isNotIncludedIn
parameter_list|(
name|List
argument_list|<
name|EntryType
argument_list|>
name|collection
parameter_list|)
block|{
return|return
name|entry
lambda|->
name|collection
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isIncludedIn (List<EntryType> collection)
specifier|private
specifier|static
name|Predicate
argument_list|<
name|String
argument_list|>
name|isIncludedIn
parameter_list|(
name|List
argument_list|<
name|EntryType
argument_list|>
name|collection
parameter_list|)
block|{
return|return
name|entry
lambda|->
name|collection
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|entry
argument_list|)
argument_list|)
return|;
block|}
DECL|method|hasBiblatexFields ()
specifier|private
specifier|static
name|Predicate
argument_list|<
name|BibEntry
argument_list|>
name|hasBiblatexFields
parameter_list|()
block|{
return|return
name|e
lambda|->
name|e
operator|.
name|getFieldNames
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|name
lambda|->
name|exclusiveBiblatexFields
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|c
lambda|->
name|c
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

