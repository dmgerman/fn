begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.database
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Determines which bibtex cite keys are duplicates in a single {@link BibDatabase}.  */
end_comment

begin_class
DECL|class|DuplicationChecker
class|class
name|DuplicationChecker
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DuplicationChecker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// use a map instead of a set since i need to know how many of each key is in there
DECL|field|allKeys
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|allKeys
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Usage:      *<br>      * isDuplicate=checkForDuplicateKeyAndAdd( null, b.getKey() , issueDuplicateWarning);      *      * If the newkey already exists and is not the same as oldkey it will give a warning      * else it will add the newkey to the to set and remove the oldkey      *      * @return true, if there is a duplicate key, else false      */
DECL|method|checkForDuplicateKeyAndAdd (String oldKey, String newKey)
specifier|public
name|boolean
name|checkForDuplicateKeyAndAdd
parameter_list|(
name|String
name|oldKey
parameter_list|,
name|String
name|newKey
parameter_list|)
block|{
name|boolean
name|duplicate
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|oldKey
operator|==
literal|null
condition|)
block|{
comment|// No old key
name|duplicate
operator|=
name|addKeyToSet
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|oldKey
operator|.
name|equals
argument_list|(
name|newKey
argument_list|)
condition|)
block|{
comment|// were OK because the user did not change keys
name|duplicate
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|removeKeyFromSet
argument_list|(
name|oldKey
argument_list|)
expr_stmt|;
comment|// Get rid of old key
if|if
condition|(
name|newKey
operator|!=
literal|null
condition|)
block|{
comment|// Add new key if any
name|duplicate
operator|=
name|addKeyToSet
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|duplicate
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Warning there is a duplicate key: "
operator|+
name|newKey
argument_list|)
expr_stmt|;
block|}
return|return
name|duplicate
return|;
block|}
comment|/**      * Returns the number of occurrences of the given key in this database.      */
DECL|method|getNumberOfKeyOccurrences (String key)
specifier|public
name|int
name|getNumberOfKeyOccurrences
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Integer
name|numberOfOccurrences
init|=
name|allKeys
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|numberOfOccurrences
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|numberOfOccurrences
return|;
block|}
block|}
comment|/**      * Helper function for counting the number of the key usages.      * Adds the given key to the internal keyset together with the count of it.      * The counter is increased if the key already exists, otherwise set to 1.      *<br>      * Special case: If a null or empty key is passed, it is not counted and thus not added.      *      * Reasoning:      * Consider this: I add a key xxx, then I add another key xxx. I get a warning. I delete the key xxx.      * Consider JabRef simply removing this key from a set of allKeys.      * Then I add another key xxx. I don't get a warning!      * Thus, I need a way to count the number of keys of each type.      * Solution: hashmap=>int (increment each time at add and decrement each time at remove)      */
DECL|method|addKeyToSet (String key)
specifier|protected
name|boolean
name|addKeyToSet
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|(
name|key
operator|==
literal|null
operator|)
operator|||
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
comment|//don't put empty key
block|}
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|allKeys
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// warning
name|exists
operator|=
literal|true
expr_stmt|;
name|allKeys
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|allKeys
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allKeys
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|exists
return|;
block|}
comment|/**      * Helper function for counting the number of the key usages.      * Removes the given key from the internal keyset together with the count of it, if the key is set to 1.      * If it is not set to 1, the counter will be decreased.      *<br>      * Special case: If a null or empty key is passed, it is not counted and thus not removed.      */
DECL|method|removeKeyFromSet (String key)
specifier|protected
name|void
name|removeKeyFromSet
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|(
name|key
operator|==
literal|null
operator|)
operator|||
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|allKeys
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Integer
name|tI
init|=
name|allKeys
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tI
operator|==
literal|1
condition|)
block|{
name|allKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allKeys
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|tI
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

