begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.database
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Determines which bibtex cite keys are duplicates in a single {@link BibDatabase}  */
end_comment

begin_class
DECL|class|DuplicationChecker
class|class
name|DuplicationChecker
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DuplicationChecker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// use a map instead of a set since i need to know how many of each key is in there
DECL|field|allKeys
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|allKeys
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//##########################################
comment|//  usage:
comment|//  isDuplicate=checkForDuplicateKeyAndAdd( null, b.getKey() , issueDuplicateWarning);
comment|//############################################
comment|// if the newkey already exists and is not the same as oldkey it will give a warning
comment|// else it will add the newkey to the to set and remove the oldkey
DECL|method|checkForDuplicateKeyAndAdd (String oldKey, String newKey)
specifier|public
name|boolean
name|checkForDuplicateKeyAndAdd
parameter_list|(
name|String
name|oldKey
parameter_list|,
name|String
name|newKey
parameter_list|)
block|{
comment|// LOGGER.debug(" checkForDuplicateKeyAndAdd [oldKey = " + oldKey + "] [newKey = " + newKey + "]");
name|boolean
name|duplicate
decl_stmt|;
if|if
condition|(
name|oldKey
operator|==
literal|null
condition|)
block|{
comment|// this is a new entry so don't bother removing oldKey
name|duplicate
operator|=
name|addKeyToSet
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|oldKey
operator|.
name|equals
argument_list|(
name|newKey
argument_list|)
condition|)
block|{
comment|// were OK because the user did not change keys
name|duplicate
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// user changed the key
comment|// removed the oldkey
comment|// But what if more than two have the same key?
comment|// this means that user can add another key and would not get a warning!
comment|// consider this: i add a key xxx, then i add another key xxx . I get a warning. I delete the key xxx. JBM
comment|// removes this key from the allKey. then I add another key xxx. I don't get a warning!
comment|// i need a way to count the number of keys of each type
comment|// hashmap=>int (increment each time)
name|removeKeyFromSet
argument_list|(
name|oldKey
argument_list|)
expr_stmt|;
name|duplicate
operator|=
name|addKeyToSet
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|duplicate
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Warning there is a duplicate key: "
operator|+
name|newKey
argument_list|)
expr_stmt|;
block|}
return|return
name|duplicate
return|;
block|}
comment|/**      * Returns the number of occurrences of the given key in this database.      */
DECL|method|getNumberOfKeyOccurrences (String key)
specifier|public
name|int
name|getNumberOfKeyOccurrences
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Object
name|o
init|=
name|allKeys
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|(
name|Integer
operator|)
name|o
return|;
block|}
block|}
comment|//========================================================
comment|// keep track of all the keys to warn if there are duplicates
comment|//========================================================
DECL|method|addKeyToSet (String key)
specifier|public
name|boolean
name|addKeyToSet
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|(
name|key
operator|==
literal|null
operator|)
operator|||
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
comment|//don't put empty key
block|}
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|allKeys
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// warning
name|exists
operator|=
literal|true
expr_stmt|;
name|allKeys
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|allKeys
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// incrementInteger( allKeys.get(key)));
block|}
else|else
block|{
name|allKeys
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|exists
return|;
block|}
comment|//========================================================
comment|// reduce the number of keys by 1. if this number goes to zero then remove from the set
comment|// note: there is a good reason why we should not use a hashset but use hashmap instead
comment|//========================================================
DECL|method|removeKeyFromSet (String key)
specifier|public
name|void
name|removeKeyFromSet
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|(
name|key
operator|==
literal|null
operator|)
operator|||
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|allKeys
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Integer
name|tI
init|=
name|allKeys
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// if(allKeys.get(key) instanceof Integer)
if|if
condition|(
name|tI
operator|==
literal|1
condition|)
block|{
name|allKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allKeys
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|tI
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//decrementInteger( tI ));
block|}
block|}
block|}
block|}
end_class

end_unit

