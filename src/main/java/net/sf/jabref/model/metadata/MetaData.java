begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.metadata
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|AbstractBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|DatabaseBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|GlobalBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|event
operator|.
name|GroupUpdatedEvent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|event
operator|.
name|MetaDataChangedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
operator|.
name|EventBus
import|;
end_import

begin_class
DECL|class|MetaData
specifier|public
class|class
name|MetaData
implements|implements
name|Iterable
argument_list|<
name|String
argument_list|>
block|{
DECL|field|META_FLAG
specifier|public
specifier|static
specifier|final
name|String
name|META_FLAG
init|=
literal|"jabref-meta: "
decl_stmt|;
DECL|field|SAVE_ORDER_CONFIG
specifier|private
specifier|static
specifier|final
name|String
name|SAVE_ORDER_CONFIG
init|=
literal|"saveOrderConfig"
decl_stmt|;
DECL|field|SAVE_ACTIONS
specifier|public
specifier|static
specifier|final
name|String
name|SAVE_ACTIONS
init|=
literal|"saveActions"
decl_stmt|;
DECL|field|PREFIX_KEYPATTERN
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX_KEYPATTERN
init|=
literal|"keypattern_"
decl_stmt|;
DECL|field|KEYPATTERNDEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|KEYPATTERNDEFAULT
init|=
literal|"keypatterndefault"
decl_stmt|;
DECL|field|DATABASE_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|DATABASE_TYPE
init|=
literal|"databaseType"
decl_stmt|;
DECL|field|GROUPSTREE
specifier|public
specifier|static
specifier|final
name|String
name|GROUPSTREE
init|=
literal|"groupstree"
decl_stmt|;
DECL|field|FILE_DIRECTORY
specifier|private
specifier|static
specifier|final
name|String
name|FILE_DIRECTORY
init|=
name|FieldName
operator|.
name|FILE
operator|+
name|FileDirectoryPreferences
operator|.
name|DIR_SUFFIX
decl_stmt|;
DECL|field|PROTECTED_FLAG_META
specifier|private
specifier|static
specifier|final
name|String
name|PROTECTED_FLAG_META
init|=
literal|"protectedFlag"
decl_stmt|;
DECL|field|ESCAPE_CHARACTER
specifier|public
specifier|static
specifier|final
name|char
name|ESCAPE_CHARACTER
init|=
literal|'\\'
decl_stmt|;
DECL|field|SEPARATOR_CHARACTER
specifier|public
specifier|static
specifier|final
name|char
name|SEPARATOR_CHARACTER
init|=
literal|';'
decl_stmt|;
DECL|field|SEPARATOR_STRING
specifier|public
specifier|static
specifier|final
name|String
name|SEPARATOR_STRING
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|SEPARATOR_CHARACTER
argument_list|)
decl_stmt|;
DECL|field|metaData
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|metaData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|groupsRoot
specifier|private
name|GroupTreeNode
name|groupsRoot
decl_stmt|;
DECL|field|eventBus
specifier|private
specifier|final
name|EventBus
name|eventBus
init|=
operator|new
name|EventBus
argument_list|()
decl_stmt|;
DECL|field|bibtexKeyPattern
specifier|private
name|AbstractBibtexKeyPattern
name|bibtexKeyPattern
decl_stmt|;
DECL|field|encoding
specifier|private
name|Charset
name|encoding
decl_stmt|;
comment|/**      * The MetaData object stores all meta data sets in Vectors. To ensure that      * the data is written correctly to string, the user of a meta data Vector      * must simply make sure the appropriate changes are reflected in the Vector      * it has been passed.      */
DECL|method|MetaData (Map<String, List<String>> parsedData)
specifier|public
name|MetaData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parsedData
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|parsedData
argument_list|)
expr_stmt|;
name|clearMetaData
argument_list|()
expr_stmt|;
name|metaData
operator|.
name|putAll
argument_list|(
name|parsedData
argument_list|)
expr_stmt|;
block|}
comment|/**      * The MetaData object can be constructed with no data in it.      */
DECL|method|MetaData ()
specifier|public
name|MetaData
parameter_list|()
block|{
comment|// Do nothing
block|}
DECL|method|MetaData (Charset encoding)
specifier|public
name|MetaData
parameter_list|(
name|Charset
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
DECL|method|setParsedData (Map<String, List<String>> parsedMetaData)
specifier|public
name|void
name|setParsedData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parsedMetaData
parameter_list|)
block|{
name|clearMetaData
argument_list|()
expr_stmt|;
name|metaData
operator|.
name|putAll
argument_list|(
name|parsedMetaData
argument_list|)
expr_stmt|;
block|}
DECL|method|getSaveOrderConfig ()
specifier|public
name|Optional
argument_list|<
name|SaveOrderConfig
argument_list|>
name|getSaveOrderConfig
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|storedSaveOrderConfig
init|=
name|getData
argument_list|(
name|SAVE_ORDER_CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedSaveOrderConfig
operator|!=
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|SaveOrderConfig
operator|.
name|parse
argument_list|(
name|storedSaveOrderConfig
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**      * @return Iterator on all keys stored in the metadata      */
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|metaData
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Retrieves the stored meta data.      *      * @param key the key to look up      * @return null if no data is found      */
DECL|method|getData (String key)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getData
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|metaData
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Removes the given key from metadata.      * Nothing is done if key is not found.      *      * @param key the key to remove      */
DECL|method|remove (String key)
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|metaData
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|//otherwise redundant and disturbing events are going to be posted
name|metaData
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|postChange
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Stores the specified data in this object, using the specified key. For      * certain keys (e.g. "groupstree"), the objects in orderedData are      * reconstructed from their textual (String) representation if they are of      * type String, and stored as an actual instance.      */
DECL|method|putData (String key, List<String> orderedData)
specifier|public
name|void
name|putData
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|orderedData
parameter_list|)
block|{
name|metaData
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|orderedData
argument_list|)
expr_stmt|;
name|postChange
argument_list|()
expr_stmt|;
block|}
DECL|method|getGroups ()
specifier|public
name|Optional
argument_list|<
name|GroupTreeNode
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|groupsRoot
argument_list|)
return|;
block|}
comment|/**      * Sets a new group root node.<b>WARNING</b>: This invalidates everything      * returned by getGroups() so far!!!      */
DECL|method|setGroups (GroupTreeNode root)
specifier|public
name|void
name|setGroups
parameter_list|(
name|GroupTreeNode
name|root
parameter_list|)
block|{
name|groupsRoot
operator|=
name|root
expr_stmt|;
name|eventBus
operator|.
name|post
argument_list|(
operator|new
name|GroupUpdatedEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the stored label patterns      */
DECL|method|getBibtexKeyPattern (GlobalBibtexKeyPattern globalPattern)
specifier|public
name|AbstractBibtexKeyPattern
name|getBibtexKeyPattern
parameter_list|(
name|GlobalBibtexKeyPattern
name|globalPattern
parameter_list|)
block|{
if|if
condition|(
name|bibtexKeyPattern
operator|!=
literal|null
condition|)
block|{
return|return
name|bibtexKeyPattern
return|;
block|}
name|bibtexKeyPattern
operator|=
operator|new
name|DatabaseBibtexKeyPattern
argument_list|(
name|globalPattern
argument_list|)
expr_stmt|;
comment|// read the data from the metadata and store it into the bibtexKeyPattern
for|for
control|(
name|String
name|key
range|:
name|this
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|PREFIX_KEYPATTERN
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|value
init|=
name|getData
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|key
operator|.
name|substring
argument_list|(
name|PREFIX_KEYPATTERN
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|bibtexKeyPattern
operator|.
name|addBibtexKeyPattern
argument_list|(
name|type
argument_list|,
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|defaultPattern
init|=
name|getData
argument_list|(
name|KEYPATTERNDEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultPattern
operator|!=
literal|null
condition|)
block|{
name|bibtexKeyPattern
operator|.
name|setDefaultValue
argument_list|(
name|defaultPattern
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|bibtexKeyPattern
return|;
block|}
comment|/**      * Updates the stored key patterns to the given key patterns.      *      * @param bibtexKeyPattern the key patterns to update to.<br />      *                     A reference to this object is stored internally and is returned at getBibtexKeyPattern();      */
DECL|method|setBibtexKeyPattern (AbstractBibtexKeyPattern bibtexKeyPattern)
specifier|public
name|void
name|setBibtexKeyPattern
parameter_list|(
name|AbstractBibtexKeyPattern
name|bibtexKeyPattern
parameter_list|)
block|{
comment|// remove all keypatterns from metadata
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|this
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|PREFIX_KEYPATTERN
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// set new value if it is not a default value
name|Set
argument_list|<
name|String
argument_list|>
name|allKeys
init|=
name|bibtexKeyPattern
operator|.
name|getAllKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|allKeys
control|)
block|{
if|if
condition|(
operator|!
name|bibtexKeyPattern
operator|.
name|isDefaultValue
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
name|bibtexKeyPattern
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|metaDataKey
init|=
name|PREFIX_KEYPATTERN
operator|+
name|key
decl_stmt|;
name|this
operator|.
name|putData
argument_list|(
name|metaDataKey
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|// store default pattern
if|if
condition|(
name|bibtexKeyPattern
operator|.
name|getDefaultValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|remove
argument_list|(
name|KEYPATTERNDEFAULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
name|bibtexKeyPattern
operator|.
name|getDefaultValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|putData
argument_list|(
name|KEYPATTERNDEFAULT
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|bibtexKeyPattern
operator|=
name|bibtexKeyPattern
expr_stmt|;
block|}
DECL|method|getSaveActions ()
specifier|public
name|Optional
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSaveActions
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|getData
argument_list|(
name|SAVE_ACTIONS
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getMode ()
specifier|public
name|Optional
argument_list|<
name|BibDatabaseMode
argument_list|>
name|getMode
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|data
init|=
name|getData
argument_list|(
name|DATABASE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|data
operator|==
literal|null
operator|)
operator|||
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|BibDatabaseMode
operator|.
name|parse
argument_list|(
name|data
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isProtected ()
specifier|public
name|boolean
name|isProtected
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|data
init|=
name|getData
argument_list|(
name|PROTECTED_FLAG_META
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|data
operator|==
literal|null
operator|)
operator|||
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|data
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|getDefaultFileDirectory ()
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getDefaultFileDirectory
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fileDirectory
init|=
name|getData
argument_list|(
name|FILE_DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|fileDirectory
operator|==
literal|null
operator|)
operator|||
name|fileDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|fileDirectory
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getUserFileDirectory (String user)
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getUserFileDirectory
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fileDirectory
init|=
name|getData
argument_list|(
name|FILE_DIRECTORY
operator|+
literal|'-'
operator|+
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|fileDirectory
operator|==
literal|null
operator|)
operator|||
name|fileDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|fileDirectory
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getMetaData ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getMetaData
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|metaData
argument_list|)
return|;
block|}
DECL|method|setSaveActions (List<String> actionsSerialized)
specifier|public
name|void
name|setSaveActions
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|actionsSerialized
parameter_list|)
block|{
name|putData
argument_list|(
name|SAVE_ACTIONS
argument_list|,
name|actionsSerialized
argument_list|)
expr_stmt|;
block|}
DECL|method|setSaveOrderConfig (SaveOrderConfig saveOrderConfig)
specifier|public
name|void
name|setSaveOrderConfig
parameter_list|(
name|SaveOrderConfig
name|saveOrderConfig
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|serialized
init|=
name|saveOrderConfig
operator|.
name|getAsStringList
argument_list|()
decl_stmt|;
name|putData
argument_list|(
name|SAVE_ORDER_CONFIG
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
block|}
DECL|method|setMode (BibDatabaseMode mode)
specifier|public
name|void
name|setMode
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|putData
argument_list|(
name|DATABASE_TYPE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|mode
operator|.
name|getAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|markAsProtected ()
specifier|public
name|void
name|markAsProtected
parameter_list|()
block|{
name|putData
argument_list|(
name|PROTECTED_FLAG_META
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setDefaultFileDirectory (String path)
specifier|public
name|void
name|setDefaultFileDirectory
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|putData
argument_list|(
name|FILE_DIRECTORY
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|clearDefaultFileDirectory ()
specifier|public
name|void
name|clearDefaultFileDirectory
parameter_list|()
block|{
name|remove
argument_list|(
name|FILE_DIRECTORY
argument_list|)
expr_stmt|;
block|}
DECL|method|setUserFileDirectory (String user, String path)
specifier|public
name|void
name|setUserFileDirectory
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|putData
argument_list|(
name|FILE_DIRECTORY
operator|+
literal|'-'
operator|+
name|user
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|path
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|clearUserFileDirectory (String user)
specifier|public
name|void
name|clearUserFileDirectory
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|remove
argument_list|(
name|FILE_DIRECTORY
operator|+
literal|'-'
operator|+
name|user
argument_list|)
expr_stmt|;
block|}
DECL|method|markAsNotProtected ()
specifier|public
name|void
name|markAsNotProtected
parameter_list|()
block|{
name|remove
argument_list|(
name|PROTECTED_FLAG_META
argument_list|)
expr_stmt|;
block|}
DECL|method|clearSaveActions ()
specifier|public
name|void
name|clearSaveActions
parameter_list|()
block|{
name|remove
argument_list|(
name|SAVE_ACTIONS
argument_list|)
expr_stmt|;
block|}
DECL|method|clearSaveOrderConfig ()
specifier|public
name|void
name|clearSaveOrderConfig
parameter_list|()
block|{
name|remove
argument_list|(
name|SAVE_ORDER_CONFIG
argument_list|)
expr_stmt|;
block|}
comment|/**      * Posts a new {@link MetaDataChangedEvent} on the {@link EventBus}.      */
DECL|method|postChange ()
specifier|public
name|void
name|postChange
parameter_list|()
block|{
name|eventBus
operator|.
name|post
argument_list|(
operator|new
name|MetaDataChangedEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|postGroupChange ()
specifier|public
name|void
name|postGroupChange
parameter_list|()
block|{
name|eventBus
operator|.
name|post
argument_list|(
operator|new
name|MetaDataChangedEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the encoding used during parsing.      */
DECL|method|getEncoding ()
specifier|public
name|Optional
argument_list|<
name|Charset
argument_list|>
name|getEncoding
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|encoding
argument_list|)
return|;
block|}
DECL|method|setEncoding (Charset encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|Charset
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
DECL|method|clearMetaData ()
specifier|public
name|void
name|clearMetaData
parameter_list|()
block|{
name|metaData
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|registerListener (Object listener)
specifier|public
name|void
name|registerListener
parameter_list|(
name|Object
name|listener
parameter_list|)
block|{
name|this
operator|.
name|eventBus
operator|.
name|register
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterListener (Object listener)
specifier|public
name|void
name|unregisterListener
parameter_list|(
name|Object
name|listener
parameter_list|)
block|{
name|this
operator|.
name|eventBus
operator|.
name|unregister
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MetaData
name|strings
init|=
operator|(
name|MetaData
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|metaData
argument_list|,
name|strings
operator|.
name|metaData
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|groupsRoot
argument_list|,
name|strings
operator|.
name|groupsRoot
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|bibtexKeyPattern
argument_list|,
name|strings
operator|.
name|bibtexKeyPattern
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|encoding
argument_list|,
name|strings
operator|.
name|encoding
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|metaData
argument_list|,
name|groupsRoot
argument_list|,
name|bibtexKeyPattern
argument_list|,
name|encoding
argument_list|)
return|;
block|}
block|}
end_class

end_unit

