begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.model.entry
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class defines entry types for BibLatex support.  */
end_comment

begin_class
DECL|class|BibLatexEntryTypes
specifier|public
class|class
name|BibLatexEntryTypes
block|{
comment|/*         "rare" fields?             "annotator", "commentator", "titleaddon", "editora", "editorb", "editorc",             "issuetitle", "issuesubtitle", "origlanguage", "version", "addendum"       */
DECL|field|ARTICLE
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|ARTICLE
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"editor"
block|,
literal|"series"
block|,
literal|"volume"
block|,
literal|"number"
block|,
literal|"eid"
block|,
literal|"issue"
block|,
literal|"pages"
block|,
literal|"note"
block|,
literal|"issn"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllOptional
argument_list|(
literal|"translator"
argument_list|,
literal|"annotator"
argument_list|,
literal|"commentator"
argument_list|,
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"editor"
argument_list|,
literal|"editora"
argument_list|,
literal|"editorb"
argument_list|,
literal|"editorc"
argument_list|,
literal|"journalsubtitle"
argument_list|,
literal|"issuetitle"
argument_list|,
literal|"issuesubtitle"
argument_list|,
literal|"language"
argument_list|,
literal|"origlanguage"
argument_list|,
literal|"series"
argument_list|,
literal|"volume"
argument_list|,
literal|"number"
argument_list|,
literal|"eid"
argument_list|,
literal|"issue"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"pages"
argument_list|,
literal|"version"
argument_list|,
literal|"note"
argument_list|,
literal|"issn"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"journaltitle"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Article"
return|;
block|}
comment|// TODO: number vs issue?
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|BOOK
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|BOOK
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"editor"
block|,
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"maintitle"
block|,
literal|"mainsubtitle"
block|,
literal|"maintitleaddon"
block|,
literal|"volume"
block|,
literal|"edition"
block|,
literal|"publisher"
block|,
literal|"isbn"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"pagetotal"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllOptional
argument_list|(
literal|"editor"
argument_list|,
literal|"editora"
argument_list|,
literal|"editorb"
argument_list|,
literal|"editorc"
argument_list|,
literal|"translator"
argument_list|,
literal|"annotator"
argument_list|,
literal|"commentator"
argument_list|,
literal|"introduction"
argument_list|,
literal|"foreword"
argument_list|,
literal|"afterword"
argument_list|,
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"maintitle"
argument_list|,
literal|"mainsubtitle"
argument_list|,
literal|"maintitleaddon"
argument_list|,
literal|"language"
argument_list|,
literal|"origlanguage"
argument_list|,
literal|"volume"
argument_list|,
literal|"part"
argument_list|,
literal|"edition"
argument_list|,
literal|"volumes"
argument_list|,
literal|"series"
argument_list|,
literal|"number"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"note"
argument_list|,
literal|"publisher"
argument_list|,
literal|"location"
argument_list|,
literal|"isbn"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"pagetotal"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Book"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|INBOOK
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|INBOOK
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bookauthor"
block|,
literal|"editor"
block|,
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"maintitle"
block|,
literal|"mainsubtitle"
block|,
literal|"maintitleaddon"
block|,
literal|"booksubtitle"
block|,
literal|"booktitleaddon"
block|,
literal|"volume"
block|,
literal|"edition"
block|,
literal|"publisher"
block|,
literal|"isbn"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllOptional
argument_list|(
literal|"bookauthor"
argument_list|,
literal|"editor"
argument_list|,
literal|"editora"
argument_list|,
literal|"editorb"
argument_list|,
literal|"editorc"
argument_list|,
literal|"translator"
argument_list|,
literal|"annotator"
argument_list|,
literal|"commentator"
argument_list|,
literal|"introduction"
argument_list|,
literal|"foreword"
argument_list|,
literal|"afterword"
argument_list|,
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"maintitle"
argument_list|,
literal|"mainsubtitle"
argument_list|,
literal|"maintitleaddon"
argument_list|,
literal|"booksubtitle"
argument_list|,
literal|"booktitleaddon"
argument_list|,
literal|"language"
argument_list|,
literal|"origlanguage"
argument_list|,
literal|"volume"
argument_list|,
literal|"part"
argument_list|,
literal|"edition"
argument_list|,
literal|"volumes"
argument_list|,
literal|"series"
argument_list|,
literal|"number"
argument_list|,
literal|"note"
argument_list|,
literal|"publisher"
argument_list|,
literal|"location"
argument_list|,
literal|"isbn"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|,
literal|"year"
argument_list|)
expr_stmt|;
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"booktitle"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"InBook"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|BOOKINBOOK
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|BOOKINBOOK
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"BookInBook"
return|;
block|}
comment|// Same fields as "INBOOK" according to Biblatex 1.0:
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INBOOK
operator|.
name|getRequiredFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INBOOK
operator|.
name|getOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INBOOK
operator|.
name|getPrimaryOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|SUPPBOOK
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|SUPPBOOK
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"SuppBook"
return|;
block|}
comment|// Same fields as "INBOOK" according to Biblatex 1.0:
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INBOOK
operator|.
name|getRequiredFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INBOOK
operator|.
name|getOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INBOOK
operator|.
name|getPrimaryOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|BOOKLET
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|BOOKLET
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"howpublished"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"editor"
argument_list|,
literal|"title"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"language"
argument_list|,
literal|"howpublished"
argument_list|,
literal|"type"
argument_list|,
literal|"note"
argument_list|,
literal|"location"
argument_list|,
literal|"chapter"
argument_list|,
literal|"year"
argument_list|,
literal|"pages"
argument_list|,
literal|"pagetotal"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Booklet"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|COLLECTION
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|COLLECTION
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"translator"
block|,
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"maintitle"
block|,
literal|"mainsubtitle"
block|,
literal|"maintitleaddon"
block|,
literal|"volume"
block|,
literal|"edition"
block|,
literal|"publisher"
block|,
literal|"isbn"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"editor"
argument_list|,
literal|"title"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"editora"
argument_list|,
literal|"editorb"
argument_list|,
literal|"editorc"
argument_list|,
literal|"translator"
argument_list|,
literal|"annotator"
argument_list|,
literal|"commentator"
argument_list|,
literal|"introduction"
argument_list|,
literal|"foreword"
argument_list|,
literal|"afterword"
argument_list|,
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"maintitle"
argument_list|,
literal|"mainsubtitle"
argument_list|,
literal|"maintitleaddon"
argument_list|,
literal|"language"
argument_list|,
literal|"origlanguage"
argument_list|,
literal|"volume"
argument_list|,
literal|"part"
argument_list|,
literal|"edition"
argument_list|,
literal|"volumes"
argument_list|,
literal|"series"
argument_list|,
literal|"number"
argument_list|,
literal|"note"
argument_list|,
literal|"publisher"
argument_list|,
literal|"location"
argument_list|,
literal|"isbn"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"pagetotal"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|,
literal|"year"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Collection"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|INCOLLECTION
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|INCOLLECTION
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"translator"
block|,
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"maintitle"
block|,
literal|"mainsubtitle"
block|,
literal|"maintitleaddon"
block|,
literal|"booksubtitle"
block|,
literal|"booktitleaddon"
block|,
literal|"volume"
block|,
literal|"edition"
block|,
literal|"publisher"
block|,
literal|"isbn"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"editor"
argument_list|,
literal|"title"
argument_list|,
literal|"booktitle"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"editora"
argument_list|,
literal|"editorb"
argument_list|,
literal|"editorc"
argument_list|,
literal|"translator"
argument_list|,
literal|"annotator"
argument_list|,
literal|"commentator"
argument_list|,
literal|"introduction"
argument_list|,
literal|"foreword"
argument_list|,
literal|"afterword"
argument_list|,
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"maintitle"
argument_list|,
literal|"mainsubtitle"
argument_list|,
literal|"maintitleaddon"
argument_list|,
literal|"booksubtitle"
argument_list|,
literal|"booktitleaddon"
argument_list|,
literal|"language"
argument_list|,
literal|"origlanguage"
argument_list|,
literal|"volume"
argument_list|,
literal|"part"
argument_list|,
literal|"edition"
argument_list|,
literal|"volumes"
argument_list|,
literal|"series"
argument_list|,
literal|"number"
argument_list|,
literal|"note"
argument_list|,
literal|"publisher"
argument_list|,
literal|"location"
argument_list|,
literal|"isbn"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|,
literal|"year"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"InCollection"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|SUPPCOLLECTION
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|SUPPCOLLECTION
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"SuppCollection"
return|;
block|}
comment|// Treated as alias of "INCOLLECTION" according to Biblatex 1.0:
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INCOLLECTION
operator|.
name|getRequiredFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INCOLLECTION
operator|.
name|getOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INCOLLECTION
operator|.
name|getPrimaryOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|MANUAL
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|MANUAL
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"edition"
block|,
literal|"publisher"
block|,
literal|"isbn"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"editor"
argument_list|,
literal|"title"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"language"
argument_list|,
literal|"edition"
argument_list|,
literal|"type"
argument_list|,
literal|"series"
argument_list|,
literal|"number"
argument_list|,
literal|"version"
argument_list|,
literal|"note"
argument_list|,
literal|"organization"
argument_list|,
literal|"publisher"
argument_list|,
literal|"location"
argument_list|,
literal|"isbn"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"pagetotal"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|,
literal|"year"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Manual"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|MISC
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|MISC
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"howpublished"
block|,
literal|"location"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"editor"
argument_list|,
literal|"title"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"language"
argument_list|,
literal|"howpublished"
argument_list|,
literal|"type"
argument_list|,
literal|"version"
argument_list|,
literal|"note"
argument_list|,
literal|"organization"
argument_list|,
literal|"location"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Misc"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|ONLINE
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|ONLINE
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"note"
block|,
literal|"organization"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"editor"
argument_list|,
literal|"title"
argument_list|,
literal|"date"
argument_list|,
literal|"url"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"language"
argument_list|,
literal|"version"
argument_list|,
literal|"note"
argument_list|,
literal|"organization"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Online"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|PATENT
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|PATENT
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"holder"
block|,
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"number"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"holder"
argument_list|,
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"type"
argument_list|,
literal|"version"
argument_list|,
literal|"location"
argument_list|,
literal|"note"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Patent"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|PERIODICAL
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|PERIODICAL
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"issuetitle"
block|,
literal|"issuesubtitle"
block|,
literal|"issn"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"editor"
argument_list|,
literal|"title"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"editora"
argument_list|,
literal|"editorb"
argument_list|,
literal|"editorc"
argument_list|,
literal|"subtitle"
argument_list|,
literal|"issuetitle"
argument_list|,
literal|"issuesubtitle"
argument_list|,
literal|"language"
argument_list|,
literal|"series"
argument_list|,
literal|"volume"
argument_list|,
literal|"number"
argument_list|,
literal|"issue"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"note"
argument_list|,
literal|"issn"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Periodical"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|SUPPPERIODICAL
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|SUPPPERIODICAL
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"SuppPeriodical"
return|;
block|}
comment|// Treated as alias of "ARTICLE" according to Biblatex 1.0:
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|ARTICLE
operator|.
name|getRequiredFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|ARTICLE
operator|.
name|getOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|ARTICLE
operator|.
name|getPrimaryOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|PROCEEDINGS
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|PROCEEDINGS
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"maintitle"
block|,
literal|"mainsubtitle"
block|,
literal|"maintitleaddon"
block|,
literal|"eventtitle"
block|,
literal|"volume"
block|,
literal|"publisher"
block|,
literal|"isbn"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"pagetotal"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"editor"
argument_list|,
literal|"title"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"maintitle"
argument_list|,
literal|"mainsubtitle"
argument_list|,
literal|"maintitleaddon"
argument_list|,
literal|"eventtitle"
argument_list|,
literal|"eventdate"
argument_list|,
literal|"venue"
argument_list|,
literal|"language"
argument_list|,
literal|"volume"
argument_list|,
literal|"part"
argument_list|,
literal|"volumes"
argument_list|,
literal|"series"
argument_list|,
literal|"number"
argument_list|,
literal|"note"
argument_list|,
literal|"organization"
argument_list|,
literal|"publisher"
argument_list|,
literal|"location"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"isbn"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"pagetotal"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Proceedings"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|INPROCEEDINGS
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|INPROCEEDINGS
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"maintitle"
block|,
literal|"mainsubtitle"
block|,
literal|"maintitleaddon"
block|,
literal|"booksubtitle"
block|,
literal|"booktitleaddon"
block|,
literal|"eventtitle"
block|,
literal|"volume"
block|,
literal|"publisher"
block|,
literal|"isbn"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"editor"
argument_list|,
literal|"title"
argument_list|,
literal|"booktitle"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"maintitle"
argument_list|,
literal|"mainsubtitle"
argument_list|,
literal|"maintitleaddon"
argument_list|,
literal|"booksubtitle"
argument_list|,
literal|"booktitleaddon"
argument_list|,
literal|"eventtitle"
argument_list|,
literal|"eventdate"
argument_list|,
literal|"venue"
argument_list|,
literal|"language"
argument_list|,
literal|"volume"
argument_list|,
literal|"part"
argument_list|,
literal|"volumes"
argument_list|,
literal|"series"
argument_list|,
literal|"number"
argument_list|,
literal|"note"
argument_list|,
literal|"organization"
argument_list|,
literal|"publisher"
argument_list|,
literal|"location"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"isbn"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"InProceedings"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|REFERENCE
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|REFERENCE
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Reference"
return|;
block|}
comment|// Treated as alias of "COLLECTION" according to Biblatex 1.0:
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|COLLECTION
operator|.
name|getRequiredFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|COLLECTION
operator|.
name|getOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|COLLECTION
operator|.
name|getPrimaryOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|INREFERENCE
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|INREFERENCE
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"InReference"
return|;
block|}
comment|// Treated as alias of "INCOLLECTION" according to Biblatex 1.0:
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INCOLLECTION
operator|.
name|getRequiredFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INCOLLECTION
operator|.
name|getOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INCOLLECTION
operator|.
name|getPrimaryOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|REPORT
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|REPORT
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"number"
block|,
literal|"isrn"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"pagetotal"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"type"
argument_list|,
literal|"institution"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"language"
argument_list|,
literal|"number"
argument_list|,
literal|"version"
argument_list|,
literal|"note"
argument_list|,
literal|"location"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"isrn"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"pagetotal"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Report"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|SET
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|SET
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
block|{
name|addAllRequired
argument_list|(
literal|"entryset"
argument_list|,
literal|"crossref"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Set"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|THESIS
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|THESIS
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"pagetotal"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"type"
argument_list|,
literal|"institution"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"language"
argument_list|,
literal|"note"
argument_list|,
literal|"location"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"pagetotal"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Thesis"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|UNPUBLISHED
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|UNPUBLISHED
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"howpublished"
block|,
literal|"pubstate"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"language"
argument_list|,
literal|"howpublished"
argument_list|,
literal|"note"
argument_list|,
literal|"location"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Unpublished"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// === Type aliases: ===
DECL|field|CONFERENCE
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|CONFERENCE
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Conference"
return|;
block|}
comment|// Treated as alias of "INPROCEEDINGS" according to Biblatex 1.0:
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INPROCEEDINGS
operator|.
name|getRequiredFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INPROCEEDINGS
operator|.
name|getOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|INPROCEEDINGS
operator|.
name|getPrimaryOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|ELECTRONIC
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|ELECTRONIC
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Electronic"
return|;
block|}
comment|// Treated as alias of "ONLINE" according to Biblatex 1.0:
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|ONLINE
operator|.
name|getRequiredFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|ONLINE
operator|.
name|getOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|ONLINE
operator|.
name|getPrimaryOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|MASTERSTHESIS
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|MASTERSTHESIS
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"type"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"pagetotal"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
comment|// Treated as alias of "THESIS", except "type" field is optional
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"institution"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"type"
argument_list|,
literal|"language"
argument_list|,
literal|"note"
argument_list|,
literal|"location"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"pagetotal"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"MastersThesis"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|PHDTHESIS
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|PHDTHESIS
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"type"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"pagetotal"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
comment|// Treated as alias of "THESIS", except "type" field is optional
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"institution"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"type"
argument_list|,
literal|"language"
argument_list|,
literal|"note"
argument_list|,
literal|"location"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"pagetotal"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"PhdThesis"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|TECHREPORT
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|TECHREPORT
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptionalFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"subtitle"
block|,
literal|"titleaddon"
block|,
literal|"type"
block|,
literal|"number"
block|,
literal|"isrn"
block|,
literal|"chapter"
block|,
literal|"pages"
block|,
literal|"pagetotal"
block|,
literal|"doi"
block|,
literal|"eprint"
block|,
literal|"eprintclass"
block|,
literal|"eprinttype"
block|,
literal|"url"
block|,
literal|"urldate"
block|}
argument_list|)
argument_list|)
decl_stmt|;
block|{
comment|// Treated as alias of "REPORT", except "type" field is optional
name|addAllRequired
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"institution"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|addAllOptional
argument_list|(
literal|"subtitle"
argument_list|,
literal|"titleaddon"
argument_list|,
literal|"type"
argument_list|,
literal|"language"
argument_list|,
literal|"number"
argument_list|,
literal|"version"
argument_list|,
literal|"note"
argument_list|,
literal|"location"
argument_list|,
literal|"month"
argument_list|,
literal|"year"
argument_list|,
literal|"isrn"
argument_list|,
literal|"chapter"
argument_list|,
literal|"pages"
argument_list|,
literal|"pagetotal"
argument_list|,
literal|"addendum"
argument_list|,
literal|"pubstate"
argument_list|,
literal|"doi"
argument_list|,
literal|"eprint"
argument_list|,
literal|"eprintclass"
argument_list|,
literal|"eprinttype"
argument_list|,
literal|"url"
argument_list|,
literal|"urldate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"TechReport"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|primaryOptionalFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|WWW
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|WWW
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"WWW"
return|;
block|}
comment|// Treated as alias of "ONLINE" according to Biblatex 1.0:
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|ONLINE
operator|.
name|getRequiredFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|ONLINE
operator|.
name|getOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|BibLatexEntryTypes
operator|.
name|ONLINE
operator|.
name|getPrimaryOptionalFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
name|entry
operator|.
name|allFieldsPresent
argument_list|(
name|getRequiredFields
argument_list|()
argument_list|,
name|database
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**      * This type is used for IEEEtran.bst to control various      * be repeated or not. Not a very elegant solution, but it works...      */
DECL|field|IEEETRANBSTCTL
specifier|public
specifier|static
specifier|final
name|BibtexEntryType
name|IEEETRANBSTCTL
init|=
operator|new
name|BibtexEntryType
argument_list|()
block|{
block|{
name|addAllOptional
argument_list|(
literal|"ctluse_article_number"
argument_list|,
literal|"ctluse_paper"
argument_list|,
literal|"ctluse_forced_etal"
argument_list|,
literal|"ctlmax_names_forced_etal"
argument_list|,
literal|"ctlnames_show_etal"
argument_list|,
literal|"ctluse_alt_spacing"
argument_list|,
literal|"ctlalt_stretch_factor"
argument_list|,
literal|"ctldash_repeated_names"
argument_list|,
literal|"ctlname_format_string"
argument_list|,
literal|"ctlname_latex_cmd"
argument_list|,
literal|"ctlname_url_prefix"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"IEEEtranBSTCTL"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAllRequiredFields
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|,
name|BibtexDatabase
name|database
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

