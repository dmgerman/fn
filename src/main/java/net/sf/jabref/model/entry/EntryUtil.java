begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.entry
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_class
DECL|class|EntryUtil
specifier|public
class|class
name|EntryUtil
block|{
DECL|field|SEPARATING_CHARS_NOSPACE
specifier|public
specifier|static
specifier|final
name|String
name|SEPARATING_CHARS_NOSPACE
init|=
literal|";,\n"
decl_stmt|;
comment|/**      * Static equals that can also return the right result when one of the objects is null.      *      * @param one The object whose equals method is called if the first is not null.      * @param two The object passed to the first one if the first is not null.      * @return<code>one == null ? two == null : one.equals(two);</code>      */
DECL|method|equals (Object one, Object two)
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|Object
name|one
parameter_list|,
name|Object
name|two
parameter_list|)
block|{
return|return
name|one
operator|==
literal|null
condition|?
name|two
operator|==
literal|null
else|:
name|one
operator|.
name|equals
argument_list|(
name|two
argument_list|)
return|;
block|}
comment|/**      * Make first character of String uppercase, and the      * rest lowercase.      */
DECL|method|capitalizeFirst (String toCapitalize)
specifier|public
specifier|static
name|String
name|capitalizeFirst
parameter_list|(
name|String
name|toCapitalize
parameter_list|)
block|{
if|if
condition|(
name|toCapitalize
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
name|toCapitalize
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|toCapitalize
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|toCapitalize
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|toCapitalize
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
block|}
comment|/**      * Build a String array containing all those elements of all that are not      * in subset.      *      * @param all The array of all values.      * @param subset The subset of values.      * @return The remainder that is not part of the subset. - The result MUST NOT be modified      */
DECL|method|getRemainder (List<String> all, List<String> subset)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getRemainder
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|all
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|subset
parameter_list|)
block|{
if|if
condition|(
name|subset
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// ensure that "all" does not get modified
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|all
argument_list|)
return|;
block|}
if|if
condition|(
name|all
operator|.
name|equals
argument_list|(
name|subset
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|al
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|anAll
range|:
name|all
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|aSubset
range|:
name|subset
control|)
block|{
if|if
condition|(
name|aSubset
operator|.
name|equals
argument_list|(
name|anAll
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|al
operator|.
name|add
argument_list|(
name|anAll
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|al
return|;
block|}
comment|/**      * @param keywords a String of keywords      * @return an List containing the keywords. An emtpy list if keywords are null or empty      */
DECL|method|getSeparatedKeywords (String keywords)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSeparatedKeywords
parameter_list|(
name|String
name|keywords
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|keywords
operator|==
literal|null
condition|)
block|{
return|return
name|res
return|;
block|}
comment|// _NOSPACE is a hack to support keywords such as "choreography transactions"
comment|// a more intelligent algorithm would check for the separator chosen (SEPARATING_CHARS_NOSPACE)
comment|// if nothing is found, " " is likely to be the separating char.
comment|// solution by RisKeywords.java: s.split(",[ ]*")
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|keywords
argument_list|,
name|SEPARATING_CHARS_NOSPACE
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|word
init|=
name|tok
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

