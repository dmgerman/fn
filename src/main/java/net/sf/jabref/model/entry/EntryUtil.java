begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.entry
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
DECL|class|EntryUtil
specifier|public
class|class
name|EntryUtil
block|{
comment|/**      * Static equals that can also return the right result when one of the objects is null.      *      * @param one The object whose equals method is called if the first is not null.      * @param two The object passed to the first one if the first is not null.      * @return<code>one == null ? two == null : one.equals(two);</code>      */
DECL|method|equals (Object one, Object two)
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|Object
name|one
parameter_list|,
name|Object
name|two
parameter_list|)
block|{
return|return
name|one
operator|==
literal|null
condition|?
name|two
operator|==
literal|null
else|:
name|one
operator|.
name|equals
argument_list|(
name|two
argument_list|)
return|;
block|}
DECL|method|capitalizeFirst (String toCapitalize)
specifier|public
specifier|static
name|String
name|capitalizeFirst
parameter_list|(
name|String
name|toCapitalize
parameter_list|)
block|{
comment|// Make first character of String uppercase, and the
comment|// rest lowercase.
if|if
condition|(
name|toCapitalize
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
name|toCapitalize
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|toCapitalize
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|toCapitalize
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|toCapitalize
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
block|}
comment|/**      * Build a String array containing all those elements of all that are not      * in subset.      * @param all The array of all values.      * @param subset The subset of values.      * @return The remainder that is not part of the subset.      */
DECL|method|getRemainder (String[] all, String[] subset)
specifier|public
specifier|static
name|String
index|[]
name|getRemainder
parameter_list|(
name|String
index|[]
name|all
parameter_list|,
name|String
index|[]
name|subset
parameter_list|)
block|{
if|if
condition|(
name|subset
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|all
return|;
block|}
if|if
condition|(
name|all
operator|.
name|equals
argument_list|(
name|subset
argument_list|)
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|al
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|anAll
range|:
name|all
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|aSubset
range|:
name|subset
control|)
block|{
if|if
condition|(
name|aSubset
operator|.
name|equals
argument_list|(
name|anAll
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|al
operator|.
name|add
argument_list|(
name|anAll
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|al
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|al
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** 	 * Concatenate two String arrays 	 * 	 * @param array1 	 *            the first string array 	 * @param array2 	 *            the second string array 	 * @return The concatenation of array1 and array2 	 */
DECL|method|arrayConcat (String[] array1, String[] array2)
specifier|public
specifier|static
name|String
index|[]
name|arrayConcat
parameter_list|(
name|String
index|[]
name|array1
parameter_list|,
name|String
index|[]
name|array2
parameter_list|)
block|{
name|int
name|len1
init|=
name|array1
operator|.
name|length
decl_stmt|;
name|int
name|len2
init|=
name|array2
operator|.
name|length
decl_stmt|;
name|String
index|[]
name|union
init|=
operator|new
name|String
index|[
name|len1
operator|+
name|len2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array1
argument_list|,
literal|0
argument_list|,
name|union
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array2
argument_list|,
literal|0
argument_list|,
name|union
argument_list|,
name|len1
argument_list|,
name|len2
argument_list|)
expr_stmt|;
return|return
name|union
return|;
block|}
block|}
end_class

end_unit

