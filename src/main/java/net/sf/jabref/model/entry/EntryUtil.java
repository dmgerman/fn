begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.entry
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_class
DECL|class|EntryUtil
specifier|public
class|class
name|EntryUtil
block|{
DECL|field|SEPARATING_CHARS_NOSPACE
specifier|public
specifier|static
specifier|final
name|String
name|SEPARATING_CHARS_NOSPACE
init|=
literal|";,\n"
decl_stmt|;
comment|/**      * Make first character of String uppercase, and the      * rest lowercase.      */
DECL|method|capitalizeFirst (String toCapitalize)
specifier|public
specifier|static
name|String
name|capitalizeFirst
parameter_list|(
name|String
name|toCapitalize
parameter_list|)
block|{
if|if
condition|(
name|toCapitalize
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
name|toCapitalize
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|toCapitalize
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|toCapitalize
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|toCapitalize
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
block|}
comment|/**      * @param keywordString a String of keywords      * @return an List containing the keywords. An empty list if keywords are null or empty      */
DECL|method|getSeparatedKeywords (String keywordString)
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getSeparatedKeywords
parameter_list|(
name|String
name|keywordString
parameter_list|)
block|{
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|keywords
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|keywordString
operator|==
literal|null
condition|)
block|{
return|return
name|keywords
return|;
block|}
comment|// _NOSPACE is a hack to support keywords such as "choreography transactions"
comment|// a more intelligent algorithm would check for the separator chosen (SEPARATING_CHARS_NOSPACE)
comment|// if nothing is found, " " is likely to be the separating char.
comment|// solution by RisKeywords.java: s.split(",[ ]*")
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|keywordString
argument_list|,
name|SEPARATING_CHARS_NOSPACE
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|word
init|=
name|tok
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|keywords
operator|.
name|add
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
return|return
name|keywords
return|;
block|}
comment|/**      * @param entry a BibEntry      * @return an List containing the keywords of the entry. An empty list if keywords are null or empty      */
DECL|method|getSeparatedKeywords (BibEntry entry)
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getSeparatedKeywords
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
return|return
name|getSeparatedKeywords
argument_list|(
name|entry
operator|.
name|getFieldOptional
argument_list|(
name|FieldName
operator|.
name|KEYWORDS
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a list of words contained in the given text.      * Whitespace, comma and semicolon are considered as separator between words.      *      * @param text the input      * @return a list of words      */
DECL|method|getStringAsWords (String text)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getStringAsWords
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|text
operator|.
name|split
argument_list|(
literal|"[\\s,;]+"
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

