begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.entry
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|EntryTypes
specifier|public
class|class
name|EntryTypes
block|{
DECL|field|ALL_TYPES
specifier|private
specifier|static
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|BibtexEntryType
argument_list|>
name|ALL_TYPES
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|STANDARD_TYPES
specifier|private
specifier|static
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|BibtexEntryType
argument_list|>
name|STANDARD_TYPES
decl_stmt|;
static|static
block|{
comment|// Put the standard entry types into the type map.
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|BIBLATEX_MODE
argument_list|)
condition|)
block|{
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"article"
argument_list|,
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"inbook"
argument_list|,
name|BibtexEntryTypes
operator|.
name|INBOOK
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"book"
argument_list|,
name|BibtexEntryTypes
operator|.
name|BOOK
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"booklet"
argument_list|,
name|BibtexEntryTypes
operator|.
name|BOOKLET
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"incollection"
argument_list|,
name|BibtexEntryTypes
operator|.
name|INCOLLECTION
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"conference"
argument_list|,
name|BibtexEntryTypes
operator|.
name|CONFERENCE
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"inproceedings"
argument_list|,
name|BibtexEntryTypes
operator|.
name|INPROCEEDINGS
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"proceedings"
argument_list|,
name|BibtexEntryTypes
operator|.
name|PROCEEDINGS
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"manual"
argument_list|,
name|BibtexEntryTypes
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"mastersthesis"
argument_list|,
name|BibtexEntryTypes
operator|.
name|MASTERSTHESIS
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"phdthesis"
argument_list|,
name|BibtexEntryTypes
operator|.
name|PHDTHESIS
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"techreport"
argument_list|,
name|BibtexEntryTypes
operator|.
name|TECHREPORT
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"unpublished"
argument_list|,
name|BibtexEntryTypes
operator|.
name|UNPUBLISHED
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"patent"
argument_list|,
name|BibtexEntryTypes
operator|.
name|PATENT
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"standard"
argument_list|,
name|BibtexEntryTypes
operator|.
name|STANDARD
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"electronic"
argument_list|,
name|BibtexEntryTypes
operator|.
name|ELECTRONIC
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"periodical"
argument_list|,
name|BibtexEntryTypes
operator|.
name|PERIODICAL
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"misc"
argument_list|,
name|BibtexEntryTypes
operator|.
name|MISC
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"other"
argument_list|,
name|BibtexEntryTypes
operator|.
name|OTHER
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"ieeetranbstctl"
argument_list|,
name|BibtexEntryTypes
operator|.
name|IEEETRANBSTCTL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"article"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"book"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|BOOK
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"inbook"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|INBOOK
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"bookinbook"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|BOOKINBOOK
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"suppbook"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|SUPPBOOK
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"booklet"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|BOOKLET
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"incollection"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|INCOLLECTION
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"suppcollection"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|SUPPCOLLECTION
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"manual"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"misc"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|MISC
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"online"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|ONLINE
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"patent"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|PATENT
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"periodical"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|PERIODICAL
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"suppperiodical"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|SUPPPERIODICAL
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"proceedings"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|PROCEEDINGS
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"inproceedings"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|INPROCEEDINGS
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"reference"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"inreference"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|INREFERENCE
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"report"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|REPORT
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"set"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|SET
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"thesis"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|THESIS
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"unpublished"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|UNPUBLISHED
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"conference"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|CONFERENCE
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"electronic"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|ELECTRONIC
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"mastersthesis"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|MASTERSTHESIS
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"phdthesis"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|PHDTHESIS
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"techreport"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|TECHREPORT
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"www"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|WWW
argument_list|)
expr_stmt|;
name|ALL_TYPES
operator|.
name|put
argument_list|(
literal|"ieeetranbstctl"
argument_list|,
name|BibLatexEntryTypes
operator|.
name|IEEETRANBSTCTL
argument_list|)
expr_stmt|;
block|}
comment|// We need a record of the standard types, in case the user wants
comment|// to remove a customized version. Therefore we clone the map.
name|STANDARD_TYPES
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|ALL_TYPES
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method returns the BibtexEntryType for the name of a type,      * or null if it does not exist.      */
DECL|method|getType (String name)
specifier|public
specifier|static
name|BibtexEntryType
name|getType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|BibtexEntryType
name|entryType
init|=
name|ALL_TYPES
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|entryType
return|;
block|}
block|}
comment|/**      * This method returns the standard BibtexEntryType for the      * name of a type, or null if it does not exist.      */
DECL|method|getStandardType (String name)
specifier|public
specifier|static
name|BibtexEntryType
name|getStandardType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|BibtexEntryType
name|entryType
init|=
name|STANDARD_TYPES
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|entryType
return|;
block|}
block|}
DECL|method|addOrModifyCustomEntryType (CustomEntryType type)
specifier|public
specifier|static
name|void
name|addOrModifyCustomEntryType
parameter_list|(
name|CustomEntryType
name|type
parameter_list|)
block|{
name|ALL_TYPES
operator|.
name|put
argument_list|(
name|type
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllTypes ()
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getAllTypes
parameter_list|()
block|{
return|return
name|ALL_TYPES
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getAllValues ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|BibtexEntryType
argument_list|>
name|getAllValues
parameter_list|()
block|{
return|return
name|ALL_TYPES
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**      * Removes a customized entry type from the type map. If this type      * overrode a standard type, we reinstate the standard one.      *      * @param name The customized entry type to remove.      */
DECL|method|removeType (String name)
specifier|public
specifier|static
name|void
name|removeType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|toLowerCase
init|=
name|name
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|ALL_TYPES
operator|.
name|remove
argument_list|(
name|toLowerCase
argument_list|)
expr_stmt|;
if|if
condition|(
name|STANDARD_TYPES
operator|.
name|get
argument_list|(
name|toLowerCase
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// In this case the user has removed a customized version
comment|// of a standard type. We reinstate the standard type.
name|addOrModifyCustomEntryType
argument_list|(
operator|(
name|CustomEntryType
operator|)
name|STANDARD_TYPES
operator|.
name|get
argument_list|(
name|toLowerCase
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

