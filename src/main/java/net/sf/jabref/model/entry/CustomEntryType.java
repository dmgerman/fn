begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.model.entry
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * This class is used to represent customized entry types.  */
end_comment

begin_class
DECL|class|CustomEntryType
specifier|public
class|class
name|CustomEntryType
implements|implements
name|EntryType
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CustomEntryType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ENTRYTYPE_FLAG
specifier|public
specifier|static
specifier|final
name|String
name|ENTRYTYPE_FLAG
init|=
literal|"jabref-entrytype: "
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|required
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|required
decl_stmt|;
DECL|field|optional
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|optional
decl_stmt|;
DECL|field|primaryOptional
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptional
decl_stmt|;
DECL|method|CustomEntryType (String name, List<String> required, List<String> primaryOptional, List<String> secondaryOptional)
specifier|public
name|CustomEntryType
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|required
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|primaryOptional
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|secondaryOptional
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|EntryUtil
operator|.
name|capitalizeFirst
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|primaryOptional
operator|=
name|primaryOptional
expr_stmt|;
name|this
operator|.
name|required
operator|=
name|required
expr_stmt|;
name|this
operator|.
name|optional
operator|=
name|Stream
operator|.
name|concat
argument_list|(
name|primaryOptional
operator|.
name|stream
argument_list|()
argument_list|,
name|secondaryOptional
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|CustomEntryType (String name, List<String> required, List<String> optional)
specifier|public
name|CustomEntryType
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|required
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|optional
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|EntryUtil
operator|.
name|capitalizeFirst
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|required
operator|=
name|required
expr_stmt|;
name|this
operator|.
name|optional
operator|=
name|optional
expr_stmt|;
name|this
operator|.
name|primaryOptional
operator|=
name|optional
expr_stmt|;
block|}
DECL|method|CustomEntryType (String name, String required, String optional)
specifier|public
name|CustomEntryType
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|required
parameter_list|,
name|String
name|optional
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|required
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|optional
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo (EntryType o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|EntryType
name|o
parameter_list|)
block|{
return|return
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|CustomEntryType
condition|)
block|{
return|return
operator|(
name|this
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|CustomEntryType
operator|)
name|o
operator|)
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getOptionalFields ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOptionalFields
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|optional
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRequiredFields ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|required
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPrimaryOptionalFields ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|primaryOptional
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSecondaryOptionalFields ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSecondaryOptionalFields
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|EntryUtil
operator|.
name|getRemainder
argument_list|(
name|optional
argument_list|,
name|primaryOptional
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get a String describing the required field set for this entry type.      *      * @return Description of required field set for storage in preferences or bib file.      */
DECL|method|getRequiredFieldsString ()
specifier|public
name|String
name|getRequiredFieldsString
parameter_list|()
block|{
name|StringBuilder
name|serialization
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|required
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|serialization
operator|.
name|append
argument_list|(
name|required
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
operator|(
name|required
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|serialization
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|serialization
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

