begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.model.entry
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialField
import|;
end_import

begin_comment
comment|/**  * Handling of bibtex fields.  * All bibtex-field related stuff should be placed here!  * Because we can export these informations into additional  * config files -> simple extension and definition of new fields....  *  * TODO:  *  - handling of identically fields with different names  *    e.g. LCCN = lib-congress  *  - group id for each fields, e.g. standard, jurabib, bio....  *  - add a additional properties functionality into the BibtexSingleField class  */
end_comment

begin_class
DECL|class|InternalBibtexFields
specifier|public
class|class
name|InternalBibtexFields
block|{
comment|// contains all bibtex-field objects (BibtexSingleField)
DECL|field|fieldSet
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BibtexSingleField
argument_list|>
name|fieldSet
decl_stmt|;
comment|// the name with the current time stamp field, needed in case we want to change it
DECL|field|timeStampField
specifier|private
name|String
name|timeStampField
decl_stmt|;
comment|// Lists of fields with special properties
DECL|field|INTEGER_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|INTEGER_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldName
operator|.
name|CTLMAX_NAMES_FORCED_ETAL
argument_list|,
name|FieldName
operator|.
name|CTLNAMES_SHOW_ETAL
argument_list|,
name|FieldName
operator|.
name|CTLALT_STRETCH_FACTOR
argument_list|,
name|FieldName
operator|.
name|VOLUMES
argument_list|,
name|FieldName
operator|.
name|PMID
argument_list|)
decl_stmt|;
DECL|field|IEEETRANBSTCTL_YES_NO_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|IEEETRANBSTCTL_YES_NO_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldName
operator|.
name|CTLUSE_ARTICLE_NUMBER
argument_list|,
name|FieldName
operator|.
name|CTLUSE_PAPER
argument_list|,
name|FieldName
operator|.
name|CTLUSE_URL
argument_list|,
name|FieldName
operator|.
name|CTLUSE_FORCED_ETAL
argument_list|,
name|FieldName
operator|.
name|CTLUSE_ALT_SPACING
argument_list|,
name|FieldName
operator|.
name|CTLDASH_REPEATED_NAMES
argument_list|)
decl_stmt|;
DECL|field|BIBLATEX_DATE_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BIBLATEX_DATE_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|,
name|FieldName
operator|.
name|EVENTDATE
argument_list|,
name|FieldName
operator|.
name|ORIGDATE
argument_list|,
name|FieldName
operator|.
name|URLDATE
argument_list|)
decl_stmt|;
DECL|field|BIBLATEX_PERSON_NAME_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BIBLATEX_PERSON_NAME_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
name|FieldName
operator|.
name|EDITOR
argument_list|,
name|FieldName
operator|.
name|EDITORA
argument_list|,
name|FieldName
operator|.
name|EDITORB
argument_list|,
name|FieldName
operator|.
name|EDITORC
argument_list|,
name|FieldName
operator|.
name|TRANSLATOR
argument_list|,
name|FieldName
operator|.
name|ANNOTATOR
argument_list|,
name|FieldName
operator|.
name|COMMENTATOR
argument_list|,
name|FieldName
operator|.
name|INTRODUCTION
argument_list|,
name|FieldName
operator|.
name|FOREWORD
argument_list|,
name|FieldName
operator|.
name|AFTERWORD
argument_list|,
name|FieldName
operator|.
name|BOOKAUTHOR
argument_list|,
name|FieldName
operator|.
name|HOLDER
argument_list|,
name|FieldName
operator|.
name|SHORTAUTHOR
argument_list|,
name|FieldName
operator|.
name|SHORTEDITOR
argument_list|,
name|FieldName
operator|.
name|SORTNAME
argument_list|,
name|FieldName
operator|.
name|NAMEADDON
argument_list|,
name|FieldName
operator|.
name|ASSIGNEE
argument_list|)
decl_stmt|;
DECL|field|BIBLATEX_EDITOR_TYPE_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BIBLATEX_EDITOR_TYPE_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldName
operator|.
name|EDITORTYPE
argument_list|,
name|FieldName
operator|.
name|EDITORATYPE
argument_list|,
name|FieldName
operator|.
name|EDITORBTYPE
argument_list|,
name|FieldName
operator|.
name|EDITORCTYPE
argument_list|)
decl_stmt|;
DECL|field|BIBLATEX_PAGINATION_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BIBLATEX_PAGINATION_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldName
operator|.
name|PAGINATION
argument_list|,
name|FieldName
operator|.
name|BOOKPAGINATION
argument_list|)
decl_stmt|;
DECL|field|BIBLATEX_JOURNAL_NAME_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BIBLATEX_JOURNAL_NAME_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldName
operator|.
name|JOURNAL
argument_list|,
name|FieldName
operator|.
name|JOURNALTITLE
argument_list|,
name|FieldName
operator|.
name|JOURNALSUBTITLE
argument_list|)
decl_stmt|;
DECL|field|BIBLATEX_BOOK_NAME_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BIBLATEX_BOOK_NAME_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldName
operator|.
name|BOOKTITLE
argument_list|,
name|FieldName
operator|.
name|MAINTITLE
argument_list|,
name|FieldName
operator|.
name|MAINSUBTITLE
argument_list|,
name|FieldName
operator|.
name|MAINTITLEADDON
argument_list|,
name|FieldName
operator|.
name|BOOKSUBTITLE
argument_list|,
name|FieldName
operator|.
name|BOOKTITLEADDON
argument_list|)
decl_stmt|;
DECL|field|BIBLATEX_LANGUAGE_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BIBLATEX_LANGUAGE_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldName
operator|.
name|LANGUAGE
argument_list|,
name|FieldName
operator|.
name|ORIGLANGUAGE
argument_list|)
decl_stmt|;
DECL|field|BIBLATEX_MULTI_KEY_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BIBLATEX_MULTI_KEY_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldName
operator|.
name|RELATED
argument_list|,
name|FieldName
operator|.
name|ENTRYSET
argument_list|)
decl_stmt|;
DECL|field|VERBATIM_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|VERBATIM_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|,
name|FieldName
operator|.
name|FILE
argument_list|,
name|FieldName
operator|.
name|CTLNAME_FORMAT_STRING
argument_list|,
name|FieldName
operator|.
name|CTLNAME_LATEX_CMD
argument_list|,
name|FieldName
operator|.
name|CTLNAME_URL_PREFIX
argument_list|)
decl_stmt|;
DECL|field|SPECIAL_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|SPECIAL_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|SpecialField
operator|.
name|PRINTED
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|SpecialField
operator|.
name|PRIORITY
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|SpecialField
operator|.
name|QUALITY
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|SpecialField
operator|.
name|RANKING
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|SpecialField
operator|.
name|READ_STATUS
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|SpecialField
operator|.
name|RELEVANCE
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
comment|// singleton instance
DECL|field|RUNTIME
specifier|private
specifier|static
name|InternalBibtexFields
name|RUNTIME
init|=
operator|new
name|InternalBibtexFields
argument_list|(
name|FieldName
operator|.
name|TIMESTAMP
argument_list|)
decl_stmt|;
DECL|method|InternalBibtexFields (String timeStampFieldName)
specifier|private
name|InternalBibtexFields
parameter_list|(
name|String
name|timeStampFieldName
parameter_list|)
block|{
name|fieldSet
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|BibtexSingleField
name|dummy
decl_stmt|;
comment|// FIRST: all standard fields
comment|// These are the fields that BibTex might want to treat, so these
comment|// must conform to BibTex rules.
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|ADDRESS
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
comment|// An annotation. It is not used by the standard bibliography styles,
comment|// but may be used by others that produce an annotated bibliography.
comment|// http://www.ecst.csuchico.edu/~jacobsd/bib/formats/bibtex.html
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|ANNOTE
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|LARGE_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|,
literal|280
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|BOOKTITLE
argument_list|,
literal|true
argument_list|,
literal|175
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|CHAPTER
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|CROSSREF
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|CROSSREF
argument_list|,
name|FieldProperty
operator|.
name|SINGLE_ENTRY_LINK
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|EDITION
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|EDITOR
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|,
literal|280
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|EPRINT
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|EPRINT
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|HOWPUBLISHED
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|INSTITUTION
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|ISBN
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|ISBN
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|ISSN
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|JOURNAL
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|JOURNAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|JOURNALTITLE
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|JOURNAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|KEY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|MONTH
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|NOTE
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|NUMBER
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|ORGANIZATION
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|PAGES
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|PUBLISHER
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|SCHOOL
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|SERIES
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
literal|true
argument_list|,
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|TYPE
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|LANGUAGE
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|VOLUME
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// custom fields not displayed at editor, but as columns in the UI
for|for
control|(
name|String
name|fieldName
range|:
name|SPECIAL_FIELDS
control|)
block|{
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
block|}
comment|// some semi-standard fields
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|DOI
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|EID
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|PMID
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// additional fields ------------------------------------------------------
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|LOCATION
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|LARGE_W
argument_list|,
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|EXTERNAL
argument_list|,
name|FieldProperty
operator|.
name|VERBATIM
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"comment"
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|KEYWORDS
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|FILE_EDITOR
argument_list|,
name|FieldProperty
operator|.
name|VERBATIM
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|RELATED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|MULTIPLE_ENTRY_LINK
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
comment|// some BibLatex fields
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|GENDER
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|GENDER
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|PUBSTATE
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|PUBLICATION_STATE
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
comment|// some internal fields ----------------------------------------------
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|NUMBER_COL
argument_list|,
literal|false
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|OWNER
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|OWNER
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|timeStampField
operator|=
name|timeStampFieldName
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|timeStampFieldName
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|BibEntry
operator|.
name|TYPE_HEADER
argument_list|,
literal|false
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|SEARCH_INTERNAL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|GROUPSEARCH_INTERNAL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|FieldName
operator|.
name|MARKED_INTERNAL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// This field must be written to file!
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
comment|// IEEEtranBSTCTL fields that should be "yes" or "no"
for|for
control|(
name|String
name|yesNoField
range|:
name|IEEETRANBSTCTL_YES_NO_FIELDS
control|)
block|{
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|yesNoField
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldProperty
operator|.
name|YES_NO
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
block|}
comment|// Fields that should be an integer value
for|for
control|(
name|String
name|numericField
range|:
name|INTEGER_FIELDS
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|fieldSet
operator|.
name|get
argument_list|(
name|numericField
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|numericField
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Fields that should be treated as verbatim, so no formatting requirements
for|for
control|(
name|String
name|fieldText
range|:
name|VERBATIM_FIELDS
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|fieldSet
operator|.
name|get
argument_list|(
name|fieldText
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldText
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|VERBATIM
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Set all fields with person names
for|for
control|(
name|String
name|fieldText
range|:
name|BIBLATEX_PERSON_NAME_FIELDS
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|fieldSet
operator|.
name|get
argument_list|(
name|fieldText
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldText
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|PERSON_NAMES
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Set all fields which should contain editor types
for|for
control|(
name|String
name|fieldText
range|:
name|BIBLATEX_EDITOR_TYPE_FIELDS
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|fieldSet
operator|.
name|get
argument_list|(
name|fieldText
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldText
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|EDITOR_TYPE
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Set all fields which are pagination fields
for|for
control|(
name|String
name|fieldText
range|:
name|BIBLATEX_PAGINATION_FIELDS
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|fieldSet
operator|.
name|get
argument_list|(
name|fieldText
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldText
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|PAGINATION
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Set all fields with dates
for|for
control|(
name|String
name|fieldText
range|:
name|BIBLATEX_DATE_FIELDS
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|fieldSet
operator|.
name|get
argument_list|(
name|fieldText
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldText
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|field
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|ISO_DATE
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Set all fields with journal names
for|for
control|(
name|String
name|fieldText
range|:
name|BIBLATEX_JOURNAL_NAME_FIELDS
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|fieldSet
operator|.
name|get
argument_list|(
name|fieldText
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldText
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|JOURNAL_NAME
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Set all fields with book names
for|for
control|(
name|String
name|fieldText
range|:
name|BIBLATEX_BOOK_NAME_FIELDS
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|fieldSet
operator|.
name|get
argument_list|(
name|fieldText
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldText
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|BOOK_NAME
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Set all fields containing a language
for|for
control|(
name|String
name|fieldText
range|:
name|BIBLATEX_LANGUAGE_FIELDS
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|fieldSet
operator|.
name|get
argument_list|(
name|fieldText
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldText
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|LANGUAGE
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Set all fields with multiple key links
for|for
control|(
name|String
name|fieldText
range|:
name|BIBLATEX_MULTI_KEY_FIELDS
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|fieldSet
operator|.
name|get
argument_list|(
name|fieldText
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldText
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|getFieldProperties
argument_list|()
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|MULTIPLE_ENTRY_LINK
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateTimeStampField (String timeStampFieldName)
specifier|public
specifier|static
name|void
name|updateTimeStampField
parameter_list|(
name|String
name|timeStampFieldName
parameter_list|)
block|{
name|getField
argument_list|(
name|RUNTIME
operator|.
name|timeStampField
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|field
lambda|->
block|{
name|field
operator|.
name|setName
argument_list|(
name|timeStampFieldName
argument_list|)
expr_stmt|;
name|RUNTIME
operator|.
name|timeStampField
operator|=
name|timeStampFieldName
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|updateSpecialFields (boolean serializeSpecialFields)
specifier|public
specifier|static
name|void
name|updateSpecialFields
parameter_list|(
name|boolean
name|serializeSpecialFields
parameter_list|)
block|{
for|for
control|(
name|String
name|fieldName
range|:
name|SPECIAL_FIELDS
control|)
block|{
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|field
lambda|->
block|{
if|if
condition|(
name|serializeSpecialFields
condition|)
block|{
name|field
operator|.
name|setPublic
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|field
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|setWriteable
argument_list|(
name|serializeSpecialFields
argument_list|)
expr_stmt|;
name|field
operator|.
name|setDisplayable
argument_list|(
name|serializeSpecialFields
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Read the "numericFields" string array from preferences, and activate numeric      * sorting for all fields listed in the array. If an unknown field name is included,      * add a field descriptor for the new field.      */
DECL|method|setNumericFields (List<String> numFields)
specifier|public
specifier|static
name|void
name|setNumericFields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|numFields
parameter_list|)
block|{
if|if
condition|(
name|numFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Build a Set of field names for the fields that should be sorted numerically:
name|Set
argument_list|<
name|String
argument_list|>
name|nF
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|nF
operator|.
name|addAll
argument_list|(
name|numFields
argument_list|)
expr_stmt|;
comment|// Look through all registered fields, and activate numeric sorting if necessary:
for|for
control|(
name|String
name|fieldName
range|:
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|fieldSet
operator|.
name|keySet
argument_list|()
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|fieldSet
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|isNumeric
argument_list|()
operator|&&
name|nF
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|field
operator|.
name|setNumeric
argument_list|(
name|nF
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nF
operator|.
name|remove
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
comment|// remove, so we clear the set of all standard fields.
block|}
comment|// If there are fields left in nF, these must be non-standard fields. Add descriptors for them:
for|for
control|(
name|String
name|fieldName
range|:
name|nF
control|)
block|{
name|BibtexSingleField
name|field
init|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|field
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|fieldSet
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * insert a field into the internal list      */
DECL|method|add (BibtexSingleField field)
specifier|private
name|void
name|add
parameter_list|(
name|BibtexSingleField
name|field
parameter_list|)
block|{
comment|// field == null check
name|String
name|key
init|=
name|field
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|fieldSet
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
comment|// --------------------------------------------------------------------------
comment|//  the "static area"
comment|// --------------------------------------------------------------------------
DECL|method|getField (String name)
specifier|private
specifier|static
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|getField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|fieldSet
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|getFieldProperties (String name)
specifier|public
specifier|static
name|Set
argument_list|<
name|FieldProperty
argument_list|>
name|getFieldProperties
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|sField
operator|.
name|get
argument_list|()
operator|.
name|getFieldProperties
argument_list|()
return|;
block|}
return|return
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FieldProperty
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getFieldWeight (String name)
specifier|public
specifier|static
name|double
name|getFieldWeight
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|sField
operator|.
name|get
argument_list|()
operator|.
name|getWeight
argument_list|()
return|;
block|}
return|return
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_WEIGHT
return|;
block|}
DECL|method|setFieldWeight (String fieldName, double weight)
specifier|public
specifier|static
name|void
name|setFieldWeight
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|double
name|weight
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|sField
operator|.
name|get
argument_list|()
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFieldLength (String name)
specifier|public
specifier|static
name|int
name|getFieldLength
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|sField
operator|.
name|get
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
block|}
return|return
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_LENGTH
return|;
block|}
DECL|method|isWriteableField (String field)
specifier|public
specifier|static
name|boolean
name|isWriteableField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
operator|!
name|sField
operator|.
name|isPresent
argument_list|()
operator|||
name|sField
operator|.
name|get
argument_list|()
operator|.
name|isWriteable
argument_list|()
return|;
block|}
DECL|method|isDisplayableField (String field)
specifier|public
specifier|static
name|boolean
name|isDisplayableField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
operator|!
name|sField
operator|.
name|isPresent
argument_list|()
operator|||
name|sField
operator|.
name|get
argument_list|()
operator|.
name|isDisplayable
argument_list|()
return|;
block|}
comment|/**      * Returns true if the given field is a standard Bibtex field.      *      * @param field a<code>String</code> value      * @return a<code>boolean</code> value      */
DECL|method|isStandardField (String field)
specifier|public
specifier|static
name|boolean
name|isStandardField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|sField
operator|.
name|isPresent
argument_list|()
operator|&&
name|sField
operator|.
name|get
argument_list|()
operator|.
name|isStandard
argument_list|()
return|;
block|}
DECL|method|isNumeric (String field)
specifier|public
specifier|static
name|boolean
name|isNumeric
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|sField
operator|.
name|isPresent
argument_list|()
operator|&&
name|sField
operator|.
name|get
argument_list|()
operator|.
name|isNumeric
argument_list|()
return|;
block|}
DECL|method|isInternalField (String field)
specifier|public
specifier|static
name|boolean
name|isInternalField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|field
operator|.
name|startsWith
argument_list|(
literal|"__"
argument_list|)
return|;
block|}
comment|/**      * returns a List with all fieldnames      */
DECL|method|getAllPublicFieldNames ()
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAllPublicFieldNames
parameter_list|()
block|{
comment|// collect all public fields
name|List
argument_list|<
name|String
argument_list|>
name|publicFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BibtexSingleField
name|sField
range|:
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|fieldSet
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|sField
operator|.
name|isPrivate
argument_list|()
condition|)
block|{
name|publicFields
operator|.
name|add
argument_list|(
name|sField
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
comment|// or export the complete BibtexSingleField ?
comment|// BibtexSingleField.toString() { return fieldname ; }
block|}
block|}
comment|// sort the entries
name|Collections
operator|.
name|sort
argument_list|(
name|publicFields
argument_list|)
expr_stmt|;
return|return
name|publicFields
return|;
block|}
comment|/**      * returns a List with all fieldnames incl. internal fieldnames      */
DECL|method|getAllPublicAndInteralFieldNames ()
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAllPublicAndInteralFieldNames
parameter_list|()
block|{
comment|//add the internal field names to public fields
name|List
argument_list|<
name|String
argument_list|>
name|publicAndInternalFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|publicAndInternalFields
operator|.
name|addAll
argument_list|(
name|InternalBibtexFields
operator|.
name|getAllPublicFieldNames
argument_list|()
argument_list|)
expr_stmt|;
name|publicAndInternalFields
operator|.
name|add
argument_list|(
name|FieldName
operator|.
name|INTERNAL_ALL_FIELD
argument_list|)
expr_stmt|;
name|publicAndInternalFields
operator|.
name|add
argument_list|(
name|FieldName
operator|.
name|INTERNAL_ALL_TEXT_FIELDS_FIELD
argument_list|)
expr_stmt|;
comment|// sort the entries
name|Collections
operator|.
name|sort
argument_list|(
name|publicAndInternalFields
argument_list|)
expr_stmt|;
return|return
name|publicAndInternalFields
return|;
block|}
DECL|method|getJournalNameFields ()
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getJournalNameFields
parameter_list|()
block|{
return|return
name|InternalBibtexFields
operator|.
name|getAllPublicFieldNames
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|fieldName
lambda|->
name|InternalBibtexFields
operator|.
name|getFieldProperties
argument_list|(
name|fieldName
argument_list|)
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|JOURNAL_NAME
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getBookNameFields ()
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getBookNameFields
parameter_list|()
block|{
return|return
name|InternalBibtexFields
operator|.
name|getAllPublicFieldNames
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|fieldName
lambda|->
name|InternalBibtexFields
operator|.
name|getFieldProperties
argument_list|(
name|fieldName
argument_list|)
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|BOOK_NAME
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getPersonNameFields ()
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getPersonNameFields
parameter_list|()
block|{
return|return
name|InternalBibtexFields
operator|.
name|getAllPublicFieldNames
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|fieldName
lambda|->
name|InternalBibtexFields
operator|.
name|getFieldProperties
argument_list|(
name|fieldName
argument_list|)
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|PERSON_NAMES
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getIEEETranBSTctlYesNoFields ()
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getIEEETranBSTctlYesNoFields
parameter_list|()
block|{
return|return
name|IEEETRANBSTCTL_YES_NO_FIELDS
return|;
block|}
block|}
end_class

end_unit

