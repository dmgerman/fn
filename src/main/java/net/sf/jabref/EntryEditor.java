begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2014 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|AWTKeyStroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|KeyboardFocusManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Toolkit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|StringSelection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DnDConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTarget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyChangeEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|VetoableChangeListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ActionMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|InputMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFileChooser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTabbedPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JToolBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|autocompleter
operator|.
name|AbstractAutoCompleter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|LatexFieldFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFilePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|WriteXMPEntryEditorAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|date
operator|.
name|DatePickerButton
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|journals
operator|.
name|JournalAbbreviations
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|labelPattern
operator|.
name|LabelPatternUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldUpdateListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableChangeType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableKeyChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|undo
operator|.
name|UndoableRemoveEntry
import|;
end_import

begin_comment
comment|/**  * GUI component that allows editing of the fields of a BibtexEntry (i.e. the  * one that shows up, when you double click on an entry in the table)  *   * It hosts the tabs (required, general, optional) and the buttons to the left.  *   * EntryEditor also registers itself as a VetoableChangeListener, receiving  * events whenever a field of the entry changes, enabling the text fields to  * update themselves if the change is made from somewhere else.  */
end_comment

begin_class
DECL|class|EntryEditor
specifier|public
class|class
name|EntryEditor
extends|extends
name|JPanel
implements|implements
name|VetoableChangeListener
implements|,
name|EntryContainer
block|{
comment|// A reference to the entry this object works on.
DECL|field|entry
specifier|private
name|BibtexEntry
name|entry
decl_stmt|;
DECL|field|type
name|BibtexEntryType
name|type
decl_stmt|;
comment|// The action concerned with closing the window.
DECL|field|closeAction
name|CloseAction
name|closeAction
decl_stmt|;
comment|// The action that deletes the current entry, and closes the editor.
DECL|field|deleteAction
name|DeleteAction
name|deleteAction
init|=
operator|new
name|DeleteAction
argument_list|()
decl_stmt|;
comment|// The action concerned with copying the BibTeX key to the clipboard.
DECL|field|copyKeyAction
name|CopyKeyAction
name|copyKeyAction
decl_stmt|;
comment|// The action concerned with copying the BibTeX key to the clipboard.
DECL|field|nextEntryAction
name|AbstractAction
name|nextEntryAction
init|=
operator|new
name|NextEntryAction
argument_list|()
decl_stmt|;
comment|// Actions for switching to next/previous entry.
DECL|field|prevEntryAction
name|AbstractAction
name|prevEntryAction
init|=
operator|new
name|PrevEntryAction
argument_list|()
decl_stmt|;
comment|// The action concerned with storing a field value.
DECL|field|storeFieldAction
specifier|public
name|StoreFieldAction
name|storeFieldAction
decl_stmt|;
comment|// The actions concerned with switching the panels.
DECL|field|switchLeftAction
name|SwitchLeftAction
name|switchLeftAction
init|=
operator|new
name|SwitchLeftAction
argument_list|()
decl_stmt|;
DECL|field|switchRightAction
name|SwitchRightAction
name|switchRightAction
init|=
operator|new
name|SwitchRightAction
argument_list|()
decl_stmt|;
comment|// The action which generates a bibtexkey for this entry.
DECL|field|generateKeyAction
specifier|public
name|GenerateKeyAction
name|generateKeyAction
decl_stmt|;
comment|// UGLY HACK to have a pointer to the fileListEditor to call autoSetLinks()
DECL|field|fileListEditor
specifier|private
name|FileListEditor
name|fileListEditor
init|=
literal|null
decl_stmt|;
DECL|field|autoLinkAction
specifier|private
specifier|final
name|AutoLinkAction
name|autoLinkAction
init|=
operator|new
name|AutoLinkAction
argument_list|()
decl_stmt|;
DECL|field|writeXmp
specifier|public
name|AbstractAction
name|writeXmp
decl_stmt|;
DECL|field|saveDatabaseAction
name|SaveDatabaseAction
name|saveDatabaseAction
init|=
operator|new
name|SaveDatabaseAction
argument_list|()
decl_stmt|;
DECL|field|mainPanel
name|JPanel
name|mainPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|srcPanel
name|JPanel
name|srcPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|genPan
DECL|field|optPan
DECL|field|reqPan
DECL|field|absPan
name|EntryEditorTab
name|genPan
decl_stmt|,
name|optPan
decl_stmt|,
name|reqPan
decl_stmt|,
name|absPan
decl_stmt|;
DECL|field|bibtexKey
name|JTextField
name|bibtexKey
decl_stmt|;
DECL|field|tf
name|FieldTextField
name|tf
decl_stmt|;
DECL|field|source
name|JTextArea
name|source
decl_stmt|;
DECL|field|tlb
name|JToolBar
name|tlb
decl_stmt|;
DECL|field|tabbed
name|JTabbedPane
name|tabbed
init|=
operator|new
name|JTabbedPane
argument_list|()
decl_stmt|;
comment|// JTabbedPane.RIGHT);
DECL|field|lab
name|JLabel
name|lab
decl_stmt|;
DECL|field|typeButton
name|TypeButton
name|typeButton
decl_stmt|;
DECL|field|frame
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|panel
name|BasePanel
name|panel
decl_stmt|;
DECL|field|ths
name|EntryEditor
name|ths
init|=
name|this
decl_stmt|;
DECL|field|contentSelectors
name|HashSet
argument_list|<
name|FieldContentSelector
argument_list|>
name|contentSelectors
init|=
operator|new
name|HashSet
argument_list|<
name|FieldContentSelector
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|logger
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|EntryEditor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|updateSource
name|boolean
name|updateSource
init|=
literal|true
decl_stmt|;
comment|// This can be set to false to stop the source
DECL|field|movingToDifferentEntry
name|boolean
name|movingToDifferentEntry
init|=
literal|false
decl_stmt|;
comment|// Indicates that we are about to go to the next or previous entry
DECL|field|tabs
name|List
argument_list|<
name|Object
argument_list|>
name|tabs
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// text area from gettin updated. This is used in cases where the source
comment|// couldn't be parsed, and the user is given the option to edit it.
DECL|field|lastSourceAccepted
name|boolean
name|lastSourceAccepted
init|=
literal|true
decl_stmt|;
comment|// This indicates whether the last
comment|// attempt
comment|// at parsing the source was successful. It is used to determine whether the
comment|// dialog should close; it should stay open if the user received an error
comment|// message about the source, whatever he or she chose to do about it.
DECL|field|lastSourceStringAccepted
name|String
name|lastSourceStringAccepted
init|=
literal|null
decl_stmt|;
comment|// This is used to prevent double
comment|// fields.
comment|// These values can be used to calculate the preferred height for the form.
comment|// reqW starts at 1 because it needs room for the bibtex key field.
DECL|field|sourceIndex
specifier|private
name|int
name|sourceIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|// The index the source panel has in tabbed.
DECL|field|prefs
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|helpAction
name|HelpAction
name|helpAction
decl_stmt|;
DECL|field|undoAction
name|UndoAction
name|undoAction
init|=
operator|new
name|UndoAction
argument_list|()
decl_stmt|;
DECL|field|redoAction
name|RedoAction
name|redoAction
init|=
operator|new
name|RedoAction
argument_list|()
decl_stmt|;
DECL|field|tabListener
name|TabListener
name|tabListener
init|=
operator|new
name|TabListener
argument_list|()
decl_stmt|;
DECL|method|EntryEditor (JabRefFrame frame_, BasePanel panel_, BibtexEntry entry_)
specifier|public
name|EntryEditor
parameter_list|(
name|JabRefFrame
name|frame_
parameter_list|,
name|BasePanel
name|panel_
parameter_list|,
name|BibtexEntry
name|entry_
parameter_list|)
block|{
name|frame
operator|=
name|frame_
expr_stmt|;
name|panel
operator|=
name|panel_
expr_stmt|;
name|entry
operator|=
name|entry_
expr_stmt|;
name|prefs
operator|=
name|Globals
operator|.
name|prefs
expr_stmt|;
name|type
operator|=
name|entry
operator|.
name|getType
argument_list|()
expr_stmt|;
name|entry
operator|.
name|addPropertyChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|entry
operator|.
name|addPropertyChangeListener
argument_list|(
name|SpecialFieldUpdateListener
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|helpAction
operator|=
operator|new
name|HelpAction
argument_list|(
name|frame
operator|.
name|helpDiag
argument_list|,
name|GUIGlobals
operator|.
name|entryEditorHelp
argument_list|,
literal|"Help"
argument_list|)
expr_stmt|;
name|closeAction
operator|=
operator|new
name|CloseAction
argument_list|()
expr_stmt|;
name|copyKeyAction
operator|=
operator|new
name|CopyKeyAction
argument_list|()
expr_stmt|;
name|generateKeyAction
operator|=
operator|new
name|GenerateKeyAction
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|storeFieldAction
operator|=
operator|new
name|StoreFieldAction
argument_list|()
expr_stmt|;
name|writeXmp
operator|=
operator|new
name|WriteXMPEntryEditorAction
argument_list|(
name|panel_
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|BorderLayout
name|bl
init|=
operator|new
name|BorderLayout
argument_list|()
decl_stmt|;
name|setLayout
argument_list|(
name|bl
argument_list|)
expr_stmt|;
name|setupToolBar
argument_list|()
expr_stmt|;
name|setupFieldPanels
argument_list|()
expr_stmt|;
name|setupSourcePanel
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|tabbed
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|addChangeListener
argument_list|(
name|tabListener
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"showSource"
argument_list|)
operator|&&
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"defaultShowSource"
argument_list|)
condition|)
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
name|sourceIndex
argument_list|)
expr_stmt|;
name|updateAllFields
argument_list|()
expr_stmt|;
block|}
DECL|method|setupFieldPanels ()
specifier|private
name|void
name|setupFieldPanels
parameter_list|()
block|{
name|tabbed
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|tabs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
index|[]
name|fields
init|=
name|entry
operator|.
name|getRequiredFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
name|fieldList
operator|=
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|reqPan
operator|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|fieldList
argument_list|,
name|this
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Required fields"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reqPan
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
name|fileListEditor
operator|=
name|reqPan
operator|.
name|fileListEditor
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Required fields"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"required"
argument_list|)
argument_list|,
name|reqPan
operator|.
name|getPane
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show required fields"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|reqPan
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|entry
operator|.
name|getOptionalFields
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|entry
operator|.
name|getOptionalFields
argument_list|()
operator|.
name|length
operator|>=
literal|1
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"biblatexMode"
argument_list|)
condition|)
block|{
name|optPan
operator|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
operator|.
name|getOptionalFields
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Optional fields"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|optPan
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
name|fileListEditor
operator|=
name|optPan
operator|.
name|fileListEditor
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Optional fields"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"optional"
argument_list|)
argument_list|,
name|optPan
operator|.
name|getPane
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show optional fields"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|optPan
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|optPan
operator|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
operator|.
name|getPrimaryOptionalFields
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Optional fields"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|optPan
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
name|fileListEditor
operator|=
name|optPan
operator|.
name|fileListEditor
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Optional fields"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"optional"
argument_list|)
argument_list|,
name|optPan
operator|.
name|getPane
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show optional fields"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|optPan
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|deprecatedFields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|BibtexEntry
operator|.
name|FieldAliasesOldToNew
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|deprecatedFields
operator|.
name|add
argument_list|(
literal|"year"
argument_list|)
expr_stmt|;
name|deprecatedFields
operator|.
name|add
argument_list|(
literal|"month"
argument_list|)
expr_stmt|;
name|String
index|[]
name|optionalFieldsNotPrimaryOrDeprecated
init|=
name|Util
operator|.
name|getRemainder
argument_list|(
name|entry
operator|.
name|getOptionalFields
argument_list|()
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
operator|.
name|getPrimaryOptionalFields
argument_list|()
argument_list|)
decl_stmt|;
name|optionalFieldsNotPrimaryOrDeprecated
operator|=
name|Util
operator|.
name|getRemainder
argument_list|(
name|optionalFieldsNotPrimaryOrDeprecated
argument_list|,
name|deprecatedFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get list of all optional fields of this entry and their aliases
name|Set
argument_list|<
name|String
argument_list|>
name|optionalFieldsAndAliases
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|entry
operator|.
name|getOptionalFields
argument_list|()
control|)
block|{
name|optionalFieldsAndAliases
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|BibtexEntry
operator|.
name|FieldAliasesNewToOld
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
name|optionalFieldsAndAliases
operator|.
name|add
argument_list|(
name|BibtexEntry
operator|.
name|FieldAliasesNewToOld
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Get all optional fields which are deprecated
name|Set
argument_list|<
name|String
argument_list|>
name|usedOptionalFieldsDeprecated
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|deprecatedFields
argument_list|)
decl_stmt|;
name|usedOptionalFieldsDeprecated
operator|.
name|retainAll
argument_list|(
name|optionalFieldsAndAliases
argument_list|)
expr_stmt|;
comment|// Add tabs
name|optPan
operator|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|optionalFieldsNotPrimaryOrDeprecated
argument_list|)
argument_list|,
name|this
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Optional fields 2"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|optPan
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
name|fileListEditor
operator|=
name|optPan
operator|.
name|fileListEditor
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Optional fields 2"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"optional"
argument_list|)
argument_list|,
name|optPan
operator|.
name|getPane
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show optional fields"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|optPan
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|usedOptionalFieldsDeprecated
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|optPan
operator|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|usedOptionalFieldsDeprecated
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Deprecated fields"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|optPan
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
name|fileListEditor
operator|=
name|optPan
operator|.
name|fileListEditor
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Deprecated fields"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"optional"
argument_list|)
argument_list|,
name|optPan
operator|.
name|getPane
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show deprecated bibtex fields"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|optPan
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|EntryEditorTabList
name|tabList
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getEntryEditorTabList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabList
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|EntryEditorTab
name|newTab
init|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|tabList
operator|.
name|getTabFields
argument_list|(
name|i
argument_list|)
argument_list|,
name|this
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|tabList
operator|.
name|getTabName
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|newTab
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
name|fileListEditor
operator|=
name|newTab
operator|.
name|fileListEditor
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|tabList
operator|.
name|getTabName
argument_list|(
name|i
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"general"
argument_list|)
argument_list|,
name|newTab
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|newTab
argument_list|)
expr_stmt|;
block|}
name|srcPanel
operator|.
name|setName
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"BibTeX source"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"showSource"
argument_list|)
condition|)
block|{
name|tabbed
operator|.
name|addTab
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"BibTeX source"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"source"
argument_list|)
argument_list|,
name|srcPanel
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Show/edit BibTeX source"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|srcPanel
argument_list|)
expr_stmt|;
block|}
name|sourceIndex
operator|=
name|tabs
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
comment|// Set the sourceIndex variable.
name|srcPanel
operator|.
name|setFocusCycleRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|BibtexEntryType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * @return reference to the currently edited entry      */
DECL|method|getEntry ()
specifier|public
name|BibtexEntry
name|getEntry
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
DECL|method|getDatabase ()
specifier|public
name|BibtexDatabase
name|getDatabase
parameter_list|()
block|{
return|return
name|panel
operator|.
name|getDatabase
argument_list|()
return|;
block|}
DECL|method|setupToolBar ()
specifier|private
name|void
name|setupToolBar
parameter_list|()
block|{
name|JPanel
name|leftPan
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|leftPan
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|tlb
operator|=
operator|new
name|JToolBar
argument_list|(
name|JToolBar
operator|.
name|VERTICAL
argument_list|)
expr_stmt|;
comment|//tlb.putClientProperty(Options.HEADER_STYLE_KEY, HeaderStyle.BOTH);
name|tlb
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setRollover
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// The toolbar carries all the key bindings that are valid for the whole
comment|// window.
name|ActionMap
name|am
init|=
name|tlb
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|InputMap
name|im
init|=
name|tlb
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
decl_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Close entry editor"
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
name|closeAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor, store field"
argument_list|)
argument_list|,
literal|"store"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"store"
argument_list|,
name|storeFieldAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Autogenerate BibTeX keys"
argument_list|)
argument_list|,
literal|"generateKey"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"generateKey"
argument_list|,
name|generateKeyAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Automatically link files"
argument_list|)
argument_list|,
literal|"autoLink"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"autoLink"
argument_list|,
name|autoLinkAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor, previous entry"
argument_list|)
argument_list|,
literal|"prev"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"prev"
argument_list|,
name|prevEntryAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor, next entry"
argument_list|)
argument_list|,
literal|"next"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"next"
argument_list|,
name|nextEntryAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Undo"
argument_list|)
argument_list|,
literal|"undo"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"undo"
argument_list|,
name|undoAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Redo"
argument_list|)
argument_list|,
literal|"redo"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"redo"
argument_list|,
name|redoAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Help"
argument_list|)
argument_list|,
literal|"help"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"help"
argument_list|,
name|helpAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setFloatable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Add actions (and thus buttons)
name|JButton
name|closeBut
init|=
operator|new
name|JButton
argument_list|(
name|closeAction
argument_list|)
decl_stmt|;
name|closeBut
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|closeBut
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|closeBut
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|leftPan
operator|.
name|add
argument_list|(
name|closeBut
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
comment|// Create type-label
name|leftPan
operator|.
name|add
argument_list|(
operator|new
name|TypeLabel
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|typeButton
operator|=
operator|new
name|TypeButton
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|typeButton
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|generateKeyAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|autoLinkAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|writeXmp
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|deleteAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|prevEntryAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|nextEntryAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|helpAction
argument_list|)
expr_stmt|;
name|Component
index|[]
name|comps
init|=
name|tlb
operator|.
name|getComponents
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|comps
control|)
operator|(
operator|(
name|JComponent
operator|)
name|comp
operator|)
operator|.
name|setOpaque
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|leftPan
operator|.
name|add
argument_list|(
name|tlb
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|leftPan
argument_list|,
name|BorderLayout
operator|.
name|WEST
argument_list|)
expr_stmt|;
block|}
comment|/**      * Rebuild the field tabs. This is called e.g. when a new content selector      * has been added.      */
DECL|method|rebuildPanels ()
specifier|public
name|void
name|rebuildPanels
parameter_list|()
block|{
comment|// Remove change listener, because the rebuilding causes meaningless
comment|// events and trouble:
name|tabbed
operator|.
name|removeChangeListener
argument_list|(
name|tabListener
argument_list|)
expr_stmt|;
name|setupFieldPanels
argument_list|()
expr_stmt|;
comment|// Add the change listener again:
name|tabbed
operator|.
name|addChangeListener
argument_list|(
name|tabListener
argument_list|)
expr_stmt|;
name|revalidate
argument_list|()
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
block|}
comment|/**      * getExtra checks the field name against BibtexFields.getFieldExtras(name).      * If the name has an entry, the proper component to be shown is created and      * returned. Otherwise, null is returned. In addition, e.g. listeners can be      * added to the field editor, even if no component is returned.      *       * @param string      *            Field name      * @return Component to show, or null if none.      */
DECL|method|getExtra (String string, final FieldEditor ed)
specifier|public
name|JComponent
name|getExtra
parameter_list|(
name|String
name|string
parameter_list|,
specifier|final
name|FieldEditor
name|ed
parameter_list|)
block|{
comment|// fieldName and parameter string identically ????
specifier|final
name|String
name|fieldName
init|=
name|ed
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|BibtexFields
operator|.
name|getFieldExtras
argument_list|(
name|string
argument_list|)
decl_stmt|;
comment|// timestamp or a other field with datepicker command
if|if
condition|(
operator|(
name|fieldName
operator|.
name|equals
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"timeStampField"
argument_list|)
argument_list|)
operator|)
operator|||
operator|(
operator|(
name|s
operator|!=
literal|null
operator|)
operator|&&
name|s
operator|.
name|equals
argument_list|(
literal|"datepicker"
argument_list|)
operator|)
condition|)
block|{
comment|// double click AND datefield => insert the current date (today)
operator|(
operator|(
name|JTextArea
operator|)
name|ed
operator|)
operator|.
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
comment|// double click
block|{
name|String
name|date
init|=
name|Util
operator|.
name|easyDateFormat
argument_list|()
decl_stmt|;
name|ed
operator|.
name|setText
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// insert a datepicker, if the extras field contains this command
if|if
condition|(
operator|(
name|s
operator|!=
literal|null
operator|)
operator|&&
name|s
operator|.
name|equals
argument_list|(
literal|"datepicker"
argument_list|)
condition|)
block|{
name|DatePickerButton
name|datePicker
init|=
operator|new
name|DatePickerButton
argument_list|(
name|ed
argument_list|)
decl_stmt|;
return|return
name|datePicker
operator|.
name|getDatePicker
argument_list|()
return|;
block|}
block|}
if|if
condition|(
operator|(
name|s
operator|!=
literal|null
operator|)
operator|&&
name|s
operator|.
name|equals
argument_list|(
literal|"external"
argument_list|)
condition|)
block|{
comment|// Add external viewer listener for "pdf" and "url" fields.
operator|(
operator|(
name|JComponent
operator|)
name|ed
operator|)
operator|.
name|addMouseListener
argument_list|(
operator|new
name|ExternalViewerListener
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|s
operator|!=
literal|null
operator|)
operator|&&
name|s
operator|.
name|equals
argument_list|(
literal|"journalNames"
argument_list|)
condition|)
block|{
comment|// Add controls for switching between abbreviated and full journal
comment|// names.
comment|// If this field also has a FieldContentSelector, we need to combine
comment|// these.
name|JPanel
name|controls
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|controls
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|panel
operator|.
name|metaData
operator|.
name|getData
argument_list|(
name|Globals
operator|.
name|SELECTOR_META_PREFIX
operator|+
name|ed
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|FieldContentSelector
name|ws
init|=
operator|new
name|FieldContentSelector
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|frame
argument_list|,
name|ed
argument_list|,
name|panel
operator|.
name|metaData
argument_list|,
name|storeFieldAction
argument_list|,
literal|false
argument_list|,
literal|", "
argument_list|)
decl_stmt|;
name|contentSelectors
operator|.
name|add
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|controls
operator|.
name|add
argument_list|(
name|ws
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
block|}
name|controls
operator|.
name|add
argument_list|(
name|JournalAbbreviations
operator|.
name|getNameSwitcher
argument_list|(
name|this
argument_list|,
name|ed
argument_list|,
name|panel
operator|.
name|undoManager
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
return|return
name|controls
return|;
block|}
elseif|else
if|if
condition|(
name|panel
operator|.
name|metaData
operator|.
name|getData
argument_list|(
name|Globals
operator|.
name|SELECTOR_META_PREFIX
operator|+
name|ed
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|FieldContentSelector
name|ws
init|=
operator|new
name|FieldContentSelector
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|frame
argument_list|,
name|ed
argument_list|,
name|panel
operator|.
name|metaData
argument_list|,
name|storeFieldAction
argument_list|,
literal|false
argument_list|,
operator|(
operator|(
name|ed
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"author"
argument_list|)
operator|||
name|ed
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"editor"
argument_list|)
operator|)
condition|?
literal|" and "
else|:
literal|", "
operator|)
argument_list|)
decl_stmt|;
name|contentSelectors
operator|.
name|add
argument_list|(
name|ws
argument_list|)
expr_stmt|;
return|return
name|ws
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|s
operator|!=
literal|null
operator|)
operator|&&
name|s
operator|.
name|equals
argument_list|(
literal|"browse"
argument_list|)
condition|)
block|{
name|JButton
name|but
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Browse"
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|JComponent
operator|)
name|ed
operator|)
operator|.
name|addMouseListener
argument_list|(
operator|new
name|ExternalViewerListener
argument_list|()
argument_list|)
expr_stmt|;
comment|// but.setBackground(GUIGlobals.lightGray);
name|but
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|dir
init|=
name|ed
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|dir
operator|=
name|prefs
operator|.
name|get
argument_list|(
name|fieldName
operator|+
name|Globals
operator|.
name|FILETYPE_PREFS_EXT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|chosenFile
init|=
name|FileDialogs
operator|.
name|getNewFile
argument_list|(
name|frame
argument_list|,
operator|new
name|File
argument_list|(
name|dir
argument_list|)
argument_list|,
literal|"."
operator|+
name|fieldName
argument_list|,
name|JFileChooser
operator|.
name|OPEN_DIALOG
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenFile
operator|!=
literal|null
condition|)
block|{
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|chosenFile
argument_list|)
decl_stmt|;
comment|// chooser.getSelectedFile();
name|ed
operator|.
name|setText
argument_list|(
name|newFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|fieldName
operator|+
name|Globals
operator|.
name|FILETYPE_PREFS_EXT
argument_list|,
name|newFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|updateField
argument_list|(
name|ed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|but
return|;
comment|// } else if ((s != null)&& s.equals("browsePdf")) {
block|}
elseif|else
if|if
condition|(
operator|(
name|s
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|s
operator|.
name|equals
argument_list|(
literal|"browseDoc"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"browseDocZip"
argument_list|)
operator|)
condition|)
block|{
specifier|final
name|String
name|ext
init|=
literal|"."
operator|+
name|fieldName
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
specifier|final
name|OpenFileFilter
name|off
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
literal|"browseDocZip"
argument_list|)
condition|)
name|off
operator|=
operator|new
name|OpenFileFilter
argument_list|(
operator|new
name|String
index|[]
block|{
name|ext
block|,
name|ext
operator|+
literal|".gz"
block|,
name|ext
operator|+
literal|".bz2"
block|}
argument_list|)
expr_stmt|;
else|else
name|off
operator|=
operator|new
name|OpenFileFilter
argument_list|(
operator|new
name|String
index|[]
block|{
name|ext
block|}
argument_list|)
expr_stmt|;
name|ExternalFilePanel
name|pan
init|=
operator|new
name|ExternalFilePanel
argument_list|(
name|frame
argument_list|,
name|panel
operator|.
name|metaData
argument_list|()
argument_list|,
name|this
argument_list|,
name|fieldName
argument_list|,
name|off
argument_list|,
name|ed
argument_list|)
decl_stmt|;
return|return
name|pan
return|;
block|}
comment|/*          * else if ((s != null)&& s.equals("browsePs")) { ExternalFilePanel pan =          * new ExternalFilePanel(frame, this, "ps", off, ed); return pan; }          */
elseif|else
if|if
condition|(
operator|(
name|s
operator|!=
literal|null
operator|)
operator|&&
name|s
operator|.
name|equals
argument_list|(
literal|"url"
argument_list|)
condition|)
block|{
operator|(
operator|(
name|JComponent
operator|)
name|ed
operator|)
operator|.
name|setDropTarget
argument_list|(
operator|new
name|DropTarget
argument_list|(
operator|(
name|Component
operator|)
name|ed
argument_list|,
name|DnDConstants
operator|.
name|ACTION_NONE
argument_list|,
operator|new
name|SimpleUrlDragDrop
argument_list|(
name|ed
argument_list|,
name|storeFieldAction
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|s
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|s
operator|.
name|equals
argument_list|(
literal|"setOwner"
argument_list|)
operator|)
condition|)
block|{
name|JButton
name|button
init|=
operator|new
name|JButton
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Auto"
argument_list|)
argument_list|)
decl_stmt|;
name|button
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|ed
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"defaultOwner"
argument_list|)
argument_list|)
expr_stmt|;
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|ed
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|button
return|;
block|}
else|else
return|return
literal|null
return|;
block|}
DECL|method|setupSourcePanel ()
specifier|private
name|void
name|setupSourcePanel
parameter_list|()
block|{
name|source
operator|=
operator|new
name|JTextAreaWithHighlighting
argument_list|()
expr_stmt|;
name|frame
operator|.
name|getSearchManager
argument_list|()
operator|.
name|addSearchListener
argument_list|(
operator|(
name|SearchTextListener
operator|)
name|source
argument_list|)
expr_stmt|;
comment|/* {             private boolean antialias = Globals.prefs.getBoolean("antialias");              public void paint(Graphics g) {                 Graphics2D g2 = (Graphics2D) g;                 if (antialias)                     g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,                         RenderingHints.VALUE_ANTIALIAS_ON);                 super.paint(g2);             }         };*/
comment|//DefaultFormBuilder builder = new DefaultFormBuilder
comment|//        (srcPanel, new FormLayout( "fill:pref:grow", "fill:pref:grow"));
name|source
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|source
operator|.
name|setLineWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|source
operator|.
name|setTabSize
argument_list|(
name|GUIGlobals
operator|.
name|INDENT
argument_list|)
expr_stmt|;
name|source
operator|.
name|addFocusListener
argument_list|(
operator|new
name|FieldEditorFocusListener
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add the global focus listener, so a menu item can see if this field
comment|// was focused when
comment|// an action was called.
name|source
operator|.
name|addFocusListener
argument_list|(
name|Globals
operator|.
name|focusListener
argument_list|)
expr_stmt|;
name|source
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Monospaced"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
literal|"fontSize"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setupJTextComponent
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
name|source
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
decl_stmt|;
comment|//builder.append(sp);
name|srcPanel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|srcPanel
operator|.
name|add
argument_list|(
name|sp
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
DECL|method|updateSource ()
specifier|public
name|void
name|updateSource
parameter_list|()
block|{
if|if
condition|(
name|updateSource
condition|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|200
argument_list|)
decl_stmt|;
try|try
block|{
name|LatexFieldFormatter
name|formatter
init|=
operator|new
name|LatexFieldFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|setNeverFailOnHashes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entry
operator|.
name|write
argument_list|(
name|sw
argument_list|,
name|formatter
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|srcString
init|=
name|sw
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|source
operator|.
name|setText
argument_list|(
name|srcString
argument_list|)
expr_stmt|;
name|lastSourceStringAccepted
operator|=
name|srcString
expr_stmt|;
comment|//////////////////////////////////////////////////////////
comment|// Set the current Entry to be selected.
comment|// Fixes the bug of losing selection after, e.g.
comment|// an autogeneration of a BibTeX key.
comment|// - ILC (16/02/2010) -
comment|//////////////////////////////////////////////////////////
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|int
name|row
init|=
name|panel
operator|.
name|mainTable
operator|.
name|findEntry
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|panel
operator|.
name|mainTable
operator|.
name|getSelectedRowCount
argument_list|()
operator|==
literal|0
condition|)
name|panel
operator|.
name|mainTable
operator|.
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|//scrollTo(row);
name|panel
operator|.
name|mainTable
operator|.
name|ensureVisible
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|//////////////////////////////////////////////////////////
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|source
operator|.
name|setText
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"Correct the entry, and "
operator|+
literal|"reopen editor to display/edit source."
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * NOTE: This method is only used for the source panel, not for the      * other tabs. Look at EntryEditorTab for the setup of text components      * in the other tabs.      */
DECL|method|setupJTextComponent (JTextComponent ta)
specifier|public
name|void
name|setupJTextComponent
parameter_list|(
name|JTextComponent
name|ta
parameter_list|)
block|{
comment|// Set up key bindings and focus listener for the FieldEditor.
name|InputMap
name|im
init|=
name|ta
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_FOCUSED
argument_list|)
decl_stmt|;
name|ActionMap
name|am
init|=
name|ta
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
comment|// im.put(KeyStroke.getKeyStroke(GUIGlobals.closeKey), "close");
comment|// am.put("close", closeAction);
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor, store field"
argument_list|)
argument_list|,
literal|"store"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"store"
argument_list|,
name|storeFieldAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor, next panel"
argument_list|)
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor, next panel 2"
argument_list|)
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"right"
argument_list|,
name|switchRightAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor, previous panel"
argument_list|)
argument_list|,
literal|"left"
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Entry editor, previous panel 2"
argument_list|)
argument_list|,
literal|"left"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"left"
argument_list|,
name|switchLeftAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Help"
argument_list|)
argument_list|,
literal|"help"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"help"
argument_list|,
name|helpAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Save database"
argument_list|)
argument_list|,
literal|"save"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"save"
argument_list|,
name|saveDatabaseAction
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Next tab"
argument_list|)
argument_list|,
literal|"nexttab"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"nexttab"
argument_list|,
name|frame
operator|.
name|nextTab
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
literal|"Previous tab"
argument_list|)
argument_list|,
literal|"prevtab"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"prevtab"
argument_list|,
name|frame
operator|.
name|prevTab
argument_list|)
expr_stmt|;
try|try
block|{
name|HashSet
argument_list|<
name|AWTKeyStroke
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|AWTKeyStroke
argument_list|>
argument_list|(
name|ta
operator|.
name|getFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|FORWARD_TRAVERSAL_KEYS
argument_list|)
argument_list|)
decl_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|AWTKeyStroke
operator|.
name|getAWTKeyStroke
argument_list|(
literal|"pressed TAB"
argument_list|)
argument_list|)
expr_stmt|;
name|ta
operator|.
name|setFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|FORWARD_TRAVERSAL_KEYS
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|keys
operator|=
operator|new
name|HashSet
argument_list|<
name|AWTKeyStroke
argument_list|>
argument_list|(
name|ta
operator|.
name|getFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|BACKWARD_TRAVERSAL_KEYS
argument_list|)
argument_list|)
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"shift pressed TAB"
argument_list|)
argument_list|)
expr_stmt|;
name|ta
operator|.
name|setFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|BACKWARD_TRAVERSAL_KEYS
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|ta
operator|.
name|addFocusListener
argument_list|(
operator|new
name|FieldListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|requestFocus ()
specifier|public
name|void
name|requestFocus
parameter_list|()
block|{
name|activateVisible
argument_list|()
expr_stmt|;
block|}
DECL|method|activateVisible ()
specifier|private
name|void
name|activateVisible
parameter_list|()
block|{
name|Object
name|activeTab
init|=
name|tabs
operator|.
name|get
argument_list|(
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeTab
operator|instanceof
name|EntryEditorTab
condition|)
operator|(
operator|(
name|EntryEditorTab
operator|)
name|activeTab
operator|)
operator|.
name|activate
argument_list|()
expr_stmt|;
else|else
operator|new
name|FocusRequester
argument_list|(
name|source
argument_list|)
expr_stmt|;
comment|// ((JComponent)activeTab).requestFocus();
block|}
comment|/**      * Reports the enabled status of the editor, as set by setEnabled()      */
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|source
operator|.
name|isEnabled
argument_list|()
return|;
block|}
comment|/**      * Sets the enabled status of all text fields of the entry editor.      */
DECL|method|setEnabled (boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|tabs
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|EntryEditorTab
condition|)
block|{
operator|(
operator|(
name|EntryEditorTab
operator|)
name|o
operator|)
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
name|source
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
comment|/**      * Centers the given row, and highlights it.      *       * @param row      *            an<code>int</code> value      */
DECL|method|scrollTo (int row)
specifier|private
name|void
name|scrollTo
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|movingToDifferentEntry
operator|=
literal|true
expr_stmt|;
name|panel
operator|.
name|mainTable
operator|.
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|panel
operator|.
name|mainTable
operator|.
name|ensureVisible
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
comment|/**      * Makes sure the current edit is stored.      */
DECL|method|storeCurrentEdit ()
specifier|public
name|void
name|storeCurrentEdit
parameter_list|()
block|{
name|Component
name|comp
init|=
name|Globals
operator|.
name|focusListener
operator|.
name|getFocused
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|comp
operator|==
name|source
operator|)
operator|||
operator|(
operator|(
name|comp
operator|instanceof
name|FieldEditor
operator|)
operator|&&
name|this
operator|.
name|isAncestorOf
argument_list|(
name|comp
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|comp
operator|instanceof
name|FieldEditor
condition|)
operator|(
operator|(
name|FieldEditor
operator|)
name|comp
operator|)
operator|.
name|clearAutoCompleteSuggestion
argument_list|()
expr_stmt|;
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|comp
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the index of the active (visible) panel.      *       * @return an<code>int</code> value      */
DECL|method|getVisiblePanel ()
specifier|public
name|int
name|getVisiblePanel
parameter_list|()
block|{
return|return
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
return|;
block|}
comment|/** Returns the name of the currently selected component. */
DECL|method|getVisiblePanelName ()
specifier|public
name|String
name|getVisiblePanelName
parameter_list|()
block|{
return|return
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * Sets the panel with the given index visible.      *       * @param i      *            an<code>int</code> value      */
DECL|method|setVisiblePanel (int i)
specifier|public
name|void
name|setVisiblePanel
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|i
argument_list|,
name|tabbed
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setVisiblePanel (String name)
specifier|public
name|void
name|setVisiblePanel
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbed
operator|.
name|getTabCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|tabbed
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|tabbed
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Updates this editor to show the given entry, regardless of type      * correspondence.      *       * @param be      *            a<code>BibtexEntry</code> value      */
DECL|method|switchTo (BibtexEntry be)
specifier|public
specifier|synchronized
name|void
name|switchTo
parameter_list|(
name|BibtexEntry
name|be
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|==
name|be
condition|)
block|{
comment|/**              * Even if the editor is already showing the same entry, update              * the source panel. I'm not sure if this is the correct place to              * do this, but in some cases the source panel will otherwise not              * be up-to-date when an entry is changed while the entry editor              * is existing, set to the same entry, but not visible.              */
name|updateSource
argument_list|()
expr_stmt|;
return|return;
block|}
name|storeCurrentEdit
argument_list|()
expr_stmt|;
comment|// Remove this instance as property listener for the entry:
name|entry
operator|.
name|removePropertyChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Register as property listener for the new entry:
name|be
operator|.
name|addPropertyChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|entry
operator|=
name|be
expr_stmt|;
name|updateAllFields
argument_list|()
expr_stmt|;
name|validateAllFields
argument_list|()
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
name|panel
operator|.
name|newEntryShowing
argument_list|(
name|be
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns false if the contents of the source panel has not been validated,      * true othervise.      */
DECL|method|lastSourceAccepted ()
specifier|public
name|boolean
name|lastSourceAccepted
parameter_list|()
block|{
if|if
condition|(
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|==
name|srcPanel
condition|)
name|storeSource
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|lastSourceAccepted
return|;
block|}
comment|/*      * public boolean storeSourceIfNeeded() { if (tabbed.getSelectedIndex() ==      * sourceIndex) return storeSource(); else return true; }      */
DECL|method|storeSource (boolean showError)
specifier|public
name|boolean
name|storeSource
parameter_list|(
name|boolean
name|showError
parameter_list|)
block|{
comment|// Store edited bibtex code.
name|BibtexParser
name|bp
init|=
operator|new
name|BibtexParser
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|StringReader
argument_list|(
name|source
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|BibtexDatabase
name|db
init|=
name|bp
operator|.
name|parse
argument_list|()
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"More than one entry found."
argument_list|)
throw|;
if|if
condition|(
name|db
operator|.
name|getEntryCount
argument_list|()
operator|<
literal|1
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No entries found."
argument_list|)
throw|;
name|NamedCompound
name|compound
init|=
operator|new
name|NamedCompound
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"source edit"
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexEntry
name|nu
init|=
name|db
operator|.
name|getEntryById
argument_list|(
name|db
operator|.
name|getKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|entry
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
comment|// oldKey = entry.getCiteKey(),
name|newKey
init|=
name|nu
operator|.
name|getCiteKey
argument_list|()
decl_stmt|;
name|boolean
name|anyChanged
init|=
literal|false
decl_stmt|;
name|boolean
name|changedType
init|=
literal|false
decl_stmt|;
name|boolean
name|duplicateWarning
init|=
literal|false
decl_stmt|;
name|boolean
name|emptyWarning
init|=
name|newKey
operator|==
literal|null
operator|||
name|newKey
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|panel
operator|.
name|database
operator|.
name|setCiteKeyForEntry
argument_list|(
name|id
argument_list|,
name|newKey
argument_list|)
condition|)
block|{
name|duplicateWarning
operator|=
literal|true
expr_stmt|;
comment|// First, remove fields that the user have removed.
block|}
for|for
control|(
name|String
name|field
range|:
name|entry
operator|.
name|getAllFields
argument_list|()
control|)
block|{
if|if
condition|(
name|BibtexFields
operator|.
name|isDisplayableField
argument_list|(
name|field
argument_list|)
condition|)
block|{
if|if
condition|(
name|nu
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|==
literal|null
condition|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|field
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|anyChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// Then set all fields that have been set by the user.
for|for
control|(
name|String
name|field
range|:
name|nu
operator|.
name|getAllFields
argument_list|()
control|)
block|{
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|String
name|newValue
init|=
name|nu
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
operator|||
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
comment|// Test if the field is legally set.
operator|(
operator|new
name|LatexFieldFormatter
argument_list|()
operator|)
operator|.
name|format
argument_list|(
name|newValue
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|field
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|anyChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// See if the user has changed the entry type:
if|if
condition|(
name|nu
operator|.
name|getType
argument_list|()
operator|!=
name|entry
operator|.
name|getType
argument_list|()
condition|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableChangeType
argument_list|(
name|entry
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|nu
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|nu
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|anyChanged
operator|=
literal|true
expr_stmt|;
name|changedType
operator|=
literal|true
expr_stmt|;
block|}
name|compound
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anyChanged
condition|)
return|return
literal|true
return|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|compound
argument_list|)
expr_stmt|;
comment|/*              * if (((oldKey == null)&& (newKey != null)) || ((oldKey != null)&&              * (newKey == null)) || ((oldKey != null)&& (newKey != null)&&              * !oldKey.equals(newKey))) { }              */
if|if
condition|(
name|duplicateWarning
condition|)
block|{
name|warnDuplicateBibtexkey
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|emptyWarning
operator|&&
name|showError
condition|)
block|{
name|warnEmptyBibtexkey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Stored entry"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
name|lastSourceStringAccepted
operator|=
name|source
operator|.
name|getText
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|changedType
condition|)
block|{
name|updateAllFields
argument_list|()
expr_stmt|;
name|lastSourceAccepted
operator|=
literal|true
expr_stmt|;
name|updateSource
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
block|}
comment|// TODO: does updating work properly after source stored?
comment|// panel.tableModel.remap();
comment|// panel.entryTable.repaint();
comment|// panel.refreshTable();
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
comment|///////////////////////////////////////////////////////
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|int
name|row
init|=
name|panel
operator|.
name|mainTable
operator|.
name|findEntry
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
block|{
comment|//if (panel.mainTable.getSelectedRowCount() == 0)
comment|//    panel.mainTable.setRowSelectionInterval(row, row);
comment|//scrollTo(row);
name|panel
operator|.
name|mainTable
operator|.
name|ensureVisible
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
comment|// The source couldn't be parsed, so the user is given an
comment|// error message, and the choice to keep or revert the contents
comment|// of the source text field.
name|updateSource
operator|=
literal|false
expr_stmt|;
name|lastSourceAccepted
operator|=
literal|false
expr_stmt|;
name|tabbed
operator|.
name|setSelectedComponent
argument_list|(
name|srcPanel
argument_list|)
expr_stmt|;
if|if
condition|(
name|showError
condition|)
block|{
name|Object
index|[]
name|options
init|=
block|{
name|Globals
operator|.
name|lang
argument_list|(
literal|"Edit"
argument_list|)
block|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Revert to original source"
argument_list|)
block|}
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showOptionDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Problem with parsing entry"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
name|options
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|0
condition|)
block|{
name|updateSource
operator|=
literal|true
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|method|setField (String fieldName, String newFieldData)
specifier|public
name|void
name|setField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|newFieldData
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|tabs
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|EntryEditorTab
condition|)
block|{
operator|(
operator|(
name|EntryEditorTab
operator|)
name|o
operator|)
operator|.
name|updateField
argument_list|(
name|fieldName
argument_list|,
name|newFieldData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Sets all the text areas according to the shown entry.      */
DECL|method|updateAllFields ()
specifier|public
name|void
name|updateAllFields
parameter_list|()
block|{
for|for
control|(
name|Object
name|o
range|:
name|tabs
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|EntryEditorTab
condition|)
block|{
operator|(
operator|(
name|EntryEditorTab
operator|)
name|o
operator|)
operator|.
name|setEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Removes the "invalid field" color from all text areas.      */
DECL|method|validateAllFields ()
specifier|public
name|void
name|validateAllFields
parameter_list|()
block|{
for|for
control|(
name|Object
name|o
range|:
name|tabs
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|EntryEditorTab
condition|)
block|{
operator|(
operator|(
name|EntryEditorTab
operator|)
name|o
operator|)
operator|.
name|validateAllFields
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateAllContentSelectors ()
specifier|public
name|void
name|updateAllContentSelectors
parameter_list|()
block|{
if|if
condition|(
name|contentSelectors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|FieldContentSelector
name|contentSelector
range|:
name|contentSelectors
control|)
name|contentSelector
operator|.
name|rebuildComboBox
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Update the JTextArea when a field has changed.      *       * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)      */
DECL|method|vetoableChange (PropertyChangeEvent e)
specifier|public
name|void
name|vetoableChange
parameter_list|(
name|PropertyChangeEvent
name|e
parameter_list|)
block|{
name|String
name|newValue
init|=
operator|(
operator|(
name|e
operator|.
name|getNewValue
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|e
operator|.
name|getNewValue
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|""
operator|)
decl_stmt|;
name|setField
argument_list|(
name|e
operator|.
name|getPropertyName
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
DECL|method|updateField (final Object source)
specifier|public
name|void
name|updateField
parameter_list|(
specifier|final
name|Object
name|source
parameter_list|)
block|{
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setMovingToDifferentEntry ()
specifier|public
name|void
name|setMovingToDifferentEntry
parameter_list|()
block|{
name|movingToDifferentEntry
operator|=
literal|true
expr_stmt|;
block|}
DECL|class|TypeButton
specifier|private
class|class
name|TypeButton
extends|extends
name|JButton
block|{
DECL|method|TypeButton (String type)
specifier|public
name|TypeButton
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"edit"
argument_list|)
argument_list|)
expr_stmt|;
name|setToolTipText
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Change entry type"
argument_list|)
argument_list|)
expr_stmt|;
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JPopupMenu
name|typeMenu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|BibtexEntryType
operator|.
name|ALL_TYPES
operator|.
name|keySet
argument_list|()
control|)
name|typeMenu
operator|.
name|add
argument_list|(
operator|new
name|ChangeTypeAction
argument_list|(
name|BibtexEntryType
operator|.
name|getType
argument_list|(
name|s
argument_list|)
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
name|typeMenu
operator|.
name|show
argument_list|(
name|ths
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TypeLabel
specifier|private
class|class
name|TypeLabel
extends|extends
name|JLabel
block|{
DECL|method|TypeLabel (String type)
specifier|public
name|TypeLabel
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|setUI
argument_list|(
operator|new
name|VerticalLabelUI
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|setForeground
argument_list|(
name|GUIGlobals
operator|.
name|entryEditorLabelColor
argument_list|)
expr_stmt|;
name|setHorizontalAlignment
argument_list|(
name|RIGHT
argument_list|)
expr_stmt|;
name|setFont
argument_list|(
name|GUIGlobals
operator|.
name|typeNameFont
argument_list|)
expr_stmt|;
comment|// Add a mouse listener so the user can right-click the type label to change the entry type:
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
operator|||
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON3
operator|)
condition|)
block|{
name|handleTypeChange
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
operator|||
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON3
operator|)
condition|)
block|{
name|handleTypeChange
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleTypeChange
parameter_list|()
block|{
name|JPopupMenu
name|typeMenu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|BibtexEntryType
operator|.
name|ALL_TYPES
operator|.
name|keySet
argument_list|()
control|)
name|typeMenu
operator|.
name|add
argument_list|(
operator|new
name|ChangeTypeAction
argument_list|(
name|BibtexEntryType
operator|.
name|getType
argument_list|(
name|s
argument_list|)
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
name|typeMenu
operator|.
name|show
argument_list|(
name|ths
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|paintComponent (Graphics g)
specifier|public
name|void
name|paintComponent
parameter_list|(
name|Graphics
name|g
parameter_list|)
block|{
name|Graphics2D
name|g2
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
comment|//g2.setColor(GUIGlobals.entryEditorLabelColor);
comment|//g2.setFont(GUIGlobals.typeNameFont);
comment|//FontMetrics fm = g2.getFontMetrics();
comment|//int width = fm.stringWidth(label);
name|g2
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_ON
argument_list|)
expr_stmt|;
name|super
operator|.
name|paintComponent
argument_list|(
name|g2
argument_list|)
expr_stmt|;
comment|//g2.rotate(-Math.PI / 2, 0, 0);
comment|//g2.drawString(label, -width - 7, 28);
block|}
block|}
DECL|class|FieldListener
class|class
name|FieldListener
extends|extends
name|FocusAdapter
block|{
comment|/*          * Focus listener that fires the storeFieldAction when a FieldTextArea          * loses focus.          */
DECL|method|focusGained (FocusEvent e)
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{         }
DECL|method|focusLost (FocusEvent e)
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
comment|// Util.pr("Lost focus "+e.getSource().toString().substring(0,30));
if|if
condition|(
operator|!
name|e
operator|.
name|isTemporary
argument_list|()
condition|)
name|updateField
argument_list|(
name|e
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TabListener
class|class
name|TabListener
implements|implements
name|ChangeListener
block|{
DECL|method|stateChanged (ChangeEvent e)
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|activateVisible
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// After the initial event train has finished, we tell the editor
comment|// tab to update all
comment|// its fields. This makes sure they are updated even if the tab we
comment|// just left contained one
comment|// or more of the same fields as this one:
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Object
name|activeTab
init|=
name|tabs
operator|.
name|get
argument_list|(
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeTab
operator|instanceof
name|EntryEditorTab
condition|)
operator|(
operator|(
name|EntryEditorTab
operator|)
name|activeTab
operator|)
operator|.
name|updateAll
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DeleteAction
class|class
name|DeleteAction
extends|extends
name|AbstractAction
block|{
DECL|method|DeleteAction ()
specifier|public
name|DeleteAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Delete"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"delete"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Delete entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Show confirmation dialog if not disabled:
name|boolean
name|goOn
init|=
name|panel
operator|.
name|showDeleteConfirmationDialog
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|goOn
condition|)
return|return;
name|panel
operator|.
name|entryEditorClosing
argument_list|(
name|EntryEditor
operator|.
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|database
operator|.
name|removeEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|panel
operator|.
name|database
argument_list|,
name|entry
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Deleted"
argument_list|)
operator|+
literal|" "
operator|+
name|Globals
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CloseAction
class|class
name|CloseAction
extends|extends
name|AbstractAction
block|{
DECL|method|CloseAction ()
specifier|public
name|CloseAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Close window"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"close"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Close window"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|==
name|srcPanel
condition|)
block|{
name|updateField
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastSourceAccepted
condition|)
name|panel
operator|.
name|entryEditorClosing
argument_list|(
name|EntryEditor
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
else|else
name|panel
operator|.
name|entryEditorClosing
argument_list|(
name|EntryEditor
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CopyKeyAction
class|class
name|CopyKeyAction
extends|extends
name|AbstractAction
block|{
DECL|method|CopyKeyAction ()
specifier|public
name|CopyKeyAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Copy BibTeX key to clipboard"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
literal|"Copy BibTeX key to clipboard (Ctrl-K)"
argument_list|)
expr_stmt|;
comment|// putValue(MNEMONIC_KEY, GUIGlobals.copyKeyCode);
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|s
init|=
operator|(
name|entry
operator|.
name|getField
argument_list|(
name|BibtexFields
operator|.
name|KEY_FIELD
argument_list|)
operator|)
decl_stmt|;
name|StringSelection
name|ss
init|=
operator|new
name|StringSelection
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|ss
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StoreFieldAction
specifier|public
class|class
name|StoreFieldAction
extends|extends
name|AbstractAction
block|{
DECL|method|StoreFieldAction ()
specifier|public
name|StoreFieldAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Store field value"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
literal|"Store field value"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|boolean
name|movingAway
init|=
name|movingToDifferentEntry
decl_stmt|;
name|movingToDifferentEntry
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|instanceof
name|FieldTextField
condition|)
block|{
comment|// Storage from bibtex key field.
name|FieldTextField
name|fe
init|=
operator|(
name|FieldTextField
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|String
name|oldValue
init|=
name|entry
operator|.
name|getCiteKey
argument_list|()
decl_stmt|;
name|String
name|newValue
init|=
name|fe
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|newValue
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|newValue
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|oldValue
operator|==
literal|null
operator|)
operator|&&
operator|(
name|newValue
operator|==
literal|null
operator|)
operator|)
operator|||
operator|(
operator|(
name|oldValue
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|newValue
operator|!=
literal|null
operator|)
operator|&&
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
operator|)
condition|)
return|return;
comment|// No change.
comment|// Make sure the key is legal:
name|String
name|cleaned
init|=
name|Util
operator|.
name|checkLegalKey
argument_list|(
name|newValue
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|cleaned
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|cleaned
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Invalid BibTeX key"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error setting field"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|fe
operator|.
name|setInvalidBackgroundColor
argument_list|()
expr_stmt|;
return|return;
block|}
else|else
block|{
name|fe
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isDuplicate
init|=
name|panel
operator|.
name|database
operator|.
name|setCiteKeyForEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|newValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isDuplicate
condition|)
name|warnDuplicateBibtexkey
argument_list|()
expr_stmt|;
else|else
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"BibTeX key is unique."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// key is null/empty
name|warnEmptyBibtexkey
argument_list|()
expr_stmt|;
block|}
comment|// Add an UndoableKeyChange to the baseframe's undoManager.
name|UndoableKeyChange
name|undoableKeyChange
init|=
operator|new
name|UndoableKeyChange
argument_list|(
name|panel
operator|.
name|database
argument_list|,
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|updateTimeStampIsSet
argument_list|()
condition|)
block|{
name|NamedCompound
name|ce
init|=
name|Util
operator|.
name|doUpdateTimeStamp
argument_list|(
name|entry
argument_list|,
name|undoableKeyChange
argument_list|)
decl_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|undoableKeyChange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|newValue
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|newValue
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
comment|// fe.setLabelColor(GUIGlobals.entryEditorLabelColor);
name|fe
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
else|else
comment|// fe.setLabelColor(GUIGlobals.nullFieldColor);
name|fe
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
if|if
condition|(
name|fe
operator|.
name|getTextComponent
argument_list|()
operator|.
name|hasFocus
argument_list|()
condition|)
name|fe
operator|.
name|setActiveBackgroundColor
argument_list|()
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|instanceof
name|FieldEditor
condition|)
block|{
name|String
name|toSet
init|=
literal|null
decl_stmt|;
name|FieldEditor
name|fe
init|=
operator|(
name|FieldEditor
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|boolean
name|set
decl_stmt|;
comment|// Trim the whitespace off this value
name|String
name|currentText
init|=
name|fe
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|trim
init|=
name|currentText
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|trim
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|toSet
operator|=
name|trim
expr_stmt|;
block|}
comment|// We check if the field has changed, since we don't want to
comment|// mark the base as changed unless we have a real change.
if|if
condition|(
name|toSet
operator|==
literal|null
condition|)
block|{
name|set
operator|=
name|entry
operator|.
name|getField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|!
operator|(
operator|(
name|entry
operator|.
name|getField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|!=
literal|null
operator|)
operator|&&
name|toSet
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
argument_list|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|set
condition|)
block|{
try|try
block|{
comment|// The following statement attempts to write the
comment|// new contents into a StringWriter, and this will
comment|// cause an IOException if the field is not
comment|// properly formatted. If that happens, the field
comment|// is not stored and the textarea turns red.
if|if
condition|(
name|toSet
operator|!=
literal|null
condition|)
operator|(
operator|new
name|LatexFieldFormatter
argument_list|()
operator|)
operator|.
name|format
argument_list|(
name|toSet
argument_list|,
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toSet
operator|!=
literal|null
condition|)
name|entry
operator|.
name|setField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|toSet
argument_list|)
expr_stmt|;
else|else
name|entry
operator|.
name|clearField
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|toSet
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|toSet
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
comment|// fe.setLabelColor(GUIGlobals.entryEditorLabelColor);
name|fe
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
else|else
comment|// fe.setLabelColor(GUIGlobals.nullFieldColor);
name|fe
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
comment|// See if we need to update an AutoCompleter instance:
name|AbstractAutoCompleter
name|aComp
init|=
name|panel
operator|.
name|getAutoCompleter
argument_list|(
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aComp
operator|!=
literal|null
condition|)
name|aComp
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// Add an UndoableFieldChange to the baseframe's undoManager.
name|UndoableFieldChange
name|undoableFieldChange
init|=
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|fe
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|oldValue
argument_list|,
name|toSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|updateTimeStampIsSet
argument_list|()
condition|)
block|{
name|NamedCompound
name|ce
init|=
name|Util
operator|.
name|doUpdateTimeStamp
argument_list|(
name|entry
argument_list|,
name|undoableFieldChange
argument_list|)
decl_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|undoableFieldChange
argument_list|)
expr_stmt|;
block|}
name|updateSource
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Error setting field"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|fe
operator|.
name|setInvalidBackgroundColor
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// set == false
comment|// We set the field and label color.
name|fe
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fe
operator|.
name|getTextComponent
argument_list|()
operator|.
name|hasFocus
argument_list|()
condition|)
name|fe
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|activeEditor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|source
operator|.
name|isEditable
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|source
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSourceStringAccepted
argument_list|)
operator|)
condition|)
block|{
name|boolean
name|accepted
init|=
name|storeSource
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|accepted
condition|)
block|{                 }
block|}
comment|////////////////////////////////////
comment|// Make sure we scroll to the entry if it moved in the table.
comment|// Should only be done if this editor is currently showing:
comment|//System.out.println(getType().getName()+": movingAway="+movingAway+", isShowing="+isShowing());
if|if
condition|(
operator|!
name|movingAway
operator|&&
name|isShowing
argument_list|()
condition|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|int
name|row
init|=
name|panel
operator|.
name|mainTable
operator|.
name|findEntry
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
block|{
comment|//if (panel.mainTable.getSelectedRowCount() == 0)
comment|//    panel.mainTable.setRowSelectionInterval(row, row);
comment|//scrollTo(row);
name|panel
operator|.
name|mainTable
operator|.
name|ensureVisible
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|SwitchLeftAction
class|class
name|SwitchLeftAction
extends|extends
name|AbstractAction
block|{
DECL|method|SwitchLeftAction ()
specifier|public
name|SwitchLeftAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Switch to the panel to the left"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// System.out.println("switch left");
name|int
name|i
init|=
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
operator|(
operator|(
name|i
operator|>
literal|0
operator|)
condition|?
operator|(
name|i
operator|-
literal|1
operator|)
else|:
operator|(
name|tabbed
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
name|activateVisible
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|SwitchRightAction
class|class
name|SwitchRightAction
extends|extends
name|AbstractAction
block|{
DECL|method|SwitchRightAction ()
specifier|public
name|SwitchRightAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Switch to the panel to the right"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// System.out.println("switch right");
name|int
name|i
init|=
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
operator|(
name|i
operator|<
operator|(
name|tabbed
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
operator|)
operator|)
condition|?
operator|(
name|i
operator|+
literal|1
operator|)
else|:
literal|0
argument_list|)
expr_stmt|;
name|activateVisible
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|NextEntryAction
class|class
name|NextEntryAction
extends|extends
name|AbstractAction
block|{
DECL|method|NextEntryAction ()
specifier|public
name|NextEntryAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Next entry"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"down"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Next entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|thisRow
init|=
name|panel
operator|.
name|mainTable
operator|.
name|findEntry
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|int
name|newRow
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|thisRow
operator|+
literal|1
operator|)
operator|<
name|panel
operator|.
name|database
operator|.
name|getEntryCount
argument_list|()
condition|)
name|newRow
operator|=
name|thisRow
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|thisRow
operator|>
literal|0
condition|)
name|newRow
operator|=
literal|0
expr_stmt|;
else|else
return|return;
comment|// newRow is still -1, so we can assume the database has
comment|// only one entry.
name|scrollTo
argument_list|(
name|newRow
argument_list|)
expr_stmt|;
name|panel
operator|.
name|mainTable
operator|.
name|setRowSelectionInterval
argument_list|(
name|newRow
argument_list|,
name|newRow
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PrevEntryAction
class|class
name|PrevEntryAction
extends|extends
name|AbstractAction
block|{
DECL|method|PrevEntryAction ()
specifier|public
name|PrevEntryAction
parameter_list|()
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Previous entry"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"up"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Previous entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|thisRow
init|=
name|panel
operator|.
name|mainTable
operator|.
name|findEntry
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|int
name|newRow
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|thisRow
operator|-
literal|1
operator|)
operator|>=
literal|0
condition|)
name|newRow
operator|=
name|thisRow
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|thisRow
operator|!=
operator|(
name|panel
operator|.
name|database
operator|.
name|getEntryCount
argument_list|()
operator|-
literal|1
operator|)
condition|)
name|newRow
operator|=
name|panel
operator|.
name|database
operator|.
name|getEntryCount
argument_list|()
operator|-
literal|1
expr_stmt|;
else|else
return|return;
comment|// newRow is still -1, so we can assume the database has
comment|// only one entry.
comment|// id = panel.tableModel.getIdForRow(newRow);
comment|// switchTo(id);
name|scrollTo
argument_list|(
name|newRow
argument_list|)
expr_stmt|;
name|panel
operator|.
name|mainTable
operator|.
name|setRowSelectionInterval
argument_list|(
name|newRow
argument_list|,
name|newRow
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|GenerateKeyAction
class|class
name|GenerateKeyAction
extends|extends
name|AbstractAction
block|{
DECL|field|parent
name|JabRefFrame
name|parent
decl_stmt|;
DECL|field|selectedEntry
name|BibtexEntry
name|selectedEntry
decl_stmt|;
DECL|method|GenerateKeyAction (JabRefFrame parentFrame)
specifier|public
name|GenerateKeyAction
parameter_list|(
name|JabRefFrame
name|parentFrame
parameter_list|)
block|{
name|super
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Generate BibTeX key"
argument_list|)
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"makeKey"
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parentFrame
expr_stmt|;
comment|// selectedEntry = newEntry ;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Generate BibTeX key"
argument_list|)
argument_list|)
expr_stmt|;
comment|// putValue(MNEMONIC_KEY, GUIGlobals.showGenKeyCode);
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// 1. get Bitexentry for selected index (already have)
comment|// 2. run the LabelMaker by it
try|try
block|{
comment|// Store the current edit in case this action is called during the
comment|// editing of a field:
name|storeCurrentEdit
argument_list|()
expr_stmt|;
comment|// this updates the table automatically, on close, but not
comment|// within the tab
name|Object
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|BibtexFields
operator|.
name|KEY_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"avoidOverwritingKey"
argument_list|)
condition|)
block|{
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Not overwriting existing key. To change this setting, open Options -> Prefererences -> BibTeX key generator"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"warnBeforeOverwritingKey"
argument_list|)
condition|)
block|{
name|CheckBoxMessage
name|cbm
init|=
operator|new
name|CheckBoxMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"The current BibTeX key will be overwritten. Continue?"
argument_list|)
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Disable this confirmation dialog"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|cbm
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Overwrite key"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|cbm
operator|.
name|isSelected
argument_list|()
condition|)
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"warnBeforeOverwritingKey"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
block|{
comment|// Ok, break off the operation.
return|return;
block|}
block|}
block|}
comment|// entry = frame.labelMaker.applyRule(entry, panel.database) ;
name|LabelPatternUtil
operator|.
name|makeLabel
argument_list|(
name|panel
operator|.
name|metaData
argument_list|,
name|panel
operator|.
name|database
argument_list|,
name|entry
argument_list|)
expr_stmt|;
comment|// Store undo information:
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableKeyChange
argument_list|(
name|panel
operator|.
name|database
argument_list|,
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|oldValue
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|BibtexFields
operator|.
name|KEY_FIELD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// here we update the field
name|String
name|bibtexKeyData
init|=
name|entry
operator|.
name|getField
argument_list|(
name|BibtexFields
operator|.
name|KEY_FIELD
argument_list|)
decl_stmt|;
comment|// set the field named for "bibtexkey"
name|setField
argument_list|(
name|BibtexFields
operator|.
name|KEY_FIELD
argument_list|,
name|bibtexKeyData
argument_list|)
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error setting key: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|UndoAction
class|class
name|UndoAction
extends|extends
name|AbstractAction
block|{
DECL|method|UndoAction ()
specifier|public
name|UndoAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Undo"
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"undo"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
literal|"Undo"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|panel
operator|.
name|runCommand
argument_list|(
literal|"undo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{             }
block|}
block|}
DECL|class|RedoAction
class|class
name|RedoAction
extends|extends
name|AbstractAction
block|{
DECL|method|RedoAction ()
specifier|public
name|RedoAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Undo"
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"redo"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
literal|"Redo"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|panel
operator|.
name|runCommand
argument_list|(
literal|"redo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{             }
block|}
block|}
DECL|class|SaveDatabaseAction
class|class
name|SaveDatabaseAction
extends|extends
name|AbstractAction
block|{
DECL|method|SaveDatabaseAction ()
specifier|public
name|SaveDatabaseAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Save database"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|Object
name|activeTab
init|=
name|tabs
operator|.
name|get
argument_list|(
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeTab
operator|instanceof
name|EntryEditorTab
condition|)
block|{
comment|// Normal panel.
name|EntryEditorTab
name|fp
init|=
operator|(
name|EntryEditorTab
operator|)
name|activeTab
decl_stmt|;
name|FieldEditor
name|fe
init|=
name|fp
operator|.
name|getActive
argument_list|()
decl_stmt|;
name|fe
operator|.
name|clearAutoCompleteSuggestion
argument_list|()
expr_stmt|;
name|updateField
argument_list|(
name|fe
argument_list|)
expr_stmt|;
block|}
else|else
comment|// Source panel.
name|updateField
argument_list|(
name|activeTab
argument_list|)
expr_stmt|;
try|try
block|{
name|panel
operator|.
name|runCommand
argument_list|(
literal|"save"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{             }
block|}
block|}
DECL|class|ExternalViewerListener
class|class
name|ExternalViewerListener
extends|extends
name|MouseAdapter
block|{
DECL|method|mouseClicked (MouseEvent evt)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|evt
parameter_list|)
block|{
if|if
condition|(
name|evt
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|FieldTextArea
name|tf
init|=
operator|(
name|FieldTextArea
operator|)
name|evt
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|tf
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
return|return;
name|tf
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|String
name|link
init|=
name|tf
operator|.
name|getText
argument_list|()
decl_stmt|;
comment|// get selected ? String
comment|// getSelectedText()
try|try
block|{
name|Util
operator|.
name|openExternalViewer
argument_list|(
name|panel
operator|.
name|metaData
argument_list|()
argument_list|,
name|link
argument_list|,
name|tf
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error opening file."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|ChangeTypeAction
class|class
name|ChangeTypeAction
extends|extends
name|AbstractAction
block|{
DECL|field|type
name|BibtexEntryType
name|type
decl_stmt|;
DECL|field|panel
name|BasePanel
name|panel
decl_stmt|;
DECL|method|ChangeTypeAction (BibtexEntryType type, BasePanel bp)
specifier|public
name|ChangeTypeAction
parameter_list|(
name|BibtexEntryType
name|type
parameter_list|,
name|BasePanel
name|bp
parameter_list|)
block|{
name|super
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|panel
operator|=
name|bp
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent evt)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
name|panel
operator|.
name|changeType
argument_list|(
name|entry
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|warnDuplicateBibtexkey ()
specifier|private
name|void
name|warnDuplicateBibtexkey
parameter_list|()
block|{
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Duplicate BibTeX key. Grouping may not work for this entry."
argument_list|)
argument_list|)
expr_stmt|;
comment|/*if (prefs.getBoolean("dialogWarningForDuplicateKey")) {             // JZTODO lyrics             CheckBoxMessage jcb = new CheckBoxMessage(Globals.lang("Warning") + ": "                 + Globals.lang("Duplicate BibTeX key. Grouping may not work for this entry."),                 Globals.lang("Disable this warning dialog"), false);             JOptionPane.showMessageDialog(frame, jcb, Globals.lang("Warning"),                 JOptionPane.WARNING_MESSAGE);              if (jcb.isSelected())                 prefs.putBoolean("dialogWarningForDuplicateKey", false);         }*/
block|}
DECL|method|warnEmptyBibtexkey ()
specifier|private
name|void
name|warnEmptyBibtexkey
parameter_list|()
block|{
comment|// JZTODO lyrics
name|panel
operator|.
name|output
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Empty BibTeX key. Grouping may not work for this entry."
argument_list|)
argument_list|)
expr_stmt|;
comment|/*if (prefs.getBoolean("dialogWarningForEmptyKey")) {             // JZTODO lyrics             CheckBoxMessage jcb = new CheckBoxMessage(Globals.lang("Warning") + ": "                 + Globals.lang("Empty BibTeX key. Grouping may not work for this entry."), Globals                 .lang("Disable this warning dialog"), false);             JOptionPane.showMessageDialog(frame, jcb, Globals.lang("Warning"),                 JOptionPane.WARNING_MESSAGE);              if (jcb.isSelected())                 prefs.putBoolean("dialogWarningForEmptyKey", false);         }*/
block|}
DECL|class|AutoLinkAction
specifier|private
class|class
name|AutoLinkAction
extends|extends
name|AbstractAction
block|{
DECL|method|AutoLinkAction ()
specifier|public
name|AutoLinkAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|SMALL_ICON
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"autoGroup"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|lang
argument_list|(
literal|"Automatically set file links for this entry"
argument_list|)
operator|+
literal|" (Alt-F)"
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|FileListEditor
name|fileListEditor
init|=
name|EntryEditor
operator|.
name|this
operator|.
name|fileListEditor
decl_stmt|;
if|if
condition|(
name|fileListEditor
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"No file list editor found."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileListEditor
operator|.
name|autoSetLinks
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

