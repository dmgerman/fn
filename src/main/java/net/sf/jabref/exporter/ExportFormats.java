begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.exporter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFileChooser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|filechooser
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|MnemonicAwareAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|AbstractWorker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_comment
comment|/**  * User: alver  *  * Date: Oct 18, 2006  *  * Time: 9:35:08 PM  */
end_comment

begin_class
DECL|class|ExportFormats
specifier|public
class|class
name|ExportFormats
block|{
DECL|field|exportFormats
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IExportFormat
argument_list|>
name|exportFormats
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Global variable that is used for counting output entries when exporting:
DECL|field|entryNumber
specifier|public
specifier|static
name|int
name|entryNumber
decl_stmt|;
DECL|method|initAllExports ()
specifier|public
specifier|static
name|void
name|initAllExports
parameter_list|()
block|{
name|ExportFormats
operator|.
name|exportFormats
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Initialize Build-In Export Formats
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"HTML"
argument_list|)
argument_list|,
literal|"html"
argument_list|,
literal|"html"
argument_list|,
literal|null
argument_list|,
literal|".html"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Simple HTML"
argument_list|)
argument_list|,
literal|"simplehtml"
argument_list|,
literal|"simplehtml"
argument_list|,
literal|null
argument_list|,
literal|".html"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"DocBook"
argument_list|)
operator|.
name|concat
argument_list|(
literal|" 4.4"
argument_list|)
argument_list|,
literal|"docbook"
argument_list|,
literal|"docbook"
argument_list|,
literal|null
argument_list|,
literal|".xml"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"DIN 1505"
argument_list|)
argument_list|,
literal|"din1505"
argument_list|,
literal|"din1505winword"
argument_list|,
literal|"din1505"
argument_list|,
literal|".rtf"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"BibTeXML"
argument_list|)
argument_list|,
literal|"bibtexml"
argument_list|,
literal|"bibtexml"
argument_list|,
literal|null
argument_list|,
literal|".xml"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"BibO RDF"
argument_list|)
argument_list|,
literal|"bibordf"
argument_list|,
literal|"bibordf"
argument_list|,
literal|null
argument_list|,
literal|".rdf"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ModsExportFormat
argument_list|()
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"HTML table"
argument_list|)
argument_list|,
literal|"tablerefs"
argument_list|,
literal|"tablerefs"
argument_list|,
literal|"tablerefs"
argument_list|,
literal|".html"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"HTML list"
argument_list|)
argument_list|,
literal|"listrefs"
argument_list|,
literal|"listrefs"
argument_list|,
literal|"listrefs"
argument_list|,
literal|".html"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"HTML table (with Abstract& BibTeX)"
argument_list|)
argument_list|,
literal|"tablerefsabsbib"
argument_list|,
literal|"tablerefsabsbib"
argument_list|,
literal|"tablerefsabsbib"
argument_list|,
literal|".html"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Harvard RTF"
argument_list|)
argument_list|,
literal|"harvard"
argument_list|,
literal|"harvard"
argument_list|,
literal|"harvard"
argument_list|,
literal|".rtf"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"ISO 690"
argument_list|)
argument_list|,
literal|"iso690rtf"
argument_list|,
literal|"iso690RTF"
argument_list|,
literal|"iso690rtf"
argument_list|,
literal|".rtf"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"ISO 690"
argument_list|)
argument_list|,
literal|"iso690txt"
argument_list|,
literal|"iso690"
argument_list|,
literal|"iso690txt"
argument_list|,
literal|".txt"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Endnote"
argument_list|)
argument_list|,
literal|"endnote"
argument_list|,
literal|"EndNote"
argument_list|,
literal|"endnote"
argument_list|,
literal|".txt"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"OpenOffice CSV"
argument_list|)
argument_list|,
literal|"oocsv"
argument_list|,
literal|"openoffice-csv"
argument_list|,
literal|"openoffice"
argument_list|,
literal|".csv"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormat
name|ef
init|=
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"RIS"
argument_list|)
argument_list|,
literal|"ris"
argument_list|,
literal|"ris"
argument_list|,
literal|"ris"
argument_list|,
literal|".ris"
argument_list|)
decl_stmt|;
name|ef
operator|.
name|encoding
operator|=
name|StandardCharsets
operator|.
name|UTF_8
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
name|ef
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ExportFormat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"MIS Quarterly"
argument_list|)
argument_list|,
literal|"misq"
argument_list|,
literal|"misq"
argument_list|,
literal|"misq"
argument_list|,
literal|".rtf"
argument_list|)
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|OpenOfficeDocumentCreator
argument_list|()
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|OpenDocumentSpreadsheetCreator
argument_list|()
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|MSBibExportFormat
argument_list|()
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|MySQLExport
argument_list|()
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|PostgreSQLExport
argument_list|()
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|putFormat
argument_list|(
operator|new
name|ModsExportFormat
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now add custom export formats
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ExportFormat
argument_list|>
name|customFormats
init|=
name|Globals
operator|.
name|prefs
operator|.
name|customExports
operator|.
name|getCustomExportFormats
argument_list|()
decl_stmt|;
for|for
control|(
name|IExportFormat
name|format
range|:
name|customFormats
operator|.
name|values
argument_list|()
control|)
block|{
name|ExportFormats
operator|.
name|putFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Build a string listing of all available export formats.      *      * @param maxLineLength      *            The max line length before a line break must be added.      * @param linePrefix      *            If a line break is added, this prefix will be inserted at the      *            beginning of the next line.      * @return The string describing available formats.      */
DECL|method|getConsoleExportList (int maxLineLength, int firstLineSubtr, String linePrefix)
specifier|public
specifier|static
name|String
name|getConsoleExportList
parameter_list|(
name|int
name|maxLineLength
parameter_list|,
name|int
name|firstLineSubtr
parameter_list|,
name|String
name|linePrefix
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|lastBreak
init|=
operator|-
name|firstLineSubtr
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|ExportFormats
operator|.
name|exportFormats
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|sb
operator|.
name|length
argument_list|()
operator|+
literal|2
operator|+
name|name
operator|.
name|length
argument_list|()
operator|)
operator|-
name|lastBreak
operator|)
operator|>
name|maxLineLength
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|lastBreak
operator|=
name|sb
operator|.
name|length
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|linePrefix
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Get a Map of all export formats.      * @return A Map containing all export formats, mapped to their console names.      */
DECL|method|getExportFormats ()
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|IExportFormat
argument_list|>
name|getExportFormats
parameter_list|()
block|{
comment|// It is perhaps overly paranoid to make a defensive copy in this case:
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|ExportFormats
operator|.
name|exportFormats
argument_list|)
return|;
block|}
comment|/**      * Look up the named export format.      *      * @param consoleName      *            The export name given in the JabRef console help information.      * @return The ExportFormat, or null if no exportformat with that name is      *         registered.      */
DECL|method|getExportFormat (String consoleName)
specifier|public
specifier|static
name|IExportFormat
name|getExportFormat
parameter_list|(
name|String
name|consoleName
parameter_list|)
block|{
return|return
name|ExportFormats
operator|.
name|exportFormats
operator|.
name|get
argument_list|(
name|consoleName
argument_list|)
return|;
block|}
comment|/**      * Create an AbstractAction for performing an export operation.      *      * @param frame      *            The JabRefFrame of this JabRef instance.      * @param selectedOnly      *            true indicates that only selected entries should be exported,      *            false indicates that all entries should be exported.      * @return The action.      */
DECL|method|getExportAction (JabRefFrame frame, boolean selectedOnly)
specifier|public
specifier|static
name|AbstractAction
name|getExportAction
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|boolean
name|selectedOnly
parameter_list|)
block|{
class|class
name|ExportAction
extends|extends
name|MnemonicAwareAction
block|{
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|selectedOnly
decl_stmt|;
specifier|public
name|ExportAction
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|boolean
name|selectedOnly
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|selectedOnly
operator|=
name|selectedOnly
expr_stmt|;
comment|// @formatter:off
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|selectedOnly
condition|?
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Export selected entries"
argument_list|)
else|:
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Export"
argument_list|)
argument_list|)
expr_stmt|;
comment|// @formatter:on
block|}
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|ExportFormats
operator|.
name|initAllExports
argument_list|()
expr_stmt|;
name|JFileChooser
name|fc
init|=
name|ExportFormats
operator|.
name|createExportFileChooser
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_WORKING_DIRECTORY
argument_list|)
argument_list|)
decl_stmt|;
name|fc
operator|.
name|showSaveDialog
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|fc
operator|.
name|getSelectedFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|FileFilter
name|ff
init|=
name|fc
operator|.
name|getFileFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|ff
operator|instanceof
name|ExportFileFilter
condition|)
block|{
name|ExportFileFilter
name|eff
init|=
operator|(
name|ExportFileFilter
operator|)
name|ff
decl_stmt|;
name|String
name|path
init|=
name|file
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|eff
operator|.
name|getExtension
argument_list|()
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|+
name|eff
operator|.
name|getExtension
argument_list|()
expr_stmt|;
block|}
name|file
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Warn that the file exists:
if|if
condition|(
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"'%0' exists. Overwrite file?"
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Export"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|OK_CANCEL_OPTION
argument_list|)
operator|!=
name|JOptionPane
operator|.
name|OK_OPTION
condition|)
block|{
return|return;
block|}
block|}
specifier|final
name|IExportFormat
name|format
init|=
name|eff
operator|.
name|getExportFormat
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|entryIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|selectedOnly
condition|)
block|{
name|BibtexEntry
index|[]
name|selected
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|entryIds
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|BibtexEntry
name|bibtexEntry
range|:
name|selected
control|)
block|{
name|entryIds
operator|.
name|add
argument_list|(
name|bibtexEntry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Set the global variable for this database's file directory before exporting,
comment|// so formatters can resolve linked files correctly.
comment|// (This is an ugly hack!)
name|Globals
operator|.
name|prefs
operator|.
name|fileDirForDatabase
operator|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|getFileDirectory
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
expr_stmt|;
comment|// Also store the database's file in a global variable:
name|Globals
operator|.
name|prefs
operator|.
name|databaseFile
operator|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|getFile
argument_list|()
expr_stmt|;
comment|// Make sure we remember which filter was used, to set
comment|// the default for next time:
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_USED_EXPORT
argument_list|,
name|format
operator|.
name|getConsoleName
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_WORKING_DIRECTORY
argument_list|,
name|file
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|File
name|finFile
init|=
name|file
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|finEntryIDs
init|=
name|entryIds
decl_stmt|;
name|AbstractWorker
name|exportWorker
init|=
operator|new
name|AbstractWorker
argument_list|()
block|{
name|String
name|errorMessage
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|format
operator|.
name|performExport
argument_list|(
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|database
argument_list|()
argument_list|,
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|metaData
argument_list|()
argument_list|,
name|finFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getEncoding
argument_list|()
argument_list|,
name|finEntryIDs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
name|errorMessage
operator|=
name|ex
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|errorMessage
operator|=
name|ex
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|()
block|{
comment|// No error message. Report success:
if|if
condition|(
name|errorMessage
operator|==
literal|null
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"%0 export successful"
argument_list|,
name|format
operator|.
name|getDisplayName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ... or show an error dialog:
else|else
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not save file."
argument_list|)
operator|+
literal|" - "
operator|+
name|errorMessage
argument_list|)
expr_stmt|;
comment|// Need to warn the user that saving failed!
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not save file."
argument_list|)
operator|+
literal|"\n"
operator|+
name|errorMessage
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save database"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
comment|// Run the export action in a background thread:
name|exportWorker
operator|.
name|getWorker
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Run the update method:
name|exportWorker
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|ExportAction
argument_list|(
name|frame
argument_list|,
name|selectedOnly
argument_list|)
return|;
block|}
DECL|method|createExportFileChooser (String currentDir)
specifier|private
specifier|static
name|JFileChooser
name|createExportFileChooser
parameter_list|(
name|String
name|currentDir
parameter_list|)
block|{
name|String
name|lastUsedFormat
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_USED_EXPORT
argument_list|)
decl_stmt|;
name|FileFilter
name|defaultFilter
init|=
literal|null
decl_stmt|;
name|JFileChooser
name|fc
init|=
operator|new
name|JFileChooser
argument_list|(
name|currentDir
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|FileFilter
argument_list|>
name|filters
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|IExportFormat
argument_list|>
name|e
range|:
name|ExportFormats
operator|.
name|exportFormats
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|formatName
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|IExportFormat
name|format
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|format
operator|.
name|getFileFilter
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|formatName
operator|.
name|equals
argument_list|(
name|lastUsedFormat
argument_list|)
condition|)
block|{
name|defaultFilter
operator|=
name|format
operator|.
name|getFileFilter
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|FileFilter
name|ff
range|:
name|filters
control|)
block|{
name|fc
operator|.
name|addChoosableFileFilter
argument_list|(
name|ff
argument_list|)
expr_stmt|;
block|}
name|fc
operator|.
name|setAcceptAllFileFilterUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultFilter
operator|!=
literal|null
condition|)
block|{
name|fc
operator|.
name|setFileFilter
argument_list|(
name|defaultFilter
argument_list|)
expr_stmt|;
block|}
return|return
name|fc
return|;
block|}
DECL|method|putFormat (IExportFormat format)
specifier|private
specifier|static
name|void
name|putFormat
parameter_list|(
name|IExportFormat
name|format
parameter_list|)
block|{
name|ExportFormats
operator|.
name|exportFormats
operator|.
name|put
argument_list|(
name|format
operator|.
name|getConsoleName
argument_list|()
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

