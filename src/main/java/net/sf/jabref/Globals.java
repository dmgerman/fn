begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|MissingResourceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PropertyResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
operator|.
name|Control
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|collab
operator|.
name|FileUpdateMonitor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|AutoSaveManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|ImportFormatReader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationRepository
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|server
operator|.
name|RemoteListenerServerLifecycle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|BuildInfo
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|error
operator|.
name|StreamEavesdropper
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|logging
operator|.
name|CacheableHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|Globals
specifier|public
class|class
name|Globals
block|{
comment|/**      * {@link Control} class allowing properties bundles to be in different encodings.      *       * @see<a      *      href="http://stackoverflow.com/questions/4659929/how-to-use-utf-8-in-resource-properties-with-resourcebundle">utf-8      *      and property files</a>      */
DECL|class|EncodingControl
specifier|private
specifier|static
class|class
name|EncodingControl
extends|extends
name|Control
block|{
DECL|field|encoding
specifier|private
specifier|final
name|String
name|encoding
decl_stmt|;
DECL|method|EncodingControl (String encoding)
specifier|public
name|EncodingControl
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newBundle (String baseName, Locale locale, String format, ClassLoader loader, boolean reload)
specifier|public
name|ResourceBundle
name|newBundle
parameter_list|(
name|String
name|baseName
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|String
name|format
parameter_list|,
name|ClassLoader
name|loader
parameter_list|,
name|boolean
name|reload
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|IOException
block|{
comment|// The below is a copy of the default implementation.
name|String
name|bundleName
init|=
name|toBundleName
argument_list|(
name|baseName
argument_list|,
name|locale
argument_list|)
decl_stmt|;
name|String
name|resourceName
init|=
name|toResourceName
argument_list|(
name|bundleName
argument_list|,
literal|"properties"
argument_list|)
decl_stmt|;
name|ResourceBundle
name|bundle
init|=
literal|null
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reload
condition|)
block|{
name|URL
name|url
init|=
name|loader
operator|.
name|getResource
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|URLConnection
name|connection
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|setUseCaches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stream
operator|=
name|connection
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|stream
operator|=
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Only this line is changed to make it to read properties files as UTF-8.
name|bundle
operator|=
operator|new
name|PropertyResourceBundle
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|bundle
return|;
block|}
block|}
DECL|field|remoteListener
specifier|public
specifier|static
name|RemoteListenerServerLifecycle
name|remoteListener
init|=
operator|new
name|RemoteListenerServerLifecycle
argument_list|()
decl_stmt|;
DECL|field|RESOURCE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_PREFIX
init|=
literal|"resource/JabRef"
decl_stmt|;
DECL|field|MENU_RESOURCE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|MENU_RESOURCE_PREFIX
init|=
literal|"resource/Menu"
decl_stmt|;
DECL|field|INTEGRITY_RESOURCE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|INTEGRITY_RESOURCE_PREFIX
init|=
literal|"resource/IntegrityMessage"
decl_stmt|;
DECL|field|JOURNALS_FILE_BUILTIN
specifier|public
specifier|static
specifier|final
name|String
name|JOURNALS_FILE_BUILTIN
init|=
literal|"/resource/journalList.txt"
decl_stmt|;
DECL|field|JOURNALS_IEEE_INTERNAL_LIST
specifier|public
specifier|static
specifier|final
name|String
name|JOURNALS_IEEE_INTERNAL_LIST
init|=
literal|"/resource/IEEEJournalList.txt"
decl_stmt|;
DECL|field|messages
specifier|private
specifier|static
name|ResourceBundle
name|messages
decl_stmt|;
DECL|field|menuTitles
specifier|private
specifier|static
name|ResourceBundle
name|menuTitles
decl_stmt|;
DECL|field|intMessages
specifier|private
specifier|static
name|ResourceBundle
name|intMessages
decl_stmt|;
DECL|field|fileUpdateMonitor
specifier|public
specifier|static
name|FileUpdateMonitor
name|fileUpdateMonitor
decl_stmt|;
DECL|field|importFormatReader
specifier|public
specifier|static
specifier|final
name|ImportFormatReader
name|importFormatReader
init|=
operator|new
name|ImportFormatReader
argument_list|()
decl_stmt|;
DECL|field|streamEavesdropper
specifier|public
specifier|static
name|StreamEavesdropper
name|streamEavesdropper
decl_stmt|;
DECL|field|handler
specifier|public
specifier|static
name|CacheableHandler
name|handler
decl_stmt|;
DECL|field|BUILD_INFO
specifier|public
specifier|static
specifier|final
name|BuildInfo
name|BUILD_INFO
init|=
operator|new
name|BuildInfo
argument_list|()
decl_stmt|;
DECL|field|FILETYPE_PREFS_EXT
specifier|public
specifier|static
specifier|final
name|String
name|FILETYPE_PREFS_EXT
init|=
literal|"_dir"
decl_stmt|;
DECL|field|SELECTOR_META_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|SELECTOR_META_PREFIX
init|=
literal|"selector_"
decl_stmt|;
DECL|field|PROTECTED_FLAG_META
specifier|public
specifier|static
specifier|final
name|String
name|PROTECTED_FLAG_META
init|=
literal|"protectedFlag"
decl_stmt|;
DECL|field|MAC
specifier|public
specifier|static
specifier|final
name|String
name|MAC
init|=
literal|"Mac OS X"
decl_stmt|;
DECL|field|DOI_LOOKUP_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|DOI_LOOKUP_PREFIX
init|=
literal|"http://dx.doi.org/"
decl_stmt|;
DECL|field|NONE
specifier|public
specifier|static
specifier|final
name|String
name|NONE
init|=
literal|"_non__"
decl_stmt|;
DECL|field|FORMATTER_PACKAGE
specifier|public
specifier|static
specifier|final
name|String
name|FORMATTER_PACKAGE
init|=
literal|"net.sf.jabref.export.layout.format."
decl_stmt|;
DECL|field|ENCODINGS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|ENCODINGS
decl_stmt|;
DECL|field|ALL_ENCODINGS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ALL_ENCODINGS
init|=
comment|// (String[])
comment|// Charset.availableCharsets().keySet().toArray(new
comment|// String[]{});
operator|new
name|String
index|[]
block|{
literal|"ISO8859_1"
block|,
literal|"UTF8"
block|,
literal|"UTF-16"
block|,
literal|"ASCII"
block|,
literal|"Cp1250"
block|,
literal|"Cp1251"
block|,
literal|"Cp1252"
block|,
literal|"Cp1253"
block|,
literal|"Cp1254"
block|,
literal|"Cp1257"
block|,
literal|"SJIS"
block|,
literal|"KOI8_R"
block|,
comment|// Cyrillic
literal|"EUC_JP"
block|,
comment|// Added Japanese encodings.
literal|"Big5"
block|,
literal|"Big5_HKSCS"
block|,
literal|"GBK"
block|,
literal|"ISO8859_2"
block|,
literal|"ISO8859_3"
block|,
literal|"ISO8859_4"
block|,
literal|"ISO8859_5"
block|,
literal|"ISO8859_6"
block|,
literal|"ISO8859_7"
block|,
literal|"ISO8859_8"
block|,
literal|"ISO8859_9"
block|,
literal|"ISO8859_13"
block|,
literal|"ISO8859_15"
block|}
decl_stmt|;
DECL|field|ENCODING_NAMES_LOOKUP
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ENCODING_NAMES_LOOKUP
decl_stmt|;
static|static
block|{
comment|// Build list of encodings, by filtering out all that are not supported
comment|// on this system:
name|List
argument_list|<
name|String
argument_list|>
name|encodings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ALL_ENCODING
range|:
name|Globals
operator|.
name|ALL_ENCODINGS
control|)
block|{
if|if
condition|(
name|Charset
operator|.
name|isSupported
argument_list|(
name|ALL_ENCODING
argument_list|)
condition|)
block|{
name|encodings
operator|.
name|add
argument_list|(
name|ALL_ENCODING
argument_list|)
expr_stmt|;
block|}
block|}
name|ENCODINGS
operator|=
name|encodings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|encodings
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
comment|// Build a map for translating Java encoding names into common encoding names:
name|ENCODING_NAMES_LOOKUP
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1250"
argument_list|,
literal|"windows-1250"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1251"
argument_list|,
literal|"windows-1251"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1252"
argument_list|,
literal|"windows-1252"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1253"
argument_list|,
literal|"windows-1253"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1254"
argument_list|,
literal|"windows-1254"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1257"
argument_list|,
literal|"windows-1257"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_1"
argument_list|,
literal|"ISO-8859-1"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_2"
argument_list|,
literal|"ISO-8859-2"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_3"
argument_list|,
literal|"ISO-8859-3"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_4"
argument_list|,
literal|"ISO-8859-4"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_5"
argument_list|,
literal|"ISO-8859-5"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_6"
argument_list|,
literal|"ISO-8859-6"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_7"
argument_list|,
literal|"ISO-8859-7"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_8"
argument_list|,
literal|"ISO-8859-8"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_9"
argument_list|,
literal|"ISO-8859-9"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_13"
argument_list|,
literal|"ISO-8859-13"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_15"
argument_list|,
literal|"ISO-8859-15"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"KOI8_R"
argument_list|,
literal|"KOI8-R"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"UTF8"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"UTF-16"
argument_list|,
literal|"UTF-16"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"SJIS"
argument_list|,
literal|"Shift_JIS"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"GBK"
argument_list|,
literal|"GBK"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Big5_HKSCS"
argument_list|,
literal|"Big5-HKSCS"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Big5"
argument_list|,
literal|"Big5"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"EUC_JP"
argument_list|,
literal|"EUC-JP"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ASCII"
argument_list|,
literal|"US-ASCII"
argument_list|)
expr_stmt|;
block|}
DECL|field|focusListener
specifier|public
specifier|static
name|GlobalFocusListener
name|focusListener
decl_stmt|;
DECL|field|autoSaveManager
specifier|public
specifier|static
name|AutoSaveManager
name|autoSaveManager
init|=
literal|null
decl_stmt|;
comment|// In the main program, this field is initialized in JabRef.java
comment|// Each test case initializes this field if required
DECL|field|prefs
specifier|public
specifier|static
name|JabRefPreferences
name|prefs
init|=
literal|null
decl_stmt|;
DECL|field|helpDiag
specifier|public
specifier|static
name|HelpDialog
name|helpDiag
init|=
literal|null
decl_stmt|;
DECL|field|osName
specifier|public
specifier|static
specifier|final
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|,
literal|"def"
argument_list|)
decl_stmt|;
DECL|field|ON_MAC
specifier|public
specifier|static
specifier|final
name|boolean
name|ON_MAC
init|=
name|Globals
operator|.
name|osName
operator|.
name|equals
argument_list|(
name|Globals
operator|.
name|MAC
argument_list|)
decl_stmt|;
DECL|field|ON_WIN
specifier|public
specifier|static
specifier|final
name|boolean
name|ON_WIN
init|=
name|Globals
operator|.
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
DECL|field|ON_LINUX
specifier|public
specifier|static
specifier|final
name|boolean
name|ON_LINUX
init|=
name|Globals
operator|.
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
decl_stmt|;
DECL|field|sidePaneManager
specifier|public
specifier|static
name|SidePaneManager
name|sidePaneManager
decl_stmt|;
comment|// will be overridden in initialization due to feature #857
DECL|field|NEWLINE
specifier|public
specifier|static
name|String
name|NEWLINE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|NEWLINE_LENGTH
specifier|public
specifier|static
name|int
name|NEWLINE_LENGTH
init|=
name|Globals
operator|.
name|NEWLINE
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// Instantiate logger:
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Globals
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|journalAbbrev
specifier|public
specifier|static
name|JournalAbbreviationRepository
name|journalAbbrev
decl_stmt|;
comment|/**      * "Fieldname" to indicate that a field should be treated as a bibtex string. Used when writing database to file.      */
DECL|field|BIBTEX_STRING
specifier|public
specifier|static
specifier|final
name|String
name|BIBTEX_STRING
init|=
literal|"__string"
decl_stmt|;
DECL|method|startBackgroundTasks ()
specifier|public
specifier|static
name|void
name|startBackgroundTasks
parameter_list|()
block|{
name|Globals
operator|.
name|focusListener
operator|=
operator|new
name|GlobalFocusListener
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|streamEavesdropper
operator|=
name|StreamEavesdropper
operator|.
name|eavesdropOnSystem
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|fileUpdateMonitor
operator|=
operator|new
name|FileUpdateMonitor
argument_list|()
expr_stmt|;
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|executeWithLowPriorityInOwnThread
argument_list|(
name|Globals
operator|.
name|fileUpdateMonitor
argument_list|,
literal|"FileUpdateMonitor"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialize and start the autosave manager.      *       * @param frame The main frame.      */
DECL|method|startAutoSaveManager (JabRefFrame frame)
specifier|public
specifier|static
name|void
name|startAutoSaveManager
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|Globals
operator|.
name|autoSaveManager
operator|=
operator|new
name|AutoSaveManager
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|autoSaveManager
operator|.
name|startAutoSaveTimer
argument_list|()
expr_stmt|;
block|}
comment|/**      * Stop the autosave manager if it has been started.      */
DECL|method|stopAutoSaveManager ()
specifier|public
specifier|static
name|void
name|stopAutoSaveManager
parameter_list|()
block|{
if|if
condition|(
name|Globals
operator|.
name|autoSaveManager
operator|!=
literal|null
condition|)
block|{
name|Globals
operator|.
name|autoSaveManager
operator|.
name|stopAutoSaveTimer
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|autoSaveManager
operator|.
name|clearAutoSaves
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|autoSaveManager
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setLanguage (String language, String country)
specifier|public
specifier|static
name|void
name|setLanguage
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|country
parameter_list|)
block|{
name|Locale
name|locale
init|=
operator|new
name|Locale
argument_list|(
name|language
argument_list|,
name|country
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|messages
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|Globals
operator|.
name|RESOURCE_PREFIX
argument_list|,
name|locale
argument_list|,
operator|new
name|EncodingControl
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|menuTitles
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|Globals
operator|.
name|MENU_RESOURCE_PREFIX
argument_list|,
name|locale
argument_list|,
operator|new
name|EncodingControl
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|intMessages
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|Globals
operator|.
name|INTEGRITY_RESOURCE_PREFIX
argument_list|,
name|locale
argument_list|,
operator|new
name|EncodingControl
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Locale
operator|.
name|setDefault
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|javax
operator|.
name|swing
operator|.
name|JComponent
operator|.
name|setDefaultLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
DECL|method|lang (String key, String... params)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Globals
operator|.
name|messages
operator|!=
literal|null
condition|)
block|{
name|translation
operator|=
name|Globals
operator|.
name|messages
operator|.
name|getString
argument_list|(
name|key
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
comment|//logger("Warning: could not get translation for \"" + key + "\"");
block|}
if|if
condition|(
name|translation
operator|==
literal|null
condition|)
block|{
name|translation
operator|=
name|key
expr_stmt|;
block|}
if|if
condition|(
name|translation
operator|!=
literal|null
operator|&&
operator|!
name|translation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|translation
operator|=
name|translation
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
literal|false
decl_stmt|;
name|char
name|c
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|translation
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|c
operator|=
name|translation
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'%'
condition|)
block|{
name|b
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<=
name|params
operator|.
name|length
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|params
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// append literally (for quoting) or insert special
comment|// symbol
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'c'
case|:
comment|// colon
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
comment|// equal
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// anything else, e.g. %
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|key
return|;
block|}
DECL|method|lang (String key)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|Globals
operator|.
name|lang
argument_list|(
name|key
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
return|;
block|}
DECL|method|menuTitle (String key)
specifier|public
specifier|static
name|String
name|menuTitle
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Globals
operator|.
name|messages
operator|!=
literal|null
condition|)
block|{
name|translation
operator|=
name|Globals
operator|.
name|menuTitles
operator|.
name|getString
argument_list|(
name|key
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
name|translation
operator|=
name|key
expr_stmt|;
block|}
if|if
condition|(
name|translation
operator|!=
literal|null
operator|&&
operator|!
name|translation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|translation
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
DECL|method|getIntegrityMessage (String key)
specifier|public
specifier|static
name|String
name|getIntegrityMessage
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Globals
operator|.
name|intMessages
operator|!=
literal|null
condition|)
block|{
name|translation
operator|=
name|Globals
operator|.
name|intMessages
operator|.
name|getString
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
name|translation
operator|=
name|key
expr_stmt|;
comment|// System.err.println("Warning: could not get menu item translation
comment|// for \""
comment|// + key + "\"");
block|}
if|if
condition|(
name|translation
operator|!=
literal|null
operator|&&
operator|!
name|translation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|translation
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
comment|// ============================================================
comment|// Using the hashmap of entry types found in BibtexEntryType
comment|// ============================================================
DECL|method|getEntryType (String type)
specifier|public
specifier|static
name|BibtexEntryType
name|getEntryType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
comment|// decide which entryType object to return
name|Object
name|o
init|=
name|BibtexEntryType
operator|.
name|ALL_TYPES
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|BibtexEntryType
operator|)
name|o
return|;
block|}
else|else
block|{
return|return
name|BibtexEntryType
operator|.
name|OTHER
return|;
block|}
comment|/*          * if(type.equals("article")) return BibtexEntryType.ARTICLE; else          * if(type.equals("book")) return BibtexEntryType.BOOK; else          * if(type.equals("inproceedings")) return          * BibtexEntryType.INPROCEEDINGS;          */
block|}
DECL|field|SPECIAL_COMMAND_CHARS
specifier|public
specifier|static
specifier|final
name|String
name|SPECIAL_COMMAND_CHARS
init|=
literal|"\"`^~'c="
decl_stmt|;
DECL|method|initializeJournalNames ()
specifier|public
specifier|static
name|void
name|initializeJournalNames
parameter_list|()
block|{
comment|// Read internal lists:
name|Globals
operator|.
name|journalAbbrev
operator|=
operator|new
name|JournalAbbreviationRepository
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|journalAbbrev
operator|.
name|readJournalListFromResource
argument_list|(
name|Globals
operator|.
name|JOURNALS_FILE_BUILTIN
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_IEEE_ABRV
argument_list|)
condition|)
block|{
name|Globals
operator|.
name|journalAbbrev
operator|.
name|readJournalListFromResource
argument_list|(
name|JOURNALS_IEEE_INTERNAL_LIST
argument_list|)
expr_stmt|;
block|}
comment|// Read external lists, if any (in reverse order, so the upper lists
comment|// override the lower):
name|String
index|[]
name|lists
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringArray
argument_list|(
name|JabRefPreferences
operator|.
name|EXTERNAL_JOURNAL_LISTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|lists
operator|!=
literal|null
operator|&&
name|lists
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|lists
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
try|try
block|{
name|Globals
operator|.
name|journalAbbrev
operator|.
name|readJournalListFromFile
argument_list|(
operator|new
name|File
argument_list|(
name|lists
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// The file couldn't be found... should we tell anyone?
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Cannot find file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Read personal list, if set up:
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|PERSONAL_JOURNAL_LIST
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Globals
operator|.
name|journalAbbrev
operator|.
name|readJournalListFromFile
argument_list|(
operator|new
name|File
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|PERSONAL_JOURNAL_LIST
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Personal journal list file '"
operator|+
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|PERSONAL_JOURNAL_LIST
argument_list|)
operator|+
literal|"' not found."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns a reg exp pattern in the form (w1)|(w2)| ... wi are escaped if no regex search is enabled      */
DECL|method|getPatternForWords (ArrayList<String> words)
specifier|public
specifier|static
name|Pattern
name|getPatternForWords
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|words
parameter_list|)
block|{
if|if
condition|(
name|words
operator|==
literal|null
operator|||
name|words
operator|.
name|isEmpty
argument_list|()
operator|||
name|words
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Pattern
operator|.
name|compile
argument_list|(
literal|""
argument_list|)
return|;
block|}
name|boolean
name|regExSearch
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|REG_EXP_SEARCH
argument_list|)
decl_stmt|;
comment|// compile the words to a regex in the form (w1) | (w2) | (w3)
name|String
name|searchPattern
init|=
literal|"("
operator|.
name|concat
argument_list|(
name|regExSearch
condition|?
name|words
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|Pattern
operator|.
name|quote
argument_list|(
name|words
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
literal|")"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|words
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|searchPattern
operator|=
name|searchPattern
operator|.
name|concat
argument_list|(
literal|"|("
argument_list|)
operator|.
name|concat
argument_list|(
name|regExSearch
condition|?
name|words
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
name|Pattern
operator|.
name|quote
argument_list|(
name|words
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|Pattern
name|pattern
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CASE_SENSITIVE_SEARCH
argument_list|)
condition|)
block|{
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|searchPattern
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|searchPattern
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
block|}
return|return
name|pattern
return|;
block|}
block|}
end_class

end_unit

