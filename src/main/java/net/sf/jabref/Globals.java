begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|collab
operator|.
name|FileUpdateMonitor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GlobalFocusListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|AutoSaveManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBindingPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ImportFormatReader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|error
operator|.
name|StreamEavesdropper
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationLoader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|server
operator|.
name|RemoteListenerServerLifecycle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|BuildInfo
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_class
DECL|class|Globals
specifier|public
class|class
name|Globals
block|{
DECL|field|DIR_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|DIR_SUFFIX
init|=
literal|"Directory"
decl_stmt|;
comment|// JabRef version info
DECL|field|BUILD_INFO
specifier|public
specifier|static
specifier|final
name|BuildInfo
name|BUILD_INFO
init|=
operator|new
name|BuildInfo
argument_list|()
decl_stmt|;
comment|// Signature written at the top of the .bib file.
DECL|field|SIGNATURE
specifier|public
specifier|static
specifier|final
name|String
name|SIGNATURE
init|=
literal|"This file was created with JabRef"
decl_stmt|;
DECL|field|ENCODING_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|ENCODING_PREFIX
init|=
literal|"Encoding: "
decl_stmt|;
comment|// Character separating field names that are to be used in sequence as
comment|// fallbacks for a single column (e.g. "author/editor" to use editor where
comment|// author is not set):
DECL|field|COL_DEFINITION_FIELD_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
name|COL_DEFINITION_FIELD_SEPARATOR
init|=
literal|"/"
decl_stmt|;
comment|// Newlines
comment|// will be overridden in initialization due to feature #857 @ JabRef.java
DECL|field|NEWLINE
specifier|public
specifier|static
name|String
name|NEWLINE
init|=
name|System
operator|.
name|lineSeparator
argument_list|()
decl_stmt|;
comment|// Remote listener
DECL|field|REMOTE_LISTENER
specifier|public
specifier|static
specifier|final
name|RemoteListenerServerLifecycle
name|REMOTE_LISTENER
init|=
operator|new
name|RemoteListenerServerLifecycle
argument_list|()
decl_stmt|;
DECL|field|IMPORT_FORMAT_READER
specifier|public
specifier|static
specifier|final
name|ImportFormatReader
name|IMPORT_FORMAT_READER
init|=
operator|new
name|ImportFormatReader
argument_list|()
decl_stmt|;
comment|// Non-letters which are used to denote accents in LaTeX-commands, e.g., in {\"{a}}
DECL|field|SPECIAL_COMMAND_CHARS
specifier|public
specifier|static
specifier|final
name|String
name|SPECIAL_COMMAND_CHARS
init|=
literal|"\"`^~'=.|"
decl_stmt|;
comment|// In the main program, this field is initialized in JabRef.java
comment|// Each test case initializes this field if required
DECL|field|prefs
specifier|public
specifier|static
name|JabRefPreferences
name|prefs
decl_stmt|;
comment|/**      * This field is initialized upon startup.      * Only GUI code is allowed to access it, logic code should use dependency injection.      */
DECL|field|journalAbbreviationLoader
specifier|public
specifier|static
name|JournalAbbreviationLoader
name|journalAbbreviationLoader
decl_stmt|;
comment|// Key binding preferences
DECL|field|keyPrefs
specifier|private
specifier|static
name|KeyBindingPreferences
name|keyPrefs
decl_stmt|;
comment|// Background tasks
DECL|field|focusListener
specifier|private
specifier|static
name|GlobalFocusListener
name|focusListener
decl_stmt|;
DECL|field|fileUpdateMonitor
specifier|private
specifier|static
name|FileUpdateMonitor
name|fileUpdateMonitor
decl_stmt|;
DECL|field|streamEavesdropper
specifier|private
specifier|static
name|StreamEavesdropper
name|streamEavesdropper
decl_stmt|;
comment|// Autosave manager
DECL|field|autoSaveManager
specifier|private
specifier|static
name|AutoSaveManager
name|autoSaveManager
decl_stmt|;
comment|// Key binding preferences
DECL|method|getKeyPrefs ()
specifier|public
specifier|static
name|KeyBindingPreferences
name|getKeyPrefs
parameter_list|()
block|{
if|if
condition|(
name|keyPrefs
operator|==
literal|null
condition|)
block|{
name|keyPrefs
operator|=
operator|new
name|KeyBindingPreferences
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
block|}
return|return
name|keyPrefs
return|;
block|}
comment|// Background tasks
DECL|method|startBackgroundTasks ()
specifier|public
specifier|static
name|void
name|startBackgroundTasks
parameter_list|()
block|{
name|Globals
operator|.
name|focusListener
operator|=
operator|new
name|GlobalFocusListener
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|streamEavesdropper
operator|=
name|StreamEavesdropper
operator|.
name|eavesdropOnSystem
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|fileUpdateMonitor
operator|=
operator|new
name|FileUpdateMonitor
argument_list|()
expr_stmt|;
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|executeWithLowPriorityInOwnThread
argument_list|(
name|Globals
operator|.
name|fileUpdateMonitor
argument_list|,
literal|"FileUpdateMonitor"
argument_list|)
expr_stmt|;
block|}
DECL|method|getFocusListener ()
specifier|public
specifier|static
name|GlobalFocusListener
name|getFocusListener
parameter_list|()
block|{
return|return
name|focusListener
return|;
block|}
DECL|method|getFileUpdateMonitor ()
specifier|public
specifier|static
name|FileUpdateMonitor
name|getFileUpdateMonitor
parameter_list|()
block|{
return|return
name|fileUpdateMonitor
return|;
block|}
DECL|method|getStreamEavesdropper ()
specifier|public
specifier|static
name|StreamEavesdropper
name|getStreamEavesdropper
parameter_list|()
block|{
return|return
name|streamEavesdropper
return|;
block|}
comment|// Autosave manager
DECL|method|startAutoSaveManager (JabRefFrame frame)
specifier|public
specifier|static
name|void
name|startAutoSaveManager
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|Globals
operator|.
name|autoSaveManager
operator|=
operator|new
name|AutoSaveManager
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|autoSaveManager
operator|.
name|startAutoSaveTimer
argument_list|()
expr_stmt|;
block|}
comment|// Stop the autosave manager if it has been started
DECL|method|stopAutoSaveManager ()
specifier|public
specifier|static
name|void
name|stopAutoSaveManager
parameter_list|()
block|{
if|if
condition|(
name|Globals
operator|.
name|autoSaveManager
operator|!=
literal|null
condition|)
block|{
name|Globals
operator|.
name|autoSaveManager
operator|.
name|stopAutoSaveTimer
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|autoSaveManager
operator|.
name|clearAutoSaves
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|autoSaveManager
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getAutoSaveManager ()
specifier|public
specifier|static
name|Optional
argument_list|<
name|AutoSaveManager
argument_list|>
name|getAutoSaveManager
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|Globals
operator|.
name|autoSaveManager
argument_list|)
return|;
block|}
block|}
end_class

end_unit

