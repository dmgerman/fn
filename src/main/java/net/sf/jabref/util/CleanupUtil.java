begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|FileListEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|FileListTableModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FileField
import|;
end_import

begin_comment
comment|// TODO: Move to cleanup classes.
end_comment

begin_class
DECL|class|CleanupUtil
specifier|public
class|class
name|CleanupUtil
block|{
comment|/**      * Collect file links from the given set of fields, and add them to the list contained in the field      * GUIGlobals.FILE_FIELD.      *      * @param database The database to modify.      * @param fields   The fields to find links in.      * @return A CompoundEdit specifying the undo operation for the whole operation.      */
DECL|method|upgradePdfPsToFile (BibDatabase database, String[] fields)
specifier|public
specifier|static
name|NamedCompound
name|upgradePdfPsToFile
parameter_list|(
name|BibDatabase
name|database
parameter_list|,
name|String
index|[]
name|fields
parameter_list|)
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move external links to 'file' field"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|database
operator|.
name|getEntryMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
init|=
name|upgradePdfPsToFile
argument_list|(
name|entry
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|fields
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldChange
name|change
range|:
name|changes
control|)
block|{
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|ce
return|;
block|}
comment|/**      * Collect file links from the given set of fields, and add them to the list contained in the field      * GUIGlobals.FILE_FIELD.      *      * @param entry  The entry to modify.      * @param fields The fields to find links in.      * @return A list of changes      */
DECL|method|upgradePdfPsToFile (BibEntry entry, List<String> fields)
specifier|public
specifier|static
name|List
argument_list|<
name|FieldChange
argument_list|>
name|upgradePdfPsToFile
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// If there are already links in the file field, keep those on top:
name|String
name|oldFileContent
init|=
name|entry
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileField
operator|.
name|ParsedFileField
argument_list|>
name|fileList
init|=
name|FileField
operator|.
name|parse
argument_list|(
name|oldFileContent
argument_list|)
decl_stmt|;
name|int
name|oldItemCount
init|=
name|fileList
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|entry
operator|.
name|getFieldOptional
argument_list|(
name|field
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|o
lambda|->
block|{
if|if
condition|(
name|o
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|FileField
operator|.
name|ParsedFileField
name|flEntry
init|=
operator|new
name|FileField
operator|.
name|ParsedFileField
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|o
argument_list|,
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeNameByExt
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|fileList
operator|.
name|add
argument_list|(
name|flEntry
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|FieldChange
argument_list|(
name|entry
argument_list|,
name|field
argument_list|,
name|o
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileList
operator|.
name|size
argument_list|()
operator|!=
name|oldItemCount
condition|)
block|{
name|String
name|newValue
init|=
name|FileField
operator|.
name|getStringRepresentation
argument_list|(
name|fileList
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|FieldChange
argument_list|(
name|entry
argument_list|,
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|oldFileContent
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|changes
return|;
block|}
DECL|method|fixFileEntries (BibEntry entry)
specifier|public
specifier|static
name|List
argument_list|<
name|FieldChange
argument_list|>
name|fixFileEntries
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|FileListTableModel
name|flModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|flModel
operator|.
name|setContent
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|flModel
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flModel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileListEntry
name|flEntry
init|=
name|flModel
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|link
init|=
name|flEntry
operator|.
name|getLink
argument_list|()
decl_stmt|;
name|String
name|description
init|=
name|flEntry
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|link
argument_list|)
operator|&&
operator|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|description
argument_list|)
operator|)
condition|)
block|{
comment|// link and description seem to be switched, quickly fix that
name|flEntry
operator|.
name|setLink
argument_list|(
name|flEntry
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|flEntry
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|String
name|newValue
init|=
name|flModel
operator|.
name|getStringRepresentation
argument_list|()
decl_stmt|;
assert|assert
operator|(
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
operator|)
assert|;
name|entry
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|FieldChange
name|change
init|=
operator|new
name|FieldChange
argument_list|(
name|entry
argument_list|,
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|change
argument_list|)
return|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
DECL|method|makePathsRelative (BibEntry entry, String[] paths)
specifier|public
specifier|static
name|List
argument_list|<
name|FieldChange
argument_list|>
name|makePathsRelative
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|String
index|[]
name|paths
parameter_list|)
block|{
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|FileListTableModel
name|flModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|flModel
operator|.
name|setContent
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|flModel
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flModel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileListEntry
name|flEntry
init|=
name|flModel
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|oldFileName
init|=
name|flEntry
operator|.
name|getLink
argument_list|()
decl_stmt|;
name|String
name|newFileName
init|=
name|FileUtil
operator|.
name|shortenFileName
argument_list|(
operator|new
name|File
argument_list|(
name|oldFileName
argument_list|)
argument_list|,
name|paths
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldFileName
operator|.
name|equals
argument_list|(
name|newFileName
argument_list|)
condition|)
block|{
name|flEntry
operator|.
name|setLink
argument_list|(
name|newFileName
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|String
name|newValue
init|=
name|flModel
operator|.
name|getStringRepresentation
argument_list|()
decl_stmt|;
assert|assert
operator|(
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
operator|)
assert|;
name|entry
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|FieldChange
name|change
init|=
operator|new
name|FieldChange
argument_list|(
name|entry
argument_list|,
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|change
argument_list|)
return|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
comment|// TODO: Remove dependence on database if possible
DECL|method|renameFiles (BibEntry entry, boolean onlyRelativePaths, BibDatabase database, List<String> paths)
specifier|public
specifier|static
name|List
argument_list|<
name|FieldChange
argument_list|>
name|renameFiles
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|boolean
name|onlyRelativePaths
parameter_list|,
name|BibDatabase
name|database
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
comment|//Extract the path
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|FileListTableModel
name|flModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|flModel
operator|.
name|setContent
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|flModel
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flModel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|realOldFilename
init|=
name|flModel
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
operator|.
name|getLink
argument_list|()
decl_stmt|;
if|if
condition|(
name|onlyRelativePaths
operator|&&
operator|(
operator|new
name|File
argument_list|(
name|realOldFilename
argument_list|)
operator|.
name|isAbsolute
argument_list|()
operator|)
condition|)
block|{
continue|continue;
block|}
name|String
name|newFilename
init|=
name|Util
operator|.
name|getLinkedFileName
argument_list|(
name|database
argument_list|,
name|entry
argument_list|)
decl_stmt|;
comment|//String oldFilename = bes.getField(GUIGlobals.FILE_FIELD); // would have to be stored for undoing purposes
comment|//Add extension to newFilename
name|newFilename
operator|=
name|newFilename
operator|+
literal|"."
operator|+
name|flModel
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getExtension
argument_list|()
expr_stmt|;
comment|//get new Filename with path
comment|//Create new Path based on old Path and new filename
name|File
name|expandedOldFile
init|=
name|FileUtil
operator|.
name|expandFilename
argument_list|(
name|realOldFilename
argument_list|,
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|expandedOldFile
operator|==
literal|null
operator|)
operator|||
operator|(
name|expandedOldFile
operator|.
name|getParent
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
comment|// something went wrong. Just skip this entry
continue|continue;
block|}
name|String
name|newPath
init|=
name|expandedOldFile
operator|.
name|getParent
argument_list|()
operator|.
name|concat
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
name|newFilename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|newPath
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// we do not overwrite files
comment|// TODO: we could check here if the newPath file is linked with the current entry. And if not, we could add a link
continue|continue;
block|}
comment|//do rename
name|boolean
name|renameSuccessful
init|=
name|FileUtil
operator|.
name|renameFile
argument_list|(
name|expandedOldFile
operator|.
name|toString
argument_list|()
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|renameSuccessful
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
comment|//Change the path for this entry
name|String
name|description
init|=
name|flModel
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|ExternalFileType
name|type
init|=
name|flModel
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|flModel
operator|.
name|removeEntry
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// we cannot use "newPath" to generate a FileListEntry as newPath is absolute, but we want to keep relative paths whenever possible
name|File
name|parent
init|=
operator|(
operator|new
name|File
argument_list|(
name|realOldFilename
argument_list|)
operator|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|String
name|newFileEntryFileName
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|newFileEntryFileName
operator|=
name|newFilename
expr_stmt|;
block|}
else|else
block|{
name|newFileEntryFileName
operator|=
name|parent
operator|.
name|toString
argument_list|()
operator|.
name|concat
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
name|newFilename
argument_list|)
expr_stmt|;
block|}
name|flModel
operator|.
name|addEntry
argument_list|(
name|i
argument_list|,
operator|new
name|FileListEntry
argument_list|(
name|description
argument_list|,
name|newFileEntryFileName
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: Reenable this
comment|//unsuccessfulRenames++;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|String
name|newValue
init|=
name|flModel
operator|.
name|getStringRepresentation
argument_list|()
decl_stmt|;
assert|assert
operator|(
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
operator|)
assert|;
name|entry
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
comment|//we put an undo of the field content here
comment|//the file is not being renamed back, which leads to inconsistencies
comment|//if we put a null undo object here, the change by "doMakePathsRelative" would overwrite the field value nevertheless.
name|FieldChange
name|change
init|=
operator|new
name|FieldChange
argument_list|(
name|entry
argument_list|,
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|change
argument_list|)
return|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
block|}
end_class

end_unit

