begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|Doi
specifier|public
class|class
name|Doi
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Doi
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Doi resolver URL
DECL|field|RESOLVER
specifier|public
specifier|static
specifier|final
name|String
name|RESOLVER
init|=
literal|"http://doi.org/"
decl_stmt|;
comment|// Doi
DECL|field|doi
specifier|private
name|String
name|doi
decl_stmt|;
comment|// Doi-regexp provided by http://stackoverflow.com/a/10324802/873282
comment|// Some Doi's are not caught by the regexp in the above link, i.e. 10.1002/(SICI)1522-2594(199911)42:5<952::AID-MRM16>3.0.CO;2-S
comment|// Removed<> from non-permitted characters
comment|// See http://www.doi.org/doi_handbook/2_Numbering.html#2.6
comment|// Regex
DECL|field|REGEX_DOI
specifier|private
specifier|static
specifier|final
name|String
name|REGEX_DOI
init|=
literal|"\\b(10[.][0-9]{3,}(?:[.][0-9]+)*/(?:(?![\"&\\'])\\S)+)\\b"
decl_stmt|;
DECL|field|REGEX_HTTP_DOI
specifier|private
specifier|static
specifier|final
name|String
name|REGEX_HTTP_DOI
init|=
literal|"http[s]?://[^\\s]*?"
operator|+
name|REGEX_DOI
decl_stmt|;
comment|// Pattern
DECL|field|PLAIN_DOI
specifier|private
specifier|static
specifier|final
name|Pattern
name|PLAIN_DOI
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|REGEX_DOI
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
comment|/**      * Creates a Doi from various schemes including URL or plain DOIs.      *      * @param doi the Doi string      * @throws NullPointerException if doi is null      * @throws IllegalArgumentException if doi does not include a valid Doi      */
DECL|method|Doi (String doi)
specifier|public
name|Doi
parameter_list|(
name|String
name|doi
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|doi
argument_list|)
expr_stmt|;
comment|// URL decoding
if|if
condition|(
name|containsHttpDoi
argument_list|(
name|doi
argument_list|)
condition|)
block|{
try|try
block|{
name|doi
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|doi
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Unsupported encoding: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|Matcher
name|matcher
init|=
name|PLAIN_DOI
operator|.
name|matcher
argument_list|(
name|doi
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|this
operator|.
name|doi
operator|=
name|matcher
operator|.
name|group
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|doi
operator|+
literal|" is not a valid Doi."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Check if the String matches a plain Doi      *      * @param value the String to check      * @return true if value contains a Doi      */
DECL|method|containsDoi (String value)
specifier|public
specifier|static
name|boolean
name|containsDoi
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|matches
argument_list|(
literal|".*"
operator|+
name|REGEX_DOI
operator|+
literal|".*"
argument_list|)
return|;
block|}
comment|/**      * Check if the String matches a URI presentation of a Doi      *      *<example>      *     The Doi name "10.1006/jmbi.1998.2354" would be made an actionable link as "http://doi.org/10.1006/jmbi.1998.2354".      *</example>      *      * @param value the String to check      * @return true if value contains a URI presentation of a Doi      */
DECL|method|containsHttpDoi (String value)
specifier|public
specifier|static
name|boolean
name|containsHttpDoi
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|matches
argument_list|(
literal|".*"
operator|+
name|REGEX_HTTP_DOI
operator|+
literal|".*"
argument_list|)
return|;
block|}
comment|/**      * Return the plain Doi      *      * @return the plain Doi value.      */
DECL|method|getDoi ()
specifier|public
name|String
name|getDoi
parameter_list|()
block|{
return|return
name|doi
return|;
block|}
comment|/**      * Return a URI presentation for the Doi      *      * @return a URI representation of the Doi      */
DECL|method|getUri ()
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|RESOLVER
operator|+
name|doi
return|;
block|}
comment|// TODO: move this GUI code
DECL|method|removeDOIfromBibtexEntryField (BibtexEntry bes, String fieldName, NamedCompound ce)
specifier|public
specifier|static
name|void
name|removeDOIfromBibtexEntryField
parameter_list|(
name|BibtexEntry
name|bes
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|String
name|origValue
init|=
name|bes
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|origValue
decl_stmt|;
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
name|REGEX_HTTP_DOI
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
name|REGEX_DOI
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|origValue
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|bes
argument_list|,
name|fieldName
argument_list|,
name|origValue
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|bes
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

