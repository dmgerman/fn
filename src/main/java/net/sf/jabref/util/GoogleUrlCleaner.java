begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2013 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_comment
comment|/**  * Class containing method(s) for cleaning URL returned by Google search.  * E.g. If you search for the "The String-to-String Correction Problem", Google  * will return a list of web pages associated with that text. If you copy any   * link that search returned, you will have access to the link "enriched"  * with many meta data.   * E.g. instead link http://dl.acm.org/citation.cfm?id=321811  * in your clipboard you will have this link:  *  https://www.google.hr/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CC8QFjAA&url=http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D321811&ei=L2_RUcj6HsfEswa7joGwBw&usg=AFQjCNEBJPUimu-bAns6lSLe-kszz4AiGA&sig2=tj9c5x62ioFHkQTKfwkj0g&bvm=bv.48572450,d.Yms  *  * Using methods of this class, "dirty" link will be cleaned.  *  * Created by Krunoslav Zubrinic, July 2013.  */
end_comment

begin_class
DECL|class|GoogleUrlCleaner
specifier|public
class|class
name|GoogleUrlCleaner
block|{
comment|// clean Google URL
DECL|method|cleanUrl (String dirty)
specifier|public
specifier|static
name|String
name|cleanUrl
parameter_list|(
name|String
name|dirty
parameter_list|)
block|{
if|if
condition|(
name|dirty
operator|==
literal|null
operator|||
name|dirty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|dirty
return|;
block|}
try|try
block|{
name|URL
name|u
init|=
operator|new
name|URL
argument_list|(
name|dirty
argument_list|)
decl_stmt|;
comment|// read URL parameters
name|String
name|query
init|=
name|u
operator|.
name|getQuery
argument_list|()
decl_stmt|;
comment|// if there is no parameters
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
return|return
name|dirty
return|;
block|}
comment|// split parameters
name|String
index|[]
name|pairs
init|=
name|query
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pairs
operator|==
literal|null
condition|)
block|{
return|return
name|dirty
return|;
block|}
for|for
control|(
name|String
name|pair
range|:
name|pairs
control|)
block|{
name|int
name|idx
init|=
name|pair
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
comment|// "clean" url is decoded value of "url" parameter
if|if
condition|(
literal|"url"
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|int
name|nextIdx
init|=
name|idx
operator|+
literal|1
decl_stmt|;
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|pair
operator|.
name|substring
argument_list|(
name|nextIdx
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
return|return
name|dirty
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
name|dirty
return|;
block|}
return|return
name|dirty
return|;
block|}
block|}
end_class

end_unit

