begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2016 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIDefaults
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UnsupportedLookAndFeelException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|FontUIResource
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|ParserResultWarningDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FocusRequester
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|VersionWorker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|AutosaveStartupPrompter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|OpenDatabaseAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|VersionPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|migrations
operator|.
name|PreferencesMigrations
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|plastic
operator|.
name|Plastic3DLookAndFeel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|plastic
operator|.
name|theme
operator|.
name|SkyBluer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|JabRefGUI
specifier|public
class|class
name|JabRefGUI
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JabRefGUI
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mainFrame
specifier|private
specifier|static
name|JabRefFrame
name|mainFrame
decl_stmt|;
DECL|field|bibDatabases
specifier|private
specifier|final
name|List
argument_list|<
name|ParserResult
argument_list|>
name|bibDatabases
decl_stmt|;
DECL|field|isBlank
specifier|private
specifier|final
name|boolean
name|isBlank
decl_stmt|;
DECL|field|postponed
specifier|private
specifier|final
name|List
argument_list|<
name|File
argument_list|>
name|postponed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|failed
specifier|private
specifier|final
name|List
argument_list|<
name|ParserResult
argument_list|>
name|failed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|toOpenTab
specifier|private
specifier|final
name|List
argument_list|<
name|ParserResult
argument_list|>
name|toOpenTab
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|focusedFile
specifier|private
name|String
name|focusedFile
decl_stmt|;
DECL|method|JabRefGUI (List<ParserResult> argsDatabases, boolean isBlank)
specifier|public
name|JabRefGUI
parameter_list|(
name|List
argument_list|<
name|ParserResult
argument_list|>
name|argsDatabases
parameter_list|,
name|boolean
name|isBlank
parameter_list|)
block|{
name|this
operator|.
name|bibDatabases
operator|=
name|argsDatabases
expr_stmt|;
name|this
operator|.
name|isBlank
operator|=
name|isBlank
expr_stmt|;
comment|// passed file (we take the first one) should be focused
if|if
condition|(
operator|!
name|argsDatabases
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|focusedFile
operator|=
name|argsDatabases
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|focusedFile
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_FOCUSED
argument_list|)
expr_stmt|;
block|}
name|openWindow
argument_list|()
expr_stmt|;
name|JabRefGUI
operator|.
name|checkForNewVersion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|checkForNewVersion (boolean manualExecution)
specifier|public
specifier|static
name|void
name|checkForNewVersion
parameter_list|(
name|boolean
name|manualExecution
parameter_list|)
block|{
name|Version
name|toBeIgnored
init|=
operator|new
name|VersionPreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
operator|.
name|getIgnoredVersion
argument_list|()
decl_stmt|;
name|Version
name|currentVersion
init|=
name|Globals
operator|.
name|BUILD_INFO
operator|.
name|getVersion
argument_list|()
decl_stmt|;
operator|new
name|VersionWorker
argument_list|(
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
argument_list|,
name|manualExecution
argument_list|,
name|currentVersion
argument_list|,
name|toBeIgnored
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
DECL|method|openWindow ()
specifier|private
name|void
name|openWindow
parameter_list|()
block|{
comment|// Perform checks and changes for users with a preference set from an older JabRef version.
name|PreferencesMigrations
operator|.
name|replaceAbstractField
argument_list|()
expr_stmt|;
name|PreferencesMigrations
operator|.
name|upgradeSortOrder
argument_list|()
expr_stmt|;
name|PreferencesMigrations
operator|.
name|upgradeFaultyEncodingStrings
argument_list|()
expr_stmt|;
comment|// This property is set to make the Mac OSX Java VM move the menu bar to the top of the screen
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"apple.laf.useScreenMenuBar"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
comment|// Set antialiasing on everywhere. This only works in JRE>= 1.5.
comment|// Or... it doesn't work, period.
comment|// TODO test and maybe remove this! I found this commented out with no additional info ( payload@lavabit.com )
comment|// Enabled since JabRef 2.11 beta 4
name|System
operator|.
name|setProperty
argument_list|(
literal|"swing.aatext"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// Default is "on".
comment|// "lcd" instead of "on" because of http://wiki.netbeans.org/FaqFontRendering and http://docs.oracle.com/javase/6/docs/technotes/guides/2d/flags.html#aaFonts
name|System
operator|.
name|setProperty
argument_list|(
literal|"awt.useSystemAAFontSettings"
argument_list|,
literal|"lcd"
argument_list|)
expr_stmt|;
comment|// look and feel. This MUST be the first thing to do before loading any Swing-specific code!
name|setLookAndFeel
argument_list|()
expr_stmt|;
comment|// If the option is enabled, open the last edited databases, if any.
if|if
condition|(
operator|!
name|isBlank
operator|&&
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OPEN_LAST_EDITED
argument_list|)
condition|)
block|{
name|openLastEditedDatabases
argument_list|()
expr_stmt|;
block|}
name|GUIGlobals
operator|.
name|init
argument_list|()
expr_stmt|;
name|GUIGlobals
operator|.
name|currentFont
operator|=
operator|new
name|Font
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_FAMILY
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_STYLE
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Initializing frame"
argument_list|)
expr_stmt|;
name|JabRefGUI
operator|.
name|mainFrame
operator|=
operator|new
name|JabRefFrame
argument_list|()
expr_stmt|;
comment|// Add all bibDatabases databases to the frame:
name|boolean
name|first
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|bibDatabases
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ParserResult
argument_list|>
name|parserResultIterator
init|=
name|bibDatabases
operator|.
name|iterator
argument_list|()
init|;
name|parserResultIterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ParserResult
name|pr
init|=
name|parserResultIterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Define focused tab
if|if
condition|(
name|focusedFile
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|equals
argument_list|(
name|focusedFile
argument_list|)
condition|)
block|{
name|first
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|pr
operator|.
name|isInvalid
argument_list|()
condition|)
block|{
name|failed
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
name|parserResultIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|pr
operator|.
name|isPostponedAutosaveFound
argument_list|()
condition|)
block|{
if|if
condition|(
name|pr
operator|.
name|toOpenTab
argument_list|()
condition|)
block|{
comment|// things to be appended to an opened tab should be done after opening all tabs
comment|// add them to the list
name|toOpenTab
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
operator|.
name|addParserResult
argument_list|(
name|pr
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|parserResultIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|postponed
operator|.
name|add
argument_list|(
name|pr
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// finally add things to the currently opened tab
for|for
control|(
name|ParserResult
name|pr
range|:
name|toOpenTab
control|)
block|{
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
operator|.
name|addParserResult
argument_list|(
name|pr
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
comment|// Start auto save timer:
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_SAVE
argument_list|)
condition|)
block|{
name|Globals
operator|.
name|startAutoSaveManager
argument_list|(
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If we are set to remember the window location, we also remember the maximised
comment|// state. This needs to be set after the window has been made visible, so we
comment|// do it here:
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WINDOW_MAXIMISED
argument_list|)
condition|)
block|{
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
operator|.
name|setExtendedState
argument_list|(
name|JFrame
operator|.
name|MAXIMIZED_BOTH
argument_list|)
expr_stmt|;
block|}
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WINDOW_MAXIMISED
argument_list|)
condition|)
block|{
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
operator|.
name|setExtendedState
argument_list|(
name|JFrame
operator|.
name|MAXIMIZED_BOTH
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ParserResult
name|pr
range|:
name|failed
control|)
block|{
name|String
name|message
init|=
literal|"<html>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error opening file '%0'."
argument_list|,
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"<p>"
operator|+
name|pr
operator|.
name|getErrorMessage
argument_list|()
operator|+
literal|"</html>"
decl_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
argument_list|,
name|message
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|DISPLAY_KEY_WARNING_DIALOG_AT_STARTUP
argument_list|)
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ParserResult
name|pr
range|:
name|bibDatabases
control|)
block|{
name|ParserResultWarningDialog
operator|.
name|showParserResultWarningDialog
argument_list|(
name|pr
argument_list|,
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
argument_list|,
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
comment|// After adding the databases, go through each and see if
comment|// any post open actions need to be done. For instance, checking
comment|// if we found new entry types that can be imported, or checking
comment|// if the database contents should be modified due to new features
comment|// in this version of JabRef.
comment|// Note that we have to check whether i does not go over getBasePanelCount().
comment|// This is because importToOpen might have been used, which adds to
comment|// loadedDatabases, but not to getBasePanelCount()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|i
operator|<
name|bibDatabases
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
name|i
operator|<
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
operator|.
name|getBasePanelCount
argument_list|()
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
name|bibDatabases
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BasePanel
name|panel
init|=
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
operator|.
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|OpenDatabaseAction
operator|.
name|performPostOpenActions
argument_list|(
name|panel
argument_list|,
name|pr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Finished adding panels"
argument_list|)
expr_stmt|;
comment|// If any database loading was postponed due to an autosave, schedule them
comment|// for handing now:
if|if
condition|(
operator|!
name|postponed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AutosaveStartupPrompter
name|asp
init|=
operator|new
name|AutosaveStartupPrompter
argument_list|(
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
argument_list|,
name|postponed
argument_list|)
decl_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|asp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bibDatabases
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|new
name|FocusRequester
argument_list|(
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getMainTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openLastEditedDatabases ()
specifier|private
name|void
name|openLastEditedDatabases
parameter_list|()
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_EDITED
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|lastFiles
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_EDITED
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|lastFiles
control|)
block|{
name|File
name|dbFile
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// Already parsed via command line parameter, e.g., "jabref.jar somefile.bib"
if|if
condition|(
name|isLoaded
argument_list|(
name|dbFile
argument_list|)
operator|||
operator|!
name|dbFile
operator|.
name|exists
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|ParserResult
name|parsedDatabase
init|=
name|OpenDatabaseAction
operator|.
name|loadDatabaseOrAutoSave
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|parsedDatabase
operator|.
name|isNullResult
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|dbFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bibDatabases
operator|.
name|add
argument_list|(
name|parsedDatabase
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isLoaded (File fileToOpen)
specifier|private
name|boolean
name|isLoaded
parameter_list|(
name|File
name|fileToOpen
parameter_list|)
block|{
for|for
control|(
name|ParserResult
name|pr
range|:
name|bibDatabases
control|)
block|{
if|if
condition|(
name|pr
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|equals
argument_list|(
name|fileToOpen
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|setLookAndFeel ()
specifier|private
name|void
name|setLookAndFeel
parameter_list|()
block|{
try|try
block|{
name|String
name|lookFeel
decl_stmt|;
name|String
name|systemLookFeel
init|=
name|UIManager
operator|.
name|getSystemLookAndFeelClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_DEFAULT_LOOK_AND_FEEL
argument_list|)
condition|)
block|{
comment|// FIXME: Problems with OpenJDK and GTK L&F
comment|// See https://github.com/JabRef/jabref/issues/393, https://github.com/JabRef/jabref/issues/638
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.runtime.name"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"OpenJDK"
argument_list|)
condition|)
block|{
comment|// Metal L&F
name|lookFeel
operator|=
name|UIManager
operator|.
name|getCrossPlatformLookAndFeelClassName
argument_list|()
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"There seem to be problems with OpenJDK and the default GTK Look&Feel. Using Metal L&F instead. Change to another L&F with caution."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lookFeel
operator|=
name|systemLookFeel
expr_stmt|;
block|}
block|}
else|else
block|{
name|lookFeel
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WIN_LOOK_AND_FEEL
argument_list|)
expr_stmt|;
block|}
comment|// FIXME: Open JDK problem
if|if
condition|(
name|UIManager
operator|.
name|getCrossPlatformLookAndFeelClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|lookFeel
argument_list|)
operator|&&
operator|!
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.runtime.name"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"OpenJDK"
argument_list|)
condition|)
block|{
comment|// try to avoid ending up with the ugly Metal L&F
name|Plastic3DLookAndFeel
name|lnf
init|=
operator|new
name|Plastic3DLookAndFeel
argument_list|()
decl_stmt|;
name|Plastic3DLookAndFeel
operator|.
name|setCurrentTheme
argument_list|(
operator|new
name|SkyBluer
argument_list|()
argument_list|)
expr_stmt|;
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|Options
operator|.
name|setPopupDropShadowEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|lnf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|lookFeel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|UnsupportedLookAndFeelException
name|e
parameter_list|)
block|{
comment|// specified look and feel does not exist on the classpath, so use system l&f
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|systemLookFeel
argument_list|)
expr_stmt|;
comment|// also set system l&f as default
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|WIN_LOOK_AND_FEEL
argument_list|,
name|systemLookFeel
argument_list|)
expr_stmt|;
comment|// notify the user
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to find the requested look and feel and thus the default one is used."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Unable to find requested look and feel"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Look and feel could not be set"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// In JabRef v2.8, we did it only on NON-Mac. Now, we try on all platforms
name|boolean
name|overrideDefaultFonts
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OVERRIDE_DEFAULT_FONTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|overrideDefaultFonts
condition|)
block|{
name|int
name|fontSize
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|MENU_FONT_SIZE
argument_list|)
decl_stmt|;
name|UIDefaults
name|defaults
init|=
name|UIManager
operator|.
name|getDefaults
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|Object
argument_list|>
name|keys
init|=
name|defaults
operator|.
name|keys
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|Collections
operator|.
name|list
argument_list|(
name|keys
argument_list|)
control|)
block|{
if|if
condition|(
operator|(
name|key
operator|instanceof
name|String
operator|)
operator|&&
operator|(
operator|(
name|String
operator|)
name|key
operator|)
operator|.
name|endsWith
argument_list|(
literal|".font"
argument_list|)
condition|)
block|{
name|FontUIResource
name|font
init|=
operator|(
name|FontUIResource
operator|)
name|UIManager
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|font
operator|=
operator|new
name|FontUIResource
argument_list|(
name|font
operator|.
name|getName
argument_list|()
argument_list|,
name|font
operator|.
name|getStyle
argument_list|()
argument_list|,
name|fontSize
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getMainFrame ()
specifier|public
specifier|static
name|JabRefFrame
name|getMainFrame
parameter_list|()
block|{
return|return
name|mainFrame
return|;
block|}
comment|// Only used for testing, other than that do NOT set the mainFrame...
DECL|method|setMainFrame (JabRefFrame mainFrame)
specifier|public
specifier|static
name|void
name|setMainFrame
parameter_list|(
name|JabRefFrame
name|mainFrame
parameter_list|)
block|{
name|JabRefGUI
operator|.
name|mainFrame
operator|=
name|mainFrame
expr_stmt|;
block|}
block|}
end_class

end_unit

