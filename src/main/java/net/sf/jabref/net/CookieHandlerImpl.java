begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.net
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|CookieHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
DECL|class|CookieHandlerImpl
specifier|public
class|class
name|CookieHandlerImpl
extends|extends
name|CookieHandler
block|{
comment|// "Long" term storage for cookies, not serialized so only
comment|// for current JVM instance
DECL|field|cache
specifier|private
name|List
argument_list|<
name|Cookie
argument_list|>
name|cache
init|=
operator|new
name|LinkedList
argument_list|<
name|Cookie
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Saves all applicable cookies present in the response      * headers into cache.      *      * @param uri             URI source of cookies      * @param responseHeaders Immutable map from field names to      *                        lists of field      *                        values representing the response header fields returned      */
DECL|method|put ( URI uri, Map<String, List<String>> responseHeaders)
specifier|public
name|void
name|put
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|setCookieList
init|=
name|responseHeaders
operator|.
name|get
argument_list|(
literal|"Set-Cookie"
argument_list|)
decl_stmt|;
if|if
condition|(
name|setCookieList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|item
range|:
name|setCookieList
control|)
block|{
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|uri
argument_list|,
name|item
argument_list|)
decl_stmt|;
comment|// Remove cookie if it already exists
comment|// New one will replace
for|for
control|(
name|Iterator
argument_list|<
name|Cookie
argument_list|>
name|i
init|=
name|cache
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Cookie
name|existingCookie
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
comment|/*(cookie.getURI().equals(                             existingCookie.getURI()))*/
operator|(
name|cookie
operator|.
name|domain
operator|.
name|equals
argument_list|(
name|existingCookie
operator|.
name|domain
argument_list|)
operator|)
operator|&&
operator|(
name|cookie
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|existingCookie
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|//System.out.println(cookie.getName()+" : "+cookie.domain+" : "+cookie.toString());
name|cache
operator|.
name|add
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Gets all the applicable cookies from a cookie cache for      * the specified uri in the request header.      *      * @param uri            URI to send cookies to in a request      * @param requestHeaders Map from request header field names      *                       to lists of field values representing the current request      *                       headers      * @return Immutable map, with field name "Cookie" to a list      *         of cookies      */
DECL|method|get ( URI uri, Map<String, List<String>> requestHeaders)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|get
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|requestHeaders
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Retrieve all the cookies for matching URI
comment|// Put in comma-separated list
name|StringBuilder
name|cookies
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Cookie
argument_list|>
name|i
init|=
name|cache
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|//for (Cookie cookie : cache) {
name|Cookie
name|cookie
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Remove cookies that have expired
if|if
condition|(
name|cookie
operator|.
name|hasExpired
argument_list|()
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cookie
operator|.
name|matches
argument_list|(
name|uri
argument_list|)
condition|)
block|{
if|if
condition|(
name|cookies
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cookies
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|cookies
operator|.
name|append
argument_list|(
name|cookie
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Map to return
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cookieMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|requestHeaders
argument_list|)
decl_stmt|;
comment|// Convert StringBuilder to List, store in map
if|if
condition|(
name|cookies
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|cookies
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|cookieMap
operator|.
name|put
argument_list|(
literal|"Cookie"
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|cookieMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

