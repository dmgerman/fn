begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2016 Raik Nagel and JabRef contributors     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// function : Handling of bibtex fields.
end_comment

begin_comment
comment|//            All bibtex-field related stuff should be placed here!
end_comment

begin_comment
comment|//            Because we can export these informations into additional
end_comment

begin_comment
comment|//            config files -> simple extension and definition of new fields....
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// todo     : - handling of identically fields with different names
end_comment

begin_comment
comment|//              e.g. LCCN = lib-congress
end_comment

begin_comment
comment|//            - group id for each fields, e.g. standard, jurabib, bio....
end_comment

begin_comment
comment|//            - add a additional properties functionality into the
end_comment

begin_comment
comment|//              BibtexSingleField class
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// modified : r.nagel 25.04.2006
end_comment

begin_comment
comment|//            export/import of some definition from/to a xml file
end_comment

begin_package
DECL|package|net.sf.jabref.bibtex
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|IEEETranEntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldsUtils
import|;
end_import

begin_class
DECL|class|InternalBibtexFields
specifier|public
class|class
name|InternalBibtexFields
block|{
comment|// some internal fields
DECL|field|SEARCH
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH
init|=
literal|"__search"
decl_stmt|;
DECL|field|GROUPSEARCH
specifier|public
specifier|static
specifier|final
name|String
name|GROUPSEARCH
init|=
literal|"__groupsearch"
decl_stmt|;
DECL|field|MARKED
specifier|public
specifier|static
specifier|final
name|String
name|MARKED
init|=
literal|"__markedentry"
decl_stmt|;
DECL|field|OWNER
specifier|public
specifier|static
specifier|final
name|String
name|OWNER
init|=
literal|"owner"
decl_stmt|;
DECL|field|TIMESTAMP
specifier|public
specifier|static
specifier|final
name|String
name|TIMESTAMP
init|=
literal|"timestamp"
decl_stmt|;
DECL|field|ENTRYTYPE
specifier|private
specifier|static
specifier|final
name|String
name|ENTRYTYPE
init|=
literal|"entrytype"
decl_stmt|;
DECL|field|NUMBER_COL
specifier|public
specifier|static
specifier|final
name|String
name|NUMBER_COL
init|=
literal|"#"
decl_stmt|;
DECL|field|DEFAULT_INSPECTION_FIELDS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_INSPECTION_FIELDS
init|=
operator|new
name|String
index|[]
block|{
literal|"author"
block|,
literal|"title"
block|,
literal|"year"
block|,
name|BibEntry
operator|.
name|KEY_FIELD
block|}
decl_stmt|;
comment|// singleton instance
DECL|field|RUNTIME
specifier|private
specifier|static
specifier|final
name|InternalBibtexFields
name|RUNTIME
init|=
operator|new
name|InternalBibtexFields
argument_list|()
decl_stmt|;
comment|// contains all bibtex-field objects (BibtexSingleField)
DECL|field|fieldSet
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BibtexSingleField
argument_list|>
name|fieldSet
decl_stmt|;
comment|// contains all known (and public) bibtex fieldnames
DECL|field|PUBLIC_FIELDS
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|PUBLIC_FIELDS
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|InternalBibtexFields ()
specifier|private
name|InternalBibtexFields
parameter_list|()
block|{
name|fieldSet
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|BibtexSingleField
name|dummy
decl_stmt|;
comment|// FIRST: all standard fields
comment|// These are the fields that BibTex might want to treat, so these
comment|// must conform to BibTex rules.
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"address"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
comment|// An annotation. It is not used by the standard bibliography styles,
comment|// but may be used by others that produce an annotated bibliography.
comment|// http://www.ecst.csuchico.edu/~jacobsd/bib/formats/bibtex.html
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"annote"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|LARGE_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"author"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|,
literal|280
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|PERSON_NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"booktitle"
argument_list|,
literal|true
argument_list|,
literal|175
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"chapter"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"crossref"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"edition"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"editor"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|,
literal|280
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|PERSON_NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"howpublished"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"institution"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"journal"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|JOURNAL_NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"journaltitle"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|JOURNAL_NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"key"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"month"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"note"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"number"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"organization"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"pages"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"publisher"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"school"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"series"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"title"
argument_list|,
literal|true
argument_list|,
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"type"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"language"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"volume"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"year"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// custom fields not displayed at editor, but as columns in the UI
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|SpecialFieldsUtils
operator|.
name|FIELDNAME_RANKING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SERIALIZESPECIALFIELDS
argument_list|)
condition|)
block|{
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|SpecialFieldsUtils
operator|.
name|FIELDNAME_PRIORITY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SERIALIZESPECIALFIELDS
argument_list|)
condition|)
block|{
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|SpecialFieldsUtils
operator|.
name|FIELDNAME_RELEVANCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SERIALIZESPECIALFIELDS
argument_list|)
condition|)
block|{
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|SpecialFieldsUtils
operator|.
name|FIELDNAME_QUALITY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SERIALIZESPECIALFIELDS
argument_list|)
condition|)
block|{
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|SpecialFieldsUtils
operator|.
name|FIELDNAME_READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SERIALIZESPECIALFIELDS
argument_list|)
condition|)
block|{
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|SpecialFieldsUtils
operator|.
name|FIELDNAME_PRINTED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SERIALIZESPECIALFIELDS
argument_list|)
condition|)
block|{
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
comment|// some semi-standard fields
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"doi"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|EXTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"eid"
argument_list|,
literal|true
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"date"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"pmid"
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|,
literal|60
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// additional fields ------------------------------------------------------
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"location"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"abstract"
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|LARGE_W
argument_list|,
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
literal|"url"
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|EXTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"comment"
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|MEDIUM_W
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"keywords"
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|FILE_EDITOR
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
literal|"search"
argument_list|,
literal|false
argument_list|,
literal|75
argument_list|)
argument_list|)
expr_stmt|;
comment|// some internal fields ----------------------------------------------
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|InternalBibtexFields
operator|.
name|NUMBER_COL
argument_list|,
literal|false
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|InternalBibtexFields
operator|.
name|OWNER
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|SET_OWNER
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|InternalBibtexFields
operator|.
name|TIMESTAMP
argument_list|,
literal|false
argument_list|,
name|BibtexSingleField
operator|.
name|SMALL_W
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|DATEPICKER
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|InternalBibtexFields
operator|.
name|ENTRYTYPE
argument_list|,
literal|false
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|InternalBibtexFields
operator|.
name|SEARCH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|InternalBibtexFields
operator|.
name|GROUPSEARCH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|InternalBibtexFields
operator|.
name|MARKED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|setWriteable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// This field must be written to file!
name|dummy
operator|.
name|setDisplayable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
comment|// IEEEtranBSTCTL fields
for|for
control|(
name|String
name|yesNoField
range|:
name|IEEETranEntryTypes
operator|.
name|IEEETRANBSTCTL_YES_NO_FIELDS
control|)
block|{
name|dummy
operator|=
operator|new
name|BibtexSingleField
argument_list|(
name|yesNoField
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExtras
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|YES_NO
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|numericField
range|:
name|IEEETranEntryTypes
operator|.
name|IEEETRANBSTCTL_NUMERIC_FIELDS
control|)
block|{
name|add
argument_list|(
operator|new
name|BibtexSingleField
argument_list|(
name|numericField
argument_list|,
literal|false
argument_list|)
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// collect all public fields for the PUBLIC_FIELDS array
for|for
control|(
name|BibtexSingleField
name|sField
range|:
name|fieldSet
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|sField
operator|.
name|isPrivate
argument_list|()
condition|)
block|{
name|PUBLIC_FIELDS
operator|.
name|add
argument_list|(
name|sField
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
comment|// or export the complete BibtexSingleField ?
comment|// BibtexSingleField.toString() { return fieldname ; }
block|}
block|}
comment|// sort the entries
name|Collections
operator|.
name|sort
argument_list|(
name|PUBLIC_FIELDS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read the "numericFields" string array from preferences, and activate numeric      * sorting for all fields listed in the array. If an unknown field name is included,      * add a field descriptor for the new field.      */
DECL|method|setNumericFieldsFromPrefs ()
specifier|public
specifier|static
name|void
name|setNumericFieldsFromPrefs
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|numFields
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|NUMERIC_FIELDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|numFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Build a Set of field names for the fields that should be sorted numerically:
name|Set
argument_list|<
name|String
argument_list|>
name|nF
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|nF
operator|.
name|addAll
argument_list|(
name|numFields
argument_list|)
expr_stmt|;
comment|// Look through all registered fields, and activate numeric sorting if necessary:
for|for
control|(
name|String
name|fieldName
range|:
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|fieldSet
operator|.
name|keySet
argument_list|()
control|)
block|{
name|BibtexSingleField
name|field
init|=
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|fieldSet
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|isNumeric
argument_list|()
operator|&&
name|nF
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|field
operator|.
name|setNumeric
argument_list|(
name|nF
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nF
operator|.
name|remove
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
comment|// remove, so we clear the set of all standard fields.
block|}
comment|// If there are fields left in nF, these must be non-standard fields. Add descriptors for them:
for|for
control|(
name|String
name|fieldName
range|:
name|nF
control|)
block|{
name|BibtexSingleField
name|field
init|=
operator|new
name|BibtexSingleField
argument_list|(
name|fieldName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|field
operator|.
name|setNumeric
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|fieldSet
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * insert a field into the internal list      */
DECL|method|add (BibtexSingleField field)
specifier|private
name|void
name|add
parameter_list|(
name|BibtexSingleField
name|field
parameter_list|)
block|{
comment|// field == null check
name|String
name|key
init|=
name|field
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|fieldSet
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
comment|// --------------------------------------------------------------------------
comment|//  the "static area"
comment|// --------------------------------------------------------------------------
DECL|method|getField (String name)
specifier|private
specifier|static
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|getField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|fieldSet
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|getFieldExtras (String name)
specifier|public
specifier|static
name|Set
argument_list|<
name|BibtexSingleFieldProperties
argument_list|>
name|getFieldExtras
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|sField
operator|.
name|get
argument_list|()
operator|.
name|getExtras
argument_list|()
return|;
block|}
return|return
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|BibtexSingleFieldProperties
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getFieldWeight (String name)
specifier|public
specifier|static
name|double
name|getFieldWeight
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|sField
operator|.
name|get
argument_list|()
operator|.
name|getWeight
argument_list|()
return|;
block|}
return|return
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_WEIGHT
return|;
block|}
DECL|method|setFieldWeight (String fieldName, double weight)
specifier|public
specifier|static
name|void
name|setFieldWeight
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|double
name|weight
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|sField
operator|.
name|get
argument_list|()
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFieldLength (String name)
specifier|public
specifier|static
name|int
name|getFieldLength
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|sField
operator|.
name|get
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
block|}
return|return
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_LENGTH
return|;
block|}
DECL|method|isWriteableField (String field)
specifier|public
specifier|static
name|boolean
name|isWriteableField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
operator|!
name|sField
operator|.
name|isPresent
argument_list|()
operator|||
name|sField
operator|.
name|get
argument_list|()
operator|.
name|isWriteable
argument_list|()
return|;
block|}
DECL|method|isDisplayableField (String field)
specifier|public
specifier|static
name|boolean
name|isDisplayableField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
operator|!
name|sField
operator|.
name|isPresent
argument_list|()
operator|||
name|sField
operator|.
name|get
argument_list|()
operator|.
name|isDisplayable
argument_list|()
return|;
block|}
comment|/**      * Returns true if the given field is a standard Bibtex field.      *      * @param field a<code>String</code> value      * @return a<code>boolean</code> value      */
DECL|method|isStandardField (String field)
specifier|public
specifier|static
name|boolean
name|isStandardField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|sField
operator|.
name|isPresent
argument_list|()
operator|&&
name|sField
operator|.
name|get
argument_list|()
operator|.
name|isStandard
argument_list|()
return|;
block|}
DECL|method|isNumeric (String field)
specifier|public
specifier|static
name|boolean
name|isNumeric
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibtexSingleField
argument_list|>
name|sField
init|=
name|InternalBibtexFields
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|sField
operator|.
name|isPresent
argument_list|()
operator|&&
name|sField
operator|.
name|get
argument_list|()
operator|.
name|isNumeric
argument_list|()
return|;
block|}
comment|/**      * returns a List with all fieldnames      */
DECL|method|getAllFieldNames ()
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAllFieldNames
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|PUBLIC_FIELDS
argument_list|)
return|;
block|}
comment|/**      * returns a List with only private fieldnames      */
DECL|method|getAllPrivateFieldNames ()
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAllPrivateFieldNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BibtexSingleField
name|sField
range|:
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|fieldSet
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|sField
operator|.
name|isPrivate
argument_list|()
condition|)
block|{
name|pFields
operator|.
name|add
argument_list|(
name|sField
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pFields
return|;
block|}
comment|/**      * returns the fieldname of the entry at index t      */
DECL|method|getFieldName (int t)
specifier|public
specifier|static
name|String
name|getFieldName
parameter_list|(
name|int
name|t
parameter_list|)
block|{
return|return
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|PUBLIC_FIELDS
operator|.
name|get
argument_list|(
name|t
argument_list|)
return|;
block|}
comment|/**      * returns the number of available fields      */
DECL|method|numberOfPublicFields ()
specifier|public
specifier|static
name|int
name|numberOfPublicFields
parameter_list|()
block|{
return|return
name|InternalBibtexFields
operator|.
name|RUNTIME
operator|.
name|PUBLIC_FIELDS
operator|.
name|size
argument_list|()
return|;
block|}
comment|/*        public static int getPreferredFieldLength(String name) {        int l = DEFAULT_FIELD_LENGTH;        Object o = fieldLength.get(name.toLowerCase());        if (o != null)        l = ((Integer)o).intValue();        return l;        }*/
block|}
end_class

end_unit

