begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.bibtex
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BibtexFields
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|exporter
operator|.
name|LatexFieldFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_class
DECL|class|BibEntryWriter
specifier|public
class|class
name|BibEntryWriter
block|{
DECL|field|requiredFieldsSorted
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|requiredFieldsSorted
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|optionalFieldsSorted
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|optionalFieldsSorted
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * The maximum length of a field name to properly make the alignment of the      * equal sign.      */
DECL|field|maxFieldLength
specifier|private
specifier|static
specifier|final
name|int
name|maxFieldLength
decl_stmt|;
static|static
block|{
comment|// Looking for the longest field name.
comment|// XXX JK: Look for all used field names not only defined once, since
comment|//         there may be some unofficial field name used.
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|EntryType
name|type
range|:
name|EntryTypes
operator|.
name|getAllValues
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|field
range|:
name|type
operator|.
name|getRequiredFieldsFlat
argument_list|()
control|)
block|{
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|field
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|getOptionalFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|type
operator|.
name|getOptionalFields
argument_list|()
control|)
block|{
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|field
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|maxFieldLength
operator|=
name|max
expr_stmt|;
block|}
DECL|field|fieldFormatter
specifier|private
specifier|final
name|LatexFieldFormatter
name|fieldFormatter
decl_stmt|;
DECL|field|write
specifier|private
specifier|final
name|boolean
name|write
decl_stmt|;
DECL|method|BibEntryWriter (LatexFieldFormatter fieldFormatter, boolean write)
specifier|public
name|BibEntryWriter
parameter_list|(
name|LatexFieldFormatter
name|fieldFormatter
parameter_list|,
name|boolean
name|write
parameter_list|)
block|{
name|this
operator|.
name|fieldFormatter
operator|=
name|fieldFormatter
expr_stmt|;
name|this
operator|.
name|write
operator|=
name|write
expr_stmt|;
block|}
DECL|method|write (BibEntry entry, Writer out)
specifier|public
name|void
name|write
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if the entry has not been modified, write it as it was
if|if
condition|(
operator|!
name|entry
operator|.
name|hasChanged
argument_list|()
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|entry
operator|.
name|getParsedSerialization
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|out
operator|.
name|write
argument_list|(
name|Globals
operator|.
name|NEWLINE
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
name|writeRequiredFieldsFirstRemainingFieldsSecond
argument_list|(
name|entry
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Write fields in the order of requiredFields, optionalFields and other fields, but does not sort the fields.      *      * @param entry      * @param out      * @throws IOException      */
DECL|method|writeRequiredFieldsFirstRemainingFieldsSecond (BibEntry entry, Writer out)
specifier|private
name|void
name|writeRequiredFieldsFirstRemainingFieldsSecond
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Write header with type and bibtex-key.
name|out
operator|.
name|write
argument_list|(
literal|'@'
operator|+
name|entry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|+
literal|'{'
argument_list|)
expr_stmt|;
name|writeKeyField
argument_list|(
name|entry
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|written
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|written
operator|.
name|add
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|)
expr_stmt|;
name|boolean
name|hasWritten
init|=
literal|false
decl_stmt|;
comment|// Write required fields first.
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|entry
operator|.
name|getRequiredFieldsFlat
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|fields
control|)
block|{
name|hasWritten
operator|=
name|hasWritten
operator||
name|writeField
argument_list|(
name|entry
argument_list|,
name|out
argument_list|,
name|value
argument_list|,
name|hasWritten
argument_list|)
expr_stmt|;
name|written
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Then optional fields.
name|fields
operator|=
name|entry
operator|.
name|getOptionalFields
argument_list|()
expr_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|!
name|written
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// If field appears both in req. and opt. don't repeat.
name|hasWritten
operator|=
name|hasWritten
operator||
name|writeField
argument_list|(
name|entry
argument_list|,
name|out
argument_list|,
name|value
argument_list|,
name|hasWritten
argument_list|)
expr_stmt|;
name|written
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Then write remaining fields in alphabetic order.
name|TreeSet
argument_list|<
name|String
argument_list|>
name|remainingFields
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|entry
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|boolean
name|writeIt
init|=
name|write
condition|?
name|BibtexFields
operator|.
name|isWriteableField
argument_list|(
name|key
argument_list|)
else|:
name|BibtexFields
operator|.
name|isDisplayableField
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|written
operator|.
name|contains
argument_list|(
name|key
argument_list|)
operator|&&
name|writeIt
condition|)
block|{
name|remainingFields
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|field
range|:
name|remainingFields
control|)
block|{
name|hasWritten
operator|=
name|hasWritten
operator||
name|writeField
argument_list|(
name|entry
argument_list|,
name|out
argument_list|,
name|field
argument_list|,
name|hasWritten
argument_list|)
expr_stmt|;
block|}
comment|// Finally, end the entry.
name|out
operator|.
name|write
argument_list|(
operator|(
name|hasWritten
condition|?
name|Globals
operator|.
name|NEWLINE
else|:
literal|""
operator|)
operator|+
literal|'}'
argument_list|)
expr_stmt|;
block|}
DECL|method|writeKeyField (BibEntry entry, Writer out)
specifier|private
name|void
name|writeKeyField
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|keyField
init|=
name|StringUtil
operator|.
name|shaveString
argument_list|(
name|entry
operator|.
name|getCiteKey
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|keyField
operator|==
literal|null
condition|?
literal|""
else|:
name|keyField
operator|)
operator|+
literal|','
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Write a single field, if it has any content.      *      * @param entry             the entry to write      * @param out               the target of the write      * @param name              The field name      * @param prependWhiteSpace Indicates whether this is the first field written for      *                          this entry - if not, start by writing a comma and newline   @return true if this field was written, false if it was skipped because      *                          it was not set      * @throws IOException In case of an IO error      */
DECL|method|writeField (BibEntry entry, Writer out, String name, boolean prependWhiteSpace)
specifier|private
name|boolean
name|writeField
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|Writer
name|out
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|prependWhiteSpace
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|field
init|=
name|entry
operator|.
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// only write field if is is not empty or if empty fields should be included
comment|// the first condition mirrors mirror behavior of com.jgoodies.common.base.Strings.isNotBlank(str)
if|if
condition|(
operator|!
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|field
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|prependWhiteSpace
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|','
operator|+
name|Globals
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"  "
operator|+
name|getFieldDisplayName
argument_list|(
name|name
argument_list|)
operator|+
literal|" = "
argument_list|)
expr_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|fieldFormatter
operator|.
name|format
argument_list|(
name|field
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error in field '"
operator|+
name|name
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Get display version of a entry field.      *<p>      * BibTeX is case-insensitive therefore there is no difference between:      * howpublished, HOWPUBLISHED, HowPublished, etc.      *<p>      * The was a long discussion about how JabRef should write the fields.      * See https://github.com/JabRef/jabref/issues/116      *<p>      * The team decided to do the biber way and use lower case for the field names.      *      * @param field The name of the field.      * @return The display version of the field name.      */
DECL|method|getFieldDisplayName (String field)
specifier|private
name|String
name|getFieldDisplayName
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// hard coded "UNKNOWN" is assigned to a field without any name
name|field
operator|=
literal|"UNKNOWN"
expr_stmt|;
block|}
name|StringBuilder
name|suffixSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|BibEntryWriter
operator|.
name|maxFieldLength
operator|-
name|field
operator|.
name|length
argument_list|()
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|suffixSB
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|String
name|suffix
init|=
name|suffixSB
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|result
decl_stmt|;
name|result
operator|=
name|field
operator|.
name|toLowerCase
argument_list|()
operator|+
name|suffix
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

