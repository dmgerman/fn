begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.bibtex
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|CamelCaser
class|class
name|CamelCaser
block|{
comment|/**      * Map that defines camel cased versions of field names      */
DECL|field|nameMap
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|put
argument_list|(
literal|"bibtexkey"
argument_list|,
literal|"BibTeXKey"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"bookauthor"
argument_list|,
literal|"BookAuthor"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"booksubtitle"
argument_list|,
literal|"BookSubTitle"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"booktitle"
argument_list|,
literal|"BookTitle"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"booktitleaddon"
argument_list|,
literal|"BookTitleAddon"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"crossref"
argument_list|,
literal|"CrossRef"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctlalt_stretch_factor"
argument_list|,
literal|"CtlAlt_Stretch_Factor"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctldash_repeated_names"
argument_list|,
literal|"CtlDash_Repeated_Names"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctlname_format_string"
argument_list|,
literal|"CtlName_Format_String"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctlname_latex_cmd"
argument_list|,
literal|"CtlName_Latex_Cmd"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctlname_url_prefix"
argument_list|,
literal|"CtlName_Url_Prefix"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctlmax_names_forced_etal"
argument_list|,
literal|"CtlMax_Names_Forced_Etal"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctlnames_show_etal"
argument_list|,
literal|"CtlNames_Show_Etal"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctluse_alt_spacing"
argument_list|,
literal|"CtlUse_Alt_Spacing"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctluse_article_number"
argument_list|,
literal|"CtlUse_Article_Number"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctluse_forced_etal"
argument_list|,
literal|"Ctl_Forced_Etal"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctluse_paper"
argument_list|,
literal|"CtlUse_Paper"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ctluse_url"
argument_list|,
literal|"CtlUse_Url"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"doi"
argument_list|,
literal|"DOI"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"editora"
argument_list|,
literal|"EditorA"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"editorb"
argument_list|,
literal|"EditorB"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"editorc"
argument_list|,
literal|"EditorC"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"ee"
argument_list|,
literal|"EE"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"eid"
argument_list|,
literal|"EID"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"entryset"
argument_list|,
literal|"EntrySet"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"eprint"
argument_list|,
literal|"Eprint"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"eprintclass"
argument_list|,
literal|"EprintClass"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"eprinttype"
argument_list|,
literal|"EprintType"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"eventdate"
argument_list|,
literal|"EventDate"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"eventtitle"
argument_list|,
literal|"EventTitle"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"eventtitleaddon"
argument_list|,
literal|"EventTitleAddon"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"howpublished"
argument_list|,
literal|"HowPublished"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"issuesubtitle"
argument_list|,
literal|"IssueSubTitle"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"issuetitle"
argument_list|,
literal|"IssueTitle"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"journalsubtitle"
argument_list|,
literal|"JournalSubTitle"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"journaltitle"
argument_list|,
literal|"JournalTitle"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"lastchecked"
argument_list|,
literal|"LastChecked"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"isbn"
argument_list|,
literal|"ISBN"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"isrn"
argument_list|,
literal|"ISRN"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"issn"
argument_list|,
literal|"ISSN"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"mainsubtitle"
argument_list|,
literal|"MainSubTitle"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"maintitle"
argument_list|,
literal|"MainTitle"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"maintitleaddon"
argument_list|,
literal|"MainTitleAddon"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"origlanguage"
argument_list|,
literal|"OrigLanguage"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"pagetotal"
argument_list|,
literal|"PageTotal"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"pubstate"
argument_list|,
literal|"PubState"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"subtitle"
argument_list|,
literal|"SubTitle"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"titleaddon"
argument_list|,
literal|"TitleAddon"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"UNKNOWN"
argument_list|,
literal|"UNKNOWN"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"url"
argument_list|,
literal|"Url"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"urldate"
argument_list|,
literal|"UrlDate"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tries to provide a camel case version of fieldName. If no predefined camel case version can be found, the first letter is turned to upper case      *      * @param fieldName      * @return      */
DECL|method|toCamelCase (String fieldName)
specifier|public
specifier|static
name|String
name|toCamelCase
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|fieldName
operator|==
literal|null
operator|||
name|fieldName
operator|==
literal|""
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|camelCaseName
init|=
name|nameMap
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
comment|// if there is no mapping for this name, turn the first letter to uppercase
if|if
condition|(
name|camelCaseName
operator|==
literal|null
condition|)
block|{
name|camelCaseName
operator|=
operator|(
name|String
operator|.
name|valueOf
argument_list|(
name|fieldName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|camelCaseName
return|;
block|}
comment|/**      * Helper method to avoid a direct access to nameMap      *      * @param key   a key to put in nameMap      * @param value the value to put in nameMap for key      */
DECL|method|put (String key, String value)
specifier|private
specifier|static
name|void
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|nameMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

