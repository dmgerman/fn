begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.bibtex
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|CamelCaser
class|class
name|CamelCaser
block|{
comment|/**      * Map that defines camel cased versions of field names      */
DECL|field|nameMap
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// The field name display map.
name|nameMap
operator|.
name|put
argument_list|(
literal|"bibtexkey"
argument_list|,
literal|"BibTeXKey"
argument_list|)
expr_stmt|;
name|nameMap
operator|.
name|put
argument_list|(
literal|"doi"
argument_list|,
literal|"DOI"
argument_list|)
expr_stmt|;
name|nameMap
operator|.
name|put
argument_list|(
literal|"ee"
argument_list|,
literal|"EE"
argument_list|)
expr_stmt|;
name|nameMap
operator|.
name|put
argument_list|(
literal|"howpublished"
argument_list|,
literal|"HowPublished"
argument_list|)
expr_stmt|;
name|nameMap
operator|.
name|put
argument_list|(
literal|"lastchecked"
argument_list|,
literal|"LastChecked"
argument_list|)
expr_stmt|;
name|nameMap
operator|.
name|put
argument_list|(
literal|"isbn"
argument_list|,
literal|"ISBN"
argument_list|)
expr_stmt|;
name|nameMap
operator|.
name|put
argument_list|(
literal|"issn"
argument_list|,
literal|"ISSN"
argument_list|)
expr_stmt|;
name|nameMap
operator|.
name|put
argument_list|(
literal|"UNKNOWN"
argument_list|,
literal|"UNKNOWN"
argument_list|)
expr_stmt|;
name|nameMap
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
literal|"URL"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tries to provide a camel case version of fieldName. If no predefined camel case version can be found, the first letter is turned to upper case      *      * @param fieldName      * @return      */
DECL|method|toCamelCase (String fieldName)
specifier|public
specifier|static
name|String
name|toCamelCase
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|fieldName
operator|==
literal|null
operator|||
name|fieldName
operator|==
literal|""
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|camelCaseName
init|=
name|nameMap
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
comment|// if there is no mapping for this name, turn the first letter to uppercase
if|if
condition|(
name|camelCaseName
operator|==
literal|null
condition|)
block|{
name|camelCaseName
operator|=
operator|(
name|String
operator|.
name|valueOf
argument_list|(
name|fieldName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|camelCaseName
return|;
block|}
block|}
end_class

end_unit

