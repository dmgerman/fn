begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.specialfields
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|BaseAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|specialfields
operator|.
name|SpecialFieldsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|SpecialFieldAction
specifier|public
class|class
name|SpecialFieldAction
implements|implements
name|BaseAction
block|{
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|specialField
specifier|private
specifier|final
name|SpecialField
name|specialField
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|field|nullFieldIfValueIsTheSame
specifier|private
specifier|final
name|boolean
name|nullFieldIfValueIsTheSame
decl_stmt|;
DECL|field|undoText
specifier|private
specifier|final
name|String
name|undoText
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SpecialFieldAction
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @param nullFieldIfValueIsTheSame - false also causes that doneTextPattern has two place holders %0 for the value and %1 for the sum of entries      */
DECL|method|SpecialFieldAction ( JabRefFrame frame, SpecialField specialField, String value, boolean nullFieldIfValueIsTheSame, String undoText)
specifier|public
name|SpecialFieldAction
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|SpecialField
name|specialField
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|nullFieldIfValueIsTheSame
parameter_list|,
name|String
name|undoText
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|specialField
operator|=
name|specialField
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|nullFieldIfValueIsTheSame
operator|=
name|nullFieldIfValueIsTheSame
expr_stmt|;
name|this
operator|.
name|undoText
operator|=
name|undoText
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|bes
operator|==
literal|null
operator|)
operator|||
name|bes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|undoText
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|be
range|:
name|bes
control|)
block|{
comment|// if (value==null) and then call nullField has been omitted as updatefield also handles value==null
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
init|=
name|SpecialFieldsUtils
operator|.
name|updateField
argument_list|(
name|specialField
argument_list|,
name|value
argument_list|,
name|be
argument_list|,
name|nullFieldIfValueIsTheSame
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|isKeywordSyncEnabled
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getKeywordDelimiter
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldChange
name|change
range|:
name|changes
control|)
block|{
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|ce
operator|.
name|hasEdits
argument_list|()
condition|)
block|{
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
name|String
name|outText
decl_stmt|;
if|if
condition|(
name|nullFieldIfValueIsTheSame
operator|||
name|value
operator|==
literal|null
condition|)
block|{
name|outText
operator|=
name|getTextDone
argument_list|(
name|specialField
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outText
operator|=
name|getTextDone
argument_list|(
name|specialField
argument_list|,
name|value
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|frame
operator|.
name|output
argument_list|(
name|outText
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if user does not change anything with his action, we do not do anything either
comment|// even no output message
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Problem setting special fields"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTextDone (SpecialField field, String... params)
specifier|private
name|String
name|getTextDone
parameter_list|(
name|SpecialField
name|field
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|SpecialFieldViewModel
name|viewModel
init|=
operator|new
name|SpecialFieldViewModel
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isSingleValueField
argument_list|()
operator|&&
operator|(
name|params
operator|.
name|length
operator|==
literal|1
operator|)
operator|&&
operator|(
name|params
index|[
literal|0
index|]
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// Single value fields can be toggled only
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Toggled '%0' for %1 entries"
argument_list|,
name|viewModel
operator|.
name|getLocalization
argument_list|()
argument_list|,
name|params
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|field
operator|.
name|isSingleValueField
argument_list|()
operator|&&
operator|(
name|params
operator|.
name|length
operator|==
literal|2
operator|)
operator|&&
operator|(
name|params
index|[
literal|0
index|]
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|params
index|[
literal|1
index|]
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// setting a multi value special field - the setted value is displayed, too
name|String
index|[]
name|allParams
init|=
block|{
name|viewModel
operator|.
name|getLocalization
argument_list|()
block|,
name|params
index|[
literal|0
index|]
block|,
name|params
index|[
literal|1
index|]
block|}
decl_stmt|;
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Set '%0' to '%1' for %2 entries"
argument_list|,
name|allParams
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|field
operator|.
name|isSingleValueField
argument_list|()
operator|&&
operator|(
name|params
operator|.
name|length
operator|==
literal|1
operator|)
operator|&&
operator|(
name|params
index|[
literal|0
index|]
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// clearing a multi value specialfield
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cleared '%0' for %1 entries"
argument_list|,
name|viewModel
operator|.
name|getLocalization
argument_list|()
argument_list|,
name|params
index|[
literal|0
index|]
argument_list|)
return|;
block|}
else|else
block|{
comment|// invalid usage
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Creation of special field status change message failed: illegal argument combination."
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
block|}
end_class

end_unit

