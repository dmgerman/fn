begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2012 JabRef contributors.    This program is free software: you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation, either version 3 of the License, or   (at your option) any later version.    This program is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.    You should have received a copy of the GNU General Public License   along with this program.  If not, see<http://www.gnu.org/licenses/>.  */
end_comment

begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|DataFlavor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Transferable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|UnsupportedFlavorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  Based on http://newsgroups.derkeiler.com/Archive/De/de.comp.lang.java/2010-04/msg00203.html  */
end_comment

begin_class
DECL|class|HtmlTransferable
specifier|public
class|class
name|HtmlTransferable
implements|implements
name|Transferable
block|{
DECL|field|HTML
specifier|private
specifier|static
specifier|final
name|int
name|HTML
init|=
literal|0
decl_stmt|;
DECL|field|STRING
specifier|private
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|1
decl_stmt|;
DECL|field|HTML_FLAVOR
specifier|public
specifier|static
specifier|final
name|DataFlavor
name|HTML_FLAVOR
init|=
operator|new
name|DataFlavor
argument_list|(
literal|"text/html;charset=utf-8;class=java.lang.String"
argument_list|,
literal|"HTML Format"
argument_list|)
decl_stmt|;
comment|// charset could be read via JabRef.jrf.basePanel().getEncoding()
DECL|field|FLAVORS
specifier|private
specifier|static
specifier|final
name|DataFlavor
index|[]
name|FLAVORS
init|=
block|{
name|HTML_FLAVOR
block|,
name|DataFlavor
operator|.
name|stringFlavor
block|}
decl_stmt|;
DECL|field|htmlText
specifier|private
specifier|final
name|String
name|htmlText
decl_stmt|;
DECL|field|plainText
specifier|private
specifier|final
name|String
name|plainText
decl_stmt|;
comment|/**      * @param htmlText the text in html       * @param plainText the plain text      */
DECL|method|HtmlTransferable (String htmlText, String plainText)
specifier|public
name|HtmlTransferable
parameter_list|(
name|String
name|htmlText
parameter_list|,
name|String
name|plainText
parameter_list|)
block|{
name|this
operator|.
name|htmlText
operator|=
name|htmlText
expr_stmt|;
name|this
operator|.
name|plainText
operator|=
name|plainText
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTransferDataFlavors ()
specifier|public
name|DataFlavor
index|[]
name|getTransferDataFlavors
parameter_list|()
block|{
return|return
name|FLAVORS
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isDataFlavorSupported (DataFlavor flavor)
specifier|public
name|boolean
name|isDataFlavorSupported
parameter_list|(
name|DataFlavor
name|flavor
parameter_list|)
block|{
for|for
control|(
name|DataFlavor
name|FLAVOR
range|:
name|FLAVORS
control|)
block|{
if|if
condition|(
name|flavor
operator|.
name|equals
argument_list|(
name|FLAVOR
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getTransferData (DataFlavor flavor)
specifier|public
name|Object
name|getTransferData
parameter_list|(
name|DataFlavor
name|flavor
parameter_list|)
throws|throws
name|UnsupportedFlavorException
throws|,
name|IOException
block|{
if|if
condition|(
name|flavor
operator|.
name|equals
argument_list|(
name|FLAVORS
index|[
name|STRING
index|]
argument_list|)
condition|)
block|{
return|return
name|plainText
return|;
block|}
elseif|else
if|if
condition|(
name|flavor
operator|.
name|equals
argument_list|(
name|FLAVORS
index|[
name|HTML
index|]
argument_list|)
condition|)
block|{
return|return
name|htmlText
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedFlavorException
argument_list|(
name|flavor
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

