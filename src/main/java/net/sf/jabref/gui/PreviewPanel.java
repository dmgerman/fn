begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PrinterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|print
operator|.
name|attribute
operator|.
name|HashPrintRequestAttributeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|print
operator|.
name|attribute
operator|.
name|PrintRequestAttributeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|print
operator|.
name|attribute
operator|.
name|standard
operator|.
name|JobName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ActionMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|InputMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ScrollPaneConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|HyperlinkEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefExecutorService
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|PreviewPanelTransferHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|CitationStyleWorker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|CitationStyle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|ExportFormats
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutHelper
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchQueryHighlightListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|event
operator|.
name|FieldChangedEvent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|PreviewPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Displays an BibEntry using the given layout format.  */
end_comment

begin_class
DECL|class|PreviewPanel
specifier|public
class|class
name|PreviewPanel
extends|extends
name|JPanel
implements|implements
name|SearchQueryHighlightListener
implements|,
name|EntryContainer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PreviewPanel
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The bibtex entry currently shown      */
DECL|field|bibEntry
specifier|private
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|bibEntry
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
comment|/**      * If a database is set, the preview will attempt to resolve strings in the      * previewed entry using that database.      */
DECL|field|databaseContext
specifier|private
name|Optional
argument_list|<
name|BibDatabaseContext
argument_list|>
name|databaseContext
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|basePanel
specifier|private
name|Optional
argument_list|<
name|BasePanel
argument_list|>
name|basePanel
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|fixedLayout
specifier|private
name|boolean
name|fixedLayout
decl_stmt|;
DECL|field|layout
specifier|private
name|Optional
argument_list|<
name|Layout
argument_list|>
name|layout
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|previewPane
specifier|private
name|JEditorPaneWithHighlighting
name|previewPane
decl_stmt|;
DECL|field|scrollPane
specifier|private
specifier|final
name|JScrollPane
name|scrollPane
decl_stmt|;
DECL|field|printAction
specifier|private
specifier|final
name|PrintAction
name|printAction
init|=
operator|new
name|PrintAction
argument_list|()
decl_stmt|;
DECL|field|closeAction
specifier|private
specifier|final
name|CloseAction
name|closeAction
init|=
operator|new
name|CloseAction
argument_list|()
decl_stmt|;
DECL|field|copyPreviewAction
specifier|private
specifier|final
name|CopyPreviewAction
name|copyPreviewAction
init|=
operator|new
name|CopyPreviewAction
argument_list|()
decl_stmt|;
DECL|field|highlightPattern
specifier|private
name|Optional
argument_list|<
name|Pattern
argument_list|>
name|highlightPattern
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|citationStyleWorker
specifier|private
name|Optional
argument_list|<
name|CitationStyleWorker
argument_list|>
name|citationStyleWorker
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
comment|/**      * @param databaseContext      *            (may be null) Optionally used to resolve strings and for resolving pdf directories for links.      * @param entry      *            (may be null) If given this entry is shown otherwise you have      *            to call setEntry to make something visible.      * @param panel      *            (may be null) If not given no toolbar is shown on the right      *            hand side.      */
DECL|method|PreviewPanel (BibDatabaseContext databaseContext, BibEntry entry, BasePanel panel)
specifier|public
name|PreviewPanel
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|BasePanel
name|panel
parameter_list|)
block|{
name|this
argument_list|(
name|panel
argument_list|,
name|databaseContext
argument_list|)
expr_stmt|;
name|setEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param panel      *            (may be null) If not given no toolbar is shown on the right      *            hand side.      * @param databaseContext      *            (may be null) Used for resolving pdf directories for links.      */
DECL|method|PreviewPanel (BasePanel panel, BibDatabaseContext databaseContext)
specifier|public
name|PreviewPanel
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|BibDatabaseContext
name|databaseContext
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|databaseContext
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|databaseContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|basePanel
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|createPreviewPane
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|basePanel
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// dropped files handler only created for main window
comment|// not for Windows as like the search results window
name|this
operator|.
name|previewPane
operator|.
name|setTransferHandler
argument_list|(
operator|new
name|PreviewPanelTransferHandler
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|this
argument_list|,
name|this
operator|.
name|previewPane
operator|.
name|getTransferHandler
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Set up scroll pane for preview pane
name|scrollPane
operator|=
operator|new
name|JScrollPane
argument_list|(
name|previewPane
argument_list|,
name|ScrollPaneConstants
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|ScrollPaneConstants
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|scrollPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|this
operator|.
name|createKeyBindings
argument_list|()
expr_stmt|;
name|updateLayout
argument_list|()
expr_stmt|;
block|}
DECL|method|createKeyBindings ()
specifier|private
name|void
name|createKeyBindings
parameter_list|()
block|{
name|ActionMap
name|actionMap
init|=
name|this
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|InputMap
name|inputMap
init|=
name|this
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
decl_stmt|;
specifier|final
name|String
name|close
init|=
literal|"close"
decl_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_DIALOG
argument_list|)
argument_list|,
name|close
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
name|close
argument_list|,
name|this
operator|.
name|closeAction
argument_list|)
expr_stmt|;
specifier|final
name|String
name|copy
init|=
literal|"copy"
decl_stmt|;
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_FOCUSED
argument_list|)
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|COPY_PREVIEW
argument_list|)
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
name|copy
argument_list|,
name|this
operator|.
name|copyPreviewAction
argument_list|)
expr_stmt|;
block|}
DECL|method|createPopupMenu ()
specifier|private
name|JPopupMenu
name|createPopupMenu
parameter_list|()
block|{
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|this
operator|.
name|printAction
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|this
operator|.
name|copyPreviewAction
argument_list|)
expr_stmt|;
name|this
operator|.
name|basePanel
operator|.
name|ifPresent
argument_list|(
name|p
lambda|->
name|menu
operator|.
name|add
argument_list|(
name|p
operator|.
name|frame
argument_list|()
operator|.
name|getNextPreviewStyleAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|basePanel
operator|.
name|ifPresent
argument_list|(
name|p
lambda|->
name|menu
operator|.
name|add
argument_list|(
name|p
operator|.
name|frame
argument_list|()
operator|.
name|getPreviousPreviewStyleAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|menu
return|;
block|}
DECL|method|createPreviewPane ()
specifier|private
name|void
name|createPreviewPane
parameter_list|()
block|{
name|previewPane
operator|=
operator|new
name|JEditorPaneWithHighlighting
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Dimension
name|getPreferredScrollableViewportSize
parameter_list|()
block|{
return|return
name|getPreferredSize
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|previewPane
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|previewPane
operator|.
name|setComponentPopupMenu
argument_list|(
name|createPopupMenu
argument_list|()
argument_list|)
expr_stmt|;
name|previewPane
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|previewPane
operator|.
name|setDragEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// this has an effect only, if no custom transfer handler is registered. We keep the statement if the transfer handler is removed.
name|previewPane
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|previewPane
operator|.
name|addHyperlinkListener
argument_list|(
name|hyperlinkEvent
lambda|->
block|{
if|if
condition|(
operator|(
name|hyperlinkEvent
operator|.
name|getEventType
argument_list|()
operator|==
name|HyperlinkEvent
operator|.
name|EventType
operator|.
name|ACTIVATED
operator|)
operator|&&
name|PreviewPanel
operator|.
name|this
operator|.
name|databaseContext
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|String
name|address
init|=
name|hyperlinkEvent
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|JabRefDesktop
operator|.
name|openExternalViewer
argument_list|(
name|PreviewPanel
operator|.
name|this
operator|.
name|databaseContext
operator|.
name|get
argument_list|()
argument_list|,
name|address
argument_list|,
name|FieldName
operator|.
name|URL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not open external viewer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setDatabaseContext (BibDatabaseContext databaseContext)
specifier|public
name|void
name|setDatabaseContext
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|)
block|{
name|this
operator|.
name|databaseContext
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|databaseContext
argument_list|)
expr_stmt|;
block|}
DECL|method|getBasePanel ()
specifier|public
name|Optional
argument_list|<
name|BasePanel
argument_list|>
name|getBasePanel
parameter_list|()
block|{
return|return
name|this
operator|.
name|basePanel
return|;
block|}
DECL|method|setBasePanel (BasePanel basePanel)
specifier|public
name|void
name|setBasePanel
parameter_list|(
name|BasePanel
name|basePanel
parameter_list|)
block|{
name|this
operator|.
name|basePanel
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|basePanel
argument_list|)
expr_stmt|;
block|}
DECL|method|updateLayout ()
specifier|public
name|void
name|updateLayout
parameter_list|()
block|{
if|if
condition|(
name|fixedLayout
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"cannot change the layout because the layout is fixed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|PreviewPreferences
name|previewPreferences
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
decl_stmt|;
name|String
name|style
init|=
name|previewPreferences
operator|.
name|getPreviewCycle
argument_list|()
operator|.
name|get
argument_list|(
name|previewPreferences
operator|.
name|getPreviewCyclePosition
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|CitationStyle
operator|.
name|isCitationStyleFile
argument_list|(
name|style
argument_list|)
condition|)
block|{
if|if
condition|(
name|basePanel
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|layout
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
name|CitationStyle
name|citationStyle
init|=
name|CitationStyle
operator|.
name|createCitationStyleFromFile
argument_list|(
name|style
argument_list|)
decl_stmt|;
if|if
condition|(
name|citationStyle
operator|!=
literal|null
condition|)
block|{
name|basePanel
operator|.
name|get
argument_list|()
operator|.
name|getCitationStyleCache
argument_list|()
operator|.
name|setCitationStyle
argument_list|(
name|citationStyle
argument_list|)
expr_stmt|;
name|basePanel
operator|.
name|get
argument_list|()
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Preview style changed to: %0"
argument_list|,
name|citationStyle
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|updatePreviewLayout
argument_list|(
name|previewPreferences
operator|.
name|getPreviewStyle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|basePanel
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|basePanel
operator|.
name|get
argument_list|()
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Preview style changed to: %0"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Preview"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|updatePreviewLayout (String layoutFile)
specifier|private
name|void
name|updatePreviewLayout
parameter_list|(
name|String
name|layoutFile
parameter_list|)
block|{
name|StringReader
name|sr
init|=
operator|new
name|StringReader
argument_list|(
name|layoutFile
operator|.
name|replace
argument_list|(
literal|"__NEWLINE__"
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|layout
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|LayoutHelper
argument_list|(
name|sr
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getLayoutFormatterPreferences
argument_list|(
name|Globals
operator|.
name|journalAbbreviationLoader
argument_list|)
argument_list|)
operator|.
name|getLayoutFromText
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|layout
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"no layout could be set"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setLayout (Layout layout)
specifier|public
name|void
name|setLayout
parameter_list|(
name|Layout
name|layout
parameter_list|)
block|{
name|this
operator|.
name|layout
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|layout
argument_list|)
expr_stmt|;
block|}
DECL|method|setEntry (BibEntry newEntry)
specifier|public
name|void
name|setEntry
parameter_list|(
name|BibEntry
name|newEntry
parameter_list|)
block|{
name|bibEntry
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|!=
name|newEntry
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|e
lambda|->
name|e
operator|.
name|unregisterListener
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|bibEntry
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|ifPresent
argument_list|(
name|e
lambda|->
name|e
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
comment|/**     * Listener for ChangedFieldEvent.     */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Subscribe
DECL|method|listen (FieldChangedEvent fieldChangedEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|FieldChangedEvent
name|fieldChangedEvent
parameter_list|)
block|{
name|update
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEntry ()
specifier|public
name|BibEntry
name|getEntry
parameter_list|()
block|{
return|return
name|this
operator|.
name|bibEntry
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
name|ExportFormats
operator|.
name|entryNumber
operator|=
literal|1
expr_stmt|;
comment|// Set entry number in case that is included in the preview layout.
if|if
condition|(
name|citationStyleWorker
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|citationStyleWorker
operator|.
name|get
argument_list|()
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|citationStyleWorker
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|layout
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|bibEntry
operator|.
name|ifPresent
argument_list|(
name|entry
lambda|->
name|sb
operator|.
name|append
argument_list|(
name|layout
operator|.
name|get
argument_list|()
operator|.
name|doLayout
argument_list|(
name|entry
argument_list|,
name|databaseContext
operator|.
name|map
argument_list|(
name|BibDatabaseContext
operator|::
name|getDatabase
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setPreviewLabel
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|markHighlights
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|basePanel
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|citationStyleWorker
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|CitationStyleWorker
argument_list|(
name|this
argument_list|,
name|previewPane
argument_list|)
argument_list|)
expr_stmt|;
name|citationStyleWorker
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|markHighlights ()
specifier|public
name|void
name|markHighlights
parameter_list|()
block|{
name|previewPane
operator|.
name|highlightPattern
argument_list|(
name|highlightPattern
argument_list|)
expr_stmt|;
block|}
DECL|method|setPreviewLabel (String text)
specifier|public
name|void
name|setPreviewLabel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|previewPane
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|previewPane
operator|.
name|revalidate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|previewPane
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|previewPane
operator|.
name|revalidate
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scrollToTop
argument_list|()
expr_stmt|;
block|}
DECL|method|scrollToTop ()
specifier|private
name|void
name|scrollToTop
parameter_list|()
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|scrollPane
operator|.
name|getVerticalScrollBar
argument_list|()
operator|.
name|setValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|highlightPattern (Optional<Pattern> newPattern)
specifier|public
name|void
name|highlightPattern
parameter_list|(
name|Optional
argument_list|<
name|Pattern
argument_list|>
name|newPattern
parameter_list|)
block|{
name|this
operator|.
name|highlightPattern
operator|=
name|newPattern
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|getHighlightPattern ()
specifier|public
name|Optional
argument_list|<
name|Pattern
argument_list|>
name|getHighlightPattern
parameter_list|()
block|{
return|return
name|highlightPattern
return|;
block|}
comment|/**      * this fixes the Layout, the user cannot change it anymore. Useful for testing the styles in the settings      * @param parameter should be either a {@link String} (for the old PreviewStyle) or a {@link CitationStyle}.      */
DECL|method|setFixedLayout (Object parameter)
specifier|public
name|PreviewPanel
name|setFixedLayout
parameter_list|(
name|Object
name|parameter
parameter_list|)
block|{
name|this
operator|.
name|fixedLayout
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|parameter
operator|instanceof
name|String
condition|)
block|{
name|updatePreviewLayout
argument_list|(
operator|(
name|String
operator|)
name|parameter
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameter
operator|instanceof
name|CitationStyle
condition|)
block|{
name|layout
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
if|if
condition|(
name|basePanel
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|basePanel
operator|.
name|get
argument_list|()
operator|.
name|getCitationStyleCache
argument_list|()
operator|.
name|setCitationStyle
argument_list|(
operator|(
name|CitationStyle
operator|)
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"unknown style type"
argument_list|)
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|class|PrintAction
class|class
name|PrintAction
extends|extends
name|AbstractAction
block|{
DECL|method|PrintAction ()
specifier|public
name|PrintAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Print entry preview"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|PRINTED
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Print entry preview"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent arg0)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|arg0
parameter_list|)
block|{
comment|// Background this, as it takes a while.
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|PrintRequestAttributeSet
name|pras
init|=
operator|new
name|HashPrintRequestAttributeSet
argument_list|()
decl_stmt|;
name|pras
operator|.
name|add
argument_list|(
operator|new
name|JobName
argument_list|(
name|bibEntry
operator|.
name|flatMap
argument_list|(
name|BibEntry
operator|::
name|getCiteKeyOptional
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"NO ENTRY"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|previewPane
operator|.
name|print
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|pras
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrinterException
name|e
parameter_list|)
block|{
comment|// Inform the user... we don't know what to do.
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|PreviewPanel
operator|.
name|this
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not print preview"
argument_list|)
operator|+
literal|".\n"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Print entry preview"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Could not print preview"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|basePanel
operator|.
name|ifPresent
argument_list|(
name|BasePanel
operator|::
name|hideBottomComponent
argument_list|)
expr_stmt|;
block|}
DECL|class|CloseAction
class|class
name|CloseAction
extends|extends
name|AbstractAction
block|{
DECL|method|CloseAction ()
specifier|public
name|CloseAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Close window"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CLOSE
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Close window"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CopyPreviewAction
class|class
name|CopyPreviewAction
extends|extends
name|AbstractAction
block|{
DECL|method|CopyPreviewAction ()
specifier|public
name|CopyPreviewAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copy preview"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|COPY
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copy preview"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|COPY_PREVIEW
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|previewPane
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|previewPane
operator|.
name|copy
argument_list|()
expr_stmt|;
name|previewPane
operator|.
name|select
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPrintAction ()
specifier|public
name|PrintAction
name|getPrintAction
parameter_list|()
block|{
return|return
name|printAction
return|;
block|}
block|}
end_class

end_unit

