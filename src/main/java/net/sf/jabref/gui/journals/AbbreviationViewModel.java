begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.journals
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|journals
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|BooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleBooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleStringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|Abbreviation
import|;
end_import

begin_comment
comment|/**  * This class provides a view model for abbreviation objects which can also  * define placeholder objects of abbreviations. This is indicated by using the  * {@code pseudoAbbreviation} property.  */
end_comment

begin_class
DECL|class|AbbreviationViewModel
specifier|public
class|class
name|AbbreviationViewModel
block|{
DECL|field|abbreviationObject
specifier|private
specifier|final
name|Abbreviation
name|abbreviationObject
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|StringProperty
name|name
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|abbreviation
specifier|private
specifier|final
name|StringProperty
name|abbreviation
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|pseudoAbbreviation
specifier|private
specifier|final
name|BooleanProperty
name|pseudoAbbreviation
init|=
operator|new
name|SimpleBooleanProperty
argument_list|()
decl_stmt|;
DECL|method|AbbreviationViewModel (Abbreviation abbreviation)
specifier|public
name|AbbreviationViewModel
parameter_list|(
name|Abbreviation
name|abbreviation
parameter_list|)
block|{
name|this
operator|.
name|abbreviationObject
operator|=
name|abbreviation
expr_stmt|;
name|pseudoAbbreviation
operator|.
name|set
argument_list|(
name|this
operator|.
name|abbreviationObject
operator|==
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|abbreviationObject
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|name
operator|.
name|bindBidirectional
argument_list|(
name|this
operator|.
name|abbreviationObject
operator|.
name|nameProperty
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|abbreviation
operator|.
name|bindBidirectional
argument_list|(
name|this
operator|.
name|abbreviationObject
operator|.
name|abbreviationProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|name
operator|.
name|set
argument_list|(
literal|"Add new Abbreviation"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAbbreviationObject ()
specifier|public
name|Abbreviation
name|getAbbreviationObject
parameter_list|()
block|{
return|return
name|this
operator|.
name|abbreviationObject
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|.
name|set
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|setAbbreviation (String abbreviation)
specifier|public
name|void
name|setAbbreviation
parameter_list|(
name|String
name|abbreviation
parameter_list|)
block|{
name|this
operator|.
name|abbreviation
operator|.
name|set
argument_list|(
name|abbreviation
argument_list|)
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getAbbreviation ()
specifier|public
name|String
name|getAbbreviation
parameter_list|()
block|{
return|return
name|this
operator|.
name|abbreviation
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|isPseudoAbbreviation ()
specifier|public
name|boolean
name|isPseudoAbbreviation
parameter_list|()
block|{
return|return
name|this
operator|.
name|pseudoAbbreviation
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|nameProperty ()
specifier|public
name|StringProperty
name|nameProperty
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|abbreviationProperty ()
specifier|public
name|StringProperty
name|abbreviationProperty
parameter_list|()
block|{
return|return
name|this
operator|.
name|abbreviation
return|;
block|}
DECL|method|isPseudoAbbreviationProperty ()
specifier|public
name|BooleanProperty
name|isPseudoAbbreviationProperty
parameter_list|()
block|{
return|return
name|this
operator|.
name|pseudoAbbreviation
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|abbreviationObject
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|AbbreviationViewModel
condition|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|abbreviationObject
argument_list|,
operator|(
operator|(
name|AbbreviationViewModel
operator|)
name|obj
operator|)
operator|.
name|abbreviationObject
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

