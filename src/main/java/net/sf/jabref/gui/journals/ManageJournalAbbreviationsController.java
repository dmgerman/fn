begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.journals
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|journals
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|concurrent
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|fxml
operator|.
name|FXML
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ComboBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ProgressIndicator
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|KeyCode
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|stage
operator|.
name|Stage
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|AbstractController
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ValueTableCellFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_class
DECL|class|ManageJournalAbbreviationsController
specifier|public
class|class
name|ManageJournalAbbreviationsController
extends|extends
name|AbstractController
argument_list|<
name|ManageJournalAbbreviationsViewModel
argument_list|>
block|{
DECL|field|journalAbbreviationsTable
annotation|@
name|FXML
specifier|private
name|TableView
argument_list|<
name|AbbreviationViewModel
argument_list|>
name|journalAbbreviationsTable
decl_stmt|;
DECL|field|journalTableNameColumn
annotation|@
name|FXML
specifier|private
name|TableColumn
argument_list|<
name|AbbreviationViewModel
argument_list|,
name|String
argument_list|>
name|journalTableNameColumn
decl_stmt|;
DECL|field|journalTableAbbreviationColumn
annotation|@
name|FXML
specifier|private
name|TableColumn
argument_list|<
name|AbbreviationViewModel
argument_list|,
name|String
argument_list|>
name|journalTableAbbreviationColumn
decl_stmt|;
DECL|field|journalTableEditColumn
annotation|@
name|FXML
specifier|private
name|TableColumn
argument_list|<
name|AbbreviationViewModel
argument_list|,
name|Boolean
argument_list|>
name|journalTableEditColumn
decl_stmt|;
DECL|field|journalTableDeleteColumn
annotation|@
name|FXML
specifier|private
name|TableColumn
argument_list|<
name|AbbreviationViewModel
argument_list|,
name|Boolean
argument_list|>
name|journalTableDeleteColumn
decl_stmt|;
DECL|field|cancelButton
annotation|@
name|FXML
specifier|private
name|Button
name|cancelButton
decl_stmt|;
DECL|field|journalFilesBox
annotation|@
name|FXML
specifier|private
name|ComboBox
argument_list|<
name|AbbreviationsFileViewModel
argument_list|>
name|journalFilesBox
decl_stmt|;
DECL|field|addJournalFileButton
annotation|@
name|FXML
specifier|private
name|Button
name|addJournalFileButton
decl_stmt|;
DECL|field|addNewJournalFileButton
annotation|@
name|FXML
specifier|private
name|Button
name|addNewJournalFileButton
decl_stmt|;
DECL|field|removeJournalAbbreviationsButton
annotation|@
name|FXML
specifier|private
name|Button
name|removeJournalAbbreviationsButton
decl_stmt|;
DECL|field|loadingLabel
annotation|@
name|FXML
specifier|public
name|Label
name|loadingLabel
decl_stmt|;
DECL|field|progressIndicator
annotation|@
name|FXML
specifier|public
name|ProgressIndicator
name|progressIndicator
decl_stmt|;
DECL|field|preferences
annotation|@
name|Inject
specifier|private
name|JabRefPreferences
name|preferences
decl_stmt|;
DECL|field|dialogService
annotation|@
name|Inject
specifier|private
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|taskExecutor
annotation|@
name|Inject
specifier|private
name|TaskExecutor
name|taskExecutor
decl_stmt|;
annotation|@
name|FXML
DECL|method|initialize ()
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|viewModel
operator|=
operator|new
name|ManageJournalAbbreviationsViewModel
argument_list|(
name|preferences
argument_list|,
name|dialogService
argument_list|,
name|taskExecutor
argument_list|)
expr_stmt|;
name|setUpTable
argument_list|()
expr_stmt|;
name|setBindings
argument_list|()
expr_stmt|;
name|setButtonStyles
argument_list|()
expr_stmt|;
name|viewModel
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|setButtonStyles ()
specifier|private
name|void
name|setButtonStyles
parameter_list|()
block|{
name|addJournalFileButton
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|OPEN
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|addNewJournalFileButton
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|NEW
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|removeJournalAbbreviationsButton
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CLOSE
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpTable ()
specifier|private
name|void
name|setUpTable
parameter_list|()
block|{
name|journalAbbreviationsTable
operator|.
name|setOnKeyPressed
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
name|event
operator|.
name|getCode
argument_list|()
operator|==
name|KeyCode
operator|.
name|DELETE
condition|)
block|{
name|viewModel
operator|.
name|deleteAbbreviation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|journalTableNameColumn
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|nameProperty
argument_list|()
argument_list|)
expr_stmt|;
name|journalTableNameColumn
operator|.
name|setCellFactory
argument_list|(
name|cell
lambda|->
operator|new
name|JournalAbbreviationsNameTableEditingCell
argument_list|()
argument_list|)
expr_stmt|;
name|journalTableAbbreviationColumn
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|abbreviationProperty
argument_list|()
argument_list|)
expr_stmt|;
name|journalTableAbbreviationColumn
operator|.
name|setCellFactory
argument_list|(
name|cell
lambda|->
operator|new
name|JournalAbbreviationsAbbreviationTableEditingCell
argument_list|()
argument_list|)
expr_stmt|;
name|journalTableEditColumn
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|isPseudoAbbreviationProperty
argument_list|()
argument_list|)
expr_stmt|;
name|journalTableDeleteColumn
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|isPseudoAbbreviationProperty
argument_list|()
argument_list|)
expr_stmt|;
name|journalTableEditColumn
operator|.
name|setCellFactory
argument_list|(
operator|new
name|ValueTableCellFactory
argument_list|<
name|AbbreviationViewModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
operator|.
name|withGraphic
argument_list|(
name|isPseudoAbbreviation
lambda|->
block|{
if|if
condition|(
name|isPseudoAbbreviation
condition|)
block|{
return|return
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|ADD
operator|.
name|getGraphicNode
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|viewModel
operator|.
name|isAbbreviationEditableAndRemovable
argument_list|()
condition|?
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|EDIT
operator|.
name|getGraphicNode
argument_list|()
else|:
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|withOnMouseClickedEvent
argument_list|(
name|isPseudoAbbreviation
lambda|->
block|{
if|if
condition|(
name|isPseudoAbbreviation
condition|)
block|{
return|return
name|evt
lambda|->
name|addAbbreviation
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|viewModel
operator|.
name|isAbbreviationEditableAndRemovable
argument_list|()
condition|?
name|evt
lambda|->
name|editAbbreviation
argument_list|()
else|:
name|evt
lambda|->
block|{                         }
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|journalTableDeleteColumn
operator|.
name|setCellFactory
argument_list|(
operator|new
name|ValueTableCellFactory
argument_list|<
name|AbbreviationViewModel
argument_list|,
name|Boolean
argument_list|>
argument_list|()
operator|.
name|withGraphic
argument_list|(
name|isPseudoAbbreviation
lambda|->
block|{
if|if
condition|(
operator|!
name|isPseudoAbbreviation
operator|&&
name|viewModel
operator|.
name|isAbbreviationEditableAndRemovable
argument_list|()
condition|)
block|{
return|return
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|DELETE_ENTRY
operator|.
name|getGraphicNode
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|withOnMouseClickedEvent
argument_list|(
name|isPseudoAbbreviation
lambda|->
block|{
if|if
condition|(
operator|!
name|isPseudoAbbreviation
operator|&&
name|viewModel
operator|.
name|isAbbreviationEditableAndRemovable
argument_list|()
condition|)
block|{
return|return
name|evt
lambda|->
name|removeAbbreviation
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|evt
lambda|->
block|{                         }
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setBindings ()
specifier|private
name|void
name|setBindings
parameter_list|()
block|{
name|journalAbbreviationsTable
operator|.
name|itemsProperty
argument_list|()
operator|.
name|bindBidirectional
argument_list|(
name|viewModel
operator|.
name|abbreviationsProperty
argument_list|()
argument_list|)
expr_stmt|;
name|journalFilesBox
operator|.
name|itemsProperty
argument_list|()
operator|.
name|bindBidirectional
argument_list|(
name|viewModel
operator|.
name|journalFilesProperty
argument_list|()
argument_list|)
expr_stmt|;
name|viewModel
operator|.
name|currentFileProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldvalue
parameter_list|,
name|newvalue
parameter_list|)
lambda|->
name|journalFilesBox
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|newvalue
argument_list|)
argument_list|)
expr_stmt|;
name|journalFilesBox
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectedItemProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldvalue
parameter_list|,
name|newvalue
parameter_list|)
lambda|->
name|viewModel
operator|.
name|currentFileProperty
argument_list|()
operator|.
name|set
argument_list|(
name|newvalue
argument_list|)
argument_list|)
expr_stmt|;
name|viewModel
operator|.
name|currentAbbreviationProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldvalue
parameter_list|,
name|newvalue
parameter_list|)
lambda|->
name|journalAbbreviationsTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|newvalue
argument_list|)
argument_list|)
expr_stmt|;
name|journalAbbreviationsTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectedItemProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldvalue
parameter_list|,
name|newvalue
parameter_list|)
lambda|->
name|viewModel
operator|.
name|currentAbbreviationProperty
argument_list|()
operator|.
name|set
argument_list|(
name|newvalue
argument_list|)
argument_list|)
expr_stmt|;
name|removeJournalAbbreviationsButton
operator|.
name|disableProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|viewModel
operator|.
name|isFileRemovableProperty
argument_list|()
operator|.
name|not
argument_list|()
argument_list|)
expr_stmt|;
name|loadingLabel
operator|.
name|visibleProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|viewModel
operator|.
name|isLoadingProperty
argument_list|()
argument_list|)
expr_stmt|;
name|progressIndicator
operator|.
name|visibleProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|viewModel
operator|.
name|isLoadingProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|addNewFile ()
specifier|private
name|void
name|addNewFile
parameter_list|()
block|{
name|viewModel
operator|.
name|addNewFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|openFile ()
specifier|private
name|void
name|openFile
parameter_list|()
block|{
name|viewModel
operator|.
name|openFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|removeList ()
specifier|private
name|void
name|removeList
parameter_list|()
block|{
name|viewModel
operator|.
name|removeCurrentFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|addAbbreviation ()
specifier|private
name|void
name|addAbbreviation
parameter_list|()
block|{
name|viewModel
operator|.
name|addAbbreviation
argument_list|()
expr_stmt|;
name|selectNewAbbreviation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|editAbbreviation ()
specifier|private
name|void
name|editAbbreviation
parameter_list|()
block|{
name|journalAbbreviationsTable
operator|.
name|edit
argument_list|(
name|journalAbbreviationsTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|,
name|journalTableNameColumn
argument_list|)
expr_stmt|;
block|}
DECL|method|selectNewAbbreviation ()
specifier|private
name|void
name|selectNewAbbreviation
parameter_list|()
block|{
name|int
name|lastRow
init|=
name|viewModel
operator|.
name|abbreviationsCountProperty
argument_list|()
operator|.
name|get
argument_list|()
operator|-
literal|1
decl_stmt|;
name|journalAbbreviationsTable
operator|.
name|scrollTo
argument_list|(
name|lastRow
argument_list|)
expr_stmt|;
name|journalAbbreviationsTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|lastRow
argument_list|)
expr_stmt|;
name|journalAbbreviationsTable
operator|.
name|getFocusModel
argument_list|()
operator|.
name|focus
argument_list|(
name|lastRow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|removeAbbreviation ()
specifier|private
name|void
name|removeAbbreviation
parameter_list|()
block|{
name|viewModel
operator|.
name|deleteAbbreviation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|closeDialog ()
specifier|private
name|void
name|closeDialog
parameter_list|()
block|{
name|Stage
name|stage
init|=
operator|(
name|Stage
operator|)
name|cancelButton
operator|.
name|getScene
argument_list|()
operator|.
name|getWindow
argument_list|()
decl_stmt|;
name|stage
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|saveAbbreviationsAndCloseDialog ()
specifier|private
name|void
name|saveAbbreviationsAndCloseDialog
parameter_list|()
block|{
name|Task
argument_list|<
name|Void
argument_list|>
name|task
init|=
operator|new
name|Task
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|call
parameter_list|()
block|{
name|viewModel
operator|.
name|saveEverythingAndUpdateAutoCompleter
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
operator|new
name|Thread
argument_list|(
name|task
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|closeDialog
argument_list|()
expr_stmt|;
block|}
comment|/**      * This class provides a editable text field that is used as table cell.      * It handles the editing of the name column.      */
DECL|class|JournalAbbreviationsNameTableEditingCell
specifier|public
class|class
name|JournalAbbreviationsNameTableEditingCell
extends|extends
name|TableCell
argument_list|<
name|AbbreviationViewModel
argument_list|,
name|String
argument_list|>
block|{
DECL|field|textField
specifier|private
name|TextField
name|textField
decl_stmt|;
DECL|field|oldName
specifier|private
name|String
name|oldName
decl_stmt|;
DECL|field|editingIndex
specifier|private
name|int
name|editingIndex
decl_stmt|;
annotation|@
name|Override
DECL|method|startEdit ()
specifier|public
name|void
name|startEdit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|()
operator|&&
name|viewModel
operator|.
name|isAbbreviationEditableAndRemovableProperty
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
name|oldName
operator|=
name|viewModel
operator|.
name|currentAbbreviationProperty
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|super
operator|.
name|startEdit
argument_list|()
expr_stmt|;
name|createTextField
argument_list|()
expr_stmt|;
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
name|textField
argument_list|)
expr_stmt|;
name|editingIndex
operator|=
name|journalAbbreviationsTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
expr_stmt|;
name|textField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
name|textField
operator|.
name|selectAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancelEdit ()
specifier|public
name|void
name|cancelEdit
parameter_list|()
block|{
name|super
operator|.
name|cancelEdit
argument_list|()
expr_stmt|;
name|setText
argument_list|(
name|getItem
argument_list|()
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|journalAbbreviationsTable
operator|.
name|itemsProperty
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|editingIndex
argument_list|)
operator|.
name|setName
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateItem (String item, boolean empty)
specifier|public
name|void
name|updateItem
parameter_list|(
name|String
name|item
parameter_list|,
name|boolean
name|empty
parameter_list|)
block|{
name|super
operator|.
name|updateItem
argument_list|(
name|item
argument_list|,
name|empty
argument_list|)
expr_stmt|;
if|if
condition|(
name|empty
condition|)
block|{
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isEditing
argument_list|()
condition|)
block|{
if|if
condition|(
name|textField
operator|!=
literal|null
condition|)
block|{
name|textField
operator|.
name|setText
argument_list|(
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
name|textField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setText
argument_list|(
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|commitEdit (String name)
specifier|public
name|void
name|commitEdit
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|journalAbbreviationsTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|editingIndex
argument_list|)
expr_stmt|;
name|AbbreviationViewModel
name|current
init|=
name|viewModel
operator|.
name|currentAbbreviationProperty
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|super
operator|.
name|commitEdit
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|current
operator|.
name|setName
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
name|viewModel
operator|.
name|editAbbreviation
argument_list|(
name|name
argument_list|,
name|current
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createTextField ()
specifier|private
name|void
name|createTextField
parameter_list|()
block|{
name|textField
operator|=
operator|new
name|TextField
argument_list|(
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|textField
operator|.
name|setMinWidth
argument_list|(
name|this
operator|.
name|getWidth
argument_list|()
operator|-
operator|(
name|this
operator|.
name|getGraphicTextGap
argument_list|()
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
name|textField
operator|.
name|focusedProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldValue
parameter_list|,
name|newValue
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|newValue
condition|)
block|{
name|commitEdit
argument_list|(
name|textField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|textField
operator|.
name|setOnKeyPressed
argument_list|(
name|t
lambda|->
block|{
if|if
condition|(
name|t
operator|.
name|getCode
argument_list|()
operator|==
name|KeyCode
operator|.
name|ENTER
condition|)
block|{
if|if
condition|(
name|isEditing
argument_list|()
condition|)
block|{
name|journalAbbreviationsTable
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|startEdit
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|getCode
argument_list|()
operator|==
name|KeyCode
operator|.
name|ESCAPE
condition|)
block|{
name|cancelEdit
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getString ()
specifier|private
name|String
name|getString
parameter_list|()
block|{
return|return
name|getItem
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getItem
argument_list|()
return|;
block|}
block|}
comment|/**      * This class provides a editable text field that is used as table cell.      * It handles the editing of the abbreviation column.      */
DECL|class|JournalAbbreviationsAbbreviationTableEditingCell
specifier|public
class|class
name|JournalAbbreviationsAbbreviationTableEditingCell
extends|extends
name|TableCell
argument_list|<
name|AbbreviationViewModel
argument_list|,
name|String
argument_list|>
block|{
DECL|field|textField
specifier|private
name|TextField
name|textField
decl_stmt|;
DECL|field|oldAbbreviation
specifier|private
name|String
name|oldAbbreviation
decl_stmt|;
DECL|field|editingIndex
specifier|private
name|int
name|editingIndex
decl_stmt|;
annotation|@
name|Override
DECL|method|startEdit ()
specifier|public
name|void
name|startEdit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|()
operator|&&
name|viewModel
operator|.
name|isAbbreviationEditableAndRemovableProperty
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
name|oldAbbreviation
operator|=
name|viewModel
operator|.
name|currentAbbreviationProperty
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
expr_stmt|;
name|super
operator|.
name|startEdit
argument_list|()
expr_stmt|;
name|createTextField
argument_list|()
expr_stmt|;
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
name|textField
argument_list|)
expr_stmt|;
name|editingIndex
operator|=
name|journalAbbreviationsTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
expr_stmt|;
name|textField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
name|textField
operator|.
name|selectAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancelEdit ()
specifier|public
name|void
name|cancelEdit
parameter_list|()
block|{
name|super
operator|.
name|cancelEdit
argument_list|()
expr_stmt|;
name|setText
argument_list|(
name|getItem
argument_list|()
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|journalAbbreviationsTable
operator|.
name|itemsProperty
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|editingIndex
argument_list|)
operator|.
name|setAbbreviation
argument_list|(
name|oldAbbreviation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateItem (String item, boolean empty)
specifier|public
name|void
name|updateItem
parameter_list|(
name|String
name|item
parameter_list|,
name|boolean
name|empty
parameter_list|)
block|{
name|super
operator|.
name|updateItem
argument_list|(
name|item
argument_list|,
name|empty
argument_list|)
expr_stmt|;
if|if
condition|(
name|empty
condition|)
block|{
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isEditing
argument_list|()
condition|)
block|{
if|if
condition|(
name|textField
operator|!=
literal|null
condition|)
block|{
name|textField
operator|.
name|setText
argument_list|(
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
name|textField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setText
argument_list|(
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|commitEdit (String abbreviation)
specifier|public
name|void
name|commitEdit
parameter_list|(
name|String
name|abbreviation
parameter_list|)
block|{
name|journalAbbreviationsTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|editingIndex
argument_list|)
expr_stmt|;
name|AbbreviationViewModel
name|current
init|=
name|viewModel
operator|.
name|currentAbbreviationProperty
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|super
operator|.
name|commitEdit
argument_list|(
name|abbreviation
argument_list|)
expr_stmt|;
name|current
operator|.
name|setAbbreviation
argument_list|(
name|oldAbbreviation
argument_list|)
expr_stmt|;
name|viewModel
operator|.
name|editAbbreviation
argument_list|(
name|current
operator|.
name|getName
argument_list|()
argument_list|,
name|abbreviation
argument_list|)
expr_stmt|;
block|}
DECL|method|createTextField ()
specifier|private
name|void
name|createTextField
parameter_list|()
block|{
name|textField
operator|=
operator|new
name|TextField
argument_list|(
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|textField
operator|.
name|setMinWidth
argument_list|(
name|this
operator|.
name|getWidth
argument_list|()
operator|-
operator|(
name|this
operator|.
name|getGraphicTextGap
argument_list|()
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
name|textField
operator|.
name|focusedProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldValue
parameter_list|,
name|newValue
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|newValue
condition|)
block|{
name|commitEdit
argument_list|(
name|textField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|textField
operator|.
name|setOnKeyPressed
argument_list|(
name|t
lambda|->
block|{
if|if
condition|(
name|t
operator|.
name|getCode
argument_list|()
operator|==
name|KeyCode
operator|.
name|ENTER
condition|)
block|{
if|if
condition|(
name|isEditing
argument_list|()
condition|)
block|{
name|journalAbbreviationsTable
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|startEdit
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|getCode
argument_list|()
operator|==
name|KeyCode
operator|.
name|ESCAPE
condition|)
block|{
name|cancelEdit
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getString ()
specifier|private
name|String
name|getString
parameter_list|()
block|{
return|return
name|getItem
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getItem
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

