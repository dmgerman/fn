begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2016 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Frame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GraphicsEnvironment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Box
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ImageIcon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBoxMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JProgressBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButtonMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JSplitPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTabbedPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JToggleButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|MenuElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|TransferHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|WindowConstants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefExecutorService
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileTypeEditor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|push
operator|.
name|PushToApplicationButton
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|push
operator|.
name|PushToApplications
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|Actions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|AutoLinkFilesAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ErrorConsoleAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|IntegrityCheckAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ManageKeywordsAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|MassSetFieldAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|MnemonicAwareAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|NewDatabaseAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|NewEntryAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|NewSubDatabaseAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|OpenBrowserAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|SearchForUpdateAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|SortTabsAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|dbproperties
operator|.
name|DatabasePropertiesDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|AutoSaveManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|ExportAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|ExportCustomizationDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|SaveAllAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|SaveDatabaseAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
operator|.
name|EntryTableTransferHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
operator|.
name|GroupSelector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|AboutAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|AboutDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpFile
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|journals
operator|.
name|ManageJournalsAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBindingRepository
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBindingsDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|menus
operator|.
name|ChangeEntryTypeMenu
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|menus
operator|.
name|FileHistoryMenu
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|menus
operator|.
name|RightClickMenu
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|openoffice
operator|.
name|OpenOfficePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preftabs
operator|.
name|PreferencesDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FocusRequester
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|PositionWindow
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|MarkEntriesAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ImportCustomizationDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ImportFormats
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|OpenDatabaseAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|OutputPrinter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|fetcher
operator|.
name|GeneralFetcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|CustomEntryTypesManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|logging
operator|.
name|GuiAppender
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|preferences
operator|.
name|LastFocusedTabPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|HighlightMatchingGroupPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|Printed
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|Quality
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|Rank
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|ReadStatus
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|Relevance
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldsUtils
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
operator|.
name|importer
operator|.
name|DbImportAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|HeaderStyle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|osx
operator|.
name|macadapter
operator|.
name|MacAdapter
import|;
end_import

begin_comment
comment|/**  * The main window of the application.  */
end_comment

begin_class
DECL|class|JabRefFrame
specifier|public
class|class
name|JabRefFrame
extends|extends
name|JFrame
implements|implements
name|OutputPrinter
block|{
comment|// Frame titles.
DECL|field|FRAME_TITLE
specifier|private
specifier|static
specifier|final
name|String
name|FRAME_TITLE
init|=
literal|"JabRef"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JabRefFrame
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ELLIPSES
specifier|private
specifier|static
specifier|final
name|String
name|ELLIPSES
init|=
literal|"..."
decl_stmt|;
DECL|field|splitPane
specifier|private
specifier|final
name|JSplitPane
name|splitPane
init|=
operator|new
name|JSplitPane
argument_list|()
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
DECL|field|prefsDialog
specifier|private
name|PreferencesDialog
name|prefsDialog
decl_stmt|;
DECL|field|lastTabbedPanelSelectionIndex
specifier|private
name|int
name|lastTabbedPanelSelectionIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|// The sidepane manager takes care of populating the sidepane.
DECL|field|sidePaneManager
specifier|private
name|SidePaneManager
name|sidePaneManager
decl_stmt|;
DECL|field|tabbedPane
specifier|private
name|JTabbedPane
name|tabbedPane
decl_stmt|;
comment|// initialized at constructor
DECL|field|marg
specifier|private
specifier|final
name|Insets
name|marg
init|=
operator|new
name|Insets
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|pw
specifier|private
name|PositionWindow
name|pw
decl_stmt|;
DECL|field|checkIntegrity
specifier|private
specifier|final
name|IntegrityCheckAction
name|checkIntegrity
init|=
operator|new
name|IntegrityCheckAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|tlb
specifier|private
specifier|final
name|ToolBar
name|tlb
init|=
operator|new
name|ToolBar
argument_list|()
decl_stmt|;
DECL|field|mb
specifier|private
specifier|final
name|JMenuBar
name|mb
init|=
operator|new
name|JMenuBar
argument_list|()
decl_stmt|;
DECL|field|gbl
specifier|private
specifier|final
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|con
specifier|private
specifier|final
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
DECL|field|statusLine
specifier|private
specifier|final
name|JLabel
name|statusLine
init|=
operator|new
name|JLabel
argument_list|(
literal|""
argument_list|,
name|SwingConstants
operator|.
name|LEFT
argument_list|)
decl_stmt|;
DECL|field|statusLabel
specifier|private
specifier|final
name|JLabel
name|statusLabel
init|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Status"
argument_list|)
operator|+
literal|':'
argument_list|,
name|SwingConstants
operator|.
name|LEFT
argument_list|)
decl_stmt|;
DECL|field|progressBar
specifier|private
specifier|final
name|JProgressBar
name|progressBar
init|=
operator|new
name|JProgressBar
argument_list|()
decl_stmt|;
DECL|field|fileHistory
specifier|private
specifier|final
name|FileHistoryMenu
name|fileHistory
init|=
operator|new
name|FileHistoryMenu
argument_list|(
name|prefs
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// The help window.
DECL|field|aboutDiag
specifier|private
specifier|final
name|AboutDialog
name|aboutDiag
init|=
operator|new
name|AboutDialog
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// Here we instantiate menu/toolbar actions. Actions regarding
comment|// the currently open database are defined as a GeneralAction
comment|// with a unique command string. This causes the appropriate
comment|// BasePanel's runCommand() method to be called with that command.
comment|// Note: GeneralAction's constructor automatically gets translations
comment|// for the name and message strings.
comment|/* References to the toggle buttons in the toolbar */
comment|// the groups interface
DECL|field|groupToggle
specifier|public
name|JToggleButton
name|groupToggle
decl_stmt|;
DECL|field|previewToggle
specifier|private
name|JToggleButton
name|previewToggle
decl_stmt|;
DECL|field|fetcherToggle
specifier|private
name|JToggleButton
name|fetcherToggle
decl_stmt|;
DECL|field|open
specifier|private
specifier|final
name|OpenDatabaseAction
name|open
init|=
operator|new
name|OpenDatabaseAction
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|editModeAction
specifier|private
specifier|final
name|EditModeAction
name|editModeAction
init|=
operator|new
name|EditModeAction
argument_list|()
decl_stmt|;
DECL|field|quit
specifier|private
specifier|final
name|AbstractAction
name|quit
init|=
operator|new
name|CloseAction
argument_list|()
decl_stmt|;
DECL|field|selectKeys
specifier|private
specifier|final
name|AbstractAction
name|selectKeys
init|=
operator|new
name|SelectKeysAction
argument_list|()
decl_stmt|;
DECL|field|newBibtexDatabaseAction
specifier|private
specifier|final
name|AbstractAction
name|newBibtexDatabaseAction
init|=
operator|new
name|NewDatabaseAction
argument_list|(
name|this
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
decl_stmt|;
DECL|field|newBiblatexDatabaseAction
specifier|private
specifier|final
name|AbstractAction
name|newBiblatexDatabaseAction
init|=
operator|new
name|NewDatabaseAction
argument_list|(
name|this
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
decl_stmt|;
DECL|field|newSubDatabaseAction
specifier|private
specifier|final
name|AbstractAction
name|newSubDatabaseAction
init|=
operator|new
name|NewSubDatabaseAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|forkMeOnGitHubAction
specifier|private
specifier|final
name|AbstractAction
name|forkMeOnGitHubAction
init|=
operator|new
name|OpenBrowserAction
argument_list|(
literal|"https://github.com/JabRef/jabref"
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Fork me on GitHub"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Opens JabRef's GitHub page"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|GITHUB
operator|.
name|getSmallIcon
argument_list|()
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|GITHUB
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|donationAction
specifier|private
specifier|final
name|AbstractAction
name|donationAction
init|=
operator|new
name|OpenBrowserAction
argument_list|(
literal|"https://github.com/JabRef/jabref/wiki/Donations"
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Donate to JabRef"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Donate to JabRef"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|DONATE
operator|.
name|getSmallIcon
argument_list|()
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|DONATE
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|openForumAction
specifier|private
specifier|final
name|AbstractAction
name|openForumAction
init|=
operator|new
name|OpenBrowserAction
argument_list|(
literal|"http://discourse.jabref.org/"
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Online help forum"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Online help forum"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|FORUM
operator|.
name|getSmallIcon
argument_list|()
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|FORUM
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|help
specifier|private
specifier|final
name|AbstractAction
name|help
init|=
operator|new
name|HelpAction
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Online help"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Online help"
argument_list|)
argument_list|,
name|HelpFile
operator|.
name|CONTENTS
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|HELP
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|about
specifier|private
specifier|final
name|AbstractAction
name|about
init|=
operator|new
name|AboutAction
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"About JabRef"
argument_list|)
argument_list|,
name|aboutDiag
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"About JabRef"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|getImage
argument_list|(
literal|"about"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|editEntry
specifier|private
specifier|final
name|AbstractAction
name|editEntry
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|EDIT
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Edit entry"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Edit entry"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|EDIT_ENTRY
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|EDIT_ENTRY
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|focusTable
specifier|private
specifier|final
name|AbstractAction
name|focusTable
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|FOCUS_TABLE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Focus entry table"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move the keyboard focus to the entry table"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|FOCUS_ENTRY_TABLE
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|save
specifier|private
specifier|final
name|AbstractAction
name|save
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|SAVE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Save database"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save database"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|SAVE_DATABASE
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|SAVE
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|saveAs
specifier|private
specifier|final
name|AbstractAction
name|saveAs
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|SAVE_AS
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Save database as..."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save database as..."
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|SAVE_DATABASE_AS
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|saveAll
specifier|private
specifier|final
name|AbstractAction
name|saveAll
init|=
operator|new
name|SaveAllAction
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
decl_stmt|;
DECL|field|saveSelectedAs
specifier|private
specifier|final
name|AbstractAction
name|saveSelectedAs
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|SAVE_SELECTED_AS
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Save selected as..."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save selected as..."
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|saveSelectedAsPlain
specifier|private
specifier|final
name|AbstractAction
name|saveSelectedAsPlain
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|SAVE_SELECTED_AS_PLAIN
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Save selected as plain BibTeX..."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save selected as plain BibTeX..."
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|exportAll
specifier|private
specifier|final
name|AbstractAction
name|exportAll
init|=
name|ExportAction
operator|.
name|getExportAction
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|exportSelected
specifier|private
specifier|final
name|AbstractAction
name|exportSelected
init|=
name|ExportAction
operator|.
name|getExportAction
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|importCurrent
specifier|private
specifier|final
name|AbstractAction
name|importCurrent
init|=
name|ImportFormats
operator|.
name|getImportAction
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|importNew
specifier|private
specifier|final
name|AbstractAction
name|importNew
init|=
name|ImportFormats
operator|.
name|getImportAction
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|nextTab
specifier|public
specifier|final
name|AbstractAction
name|nextTab
init|=
operator|new
name|ChangeTabAction
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|prevTab
specifier|public
specifier|final
name|AbstractAction
name|prevTab
init|=
operator|new
name|ChangeTabAction
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|sortTabs
specifier|private
specifier|final
name|AbstractAction
name|sortTabs
init|=
operator|new
name|SortTabsAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|undo
specifier|private
specifier|final
name|AbstractAction
name|undo
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|UNDO
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Undo"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Undo"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|UNDO
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|UNDO
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|redo
specifier|private
specifier|final
name|AbstractAction
name|redo
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|REDO
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Redo"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Redo"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|REDO
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|REDO
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|forward
specifier|private
specifier|final
name|AbstractAction
name|forward
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|FORWARD
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Forward"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Forward"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|FORWARD
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|RIGHT
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|back
specifier|private
specifier|final
name|AbstractAction
name|back
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|BACK
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Back"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Back"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|BACK
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|LEFT
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|deleteEntry
specifier|private
specifier|final
name|AbstractAction
name|deleteEntry
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|DELETE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Delete entry"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete entry"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|DELETE_ENTRY
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|DELETE_ENTRY
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|copy
specifier|private
specifier|final
name|AbstractAction
name|copy
init|=
operator|new
name|EditAction
argument_list|(
name|Actions
operator|.
name|COPY
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Copy"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copy"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|COPY
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|COPY
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|paste
specifier|private
specifier|final
name|AbstractAction
name|paste
init|=
operator|new
name|EditAction
argument_list|(
name|Actions
operator|.
name|PASTE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Paste"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Paste"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|PASTE
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|PASTE
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|cut
specifier|private
specifier|final
name|AbstractAction
name|cut
init|=
operator|new
name|EditAction
argument_list|(
name|Actions
operator|.
name|CUT
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Cut"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cut"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CUT
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CUT
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|openConsole
specifier|private
specifier|final
name|AbstractAction
name|openConsole
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|OPEN_CONSOLE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Open terminal here"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Open terminal here"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|OPEN_CONSOLE
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CONSOLE
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|mark
specifier|private
specifier|final
name|AbstractAction
name|mark
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|MARK_ENTRIES
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Mark entries"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Mark entries"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|MARK_ENTRIES
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|MARK_ENTRIES
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|unmark
specifier|private
specifier|final
name|AbstractAction
name|unmark
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|UNMARK_ENTRIES
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Unmark entries"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unmark entries"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|UNMARK_ENTRIES
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|UNMARK_ENTRIES
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|unmarkAll
specifier|private
specifier|final
name|AbstractAction
name|unmarkAll
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|UNMARK_ALL
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Unmark all"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|toggleRelevance
specifier|private
specifier|final
name|AbstractAction
name|toggleRelevance
init|=
operator|new
name|GeneralAction
argument_list|(
name|Relevance
operator|.
name|getInstance
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getActionName
argument_list|()
argument_list|,
name|Relevance
operator|.
name|getInstance
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMenuString
argument_list|()
argument_list|,
name|Relevance
operator|.
name|getInstance
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getToolTipText
argument_list|()
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|RELEVANCE
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|toggleQualityAssured
specifier|private
specifier|final
name|AbstractAction
name|toggleQualityAssured
init|=
operator|new
name|GeneralAction
argument_list|(
name|Quality
operator|.
name|getInstance
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getActionName
argument_list|()
argument_list|,
name|Quality
operator|.
name|getInstance
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMenuString
argument_list|()
argument_list|,
name|Quality
operator|.
name|getInstance
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getToolTipText
argument_list|()
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|QUALITY_ASSURED
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|togglePrinted
specifier|private
specifier|final
name|AbstractAction
name|togglePrinted
init|=
operator|new
name|GeneralAction
argument_list|(
name|Printed
operator|.
name|getInstance
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getActionName
argument_list|()
argument_list|,
name|Printed
operator|.
name|getInstance
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMenuString
argument_list|()
argument_list|,
name|Printed
operator|.
name|getInstance
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getToolTipText
argument_list|()
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|PRINTED
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|manageSelectors
specifier|private
specifier|final
name|AbstractAction
name|manageSelectors
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|MANAGE_SELECTORS
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Manage content selectors"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|normalSearch
specifier|private
specifier|final
name|AbstractAction
name|normalSearch
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|SEARCH
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Search"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Search"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|SEARCH
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|SEARCH
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|copyKey
specifier|private
specifier|final
name|AbstractAction
name|copyKey
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|COPY_KEY
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Copy BibTeX key"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|COPY_BIBTEX_KEY
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|copyCiteKey
specifier|private
specifier|final
name|AbstractAction
name|copyCiteKey
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|COPY_CITE_KEY
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Copy \\cite{BibTeX key}"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|COPY_CITE_BIBTEX_KEY
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|copyKeyAndTitle
specifier|private
specifier|final
name|AbstractAction
name|copyKeyAndTitle
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|COPY_KEY_AND_TITLE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Copy BibTeX key and title"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|COPY_BIBTEX_KEY_AND_TITLE
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|mergeDatabaseAction
specifier|private
specifier|final
name|AbstractAction
name|mergeDatabaseAction
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|MERGE_DATABASE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Append database"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Append contents from a BibTeX database into the currently viewed database"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|selectAll
specifier|private
specifier|final
name|AbstractAction
name|selectAll
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|SELECT_ALL
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Select all"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|SELECT_ALL
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|replaceAll
specifier|private
specifier|final
name|AbstractAction
name|replaceAll
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|REPLACE_ALL
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Replace string"
argument_list|)
operator|+
name|ELLIPSES
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|REPLACE_STRING
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|editPreamble
specifier|private
specifier|final
name|AbstractAction
name|editPreamble
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|EDIT_PREAMBLE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Edit preamble"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Edit preamble"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|EDIT_PREAMBLE
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|editStrings
specifier|private
specifier|final
name|AbstractAction
name|editStrings
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|EDIT_STRINGS
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Edit strings"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Edit strings"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|EDIT_STRINGS
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|EDIT_STRINGS
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|customizeAction
specifier|private
specifier|final
name|AbstractAction
name|customizeAction
init|=
operator|new
name|CustomizeEntryTypeAction
argument_list|()
decl_stmt|;
DECL|field|toggleToolbar
specifier|private
specifier|final
name|Action
name|toggleToolbar
init|=
name|enableToggle
argument_list|(
operator|new
name|AbstractAction
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Hide/show toolbar"
argument_list|)
argument_list|)
block|{
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|HIDE_SHOW_TOOLBAR
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Hide/show toolbar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|tlb
operator|.
name|setVisible
argument_list|(
operator|!
name|tlb
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|toggleGroups
specifier|private
specifier|final
name|Action
name|toggleGroups
init|=
name|enableToggle
argument_list|(
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|TOGGLE_GROUPS
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Toggle groups interface"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Toggle groups interface"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|TOGGLE_GROUPS_INTERFACE
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|TOGGLE_GROUPS
operator|.
name|getIcon
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|addToGroup
specifier|private
specifier|final
name|AbstractAction
name|addToGroup
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|ADD_TO_GROUP
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Add to group"
argument_list|)
operator|+
name|ELLIPSES
argument_list|)
decl_stmt|;
DECL|field|removeFromGroup
specifier|private
specifier|final
name|AbstractAction
name|removeFromGroup
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|REMOVE_FROM_GROUP
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove from group"
argument_list|)
operator|+
name|ELLIPSES
argument_list|)
decl_stmt|;
DECL|field|moveToGroup
specifier|private
specifier|final
name|AbstractAction
name|moveToGroup
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|MOVE_TO_GROUP
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move to group"
argument_list|)
operator|+
name|ELLIPSES
argument_list|)
decl_stmt|;
DECL|field|togglePreview
specifier|private
specifier|final
name|Action
name|togglePreview
init|=
name|enableToggle
argument_list|(
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|TOGGLE_PREVIEW
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Toggle entry preview"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Toggle entry preview"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|TOGGLE_ENTRY_PREVIEW
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|TOGGLE_ENTRY_PREVIEW
operator|.
name|getIcon
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|toggleHighlightAny
specifier|private
specifier|final
name|Action
name|toggleHighlightAny
init|=
name|enableToggle
argument_list|(
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|TOGGLE_HIGHLIGHTS_GROUPS_MATCHING_ANY
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Highlight groups matching any selected entry"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Highlight groups matching any selected entry"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|toggleHighlightAll
specifier|private
specifier|final
name|Action
name|toggleHighlightAll
init|=
name|enableToggle
argument_list|(
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|TOGGLE_HIGHLIGHTS_GROUPS_MATCHING_ALL
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Highlight groups matching all selected entries"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Highlight groups matching all selected entries"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|toggleHighlightDisable
specifier|private
specifier|final
name|Action
name|toggleHighlightDisable
init|=
name|enableToggle
argument_list|(
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|TOGGLE_HIGHLIGHTS_GROUPS_MATCHING_DISABLE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Disable highlight groups matching entries"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Disable highlight groups matching entries"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|switchPreview
specifier|private
specifier|final
name|AbstractAction
name|switchPreview
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|SWITCH_PREVIEW
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Switch preview layout"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|SWITCH_PREVIEW_LAYOUT
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|makeKeyAction
specifier|private
specifier|final
name|AbstractAction
name|makeKeyAction
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|MAKE_KEY
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Autogenerate BibTeX keys"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autogenerate BibTeX keys"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|AUTOGENERATE_BIBTEX_KEYS
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|MAKE_KEY
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|writeXmpAction
specifier|private
specifier|final
name|AbstractAction
name|writeXmpAction
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|WRITE_XMP
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Write XMP-metadata to PDFs"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Will write XMP-metadata to the PDFs linked from selected entries."
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|WRITE_XMP
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|openFolder
specifier|private
specifier|final
name|AbstractAction
name|openFolder
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|OPEN_FOLDER
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Open folder"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Open folder"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|OPEN_FOLDER
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|openFile
specifier|private
specifier|final
name|AbstractAction
name|openFile
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|OPEN_EXTERNAL_FILE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Open file"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Open file"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|OPEN_FILE
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|FILE
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|openUrl
specifier|private
specifier|final
name|AbstractAction
name|openUrl
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|OPEN_URL
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Open URL or DOI"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Open URL or DOI"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|OPEN_URL_OR_DOI
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|WWW
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|dupliCheck
specifier|private
specifier|final
name|AbstractAction
name|dupliCheck
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|DUPLI_CHECK
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Find duplicates"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|FIND_DUPLICATES
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|plainTextImport
specifier|private
specifier|final
name|AbstractAction
name|plainTextImport
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|PLAIN_TEXT_IMPORT
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"New entry from plain text"
argument_list|)
operator|+
name|ELLIPSES
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|NEW_FROM_PLAIN_TEXT
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|customExpAction
specifier|private
specifier|final
name|AbstractAction
name|customExpAction
init|=
operator|new
name|CustomizeExportsAction
argument_list|()
decl_stmt|;
DECL|field|customImpAction
specifier|private
specifier|final
name|AbstractAction
name|customImpAction
init|=
operator|new
name|CustomizeImportsAction
argument_list|()
decl_stmt|;
DECL|field|customFileTypesAction
specifier|private
specifier|final
name|AbstractAction
name|customFileTypesAction
init|=
name|ExternalFileTypeEditor
operator|.
name|getAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|exportToClipboard
specifier|private
specifier|final
name|AbstractAction
name|exportToClipboard
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|EXPORT_TO_CLIPBOARD
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Export selected entries to clipboard"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|EXPORT_TO_CLIPBOARD
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|autoSetFile
specifier|private
specifier|final
name|AbstractAction
name|autoSetFile
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|AUTO_SET_FILE
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Synchronize file links"
argument_list|)
operator|+
name|ELLIPSES
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|SYNCHRONIZE_FILES
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|abbreviateMedline
specifier|private
specifier|final
name|AbstractAction
name|abbreviateMedline
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|ABBREVIATE_MEDLINE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Abbreviate journal names (MEDLINE)"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Abbreviate journal names of the selected entries (MEDLINE abbreviation)"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|abbreviateIso
specifier|private
specifier|final
name|AbstractAction
name|abbreviateIso
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|ABBREVIATE_ISO
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Abbreviate journal names (ISO)"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Abbreviate journal names of the selected entries (ISO abbreviation)"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|ABBREVIATE
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|unabbreviate
specifier|private
specifier|final
name|AbstractAction
name|unabbreviate
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|UNABBREVIATE
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Unabbreviate journal names"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unabbreviate journal names of the selected entries"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|UNABBREVIATE
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|manageJournals
specifier|private
specifier|final
name|AbstractAction
name|manageJournals
init|=
operator|new
name|ManageJournalsAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|databaseProperties
specifier|private
specifier|final
name|AbstractAction
name|databaseProperties
init|=
operator|new
name|DatabasePropertiesAction
argument_list|()
decl_stmt|;
DECL|field|bibtexKeyPattern
specifier|private
specifier|final
name|AbstractAction
name|bibtexKeyPattern
init|=
operator|new
name|BibtexKeyPatternAction
argument_list|()
decl_stmt|;
DECL|field|errorConsole
specifier|private
specifier|final
name|AbstractAction
name|errorConsole
init|=
operator|new
name|ErrorConsoleAction
argument_list|(
name|this
argument_list|,
name|Globals
operator|.
name|getStreamEavesdropper
argument_list|()
argument_list|,
name|GuiAppender
operator|.
name|CACHE
argument_list|)
decl_stmt|;
DECL|field|dbConnect
specifier|private
specifier|final
name|AbstractAction
name|dbConnect
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|DB_CONNECT
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Connect to external SQL database"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connect to external SQL database"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|dbExport
specifier|private
specifier|final
name|AbstractAction
name|dbExport
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|DB_EXPORT
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Export to external SQL database"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Export to external SQL database"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|cleanupEntries
specifier|private
specifier|final
name|AbstractAction
name|cleanupEntries
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|CLEANUP
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Cleanup entries"
argument_list|)
operator|+
name|ELLIPSES
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cleanup entries"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLEANUP
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CLEANUP_ENTRIES
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|mergeEntries
specifier|private
specifier|final
name|AbstractAction
name|mergeEntries
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|MERGE_ENTRIES
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Merge entries"
argument_list|)
operator|+
name|ELLIPSES
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Merge entries"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|MERGE_ENTRIES
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|dbImport
specifier|private
specifier|final
name|AbstractAction
name|dbImport
init|=
operator|new
name|DbImportAction
argument_list|(
name|this
argument_list|)
operator|.
name|getAction
argument_list|()
decl_stmt|;
DECL|field|downloadFullText
specifier|private
specifier|final
name|AbstractAction
name|downloadFullText
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|DOWNLOAD_FULL_TEXT
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Look up full text document"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Follow DOI or URL link and try to locate PDF full text document"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|increaseFontSize
specifier|private
specifier|final
name|AbstractAction
name|increaseFontSize
init|=
operator|new
name|IncreaseTableFontSizeAction
argument_list|()
decl_stmt|;
DECL|field|decreseFontSize
specifier|private
specifier|final
name|AbstractAction
name|decreseFontSize
init|=
operator|new
name|DecreaseTableFontSizeAction
argument_list|()
decl_stmt|;
DECL|field|resolveDuplicateKeys
specifier|private
specifier|final
name|AbstractAction
name|resolveDuplicateKeys
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|RESOLVE_DUPLICATE_KEYS
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Resolve duplicate BibTeX keys"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Find and remove duplicate BibTeX keys"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|RESOLVE_DUPLICATE_BIBTEX_KEYS
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|sendAsEmail
specifier|private
specifier|final
name|AbstractAction
name|sendAsEmail
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|SEND_AS_EMAIL
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Send as email"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|EMAIL
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|massSetField
specifier|private
specifier|final
name|MassSetFieldAction
name|massSetField
init|=
operator|new
name|MassSetFieldAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|manageKeywords
specifier|private
specifier|final
name|ManageKeywordsAction
name|manageKeywords
init|=
operator|new
name|ManageKeywordsAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|findUnlinkedFiles
specifier|private
specifier|final
name|GeneralAction
name|findUnlinkedFiles
init|=
operator|new
name|GeneralAction
argument_list|(
name|FindUnlinkedFilesDialog
operator|.
name|ACTION_COMMAND
argument_list|,
name|FindUnlinkedFilesDialog
operator|.
name|ACTION_MENU_TITLE
argument_list|,
name|FindUnlinkedFilesDialog
operator|.
name|ACTION_SHORT_DESCRIPTION
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|FIND_UNLINKED_FILES
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|autoLinkFile
specifier|private
specifier|final
name|AutoLinkFilesAction
name|autoLinkFile
init|=
operator|new
name|AutoLinkFilesAction
argument_list|()
decl_stmt|;
DECL|field|pushExternalButton
specifier|private
name|PushToApplicationButton
name|pushExternalButton
decl_stmt|;
DECL|field|generalFetcher
specifier|private
name|GeneralFetcher
name|generalFetcher
decl_stmt|;
DECL|field|groupSelector
specifier|private
name|GroupSelector
name|groupSelector
decl_stmt|;
DECL|field|previousTabCount
specifier|private
name|int
name|previousTabCount
init|=
operator|-
literal|1
decl_stmt|;
comment|// The action for adding a new entry of unspecified type.
DECL|field|newEntryAction
specifier|private
specifier|final
name|NewEntryAction
name|newEntryAction
init|=
operator|new
name|NewEntryAction
argument_list|(
name|this
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|NEW_ENTRY
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|newSpecificEntryAction
specifier|private
specifier|final
name|List
argument_list|<
name|NewEntryAction
argument_list|>
name|newSpecificEntryAction
init|=
name|getNewEntryActions
argument_list|()
decl_stmt|;
comment|// The action for closing the current database and leaving the window open.
DECL|field|closeDatabaseAction
specifier|private
specifier|final
name|CloseDatabaseAction
name|closeDatabaseAction
init|=
operator|new
name|CloseDatabaseAction
argument_list|()
decl_stmt|;
DECL|field|closeAllDatabasesAction
specifier|private
specifier|final
name|CloseAllDatabasesAction
name|closeAllDatabasesAction
init|=
operator|new
name|CloseAllDatabasesAction
argument_list|()
decl_stmt|;
DECL|field|closeOtherDatabasesAction
specifier|private
specifier|final
name|CloseOtherDatabasesAction
name|closeOtherDatabasesAction
init|=
operator|new
name|CloseOtherDatabasesAction
argument_list|()
decl_stmt|;
comment|// The action for opening the preferences dialog.
DECL|field|showPrefs
specifier|private
specifier|final
name|AbstractAction
name|showPrefs
init|=
operator|new
name|ShowPrefsAction
argument_list|()
decl_stmt|;
comment|// Lists containing different subsets of actions for different purposes
DECL|field|specialFieldButtons
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|specialFieldButtons
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|openDatabaseOnlyActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|openDatabaseOnlyActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|severalDatabasesOnlyActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|severalDatabasesOnlyActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|openAndSavedDatabasesOnlyActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|openAndSavedDatabasesOnlyActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|class|EditModeAction
specifier|private
class|class
name|EditModeAction
extends|extends
name|AbstractAction
block|{
DECL|method|EditModeAction ()
specifier|public
name|EditModeAction
parameter_list|()
block|{
name|initName
argument_list|()
expr_stmt|;
block|}
DECL|method|initName ()
specifier|public
name|void
name|initName
parameter_list|()
block|{
if|if
condition|(
name|JabRefFrame
operator|.
name|this
operator|.
name|getCurrentBasePanel
argument_list|()
operator|==
literal|null
condition|)
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Switch to %0 mode"
argument_list|,
literal|"BibTeX/BibLaTeX"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BibDatabaseMode
name|mode
init|=
name|JabRefFrame
operator|.
name|this
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
decl_stmt|;
name|String
name|modeName
init|=
name|mode
operator|.
name|getOppositeMode
argument_list|()
operator|.
name|getFormattedName
argument_list|()
decl_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Switch to %0 mode"
argument_list|,
name|modeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent evt)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
if|if
condition|(
name|JabRefFrame
operator|.
name|this
operator|.
name|getCurrentBasePanel
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|BibDatabaseMode
name|newMode
init|=
name|JabRefFrame
operator|.
name|this
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
operator|.
name|getOppositeMode
argument_list|()
decl_stmt|;
name|JabRefFrame
operator|.
name|this
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|setMode
argument_list|(
name|newMode
argument_list|)
expr_stmt|;
name|JabRefFrame
operator|.
name|this
operator|.
name|refreshTitleAndTabs
argument_list|()
expr_stmt|;
name|initName
argument_list|()
expr_stmt|;
comment|// update all elements in current base panel
name|JabRefFrame
operator|.
name|this
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|hideBottomComponent
argument_list|()
expr_stmt|;
name|JabRefFrame
operator|.
name|this
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|rebuildAllEntryEditors
argument_list|()
expr_stmt|;
name|JabRefFrame
operator|.
name|this
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|JabRefFrame ()
specifier|public
name|JabRefFrame
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
name|updateEnabledState
argument_list|()
expr_stmt|;
block|}
DECL|method|getNewEntryActions ()
specifier|private
name|List
argument_list|<
name|NewEntryAction
argument_list|>
name|getNewEntryActions
parameter_list|()
block|{
comment|// only Bibtex
name|List
argument_list|<
name|NewEntryAction
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|EntryType
name|type
range|:
name|BibtexEntryTypes
operator|.
name|ALL
control|)
block|{
name|KeyStroke
name|keyStroke
init|=
operator|new
name|ChangeEntryTypeMenu
argument_list|()
operator|.
name|entryShortCuts
operator|.
name|get
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStroke
operator|==
literal|null
condition|)
block|{
name|actions
operator|.
name|add
argument_list|(
operator|new
name|NewEntryAction
argument_list|(
name|this
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actions
operator|.
name|add
argument_list|(
operator|new
name|NewEntryAction
argument_list|(
name|this
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|keyStroke
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|actions
return|;
block|}
DECL|method|tabPopupMenu ()
specifier|private
name|JPopupMenu
name|tabPopupMenu
parameter_list|()
block|{
name|JPopupMenu
name|popupMenu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
comment|// Close actions
name|JMenuItem
name|close
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Close"
argument_list|)
argument_list|)
decl_stmt|;
name|JMenuItem
name|closeOthers
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Close Others"
argument_list|)
argument_list|)
decl_stmt|;
name|JMenuItem
name|closeAll
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Close All"
argument_list|)
argument_list|)
decl_stmt|;
name|close
operator|.
name|addActionListener
argument_list|(
name|closeDatabaseAction
argument_list|)
expr_stmt|;
name|closeOthers
operator|.
name|addActionListener
argument_list|(
name|closeOtherDatabasesAction
argument_list|)
expr_stmt|;
name|closeAll
operator|.
name|addActionListener
argument_list|(
name|closeAllDatabasesAction
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|close
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|closeOthers
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|closeAll
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|JMenuItem
name|databaseProperties
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Database properties"
argument_list|)
argument_list|)
decl_stmt|;
name|databaseProperties
operator|.
name|addActionListener
argument_list|(
name|this
operator|.
name|databaseProperties
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|databaseProperties
argument_list|)
expr_stmt|;
name|JMenuItem
name|bibtexKeyPatternBtn
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"BibTeX key patterns"
argument_list|)
argument_list|)
decl_stmt|;
name|bibtexKeyPatternBtn
operator|.
name|addActionListener
argument_list|(
name|bibtexKeyPattern
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|bibtexKeyPatternBtn
argument_list|)
expr_stmt|;
name|JMenuItem
name|manageSelectorsBtn
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Manage content selectors"
argument_list|)
argument_list|)
decl_stmt|;
name|manageSelectorsBtn
operator|.
name|addActionListener
argument_list|(
name|manageSelectors
argument_list|)
expr_stmt|;
name|popupMenu
operator|.
name|add
argument_list|(
name|manageSelectorsBtn
argument_list|)
expr_stmt|;
return|return
name|popupMenu
return|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
name|tabbedPane
operator|=
operator|new
name|DragDropPopupPane
argument_list|(
name|tabPopupMenu
argument_list|()
argument_list|)
expr_stmt|;
name|MyGlassPane
name|glassPane
init|=
operator|new
name|MyGlassPane
argument_list|()
decl_stmt|;
name|setGlassPane
argument_list|(
name|glassPane
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|FRAME_TITLE
argument_list|)
expr_stmt|;
name|setIconImage
argument_list|(
operator|new
name|ImageIcon
argument_list|(
name|IconTheme
operator|.
name|getIconUrl
argument_list|(
literal|"jabrefIcon48"
argument_list|)
argument_list|)
operator|.
name|getImage
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultCloseOperation
argument_list|(
name|WindowConstants
operator|.
name|DO_NOTHING_ON_CLOSE
argument_list|)
expr_stmt|;
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
name|JabRefFrame
operator|.
name|this
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|new
name|CloseAction
argument_list|()
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|initSidePane
argument_list|()
expr_stmt|;
name|initLayout
argument_list|()
expr_stmt|;
name|initActions
argument_list|()
expr_stmt|;
comment|// Show the toolbar if it was visible at last shutdown:
name|tlb
operator|.
name|setVisible
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TOOLBAR_VISIBLE
argument_list|)
argument_list|)
expr_stmt|;
name|setBounds
argument_list|(
name|GraphicsEnvironment
operator|.
name|getLocalGraphicsEnvironment
argument_list|()
operator|.
name|getMaximumWindowBounds
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|=
operator|new
name|PositionWindow
argument_list|(
name|this
argument_list|,
name|JabRefPreferences
operator|.
name|POS_X
argument_list|,
name|JabRefPreferences
operator|.
name|POS_Y
argument_list|,
name|JabRefPreferences
operator|.
name|SIZE_X
argument_list|,
name|JabRefPreferences
operator|.
name|SIZE_Y
argument_list|)
expr_stmt|;
name|positionWindowOnScreen
argument_list|()
expr_stmt|;
name|tabbedPane
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|setForeground
argument_list|(
name|GUIGlobals
operator|.
name|INACTIVE_TABBED_COLOR
argument_list|)
expr_stmt|;
comment|/*          * The following state listener makes sure focus is registered with the          * correct database when the user switches tabs. Without this,          * cut/paste/copy operations would some times occur in the wrong tab.          */
name|tabbedPane
operator|.
name|addChangeListener
argument_list|(
name|e
lambda|->
block|{
name|markActiveBasePanel
argument_list|()
expr_stmt|;
name|BasePanel
name|bp
init|=
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|bp
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|groupToggle
operator|.
name|setSelected
argument_list|(
name|sidePaneManager
operator|.
name|isComponentVisible
argument_list|(
literal|"groups"
argument_list|)
argument_list|)
expr_stmt|;
name|previewToggle
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|PREVIEW_ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|fetcherToggle
operator|.
name|setSelected
argument_list|(
name|sidePaneManager
operator|.
name|isComponentVisible
argument_list|(
name|generalFetcher
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|getFocusListener
argument_list|()
operator|.
name|setFocused
argument_list|(
name|bp
operator|.
name|getMainTable
argument_list|()
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|()
expr_stmt|;
name|editModeAction
operator|.
name|initName
argument_list|()
expr_stmt|;
comment|// Update search autocompleter with information for the correct database:
name|bp
operator|.
name|updateSearchManager
argument_list|()
expr_stmt|;
comment|// Set correct enabled state for Back and Forward actions:
name|bp
operator|.
name|setBackAndForwardEnabledState
argument_list|()
expr_stmt|;
operator|new
name|FocusRequester
argument_list|(
name|bp
operator|.
name|getMainTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|//Note: The registration of Apple event is at the end of initialization, because
comment|//if the events happen too early (ie when the window is not initialized yet), the
comment|//opened (double-clicked) documents are not displayed.
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
try|try
block|{
operator|new
name|MacAdapter
argument_list|()
operator|.
name|registerMacEvents
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|fatal
argument_list|(
literal|"Could not interface with Mac OS X methods."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|positionWindowOnScreen ()
specifier|private
name|void
name|positionWindowOnScreen
parameter_list|()
block|{
if|if
condition|(
operator|!
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WINDOW_MAXIMISED
argument_list|)
condition|)
block|{
name|pw
operator|.
name|setWindowPosition
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|refreshTitleAndTabs ()
specifier|private
name|void
name|refreshTitleAndTabs
parameter_list|()
block|{
name|setWindowTitle
argument_list|()
expr_stmt|;
name|updateAllTabTitles
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the title of the main window.      */
DECL|method|setWindowTitle ()
specifier|public
name|void
name|setWindowTitle
parameter_list|()
block|{
name|BasePanel
name|panel
init|=
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
comment|// no database open
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
name|setTitle
argument_list|(
name|FRAME_TITLE
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|mode
init|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
operator|.
name|getFormattedName
argument_list|()
decl_stmt|;
name|String
name|modeInfo
init|=
name|String
operator|.
name|format
argument_list|(
literal|" (%s)"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"%0 mode"
argument_list|,
name|mode
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|changeFlag
init|=
name|panel
operator|.
name|isModified
argument_list|()
condition|?
literal|"*"
else|:
literal|""
decl_stmt|;
if|if
condition|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setTitle
argument_list|(
name|FRAME_TITLE
operator|+
literal|" - "
operator|+
name|GUIGlobals
operator|.
name|UNTITLED_TITLE
operator|+
name|changeFlag
operator|+
name|modeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|databaseFile
init|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|setTitle
argument_list|(
name|FRAME_TITLE
operator|+
literal|" - "
operator|+
name|databaseFile
operator|+
name|changeFlag
operator|+
name|modeInfo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initSidePane ()
specifier|private
name|void
name|initSidePane
parameter_list|()
block|{
name|sidePaneManager
operator|=
operator|new
name|SidePaneManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|groupSelector
operator|=
operator|new
name|GroupSelector
argument_list|(
name|this
argument_list|,
name|sidePaneManager
argument_list|)
expr_stmt|;
name|generalFetcher
operator|=
operator|new
name|GeneralFetcher
argument_list|(
name|sidePaneManager
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|register
argument_list|(
literal|"groups"
argument_list|,
name|groupSelector
argument_list|)
expr_stmt|;
block|}
comment|/**      * The MacAdapter calls this method when a ".bib" file has been double-clicked from the Finder.      */
DECL|method|openAction (String filePath)
specifier|public
name|void
name|openAction
parameter_list|(
name|String
name|filePath
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
comment|// all the logic is done in openIt. Even raising an existing panel
name|getOpenDatabaseAction
argument_list|()
operator|.
name|openFile
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// General info dialog.  The MacAdapter calls this method when "About"
comment|// is selected from the application menu.
DECL|method|about ()
specifier|public
name|void
name|about
parameter_list|()
block|{
comment|// reuse the normal about action
comment|// null as parameter is OK as the code of actionPerformed does not rely on the data sent in the event.
name|about
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// General preferences dialog.  The MacAdapter calls this method when "Preferences..."
comment|// is selected from the application menu.
DECL|method|showPreferencesDialog ()
specifier|public
name|void
name|showPreferencesDialog
parameter_list|()
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Opening preferences..."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefsDialog
operator|==
literal|null
condition|)
block|{
name|prefsDialog
operator|=
operator|new
name|PreferencesDialog
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
expr_stmt|;
name|prefsDialog
operator|.
name|setLocationRelativeTo
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefsDialog
operator|.
name|setValues
argument_list|()
expr_stmt|;
block|}
name|prefsDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|output
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|prefs ()
specifier|public
name|JabRefPreferences
name|prefs
parameter_list|()
block|{
return|return
name|prefs
return|;
block|}
comment|/**      * Tears down all things started by JabRef      *<p>      * FIXME: Currently some threads remain and therefore hinder JabRef to be closed properly      *      * @param filenames the filenames of all currently opened files - used for storing them if prefs openLastEdited is set to true      */
DECL|method|tearDownJabRef (List<String> filenames)
specifier|private
name|void
name|tearDownJabRef
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|filenames
parameter_list|)
block|{
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|shutdownEverything
argument_list|()
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|getCurrentBasePanel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getCurrentBasePanel
argument_list|()
operator|.
name|saveDividerLocation
argument_list|()
expr_stmt|;
block|}
comment|//prefs.putBoolean(JabRefPreferences.WINDOW_MAXIMISED, (getExtendedState()&MAXIMIZED_BOTH)>0);
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WINDOW_MAXIMISED
argument_list|,
name|getExtendedState
argument_list|()
operator|==
name|Frame
operator|.
name|MAXIMIZED_BOTH
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TOOLBAR_VISIBLE
argument_list|,
name|tlb
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// Store divider location for side pane:
name|int
name|width
init|=
name|splitPane
operator|.
name|getDividerLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|>
literal|0
condition|)
block|{
name|prefs
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|SIDE_PANE_WIDTH
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OPEN_LAST_EDITED
argument_list|)
condition|)
block|{
comment|// Here we store the names of all current files. If
comment|// there is no current file, we remove any
comment|// previously stored filename.
if|if
condition|(
name|filenames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prefs
operator|.
name|remove
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_EDITED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_EDITED
argument_list|,
name|filenames
argument_list|)
expr_stmt|;
name|File
name|focusedDatabase
init|=
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
decl_stmt|;
operator|new
name|LastFocusedTabPreferences
argument_list|(
name|prefs
argument_list|)
operator|.
name|setLastFocusedTab
argument_list|(
name|focusedDatabase
argument_list|)
expr_stmt|;
block|}
block|}
name|fileHistory
operator|.
name|storeHistory
argument_list|()
expr_stmt|;
name|prefs
operator|.
name|customExports
operator|.
name|store
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|customImports
operator|.
name|store
argument_list|()
expr_stmt|;
name|CustomEntryTypesManager
operator|.
name|saveCustomEntryTypes
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
comment|// Clear autosave files:
comment|// TODO: Is this really needed since clearAutoSave() is called in stopAutoSaveManager() a few rows below?
name|Globals
operator|.
name|getAutoSaveManager
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|manager
lambda|->
name|manager
operator|.
name|clearAutoSaves
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// dispose all windows, even if they are not displayed anymore
for|for
control|(
name|Window
name|window
range|:
name|Window
operator|.
name|getWindows
argument_list|()
control|)
block|{
name|window
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|// shutdown any timers that are may be active
name|Globals
operator|.
name|stopAutoSaveManager
argument_list|()
expr_stmt|;
block|}
comment|/**      * General info dialog.  The MacAdapter calls this method when "Quit"      * is selected from the application menu, Cmd-Q is pressed, or "Quit" is selected from the Dock.      * The function returns a boolean indicating if quitting is ok or not.      *<p>      * Non-OSX JabRef calls this when choosing "Quit" from the menu      *<p>      * SIDE EFFECT: tears down JabRef      *      * @return true if the user chose to quit; false otherwise      */
DECL|method|quit ()
specifier|public
name|boolean
name|quit
parameter_list|()
block|{
comment|// Ask here if the user really wants to close, if the base
comment|// has not been saved since last save.
name|boolean
name|close
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|filenames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|isModified
argument_list|()
condition|)
block|{
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|String
name|filename
decl_stmt|;
if|if
condition|(
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|filename
operator|=
name|GUIGlobals
operator|.
name|UNTITLED_TITLE
expr_stmt|;
block|}
else|else
block|{
name|filename
operator|=
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|int
name|answer
init|=
name|showSaveDialog
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CANCEL_OPTION
operator|)
operator|||
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CLOSED_OPTION
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|// The user wants to save.
try|try
block|{
comment|//getCurrentBasePanel().runCommand("save");
name|SaveDatabaseAction
name|saveAction
init|=
operator|new
name|SaveDatabaseAction
argument_list|(
name|getCurrentBasePanel
argument_list|()
argument_list|)
decl_stmt|;
name|saveAction
operator|.
name|runCommand
argument_list|()
expr_stmt|;
if|if
condition|(
name|saveAction
operator|.
name|isCanceled
argument_list|()
operator|||
operator|!
name|saveAction
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
comment|// The action was either canceled or unsuccessful.
comment|// Break!
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to save database"
argument_list|)
argument_list|)
expr_stmt|;
name|close
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// Something prevented the file
comment|// from being saved. Break!!!
name|close
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|filenames
operator|.
name|add
argument_list|(
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|close
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|isSaving
argument_list|()
condition|)
block|{
comment|// There is a database still being saved, so we need to wait.
name|WaitForSaveOperation
name|w
init|=
operator|new
name|WaitForSaveOperation
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
comment|// This method won't return until canceled or the save operation is done.
if|if
condition|(
name|w
operator|.
name|canceled
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
comment|// The user clicked cancel.
block|}
block|}
block|}
name|tearDownJabRef
argument_list|(
name|filenames
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|initLayout ()
specifier|private
name|void
name|initLayout
parameter_list|()
block|{
name|tabbedPane
operator|.
name|putClientProperty
argument_list|(
name|Options
operator|.
name|NO_CONTENT_BORDER_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|setProgressBarVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pushExternalButton
operator|=
operator|new
name|PushToApplicationButton
argument_list|(
name|this
argument_list|,
name|PushToApplications
operator|.
name|getApplications
argument_list|()
argument_list|)
expr_stmt|;
name|fillMenu
argument_list|()
expr_stmt|;
name|createToolBar
argument_list|()
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|setDividerSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//getContentPane().setBackground(GUIGlobals.lightGray);
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
comment|//gbl.setConstraints(mb, con);
comment|//getContentPane().add(mb);
name|setJMenuBar
argument_list|(
name|mb
argument_list|)
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|NORTH
expr_stmt|;
comment|//con.gridwidth = 1;//GridBagConstraints.REMAINDER;;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|tlb
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|tlb
argument_list|)
expr_stmt|;
name|Component
name|lim
init|=
name|Box
operator|.
name|createGlue
argument_list|()
decl_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lim
argument_list|,
name|con
argument_list|)
expr_stmt|;
comment|//getContentPane().add(lim);
comment|/*           JPanel empt = new JPanel();           empt.setBackground(GUIGlobals.lightGray);           gbl.setConstraints(empt, con);                getContentPane().add(empt);            con.insets = new Insets(1,0,1,1);           con.anchor = GridBagConstraints.EAST;           con.weightx = 0;           gbl.setConstraints(searchManager, con);           getContentPane().add(searchManager);*/
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|lim
operator|=
name|Box
operator|.
name|createGlue
argument_list|()
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|lim
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|lim
argument_list|)
expr_stmt|;
comment|//tabbedPane.setVisible(false);
comment|//tabbedPane.setForeground(GUIGlobals.lightGray);
name|con
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|splitPane
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|splitPane
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"TabbedPane.contentBorderInsets"
argument_list|,
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|setRightComponent
argument_list|(
name|tabbedPane
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|setLeftComponent
argument_list|(
name|sidePaneManager
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|updateView
argument_list|()
expr_stmt|;
name|JPanel
name|status
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|status
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|statusLabel
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|statusLabel
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|statusLine
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|statusLine
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|progressBar
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|progressBar
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|statusLabel
operator|.
name|setForeground
argument_list|(
name|GUIGlobals
operator|.
name|ENTRY_EDITOR_LABEL_COLOR
operator|.
name|darker
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|status
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// Drag and drop for tabbedPane:
name|TransferHandler
name|xfer
init|=
operator|new
name|EntryTableTransferHandler
argument_list|(
literal|null
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tabbedPane
operator|.
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|getPanel
argument_list|()
operator|.
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the indexed BasePanel.      *      * @param i Index of base      */
DECL|method|getBasePanelAt (int i)
specifier|public
name|BasePanel
name|getBasePanelAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/**      * Returns a list of BasePanel.      *      */
DECL|method|getBasePanelList ()
specifier|public
name|List
argument_list|<
name|BasePanel
argument_list|>
name|getBasePanelList
parameter_list|()
block|{
name|List
argument_list|<
name|BasePanel
argument_list|>
name|returnList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getBasePanelCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getBasePanelCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|returnList
operator|.
name|add
argument_list|(
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|returnList
return|;
block|}
DECL|method|showBasePanelAt (int i)
specifier|public
name|void
name|showBasePanelAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|showBasePanel (BasePanel bp)
specifier|public
name|void
name|showBasePanel
parameter_list|(
name|BasePanel
name|bp
parameter_list|)
block|{
name|tabbedPane
operator|.
name|setSelectedComponent
argument_list|(
name|bp
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the currently viewed BasePanel.      */
DECL|method|getCurrentBasePanel ()
specifier|public
name|BasePanel
name|getCurrentBasePanel
parameter_list|()
block|{
if|if
condition|(
name|tabbedPane
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
return|;
block|}
comment|/**      * @return the BasePanel count.      */
DECL|method|getBasePanelCount ()
specifier|public
name|int
name|getBasePanelCount
parameter_list|()
block|{
return|return
name|tabbedPane
operator|.
name|getComponentCount
argument_list|()
return|;
block|}
comment|/**      * handle the color of active and inactive JTabbedPane tabs      */
DECL|method|markActiveBasePanel ()
specifier|private
name|void
name|markActiveBasePanel
parameter_list|()
block|{
name|int
name|now
init|=
name|tabbedPane
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|lastTabbedPanelSelectionIndex
operator|>
operator|-
literal|1
operator|)
operator|&&
operator|(
name|lastTabbedPanelSelectionIndex
operator|<
name|len
operator|)
condition|)
block|{
name|tabbedPane
operator|.
name|setForegroundAt
argument_list|(
name|lastTabbedPanelSelectionIndex
argument_list|,
name|GUIGlobals
operator|.
name|INACTIVE_TABBED_COLOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|now
operator|>
operator|-
literal|1
operator|)
operator|&&
operator|(
name|now
operator|<
name|len
operator|)
condition|)
block|{
name|tabbedPane
operator|.
name|setForegroundAt
argument_list|(
name|now
argument_list|,
name|GUIGlobals
operator|.
name|ACTIVE_TABBED_COLOR
argument_list|)
expr_stmt|;
block|}
name|lastTabbedPanelSelectionIndex
operator|=
name|now
expr_stmt|;
block|}
DECL|method|getTabIndex (JComponent comp)
specifier|private
name|int
name|getTabIndex
parameter_list|(
name|JComponent
name|comp
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
name|i
argument_list|)
operator|==
name|comp
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|getTabbedPane ()
specifier|public
name|JTabbedPane
name|getTabbedPane
parameter_list|()
block|{
return|return
name|tabbedPane
return|;
block|}
DECL|method|setTabTitle (JComponent comp, String title, String toolTip)
specifier|public
name|void
name|setTabTitle
parameter_list|(
name|JComponent
name|comp
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|toolTip
parameter_list|)
block|{
name|int
name|index
init|=
name|getTabIndex
argument_list|(
name|comp
argument_list|)
decl_stmt|;
name|tabbedPane
operator|.
name|setTitleAt
argument_list|(
name|index
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|setToolTipTextAt
argument_list|(
name|index
argument_list|,
name|toolTip
argument_list|)
expr_stmt|;
block|}
DECL|method|enableToggle (Action a, boolean initialValue)
specifier|private
specifier|static
name|Action
name|enableToggle
parameter_list|(
name|Action
name|a
parameter_list|,
name|boolean
name|initialValue
parameter_list|)
block|{
comment|// toggle only works correctly when the SELECTED_KEY is set to false or true explicitly upon start
name|a
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|SELECTED_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|initialValue
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
DECL|method|enableToggle (Action a)
specifier|private
specifier|static
name|Action
name|enableToggle
parameter_list|(
name|Action
name|a
parameter_list|)
block|{
return|return
name|enableToggle
argument_list|(
name|a
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|class|GeneralAction
specifier|private
class|class
name|GeneralAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|command
specifier|private
specifier|final
name|String
name|command
decl_stmt|;
DECL|method|GeneralAction (String command, String text)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, String description)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, Icon icon)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|Icon
name|icon
parameter_list|)
block|{
name|super
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, String description, Icon icon)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|Icon
name|icon
parameter_list|)
block|{
name|super
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, KeyStroke key)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, String description, KeyStroke key)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (String command, String text, String description, KeyStroke key, Icon icon)
specifier|public
name|GeneralAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|KeyStroke
name|key
parameter_list|,
name|Icon
name|icon
parameter_list|)
block|{
name|super
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getSelectedComponent
argument_list|()
operator|)
operator|.
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Problem with executing command: "
operator|+
name|command
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Action '"
operator|+
name|command
operator|+
literal|"' must be disabled when no database is open."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|fillMenu ()
specifier|private
name|void
name|fillMenu
parameter_list|()
block|{
name|mb
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|JMenu
name|file
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"File"
argument_list|)
argument_list|)
decl_stmt|;
name|JMenu
name|edit
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Edit"
argument_list|)
argument_list|)
decl_stmt|;
name|JMenu
name|search
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Search"
argument_list|)
argument_list|)
decl_stmt|;
name|JMenu
name|groups
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Groups"
argument_list|)
argument_list|)
decl_stmt|;
name|JMenu
name|bibtex
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
literal|"&BibTeX"
argument_list|)
decl_stmt|;
name|JMenu
name|quality
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Quality"
argument_list|)
argument_list|)
decl_stmt|;
name|JMenu
name|view
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"View"
argument_list|)
argument_list|)
decl_stmt|;
name|JMenu
name|tools
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Tools"
argument_list|)
argument_list|)
decl_stmt|;
name|JMenu
name|options
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Options"
argument_list|)
argument_list|)
decl_stmt|;
name|JMenu
name|newSpec
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"New entry by type..."
argument_list|)
argument_list|)
decl_stmt|;
name|JMenu
name|helpMenu
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Help"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|add
argument_list|(
name|newBibtexDatabaseAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|newBiblatexDatabaseAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|getOpenDatabaseAction
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|mergeDatabaseAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|save
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|saveAs
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|saveAll
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|saveSelectedAs
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|saveSelectedAsPlain
argument_list|)
expr_stmt|;
name|file
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|importNew
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|importCurrent
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|exportAll
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|exportSelected
argument_list|)
expr_stmt|;
name|file
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|dbConnect
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|dbImport
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|dbExport
argument_list|)
expr_stmt|;
name|file
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|databaseProperties
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|editModeAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|fileHistory
argument_list|)
expr_stmt|;
name|file
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|closeDatabaseAction
argument_list|)
expr_stmt|;
name|file
operator|.
name|add
argument_list|(
name|quit
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|redo
argument_list|)
expr_stmt|;
name|edit
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|cut
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|paste
argument_list|)
expr_stmt|;
name|edit
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|copyKey
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|copyCiteKey
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|copyKeyAndTitle
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|exportToClipboard
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|sendAsEmail
argument_list|)
expr_stmt|;
name|edit
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|mark
argument_list|)
expr_stmt|;
name|JMenu
name|markSpecific
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Mark specific color"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|EntryMarker
operator|.
name|MAX_MARKING_LEVEL
condition|;
name|i
operator|++
control|)
block|{
name|markSpecific
operator|.
name|add
argument_list|(
operator|new
name|MarkEntriesAction
argument_list|(
name|this
argument_list|,
name|i
argument_list|)
operator|.
name|getMenuItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|edit
operator|.
name|add
argument_list|(
name|markSpecific
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|unmark
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|unmarkAll
argument_list|)
expr_stmt|;
name|edit
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SPECIALFIELDSENABLED
argument_list|)
condition|)
block|{
name|JMenu
name|m
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RANKING
argument_list|)
condition|)
block|{
name|m
operator|=
operator|new
name|JMenu
argument_list|()
expr_stmt|;
name|RightClickMenu
operator|.
name|populateSpecialFieldMenu
argument_list|(
name|m
argument_list|,
name|Rank
operator|.
name|getInstance
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RELEVANCE
argument_list|)
condition|)
block|{
name|edit
operator|.
name|add
argument_list|(
name|toggleRelevance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_QUALITY
argument_list|)
condition|)
block|{
name|edit
operator|.
name|add
argument_list|(
name|toggleQualityAssured
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRIORITY
argument_list|)
condition|)
block|{
name|m
operator|=
operator|new
name|JMenu
argument_list|()
expr_stmt|;
name|RightClickMenu
operator|.
name|populateSpecialFieldMenu
argument_list|(
name|m
argument_list|,
name|Priority
operator|.
name|getInstance
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRINTED
argument_list|)
condition|)
block|{
name|edit
operator|.
name|add
argument_list|(
name|togglePrinted
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_READ
argument_list|)
condition|)
block|{
name|m
operator|=
operator|new
name|JMenu
argument_list|()
expr_stmt|;
name|RightClickMenu
operator|.
name|populateSpecialFieldMenu
argument_list|(
name|m
argument_list|,
name|ReadStatus
operator|.
name|getInstance
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|edit
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
block|}
name|edit
operator|.
name|add
argument_list|(
name|getManageKeywords
argument_list|()
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|getMassSetField
argument_list|()
argument_list|)
expr_stmt|;
name|edit
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|selectAll
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|edit
argument_list|)
expr_stmt|;
name|search
operator|.
name|add
argument_list|(
name|normalSearch
argument_list|)
expr_stmt|;
name|search
operator|.
name|add
argument_list|(
name|replaceAll
argument_list|)
expr_stmt|;
name|search
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|search
operator|.
name|add
argument_list|(
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|generalFetcher
operator|.
name|getAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WEB_SEARCH_VISIBLE
argument_list|)
condition|)
block|{
name|sidePaneManager
operator|.
name|register
argument_list|(
name|generalFetcher
operator|.
name|getTitle
argument_list|()
argument_list|,
name|generalFetcher
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|show
argument_list|(
name|generalFetcher
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mb
operator|.
name|add
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|toggleGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|addToGroup
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|removeFromGroup
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|moveToGroup
argument_list|)
expr_stmt|;
name|groups
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|JRadioButtonMenuItem
name|toggleHighlightAnyItem
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|toggleHighlightAny
argument_list|)
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|toggleHighlightAnyItem
argument_list|)
expr_stmt|;
name|JRadioButtonMenuItem
name|toggleHighlightAllItem
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|toggleHighlightAll
argument_list|)
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|toggleHighlightAllItem
argument_list|)
expr_stmt|;
name|JRadioButtonMenuItem
name|toggleHighlightDisableItem
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|toggleHighlightDisable
argument_list|)
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|toggleHighlightDisableItem
argument_list|)
expr_stmt|;
name|ButtonGroup
name|highlightButtonGroup
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|highlightButtonGroup
operator|.
name|add
argument_list|(
name|toggleHighlightDisableItem
argument_list|)
expr_stmt|;
name|highlightButtonGroup
operator|.
name|add
argument_list|(
name|toggleHighlightAnyItem
argument_list|)
expr_stmt|;
name|highlightButtonGroup
operator|.
name|add
argument_list|(
name|toggleHighlightAllItem
argument_list|)
expr_stmt|;
name|HighlightMatchingGroupPreferences
name|highlightMatchingGroupPreferences
init|=
operator|new
name|HighlightMatchingGroupPreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
decl_stmt|;
if|if
condition|(
name|highlightMatchingGroupPreferences
operator|.
name|isAll
argument_list|()
condition|)
block|{
name|toggleHighlightAllItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|highlightMatchingGroupPreferences
operator|.
name|isAny
argument_list|()
condition|)
block|{
name|toggleHighlightAnyItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toggleHighlightDisableItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|mb
operator|.
name|add
argument_list|(
name|groups
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|getBackAction
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|getForwardAction
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|focusTable
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|nextTab
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|prevTab
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|sortTabs
argument_list|)
expr_stmt|;
name|view
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|increaseFontSize
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|decreseFontSize
argument_list|)
expr_stmt|;
name|view
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|toggleToolbar
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|enableToggle
argument_list|(
name|generalFetcher
operator|.
name|getAction
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|toggleGroups
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|togglePreview
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|add
argument_list|(
name|getSwitchPreviewAction
argument_list|()
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|newEntryAction
argument_list|)
expr_stmt|;
for|for
control|(
name|NewEntryAction
name|a
range|:
name|newSpecificEntryAction
control|)
block|{
name|newSpec
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|bibtex
operator|.
name|add
argument_list|(
name|newSpec
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|plainTextImport
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|editEntry
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|editPreamble
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|editStrings
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|customizeAction
argument_list|)
expr_stmt|;
name|bibtex
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|bibtex
operator|.
name|add
argument_list|(
name|deleteEntry
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|bibtex
argument_list|)
expr_stmt|;
name|quality
operator|.
name|add
argument_list|(
name|dupliCheck
argument_list|)
expr_stmt|;
name|quality
operator|.
name|add
argument_list|(
name|mergeEntries
argument_list|)
expr_stmt|;
name|quality
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|quality
operator|.
name|add
argument_list|(
name|resolveDuplicateKeys
argument_list|)
expr_stmt|;
name|quality
operator|.
name|add
argument_list|(
name|checkIntegrity
argument_list|)
expr_stmt|;
name|quality
operator|.
name|add
argument_list|(
name|cleanupEntries
argument_list|)
expr_stmt|;
name|quality
operator|.
name|add
argument_list|(
name|makeKeyAction
argument_list|)
expr_stmt|;
name|quality
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|quality
operator|.
name|add
argument_list|(
name|autoSetFile
argument_list|)
expr_stmt|;
name|quality
operator|.
name|add
argument_list|(
name|findUnlinkedFiles
argument_list|)
expr_stmt|;
name|quality
operator|.
name|add
argument_list|(
name|autoLinkFile
argument_list|)
expr_stmt|;
name|quality
operator|.
name|add
argument_list|(
name|downloadFullText
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|quality
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|newSubDatabaseAction
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|writeXmpAction
argument_list|)
expr_stmt|;
name|OpenOfficePanel
name|otp
init|=
name|OpenOfficePanel
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|otp
operator|.
name|init
argument_list|(
name|this
argument_list|,
name|sidePaneManager
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|otp
operator|.
name|getMenuItem
argument_list|()
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|pushExternalButton
operator|.
name|getMenuAction
argument_list|()
argument_list|)
expr_stmt|;
name|tools
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|openFolder
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|openFile
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|openUrl
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|openConsole
argument_list|)
expr_stmt|;
name|tools
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|abbreviateIso
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|abbreviateMedline
argument_list|)
expr_stmt|;
name|tools
operator|.
name|add
argument_list|(
name|unabbreviate
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|tools
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|showPrefs
argument_list|)
expr_stmt|;
name|AbstractAction
name|genFieldsCustomization
init|=
operator|new
name|GenFieldsCustomizationAction
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
name|genFieldsCustomization
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|customExpAction
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|customImpAction
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|customFileTypesAction
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|manageJournals
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|manageSelectors
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|selectKeys
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|openForumAction
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|errorConsole
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|forkMeOnGitHubAction
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|donationAction
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
operator|new
name|SearchForUpdateAction
argument_list|()
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|about
argument_list|)
expr_stmt|;
name|mb
operator|.
name|add
argument_list|(
name|helpMenu
argument_list|)
expr_stmt|;
name|createDisabledIconsForMenuEntries
argument_list|(
name|mb
argument_list|)
expr_stmt|;
block|}
DECL|method|subMenu (String name)
specifier|public
specifier|static
name|JMenu
name|subMenu
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|i
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|)
decl_stmt|;
name|JMenu
name|res
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|res
operator|=
operator|new
name|JMenu
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|mnemonic
init|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|res
operator|.
name|setMnemonic
argument_list|(
operator|(
name|int
operator|)
name|mnemonic
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
operator|new
name|JMenu
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|addParserResult (ParserResult pr, boolean raisePanel)
specifier|public
name|void
name|addParserResult
parameter_list|(
name|ParserResult
name|pr
parameter_list|,
name|boolean
name|raisePanel
parameter_list|)
block|{
if|if
condition|(
name|pr
operator|.
name|toOpenTab
argument_list|()
condition|)
block|{
comment|// Add the entries to the open tab.
name|BasePanel
name|panel
init|=
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
comment|// There is no open tab to add to, so we create a new tab:
name|addTab
argument_list|(
name|pr
operator|.
name|getDatabaseContext
argument_list|()
argument_list|,
name|raisePanel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|)
decl_stmt|;
name|addImportedEntries
argument_list|(
name|panel
argument_list|,
name|entries
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|addTab
argument_list|(
name|pr
operator|.
name|getDatabaseContext
argument_list|()
argument_list|,
name|raisePanel
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createToolBar ()
specifier|private
name|void
name|createToolBar
parameter_list|()
block|{
name|tlb
operator|.
name|putClientProperty
argument_list|(
name|Options
operator|.
name|HEADER_STYLE_KEY
argument_list|,
name|HeaderStyle
operator|.
name|BOTH
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setRollover
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setFloatable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|BIBLATEX_DEFAULT_MODE
argument_list|)
condition|)
block|{
name|tlb
operator|.
name|addAction
argument_list|(
name|newBiblatexDatabaseAction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tlb
operator|.
name|addAction
argument_list|(
name|newBibtexDatabaseAction
argument_list|)
expr_stmt|;
block|}
name|tlb
operator|.
name|addAction
argument_list|(
name|getOpenDatabaseAction
argument_list|()
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|save
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|saveAll
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|cut
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|paste
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|redo
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|getBackAction
argument_list|()
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|getForwardAction
argument_list|()
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|newEntryAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|editEntry
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|editStrings
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|deleteEntry
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|makeKeyAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|cleanupEntries
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|mergeEntries
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|openConsole
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|mark
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addAction
argument_list|(
name|unmark
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SPECIALFIELDSENABLED
argument_list|)
condition|)
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RANKING
argument_list|)
condition|)
block|{
name|JButton
name|button
init|=
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldDropDown
operator|.
name|generateSpecialFieldButtonWithDropDown
argument_list|(
name|Rank
operator|.
name|getInstance
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|specialFieldButtons
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RELEVANCE
argument_list|)
condition|)
block|{
name|tlb
operator|.
name|addAction
argument_list|(
name|toggleRelevance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_QUALITY
argument_list|)
condition|)
block|{
name|tlb
operator|.
name|addAction
argument_list|(
name|toggleQualityAssured
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRIORITY
argument_list|)
condition|)
block|{
name|JButton
name|button
init|=
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldDropDown
operator|.
name|generateSpecialFieldButtonWithDropDown
argument_list|(
name|Priority
operator|.
name|getInstance
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|specialFieldButtons
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRINTED
argument_list|)
condition|)
block|{
name|tlb
operator|.
name|addAction
argument_list|(
name|togglePrinted
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_READ
argument_list|)
condition|)
block|{
name|JButton
name|button
init|=
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldDropDown
operator|.
name|generateSpecialFieldButtonWithDropDown
argument_list|(
name|ReadStatus
operator|.
name|getInstance
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|specialFieldButtons
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
block|}
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|fetcherToggle
operator|=
operator|new
name|JToggleButton
argument_list|(
name|generalFetcher
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addJToogleButton
argument_list|(
name|fetcherToggle
argument_list|)
expr_stmt|;
name|previewToggle
operator|=
operator|new
name|JToggleButton
argument_list|(
name|togglePreview
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addJToogleButton
argument_list|(
name|previewToggle
argument_list|)
expr_stmt|;
name|groupToggle
operator|=
operator|new
name|JToggleButton
argument_list|(
name|toggleGroups
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addJToogleButton
argument_list|(
name|groupToggle
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|pushExternalButton
operator|.
name|getComponent
argument_list|()
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|donationAction
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|forkMeOnGitHubAction
argument_list|)
expr_stmt|;
block|}
comment|/**      * displays the String on the Status Line visible on the bottom of the JabRef mainframe      */
DECL|method|output (final String s)
specifier|public
name|void
name|output
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|statusLine
operator|.
name|setText
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|statusLine
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|initActions ()
specifier|private
name|void
name|initActions
parameter_list|()
block|{
name|openDatabaseOnlyActions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|openDatabaseOnlyActions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|manageSelectors
argument_list|,
name|mergeDatabaseAction
argument_list|,
name|newSubDatabaseAction
argument_list|,
name|save
argument_list|,
name|saveAs
argument_list|,
name|saveSelectedAs
argument_list|,
name|saveSelectedAsPlain
argument_list|,
name|undo
argument_list|,
name|redo
argument_list|,
name|cut
argument_list|,
name|deleteEntry
argument_list|,
name|copy
argument_list|,
name|paste
argument_list|,
name|mark
argument_list|,
name|unmark
argument_list|,
name|unmarkAll
argument_list|,
name|editEntry
argument_list|,
name|selectAll
argument_list|,
name|copyKey
argument_list|,
name|copyCiteKey
argument_list|,
name|copyKeyAndTitle
argument_list|,
name|editPreamble
argument_list|,
name|editStrings
argument_list|,
name|toggleGroups
argument_list|,
name|makeKeyAction
argument_list|,
name|normalSearch
argument_list|,
name|mergeEntries
argument_list|,
name|cleanupEntries
argument_list|,
name|exportToClipboard
argument_list|,
name|replaceAll
argument_list|,
name|sendAsEmail
argument_list|,
name|downloadFullText
argument_list|,
name|writeXmpAction
argument_list|,
name|findUnlinkedFiles
argument_list|,
name|addToGroup
argument_list|,
name|removeFromGroup
argument_list|,
name|moveToGroup
argument_list|,
name|autoLinkFile
argument_list|,
name|resolveDuplicateKeys
argument_list|,
name|openUrl
argument_list|,
name|openFolder
argument_list|,
name|openFile
argument_list|,
name|togglePreview
argument_list|,
name|dupliCheck
argument_list|,
name|autoSetFile
argument_list|,
name|newEntryAction
argument_list|,
name|plainTextImport
argument_list|,
name|getMassSetField
argument_list|()
argument_list|,
name|getManageKeywords
argument_list|()
argument_list|,
name|pushExternalButton
operator|.
name|getMenuAction
argument_list|()
argument_list|,
name|closeDatabaseAction
argument_list|,
name|getSwitchPreviewAction
argument_list|()
argument_list|,
name|checkIntegrity
argument_list|,
name|toggleHighlightAny
argument_list|,
name|toggleHighlightAll
argument_list|,
name|toggleHighlightDisable
argument_list|,
name|databaseProperties
argument_list|,
name|abbreviateIso
argument_list|,
name|abbreviateMedline
argument_list|,
name|unabbreviate
argument_list|,
name|exportAll
argument_list|,
name|exportSelected
argument_list|,
name|importCurrent
argument_list|,
name|saveAll
argument_list|,
name|dbConnect
argument_list|,
name|dbExport
argument_list|,
name|focusTable
argument_list|,
name|toggleRelevance
argument_list|,
name|toggleQualityAssured
argument_list|,
name|togglePrinted
argument_list|,
name|pushExternalButton
operator|.
name|getComponent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|openDatabaseOnlyActions
operator|.
name|addAll
argument_list|(
name|newSpecificEntryAction
argument_list|)
expr_stmt|;
name|openDatabaseOnlyActions
operator|.
name|addAll
argument_list|(
name|specialFieldButtons
argument_list|)
expr_stmt|;
name|severalDatabasesOnlyActions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|severalDatabasesOnlyActions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nextTab
argument_list|,
name|prevTab
argument_list|,
name|sortTabs
argument_list|)
argument_list|)
expr_stmt|;
name|openAndSavedDatabasesOnlyActions
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|openConsole
argument_list|)
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
name|updateEnabledState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Takes a list of Object and calls the method setEnabled on them, depending on whether it is an Action or a Component.      *      * @param list    List that should contain Actions and Components.      * @param enabled      */
DECL|method|setEnabled (List<Object> list, boolean enabled)
specifier|private
specifier|static
name|void
name|setEnabled
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|,
name|boolean
name|enabled
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Action
condition|)
block|{
operator|(
operator|(
name|Action
operator|)
name|o
operator|)
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Component
condition|)
block|{
operator|(
operator|(
name|Component
operator|)
name|o
operator|)
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Enable or Disable all actions based on the number of open tabs.      *<p>      * The action that are affected are set in initActions.      */
DECL|method|updateEnabledState ()
specifier|public
name|void
name|updateEnabledState
parameter_list|()
block|{
name|int
name|tabCount
init|=
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabCount
operator|!=
name|previousTabCount
condition|)
block|{
name|previousTabCount
operator|=
name|tabCount
expr_stmt|;
name|setEnabled
argument_list|(
name|openDatabaseOnlyActions
argument_list|,
name|tabCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|severalDatabasesOnlyActions
argument_list|,
name|tabCount
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tabCount
operator|==
literal|0
condition|)
block|{
name|getBackAction
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getForwardAction
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|openAndSavedDatabasesOnlyActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tabCount
operator|>
literal|0
condition|)
block|{
name|BasePanel
name|current
init|=
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|boolean
name|saved
init|=
name|current
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|!=
literal|null
decl_stmt|;
name|setEnabled
argument_list|(
name|openAndSavedDatabasesOnlyActions
argument_list|,
name|saved
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method causes all open BasePanels to set up their tables      * anew. When called from PrefsDialog3, this updates to the new      * settings.      */
DECL|method|setupAllTables ()
specifier|public
name|void
name|setupAllTables
parameter_list|()
block|{
comment|// This action can be invoked without an open database, so
comment|// we have to check if we have one before trying to invoke
comment|// methods to execute changes in the preferences.
comment|// We want to notify all tabs about the changes to
comment|// avoid problems when changing the column set.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BasePanel
name|bf
init|=
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Update tables:
if|if
condition|(
name|bf
operator|.
name|getDatabase
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bf
operator|.
name|setupMainPanel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|collectDatabaseFilePaths ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|collectDatabaseFilePaths
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getBasePanelCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|BasePanel
name|basePanel
range|:
name|getBasePanelList
argument_list|()
control|)
block|{
try|try
block|{
comment|// db file exists
if|if
condition|(
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dbPaths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dbPaths
operator|.
name|add
argument_list|(
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Invalid database file path: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dbPaths
return|;
block|}
DECL|method|getUniquePathParts ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getUniquePathParts
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbPaths
init|=
name|collectDatabaseFilePaths
argument_list|()
decl_stmt|;
return|return
name|FileUtil
operator|.
name|uniquePathSubstrings
argument_list|(
name|dbPaths
argument_list|)
return|;
block|}
DECL|method|updateAllTabTitles ()
specifier|public
name|void
name|updateAllTabTitles
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|getUniquePathParts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getBasePanelCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uniqPath
init|=
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|file
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|uniqPath
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// remove filename
name|uniqPath
operator|=
name|uniqPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uniqPath
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|setTitleAt
argument_list|(
name|i
argument_list|,
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getTabTitle
argument_list|()
operator|+
literal|" \u2014 "
operator|+
name|uniqPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|file
operator|!=
literal|null
operator|)
operator|&&
name|uniqPath
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// set original filename (again)
name|tabbedPane
operator|.
name|setTitleAt
argument_list|(
name|i
argument_list|,
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getTabTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tabbedPane
operator|.
name|setToolTipTextAt
argument_list|(
name|i
argument_list|,
name|file
operator|==
literal|null
condition|?
literal|null
else|:
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addTab (BasePanel bp, boolean raisePanel)
specifier|public
name|void
name|addTab
parameter_list|(
name|BasePanel
name|bp
parameter_list|,
name|boolean
name|raisePanel
parameter_list|)
block|{
comment|// add tab
name|tabbedPane
operator|.
name|add
argument_list|(
name|bp
operator|.
name|getTabTitle
argument_list|()
argument_list|,
name|bp
argument_list|)
expr_stmt|;
comment|// update all tab titles
name|updateAllTabTitles
argument_list|()
expr_stmt|;
if|if
condition|(
name|raisePanel
condition|)
block|{
name|tabbedPane
operator|.
name|setSelectedComponent
argument_list|(
name|bp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addTab (BibDatabaseContext databaseContext, boolean raisePanel)
specifier|public
name|BasePanel
name|addTab
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|boolean
name|raisePanel
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|databaseContext
argument_list|)
expr_stmt|;
name|BasePanel
name|bp
init|=
operator|new
name|BasePanel
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|,
name|databaseContext
argument_list|)
decl_stmt|;
name|addTab
argument_list|(
name|bp
argument_list|,
name|raisePanel
argument_list|)
expr_stmt|;
return|return
name|bp
return|;
block|}
comment|/**      * Creates icons for the disabled state for all JMenuItems with FontBasedIcons in the given menuElement.      * This is necessary as Swing is not able to generate default disabled icons for font based icons.      *      * @param menuElement the menuElement for which disabled icons should be generated      */
DECL|method|createDisabledIconsForMenuEntries (MenuElement menuElement)
specifier|public
name|void
name|createDisabledIconsForMenuEntries
parameter_list|(
name|MenuElement
name|menuElement
parameter_list|)
block|{
for|for
control|(
name|MenuElement
name|subElement
range|:
name|menuElement
operator|.
name|getSubElements
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|subElement
operator|instanceof
name|JMenu
operator|)
operator|||
operator|(
name|subElement
operator|instanceof
name|JPopupMenu
operator|)
condition|)
block|{
name|createDisabledIconsForMenuEntries
argument_list|(
name|subElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subElement
operator|instanceof
name|JMenuItem
condition|)
block|{
name|JMenuItem
name|item
init|=
operator|(
name|JMenuItem
operator|)
name|subElement
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getIcon
argument_list|()
operator|instanceof
name|IconTheme
operator|.
name|FontBasedIcon
condition|)
block|{
name|item
operator|.
name|setDisabledIcon
argument_list|(
operator|(
operator|(
name|IconTheme
operator|.
name|FontBasedIcon
operator|)
name|item
operator|.
name|getIcon
argument_list|()
operator|)
operator|.
name|createDisabledIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|SelectKeysAction
specifier|private
class|class
name|SelectKeysAction
extends|extends
name|AbstractAction
block|{
DECL|method|SelectKeysAction ()
specifier|public
name|SelectKeysAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Customize key bindings"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|SMALL_ICON
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|KEY_BINDINGS
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|KeyBindingsDialog
name|d
init|=
operator|new
name|KeyBindingsDialog
argument_list|(
operator|new
name|KeyBindingRepository
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKeyBindings
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|.
name|setDefaultCloseOperation
argument_list|(
name|WindowConstants
operator|.
name|DISPOSE_ON_CLOSE
argument_list|)
expr_stmt|;
name|d
operator|.
name|pack
argument_list|()
expr_stmt|;
comment|//setSize(300,500);
name|d
operator|.
name|setLocationRelativeTo
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
expr_stmt|;
name|d
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The action concerned with closing the window.      */
DECL|class|CloseAction
specifier|private
class|class
name|CloseAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|CloseAction ()
specifier|public
name|CloseAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Quit"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Quit JabRef"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|QUIT_JABREF
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|quit
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ShowPrefsAction
specifier|private
class|class
name|ShowPrefsAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|ShowPrefsAction ()
specifier|public
name|ShowPrefsAction
parameter_list|()
block|{
name|super
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|PREFERENCES
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Preferences"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Preferences"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|showPreferencesDialog
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This method does the job of adding imported entries into the active      * database, or into a new one. It shows the ImportInspectionDialog if      * preferences indicate it should be used. Otherwise it imports directly.      *      * @param panel     The BasePanel to add to.      * @param entries   The entries to add.      * @param openInNew Should the entries be imported into a new database?      */
DECL|method|addImportedEntries (final BasePanel panel, final List<BibEntry> entries, final boolean openInNew)
specifier|private
name|void
name|addImportedEntries
parameter_list|(
specifier|final
name|BasePanel
name|panel
parameter_list|,
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|,
specifier|final
name|boolean
name|openInNew
parameter_list|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|ImportInspectionDialog
name|diag
init|=
operator|new
name|ImportInspectionDialog
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|,
name|panel
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Import"
argument_list|)
argument_list|,
name|openInNew
argument_list|)
decl_stmt|;
name|diag
operator|.
name|addEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|diag
operator|.
name|entryListComplete
argument_list|()
expr_stmt|;
name|diag
operator|.
name|setLocationRelativeTo
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
expr_stmt|;
name|diag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|diag
operator|.
name|toFront
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileHistory ()
specifier|public
name|FileHistoryMenu
name|getFileHistory
parameter_list|()
block|{
return|return
name|fileHistory
return|;
block|}
DECL|method|removeCachedEntryEditors ()
specifier|public
name|void
name|removeCachedEntryEditors
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|BasePanel
name|bp
init|=
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getComponentAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|bp
operator|.
name|getEntryEditors
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This method shows a wait cursor and blocks all input to the JFrame's contents.      */
DECL|method|block ()
specifier|public
name|void
name|block
parameter_list|()
block|{
name|getGlassPane
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method reverts the cursor to normal, and stops blocking input to the JFrame's contents.      * There are no adverse effects of calling this method redundantly.      */
DECL|method|unblock ()
specifier|public
name|void
name|unblock
parameter_list|()
block|{
name|getGlassPane
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the visibility of the progress bar in the right end of the      * status line at the bottom of the frame.      *<p>      * If not called on the event dispatch thread, this method uses      * SwingUtilities.invokeLater() to do the actual operation on the EDT.      */
DECL|method|setProgressBarVisible (final boolean visible)
specifier|public
name|void
name|setProgressBarVisible
parameter_list|(
specifier|final
name|boolean
name|visible
parameter_list|)
block|{
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|progressBar
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|progressBar
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the current value of the progress bar.      *<p>      * If not called on the event dispatch thread, this method uses      * SwingUtilities.invokeLater() to do the actual operation on the EDT.      */
DECL|method|setProgressBarValue (final int value)
specifier|public
name|void
name|setProgressBarValue
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|progressBar
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|progressBar
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the indeterminate status of the progress bar.      *<p>      * If not called on the event dispatch thread, this method uses      * SwingUtilities.invokeLater() to do the actual operation on the EDT.      */
DECL|method|setProgressBarIndeterminate (final boolean value)
specifier|public
name|void
name|setProgressBarIndeterminate
parameter_list|(
specifier|final
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|progressBar
operator|.
name|setIndeterminate
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|progressBar
operator|.
name|setIndeterminate
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the maximum value of the progress bar. Always call this method      * before using the progress bar, to set a maximum value appropriate to      * the task at hand.      *<p>      * If not called on the event dispatch thread, this method uses      * SwingUtilities.invokeLater() to do the actual operation on the EDT.      */
DECL|method|setProgressBarMaximum (final int value)
specifier|public
name|void
name|setProgressBarMaximum
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|progressBar
operator|.
name|setMaximum
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|progressBar
operator|.
name|setMaximum
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ChangeTabAction
specifier|private
class|class
name|ChangeTabAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|next
specifier|private
specifier|final
name|boolean
name|next
decl_stmt|;
DECL|method|ChangeTabAction (boolean next)
specifier|public
name|ChangeTabAction
parameter_list|(
name|boolean
name|next
parameter_list|)
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|next
condition|?
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Next tab"
argument_list|)
else|:
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Previous tab"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|next
condition|?
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|NEXT_TAB
argument_list|)
else|:
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|PREVIOUS_TAB
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|i
init|=
name|tabbedPane
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|int
name|newI
init|=
name|next
condition|?
name|i
operator|+
literal|1
else|:
name|i
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|newI
operator|<
literal|0
condition|)
block|{
name|newI
operator|=
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|newI
operator|==
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|)
block|{
name|newI
operator|=
literal|0
expr_stmt|;
block|}
name|tabbedPane
operator|.
name|setSelectedIndex
argument_list|(
name|newI
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Class for handling general actions; cut, copy and paste. The focused component is      * kept track of by Globals.focusListener, and we call the action stored under the      * relevant name in its action map.      */
DECL|class|EditAction
specifier|private
class|class
name|EditAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|command
specifier|private
specifier|final
name|String
name|command
decl_stmt|;
DECL|method|EditAction (String command, String menuTitle, String description, KeyStroke key, Icon icon)
specifier|public
name|EditAction
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|menuTitle
parameter_list|,
name|String
name|description
parameter_list|,
name|KeyStroke
name|key
parameter_list|,
name|Icon
name|icon
parameter_list|)
block|{
name|super
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|menuTitle
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
DECL|method|actionPerformed (ActionEvent e)
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
name|Globals
operator|.
name|getFocusListener
argument_list|()
operator|.
name|getFocused
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JComponent
name|source
init|=
name|Globals
operator|.
name|getFocusListener
argument_list|()
operator|.
name|getFocused
argument_list|()
decl_stmt|;
name|Action
name|action
init|=
name|source
operator|.
name|getActionMap
argument_list|()
operator|.
name|get
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|CustomizeExportsAction
specifier|private
class|class
name|CustomizeExportsAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|CustomizeExportsAction ()
specifier|public
name|CustomizeExportsAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Manage custom exports"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|ExportCustomizationDialog
name|ecd
init|=
operator|new
name|ExportCustomizationDialog
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
decl_stmt|;
name|ecd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CustomizeImportsAction
specifier|private
class|class
name|CustomizeImportsAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|CustomizeImportsAction ()
specifier|public
name|CustomizeImportsAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Manage custom imports"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|ImportCustomizationDialog
name|ecd
init|=
operator|new
name|ImportCustomizationDialog
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
decl_stmt|;
name|ecd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CustomizeEntryTypeAction
specifier|private
class|class
name|CustomizeEntryTypeAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|CustomizeEntryTypeAction ()
specifier|public
name|CustomizeEntryTypeAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Customize entry types"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JDialog
name|dl
init|=
operator|new
name|EntryCustomizationDialog
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
decl_stmt|;
name|dl
operator|.
name|setLocationRelativeTo
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
expr_stmt|;
name|dl
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|GenFieldsCustomizationAction
specifier|private
class|class
name|GenFieldsCustomizationAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|GenFieldsCustomizationAction ()
specifier|public
name|GenFieldsCustomizationAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Set up general fields"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|GenFieldsCustomizer
name|gf
init|=
operator|new
name|GenFieldsCustomizer
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
decl_stmt|;
name|gf
operator|.
name|setLocationRelativeTo
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
expr_stmt|;
name|gf
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DatabasePropertiesAction
specifier|private
class|class
name|DatabasePropertiesAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|propertiesDialog
specifier|private
name|DatabasePropertiesDialog
name|propertiesDialog
decl_stmt|;
DECL|method|DatabasePropertiesAction ()
specifier|public
name|DatabasePropertiesAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Database properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|propertiesDialog
operator|==
literal|null
condition|)
block|{
name|propertiesDialog
operator|=
operator|new
name|DatabasePropertiesDialog
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
name|propertiesDialog
operator|.
name|setPanel
argument_list|(
name|getCurrentBasePanel
argument_list|()
argument_list|)
expr_stmt|;
name|propertiesDialog
operator|.
name|setLocationRelativeTo
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
expr_stmt|;
name|propertiesDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BibtexKeyPatternAction
specifier|private
class|class
name|BibtexKeyPatternAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|bibtexKeyPatternDialog
specifier|private
name|BibtexKeyPatternDialog
name|bibtexKeyPatternDialog
decl_stmt|;
DECL|method|BibtexKeyPatternAction ()
specifier|public
name|BibtexKeyPatternAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"BibTeX key patterns"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibtexKeyPatternDialog
operator|==
literal|null
condition|)
block|{
comment|// if no instance of BibtexKeyPatternDialog exists, create new one
name|bibtexKeyPatternDialog
operator|=
operator|new
name|BibtexKeyPatternDialog
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|,
name|getCurrentBasePanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// BibtexKeyPatternDialog allows for updating content based on currently selected panel
name|bibtexKeyPatternDialog
operator|.
name|setPanel
argument_list|(
name|getCurrentBasePanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bibtexKeyPatternDialog
operator|.
name|setLocationRelativeTo
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|)
expr_stmt|;
name|bibtexKeyPatternDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IncreaseTableFontSizeAction
specifier|private
class|class
name|IncreaseTableFontSizeAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|IncreaseTableFontSizeAction ()
specifier|public
name|IncreaseTableFontSizeAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Increase table font size"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|INCREASE_TABLE_FONT_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|int
name|currentSize
init|=
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|GUIGlobals
operator|.
name|currentFont
operator|=
operator|new
name|Font
argument_list|(
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getFamily
argument_list|()
argument_list|,
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getStyle
argument_list|()
argument_list|,
name|currentSize
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_SIZE
argument_list|,
name|currentSize
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|BasePanel
name|basePanel
range|:
name|getBasePanelList
argument_list|()
control|)
block|{
name|basePanel
operator|.
name|updateTableFont
argument_list|()
expr_stmt|;
block|}
name|setStatus
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Table font size is %0"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DecreaseTableFontSizeAction
specifier|private
class|class
name|DecreaseTableFontSizeAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|DecreaseTableFontSizeAction ()
specifier|public
name|DecreaseTableFontSizeAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Decrease table font size"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|DECREASE_TABLE_FONT_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|int
name|currentSize
init|=
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentSize
operator|<
literal|2
condition|)
block|{
return|return;
block|}
name|GUIGlobals
operator|.
name|currentFont
operator|=
operator|new
name|Font
argument_list|(
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getFamily
argument_list|()
argument_list|,
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getStyle
argument_list|()
argument_list|,
name|currentSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_SIZE
argument_list|,
name|currentSize
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|BasePanel
name|basePanel
range|:
name|getBasePanelList
argument_list|()
control|)
block|{
name|basePanel
operator|.
name|updateTableFont
argument_list|()
expr_stmt|;
block|}
name|setStatus
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Table font size is %0"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyGlassPane
specifier|private
specifier|static
class|class
name|MyGlassPane
extends|extends
name|JPanel
block|{
DECL|method|MyGlassPane ()
specifier|public
name|MyGlassPane
parameter_list|()
block|{
name|addKeyListener
argument_list|(
operator|new
name|KeyAdapter
argument_list|()
block|{
comment|// Nothing
block|}
argument_list|)
expr_stmt|;
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
comment|// Nothing
block|}
argument_list|)
expr_stmt|;
comment|/*  infoLabel.setForeground(new Color(255, 100, 100, 124));                setLayout(new BorderLayout());               add(infoLabel, BorderLayout.CENTER);*/
name|super
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|getPredefinedCursor
argument_list|(
name|Cursor
operator|.
name|WAIT_CURSOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Override isOpaque() to prevent the glasspane from hiding the window contents:
annotation|@
name|Override
DECL|method|isOpaque ()
specifier|public
name|boolean
name|isOpaque
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|showMessage (Object message, String title, int msgType)
specifier|public
name|void
name|showMessage
parameter_list|(
name|Object
name|message
parameter_list|,
name|String
name|title
parameter_list|,
name|int
name|msgType
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
argument_list|,
name|message
argument_list|,
name|title
argument_list|,
name|msgType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setStatus (String s)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|output
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|showMessage (String message)
specifier|public
name|void
name|showMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|showSaveDialog (String filename)
specifier|private
name|int
name|showSaveDialog
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|Object
index|[]
name|options
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save changes"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Discard changes"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Return to JabRef"
argument_list|)
block|}
decl_stmt|;
return|return
name|JOptionPane
operator|.
name|showOptionDialog
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Database '%0' has changed."
argument_list|,
name|filename
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save before closing"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_CANCEL_OPTION
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
name|options
index|[
literal|2
index|]
argument_list|)
return|;
block|}
DECL|method|closeTab (BasePanel panel)
specifier|private
name|void
name|closeTab
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
comment|// empty tab without database
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|panel
operator|.
name|isModified
argument_list|()
condition|)
block|{
if|if
condition|(
name|confirmClose
argument_list|(
name|panel
argument_list|)
condition|)
block|{
name|removeTab
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|removeTab
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Ask if the user really wants to close, if the base has not been saved
DECL|method|confirmClose (BasePanel panel)
specifier|private
name|boolean
name|confirmClose
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|boolean
name|close
init|=
literal|false
decl_stmt|;
name|String
name|filename
decl_stmt|;
if|if
condition|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|filename
operator|=
name|GUIGlobals
operator|.
name|UNTITLED_TITLE
expr_stmt|;
block|}
else|else
block|{
name|filename
operator|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|int
name|answer
init|=
name|showSaveDialog
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|// The user wants to save.
try|try
block|{
name|SaveDatabaseAction
name|saveAction
init|=
operator|new
name|SaveDatabaseAction
argument_list|(
name|panel
argument_list|)
decl_stmt|;
name|saveAction
operator|.
name|runCommand
argument_list|()
expr_stmt|;
if|if
condition|(
name|saveAction
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|close
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// do not close
block|}
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
block|{
comment|// discard changes
name|close
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|close
return|;
block|}
DECL|method|removeTab (BasePanel panel)
specifier|private
name|void
name|removeTab
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|panel
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|AutoSaveManager
operator|.
name|deleteAutoSaveFile
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|remove
argument_list|(
name|panel
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|markActiveBasePanel
argument_list|()
expr_stmt|;
block|}
name|setWindowTitle
argument_list|()
expr_stmt|;
name|updateEnabledState
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Closed database"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
comment|// update tab titles
name|updateAllTabTitles
argument_list|()
expr_stmt|;
block|}
DECL|method|getManageKeywords ()
specifier|public
name|ManageKeywordsAction
name|getManageKeywords
parameter_list|()
block|{
return|return
name|manageKeywords
return|;
block|}
DECL|method|getMassSetField ()
specifier|public
name|MassSetFieldAction
name|getMassSetField
parameter_list|()
block|{
return|return
name|massSetField
return|;
block|}
DECL|method|getOpenDatabaseAction ()
specifier|public
name|OpenDatabaseAction
name|getOpenDatabaseAction
parameter_list|()
block|{
return|return
name|open
return|;
block|}
DECL|class|CloseDatabaseAction
specifier|private
class|class
name|CloseDatabaseAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|method|CloseDatabaseAction ()
specifier|public
name|CloseDatabaseAction
parameter_list|()
block|{
name|super
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CLOSE
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Close database"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Close the current database"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_DATABASE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|closeTab
argument_list|(
name|getCurrentBasePanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CloseAllDatabasesAction
specifier|private
class|class
name|CloseAllDatabasesAction
extends|extends
name|MnemonicAwareAction
block|{
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|Component
index|[]
name|panels
init|=
name|tabbedPane
operator|.
name|getComponents
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|p
range|:
name|panels
control|)
block|{
name|closeTab
argument_list|(
operator|(
name|BasePanel
operator|)
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|CloseOtherDatabasesAction
specifier|private
class|class
name|CloseOtherDatabasesAction
extends|extends
name|MnemonicAwareAction
block|{
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|BasePanel
name|active
init|=
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
specifier|final
name|Component
index|[]
name|panels
init|=
name|tabbedPane
operator|.
name|getComponents
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|p
range|:
name|panels
control|)
block|{
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|p
argument_list|,
name|active
argument_list|)
condition|)
block|{
name|closeTab
argument_list|(
operator|(
name|BasePanel
operator|)
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|ToolBar
specifier|private
class|class
name|ToolBar
extends|extends
name|OSXCompatibleToolbar
block|{
DECL|method|addAction (Action a)
specifier|public
name|void
name|addAction
parameter_list|(
name|Action
name|a
parameter_list|)
block|{
name|JButton
name|b
init|=
operator|new
name|JButton
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|b
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|OS
operator|.
name|OS_X
condition|)
block|{
name|b
operator|.
name|setMargin
argument_list|(
name|marg
argument_list|)
expr_stmt|;
block|}
comment|// create a disabled Icon for FontBasedIcons as Swing does not automatically create one
name|Object
name|obj
init|=
name|a
operator|.
name|getValue
argument_list|(
name|Action
operator|.
name|LARGE_ICON_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|IconTheme
operator|.
name|FontBasedIcon
condition|)
block|{
name|b
operator|.
name|setDisabledIcon
argument_list|(
operator|(
operator|(
name|IconTheme
operator|.
name|FontBasedIcon
operator|)
name|obj
operator|)
operator|.
name|createDisabledIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|addJToogleButton (JToggleButton button)
specifier|public
name|void
name|addJToogleButton
parameter_list|(
name|JToggleButton
name|button
parameter_list|)
block|{
name|button
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|OS
operator|.
name|OS_X
condition|)
block|{
name|button
operator|.
name|setMargin
argument_list|(
name|marg
argument_list|)
expr_stmt|;
block|}
name|Object
name|obj
init|=
name|button
operator|.
name|getAction
argument_list|()
operator|.
name|getValue
argument_list|(
name|Action
operator|.
name|LARGE_ICON_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|IconTheme
operator|.
name|FontBasedIcon
condition|)
block|{
name|button
operator|.
name|setDisabledIcon
argument_list|(
operator|(
operator|(
name|IconTheme
operator|.
name|FontBasedIcon
operator|)
name|obj
operator|)
operator|.
name|createDisabledIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getStatusLineText ()
specifier|public
name|String
name|getStatusLineText
parameter_list|()
block|{
return|return
name|statusLine
operator|.
name|getText
argument_list|()
return|;
block|}
DECL|method|getForwardAction ()
specifier|public
name|AbstractAction
name|getForwardAction
parameter_list|()
block|{
return|return
name|forward
return|;
block|}
DECL|method|getBackAction ()
specifier|public
name|AbstractAction
name|getBackAction
parameter_list|()
block|{
return|return
name|back
return|;
block|}
DECL|method|getSwitchPreviewAction ()
specifier|public
name|AbstractAction
name|getSwitchPreviewAction
parameter_list|()
block|{
return|return
name|switchPreview
return|;
block|}
DECL|method|getSplitPane ()
specifier|public
name|JSplitPane
name|getSplitPane
parameter_list|()
block|{
return|return
name|splitPane
return|;
block|}
DECL|method|getSidePaneManager ()
specifier|public
name|SidePaneManager
name|getSidePaneManager
parameter_list|()
block|{
return|return
name|sidePaneManager
return|;
block|}
DECL|method|getGroupSelector ()
specifier|public
name|GroupSelector
name|getGroupSelector
parameter_list|()
block|{
return|return
name|groupSelector
return|;
block|}
DECL|method|setFetcherToggle (boolean enabled)
specifier|public
name|void
name|setFetcherToggle
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|fetcherToggle
operator|.
name|setSelected
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
DECL|method|setPreviewToggle (boolean enabled)
specifier|public
name|void
name|setPreviewToggle
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|previewToggle
operator|.
name|setSelected
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

