begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.  This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or  (at your option) any later version.   This program is distributed in the hope that it will be useful,  but WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  GNU General Public License for more details.   You should have received a copy of the GNU General Public License along  with this program; if not, write to the Free Software Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRef
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|DataFlavor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Transferable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|UnsupportedFlavorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|GroupTreeNodeViewModel
specifier|public
class|class
name|GroupTreeNodeViewModel
implements|implements
name|Transferable
implements|,
name|TreeNode
block|{
DECL|field|MAX_DISPLAYED_LETTERS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_DISPLAYED_LETTERS
init|=
literal|35
decl_stmt|;
DECL|field|GROUP_REFINING_ICON
specifier|private
specifier|static
specifier|final
name|Icon
name|GROUP_REFINING_ICON
init|=
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|GROUP_REFINING
operator|.
name|getSmallIcon
argument_list|()
decl_stmt|;
DECL|field|GROUP_INCLUDING_ICON
specifier|private
specifier|static
specifier|final
name|Icon
name|GROUP_INCLUDING_ICON
init|=
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|GROUP_INCLUDING
operator|.
name|getSmallIcon
argument_list|()
decl_stmt|;
DECL|field|GROUP_REGULAR_ICON
specifier|private
specifier|static
specifier|final
name|Icon
name|GROUP_REGULAR_ICON
init|=
literal|null
decl_stmt|;
DECL|field|FLAVOR
specifier|public
specifier|static
specifier|final
name|DataFlavor
name|FLAVOR
decl_stmt|;
DECL|field|FLAVORS
specifier|private
specifier|static
specifier|final
name|DataFlavor
index|[]
name|FLAVORS
decl_stmt|;
static|static
block|{
name|DataFlavor
name|df
init|=
literal|null
decl_stmt|;
try|try
block|{
name|df
operator|=
operator|new
name|DataFlavor
argument_list|(
name|DataFlavor
operator|.
name|javaJVMLocalObjectMimeType
operator|+
literal|";class=net.sf.jabref.logic.groups.GroupTreeNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// never happens
block|}
name|FLAVOR
operator|=
name|df
expr_stmt|;
name|FLAVORS
operator|=
operator|new
name|DataFlavor
index|[]
block|{
name|GroupTreeNodeViewModel
operator|.
name|FLAVOR
block|}
expr_stmt|;
block|}
DECL|field|node
specifier|private
specifier|final
name|GroupTreeNode
name|node
decl_stmt|;
DECL|method|GroupTreeNodeViewModel (GroupTreeNode node)
specifier|public
name|GroupTreeNodeViewModel
parameter_list|(
name|GroupTreeNode
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTransferDataFlavors ()
specifier|public
name|DataFlavor
index|[]
name|getTransferDataFlavors
parameter_list|()
block|{
return|return
name|GroupTreeNodeViewModel
operator|.
name|FLAVORS
return|;
block|}
annotation|@
name|Override
DECL|method|isDataFlavorSupported (DataFlavor someFlavor)
specifier|public
name|boolean
name|isDataFlavorSupported
parameter_list|(
name|DataFlavor
name|someFlavor
parameter_list|)
block|{
return|return
name|someFlavor
operator|.
name|equals
argument_list|(
name|GroupTreeNodeViewModel
operator|.
name|FLAVOR
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTransferData (DataFlavor someFlavor)
specifier|public
name|Object
name|getTransferData
parameter_list|(
name|DataFlavor
name|someFlavor
parameter_list|)
throws|throws
name|UnsupportedFlavorException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|isDataFlavorSupported
argument_list|(
name|someFlavor
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedFlavorException
argument_list|(
name|someFlavor
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getChildAt (int childIndex)
specifier|public
name|TreeNode
name|getChildAt
parameter_list|(
name|int
name|childIndex
parameter_list|)
block|{
return|return
operator|new
name|GroupTreeNodeViewModel
argument_list|(
name|node
operator|.
name|getChildAt
argument_list|(
name|childIndex
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChildCount ()
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|node
operator|.
name|getChildCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getParent ()
specifier|public
name|TreeNode
name|getParent
parameter_list|()
block|{
return|return
operator|new
name|GroupTreeNodeViewModel
argument_list|(
name|node
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getIndex (TreeNode child)
specifier|public
name|int
name|getIndex
parameter_list|(
name|TreeNode
name|child
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|child
operator|instanceof
name|GroupTreeNodeViewModel
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|GroupTreeNodeViewModel
name|childViewModel
init|=
operator|(
name|GroupTreeNodeViewModel
operator|)
name|child
decl_stmt|;
return|return
name|node
operator|.
name|getIndex
argument_list|(
name|childViewModel
operator|.
name|getNode
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllowsChildren ()
specifier|public
name|boolean
name|getAllowsChildren
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|isLeaf ()
specifier|public
name|boolean
name|isLeaf
parameter_list|()
block|{
return|return
name|node
operator|.
name|isLeaf
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|children ()
specifier|public
name|Enumeration
name|children
parameter_list|()
block|{
name|Iterable
argument_list|<
name|GroupTreeNode
argument_list|>
name|children
init|=
name|node
operator|.
name|children
argument_list|()
decl_stmt|;
return|return
operator|new
name|Enumeration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|children
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextElement
parameter_list|()
block|{
return|return
name|children
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|getNode ()
specifier|public
name|GroupTreeNode
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
comment|/** Collapse this node and all its children. */
DECL|method|collapseSubtree (JTree tree)
specifier|public
name|void
name|collapseSubtree
parameter_list|(
name|JTree
name|tree
parameter_list|)
block|{
name|tree
operator|.
name|collapsePath
argument_list|(
name|this
operator|.
name|getTreePath
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupTreeNodeViewModel
name|child
range|:
name|getChildren
argument_list|()
control|)
block|{
name|child
operator|.
name|collapseSubtree
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Expand this node and all its children. */
DECL|method|expandSubtree (JTree tree)
specifier|public
name|void
name|expandSubtree
parameter_list|(
name|JTree
name|tree
parameter_list|)
block|{
name|tree
operator|.
name|expandPath
argument_list|(
name|this
operator|.
name|getTreePath
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupTreeNodeViewModel
name|child
range|:
name|getChildren
argument_list|()
control|)
block|{
name|child
operator|.
name|collapseSubtree
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getChildren ()
specifier|public
name|List
argument_list|<
name|GroupTreeNodeViewModel
argument_list|>
name|getChildren
parameter_list|()
block|{
name|List
argument_list|<
name|GroupTreeNodeViewModel
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupTreeNode
name|child
range|:
name|node
operator|.
name|children
argument_list|()
control|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|new
name|GroupTreeNodeViewModel
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
DECL|method|printInItalics ()
name|boolean
name|printInItalics
parameter_list|()
block|{
return|return
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_SHOW_DYNAMIC
argument_list|)
operator|&&
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|isDynamic
argument_list|()
return|;
block|}
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
name|AbstractGroup
name|group
init|=
name|node
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|StringUtil
operator|.
name|limitStringLength
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|MAX_DISPLAYED_LETTERS
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|60
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_SHOW_NUMBER_OF_ELEMENTS
argument_list|)
condition|)
block|{
if|if
condition|(
name|group
operator|instanceof
name|ExplicitGroup
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" ["
argument_list|)
operator|.
name|append
argument_list|(
operator|(
operator|(
name|ExplicitGroup
operator|)
name|group
operator|)
operator|.
name|getNumEntries
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|group
operator|instanceof
name|KeywordGroup
operator|)
operator|||
operator|(
name|group
operator|instanceof
name|SearchGroup
operator|)
condition|)
block|{
name|int
name|hits
init|=
literal|0
decl_stmt|;
name|BasePanel
name|currentBasePanel
init|=
name|JabRef
operator|.
name|jrf
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentBasePanel
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|currentBasePanel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|group
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|hits
operator|++
expr_stmt|;
block|}
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" ["
argument_list|)
operator|.
name|append
argument_list|(
name|hits
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"<html>"
operator|+
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getShortDescription
argument_list|()
operator|+
literal|"</html>"
return|;
block|}
DECL|method|getIcon ()
specifier|public
name|Icon
name|getIcon
parameter_list|()
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_SHOW_ICONS
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getHierarchicalContext
argument_list|()
condition|)
block|{
case|case
name|REFINING
case|:
return|return
name|GROUP_REFINING_ICON
return|;
case|case
name|INCLUDING
case|:
return|return
name|GROUP_INCLUDING_ICON
return|;
default|default:
return|return
name|GROUP_REGULAR_ICON
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getTreePath ()
specifier|public
name|TreePath
name|getTreePath
parameter_list|()
block|{
name|List
argument_list|<
name|GroupTreeNode
argument_list|>
name|pathToNode
init|=
name|node
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
operator|new
name|TreePath
argument_list|(
name|pathToNode
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|node
lambda|->
operator|new
name|GroupTreeNodeViewModel
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

