begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|AbstractUndoableEdit
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|MoveGroupChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * @author jzieren  *  */
end_comment

begin_class
DECL|class|UndoableMoveGroup
class|class
name|UndoableMoveGroup
extends|extends
name|AbstractUndoableEdit
block|{
DECL|field|groupSelector
specifier|private
specifier|final
name|GroupSelector
name|groupSelector
decl_stmt|;
DECL|field|root
specifier|private
specifier|final
name|GroupTreeNodeViewModel
name|root
decl_stmt|;
DECL|field|pathToNewParent
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|pathToNewParent
decl_stmt|;
DECL|field|newChildIndex
specifier|private
specifier|final
name|int
name|newChildIndex
decl_stmt|;
DECL|field|pathToOldParent
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|pathToOldParent
decl_stmt|;
DECL|field|oldChildIndex
specifier|private
specifier|final
name|int
name|oldChildIndex
decl_stmt|;
DECL|method|UndoableMoveGroup (GroupSelector groupSelector, MoveGroupChange moveChange)
specifier|public
name|UndoableMoveGroup
parameter_list|(
name|GroupSelector
name|groupSelector
parameter_list|,
name|MoveGroupChange
name|moveChange
parameter_list|)
block|{
name|this
operator|.
name|groupSelector
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|groupSelector
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|moveChange
argument_list|)
expr_stmt|;
name|root
operator|=
name|groupSelector
operator|.
name|getGroupTreeRoot
argument_list|()
expr_stmt|;
name|pathToOldParent
operator|=
name|moveChange
operator|.
name|getOldParent
argument_list|()
operator|.
name|getIndexedPathFromRoot
argument_list|()
expr_stmt|;
name|pathToNewParent
operator|=
name|moveChange
operator|.
name|getNewParent
argument_list|()
operator|.
name|getIndexedPathFromRoot
argument_list|()
expr_stmt|;
name|oldChildIndex
operator|=
name|moveChange
operator|.
name|getOldChildIndex
argument_list|()
expr_stmt|;
name|newChildIndex
operator|=
name|moveChange
operator|.
name|getNewChildIndex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUndoPresentationName ()
specifier|public
name|String
name|getUndoPresentationName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Undo"
argument_list|)
operator|+
literal|": "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"move group"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRedoPresentationName ()
specifier|public
name|String
name|getRedoPresentationName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Redo"
argument_list|)
operator|+
literal|": "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"move group"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|undo ()
specifier|public
name|void
name|undo
parameter_list|()
block|{
name|super
operator|.
name|undo
argument_list|()
expr_stmt|;
name|GroupTreeNode
name|newParent
init|=
name|root
operator|.
name|getNode
argument_list|()
operator|.
name|getDescendant
argument_list|(
name|pathToNewParent
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|//TODO: NULL
name|GroupTreeNode
name|node
init|=
name|newParent
operator|.
name|getChildAt
argument_list|(
name|newChildIndex
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|//TODO: Null
comment|//TODO: NULL
name|node
operator|.
name|moveTo
argument_list|(
name|root
operator|.
name|getNode
argument_list|()
operator|.
name|getDescendant
argument_list|(
name|pathToOldParent
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|oldChildIndex
argument_list|)
expr_stmt|;
name|groupSelector
operator|.
name|revalidateGroups
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|redo ()
specifier|public
name|void
name|redo
parameter_list|()
block|{
name|super
operator|.
name|redo
argument_list|()
expr_stmt|;
name|GroupTreeNode
name|oldParent
init|=
name|root
operator|.
name|getNode
argument_list|()
operator|.
name|getDescendant
argument_list|(
name|pathToOldParent
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|//TODO: NULL
name|GroupTreeNode
name|node
init|=
name|oldParent
operator|.
name|getChildAt
argument_list|(
name|oldChildIndex
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|//TODO:Null
comment|//TODO: NULL
name|node
operator|.
name|moveTo
argument_list|(
name|root
operator|.
name|getNode
argument_list|()
operator|.
name|getDescendant
argument_list|(
name|pathToNewParent
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|newChildIndex
argument_list|)
expr_stmt|;
name|groupSelector
operator|.
name|revalidateGroups
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

