begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.groups
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBoxMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButtonMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|TitledBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|PopupMenuEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|PopupMenuListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultTreeModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|AbstractUndoableEdit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CompoundEdit
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|SidePaneComponent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|SidePaneManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|MainTableDataModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|AbstractWorker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|AbstractGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|AllEntriesGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|EntriesGroupChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|MoveGroupChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|help
operator|.
name|HelpFile
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchMatcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|matchers
operator|.
name|MatcherSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|matchers
operator|.
name|MatcherSets
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|matchers
operator|.
name|NotMatcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * The whole UI component holding the groups tree and the buttons  */
end_comment

begin_class
DECL|class|GroupSelector
specifier|public
class|class
name|GroupSelector
extends|extends
name|SidePaneComponent
implements|implements
name|TreeSelectionListener
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GroupSelector
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|groupsTree
specifier|private
specifier|final
name|GroupsTree
name|groupsTree
decl_stmt|;
DECL|field|groupsTreeModel
specifier|private
name|DefaultTreeModel
name|groupsTreeModel
decl_stmt|;
DECL|field|groupsRoot
specifier|private
name|GroupTreeNodeViewModel
name|groupsRoot
decl_stmt|;
DECL|field|frame
specifier|protected
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|groupsContextMenu
specifier|private
specifier|final
name|JPopupMenu
name|groupsContextMenu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|JPopupMenu
name|settings
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|hideNonHits
specifier|private
specifier|final
name|JRadioButtonMenuItem
name|hideNonHits
decl_stmt|;
DECL|field|grayOut
specifier|private
specifier|final
name|JRadioButtonMenuItem
name|grayOut
decl_stmt|;
DECL|field|andCb
specifier|private
specifier|final
name|JRadioButtonMenuItem
name|andCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Intersection"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|floatCb
specifier|private
specifier|final
name|JRadioButtonMenuItem
name|floatCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Float"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|invCb
specifier|private
specifier|final
name|JCheckBoxMenuItem
name|invCb
init|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Inverted"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|showOverlappingGroups
specifier|private
specifier|final
name|JCheckBoxMenuItem
name|showOverlappingGroups
init|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Highlight overlapping groups"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|showNumberOfElements
specifier|private
specifier|final
name|JCheckBoxMenuItem
name|showNumberOfElements
init|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show number of elements contained in each group"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|autoAssignGroup
specifier|private
specifier|final
name|JCheckBoxMenuItem
name|autoAssignGroup
init|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Automatically assign new entry to selected groups"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|editModeCb
specifier|private
specifier|final
name|JCheckBoxMenuItem
name|editModeCb
init|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Edit group membership"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|editModeIndicator
specifier|private
name|boolean
name|editModeIndicator
decl_stmt|;
DECL|field|MOVE_ONE_GROUP
specifier|private
specifier|static
specifier|final
name|String
name|MOVE_ONE_GROUP
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please select exactly one group to move."
argument_list|)
decl_stmt|;
DECL|field|moveSubmenu
specifier|private
specifier|final
name|JMenu
name|moveSubmenu
init|=
operator|new
name|JMenu
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|sortSubmenu
specifier|private
specifier|final
name|JMenu
name|sortSubmenu
init|=
operator|new
name|JMenu
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Sort alphabetically"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|editGroupAction
specifier|private
specifier|final
name|AbstractAction
name|editGroupAction
init|=
operator|new
name|EditGroupAction
argument_list|()
decl_stmt|;
DECL|field|editGroupPopupAction
specifier|private
specifier|final
name|NodeAction
name|editGroupPopupAction
init|=
operator|new
name|EditGroupAction
argument_list|()
decl_stmt|;
DECL|field|addGroupPopupAction
specifier|private
specifier|final
name|NodeAction
name|addGroupPopupAction
init|=
operator|new
name|AddGroupAction
argument_list|()
decl_stmt|;
DECL|field|addSubgroupPopupAction
specifier|private
specifier|final
name|NodeAction
name|addSubgroupPopupAction
init|=
operator|new
name|AddSubgroupAction
argument_list|()
decl_stmt|;
DECL|field|removeGroupAndSubgroupsPopupAction
specifier|private
specifier|final
name|NodeAction
name|removeGroupAndSubgroupsPopupAction
init|=
operator|new
name|RemoveGroupAndSubgroupsAction
argument_list|()
decl_stmt|;
DECL|field|removeSubgroupsPopupAction
specifier|private
specifier|final
name|NodeAction
name|removeSubgroupsPopupAction
init|=
operator|new
name|RemoveSubgroupsAction
argument_list|()
decl_stmt|;
DECL|field|removeGroupKeepSubgroupsPopupAction
specifier|private
specifier|final
name|NodeAction
name|removeGroupKeepSubgroupsPopupAction
init|=
operator|new
name|RemoveGroupKeepSubgroupsAction
argument_list|()
decl_stmt|;
DECL|field|moveNodeUpPopupAction
specifier|private
specifier|final
name|NodeAction
name|moveNodeUpPopupAction
init|=
operator|new
name|MoveNodeUpAction
argument_list|()
decl_stmt|;
DECL|field|moveNodeDownPopupAction
specifier|private
specifier|final
name|NodeAction
name|moveNodeDownPopupAction
init|=
operator|new
name|MoveNodeDownAction
argument_list|()
decl_stmt|;
DECL|field|moveNodeLeftPopupAction
specifier|private
specifier|final
name|NodeAction
name|moveNodeLeftPopupAction
init|=
operator|new
name|MoveNodeLeftAction
argument_list|()
decl_stmt|;
DECL|field|moveNodeRightPopupAction
specifier|private
specifier|final
name|NodeAction
name|moveNodeRightPopupAction
init|=
operator|new
name|MoveNodeRightAction
argument_list|()
decl_stmt|;
DECL|field|expandSubtreePopupAction
specifier|private
specifier|final
name|NodeAction
name|expandSubtreePopupAction
init|=
operator|new
name|ExpandSubtreeAction
argument_list|()
decl_stmt|;
DECL|field|collapseSubtreePopupAction
specifier|private
specifier|final
name|NodeAction
name|collapseSubtreePopupAction
init|=
operator|new
name|CollapseSubtreeAction
argument_list|()
decl_stmt|;
DECL|field|sortDirectSubgroupsPopupAction
specifier|private
specifier|final
name|NodeAction
name|sortDirectSubgroupsPopupAction
init|=
operator|new
name|SortDirectSubgroupsAction
argument_list|()
decl_stmt|;
DECL|field|sortAllSubgroupsPopupAction
specifier|private
specifier|final
name|NodeAction
name|sortAllSubgroupsPopupAction
init|=
operator|new
name|SortAllSubgroupsAction
argument_list|()
decl_stmt|;
DECL|field|addToGroup
specifier|private
specifier|final
name|AddToGroupAction
name|addToGroup
init|=
operator|new
name|AddToGroupAction
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|moveToGroup
specifier|private
specifier|final
name|AddToGroupAction
name|moveToGroup
init|=
operator|new
name|AddToGroupAction
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|removeFromGroup
specifier|private
specifier|final
name|RemoveFromGroupAction
name|removeFromGroup
init|=
operator|new
name|RemoveFromGroupAction
argument_list|()
decl_stmt|;
comment|/**      * The first element for each group defines which field to use for the quicksearch. The next two define the name and      * regexp for the group.      */
DECL|method|GroupSelector (JabRefFrame frame, SidePaneManager manager)
specifier|public
name|GroupSelector
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|SidePaneManager
name|manager
parameter_list|)
block|{
name|super
argument_list|(
name|manager
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|TOGGLE_GROUPS
operator|.
name|getIcon
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Groups"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|hideNonHits
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Hide non-hits"
argument_list|)
argument_list|,
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GRAY_OUT_NON_HITS
argument_list|)
argument_list|)
expr_stmt|;
name|grayOut
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Gray out non-hits"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GRAY_OUT_NON_HITS
argument_list|)
argument_list|)
expr_stmt|;
name|ButtonGroup
name|nonHits
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|nonHits
operator|.
name|add
argument_list|(
name|hideNonHits
argument_list|)
expr_stmt|;
name|nonHits
operator|.
name|add
argument_list|(
name|grayOut
argument_list|)
expr_stmt|;
name|floatCb
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_FLOAT_SELECTIONS
argument_list|,
name|floatCb
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_INTERSECT_SELECTIONS
argument_list|,
name|andCb
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|invCb
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_INVERT_SELECTIONS
argument_list|,
name|invCb
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|showOverlappingGroups
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_SHOW_OVERLAPPING
argument_list|,
name|showOverlappingGroups
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|showOverlappingGroups
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|groupsTree
operator|.
name|setOverlappingGroups
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|grayOut
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GRAY_OUT_NON_HITS
argument_list|,
name|grayOut
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|JRadioButtonMenuItem
name|highlCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Highlight"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_FLOAT_SELECTIONS
argument_list|)
condition|)
block|{
name|floatCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|highlCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|highlCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|floatCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|JRadioButtonMenuItem
name|orCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Union"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_INTERSECT_SELECTIONS
argument_list|)
condition|)
block|{
name|andCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|orCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|orCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|showNumberOfElements
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_SHOW_NUMBER_OF_ELEMENTS
argument_list|,
name|showNumberOfElements
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupsTree
operator|!=
literal|null
condition|)
block|{
name|groupsTree
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|groupsTree
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|autoAssignGroup
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_ASSIGN_GROUP
argument_list|,
name|autoAssignGroup
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|invCb
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_INVERT_SELECTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|showOverlappingGroups
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_SHOW_OVERLAPPING
argument_list|)
argument_list|)
expr_stmt|;
name|editModeIndicator
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EDIT_GROUP_MEMBERSHIP_MODE
argument_list|)
expr_stmt|;
name|editModeCb
operator|.
name|setSelected
argument_list|(
name|editModeIndicator
argument_list|)
expr_stmt|;
name|showNumberOfElements
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_SHOW_NUMBER_OF_ELEMENTS
argument_list|)
argument_list|)
expr_stmt|;
name|autoAssignGroup
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_ASSIGN_GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|JButton
name|openSettings
init|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|PREFERENCES
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|andCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|orCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|invCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|editModeCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|grayOut
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|hideNonHits
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|showOverlappingGroups
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|showNumberOfElements
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|autoAssignGroup
argument_list|)
expr_stmt|;
name|openSettings
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
operator|!
name|settings
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|JButton
name|src
init|=
operator|(
name|JButton
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|showNumberOfElements
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_SHOW_NUMBER_OF_ELEMENTS
argument_list|)
argument_list|)
expr_stmt|;
name|autoAssignGroup
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_ASSIGN_GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|show
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|openSettings
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|editModeCb
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|setEditMode
argument_list|(
name|editModeCb
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|JButton
name|newButton
init|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|ADD_NOBOX
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|butSize
init|=
name|newButton
operator|.
name|getIcon
argument_list|()
operator|.
name|getIconHeight
argument_list|()
operator|+
literal|5
decl_stmt|;
name|Dimension
name|butDim
init|=
operator|new
name|Dimension
argument_list|(
name|butSize
argument_list|,
name|butSize
argument_list|)
decl_stmt|;
name|newButton
operator|.
name|setPreferredSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|newButton
operator|.
name|setMinimumSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|JButton
name|helpButton
init|=
operator|new
name|HelpAction
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Help on groups"
argument_list|)
argument_list|,
name|HelpFile
operator|.
name|GROUP
argument_list|)
operator|.
name|getHelpButton
argument_list|()
decl_stmt|;
name|helpButton
operator|.
name|setPreferredSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|helpButton
operator|.
name|setMinimumSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|JButton
name|autoGroup
init|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|AUTO_GROUP
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
name|autoGroup
operator|.
name|setPreferredSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|autoGroup
operator|.
name|setMinimumSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|openSettings
operator|.
name|setPreferredSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|openSettings
operator|.
name|setMinimumSize
argument_list|(
name|butDim
argument_list|)
expr_stmt|;
name|Insets
name|butIns
init|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|helpButton
operator|.
name|setMargin
argument_list|(
name|butIns
argument_list|)
expr_stmt|;
name|openSettings
operator|.
name|setMargin
argument_list|(
name|butIns
argument_list|)
expr_stmt|;
name|newButton
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|GroupDialog
name|gd
init|=
operator|new
name|GroupDialog
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|gd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|gd
operator|.
name|okPressed
argument_list|()
condition|)
block|{
name|AbstractGroup
name|newGroup
init|=
name|gd
operator|.
name|getResultingGroup
argument_list|()
decl_stmt|;
name|groupsRoot
operator|.
name|addNewGroup
argument_list|(
name|newGroup
argument_list|,
name|panel
operator|.
name|getUndoManager
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Created group \"%0\"."
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|orCb
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|invCb
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|showOverlappingGroups
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|autoGroup
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|AutoGroupDialog
name|gd
init|=
operator|new
name|AutoGroupDialog
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|groupsRoot
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|GROUPS_DEFAULT_FIELD
argument_list|)
argument_list|,
literal|" .,"
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|KEYWORD_SEPARATOR
argument_list|)
argument_list|)
decl_stmt|;
name|gd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// gd does the operation itself
block|}
argument_list|)
expr_stmt|;
name|floatCb
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|highlCb
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|hideNonHits
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|grayOut
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newButton
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"New group"
argument_list|)
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Display only entries belonging to all selected groups."
argument_list|)
argument_list|)
expr_stmt|;
name|orCb
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Display all entries belonging to one or more of the selected groups."
argument_list|)
argument_list|)
expr_stmt|;
name|autoGroup
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Automatically create groups for database."
argument_list|)
argument_list|)
expr_stmt|;
name|openSettings
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Settings"
argument_list|)
argument_list|)
expr_stmt|;
name|invCb
operator|.
name|setToolTipText
argument_list|(
literal|"<html>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show entries<b>not</b> in group selection"
argument_list|)
operator|+
literal|"</html>"
argument_list|)
expr_stmt|;
name|showOverlappingGroups
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Highlight groups that contain entries contained in any currently selected group"
argument_list|)
argument_list|)
expr_stmt|;
name|floatCb
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move entries in group selection to the top"
argument_list|)
argument_list|)
expr_stmt|;
name|highlCb
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Gray out entries not in group selection"
argument_list|)
argument_list|)
expr_stmt|;
name|editModeCb
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Click group to toggle membership of selected entries"
argument_list|)
argument_list|)
expr_stmt|;
name|ButtonGroup
name|bgr
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|bgr
operator|.
name|add
argument_list|(
name|andCb
argument_list|)
expr_stmt|;
name|bgr
operator|.
name|add
argument_list|(
name|orCb
argument_list|)
expr_stmt|;
name|ButtonGroup
name|visMode
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|visMode
operator|.
name|add
argument_list|(
name|floatCb
argument_list|)
expr_stmt|;
name|visMode
operator|.
name|add
argument_list|(
name|highlCb
argument_list|)
expr_stmt|;
name|JPanel
name|rootPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|rootPanel
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|newButton
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|rootPanel
operator|.
name|add
argument_list|(
name|newButton
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridx
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|autoGroup
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|rootPanel
operator|.
name|add
argument_list|(
name|autoGroup
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridx
operator|=
literal|2
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|openSettings
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|rootPanel
operator|.
name|add
argument_list|(
name|openSettings
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridx
operator|=
literal|3
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|helpButton
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|rootPanel
operator|.
name|add
argument_list|(
name|helpButton
argument_list|)
expr_stmt|;
name|groupsTree
operator|=
operator|new
name|GroupsTree
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|addTreeSelectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|JScrollPane
name|groupsTreePane
init|=
operator|new
name|JScrollPane
argument_list|(
name|groupsTree
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_AS_NEEDED
argument_list|)
decl_stmt|;
name|groupsTreePane
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|4
expr_stmt|;
name|con
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|groupsTreePane
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|rootPanel
operator|.
name|add
argument_list|(
name|groupsTreePane
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|rootPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|setEditMode
argument_list|(
name|editModeIndicator
argument_list|)
expr_stmt|;
name|definePopup
argument_list|()
expr_stmt|;
name|NodeAction
name|moveNodeUpAction
init|=
operator|new
name|MoveNodeUpAction
argument_list|()
decl_stmt|;
name|moveNodeUpAction
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_UP
argument_list|,
name|KeyEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAction
name|moveNodeDownAction
init|=
operator|new
name|MoveNodeDownAction
argument_list|()
decl_stmt|;
name|moveNodeDownAction
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_DOWN
argument_list|,
name|KeyEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAction
name|moveNodeLeftAction
init|=
operator|new
name|MoveNodeLeftAction
argument_list|()
decl_stmt|;
name|moveNodeLeftAction
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_LEFT
argument_list|,
name|KeyEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|)
expr_stmt|;
name|NodeAction
name|moveNodeRightAction
init|=
operator|new
name|MoveNodeRightAction
argument_list|()
decl_stmt|;
name|moveNodeRightAction
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_RIGHT
argument_list|,
name|KeyEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|)
expr_stmt|;
name|setGroups
argument_list|(
name|GroupTreeNode
operator|.
name|fromGroup
argument_list|(
operator|new
name|AllEntriesGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|definePopup ()
specifier|private
name|void
name|definePopup
parameter_list|()
block|{
comment|// These key bindings are just to have the shortcuts displayed
comment|// in the popup menu. The actual keystroke processing is in
comment|// BasePanel (entryTable.addKeyListener(...)).
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|editGroupPopupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|addGroupPopupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|addSubgroupPopupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|removeGroupAndSubgroupsPopupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|removeGroupKeepSubgroupsPopupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|removeSubgroupsPopupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|expandSubtreePopupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|collapseSubtreePopupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|moveSubmenu
argument_list|)
expr_stmt|;
name|sortSubmenu
operator|.
name|add
argument_list|(
name|sortDirectSubgroupsPopupAction
argument_list|)
expr_stmt|;
name|sortSubmenu
operator|.
name|add
argument_list|(
name|sortAllSubgroupsPopupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|sortSubmenu
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|add
argument_list|(
name|moveNodeUpPopupAction
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|add
argument_list|(
name|moveNodeDownPopupAction
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|add
argument_list|(
name|moveNodeLeftPopupAction
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|add
argument_list|(
name|moveNodeRightPopupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|addToGroup
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|moveToGroup
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|removeFromGroup
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|showPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|showPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|TreePath
name|path
init|=
name|groupsTree
operator|.
name|getPathForLocation
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|x
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|GroupTreeNodeViewModel
name|node
init|=
operator|(
name|GroupTreeNodeViewModel
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
comment|// the root node is "AllEntries" and cannot be edited
if|if
condition|(
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
operator|)
operator|&&
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON1
operator|)
condition|)
block|{
comment|// edit
name|editGroupAction
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// dummy event
block|}
elseif|else
if|if
condition|(
operator|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON1
operator|)
condition|)
block|{
name|annotationEvent
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// be sure to remove a possible border highlight when the popup menu
comment|// disappears
name|groupsContextMenu
operator|.
name|addPopupMenuListener
argument_list|(
operator|new
name|PopupMenuListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|popupMenuWillBecomeVisible
parameter_list|(
name|PopupMenuEvent
name|e
parameter_list|)
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|popupMenuWillBecomeInvisible
parameter_list|(
name|PopupMenuEvent
name|e
parameter_list|)
block|{
name|groupsTree
operator|.
name|setHighlightBorderCell
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|popupMenuCanceled
parameter_list|(
name|PopupMenuEvent
name|e
parameter_list|)
block|{
name|groupsTree
operator|.
name|setHighlightBorderCell
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|showPopup (MouseEvent e)
specifier|private
name|void
name|showPopup
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
specifier|final
name|TreePath
name|path
init|=
name|groupsTree
operator|.
name|getPathForLocation
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|x
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|y
argument_list|)
decl_stmt|;
name|addGroupPopupAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addSubgroupPopupAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|editGroupPopupAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|removeGroupAndSubgroupsPopupAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|removeGroupKeepSubgroupsPopupAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|expandSubtreePopupAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|collapseSubtreePopupAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|removeSubgroupsPopupAction
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|sortSubmenu
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|addToGroup
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|moveToGroup
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|removeFromGroup
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
comment|// some path dependent enabling/disabling
name|GroupTreeNodeViewModel
name|node
init|=
operator|(
name|GroupTreeNodeViewModel
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|editGroupPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|addSubgroupPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|removeGroupAndSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|removeSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|removeGroupKeepSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|expandSubtreePopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|collapseSubtreePopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|sortDirectSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|sortAllSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|setHighlightBorderCell
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|canBeEdited
argument_list|()
condition|)
block|{
name|editGroupPopupAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addGroupPopupAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|removeGroupAndSubgroupsPopupAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|removeGroupKeepSubgroupsPopupAction
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editGroupPopupAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addGroupPopupAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addGroupPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|removeGroupAndSubgroupsPopupAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|removeGroupKeepSubgroupsPopupAction
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|expandSubtreePopupAction
operator|.
name|setEnabled
argument_list|(
name|groupsTree
operator|.
name|isCollapsed
argument_list|(
name|path
argument_list|)
operator|||
name|groupsTree
operator|.
name|hasCollapsedDescendant
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|collapseSubtreePopupAction
operator|.
name|setEnabled
argument_list|(
name|groupsTree
operator|.
name|isExpanded
argument_list|(
name|path
argument_list|)
operator|||
name|groupsTree
operator|.
name|hasExpandedDescendant
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|sortSubmenu
operator|.
name|setEnabled
argument_list|(
operator|!
name|node
operator|.
name|isLeaf
argument_list|()
argument_list|)
expr_stmt|;
name|removeSubgroupsPopupAction
operator|.
name|setEnabled
argument_list|(
operator|!
name|node
operator|.
name|isLeaf
argument_list|()
argument_list|)
expr_stmt|;
name|moveNodeUpPopupAction
operator|.
name|setEnabled
argument_list|(
name|node
operator|.
name|canMoveUp
argument_list|()
argument_list|)
expr_stmt|;
name|moveNodeDownPopupAction
operator|.
name|setEnabled
argument_list|(
name|node
operator|.
name|canMoveDown
argument_list|()
argument_list|)
expr_stmt|;
name|moveNodeLeftPopupAction
operator|.
name|setEnabled
argument_list|(
name|node
operator|.
name|canMoveLeft
argument_list|()
argument_list|)
expr_stmt|;
name|moveNodeRightPopupAction
operator|.
name|setEnabled
argument_list|(
name|node
operator|.
name|canMoveRight
argument_list|()
argument_list|)
expr_stmt|;
name|moveSubmenu
operator|.
name|setEnabled
argument_list|(
name|moveNodeUpPopupAction
operator|.
name|isEnabled
argument_list|()
operator|||
name|moveNodeDownPopupAction
operator|.
name|isEnabled
argument_list|()
operator|||
name|moveNodeLeftPopupAction
operator|.
name|isEnabled
argument_list|()
operator|||
name|moveNodeRightPopupAction
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|moveNodeUpPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|moveNodeDownPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|moveNodeLeftPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|moveNodeRightPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// add/remove entries to/from group
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selection
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|selection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|canAddEntries
argument_list|(
name|selection
argument_list|)
condition|)
block|{
name|addToGroup
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|addToGroup
operator|.
name|setBasePanel
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|addToGroup
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|moveToGroup
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|moveToGroup
operator|.
name|setBasePanel
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|moveToGroup
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|canRemoveEntries
argument_list|(
name|selection
argument_list|)
condition|)
block|{
name|removeFromGroup
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|removeFromGroup
operator|.
name|setBasePanel
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|removeFromGroup
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|editGroupPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|addGroupPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|addSubgroupPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|removeGroupAndSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|removeSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|removeGroupKeepSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|moveNodeUpPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|moveNodeDownPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|moveNodeLeftPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|moveNodeRightPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expandSubtreePopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|collapseSubtreePopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sortDirectSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sortAllSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|groupsContextMenu
operator|.
name|show
argument_list|(
name|groupsTree
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|x
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
DECL|method|setEditMode (boolean editMode)
specifier|private
name|void
name|setEditMode
parameter_list|(
name|boolean
name|editMode
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EDIT_GROUP_MEMBERSHIP_MODE
argument_list|,
name|editModeIndicator
argument_list|)
expr_stmt|;
name|editModeIndicator
operator|=
name|editMode
expr_stmt|;
if|if
condition|(
name|editMode
condition|)
block|{
name|groupsTree
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createMatteBorder
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|Color
operator|.
name|RED
argument_list|)
argument_list|,
literal|"Edit mode"
argument_list|,
name|TitledBorder
operator|.
name|RIGHT
argument_list|,
name|TitledBorder
operator|.
name|TOP
argument_list|,
name|Font
operator|.
name|getFont
argument_list|(
literal|"Default"
argument_list|)
argument_list|,
name|Color
operator|.
name|RED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTitle
argument_list|(
literal|"<html><font color='red'>Groups Edit mode</font></html>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupsTree
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTitle
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Groups"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|groupsTree
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|groupsTree
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
DECL|method|annotationEvent (GroupTreeNodeViewModel node)
specifier|private
name|void
name|annotationEvent
parameter_list|(
name|GroupTreeNodeViewModel
name|node
parameter_list|)
block|{
if|if
condition|(
name|editModeIndicator
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Performing annotation "
operator|+
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|panel
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|node
operator|.
name|changeEntriesTo
argument_list|(
name|entries
argument_list|,
name|panel
operator|.
name|getUndoManager
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|panel
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
name|updateShownEntriesAccordingToSelectedGroups
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|valueChanged (TreeSelectionEvent e)
specifier|public
name|void
name|valueChanged
parameter_list|(
name|TreeSelectionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
return|return;
comment|// ignore this event (happens for example if the file was closed)
block|}
if|if
condition|(
name|getLeafsOfSelection
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|GroupTreeNodeViewModel
operator|::
name|isAllEntriesGroup
argument_list|)
condition|)
block|{
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|getTableModel
argument_list|()
operator|.
name|updateGroupingState
argument_list|(
name|MainTableDataModel
operator|.
name|DisplayOption
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|showOverlappingGroups
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|groupsTree
operator|.
name|setOverlappingGroups
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Displaying no groups"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|editModeIndicator
condition|)
block|{
name|updateShownEntriesAccordingToSelectedGroups
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateShownEntriesAccordingToSelectedGroups ()
specifier|private
name|void
name|updateShownEntriesAccordingToSelectedGroups
parameter_list|()
block|{
specifier|final
name|MatcherSet
name|searchRules
init|=
name|MatcherSets
operator|.
name|build
argument_list|(
name|andCb
operator|.
name|isSelected
argument_list|()
condition|?
name|MatcherSets
operator|.
name|MatcherType
operator|.
name|AND
else|:
name|MatcherSets
operator|.
name|MatcherType
operator|.
name|OR
argument_list|)
decl_stmt|;
for|for
control|(
name|GroupTreeNodeViewModel
name|node
range|:
name|getLeafsOfSelection
argument_list|()
control|)
block|{
name|SearchMatcher
name|searchRule
init|=
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|getSearchRule
argument_list|()
decl_stmt|;
name|searchRules
operator|.
name|addRule
argument_list|(
name|searchRule
argument_list|)
expr_stmt|;
block|}
name|SearchMatcher
name|searchRule
init|=
name|invCb
operator|.
name|isSelected
argument_list|()
condition|?
operator|new
name|NotMatcher
argument_list|(
name|searchRules
argument_list|)
else|:
name|searchRules
decl_stmt|;
name|GroupingWorker
name|worker
init|=
operator|new
name|GroupingWorker
argument_list|(
name|searchRule
argument_list|)
decl_stmt|;
name|worker
operator|.
name|getWorker
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
name|worker
operator|.
name|getCallBack
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|getLeafsOfSelection ()
specifier|private
name|List
argument_list|<
name|GroupTreeNodeViewModel
argument_list|>
name|getLeafsOfSelection
parameter_list|()
block|{
name|TreePath
index|[]
name|selection
init|=
name|groupsTree
operator|.
name|getSelectionPaths
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|selection
operator|==
literal|null
operator|)
operator|||
operator|(
name|selection
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|List
argument_list|<
name|GroupTreeNodeViewModel
argument_list|>
name|selectedLeafs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|selection
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|TreePath
name|path
range|:
name|selection
control|)
block|{
name|selectedLeafs
operator|.
name|add
argument_list|(
operator|(
name|GroupTreeNodeViewModel
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|selectedLeafs
return|;
block|}
DECL|method|getFirstSelectedNode ()
specifier|private
name|GroupTreeNodeViewModel
name|getFirstSelectedNode
parameter_list|()
block|{
name|TreePath
name|path
init|=
name|groupsTree
operator|.
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|GroupTreeNodeViewModel
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|class|GroupingWorker
class|class
name|GroupingWorker
extends|extends
name|AbstractWorker
block|{
DECL|field|matcher
specifier|private
specifier|final
name|SearchMatcher
name|matcher
decl_stmt|;
DECL|field|matches
specifier|private
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|matches
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|showOverlappingGroupsP
specifier|private
specifier|final
name|boolean
name|showOverlappingGroupsP
decl_stmt|;
DECL|method|GroupingWorker (SearchMatcher matcher)
specifier|public
name|GroupingWorker
parameter_list|(
name|SearchMatcher
name|matcher
parameter_list|)
block|{
name|this
operator|.
name|matcher
operator|=
name|matcher
expr_stmt|;
name|showOverlappingGroupsP
operator|=
name|showOverlappingGroups
operator|.
name|isSelected
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|boolean
name|hit
init|=
name|matcher
operator|.
name|isMatch
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setGroupHit
argument_list|(
name|hit
argument_list|)
expr_stmt|;
if|if
condition|(
name|hit
operator|&&
name|showOverlappingGroupsP
condition|)
block|{
name|matches
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
comment|// Show the result in the chosen way:
if|if
condition|(
name|hideNonHits
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|getTableModel
argument_list|()
operator|.
name|updateGroupingState
argument_list|(
name|MainTableDataModel
operator|.
name|DisplayOption
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|grayOut
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|getTableModel
argument_list|()
operator|.
name|updateGroupingState
argument_list|(
name|MainTableDataModel
operator|.
name|DisplayOption
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|getTableModel
argument_list|()
operator|.
name|updateSortOrder
argument_list|()
expr_stmt|;
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|getTableModel
argument_list|()
operator|.
name|updateGroupFilter
argument_list|()
expr_stmt|;
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|scrollTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|showOverlappingGroupsP
condition|)
block|{
name|showOverlappingGroups
argument_list|(
name|matches
argument_list|)
expr_stmt|;
block|}
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Updated group selection"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Revalidate the groups tree (e.g. after the data stored in the model has been changed) and maintain the current      * selection and expansion state.      */
DECL|method|revalidateGroups ()
specifier|public
name|void
name|revalidateGroups
parameter_list|()
block|{
name|revalidateGroups
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Revalidate the groups tree (e.g. after the data stored in the model has been changed) and maintain the current      * selection and expansion state.      *      * @param node If this is non-null, the view is scrolled to make it visible.      */
DECL|method|revalidateGroups (GroupTreeNodeViewModel node)
specifier|private
name|void
name|revalidateGroups
parameter_list|(
name|GroupTreeNodeViewModel
name|node
parameter_list|)
block|{
name|revalidateGroups
argument_list|(
name|groupsTree
operator|.
name|getSelectionPaths
argument_list|()
argument_list|,
name|getExpandedPaths
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**      * Revalidate the groups tree (e.g. after the data stored in the model has been changed) and set the specified      * selection and expansion state.      */
DECL|method|revalidateGroups (TreePath[] selectionPaths, Enumeration<TreePath> expandedNodes)
specifier|public
name|void
name|revalidateGroups
parameter_list|(
name|TreePath
index|[]
name|selectionPaths
parameter_list|,
name|Enumeration
argument_list|<
name|TreePath
argument_list|>
name|expandedNodes
parameter_list|)
block|{
name|revalidateGroups
argument_list|(
name|selectionPaths
argument_list|,
name|expandedNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Revalidate the groups tree (e.g. after the data stored in the model has been changed) and set the specified      * selection and expansion state.      *      * @param node If this is non-null, the view is scrolled to make it visible.      */
DECL|method|revalidateGroups (TreePath[] selectionPaths, Enumeration<TreePath> expandedNodes, GroupTreeNodeViewModel node)
specifier|private
name|void
name|revalidateGroups
parameter_list|(
name|TreePath
index|[]
name|selectionPaths
parameter_list|,
name|Enumeration
argument_list|<
name|TreePath
argument_list|>
name|expandedNodes
parameter_list|,
name|GroupTreeNodeViewModel
name|node
parameter_list|)
block|{
name|groupsTree
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
if|if
condition|(
name|selectionPaths
operator|!=
literal|null
condition|)
block|{
name|groupsTree
operator|.
name|setSelectionPaths
argument_list|(
name|selectionPaths
argument_list|)
expr_stmt|;
block|}
comment|// tree is completely collapsed here
if|if
condition|(
name|expandedNodes
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|expandedNodes
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|groupsTree
operator|.
name|expandPath
argument_list|(
name|expandedNodes
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|groupsTree
operator|.
name|revalidate
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|groupsTree
operator|.
name|scrollPathToVisible
argument_list|(
name|node
operator|.
name|getTreePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|componentOpening ()
specifier|public
name|void
name|componentOpening
parameter_list|()
block|{
name|valueChanged
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRescalingWeight ()
specifier|public
name|int
name|getRescalingWeight
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|componentClosing ()
specifier|public
name|void
name|componentClosing
parameter_list|()
block|{
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
block|{
comment|// panel may be null if no file is open any more
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|getTableModel
argument_list|()
operator|.
name|updateGroupingState
argument_list|(
name|MainTableDataModel
operator|.
name|DisplayOption
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
block|}
name|frame
operator|.
name|groupToggle
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|setGroups (GroupTreeNode groupsRoot)
specifier|private
name|void
name|setGroups
parameter_list|(
name|GroupTreeNode
name|groupsRoot
parameter_list|)
block|{
name|this
operator|.
name|groupsRoot
operator|=
operator|new
name|GroupTreeNodeViewModel
argument_list|(
name|groupsRoot
argument_list|)
expr_stmt|;
name|groupsTreeModel
operator|=
operator|new
name|DefaultTreeModel
argument_list|(
name|this
operator|.
name|groupsRoot
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupsRoot
operator|.
name|subscribeToDescendantChanged
argument_list|(
name|groupsTreeModel
operator|::
name|nodeStructureChanged
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|setModel
argument_list|(
name|groupsTreeModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_EXPAND_TREE
argument_list|)
condition|)
block|{
name|this
operator|.
name|groupsRoot
operator|.
name|expandSubtree
argument_list|(
name|groupsTree
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds the specified node as a child of the current root. The group contained in<b>newGroups</b> must not be of      * type AllEntriesGroup, since every tree has exactly one AllEntriesGroup (its root). The<b>newGroups</b> are      * inserted directly, i.e. they are not deepCopy()'d.      */
DECL|method|addGroups (GroupTreeNode newGroups, CompoundEdit ce)
specifier|public
name|void
name|addGroups
parameter_list|(
name|GroupTreeNode
name|newGroups
parameter_list|,
name|CompoundEdit
name|ce
parameter_list|)
block|{
comment|// TODO: This shouldn't be a method of GroupSelector
comment|// paranoia: ensure that there are never two instances of AllEntriesGroup
if|if
condition|(
name|newGroups
operator|.
name|getGroup
argument_list|()
operator|instanceof
name|AllEntriesGroup
condition|)
block|{
return|return;
comment|// this should be impossible anyway
block|}
name|newGroups
operator|.
name|moveTo
argument_list|(
name|groupsRoot
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|groupsRoot
argument_list|,
operator|new
name|GroupTreeNodeViewModel
argument_list|(
name|newGroups
argument_list|)
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|ADD_NODE
argument_list|)
decl_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
block|}
DECL|class|NodeAction
specifier|private
specifier|abstract
class|class
name|NodeAction
extends|extends
name|AbstractAction
block|{
DECL|field|node
specifier|private
name|GroupTreeNodeViewModel
name|node
decl_stmt|;
DECL|method|NodeAction (String s)
specifier|public
name|NodeAction
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setNode (GroupTreeNodeViewModel node)
specifier|public
name|void
name|setNode
parameter_list|(
name|GroupTreeNodeViewModel
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
comment|/**          * Returns the node to use in this action. If a node has been set explicitly (via setNode), it is returned.          * Otherwise, the first node in the current selection is returned. If all this fails, null is returned.          */
DECL|method|getNodeToUse ()
specifier|public
name|GroupTreeNodeViewModel
name|getNodeToUse
parameter_list|()
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|node
return|;
block|}
return|return
name|getFirstSelectedNode
argument_list|()
return|;
block|}
block|}
DECL|class|EditGroupAction
specifier|private
class|class
name|EditGroupAction
extends|extends
name|NodeAction
block|{
DECL|method|EditGroupAction ()
specifier|public
name|EditGroupAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Edit group"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
specifier|final
name|AbstractGroup
name|oldGroup
init|=
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|getGroup
argument_list|()
decl_stmt|;
specifier|final
name|GroupDialog
name|gd
init|=
operator|new
name|GroupDialog
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|oldGroup
argument_list|)
decl_stmt|;
name|gd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|gd
operator|.
name|okPressed
argument_list|()
condition|)
block|{
name|AbstractGroup
name|newGroup
init|=
name|gd
operator|.
name|getResultingGroup
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Assign the original group's entries to this group?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Change of Grouping Method"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
decl_stmt|;
name|boolean
name|keepPreviousAssignments
init|=
name|i
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
operator|&&
name|WarnAssignmentSideEffects
operator|.
name|warnAssignmentSideEffects
argument_list|(
name|newGroup
argument_list|,
name|panel
operator|.
name|frame
argument_list|()
argument_list|)
decl_stmt|;
name|AbstractUndoableEdit
name|undoAddPreviousEntries
init|=
literal|null
decl_stmt|;
name|UndoableModifyGroup
name|undo
init|=
operator|new
name|UndoableModifyGroup
argument_list|(
name|GroupSelector
operator|.
name|this
argument_list|,
name|groupsRoot
argument_list|,
name|node
argument_list|,
name|newGroup
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|EntriesGroupChange
argument_list|>
name|addChange
init|=
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|setGroup
argument_list|(
name|newGroup
argument_list|,
name|keepPreviousAssignments
argument_list|,
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|addChange
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|undoAddPreviousEntries
operator|=
name|UndoableChangeEntriesOfGroup
operator|.
name|getUndoableEdit
argument_list|(
literal|null
argument_list|,
name|addChange
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|groupsTreeModel
operator|.
name|reload
argument_list|()
expr_stmt|;
name|revalidateGroups
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// Store undo information.
if|if
condition|(
name|undoAddPreviousEntries
operator|==
literal|null
condition|)
block|{
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NamedCompound
name|nc
init|=
operator|new
name|NamedCompound
argument_list|(
literal|"Modify Group"
argument_list|)
decl_stmt|;
name|nc
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|nc
operator|.
name|addEdit
argument_list|(
name|undoAddPreviousEntries
argument_list|)
expr_stmt|;
name|nc
operator|.
name|end
argument_list|()
expr_stmt|;
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Modified group \"%0\"."
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|AddGroupAction
specifier|private
class|class
name|AddGroupAction
extends|extends
name|NodeAction
block|{
DECL|method|AddGroupAction ()
specifier|public
name|AddGroupAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Add group"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupDialog
name|gd
init|=
operator|new
name|GroupDialog
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|gd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|gd
operator|.
name|okPressed
argument_list|()
condition|)
block|{
return|return;
comment|// ignore
block|}
specifier|final
name|AbstractGroup
name|newGroup
init|=
name|gd
operator|.
name|getResultingGroup
argument_list|()
decl_stmt|;
specifier|final
name|GroupTreeNode
name|newNode
init|=
name|GroupTreeNode
operator|.
name|fromGroup
argument_list|(
name|newGroup
argument_list|)
decl_stmt|;
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|groupsRoot
operator|.
name|getNode
argument_list|()
operator|.
name|addChild
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|GroupTreeNodeViewModel
operator|)
name|node
operator|.
name|getParent
argument_list|()
operator|)
operator|.
name|getNode
argument_list|()
operator|.
name|addChild
argument_list|(
name|newNode
argument_list|,
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|getPositionInParent
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|groupsRoot
argument_list|,
operator|new
name|GroupTreeNodeViewModel
argument_list|(
name|newNode
argument_list|)
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|ADD_NODE
argument_list|)
decl_stmt|;
name|groupsTree
operator|.
name|expandPath
argument_list|(
operator|(
name|node
operator|==
literal|null
condition|?
name|groupsRoot
else|:
name|node
operator|)
operator|.
name|getTreePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Store undo information.
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Added group \"%0\"."
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AddSubgroupAction
specifier|private
class|class
name|AddSubgroupAction
extends|extends
name|NodeAction
block|{
DECL|method|AddSubgroupAction ()
specifier|public
name|AddSubgroupAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Add subgroup"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupDialog
name|gd
init|=
operator|new
name|GroupDialog
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|gd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|gd
operator|.
name|okPressed
argument_list|()
condition|)
block|{
return|return;
comment|// ignore
block|}
specifier|final
name|AbstractGroup
name|newGroup
init|=
name|gd
operator|.
name|getResultingGroup
argument_list|()
decl_stmt|;
specifier|final
name|GroupTreeNode
name|newNode
init|=
name|GroupTreeNode
operator|.
name|fromGroup
argument_list|(
name|newGroup
argument_list|)
decl_stmt|;
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|addChild
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|groupsRoot
argument_list|,
operator|new
name|GroupTreeNodeViewModel
argument_list|(
name|newNode
argument_list|)
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|ADD_NODE
argument_list|)
decl_stmt|;
name|groupsTree
operator|.
name|expandPath
argument_list|(
name|node
operator|.
name|getTreePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Store undo information.
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Added group \"%0\"."
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RemoveGroupAndSubgroupsAction
specifier|private
class|class
name|RemoveGroupAndSubgroupsAction
extends|extends
name|NodeAction
block|{
DECL|method|RemoveGroupAndSubgroupsAction ()
specifier|public
name|RemoveGroupAndSubgroupsAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove group and subgroups"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
specifier|final
name|AbstractGroup
name|group
init|=
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|int
name|conf
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove group \"%0\" and its subgroups?"
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove group and subgroups"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
specifier|final
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|groupsRoot
argument_list|,
name|node
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|REMOVE_NODE_AND_CHILDREN
argument_list|)
decl_stmt|;
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
comment|// Store undo information.
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Removed group \"%0\" and its subgroups."
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|RemoveSubgroupsAction
specifier|private
class|class
name|RemoveSubgroupsAction
extends|extends
name|NodeAction
block|{
DECL|method|RemoveSubgroupsAction ()
specifier|public
name|RemoveSubgroupsAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove subgroups"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
name|int
name|conf
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove all subgroups of \"%0\"?"
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove subgroups"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
specifier|final
name|UndoableModifySubtree
name|undo
init|=
operator|new
name|UndoableModifySubtree
argument_list|(
name|getGroupTreeRoot
argument_list|()
argument_list|,
name|node
argument_list|,
literal|"Remove subgroups"
argument_list|)
decl_stmt|;
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|removeAllChildren
argument_list|()
expr_stmt|;
comment|//revalidateGroups();
comment|// Store undo information.
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Removed all subgroups of group \"%0\"."
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|RemoveGroupKeepSubgroupsAction
specifier|private
class|class
name|RemoveGroupKeepSubgroupsAction
extends|extends
name|NodeAction
block|{
DECL|method|RemoveGroupKeepSubgroupsAction ()
specifier|public
name|RemoveGroupKeepSubgroupsAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove group, keep subgroups"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
specifier|final
name|AbstractGroup
name|group
init|=
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|int
name|conf
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove group \"%0\"?"
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove group"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
specifier|final
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|groupsRoot
argument_list|,
name|node
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|REMOVE_NODE_KEEP_CHILDREN
argument_list|)
decl_stmt|;
specifier|final
name|GroupTreeNodeViewModel
name|parent
init|=
operator|(
name|GroupTreeNodeViewModel
operator|)
name|node
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|moveAllChildrenTo
argument_list|(
name|parent
operator|.
name|getNode
argument_list|()
argument_list|,
name|parent
operator|.
name|getIndex
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
comment|// Store undo information.
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Removed group \"%0\"."
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSelectionPath ()
specifier|public
name|TreePath
name|getSelectionPath
parameter_list|()
block|{
return|return
name|groupsTree
operator|.
name|getSelectionPath
argument_list|()
return|;
block|}
DECL|class|SortDirectSubgroupsAction
specifier|private
class|class
name|SortDirectSubgroupsAction
extends|extends
name|NodeAction
block|{
DECL|method|SortDirectSubgroupsAction ()
specifier|public
name|SortDirectSubgroupsAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Immediate subgroups"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent ae)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ae
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
specifier|final
name|UndoableModifySubtree
name|undo
init|=
operator|new
name|UndoableModifySubtree
argument_list|(
name|getGroupTreeRoot
argument_list|()
argument_list|,
name|node
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"sort subgroups"
argument_list|)
argument_list|)
decl_stmt|;
name|groupsTree
operator|.
name|sort
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Sorted immediate subgroups."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SortAllSubgroupsAction
specifier|private
class|class
name|SortAllSubgroupsAction
extends|extends
name|NodeAction
block|{
DECL|method|SortAllSubgroupsAction ()
specifier|public
name|SortAllSubgroupsAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"All subgroups (recursively)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent ae)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ae
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
specifier|final
name|UndoableModifySubtree
name|undo
init|=
operator|new
name|UndoableModifySubtree
argument_list|(
name|getGroupTreeRoot
argument_list|()
argument_list|,
name|node
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"sort subgroups"
argument_list|)
argument_list|)
decl_stmt|;
name|groupsTree
operator|.
name|sort
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Sorted all subgroups recursively."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ExpandSubtreeAction
specifier|private
class|class
name|ExpandSubtreeAction
extends|extends
name|NodeAction
block|{
DECL|method|ExpandSubtreeAction ()
specifier|public
name|ExpandSubtreeAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Expand subtree"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent ae)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ae
parameter_list|)
block|{
name|getNodeToUse
argument_list|()
operator|.
name|expandSubtree
argument_list|(
name|groupsTree
argument_list|)
expr_stmt|;
name|revalidateGroups
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CollapseSubtreeAction
specifier|private
class|class
name|CollapseSubtreeAction
extends|extends
name|NodeAction
block|{
DECL|method|CollapseSubtreeAction ()
specifier|public
name|CollapseSubtreeAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Collapse subtree"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent ae)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ae
parameter_list|)
block|{
name|getNodeToUse
argument_list|()
operator|.
name|collapseSubtree
argument_list|(
name|groupsTree
argument_list|)
expr_stmt|;
name|revalidateGroups
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|MoveNodeUpAction
specifier|private
class|class
name|MoveNodeUpAction
extends|extends
name|NodeAction
block|{
DECL|method|MoveNodeUpAction ()
specifier|public
name|MoveNodeUpAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Up"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
name|moveNodeUp
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MoveNodeDownAction
specifier|private
class|class
name|MoveNodeDownAction
extends|extends
name|NodeAction
block|{
DECL|method|MoveNodeDownAction ()
specifier|public
name|MoveNodeDownAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Down"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
name|moveNodeDown
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MoveNodeLeftAction
specifier|private
class|class
name|MoveNodeLeftAction
extends|extends
name|NodeAction
block|{
DECL|method|MoveNodeLeftAction ()
specifier|public
name|MoveNodeLeftAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Left"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
name|moveNodeLeft
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MoveNodeRightAction
specifier|private
class|class
name|MoveNodeRightAction
extends|extends
name|NodeAction
block|{
DECL|method|MoveNodeRightAction ()
specifier|public
name|MoveNodeRightAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Right"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
name|moveNodeRight
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param node The node to move      * @return true if move was successful, false if not.      */
DECL|method|moveNodeUp (GroupTreeNodeViewModel node, boolean checkSingleSelection)
specifier|public
name|boolean
name|moveNodeUp
parameter_list|(
name|GroupTreeNodeViewModel
name|node
parameter_list|,
name|boolean
name|checkSingleSelection
parameter_list|)
block|{
if|if
condition|(
name|checkSingleSelection
operator|&&
operator|(
name|groupsTree
operator|.
name|getSelectionCount
argument_list|()
operator|!=
literal|1
operator|)
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|MOVE_ONE_GROUP
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
name|Optional
argument_list|<
name|MoveGroupChange
argument_list|>
name|moveChange
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|canMoveUp
argument_list|()
operator|||
operator|(
operator|!
operator|(
name|moveChange
operator|=
name|node
operator|.
name|moveUp
argument_list|()
operator|)
operator|.
name|isPresent
argument_list|()
operator|)
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cannot move group \"%0\" up."
argument_list|,
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
comment|// update selection/expansion state (not really needed when
comment|// moving among siblings, but I'm paranoid)
name|revalidateGroups
argument_list|(
name|groupsTree
operator|.
name|refreshPaths
argument_list|(
name|groupsTree
operator|.
name|getSelectionPaths
argument_list|()
argument_list|)
argument_list|,
name|groupsTree
operator|.
name|refreshPaths
argument_list|(
name|getExpandedPaths
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|concludeMoveGroup
argument_list|(
name|moveChange
operator|.
name|get
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * @param node The node to move      * @return true if move was successful, false if not.      */
DECL|method|moveNodeDown (GroupTreeNodeViewModel node, boolean checkSingleSelection)
specifier|public
name|boolean
name|moveNodeDown
parameter_list|(
name|GroupTreeNodeViewModel
name|node
parameter_list|,
name|boolean
name|checkSingleSelection
parameter_list|)
block|{
if|if
condition|(
name|checkSingleSelection
operator|&&
operator|(
name|groupsTree
operator|.
name|getSelectionCount
argument_list|()
operator|!=
literal|1
operator|)
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|MOVE_ONE_GROUP
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
name|Optional
argument_list|<
name|MoveGroupChange
argument_list|>
name|moveChange
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|canMoveDown
argument_list|()
operator|||
operator|(
operator|!
operator|(
name|moveChange
operator|=
name|node
operator|.
name|moveDown
argument_list|()
operator|)
operator|.
name|isPresent
argument_list|()
operator|)
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cannot move group \"%0\" down."
argument_list|,
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
comment|// update selection/expansion state (not really needed when
comment|// moving among siblings, but I'm paranoid)
name|revalidateGroups
argument_list|(
name|groupsTree
operator|.
name|refreshPaths
argument_list|(
name|groupsTree
operator|.
name|getSelectionPaths
argument_list|()
argument_list|)
argument_list|,
name|groupsTree
operator|.
name|refreshPaths
argument_list|(
name|getExpandedPaths
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|concludeMoveGroup
argument_list|(
name|moveChange
operator|.
name|get
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * @param node The node to move      * @return true if move was successful, false if not.      */
DECL|method|moveNodeLeft (GroupTreeNodeViewModel node, boolean checkSingleSelection)
specifier|public
name|boolean
name|moveNodeLeft
parameter_list|(
name|GroupTreeNodeViewModel
name|node
parameter_list|,
name|boolean
name|checkSingleSelection
parameter_list|)
block|{
if|if
condition|(
name|checkSingleSelection
operator|&&
operator|(
name|groupsTree
operator|.
name|getSelectionCount
argument_list|()
operator|!=
literal|1
operator|)
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|MOVE_ONE_GROUP
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
name|Optional
argument_list|<
name|MoveGroupChange
argument_list|>
name|moveChange
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|canMoveLeft
argument_list|()
operator|||
operator|(
operator|!
operator|(
name|moveChange
operator|=
name|node
operator|.
name|moveLeft
argument_list|()
operator|)
operator|.
name|isPresent
argument_list|()
operator|)
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cannot move group \"%0\" left."
argument_list|,
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
comment|// update selection/expansion state
name|revalidateGroups
argument_list|(
name|groupsTree
operator|.
name|refreshPaths
argument_list|(
name|groupsTree
operator|.
name|getSelectionPaths
argument_list|()
argument_list|)
argument_list|,
name|groupsTree
operator|.
name|refreshPaths
argument_list|(
name|getExpandedPaths
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|concludeMoveGroup
argument_list|(
name|moveChange
operator|.
name|get
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * @param node The node to move      * @return true if move was successful, false if not.      */
DECL|method|moveNodeRight (GroupTreeNodeViewModel node, boolean checkSingleSelection)
specifier|public
name|boolean
name|moveNodeRight
parameter_list|(
name|GroupTreeNodeViewModel
name|node
parameter_list|,
name|boolean
name|checkSingleSelection
parameter_list|)
block|{
if|if
condition|(
name|checkSingleSelection
operator|&&
operator|(
name|groupsTree
operator|.
name|getSelectionCount
argument_list|()
operator|!=
literal|1
operator|)
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|MOVE_ONE_GROUP
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
name|Optional
argument_list|<
name|MoveGroupChange
argument_list|>
name|moveChange
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|canMoveRight
argument_list|()
operator|||
operator|(
operator|!
operator|(
name|moveChange
operator|=
name|node
operator|.
name|moveRight
argument_list|()
operator|)
operator|.
name|isPresent
argument_list|()
operator|)
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cannot move group \"%0\" right."
argument_list|,
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// not possible
block|}
comment|// update selection/expansion state
name|revalidateGroups
argument_list|(
name|groupsTree
operator|.
name|refreshPaths
argument_list|(
name|groupsTree
operator|.
name|getSelectionPaths
argument_list|()
argument_list|)
argument_list|,
name|groupsTree
operator|.
name|refreshPaths
argument_list|(
name|getExpandedPaths
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|concludeMoveGroup
argument_list|(
name|moveChange
operator|.
name|get
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Concludes the moving of a group tree node by storing the specified undo information, marking the change, and      * setting the status line.      *      * @param moveChange Undo information for the move operation.      * @param node The node that has been moved.      */
DECL|method|concludeMoveGroup (MoveGroupChange moveChange, GroupTreeNodeViewModel node)
specifier|public
name|void
name|concludeMoveGroup
parameter_list|(
name|MoveGroupChange
name|moveChange
parameter_list|,
name|GroupTreeNodeViewModel
name|node
parameter_list|)
block|{
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableMoveGroup
argument_list|(
name|this
operator|.
name|groupsRoot
argument_list|,
name|moveChange
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Moved group \"%0\"."
argument_list|,
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|concludeAssignment (AbstractUndoableEdit undo, GroupTreeNode node, int assignedEntries)
specifier|public
name|void
name|concludeAssignment
parameter_list|(
name|AbstractUndoableEdit
name|undo
parameter_list|,
name|GroupTreeNode
name|node
parameter_list|,
name|int
name|assignedEntries
parameter_list|)
block|{
if|if
condition|(
name|undo
operator|==
literal|null
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"The group \"%0\" already contains the selection."
argument_list|,
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|panel
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
specifier|final
name|String
name|groupName
init|=
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignedEntries
operator|==
literal|1
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Assigned 1 entry to group \"%0\"."
argument_list|,
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Assigned %0 entries to group \"%1\"."
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|assignedEntries
argument_list|)
argument_list|,
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getGroupTreeRoot ()
specifier|public
name|GroupTreeNodeViewModel
name|getGroupTreeRoot
parameter_list|()
block|{
return|return
name|groupsRoot
return|;
block|}
DECL|method|getExpandedPaths ()
specifier|public
name|Enumeration
argument_list|<
name|TreePath
argument_list|>
name|getExpandedPaths
parameter_list|()
block|{
return|return
name|groupsTree
operator|.
name|getExpandedDescendants
argument_list|(
name|groupsRoot
operator|.
name|getTreePath
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * panel may be null to indicate that no file is currently open.      */
annotation|@
name|Override
DECL|method|setActiveBasePanel (BasePanel panel)
specifier|public
name|void
name|setActiveBasePanel
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|super
operator|.
name|setActiveBasePanel
argument_list|(
name|panel
argument_list|)
expr_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
comment|// hide groups
name|frame
operator|.
name|getSidePaneManager
argument_list|()
operator|.
name|hide
argument_list|(
literal|"groups"
argument_list|)
expr_stmt|;
return|return;
block|}
name|MetaData
name|metaData
init|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaData
operator|.
name|getGroups
argument_list|()
operator|==
literal|null
condition|)
block|{
name|GroupTreeNode
name|newGroupsRoot
init|=
name|GroupTreeNode
operator|.
name|fromGroup
argument_list|(
operator|new
name|AllEntriesGroup
argument_list|()
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|setGroups
argument_list|(
name|newGroupsRoot
argument_list|)
expr_stmt|;
name|setGroups
argument_list|(
name|newGroupsRoot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setGroups
argument_list|(
name|metaData
operator|.
name|getGroups
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|getTreeLock
argument_list|()
init|)
block|{
name|validateTree
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Highlight all groups that contain any/all of the specified entries. If entries is null or has zero length,      * highlight is cleared.      */
DECL|method|showMatchingGroups (List<BibEntry> list, boolean requireAll)
specifier|public
name|void
name|showMatchingGroups
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|list
parameter_list|,
name|boolean
name|requireAll
parameter_list|)
block|{
if|if
condition|(
operator|(
name|list
operator|==
literal|null
operator|)
operator|||
operator|(
name|list
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// nothing selected
name|groupsTree
operator|.
name|setMatchingGroups
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|revalidate
argument_list|()
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|GroupTreeNode
argument_list|>
name|nodeList
init|=
name|groupsRoot
operator|.
name|getNode
argument_list|()
operator|.
name|getContainingGroups
argument_list|(
name|list
argument_list|,
name|requireAll
argument_list|)
decl_stmt|;
name|groupsTree
operator|.
name|setMatchingGroups
argument_list|(
name|nodeList
argument_list|)
expr_stmt|;
comment|// ensure that all highlighted nodes are visible
for|for
control|(
name|GroupTreeNode
name|node
range|:
name|nodeList
control|)
block|{
name|node
operator|.
name|getParent
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|parentNode
lambda|->
name|groupsTree
operator|.
name|expandPath
argument_list|(
operator|new
name|GroupTreeNodeViewModel
argument_list|(
name|parentNode
argument_list|)
operator|.
name|getTreePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|groupsTree
operator|.
name|revalidate
argument_list|()
expr_stmt|;
block|}
comment|/**      * Show groups that, if selected, would show at least one of the entries in the specified list.      */
DECL|method|showOverlappingGroups (List<BibEntry> matches)
specifier|private
name|void
name|showOverlappingGroups
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|matches
parameter_list|)
block|{
name|List
argument_list|<
name|GroupTreeNode
argument_list|>
name|nodes
init|=
name|groupsRoot
operator|.
name|getNode
argument_list|()
operator|.
name|getMatchingGroups
argument_list|(
name|matches
argument_list|)
decl_stmt|;
name|groupsTree
operator|.
name|setOverlappingGroups
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
DECL|method|getGroupsTree ()
specifier|public
name|GroupsTree
name|getGroupsTree
parameter_list|()
block|{
return|return
name|this
operator|.
name|groupsTree
return|;
block|}
block|}
end_class

end_unit

