begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2016 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.worker
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingWorker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|NewVersionDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|VersionWorker
specifier|public
class|class
name|VersionWorker
extends|extends
name|SwingWorker
argument_list|<
name|Version
argument_list|,
name|Void
argument_list|>
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VersionWorker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mainFrame
specifier|private
specifier|final
name|JabRefFrame
name|mainFrame
decl_stmt|;
DECL|field|manualExecution
specifier|private
specifier|final
name|boolean
name|manualExecution
decl_stmt|;
DECL|field|installedVersion
specifier|private
specifier|final
name|Version
name|installedVersion
decl_stmt|;
DECL|field|toBeIgnored
specifier|private
specifier|final
name|Version
name|toBeIgnored
decl_stmt|;
DECL|method|VersionWorker (JabRefFrame mainFrame, boolean manualExecution, Version installedVersion, Version toBeIgnored)
specifier|public
name|VersionWorker
parameter_list|(
name|JabRefFrame
name|mainFrame
parameter_list|,
name|boolean
name|manualExecution
parameter_list|,
name|Version
name|installedVersion
parameter_list|,
name|Version
name|toBeIgnored
parameter_list|)
block|{
name|this
operator|.
name|mainFrame
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|mainFrame
argument_list|)
expr_stmt|;
name|this
operator|.
name|manualExecution
operator|=
name|manualExecution
expr_stmt|;
name|this
operator|.
name|installedVersion
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|installedVersion
argument_list|)
expr_stmt|;
name|this
operator|.
name|toBeIgnored
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|toBeIgnored
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doInBackground ()
specifier|protected
name|Version
name|doInBackground
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|Version
operator|.
name|getLatestVersion
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not connect to the updateserver."
argument_list|,
name|ioException
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|done ()
specifier|public
name|void
name|done
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Version
name|latestVersion
init|=
name|this
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|latestVersion
operator|==
literal|null
condition|)
block|{
name|String
name|couldNotConnect
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not connect to the update server."
argument_list|)
decl_stmt|;
name|String
name|tryLater
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please try again later and/or check your network connection."
argument_list|)
decl_stmt|;
if|if
condition|(
name|manualExecution
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
operator|.
name|mainFrame
argument_list|,
name|couldNotConnect
operator|+
literal|"\n"
operator|+
name|tryLater
argument_list|,
name|couldNotConnect
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mainFrame
operator|.
name|output
argument_list|(
name|couldNotConnect
operator|+
literal|" "
operator|+
name|tryLater
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// only respect the ignored version on automated version checks
if|if
condition|(
name|latestVersion
operator|.
name|equals
argument_list|(
name|toBeIgnored
argument_list|)
operator|&&
operator|!
name|manualExecution
condition|)
block|{
return|return;
block|}
name|boolean
name|newer
init|=
name|latestVersion
operator|.
name|isNewerThan
argument_list|(
name|installedVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|newer
condition|)
block|{
operator|new
name|NewVersionDialog
argument_list|(
name|this
operator|.
name|mainFrame
argument_list|,
name|installedVersion
argument_list|,
name|latestVersion
argument_list|,
name|toBeIgnored
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|upToDate
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"JabRef is up-to-date."
argument_list|)
decl_stmt|;
if|if
condition|(
name|manualExecution
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
operator|.
name|mainFrame
argument_list|,
name|upToDate
argument_list|,
name|upToDate
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mainFrame
operator|.
name|output
argument_list|(
name|upToDate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error while checking for updates"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

