begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.help
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|HyperlinkEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|HyperlinkListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRef
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  *   * This is a non-modal help Dialog. The contents of the help is specified by  * calling showPage().  */
end_comment

begin_class
DECL|class|HelpDialog
specifier|public
class|class
name|HelpDialog
extends|extends
name|JDialog
implements|implements
name|HyperlinkListener
block|{
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|content
specifier|private
specifier|final
name|HelpContent
name|content
decl_stmt|;
DECL|field|back
specifier|private
specifier|final
name|BackAction
name|back
init|=
operator|new
name|BackAction
argument_list|()
decl_stmt|;
DECL|field|forward
specifier|private
specifier|final
name|ForwardAction
name|forward
init|=
operator|new
name|ForwardAction
argument_list|()
decl_stmt|;
comment|// Initializes, but does not show the help dialog.
DECL|method|HelpDialog (JabRefFrame bf)
specifier|public
name|HelpDialog
parameter_list|(
name|JabRefFrame
name|bf
parameter_list|)
block|{
name|super
argument_list|(
name|bf
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"JabRef help"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|frame
operator|=
name|bf
expr_stmt|;
name|content
operator|=
operator|new
name|HelpContent
argument_list|(
name|bf
operator|.
name|prefs
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|addHyperlinkListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setSize
argument_list|(
name|GUIGlobals
operator|.
name|helpSize
argument_list|)
expr_stmt|;
name|JToolBar
name|tlb
init|=
operator|new
name|JToolBar
argument_list|()
decl_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|back
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|forward
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|ContentsAction
name|contents
init|=
operator|new
name|ContentsAction
argument_list|()
decl_stmt|;
name|tlb
operator|.
name|add
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|tlb
operator|.
name|setFloatable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Make ESC close dialog, and set shortkeys for back and forward.
name|InputMap
name|im
init|=
name|tlb
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
decl_stmt|;
name|ActionMap
name|am
init|=
name|tlb
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|im
operator|.
name|put
argument_list|(
name|bf
operator|.
name|prefs
argument_list|()
operator|.
name|getKey
argument_list|(
literal|"Close dialog"
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
operator|new
name|CloseAction
argument_list|()
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|bf
operator|.
name|prefs
argument_list|()
operator|.
name|getKey
argument_list|(
literal|"Back, help dialog"
argument_list|)
argument_list|,
literal|"left"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"left"
argument_list|,
name|back
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|bf
operator|.
name|prefs
argument_list|()
operator|.
name|getKey
argument_list|(
literal|"Forward, help dialog"
argument_list|)
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"right"
argument_list|,
name|forward
argument_list|)
expr_stmt|;
comment|// Set shortkeys for back and forward specifically for the EditorPane.
name|im
operator|=
name|content
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_FOCUSED
argument_list|)
expr_stmt|;
name|am
operator|=
name|content
operator|.
name|getActionMap
argument_list|()
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|bf
operator|.
name|prefs
argument_list|()
operator|.
name|getKey
argument_list|(
literal|"Back, help dialog"
argument_list|)
argument_list|,
literal|"left"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"left"
argument_list|,
name|back
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|bf
operator|.
name|prefs
argument_list|()
operator|.
name|getKey
argument_list|(
literal|"Forward, help dialog"
argument_list|)
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"right"
argument_list|,
name|forward
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|tlb
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|content
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
name|forward
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|back
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|showPage (String url)
specifier|public
name|void
name|showPage
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|showPage
argument_list|(
name|url
argument_list|,
name|JabRef
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|showPage (String url, Class resourceOwner)
specifier|public
name|void
name|showPage
parameter_list|(
name|String
name|url
parameter_list|,
name|Class
name|resourceOwner
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
block|{
name|Util
operator|.
name|placeDialog
argument_list|(
name|this
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|content
operator|.
name|reset
argument_list|()
expr_stmt|;
name|back
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|back
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|forward
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|content
operator|.
name|setPage
argument_list|(
name|url
argument_list|,
name|resourceOwner
argument_list|)
expr_stmt|;
name|content
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hyperlinkUpdate (HyperlinkEvent e)
specifier|public
name|void
name|hyperlinkUpdate
parameter_list|(
name|HyperlinkEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getEventType
argument_list|()
operator|==
name|HyperlinkEvent
operator|.
name|EventType
operator|.
name|ACTIVATED
condition|)
block|{
name|content
operator|.
name|setPage
argument_list|(
name|e
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
name|back
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|forward
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CloseAction
class|class
name|CloseAction
extends|extends
name|AbstractAction
block|{
DECL|method|CloseAction ()
specifier|public
name|CloseAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Close"
argument_list|)
argument_list|)
expr_stmt|;
comment|// , new ImageIcon(GUIGlobals.closeIconFile));
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Close the help window"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|BackAction
class|class
name|BackAction
extends|extends
name|AbstractAction
block|{
DECL|method|BackAction ()
specifier|public
name|BackAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Back"
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"left"
argument_list|)
argument_list|)
expr_stmt|;
comment|// putValue(SHORT_DESCRIPTION, "Show the previous page");
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|setEnabled
argument_list|(
name|content
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|forward
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ForwardAction
class|class
name|ForwardAction
extends|extends
name|AbstractAction
block|{
DECL|method|ForwardAction ()
specifier|public
name|ForwardAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Forward"
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"right"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|setEnabled
argument_list|(
name|content
operator|.
name|forward
argument_list|()
argument_list|)
expr_stmt|;
name|back
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ContentsAction
class|class
name|ContentsAction
extends|extends
name|AbstractAction
block|{
DECL|method|ContentsAction ()
specifier|public
name|ContentsAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Contents"
argument_list|,
name|GUIGlobals
operator|.
name|getImage
argument_list|(
literal|"helpContents"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|content
operator|.
name|setPage
argument_list|(
name|GUIGlobals
operator|.
name|helpContents
argument_list|,
name|JabRef
operator|.
name|class
argument_list|)
expr_stmt|;
name|back
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

