begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.renderer
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|renderer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|DefaultTableCellRenderer
import|;
end_import

begin_comment
comment|/**  * Renderer for table cells, which supports both Icons, JLabels and plain text.  */
end_comment

begin_class
DECL|class|GeneralRenderer
specifier|public
class|class
name|GeneralRenderer
extends|extends
name|DefaultTableCellRenderer
block|{
DECL|field|background
specifier|private
name|Color
name|background
decl_stmt|;
DECL|field|selBackground
specifier|private
name|Color
name|selBackground
decl_stmt|;
DECL|method|GeneralRenderer (Color c)
specifier|public
name|GeneralRenderer
parameter_list|(
name|Color
name|c
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|background
operator|=
name|c
expr_stmt|;
name|setBackground
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|/**      * Renderer with specified foreground and background colors, and default selected      * background color.      * @param c Foreground color      * @param fg Background color      */
DECL|method|GeneralRenderer (Color c, Color fg)
specifier|public
name|GeneralRenderer
parameter_list|(
name|Color
name|c
parameter_list|,
name|Color
name|fg
parameter_list|)
block|{
name|this
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|background
operator|=
name|c
expr_stmt|;
name|setForeground
argument_list|(
name|fg
argument_list|)
expr_stmt|;
block|}
comment|/**      * Renderer with specified foreground, background and selected background colors      * @param c Foreground color      * @param fg Unselected background color      * @param sel Selected background color      */
DECL|method|GeneralRenderer (Color c, Color fg, Color sel)
specifier|public
name|GeneralRenderer
parameter_list|(
name|Color
name|c
parameter_list|,
name|Color
name|fg
parameter_list|,
name|Color
name|sel
parameter_list|)
block|{
name|this
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|background
operator|=
name|c
expr_stmt|;
name|setForeground
argument_list|(
name|fg
argument_list|)
expr_stmt|;
name|this
operator|.
name|selBackground
operator|=
name|sel
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTableCellRendererComponent (JTable table, Object o, boolean isSelected, boolean hasFocus, int row, int column)
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|o
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|selBackground
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getTableCellRendererComponent
argument_list|(
name|table
argument_list|,
name|o
argument_list|,
name|isSelected
argument_list|,
name|hasFocus
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
else|else
block|{
name|Component
name|c
init|=
name|super
operator|.
name|getTableCellRendererComponent
argument_list|(
name|table
argument_list|,
name|o
argument_list|,
name|isSelected
argument_list|,
name|hasFocus
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSelected
condition|)
block|{
name|c
operator|.
name|setBackground
argument_list|(
name|selBackground
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|setBackground
argument_list|(
name|background
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|firePropertyChange (String propertyName, Object old, Object newV)
specifier|public
name|void
name|firePropertyChange
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Object
name|old
parameter_list|,
name|Object
name|newV
parameter_list|)
block|{
comment|// disable super.firePropertyChange
block|}
comment|/* For enabling the renderer to handle icons. */
annotation|@
name|Override
DECL|method|setValue (Object value)
specifier|protected
name|void
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Icon
condition|)
block|{
name|setIcon
argument_list|(
operator|(
name|Icon
operator|)
name|value
argument_list|)
expr_stmt|;
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|JLabel
condition|)
block|{
name|JLabel
name|lab
init|=
operator|(
name|JLabel
operator|)
name|value
decl_stmt|;
name|setIcon
argument_list|(
name|lab
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|setToolTipText
argument_list|(
name|lab
operator|.
name|getToolTipText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lab
operator|.
name|getIcon
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// this is plain text
name|setIcon
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setToolTipText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|setText
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

