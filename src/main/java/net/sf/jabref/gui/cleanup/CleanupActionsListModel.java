begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.cleanup
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ListModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListDataEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListDataListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|FieldFormatterCleanup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|FieldFormatterCleanups
import|;
end_import

begin_class
DECL|class|CleanupActionsListModel
specifier|public
class|class
name|CleanupActionsListModel
implements|implements
name|ListModel
argument_list|<
name|FieldFormatterCleanup
argument_list|>
block|{
DECL|field|cleanupActions
specifier|private
name|List
argument_list|<
name|FieldFormatterCleanup
argument_list|>
name|cleanupActions
decl_stmt|;
DECL|field|listeners
specifier|private
specifier|final
name|List
argument_list|<
name|ListDataListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|CleanupActionsListModel (List<FieldFormatterCleanup> cleanupAction)
specifier|public
name|CleanupActionsListModel
parameter_list|(
name|List
argument_list|<
name|FieldFormatterCleanup
argument_list|>
name|cleanupAction
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|cleanupAction
argument_list|)
expr_stmt|;
name|this
operator|.
name|cleanupActions
operator|=
name|cleanupAction
expr_stmt|;
block|}
DECL|method|addCleanupAction (FieldFormatterCleanup action)
specifier|public
name|void
name|addCleanupAction
parameter_list|(
name|FieldFormatterCleanup
name|action
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cleanupActions
operator|.
name|contains
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|cleanupActions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
for|for
control|(
name|ListDataListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|intervalAdded
argument_list|(
operator|new
name|ListDataEvent
argument_list|(
name|action
argument_list|,
name|ListDataEvent
operator|.
name|INTERVAL_ADDED
argument_list|,
name|cleanupActions
operator|.
name|size
argument_list|()
argument_list|,
name|cleanupActions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Removes the action at the specified index from the list.      * Removal is only done when index {@code>=0} and index {@code<=} list size      * @param index The index to remove      */
DECL|method|removeAtIndex (int index)
specifier|public
name|void
name|removeAtIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
operator|(
name|index
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|index
operator|<
name|cleanupActions
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|FieldFormatterCleanup
name|action
init|=
name|cleanupActions
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|ListDataListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|intervalRemoved
argument_list|(
operator|new
name|ListDataEvent
argument_list|(
name|action
argument_list|,
name|ListDataEvent
operator|.
name|INTERVAL_REMOVED
argument_list|,
name|index
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getAllActions ()
specifier|public
name|List
argument_list|<
name|FieldFormatterCleanup
argument_list|>
name|getAllActions
parameter_list|()
block|{
return|return
name|cleanupActions
return|;
block|}
annotation|@
name|Override
DECL|method|getSize ()
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|cleanupActions
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getElementAt (int index)
specifier|public
name|FieldFormatterCleanup
name|getElementAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|cleanupActions
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addListDataListener (ListDataListener l)
specifier|public
name|void
name|addListDataListener
parameter_list|(
name|ListDataListener
name|l
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeListDataListener (ListDataListener l)
specifier|public
name|void
name|removeListDataListener
parameter_list|(
name|ListDataListener
name|l
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|reset (FieldFormatterCleanups defaultFormatters)
specifier|public
name|void
name|reset
parameter_list|(
name|FieldFormatterCleanups
name|defaultFormatters
parameter_list|)
block|{
name|cleanupActions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|defaultFormatters
operator|.
name|getConfiguredActions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ListDataListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|contentsChanged
argument_list|(
operator|new
name|ListDataEvent
argument_list|(
name|this
argument_list|,
name|ListDataEvent
operator|.
name|CONTENTS_CHANGED
argument_list|,
literal|0
argument_list|,
name|cleanupActions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

