begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTabbedPane
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_comment
comment|/**  * This action rearranges all tabs in the main tabbed pane of the given JabRefFrame  * in alphabetical order.  */
end_comment

begin_class
DECL|class|SortTabsAction
specifier|public
class|class
name|SortTabsAction
extends|extends
name|MnemonicAwareAction
implements|implements
name|Comparator
argument_list|<
name|String
argument_list|>
block|{
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|method|SortTabsAction (JabRefFrame frame)
specifier|public
name|SortTabsAction
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
literal|"Sort tabs"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Rearrange tabs alphabetically by title"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JTabbedPane
name|tabbedPane
init|=
name|frame
operator|.
name|getTabbedPane
argument_list|()
decl_stmt|;
comment|// Make a sorted Map that compares case-insensitively:
name|TreeMap
argument_list|<
name|String
argument_list|,
name|BasePanel
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|BasePanel
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BasePanel
name|panel
init|=
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|tabbedPane
operator|.
name|getTitleAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|panel
argument_list|)
expr_stmt|;
block|}
name|tabbedPane
operator|.
name|removeAll
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|title
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|BasePanel
name|panel
init|=
name|map
operator|.
name|get
argument_list|(
name|title
argument_list|)
decl_stmt|;
name|tabbedPane
operator|.
name|addTab
argument_list|(
name|title
argument_list|,
name|panel
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|compare (String o1, String o2)
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|toLowerCase
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

