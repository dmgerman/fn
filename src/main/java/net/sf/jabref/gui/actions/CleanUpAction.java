begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2012-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.actions
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preftabs
operator|.
name|ImportSettingsTab
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|AbstractWorker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|FormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|Cleaner
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|DoiCleanup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|FieldFormatterCleanup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|FormatterCleanup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|BibtexFieldFormatters
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_class
DECL|class|CleanUpAction
specifier|public
class|class
name|CleanUpAction
extends|extends
name|AbstractWorker
block|{
DECL|field|AKS_AUTO_NAMING_PDFS_AGAIN
specifier|private
specifier|static
specifier|final
name|String
name|AKS_AUTO_NAMING_PDFS_AGAIN
init|=
literal|"AskAutoNamingPDFsAgain"
decl_stmt|;
DECL|field|CLEANUP_DOI
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_DOI
init|=
literal|"CleanUpDOI"
decl_stmt|;
DECL|field|CLEANUP_MONTH
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_MONTH
init|=
literal|"CleanUpMonth"
decl_stmt|;
DECL|field|CLEANUP_PAGENUMBERS
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_PAGENUMBERS
init|=
literal|"CleanUpPageNumbers"
decl_stmt|;
DECL|field|CLEANUP_DATE
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_DATE
init|=
literal|"CleanUpDate"
decl_stmt|;
DECL|field|CLEANUP_MAKEPATHSRELATIVE
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_MAKEPATHSRELATIVE
init|=
literal|"CleanUpMakePathsRelative"
decl_stmt|;
DECL|field|CLEANUP_RENAMEPDF
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_RENAMEPDF
init|=
literal|"CleanUpRenamePDF"
decl_stmt|;
DECL|field|CLEANUP_RENAMEPDF_ONLYRELATIVE_PATHS
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_RENAMEPDF_ONLYRELATIVE_PATHS
init|=
literal|"CleanUpRenamePDFonlyRelativePaths"
decl_stmt|;
DECL|field|CLEANUP_UPGRADE_EXTERNAL_LINKS
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_UPGRADE_EXTERNAL_LINKS
init|=
literal|"CleanUpUpgradeExternalLinks"
decl_stmt|;
DECL|field|CLEANUP_SUPERSCRIPTS
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_SUPERSCRIPTS
init|=
literal|"CleanUpSuperscripts"
decl_stmt|;
DECL|field|CLEANUP_HTML
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_HTML
init|=
literal|"CleanUpHTML"
decl_stmt|;
DECL|field|CLEANUP_CASE
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_CASE
init|=
literal|"CleanUpCase"
decl_stmt|;
DECL|field|CLEANUP_LATEX
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_LATEX
init|=
literal|"CleanUpLaTeX"
decl_stmt|;
DECL|field|CLEANUP_UNITS
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_UNITS
init|=
literal|"CleanUpUnits"
decl_stmt|;
DECL|field|CLEANUP_UNICODE
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_UNICODE
init|=
literal|"CleanUpUnicode"
decl_stmt|;
DECL|field|CLEANUP_CONVERTTOBIBLATEX
specifier|private
specifier|static
specifier|final
name|String
name|CLEANUP_CONVERTTOBIBLATEX
init|=
literal|"CleanUpConvertToBiblatex"
decl_stmt|;
DECL|method|putDefaults (Map<String, Object> defaults)
specifier|public
specifier|static
name|void
name|putDefaults
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaults
parameter_list|)
block|{
name|defaults
operator|.
name|put
argument_list|(
name|AKS_AUTO_NAMING_PDFS_AGAIN
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_SUPERSCRIPTS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_DOI
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_MONTH
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_PAGENUMBERS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_DATE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_MAKEPATHSRELATIVE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_RENAMEPDF
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_RENAMEPDF_ONLYRELATIVE_PATHS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_UPGRADE_EXTERNAL_LINKS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_MAKEPATHSRELATIVE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_HTML
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_CASE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_LATEX
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_UNITS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_UNICODE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CLEANUP_CONVERTTOBIBLATEX
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
DECL|field|cleanUpSuperscripts
specifier|private
name|JCheckBox
name|cleanUpSuperscripts
decl_stmt|;
DECL|field|cleanUpDOI
specifier|private
name|JCheckBox
name|cleanUpDOI
decl_stmt|;
DECL|field|cleanUpMonth
specifier|private
name|JCheckBox
name|cleanUpMonth
decl_stmt|;
DECL|field|cleanUpPageNumbers
specifier|private
name|JCheckBox
name|cleanUpPageNumbers
decl_stmt|;
DECL|field|cleanUpDate
specifier|private
name|JCheckBox
name|cleanUpDate
decl_stmt|;
DECL|field|cleanUpMakePathsRelative
specifier|private
name|JCheckBox
name|cleanUpMakePathsRelative
decl_stmt|;
DECL|field|cleanUpRenamePDF
specifier|private
name|JCheckBox
name|cleanUpRenamePDF
decl_stmt|;
DECL|field|cleanUpRenamePDFonlyRelativePaths
specifier|private
name|JCheckBox
name|cleanUpRenamePDFonlyRelativePaths
decl_stmt|;
DECL|field|cleanUpUpgradeExternalLinks
specifier|private
name|JCheckBox
name|cleanUpUpgradeExternalLinks
decl_stmt|;
DECL|field|cleanUpHTML
specifier|private
name|JCheckBox
name|cleanUpHTML
decl_stmt|;
DECL|field|cleanUpCase
specifier|private
name|JCheckBox
name|cleanUpCase
decl_stmt|;
DECL|field|cleanUpLaTeX
specifier|private
name|JCheckBox
name|cleanUpLaTeX
decl_stmt|;
DECL|field|cleanUpUnits
specifier|private
name|JCheckBox
name|cleanUpUnits
decl_stmt|;
DECL|field|cleanUpUnicode
specifier|private
name|JCheckBox
name|cleanUpUnicode
decl_stmt|;
DECL|field|cleanUpBibLatex
specifier|private
name|JCheckBox
name|cleanUpBibLatex
decl_stmt|;
DECL|field|optionsPanel
specifier|private
name|JPanel
name|optionsPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|panel
specifier|private
specifier|final
name|BasePanel
name|panel
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
comment|/**      * Global variable to count unsuccessful renames      */
DECL|field|unsuccessfulRenames
specifier|private
name|int
name|unsuccessfulRenames
decl_stmt|;
DECL|field|cancelled
specifier|private
name|boolean
name|cancelled
decl_stmt|;
DECL|field|modifiedEntriesCount
specifier|private
name|int
name|modifiedEntriesCount
decl_stmt|;
DECL|method|CleanUpAction (BasePanel panel)
specifier|public
name|CleanUpAction
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|panel
operator|.
name|frame
argument_list|()
expr_stmt|;
name|initOptionsPanel
argument_list|()
expr_stmt|;
block|}
DECL|method|initOptionsPanel ()
specifier|private
name|void
name|initOptionsPanel
parameter_list|()
block|{
name|cleanUpSuperscripts
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Convert 1st, 2nd, ... to real superscripts"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpDOI
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move DOIs from note and URL field to DOI field and remove http prefix"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpMonth
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Format content of month field to #mon#"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpPageNumbers
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Ensure that page ranges are of the form num1--num2"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpDate
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Format date field in the form yyyy-mm or yyyy-mm-dd"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpMakePathsRelative
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Make paths of linked files relative (if possible)"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpRenamePDF
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Rename PDFs to given filename format pattern"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpRenamePDF
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|arg0
parameter_list|)
block|{
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|setEnabled
argument_list|(
name|cleanUpRenamePDF
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cleanUpRenamePDFonlyRelativePaths
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Rename only PDFs having a relative path"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpUpgradeExternalLinks
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Upgrade external PDF/PS links to use the '%0' field."
argument_list|,
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpHTML
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Run HTML converter on title"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpCase
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Run filter on title keeping the case of selected words"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpLaTeX
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove unneccessary $, {, and } and move adjacent numbers into equations"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpUnits
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Add brackets and replace separators with their non-breaking version for units"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpUnicode
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Run Unicode converter on title, author(s), and abstract"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpBibLatex
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Convert to BibLatex format (for example, move the value of the 'journal' field to 'journaltitle')"
argument_list|)
argument_list|)
expr_stmt|;
name|retrieveSettings
argument_list|()
expr_stmt|;
name|FormLayout
name|layout
init|=
operator|new
name|FormLayout
argument_list|(
literal|"left:15dlu,pref:grow"
argument_list|,
literal|"pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref"
argument_list|)
decl_stmt|;
name|FormBuilder
name|builder
init|=
name|FormBuilder
operator|.
name|create
argument_list|()
operator|.
name|layout
argument_list|(
name|layout
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpHTML
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpUnicode
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpCase
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpLaTeX
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpUnits
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpSuperscripts
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpDOI
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpMonth
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpPageNumbers
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpDate
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpUpgradeExternalLinks
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpMakePathsRelative
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpRenamePDF
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|13
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|currentPattern
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Filename format pattern"
argument_list|)
operator|.
name|concat
argument_list|(
literal|": "
argument_list|)
operator|.
name|concat
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|ImportSettingsTab
operator|.
name|PREF_IMPORT_FILENAMEPATTERN
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|JLabel
argument_list|(
name|currentPattern
argument_list|)
argument_list|)
operator|.
name|xy
argument_list|(
literal|2
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpRenamePDFonlyRelativePaths
argument_list|)
operator|.
name|xy
argument_list|(
literal|2
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|cleanUpBibLatex
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|optionsPanel
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|retrieveSettings ()
specifier|private
name|void
name|retrieveSettings
parameter_list|()
block|{
name|cleanUpSuperscripts
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_SUPERSCRIPTS
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpDOI
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_DOI
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpMonth
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpPageNumbers
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_PAGENUMBERS
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpDate
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_DATE
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpMakePathsRelative
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_MAKEPATHSRELATIVE
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpRenamePDF
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_RENAMEPDF
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_RENAMEPDF_ONLYRELATIVE_PATHS
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|setEnabled
argument_list|(
name|cleanUpRenamePDF
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|cleanUpUpgradeExternalLinks
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_UPGRADE_EXTERNAL_LINKS
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpHTML
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_HTML
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpCase
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_CASE
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpLaTeX
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_LATEX
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpUnits
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_UNITS
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpUnicode
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_UNICODE
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpBibLatex
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_CONVERTTOBIBLATEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|storeSettings ()
specifier|private
name|void
name|storeSettings
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_SUPERSCRIPTS
argument_list|,
name|cleanUpSuperscripts
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_DOI
argument_list|,
name|cleanUpDOI
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_MONTH
argument_list|,
name|cleanUpMonth
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_PAGENUMBERS
argument_list|,
name|cleanUpPageNumbers
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_DATE
argument_list|,
name|cleanUpDate
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_MAKEPATHSRELATIVE
argument_list|,
name|cleanUpMakePathsRelative
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_RENAMEPDF
argument_list|,
name|cleanUpRenamePDF
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_RENAMEPDF_ONLYRELATIVE_PATHS
argument_list|,
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_UPGRADE_EXTERNAL_LINKS
argument_list|,
name|cleanUpUpgradeExternalLinks
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_HTML
argument_list|,
name|cleanUpHTML
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_CASE
argument_list|,
name|cleanUpCase
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_LATEX
argument_list|,
name|cleanUpLaTeX
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_UNITS
argument_list|,
name|cleanUpUnits
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_UNICODE
argument_list|,
name|cleanUpUnicode
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|CLEANUP_CONVERTTOBIBLATEX
argument_list|,
name|cleanUpBibLatex
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|showCleanUpDialog ()
specifier|private
name|int
name|showCleanUpDialog
parameter_list|()
block|{
name|String
name|dialogTitle
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cleanup entries"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|messages
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"What would you like to clean up?"
argument_list|)
block|,
name|optionsPanel
block|}
decl_stmt|;
return|return
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|messages
argument_list|,
name|dialogTitle
argument_list|,
name|JOptionPane
operator|.
name|OK_CANCEL_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|cancelled
operator|=
literal|false
expr_stmt|;
name|modifiedEntriesCount
operator|=
literal|0
expr_stmt|;
name|int
name|numSelected
init|=
name|panel
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|numSelected
operator|==
literal|0
condition|)
block|{
comment|// None selected. Inform the user to select entries first.
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"First select entries to clean up."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cleanup entry"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
name|cancelled
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|frame
operator|.
name|block
argument_list|()
expr_stmt|;
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Doing a cleanup for %0 entries..."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numSelected
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cancelled
condition|)
block|{
return|return;
block|}
name|int
name|choice
init|=
name|showCleanUpDialog
argument_list|()
decl_stmt|;
if|if
condition|(
name|choice
operator|!=
name|JOptionPane
operator|.
name|OK_OPTION
condition|)
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|storeSettings
argument_list|()
expr_stmt|;
name|boolean
name|choiceCleanUpSuperscripts
init|=
name|cleanUpSuperscripts
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceCleanUpDOI
init|=
name|cleanUpDOI
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceCleanUpMonth
init|=
name|cleanUpMonth
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceCleanUpPageNumbers
init|=
name|cleanUpPageNumbers
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceCleanUpDate
init|=
name|cleanUpDate
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceCleanUpUpgradeExternalLinks
init|=
name|cleanUpUpgradeExternalLinks
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceMakePathsRelative
init|=
name|cleanUpMakePathsRelative
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceRenamePDF
init|=
name|cleanUpRenamePDF
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceConvertHTML
init|=
name|cleanUpHTML
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceConvertCase
init|=
name|cleanUpCase
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceConvertLaTeX
init|=
name|cleanUpLaTeX
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceConvertUnits
init|=
name|cleanUpUnits
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceConvertUnicode
init|=
name|cleanUpUnicode
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|choiceConvertToBiblatex
init|=
name|cleanUpBibLatex
operator|.
name|isSelected
argument_list|()
decl_stmt|;
if|if
condition|(
name|choiceRenamePDF
operator|&&
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|CleanUpAction
operator|.
name|AKS_AUTO_NAMING_PDFS_AGAIN
argument_list|)
condition|)
block|{
name|CheckBoxMessage
name|cbm
init|=
operator|new
name|CheckBoxMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Auto-generating PDF-Names does not support undo. Continue?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Disable this confirmation dialog"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|cbm
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autogenerate PDF Names"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|cbm
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|CleanUpAction
operator|.
name|AKS_AUTO_NAMING_PDFS_AGAIN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|BibEntry
name|entry
range|:
name|panel
operator|.
name|getSelectedEntries
argument_list|()
control|)
block|{
comment|// undo granularity is on entry level
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cleanup entry"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|choiceCleanUpUpgradeExternalLinks
condition|)
block|{
name|doUpgradePdfPsToFile
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceCleanUpSuperscripts
condition|)
block|{
name|doCleanUpSuperscripts
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceCleanUpDOI
condition|)
block|{
name|doCleanUpDOI
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceCleanUpMonth
condition|)
block|{
name|doCleanUpMonth
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceCleanUpPageNumbers
condition|)
block|{
name|doCleanUpPageNumbers
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceCleanUpDate
condition|)
block|{
name|doCleanUpDate
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
name|fixWrongFileEntries
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
if|if
condition|(
name|choiceMakePathsRelative
condition|)
block|{
name|doMakePathsRelative
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceRenamePDF
condition|)
block|{
name|doRenamePDFs
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceConvertHTML
condition|)
block|{
name|doConvertHTML
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceConvertUnits
condition|)
block|{
name|doConvertUnits
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceConvertCase
condition|)
block|{
name|doConvertCase
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceConvertLaTeX
condition|)
block|{
name|doConvertLaTeX
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceConvertUnicode
condition|)
block|{
name|doConvertUnicode
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choiceConvertToBiblatex
condition|)
block|{
name|doConvertToBiblatex
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|ce
operator|.
name|hasEdits
argument_list|()
condition|)
block|{
name|modifiedEntriesCount
operator|++
expr_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
if|if
condition|(
name|cancelled
condition|)
block|{
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|unsuccessfulRenames
operator|>
literal|0
condition|)
block|{
comment|//Rename failed for at least one entry
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"File rename failed for %0 entries."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|unsuccessfulRenames
argument_list|)
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autogenerate PDF Names"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modifiedEntriesCount
operator|>
literal|0
condition|)
block|{
name|panel
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
name|String
name|message
decl_stmt|;
switch|switch
condition|(
name|modifiedEntriesCount
condition|)
block|{
case|case
literal|0
case|:
name|message
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"No entry needed a clean up"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|message
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"One entry needed a clean up"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|message
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"%0 entries needed a clean up"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|modifiedEntriesCount
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|panel
operator|.
name|output
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
comment|/**      * Collects file links from the pdf or ps field, and adds them to the list contained in the file field.      */
DECL|method|doUpgradePdfPsToFile (BibEntry entry, NamedCompound ce)
specifier|private
name|void
name|doUpgradePdfPsToFile
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|Util
operator|.
name|upgradePdfPsToFile
argument_list|(
name|entry
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"pdf"
block|,
literal|"ps"
block|}
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts the text in 1st, 2nd, ... to real superscripts by wrapping in \textsuperscript{st}, ...      */
DECL|method|doCleanUpSuperscripts (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doCleanUpSuperscripts
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
operator|new
name|FormatterCleanup
argument_list|(
name|BibtexFieldFormatters
operator|.
name|SUPERSCRIPTS
argument_list|)
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes the http://... for each DOI. Moves DOIs from URL and NOTE filed to DOI field.      */
DECL|method|doCleanUpDOI (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doCleanUpDOI
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
operator|new
name|DoiCleanup
argument_list|()
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
DECL|method|doCleanUpMonth (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doCleanUpMonth
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
name|FieldFormatterCleanup
operator|.
name|MONTH
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
DECL|method|doCleanUpPageNumbers (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doCleanUpPageNumbers
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
name|FieldFormatterCleanup
operator|.
name|PAGE_NUMBERS
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
DECL|method|fixWrongFileEntries (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|fixWrongFileEntries
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
operator|new
name|FileEntryCleaner
argument_list|()
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
DECL|method|doMakePathsRelative (BibEntry entry, NamedCompound ce)
specifier|private
name|void
name|doMakePathsRelative
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
operator|new
name|RelativePathsCleanup
argument_list|(
name|panel
operator|.
name|metaData
argument_list|()
operator|.
name|getFileDirectory
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
argument_list|)
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
DECL|method|doRenamePDFs (BibEntry entry, NamedCompound ce)
specifier|private
name|void
name|doRenamePDFs
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|String
index|[]
name|paths
init|=
name|panel
operator|.
name|metaData
argument_list|()
operator|.
name|getFileDirectory
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
decl_stmt|;
name|BibDatabase
name|database
init|=
name|panel
operator|.
name|database
argument_list|()
decl_stmt|;
name|Boolean
name|onlyRelativePaths
init|=
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|RenamePdfCleanup
name|cleaner
init|=
operator|new
name|RenamePdfCleanup
argument_list|(
name|paths
argument_list|,
name|onlyRelativePaths
argument_list|,
name|database
argument_list|)
decl_stmt|;
name|doCleanup
argument_list|(
name|cleaner
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
name|unsuccessfulRenames
operator|+=
name|cleaner
operator|.
name|getUnsuccessfulRenames
argument_list|()
expr_stmt|;
block|}
comment|/**      * Converts HTML code to LaTeX code      */
DECL|method|doConvertHTML (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doConvertHTML
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
name|FieldFormatterCleanup
operator|.
name|TITLE_HTML
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts Unicode characters to LaTeX code      */
DECL|method|doConvertUnicode (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doConvertUnicode
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
operator|new
name|UnicodeCleanup
argument_list|()
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds curly brackets {} around keywords      */
DECL|method|doConvertCase (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doConvertCase
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
name|FieldFormatterCleanup
operator|.
name|TITLE_CASE
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
DECL|method|doConvertUnits (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doConvertUnits
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
name|FieldFormatterCleanup
operator|.
name|TITLE_UNITS
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
DECL|method|doConvertLaTeX (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doConvertLaTeX
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
name|FieldFormatterCleanup
operator|.
name|TITLE_LATEX
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts to BibLatex format      */
DECL|method|doConvertToBiblatex (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doConvertToBiblatex
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
operator|new
name|BiblatexCleanup
argument_list|()
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
comment|/**      * Format dates correctly (yyyy-mm-dd or yyyy-mm)      */
DECL|method|doCleanUpDate (BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doCleanUpDate
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|doCleanup
argument_list|(
name|FieldFormatterCleanup
operator|.
name|DATES
argument_list|,
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs the field formatter on the entry and records the change.      */
DECL|method|doCleanup (Cleaner cleaner, BibEntry entry, NamedCompound ce)
specifier|private
specifier|static
name|void
name|doCleanup
parameter_list|(
name|Cleaner
name|cleaner
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
comment|// Run cleaner
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
init|=
name|cleaner
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Register undo action
for|for
control|(
name|FieldChange
name|change
range|:
name|changes
control|)
block|{
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

