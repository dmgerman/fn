begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.fieldeditors.contextmenu
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|contextmenu
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|ClipBoardManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|CopyAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|PasteAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|FieldEditor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|bibtexfields
operator|.
name|AuthorsFormatter
import|;
end_import

begin_class
DECL|class|FieldTextMenu
specifier|public
class|class
name|FieldTextMenu
implements|implements
name|MouseListener
block|{
DECL|field|field
specifier|private
specifier|final
name|FieldEditor
name|field
decl_stmt|;
DECL|field|inputMenu
specifier|private
specifier|final
name|JPopupMenu
name|inputMenu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|copyAct
specifier|private
specifier|final
name|CopyAction
name|copyAct
decl_stmt|;
DECL|field|pasteAct
specifier|private
specifier|final
name|PasteAction
name|pasteAct
decl_stmt|;
DECL|field|MAX_PASTE_PREVIEW_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_PASTE_PREVIEW_LENGTH
init|=
literal|20
decl_stmt|;
DECL|method|FieldTextMenu (FieldEditor fieldComponent)
specifier|public
name|FieldTextMenu
parameter_list|(
name|FieldEditor
name|fieldComponent
parameter_list|)
block|{
name|field
operator|=
name|fieldComponent
expr_stmt|;
name|copyAct
operator|=
operator|new
name|CopyAction
argument_list|(
operator|(
name|JTextComponent
operator|)
name|field
argument_list|)
expr_stmt|;
name|pasteAct
operator|=
operator|new
name|PasteAction
argument_list|(
operator|(
name|JTextComponent
operator|)
name|field
argument_list|)
expr_stmt|;
name|initMenu
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mouseClicked (MouseEvent e)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|mouseEntered (MouseEvent e)
specifier|public
name|void
name|mouseEntered
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|mouseExited (MouseEvent e)
specifier|public
name|void
name|mouseExited
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|mousePressed (MouseEvent e)
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|maybeShowPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mouseReleased (MouseEvent e)
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|maybeShowPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|maybeShowPopup (MouseEvent e)
specifier|private
name|void
name|maybeShowPopup
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
comment|// enable/disable copy to clipboard if selected text available
name|String
name|txt
init|=
name|field
operator|.
name|getSelectedText
argument_list|()
decl_stmt|;
name|String
name|allTxt
init|=
name|field
operator|.
name|getText
argument_list|()
decl_stmt|;
name|boolean
name|cStat
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|txt
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|txt
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
operator|||
operator|(
operator|(
name|allTxt
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|allTxt
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|cStat
operator|=
literal|true
expr_stmt|;
block|}
name|copyAct
operator|.
name|setEnabled
argument_list|(
name|cStat
argument_list|)
expr_stmt|;
name|String
name|data
init|=
name|ClipBoardManager
operator|.
name|CLIPBOARD
operator|.
name|getClipboardContents
argument_list|()
decl_stmt|;
name|boolean
name|pStat
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pStat
operator|=
literal|true
expr_stmt|;
name|pasteAct
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Paste from clipboard"
argument_list|)
operator|+
literal|": "
operator|+
name|StringUtil
operator|.
name|limitStringLength
argument_list|(
name|data
argument_list|,
name|MAX_PASTE_PREVIEW_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pasteAct
operator|.
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Paste from clipboard"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pasteAct
operator|.
name|setEnabled
argument_list|(
name|pStat
argument_list|)
expr_stmt|;
name|inputMenu
operator|.
name|show
argument_list|(
name|e
operator|.
name|getComponent
argument_list|()
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|initMenu ()
specifier|private
name|void
name|initMenu
parameter_list|()
block|{
name|inputMenu
operator|.
name|add
argument_list|(
name|pasteAct
argument_list|)
expr_stmt|;
name|inputMenu
operator|.
name|add
argument_list|(
name|copyAct
argument_list|)
expr_stmt|;
name|inputMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|inputMenu
operator|.
name|add
argument_list|(
operator|new
name|ReplaceAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getTextComponent
argument_list|()
operator|instanceof
name|JTextComponent
condition|)
block|{
name|inputMenu
operator|.
name|add
argument_list|(
operator|new
name|CaseChangeMenu
argument_list|(
operator|(
name|JTextComponent
operator|)
name|field
operator|.
name|getTextComponent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|inputMenu
operator|.
name|add
argument_list|(
operator|new
name|ConversionMenu
argument_list|(
operator|(
name|JTextComponent
operator|)
name|field
operator|.
name|getTextComponent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|ReplaceAction
class|class
name|ReplaceAction
extends|extends
name|AbstractAction
block|{
DECL|method|ReplaceAction ()
specifier|public
name|ReplaceAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Normalize to BibTeX name format"
argument_list|)
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"If possible, normalize this list of names to conform to standard BibTeX name formatting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent evt)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|input
init|=
name|field
operator|.
name|getText
argument_list|()
decl_stmt|;
name|field
operator|.
name|setText
argument_list|(
operator|new
name|AuthorsFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

