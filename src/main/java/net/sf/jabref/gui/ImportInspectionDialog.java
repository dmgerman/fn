begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ActionMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ImageIcon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|InputMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JProgressBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JSplitPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumnModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefExecutorService
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
operator|.
name|FieldProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
operator|.
name|comparator
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|DownloadExternalFile
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileMenuItem
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DuplicateResolverDialog
operator|.
name|DuplicateResolverResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
operator|.
name|GroupTreeNodeViewModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
operator|.
name|UndoableChangeEntriesOfGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpFiles
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|renderer
operator|.
name|GeneralRenderer
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableInsertEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableRemoveEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|comparator
operator|.
name|IconComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|component
operator|.
name|CheckBoxMessage
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ImportInspector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|OutputPrinter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|AllEntriesGroup
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|EntriesGroupChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|labelpattern
operator|.
name|LabelPatternUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|UpdateField
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|DuplicateCheck
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|AuthorList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|BasicEventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|SortedList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEvent
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEventListener
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|gui
operator|.
name|AbstractTableComparatorChooser
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|gui
operator|.
name|TableFormat
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|DefaultEventSelectionModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|DefaultEventTableModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|GlazedListsSwing
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|TableComparatorChooser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonBarBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonStackBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Dialog to allow the selection of entries as part of an Import.  *<p>  * The usual way to use this class is to pass it to an Importer which will do  * the following:  *<ul>  *<li>Register itself as a callback to get notified if the user wants to stop  * the import.</li>  *<li>Call setVisible(true) to display the dialog</li>  *<li>For each entry that has been found call addEntry(...)</li>  *<li>Call entryListComplete() after all entries have been fetched</li>  *</ul>  *<p>  * If the importer wants to cancel the import, it should call the dispose()  * method.  *<p>  * If the importer receives the stopFetching-call, it should stop fetching as  * soon as possible (it is not really critical, but good style to not contribute  * any more results via addEntry, call entryListComplete() or dispose(), after  * receiving this call).  */
end_comment

begin_class
DECL|class|ImportInspectionDialog
specifier|public
class|class
name|ImportInspectionDialog
extends|extends
name|JDialog
implements|implements
name|ImportInspector
implements|,
name|OutputPrinter
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ImportInspectionDialog
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|panel
specifier|private
name|BasePanel
name|panel
decl_stmt|;
DECL|field|frame
specifier|public
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|bibDatabaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|bibDatabaseContext
decl_stmt|;
DECL|field|contentPane
specifier|private
specifier|final
name|JSplitPane
name|contentPane
init|=
operator|new
name|JSplitPane
argument_list|(
name|JSplitPane
operator|.
name|VERTICAL_SPLIT
argument_list|)
decl_stmt|;
DECL|field|glTable
specifier|private
specifier|final
name|JTable
name|glTable
decl_stmt|;
DECL|field|comparatorChooser
specifier|private
specifier|final
name|TableComparatorChooser
argument_list|<
name|BibEntry
argument_list|>
name|comparatorChooser
decl_stmt|;
DECL|field|selectionModel
specifier|private
specifier|final
name|DefaultEventSelectionModel
argument_list|<
name|BibEntry
argument_list|>
name|selectionModel
decl_stmt|;
DECL|field|progressBar
specifier|private
specifier|final
name|JProgressBar
name|progressBar
init|=
operator|new
name|JProgressBar
argument_list|(
name|SwingConstants
operator|.
name|HORIZONTAL
argument_list|)
decl_stmt|;
DECL|field|ok
specifier|private
specifier|final
name|JButton
name|ok
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"OK"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|generate
specifier|private
specifier|final
name|JButton
name|generate
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generate now"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|entries
specifier|private
specifier|final
name|EventList
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
operator|new
name|BasicEventList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sortedList
specifier|private
specifier|final
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|sortedList
decl_stmt|;
comment|/**      * Duplicate resolving may require deletion of old entries.      */
DECL|field|entriesToDelete
specifier|private
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entriesToDelete
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|undoName
specifier|private
specifier|final
name|String
name|undoName
decl_stmt|;
DECL|field|callBacks
specifier|private
specifier|final
name|List
argument_list|<
name|CallBack
argument_list|>
name|callBacks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|newDatabase
specifier|private
specifier|final
name|boolean
name|newDatabase
decl_stmt|;
DECL|field|popup
specifier|private
specifier|final
name|JPopupMenu
name|popup
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|deselectAllDuplicates
specifier|private
specifier|final
name|JButton
name|deselectAllDuplicates
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Deselect all duplicates"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|stop
specifier|private
specifier|final
name|JButton
name|stop
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Stop"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|preview
specifier|private
specifier|final
name|PreviewPanel
name|preview
decl_stmt|;
DECL|field|generatedKeys
specifier|private
name|boolean
name|generatedKeys
decl_stmt|;
comment|// Set to true after keys have been generated.
DECL|field|defaultSelected
specifier|private
name|boolean
name|defaultSelected
init|=
literal|true
decl_stmt|;
DECL|field|toRect
specifier|private
specifier|final
name|Rectangle
name|toRect
init|=
operator|new
name|Rectangle
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|groupAdditions
specifier|private
specifier|final
name|Map
argument_list|<
name|BibEntry
argument_list|,
name|Set
argument_list|<
name|GroupTreeNode
argument_list|>
argument_list|>
name|groupAdditions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|autoGenerate
specifier|private
specifier|final
name|JCheckBox
name|autoGenerate
init|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generate keys"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GENERATE_KEYS_AFTER_INSPECTION
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|duplLabel
specifier|private
specifier|final
name|JLabel
name|duplLabel
init|=
operator|new
name|JLabel
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|DUPLICATE
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|fileLabel
specifier|private
specifier|final
name|JLabel
name|fileLabel
init|=
operator|new
name|JLabel
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|FILE
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|urlLabel
specifier|private
specifier|final
name|JLabel
name|urlLabel
init|=
operator|new
name|JLabel
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|WWW
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|INSPECTION_FIELDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|INSPECTION_FIELDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"year"
argument_list|,
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|)
decl_stmt|;
DECL|field|DUPL_COL
specifier|private
specifier|static
specifier|final
name|int
name|DUPL_COL
init|=
literal|1
decl_stmt|;
DECL|field|FILE_COL
specifier|private
specifier|static
specifier|final
name|int
name|FILE_COL
init|=
literal|2
decl_stmt|;
DECL|field|URL_COL
specifier|private
specifier|static
specifier|final
name|int
name|URL_COL
init|=
literal|3
decl_stmt|;
DECL|field|PAD
specifier|private
specifier|static
specifier|final
name|int
name|PAD
init|=
literal|4
decl_stmt|;
DECL|field|URL_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|URL_FIELD
init|=
literal|"url"
decl_stmt|;
comment|/**      * Creates a dialog that displays the given list of fields in the table. The      * dialog allows another process to add entries dynamically while the dialog      * is shown.      *      * @param frame      * @param panel      */
DECL|method|ImportInspectionDialog (JabRefFrame frame, BasePanel panel, String undoName, boolean newDatabase)
specifier|public
name|ImportInspectionDialog
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanel
name|panel
parameter_list|,
name|String
name|undoName
parameter_list|,
name|boolean
name|newDatabase
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|bibDatabaseContext
operator|=
operator|(
name|panel
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|undoName
operator|=
name|undoName
expr_stmt|;
name|this
operator|.
name|newDatabase
operator|=
name|newDatabase
expr_stmt|;
name|setIconImage
argument_list|(
operator|new
name|ImageIcon
argument_list|(
name|IconTheme
operator|.
name|getIconUrl
argument_list|(
literal|"jabrefIcon48"
argument_list|)
argument_list|)
operator|.
name|getImage
argument_list|()
argument_list|)
expr_stmt|;
name|preview
operator|=
operator|new
name|PreviewPanel
argument_list|(
literal|null
argument_list|,
name|bibDatabaseContext
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|PREVIEW_0
argument_list|)
argument_list|)
expr_stmt|;
name|duplLabel
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Possible duplicate of existing entry. Click to resolve."
argument_list|)
argument_list|)
expr_stmt|;
name|sortedList
operator|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|DefaultEventTableModel
argument_list|<
name|BibEntry
argument_list|>
name|tableModelGl
init|=
operator|(
name|DefaultEventTableModel
argument_list|<
name|BibEntry
argument_list|>
operator|)
name|GlazedListsSwing
operator|.
name|eventTableModelWithThreadProxyList
argument_list|(
name|sortedList
argument_list|,
operator|new
name|EntryTableFormat
argument_list|()
argument_list|)
decl_stmt|;
name|glTable
operator|=
operator|new
name|EntryTable
argument_list|(
name|tableModelGl
argument_list|)
expr_stmt|;
name|GeneralRenderer
name|renderer
init|=
operator|new
name|GeneralRenderer
argument_list|(
name|Color
operator|.
name|white
argument_list|)
decl_stmt|;
name|glTable
operator|.
name|setDefaultRenderer
argument_list|(
name|JLabel
operator|.
name|class
argument_list|,
name|renderer
argument_list|)
expr_stmt|;
name|glTable
operator|.
name|setDefaultRenderer
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|renderer
argument_list|)
expr_stmt|;
name|glTable
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|DELETE_ENTRY
argument_list|)
argument_list|,
literal|"delete"
argument_list|)
expr_stmt|;
name|DeleteListener
name|deleteListener
init|=
operator|new
name|DeleteListener
argument_list|()
decl_stmt|;
name|glTable
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"delete"
argument_list|,
name|deleteListener
argument_list|)
expr_stmt|;
name|selectionModel
operator|=
operator|(
name|DefaultEventSelectionModel
argument_list|<
name|BibEntry
argument_list|>
operator|)
name|GlazedListsSwing
operator|.
name|eventSelectionModelWithThreadProxyList
argument_list|(
name|sortedList
argument_list|)
expr_stmt|;
name|glTable
operator|.
name|setSelectionModel
argument_list|(
name|selectionModel
argument_list|)
expr_stmt|;
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|addListEventListener
argument_list|(
operator|new
name|EntrySelectionListener
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorChooser
operator|=
name|TableComparatorChooser
operator|.
name|install
argument_list|(
name|glTable
argument_list|,
name|sortedList
argument_list|,
name|AbstractTableComparatorChooser
operator|.
name|MULTIPLE_COLUMN_KEYBOARD
argument_list|)
expr_stmt|;
name|setupComparatorChooser
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|addMouseListener
argument_list|(
operator|new
name|TableClickListener
argument_list|()
argument_list|)
expr_stmt|;
name|setWidths
argument_list|()
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setIndeterminate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JPanel
name|centerPan
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|centerPan
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setTopComponent
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|glTable
argument_list|)
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setBottomComponent
argument_list|(
name|preview
argument_list|)
expr_stmt|;
name|centerPan
operator|.
name|add
argument_list|(
name|contentPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|centerPan
operator|.
name|add
argument_list|(
name|progressBar
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|deleteListener
argument_list|)
expr_stmt|;
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|newDatabase
operator|&&
operator|(
name|bibDatabaseContext
operator|!=
literal|null
operator|)
condition|)
block|{
name|GroupTreeNode
name|node
init|=
name|bibDatabaseContext
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
decl_stmt|;
name|JMenu
name|groupsAdd
init|=
operator|new
name|JMenu
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Add to group"
argument_list|)
argument_list|)
decl_stmt|;
name|groupsAdd
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Will get enabled if there are groups that can be added to.
name|insertNodes
argument_list|(
name|groupsAdd
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|groupsAdd
argument_list|)
expr_stmt|;
block|}
comment|// Add "Attach file" menu choices to right click menu:
name|popup
operator|.
name|add
argument_list|(
operator|new
name|LinkLocalFile
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
operator|new
name|DownloadFile
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
operator|new
name|AutoSetLinks
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
operator|new
name|AttachUrl
argument_list|()
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|centerPan
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|ButtonBarBuilder
name|bb
init|=
operator|new
name|ButtonBarBuilder
argument_list|()
decl_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|stop
argument_list|)
expr_stmt|;
name|JButton
name|cancel
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addRelatedGap
argument_list|()
expr_stmt|;
name|JButton
name|help
init|=
operator|new
name|HelpAction
argument_list|(
name|HelpFiles
operator|.
name|IMPORT_INSPECTION
argument_list|)
operator|.
name|getHelpButton
argument_list|()
decl_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|ButtonStackBuilder
name|builder
init|=
operator|new
name|ButtonStackBuilder
argument_list|()
decl_stmt|;
name|JButton
name|selectAll
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select all"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addButton
argument_list|(
name|selectAll
argument_list|)
expr_stmt|;
name|JButton
name|deselectAll
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Deselect all"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addButton
argument_list|(
name|deselectAll
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addButton
argument_list|(
name|deselectAllDuplicates
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addRelatedGap
argument_list|()
expr_stmt|;
name|JButton
name|delete
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addButton
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addRelatedGap
argument_list|()
expr_stmt|;
name|builder
operator|.
name|addFixed
argument_list|(
name|autoGenerate
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addButton
argument_list|(
name|generate
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|centerPan
operator|.
name|add
argument_list|(
name|builder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|WEST
argument_list|)
expr_stmt|;
name|ok
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|generate
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|.
name|addActionListener
argument_list|(
operator|new
name|OkListener
argument_list|()
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|signalStopFetching
argument_list|()
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Import canceled by user"
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|generate
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|generate
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|generatedKeys
operator|=
literal|true
expr_stmt|;
comment|// To prevent the button from getting
comment|// enabled again.
name|generateKeys
argument_list|()
expr_stmt|;
comment|// Generate the keys.
block|}
argument_list|)
expr_stmt|;
name|stop
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|signalStopFetching
argument_list|()
expr_stmt|;
name|entryListComplete
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|selectAll
operator|.
name|addActionListener
argument_list|(
operator|new
name|SelectionButton
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|deselectAll
operator|.
name|addActionListener
argument_list|(
operator|new
name|SelectionButton
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|deselectAllDuplicates
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|glTable
operator|.
name|getValueAt
argument_list|(
name|i
argument_list|,
name|DUPL_COL
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|glTable
operator|.
name|setValueAt
argument_list|(
literal|false
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|deselectAllDuplicates
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addActionListener
argument_list|(
name|deleteListener
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|bb
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
comment|// Remember and default to last size:
name|setSize
argument_list|(
operator|new
name|Dimension
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|IMPORT_INSPECTION_DIALOG_WIDTH
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|IMPORT_INSPECTION_DIALOG_HEIGHT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|windowOpened
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|contentPane
operator|.
name|setDividerLocation
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|windowClosed
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|IMPORT_INSPECTION_DIALOG_WIDTH
argument_list|,
name|getSize
argument_list|()
operator|.
name|width
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|IMPORT_INSPECTION_DIALOG_HEIGHT
argument_list|,
name|getSize
argument_list|()
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Key bindings:
name|Action
name|closeAction
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ActionMap
name|am
init|=
name|contentPane
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|InputMap
name|im
init|=
name|contentPane
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
decl_stmt|;
name|im
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_DIALOG
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
name|closeAction
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see net.sf.jabref.gui.ImportInspection#setProgress(int, int)      */
annotation|@
name|Override
DECL|method|setProgress (int current, int max)
specifier|public
name|void
name|setProgress
parameter_list|(
name|int
name|current
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|progressBar
operator|.
name|setIndeterminate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setMinimum
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setMaximum
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setValue
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see net.sf.jabref.gui.ImportInspection#addEntry(net.sf.jabref.BibEntry)      */
annotation|@
name|Override
DECL|method|addEntry (BibEntry entry)
specifier|public
name|void
name|addEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|addEntries
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see net.sf.jabref.gui.ImportInspection#addEntries(java.util.Collection)      */
DECL|method|addEntries (Collection<BibEntry> entriesToAdd)
specifier|public
name|void
name|addEntries
parameter_list|(
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entriesToAdd
parameter_list|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|entriesToAdd
control|)
block|{
comment|// We exploit the entry's search status for indicating "Keep"
comment|// status:
name|entry
operator|.
name|setSearchHit
argument_list|(
name|defaultSelected
argument_list|)
expr_stmt|;
comment|// We exploit the entry's group status for indicating duplicate
comment|// status.
comment|// Checking duplicates means both checking against the background
comment|// database (if
comment|// applicable) and against entries already in the table.
if|if
condition|(
operator|(
name|panel
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|DuplicateCheck
operator|.
name|containsDuplicate
argument_list|(
name|panel
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
operator|.
name|isPresent
argument_list|()
operator|||
operator|(
name|internalDuplicate
argument_list|(
name|this
operator|.
name|entries
argument_list|,
name|entry
argument_list|)
operator|.
name|isPresent
argument_list|()
operator|)
operator|)
condition|)
block|{
name|entry
operator|.
name|setGroupHit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|deselectAllDuplicates
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|this
operator|.
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Checks if there are duplicates to the given entry in the Collection. Does      * not report the entry as duplicate of itself if it is in the Collection.      *      * @param entriesDupe A Collection of BibEntry instances.      * @param entry       The entry to search for duplicates of.      * @return A possible duplicate, if any, or null if none were found.      */
DECL|method|internalDuplicate (Collection<BibEntry> entriesDupe, BibEntry entry)
specifier|private
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|internalDuplicate
parameter_list|(
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entriesDupe
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
block|{
for|for
control|(
name|BibEntry
name|othEntry
range|:
name|entriesDupe
control|)
block|{
if|if
condition|(
name|othEntry
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
condition|)
block|{
continue|continue;
comment|// Don't compare the entry to itself
block|}
if|if
condition|(
name|DuplicateCheck
operator|.
name|isDuplicate
argument_list|(
name|entry
argument_list|,
name|othEntry
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|othEntry
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)      * @see net.sf.jabref.gui.ImportInspection#entryListComplete()      */
DECL|method|entryListComplete ()
specifier|public
name|void
name|entryListComplete
parameter_list|()
block|{
name|progressBar
operator|.
name|setIndeterminate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|progressBar
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|generatedKeys
condition|)
block|{
name|generate
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|stop
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//This is for selecting and displaying the first entry in the glTable
name|this
operator|.
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|this
operator|.
name|glTable
operator|.
name|getSelectedRowCount
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|this
operator|.
name|glTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|this
operator|.
name|glTable
operator|.
name|setRowSelectionInterval
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Select first row in the table
block|}
block|}
comment|/**      * Generate key for the selected entry only.      */
DECL|method|generateKeySelectedEntry ()
specifier|private
name|void
name|generateKeySelectedEntry
parameter_list|()
block|{
if|if
condition|(
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return;
block|}
name|BibEntry
name|entry
init|=
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|BibDatabase
name|database
decl_stmt|;
name|MetaData
name|localMetaData
decl_stmt|;
comment|// Relate to existing database, if any:
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
name|database
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
name|localMetaData
operator|=
operator|new
name|MetaData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|database
operator|=
name|panel
operator|.
name|getDatabase
argument_list|()
expr_stmt|;
name|localMetaData
operator|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
block|}
name|entry
operator|.
name|setId
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add the entry to the database we are working with:
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// Generate a unique key:
name|LabelPatternUtil
operator|.
name|makeLabel
argument_list|(
name|localMetaData
argument_list|,
name|database
argument_list|,
name|entry
argument_list|)
expr_stmt|;
comment|// Remove the entry from the database again, since we only added it in
comment|// order to
comment|// make sure the key was unique:
name|database
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
comment|/**      * Generate keys for all entries. All keys will be unique with respect to      * one another, and, if they are destined for an existing database, with      * respect to existing keys in the database.      */
DECL|method|generateKeys ()
specifier|private
name|void
name|generateKeys
parameter_list|()
block|{
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|BibDatabase
name|database
decl_stmt|;
name|MetaData
name|localMetaData
decl_stmt|;
comment|// Relate to existing database, if any:
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
name|database
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
name|localMetaData
operator|=
operator|new
name|MetaData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|database
operator|=
name|panel
operator|.
name|getDatabase
argument_list|()
expr_stmt|;
name|localMetaData
operator|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Iterate over the entries, add them to the database we are working
comment|// with,
comment|// and generate unique keys:
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|entry
operator|.
name|setId
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|LabelPatternUtil
operator|.
name|makeLabel
argument_list|(
name|localMetaData
argument_list|,
name|database
argument_list|,
name|entry
argument_list|)
expr_stmt|;
comment|// Add the generated key to our list:
name|keys
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getCiteKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Remove the entries from the database again, since they are not
comment|// supposed to
comment|// added yet. They only needed to be in it while we generated the keys,
comment|// to keep
comment|// control over key uniqueness.
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|database
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
DECL|method|insertNodes (JMenu menu, GroupTreeNode node)
specifier|private
name|void
name|insertNodes
parameter_list|(
name|JMenu
name|menu
parameter_list|,
name|GroupTreeNode
name|node
parameter_list|)
block|{
specifier|final
name|AbstractAction
name|action
init|=
name|getAction
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNumberOfChildren
argument_list|()
operator|==
literal|0
condition|)
block|{
name|menu
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|menu
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|JMenu
name|submenu
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getGroup
argument_list|()
operator|instanceof
name|AllEntriesGroup
condition|)
block|{
for|for
control|(
name|GroupTreeNode
name|child
range|:
name|node
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|insertNodes
argument_list|(
name|menu
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|submenu
operator|=
operator|new
name|JMenu
argument_list|(
literal|'['
operator|+
name|node
operator|.
name|getName
argument_list|()
operator|+
literal|']'
argument_list|)
expr_stmt|;
comment|// setEnabled(true) is done above/below if at least one menu
comment|// entry (item or submenu) is enabled
name|submenu
operator|.
name|setEnabled
argument_list|(
name|action
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|submenu
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|submenu
operator|.
name|add
argument_list|(
operator|new
name|JPopupMenu
operator|.
name|Separator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupTreeNode
name|child
range|:
name|node
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|insertNodes
argument_list|(
name|submenu
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
name|menu
operator|.
name|add
argument_list|(
name|submenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|submenu
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|menu
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getAction (GroupTreeNode node)
specifier|private
name|AbstractAction
name|getAction
parameter_list|(
name|GroupTreeNode
name|node
parameter_list|)
block|{
name|AbstractAction
name|action
init|=
operator|new
name|AddToGroupAction
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|action
operator|.
name|setEnabled
argument_list|(
name|node
operator|.
name|supportsAddingEntries
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
comment|/**      * Stores the information about the selected entries being scheduled for      * addition to this group. The entries are *not* added to the group at this      * time.<p/> Synchronizes on this.entries to prevent conflict with threads      * that modify the entry list.      */
DECL|class|AddToGroupAction
class|class
name|AddToGroupAction
extends|extends
name|AbstractAction
block|{
DECL|field|node
specifier|private
specifier|final
name|GroupTreeNode
name|node
decl_stmt|;
DECL|method|AddToGroupAction (GroupTreeNode node)
specifier|public
name|AddToGroupAction
parameter_list|(
name|GroupTreeNode
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|selectionModel
operator|.
name|getSelected
argument_list|()
control|)
block|{
comment|// We store the groups this entry should be added to in a Set in
comment|// the Map:
name|Set
argument_list|<
name|GroupTreeNode
argument_list|>
name|groups
init|=
name|groupAdditions
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|groups
operator|==
literal|null
condition|)
block|{
comment|// No previous definitions, so we create the Set now:
name|groups
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|groupAdditions
operator|.
name|put
argument_list|(
name|entry
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
comment|// Add the group:
name|groups
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addCallBack (CallBack cb)
specifier|public
name|void
name|addCallBack
parameter_list|(
name|CallBack
name|cb
parameter_list|)
block|{
name|callBacks
operator|.
name|add
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|class|OkListener
specifier|private
class|class
name|OkListener
implements|implements
name|ActionListener
block|{
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
comment|// First check if we are supposed to warn about duplicates. If so,
comment|// see if there
comment|// are unresolved duplicates, and warn if yes.
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WARN_ABOUT_DUPLICATES_IN_INSPECTION
argument_list|)
condition|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
comment|// Only check entries that are to be imported. Keep status
comment|// is indicated
comment|// through the search hit status of the entry:
if|if
condition|(
operator|!
name|entry
operator|.
name|isSearchHit
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// Check if the entry is a suspected, unresolved, duplicate.
comment|// This status
comment|// is indicated by the entry's group hit status:
if|if
condition|(
name|entry
operator|.
name|isGroupHit
argument_list|()
condition|)
block|{
name|CheckBoxMessage
name|cbm
init|=
operator|new
name|CheckBoxMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"There are possible duplicates (marked with an icon) that haven't been resolved. Continue?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Disable this confirmation dialog"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|,
name|cbm
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Duplicates found"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|cbm
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WARN_ABOUT_DUPLICATES_IN_INSPECTION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
block|{
return|return;
block|}
break|break;
block|}
block|}
block|}
comment|// The compund undo action used to contain all changes made by this
comment|// dialog.
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|undoName
argument_list|)
decl_stmt|;
comment|// See if we should remove any old entries for duplicate resolving:
if|if
condition|(
operator|!
name|entriesToDelete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|removeEntriesToDelete
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
comment|// If "Generate keys" is checked, generate keys unless it's already
comment|// been done:
if|if
condition|(
name|autoGenerate
operator|.
name|isSelected
argument_list|()
operator|&&
operator|!
name|generatedKeys
condition|)
block|{
name|generateKeys
argument_list|()
expr_stmt|;
block|}
comment|// Remember the choice until next time:
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GENERATE_KEYS_AFTER_INSPECTION
argument_list|,
name|autoGenerate
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selected
init|=
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|selected
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addSelectedEntries
argument_list|(
name|ce
argument_list|,
name|selected
argument_list|)
expr_stmt|;
block|}
name|dispose
argument_list|()
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|updateGUI
argument_list|(
name|selected
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateGUI (int entryCount)
specifier|private
name|void
name|updateGUI
parameter_list|(
name|int
name|entryCount
parameter_list|)
block|{
if|if
condition|(
name|newDatabase
condition|)
block|{
name|frame
operator|.
name|addTab
argument_list|(
name|panel
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
if|if
condition|(
name|entryCount
operator|==
literal|0
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No entries imported."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Number of entries successfully imported"
argument_list|)
operator|+
literal|": "
operator|+
name|entryCount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeEntriesToDelete (NamedCompound ce)
specifier|private
name|void
name|removeEntriesToDelete
parameter_list|(
name|NamedCompound
name|ce
parameter_list|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|entriesToDelete
control|)
block|{
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|panel
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addSelectedEntries (NamedCompound ce, final List<BibEntry> selected)
specifier|private
name|void
name|addSelectedEntries
parameter_list|(
name|NamedCompound
name|ce
parameter_list|,
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selected
parameter_list|)
block|{
if|if
condition|(
name|newDatabase
condition|)
block|{
comment|// Create a new BasePanel for the entries:
name|Defaults
name|defaults
init|=
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|fromPreference
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|BIBLATEX_DEFAULT_MODE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|panel
operator|=
operator|new
name|BasePanel
argument_list|(
name|frame
argument_list|,
operator|new
name|BibDatabaseContext
argument_list|(
name|defaults
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|groupingCanceled
init|=
literal|false
decl_stmt|;
comment|// Set owner/timestamp if options are enabled:
name|UpdateField
operator|.
name|setAutomaticFields
argument_list|(
name|selected
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OVERWRITE_OWNER
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OVERWRITE_TIME_STAMP
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mark entries if we should
if|if
condition|(
name|EntryMarker
operator|.
name|shouldMarkEntries
argument_list|()
condition|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|selected
control|)
block|{
name|EntryMarker
operator|.
name|markEntry
argument_list|(
name|entry
argument_list|,
name|EntryMarker
operator|.
name|IMPORT_MARK_LEVEL
argument_list|,
literal|false
argument_list|,
operator|new
name|NamedCompound
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check if we should unmark entries before adding the new ones:
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|UNMARK_ALL_ENTRIES_BEFORE_IMPORTING
argument_list|)
condition|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|EntryMarker
operator|.
name|unmarkEntry
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|,
name|panel
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|BibEntry
name|entry
range|:
name|selected
control|)
block|{
comment|// Remove settings to group/search hit status:
name|entry
operator|.
name|setSearchHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// If this entry should be added to any groups, do it now:
name|Set
argument_list|<
name|GroupTreeNode
argument_list|>
name|groups
init|=
name|groupAdditions
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|groupingCanceled
operator|&&
operator|(
name|groups
operator|!=
literal|null
operator|)
condition|)
block|{
name|groupingCanceled
operator|=
name|addToGroups
argument_list|(
name|ce
argument_list|,
name|entry
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setId
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|panel
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
DECL|method|addToGroups (NamedCompound ce, BibEntry entry, Set<GroupTreeNode> groups)
specifier|private
name|boolean
name|addToGroups
parameter_list|(
name|NamedCompound
name|ce
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|Set
argument_list|<
name|GroupTreeNode
argument_list|>
name|groups
parameter_list|)
block|{
name|boolean
name|groupingCanceled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getCiteKey
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// The entry has no key, so it can't be added to the
comment|// group.
comment|// The best course of action is probably to ask the
comment|// user if a key should be generated
comment|// immediately.
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cannot add entries to group without generating keys. Generate keys now?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Add to group"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
name|generateKeys
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|groupingCanceled
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// If the key existed, or exists now, go ahead:
if|if
condition|(
name|entry
operator|.
name|getCiteKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|GroupTreeNode
name|node
range|:
name|groups
control|)
block|{
if|if
condition|(
name|node
operator|.
name|supportsAddingEntries
argument_list|()
condition|)
block|{
comment|// Add the entry:
name|Optional
argument_list|<
name|EntriesGroupChange
argument_list|>
name|undo
init|=
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|undo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ce
operator|.
name|addEdit
argument_list|(
name|UndoableChangeEntriesOfGroup
operator|.
name|getUndoableEdit
argument_list|(
operator|new
name|GroupTreeNodeViewModel
argument_list|(
name|node
argument_list|)
argument_list|,
name|undo
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|groupingCanceled
return|;
block|}
comment|/**          * This method returns a List containing all entries that are selected          * (checkbox checked).          *          * @return a List containing the selected entries.          */
DECL|method|getSelectedEntries ()
specifier|private
name|List
argument_list|<
name|BibEntry
argument_list|>
name|getSelectedEntries
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|isSearchHit
argument_list|()
condition|)
block|{
name|selected
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|selected
return|;
block|}
block|}
DECL|method|signalStopFetching ()
specifier|private
name|void
name|signalStopFetching
parameter_list|()
block|{
name|callBacks
operator|.
name|forEach
argument_list|(
name|CallBack
operator|::
name|stopFetching
argument_list|)
expr_stmt|;
block|}
DECL|method|setWidths ()
specifier|private
name|void
name|setWidths
parameter_list|()
block|{
name|TableColumnModel
name|cm
init|=
name|glTable
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|55
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setMinWidth
argument_list|(
literal|55
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setMaxWidth
argument_list|(
literal|55
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|PAD
condition|;
name|i
operator|++
control|)
block|{
comment|// Lock the width of icon columns.
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMinWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMaxWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|INSPECTION_FIELDS
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|width
init|=
name|InternalBibtexFields
operator|.
name|getFieldLength
argument_list|(
name|INSPECTION_FIELDS
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|glTable
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|i
operator|+
name|PAD
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DeleteListener
specifier|private
class|class
name|DeleteListener
extends|extends
name|AbstractAction
block|{
DECL|method|DeleteListener ()
specifier|public
name|DeleteListener
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|DELETE_ENTRY
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|removeSelectedEntries
argument_list|()
expr_stmt|;
block|}
comment|/**          * Removes all selected entries from the table. Synchronizes on this.entries          * to prevent conflict with addition of new entries.          */
DECL|method|removeSelectedEntries ()
specifier|private
name|void
name|removeSelectedEntries
parameter_list|()
block|{
name|int
name|row
init|=
name|glTable
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|toRemove
operator|.
name|addAll
argument_list|(
name|selectionModel
operator|.
name|getSelected
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|toRemove
control|)
block|{
name|entries
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|row
operator|>=
literal|0
operator|)
operator|&&
operator|(
operator|!
name|entries
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|row
operator|=
name|Math
operator|.
name|min
argument_list|(
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|glTable
operator|.
name|addRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|SelectionButton
specifier|private
class|class
name|SelectionButton
implements|implements
name|ActionListener
block|{
DECL|field|enable
specifier|private
specifier|final
name|Boolean
name|enable
decl_stmt|;
DECL|method|SelectionButton (boolean enable)
specifier|public
name|SelectionButton
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
name|this
operator|.
name|enable
operator|=
name|enable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|glTable
operator|.
name|setValueAt
argument_list|(
name|enable
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|EntrySelectionListener
specifier|private
class|class
name|EntrySelectionListener
implements|implements
name|ListEventListener
argument_list|<
name|BibEntry
argument_list|>
block|{
annotation|@
name|Override
DECL|method|listChanged (ListEvent<BibEntry> listEvent)
specifier|public
name|void
name|listChanged
parameter_list|(
name|ListEvent
argument_list|<
name|BibEntry
argument_list|>
name|listEvent
parameter_list|)
block|{
if|if
condition|(
name|listEvent
operator|.
name|getSourceList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|preview
operator|.
name|setEntry
argument_list|(
name|listEvent
operator|.
name|getSourceList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setDividerLocation
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|preview
operator|.
name|scrollRectToVisible
argument_list|(
name|toRect
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This class handles clicks on the table that should trigger specific      * events, like opening the popup menu.      */
DECL|class|TableClickListener
specifier|private
class|class
name|TableClickListener
implements|implements
name|MouseListener
block|{
DECL|method|isIconColumn (int col)
specifier|private
name|boolean
name|isIconColumn
parameter_list|(
name|int
name|col
parameter_list|)
block|{
return|return
operator|(
name|col
operator|==
name|FILE_COL
operator|)
operator|||
operator|(
name|col
operator|==
name|URL_COL
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|mouseClicked (MouseEvent e)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
specifier|final
name|int
name|col
init|=
name|glTable
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|row
init|=
name|glTable
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isIconColumn
argument_list|(
name|col
argument_list|)
condition|)
block|{
name|BibEntry
name|entry
init|=
name|sortedList
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|==
name|FILE_COL
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
condition|)
block|{
name|FileListTableModel
name|tableModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|tableModel
operator|.
name|setContent
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableModel
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|FileListEntry
name|fl
init|=
name|tableModel
operator|.
name|getEntry
argument_list|(
literal|0
argument_list|)
decl_stmt|;
operator|(
operator|new
name|ExternalFileMenuItem
argument_list|(
name|frame
argument_list|,
name|entry
argument_list|,
literal|""
argument_list|,
name|fl
operator|.
name|link
argument_list|,
literal|null
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|fl
operator|.
name|type
argument_list|)
operator|)
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Must be URL_COL
name|openExternalLink
argument_list|(
name|URL_FIELD
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|mouseEntered (MouseEvent e)
specifier|public
name|void
name|mouseEntered
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// Nothing
block|}
annotation|@
name|Override
DECL|method|mouseExited (MouseEvent e)
specifier|public
name|void
name|mouseExited
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// Nothing
block|}
comment|/**          * Show right-click menu. If the click happened in an icon column that          * presents its own popup menu, show that. Otherwise, show the ordinary          * popup menu.          *          * @param e The mouse event that triggered the popup.          */
DECL|method|showPopup (MouseEvent e)
specifier|private
name|void
name|showPopup
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
specifier|final
name|int
name|col
init|=
name|glTable
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|==
name|FILE_COL
condition|)
block|{
name|showFileFieldMenu
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|showOrdinaryRightClickMenu
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|showOrdinaryRightClickMenu (MouseEvent e)
specifier|private
name|void
name|showOrdinaryRightClickMenu
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|popup
operator|.
name|show
argument_list|(
name|glTable
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**          * Show the popup menu for the FILE field.          *          * @param e The mouse event that triggered the popup.          */
DECL|method|showFileFieldMenu (MouseEvent e)
specifier|private
name|void
name|showFileFieldMenu
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
specifier|final
name|int
name|row
init|=
name|glTable
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
name|BibEntry
name|entry
init|=
name|sortedList
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|FileListTableModel
name|fileList
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|fileList
operator|::
name|setContent
argument_list|)
expr_stmt|;
comment|// If there are one or more links, open the first one:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileList
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileListEntry
name|flEntry
init|=
name|fileList
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|description
init|=
name|flEntry
operator|.
name|description
decl_stmt|;
if|if
condition|(
operator|(
name|description
operator|==
literal|null
operator|)
operator|||
operator|(
name|description
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|description
operator|=
name|flEntry
operator|.
name|link
expr_stmt|;
block|}
name|menu
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileMenuItem
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|entry
argument_list|,
name|description
argument_list|,
name|flEntry
operator|.
name|link
argument_list|,
name|flEntry
operator|.
name|type
operator|.
name|get
argument_list|()
operator|.
name|getIcon
argument_list|()
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|flEntry
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|showOrdinaryRightClickMenu
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|menu
operator|.
name|show
argument_list|(
name|glTable
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Open old-style external links after user clicks icon.          *          * @param fieldName The name of the BibTeX field this icon is used for.          * @param e         The MouseEvent that triggered this operation.          */
DECL|method|openExternalLink (String fieldName, MouseEvent e)
specifier|private
name|void
name|openExternalLink
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|MouseEvent
name|e
parameter_list|)
block|{
specifier|final
name|int
name|row
init|=
name|glTable
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
name|BibEntry
name|entry
init|=
name|sortedList
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
name|fieldName
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|link
lambda|->
block|{
try|try
block|{
name|JabRefDesktop
operator|.
name|openExternalViewer
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|link
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not open link"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mouseReleased (MouseEvent e)
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// Check if the user has right-clicked. If so, open the right-click
comment|// menu.
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|showPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|mousePressed (MouseEvent e)
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// Check if the user has right-clicked. If so, open the right-click
comment|// menu.
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|showPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check if any other action should be taken:
specifier|final
name|int
name|col
init|=
name|glTable
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|row
init|=
name|glTable
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
comment|// Is this the duplicate icon column, and is there an icon?
if|if
condition|(
operator|(
name|col
operator|==
name|DUPL_COL
operator|)
operator|&&
operator|(
name|glTable
operator|.
name|getValueAt
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
name|BibEntry
name|first
init|=
name|sortedList
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|other
init|=
name|DuplicateCheck
operator|.
name|containsDuplicate
argument_list|(
name|panel
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|first
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// This will be true if the duplicate is in the existing
comment|// database.
name|DuplicateResolverDialog
name|diag
init|=
operator|new
name|DuplicateResolverDialog
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|,
name|other
operator|.
name|get
argument_list|()
argument_list|,
name|first
argument_list|,
name|DuplicateResolverDialog
operator|.
name|DuplicateResolverType
operator|.
name|INSPECTION
argument_list|)
decl_stmt|;
name|diag
operator|.
name|setLocationRelativeTo
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|)
expr_stmt|;
name|diag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ImportInspectionDialog
operator|.
name|this
operator|.
name|toFront
argument_list|()
expr_stmt|;
if|if
condition|(
name|diag
operator|.
name|getSelected
argument_list|()
operator|==
name|DuplicateResolverResult
operator|.
name|KEEP_UPPER
condition|)
block|{
comment|// Remove old entry. Or... add it to a list of entries
comment|// to be deleted. We only delete
comment|// it after Ok is clicked.
name|entriesToDelete
operator|.
name|add
argument_list|(
name|other
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clear duplicate icon, which is controlled by the
comment|// group hit
comment|// field of the entry:
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|first
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|diag
operator|.
name|getSelected
argument_list|()
operator|==
name|DuplicateResolverResult
operator|.
name|KEEP_LOWER
condition|)
block|{
comment|// Remove the entry from the import inspection dialog.
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|entries
operator|.
name|remove
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|diag
operator|.
name|getSelected
argument_list|()
operator|==
name|DuplicateResolverResult
operator|.
name|KEEP_BOTH
condition|)
block|{
comment|// Do nothing.
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|first
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|diag
operator|.
name|getSelected
argument_list|()
operator|==
name|DuplicateResolverResult
operator|.
name|KEEP_MERGE
condition|)
block|{
comment|// Remove old entry. Or... add it to a list of entries
comment|// to be deleted. We only delete
comment|// it after Ok is clicked.
name|entriesToDelete
operator|.
name|add
argument_list|(
name|other
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Store merged entry for later adding
comment|// Clear duplicate icon, which is controlled by the
comment|// group hit
comment|// field of the entry:
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|diag
operator|.
name|getMergedEntry
argument_list|()
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|diag
operator|.
name|getMergedEntry
argument_list|()
operator|.
name|setSearchHit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|diag
operator|.
name|getMergedEntry
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|remove
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
comment|// Reset first so the next duplicate doesn't trigger
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Check if the duplicate is of another entry in the import:
name|other
operator|=
name|internalDuplicate
argument_list|(
name|entries
argument_list|,
name|first
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|DuplicateResolverDialog
name|diag
init|=
operator|new
name|DuplicateResolverDialog
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|,
name|first
argument_list|,
name|other
operator|.
name|get
argument_list|()
argument_list|,
name|DuplicateResolverDialog
operator|.
name|DuplicateResolverType
operator|.
name|DUPLICATE_SEARCH
argument_list|)
decl_stmt|;
name|diag
operator|.
name|setLocationRelativeTo
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|)
expr_stmt|;
name|diag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ImportInspectionDialog
operator|.
name|this
operator|.
name|toFront
argument_list|()
expr_stmt|;
name|DuplicateResolverResult
name|answer
init|=
name|diag
operator|.
name|getSelected
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|DuplicateResolverResult
operator|.
name|KEEP_UPPER
condition|)
block|{
name|entries
operator|.
name|remove
argument_list|(
name|other
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
name|DuplicateResolverResult
operator|.
name|KEEP_LOWER
condition|)
block|{
name|entries
operator|.
name|remove
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
name|DuplicateResolverResult
operator|.
name|KEEP_BOTH
condition|)
block|{
name|first
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
name|DuplicateResolverResult
operator|.
name|KEEP_MERGE
condition|)
block|{
name|diag
operator|.
name|getMergedEntry
argument_list|()
operator|.
name|setGroupHit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|diag
operator|.
name|getMergedEntry
argument_list|()
operator|.
name|setSearchHit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|diag
operator|.
name|getMergedEntry
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|remove
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|entries
operator|.
name|remove
argument_list|(
name|other
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|AttachUrl
class|class
name|AttachUrl
extends|extends
name|JMenuItem
implements|implements
name|ActionListener
block|{
DECL|method|AttachUrl ()
specifier|public
name|AttachUrl
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Attach URL"
argument_list|)
argument_list|)
expr_stmt|;
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return;
block|}
name|BibEntry
name|entry
init|=
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|JOptionPane
operator|.
name|showInputDialog
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Enter URL"
argument_list|)
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|URL_FIELD
argument_list|)
argument_list|)
decl_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|entry
operator|.
name|clearField
argument_list|(
name|URL_FIELD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
name|URL_FIELD
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|DownloadFile
class|class
name|DownloadFile
extends|extends
name|JMenuItem
implements|implements
name|ActionListener
implements|,
name|DownloadExternalFile
operator|.
name|DownloadCallback
block|{
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
DECL|method|DownloadFile ()
specifier|public
name|DownloadFile
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Download file"
argument_list|)
argument_list|)
expr_stmt|;
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent actionEvent)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
if|if
condition|(
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return;
block|}
name|entry
operator|=
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|bibtexKey
init|=
name|entry
operator|.
name|getCiteKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|bibtexKey
operator|==
literal|null
condition|)
block|{
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"This entry has no BibTeX key. Generate key now?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Download file"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|OK_CANCEL_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|OK_OPTION
condition|)
block|{
name|generateKeySelectedEntry
argument_list|()
expr_stmt|;
name|bibtexKey
operator|=
name|entry
operator|.
name|getCiteKey
argument_list|()
expr_stmt|;
block|}
block|}
name|DownloadExternalFile
name|def
init|=
operator|new
name|DownloadExternalFile
argument_list|(
name|frame
argument_list|,
name|bibDatabaseContext
argument_list|,
name|bibtexKey
argument_list|)
decl_stmt|;
try|try
block|{
name|def
operator|.
name|download
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not downlod file"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|downloadComplete (FileListEntry file)
specifier|public
name|void
name|downloadComplete
parameter_list|(
name|FileListEntry
name|file
parameter_list|)
block|{
name|ImportInspectionDialog
operator|.
name|this
operator|.
name|toFront
argument_list|()
expr_stmt|;
comment|// Hack
name|FileListTableModel
name|localModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|localModel
operator|::
name|setContent
argument_list|)
expr_stmt|;
name|localModel
operator|.
name|addEntry
argument_list|(
name|localModel
operator|.
name|getRowCount
argument_list|()
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|localModel
operator|.
name|getStringRepresentation
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|AutoSetLinks
specifier|private
class|class
name|AutoSetLinks
extends|extends
name|JMenuItem
implements|implements
name|ActionListener
block|{
DECL|method|AutoSetLinks ()
specifier|public
name|AutoSetLinks
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Automatically set file links"
argument_list|)
argument_list|)
expr_stmt|;
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent actionEvent)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
if|if
condition|(
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return;
block|}
specifier|final
name|BibEntry
name|entry
init|=
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getCiteKey
argument_list|()
operator|==
literal|null
condition|)
block|{
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"This entry has no BibTeX key. Generate key now?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Download file"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|OK_CANCEL_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|OK_OPTION
condition|)
block|{
name|generateKeySelectedEntry
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
comment|// Can't go on without the bibtex key.
block|}
block|}
specifier|final
name|FileListTableModel
name|localModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|localModel
operator|::
name|setContent
argument_list|)
expr_stmt|;
comment|// We have a static utility method for searching for all relevant
comment|// links:
name|JDialog
name|diag
init|=
operator|new
name|JDialog
argument_list|(
name|ImportInspectionDialog
operator|.
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|execute
argument_list|(
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|AutoSetLinks
operator|.
name|autoSetLinks
argument_list|(
name|entry
argument_list|,
name|localModel
argument_list|,
name|bibDatabaseContext
argument_list|,
name|e
lambda|->
block|{
if|if
condition|(
name|e
operator|.
name|getID
argument_list|()
operator|>
literal|0
condition|)
block|{
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|localModel
operator|.
name|getStringRepresentation
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|diag
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LinkLocalFile
specifier|private
class|class
name|LinkLocalFile
extends|extends
name|JMenuItem
implements|implements
name|ActionListener
implements|,
name|DownloadExternalFile
operator|.
name|DownloadCallback
block|{
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
DECL|method|LinkLocalFile ()
specifier|public
name|LinkLocalFile
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Link local file"
argument_list|)
argument_list|)
expr_stmt|;
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent actionEvent)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
if|if
condition|(
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return;
block|}
name|entry
operator|=
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileListEntry
name|flEntry
init|=
operator|new
name|FileListEntry
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|FileListEntryEditor
name|editor
init|=
operator|new
name|FileListEntryEditor
argument_list|(
name|frame
argument_list|,
name|flEntry
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|bibDatabaseContext
argument_list|)
decl_stmt|;
name|editor
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|editor
operator|.
name|okPressed
argument_list|()
condition|)
block|{
name|FileListTableModel
name|localModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|localModel
operator|::
name|setContent
argument_list|)
expr_stmt|;
name|localModel
operator|.
name|addEntry
argument_list|(
name|localModel
operator|.
name|getRowCount
argument_list|()
argument_list|,
name|flEntry
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|localModel
operator|.
name|getStringRepresentation
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|downloadComplete (FileListEntry file)
specifier|public
name|void
name|downloadComplete
parameter_list|(
name|FileListEntry
name|file
parameter_list|)
block|{
name|ImportInspectionDialog
operator|.
name|this
operator|.
name|toFront
argument_list|()
expr_stmt|;
comment|// Hack
name|FileListTableModel
name|localModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|localModel
operator|::
name|setContent
argument_list|)
expr_stmt|;
name|localModel
operator|.
name|addEntry
argument_list|(
name|localModel
operator|.
name|getRowCount
argument_list|()
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|,
name|localModel
operator|.
name|getStringRepresentation
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|glTable
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setupComparatorChooser ()
specifier|private
name|void
name|setupComparatorChooser
parameter_list|()
block|{
comment|// First column:
name|List
argument_list|<
name|Comparator
argument_list|>
name|comparators
init|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Icon columns:
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|PAD
condition|;
name|i
operator|++
control|)
block|{
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|FILE_COL
condition|)
block|{
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|IconComparator
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|URL_COL
condition|)
block|{
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|IconComparator
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|URL_FIELD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remaining columns:
for|for
control|(
name|int
name|i
init|=
name|PAD
init|;
name|i
operator|<
operator|(
name|PAD
operator|+
name|INSPECTION_FIELDS
operator|.
name|size
argument_list|()
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|FieldComparator
argument_list|(
name|INSPECTION_FIELDS
operator|.
name|get
argument_list|(
name|i
operator|-
name|PAD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Set initial sort columns:
comment|/*          * // Default sort order: String[] sortFields = new String[]          * {Globals.prefs.get(JabRefPreferences.PRIMARY_SORT_FIELD), Globals.prefs.get(JabRefPreferences.SECONDARY_SORT_FIELD),          * Globals.prefs.get(JabRefPreferences.TERTIARY_SORT_FIELD)}; boolean[] sortDirections = new          * boolean[] {Globals.prefs.getBoolean(JabRefPreferences.PRIMARY_SORT_DESCENDING),          * Globals.prefs.getBoolean(JabRefPreferences.SECONDARY_SORT_DESCENDING),          * Globals.prefs.getBoolean(JabRefPreferences.TERTIARY_SORT_DESCENDING)}; // descending          */
name|sortedList
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|comparatorChooser
operator|.
name|appendComparator
argument_list|(
name|PAD
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sortedList
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|CallBack
specifier|public
interface|interface
name|CallBack
block|{
comment|/**          * This method is called by the dialog when the user has canceled or          * signaled a stop. It is expected that any long-running fetch          * operations will stop after this method is called.          */
DECL|method|stopFetching ()
name|void
name|stopFetching
parameter_list|()
function_decl|;
block|}
comment|/**      * The "defaultSelected" boolean value determines if new entries added are      * selected for import or not. This value is true by default.      *      * @param defaultSelected The desired value.      */
DECL|method|setDefaultSelected (boolean defaultSelected)
specifier|public
name|void
name|setDefaultSelected
parameter_list|(
name|boolean
name|defaultSelected
parameter_list|)
block|{
name|this
operator|.
name|defaultSelected
operator|=
name|defaultSelected
expr_stmt|;
block|}
DECL|class|EntryTable
class|class
name|EntryTable
extends|extends
name|JTable
block|{
DECL|field|renderer
specifier|private
specifier|final
name|GeneralRenderer
name|renderer
init|=
operator|new
name|GeneralRenderer
argument_list|(
name|Color
operator|.
name|white
argument_list|)
decl_stmt|;
DECL|method|EntryTable (TableModel model)
specifier|public
name|EntryTable
parameter_list|(
name|TableModel
name|model
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|getTableHeader
argument_list|()
operator|.
name|setReorderingAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCellRenderer (int row, int column)
specifier|public
name|TableCellRenderer
name|getCellRenderer
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
return|return
name|column
operator|==
literal|0
condition|?
name|getDefaultRenderer
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
else|:
name|renderer
return|;
block|}
annotation|@
name|Override
DECL|method|getColumnClass (int col)
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getColumnClass
parameter_list|(
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|col
operator|==
literal|0
condition|)
block|{
return|return
name|Boolean
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|col
operator|<
name|PAD
condition|)
block|{
return|return
name|JLabel
operator|.
name|class
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|isCellEditable (int row, int column)
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
return|return
name|column
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|setValueAt (Object value, int row, int column)
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
comment|// Only column 0, which is controlled by BibEntry.searchHit, is
comment|// editable:
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|BibEntry
name|entry
init|=
name|sortedList
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setSearchHit
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|EntryTableFormat
specifier|private
class|class
name|EntryTableFormat
implements|implements
name|TableFormat
argument_list|<
name|BibEntry
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getColumnCount ()
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|PAD
operator|+
name|INSPECTION_FIELDS
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getColumnName (int i)
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Keep"
argument_list|)
return|;
block|}
if|if
condition|(
name|i
operator|>=
name|PAD
condition|)
block|{
return|return
name|EntryUtil
operator|.
name|capitalizeFirst
argument_list|(
name|INSPECTION_FIELDS
operator|.
name|get
argument_list|(
name|i
operator|-
name|PAD
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|getColumnValue (BibEntry entry, int i)
specifier|public
name|Object
name|getColumnValue
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
name|entry
operator|.
name|isSearchHit
argument_list|()
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|<
name|PAD
condition|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
name|DUPL_COL
case|:
return|return
name|entry
operator|.
name|isGroupHit
argument_list|()
condition|?
name|duplLabel
else|:
literal|null
return|;
case|case
name|FILE_COL
case|:
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
condition|)
block|{
name|FileListTableModel
name|model
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setContent
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|fileLabel
operator|.
name|setToolTipText
argument_list|(
name|model
operator|.
name|getToolTipHTMLRepresentation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getRowCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fileLabel
operator|.
name|setIcon
argument_list|(
name|model
operator|.
name|getEntry
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|.
name|get
argument_list|()
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fileLabel
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
case|case
name|URL_COL
case|:
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
name|URL_FIELD
argument_list|)
condition|)
block|{
name|urlLabel
operator|.
name|setToolTipText
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|URL_FIELD
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|urlLabel
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
default|default:
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|String
name|field
init|=
name|INSPECTION_FIELDS
operator|.
name|get
argument_list|(
name|i
operator|-
name|PAD
argument_list|)
decl_stmt|;
if|if
condition|(
name|InternalBibtexFields
operator|.
name|getFieldExtras
argument_list|(
name|field
argument_list|)
operator|.
name|contains
argument_list|(
name|FieldProperties
operator|.
name|PERSON_NAMES
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getFieldOptional
argument_list|(
name|field
argument_list|)
operator|.
name|map
argument_list|(
name|AuthorList
operator|::
name|fixAuthorNatbib
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setStatus (String s)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|frame
operator|.
name|setStatus
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|showMessage (Object message, String title, int msgType)
specifier|public
name|void
name|showMessage
parameter_list|(
name|Object
name|message
parameter_list|,
name|String
name|title
parameter_list|,
name|int
name|msgType
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
argument_list|,
name|message
argument_list|,
name|title
argument_list|,
name|msgType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|showMessage (String message)
specifier|public
name|void
name|showMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

