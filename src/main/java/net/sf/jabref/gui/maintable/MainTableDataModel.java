begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.maintable
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
package|;
end_package

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|*
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|matchers
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|GroupMatcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GlazedEntrySorter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|search
operator|.
name|HitOrMissComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|search
operator|.
name|matchers
operator|.
name|EverythingMatcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|search
operator|.
name|matchers
operator|.
name|SearchMatcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|comparator
operator|.
name|IsMarkedComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|DatabaseChangeListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|MainTableDataModel
specifier|public
class|class
name|MainTableDataModel
block|{
DECL|field|eventList
specifier|private
specifier|final
name|GlazedEntrySorter
name|eventList
decl_stmt|;
DECL|field|sortedForMarking
specifier|private
specifier|final
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|sortedForMarking
decl_stmt|;
DECL|field|sortedForTable
specifier|private
specifier|final
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|sortedForTable
decl_stmt|;
DECL|field|sortedForSearch
specifier|private
specifier|final
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|sortedForSearch
decl_stmt|;
DECL|field|sortedForGrouping
specifier|private
specifier|final
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|sortedForGrouping
decl_stmt|;
DECL|field|markingComparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|BibEntry
argument_list|>
name|markingComparator
init|=
operator|new
name|IsMarkedComparator
argument_list|()
decl_stmt|;
DECL|field|filterSearchToggle
specifier|private
specifier|final
name|StartStopListAction
argument_list|<
name|BibEntry
argument_list|>
name|filterSearchToggle
decl_stmt|;
DECL|field|filterGroupToggle
specifier|private
specifier|final
name|StartStopListAction
argument_list|<
name|BibEntry
argument_list|>
name|filterGroupToggle
decl_stmt|;
DECL|field|isFloatSearchActive
specifier|private
name|boolean
name|isFloatSearchActive
decl_stmt|;
DECL|field|isFloatGroupingActive
specifier|private
name|boolean
name|isFloatGroupingActive
decl_stmt|;
DECL|field|searchComparator
specifier|private
name|Comparator
argument_list|<
name|BibEntry
argument_list|>
name|searchComparator
decl_stmt|;
DECL|field|groupComparator
specifier|private
name|Comparator
argument_list|<
name|BibEntry
argument_list|>
name|groupComparator
decl_stmt|;
DECL|field|searchMatcher
specifier|private
name|Matcher
argument_list|<
name|BibEntry
argument_list|>
name|searchMatcher
decl_stmt|;
DECL|field|groupMatcher
specifier|private
name|Matcher
argument_list|<
name|BibEntry
argument_list|>
name|groupMatcher
decl_stmt|;
DECL|field|finalList
specifier|private
specifier|final
name|EventList
argument_list|<
name|BibEntry
argument_list|>
name|finalList
decl_stmt|;
DECL|method|MainTableDataModel (BibDatabaseContext context)
specifier|public
name|MainTableDataModel
parameter_list|(
name|BibDatabaseContext
name|context
parameter_list|)
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|context
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|eventList
operator|=
operator|new
name|GlazedEntrySorter
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|EventList
argument_list|<
name|BibEntry
argument_list|>
name|initialEventList
init|=
name|eventList
operator|.
name|getTheList
argument_list|()
decl_stmt|;
comment|// This SortedList has a Comparator controlled by the TableComparatorChooser
comment|// we are going to install, which responds to user sorting selections:
name|sortedForTable
operator|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
name|initialEventList
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// This SortedList applies afterwards, and floats marked entries:
name|sortedForMarking
operator|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
name|sortedForTable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// This SortedList applies afterwards, and can float search hits:
name|sortedForSearch
operator|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
name|sortedForMarking
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// This SortedList applies afterwards, and can float grouping hits:
name|sortedForGrouping
operator|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
name|sortedForSearch
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FilterList
argument_list|<
name|BibEntry
argument_list|>
name|groupFilterList
init|=
operator|new
name|FilterList
argument_list|<>
argument_list|(
name|sortedForGrouping
argument_list|,
name|EverythingMatcher
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|filterGroupToggle
operator|=
operator|new
name|StartStopListAction
argument_list|<>
argument_list|(
name|groupFilterList
argument_list|,
name|GroupMatcher
operator|.
name|INSTANCE
argument_list|,
name|EverythingMatcher
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|filterGroupToggle
operator|.
name|updateFilterList
argument_list|(
name|groupFilterList
argument_list|)
expr_stmt|;
name|FilterList
argument_list|<
name|BibEntry
argument_list|>
name|searchFilterList
init|=
operator|new
name|FilterList
argument_list|<>
argument_list|(
name|groupFilterList
argument_list|,
name|EverythingMatcher
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|filterSearchToggle
operator|=
operator|new
name|StartStopListAction
argument_list|<>
argument_list|(
name|searchFilterList
argument_list|,
name|SearchMatcher
operator|.
name|INSTANCE
argument_list|,
name|EverythingMatcher
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|filterSearchToggle
operator|.
name|updateFilterList
argument_list|(
name|searchFilterList
argument_list|)
expr_stmt|;
name|finalList
operator|=
name|searchFilterList
expr_stmt|;
name|searchMatcher
operator|=
literal|null
expr_stmt|;
name|groupMatcher
operator|=
literal|null
expr_stmt|;
name|searchComparator
operator|=
literal|null
expr_stmt|;
name|groupComparator
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getEventList ()
specifier|public
name|DatabaseChangeListener
name|getEventList
parameter_list|()
block|{
return|return
name|this
operator|.
name|eventList
return|;
block|}
DECL|method|getSearchMatcher ()
name|Matcher
argument_list|<
name|BibEntry
argument_list|>
name|getSearchMatcher
parameter_list|()
block|{
return|return
name|searchMatcher
return|;
block|}
DECL|method|getGroupMatcher ()
name|Matcher
argument_list|<
name|BibEntry
argument_list|>
name|getGroupMatcher
parameter_list|()
block|{
return|return
name|groupMatcher
return|;
block|}
DECL|method|getFilterSearchToggle ()
specifier|public
name|StartStopListAction
argument_list|<
name|BibEntry
argument_list|>
name|getFilterSearchToggle
parameter_list|()
block|{
return|return
name|filterSearchToggle
return|;
block|}
DECL|method|getFilterGroupToggle ()
specifier|public
name|StartStopListAction
argument_list|<
name|BibEntry
argument_list|>
name|getFilterGroupToggle
parameter_list|()
block|{
return|return
name|filterGroupToggle
return|;
block|}
DECL|method|refreshSorting ()
specifier|public
name|void
name|refreshSorting
parameter_list|()
block|{
name|sortedForMarking
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Comparator
argument_list|<
name|BibEntry
argument_list|>
name|newComparator
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|FLOAT_MARKED_ENTRIES
argument_list|)
condition|)
block|{
name|newComparator
operator|=
name|markingComparator
expr_stmt|;
block|}
else|else
block|{
name|newComparator
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|sortedForMarking
operator|.
name|getComparator
argument_list|()
operator|!=
name|newComparator
condition|)
block|{
name|sortedForMarking
operator|.
name|setComparator
argument_list|(
name|newComparator
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sortedForMarking
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|sortedForSearch
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|sortedForSearch
operator|.
name|getComparator
argument_list|()
operator|!=
name|searchComparator
condition|)
block|{
name|sortedForSearch
operator|.
name|setComparator
argument_list|(
name|searchComparator
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sortedForSearch
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|sortedForGrouping
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|sortedForGrouping
operator|.
name|getComparator
argument_list|()
operator|!=
name|groupComparator
condition|)
block|{
name|sortedForGrouping
operator|.
name|setComparator
argument_list|(
name|groupComparator
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sortedForGrouping
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Adds a sorting rule that floats hits to the top, and causes non-hits to be grayed out:      */
DECL|method|showFloatSearch ()
specifier|public
name|void
name|showFloatSearch
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isFloatSearchActive
condition|)
block|{
name|isFloatSearchActive
operator|=
literal|true
expr_stmt|;
name|searchMatcher
operator|=
name|SearchMatcher
operator|.
name|INSTANCE
expr_stmt|;
name|searchComparator
operator|=
operator|new
name|HitOrMissComparator
argument_list|(
name|searchMatcher
argument_list|)
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Removes sorting by search results, and graying out of non-hits.      */
DECL|method|stopShowingFloatSearch ()
specifier|public
name|void
name|stopShowingFloatSearch
parameter_list|()
block|{
if|if
condition|(
name|isFloatSearchActive
condition|)
block|{
name|isFloatSearchActive
operator|=
literal|false
expr_stmt|;
name|searchMatcher
operator|=
literal|null
expr_stmt|;
name|searchComparator
operator|=
literal|null
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isFloatSearchActive ()
specifier|public
name|boolean
name|isFloatSearchActive
parameter_list|()
block|{
return|return
name|isFloatSearchActive
return|;
block|}
comment|/**      * Adds a sorting rule that floats group hits to the top, and causes non-hits to be grayed out:      */
DECL|method|showFloatGrouping ()
specifier|public
name|void
name|showFloatGrouping
parameter_list|()
block|{
name|isFloatGroupingActive
operator|=
literal|true
expr_stmt|;
name|groupMatcher
operator|=
name|GroupMatcher
operator|.
name|INSTANCE
expr_stmt|;
name|groupComparator
operator|=
operator|new
name|HitOrMissComparator
argument_list|(
name|groupMatcher
argument_list|)
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
comment|/**      * Removes sorting by group, and graying out of non-hits.      */
DECL|method|stopShowingFloatGrouping ()
specifier|public
name|void
name|stopShowingFloatGrouping
parameter_list|()
block|{
if|if
condition|(
name|isFloatGroupingActive
condition|)
block|{
name|isFloatGroupingActive
operator|=
literal|false
expr_stmt|;
name|groupMatcher
operator|=
literal|null
expr_stmt|;
name|groupComparator
operator|=
literal|null
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isFloatGroupingActive ()
name|boolean
name|isFloatGroupingActive
parameter_list|()
block|{
return|return
name|isFloatGroupingActive
return|;
block|}
DECL|method|getTableRows ()
name|EventList
argument_list|<
name|BibEntry
argument_list|>
name|getTableRows
parameter_list|()
block|{
return|return
name|finalList
return|;
block|}
comment|/**      * Returns the List of entries sorted by a user-selected term. This is the      * sorting before marking, search etc. applies.      *<p>      * Note: The returned List must not be modified from the outside      *      * @return The sorted list of entries.      */
DECL|method|getSortedForTable ()
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|getSortedForTable
parameter_list|()
block|{
return|return
name|sortedForTable
return|;
block|}
DECL|class|StartStopListAction
specifier|public
specifier|static
class|class
name|StartStopListAction
parameter_list|<
name|E
parameter_list|>
block|{
DECL|field|active
specifier|private
specifier|final
name|Matcher
argument_list|<
name|E
argument_list|>
name|active
decl_stmt|;
DECL|field|inactive
specifier|private
specifier|final
name|Matcher
argument_list|<
name|E
argument_list|>
name|inactive
decl_stmt|;
DECL|field|list
specifier|private
name|FilterList
argument_list|<
name|E
argument_list|>
name|list
decl_stmt|;
DECL|field|isActive
specifier|private
name|boolean
name|isActive
decl_stmt|;
DECL|method|StartStopListAction (FilterList<E> list, Matcher<E> active, Matcher<E> inactive)
specifier|private
name|StartStopListAction
parameter_list|(
name|FilterList
argument_list|<
name|E
argument_list|>
name|list
parameter_list|,
name|Matcher
argument_list|<
name|E
argument_list|>
name|active
parameter_list|,
name|Matcher
argument_list|<
name|E
argument_list|>
name|inactive
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
name|this
operator|.
name|active
operator|=
name|active
expr_stmt|;
name|this
operator|.
name|inactive
operator|=
name|inactive
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|list
operator|.
name|setMatcher
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|isActive
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|isActive
condition|)
block|{
name|list
operator|.
name|setMatcher
argument_list|(
name|inactive
argument_list|)
expr_stmt|;
name|isActive
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|isActive ()
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|isActive
return|;
block|}
DECL|method|updateFilterList (FilterList<E> filterList)
name|void
name|updateFilterList
parameter_list|(
name|FilterList
argument_list|<
name|E
argument_list|>
name|filterList
parameter_list|)
block|{
name|list
operator|=
name|filterList
expr_stmt|;
if|if
condition|(
name|isActive
condition|)
block|{
name|list
operator|.
name|setMatcher
argument_list|(
name|active
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|setMatcher
argument_list|(
name|inactive
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

