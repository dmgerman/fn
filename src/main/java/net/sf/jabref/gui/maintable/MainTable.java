begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.maintable
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JViewport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|TransferHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|TableUI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|DefaultTableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumnModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|GroupMatcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|EntryMarker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|renderer
operator|.
name|CompleteRenderer
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|renderer
operator|.
name|GeneralRenderer
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|renderer
operator|.
name|IncompleteRenderer
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FirstColumnComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|IconComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|IsMarkedComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|RankingFieldComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
operator|.
name|comparator
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|matchers
operator|.
name|SearchMatcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|TypedBibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|EntryTableTransferHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|HitOrMissComparator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldsUtils
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|SortedList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEventListener
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|matchers
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|DefaultEventSelectionModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|DefaultEventTableModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|GlazedListsSwing
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|TableComparatorChooser
import|;
end_import

begin_comment
comment|/**  * The central table which displays the bibtex entries.  *  * User: alver  * Date: Oct 12, 2005  * Time: 10:29:39 PM  *  */
end_comment

begin_class
DECL|class|MainTable
specifier|public
class|class
name|MainTable
extends|extends
name|JTable
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MainTable
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tableFormat
specifier|private
specifier|final
name|MainTableFormat
name|tableFormat
decl_stmt|;
DECL|field|panel
specifier|private
specifier|final
name|BasePanel
name|panel
decl_stmt|;
DECL|field|sortedForMarking
specifier|private
specifier|final
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|sortedForMarking
decl_stmt|;
DECL|field|sortedForTable
specifier|private
specifier|final
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|sortedForTable
decl_stmt|;
DECL|field|sortedForSearch
specifier|private
specifier|final
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|sortedForSearch
decl_stmt|;
DECL|field|sortedForGrouping
specifier|private
specifier|final
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|sortedForGrouping
decl_stmt|;
DECL|field|tableColorCodes
specifier|private
specifier|final
name|boolean
name|tableColorCodes
decl_stmt|;
DECL|field|isFloatSearchActive
specifier|private
name|boolean
name|isFloatSearchActive
decl_stmt|;
DECL|field|isFloatGroupingActive
specifier|private
name|boolean
name|isFloatGroupingActive
decl_stmt|;
DECL|field|localSelectionModel
specifier|private
specifier|final
name|DefaultEventSelectionModel
argument_list|<
name|BibEntry
argument_list|>
name|localSelectionModel
decl_stmt|;
DECL|field|comparatorChooser
specifier|private
specifier|final
name|TableComparatorChooser
argument_list|<
name|BibEntry
argument_list|>
name|comparatorChooser
decl_stmt|;
DECL|field|pane
specifier|private
specifier|final
name|JScrollPane
name|pane
decl_stmt|;
DECL|field|searchComparator
specifier|private
name|Comparator
argument_list|<
name|BibEntry
argument_list|>
name|searchComparator
decl_stmt|;
DECL|field|groupComparator
specifier|private
name|Comparator
argument_list|<
name|BibEntry
argument_list|>
name|groupComparator
decl_stmt|;
DECL|field|markingComparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|BibEntry
argument_list|>
name|markingComparator
init|=
operator|new
name|IsMarkedComparator
argument_list|()
decl_stmt|;
DECL|field|searchMatcher
specifier|private
name|Matcher
argument_list|<
name|BibEntry
argument_list|>
name|searchMatcher
decl_stmt|;
DECL|field|groupMatcher
specifier|private
name|Matcher
argument_list|<
name|BibEntry
argument_list|>
name|groupMatcher
decl_stmt|;
comment|// needed to activate/deactivate the listener
DECL|field|tableColumnListener
specifier|private
specifier|final
name|PersistenceTableColumnListener
name|tableColumnListener
decl_stmt|;
comment|// Constants used to define how a cell should be rendered.
DECL|field|REQUIRED
specifier|private
specifier|static
specifier|final
name|int
name|REQUIRED
init|=
literal|1
decl_stmt|;
DECL|field|OPTIONAL
specifier|private
specifier|static
specifier|final
name|int
name|OPTIONAL
init|=
literal|2
decl_stmt|;
DECL|field|OTHER
specifier|private
specifier|static
specifier|final
name|int
name|OTHER
init|=
literal|3
decl_stmt|;
DECL|field|BOOLEAN
specifier|private
specifier|static
specifier|final
name|int
name|BOOLEAN
init|=
literal|4
decl_stmt|;
DECL|field|defRenderer
specifier|private
specifier|static
name|GeneralRenderer
name|defRenderer
decl_stmt|;
DECL|field|reqRenderer
specifier|private
specifier|static
name|GeneralRenderer
name|reqRenderer
decl_stmt|;
DECL|field|optRenderer
specifier|private
specifier|static
name|GeneralRenderer
name|optRenderer
decl_stmt|;
DECL|field|grayedOutRenderer
specifier|private
specifier|static
name|GeneralRenderer
name|grayedOutRenderer
decl_stmt|;
DECL|field|veryGrayedOutRenderer
specifier|private
specifier|static
name|GeneralRenderer
name|veryGrayedOutRenderer
decl_stmt|;
DECL|field|markedRenderers
specifier|private
specifier|static
name|GeneralRenderer
index|[]
name|markedRenderers
decl_stmt|;
DECL|field|incRenderer
specifier|private
specifier|static
name|IncompleteRenderer
name|incRenderer
decl_stmt|;
DECL|field|compRenderer
specifier|private
specifier|static
name|CompleteRenderer
name|compRenderer
decl_stmt|;
DECL|field|grayedOutNumberRenderer
specifier|private
specifier|static
name|CompleteRenderer
name|grayedOutNumberRenderer
decl_stmt|;
DECL|field|veryGrayedOutNumberRenderer
specifier|private
specifier|static
name|CompleteRenderer
name|veryGrayedOutNumberRenderer
decl_stmt|;
DECL|field|markedNumberRenderers
specifier|private
specifier|static
name|CompleteRenderer
index|[]
name|markedNumberRenderers
decl_stmt|;
static|static
block|{
name|MainTable
operator|.
name|updateRenderers
argument_list|()
expr_stmt|;
block|}
DECL|method|MainTable (MainTableFormat tableFormat, EventList<BibEntry> list, JabRefFrame frame, BasePanel panel)
specifier|public
name|MainTable
parameter_list|(
name|MainTableFormat
name|tableFormat
parameter_list|,
name|EventList
argument_list|<
name|BibEntry
argument_list|>
name|list
parameter_list|,
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanel
name|panel
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|addFocusListener
argument_list|(
name|Globals
operator|.
name|focusListener
argument_list|)
expr_stmt|;
name|setAutoResizeMode
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_RESIZE_MODE
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableFormat
operator|=
name|tableFormat
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
comment|// This SortedList has a Comparator controlled by the TableComparatorChooser
comment|// we are going to install, which responds to user sorting selections:
name|sortedForTable
operator|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
name|list
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// This SortedList applies afterwards, and floats marked entries:
name|sortedForMarking
operator|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
name|sortedForTable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// This SortedList applies afterwards, and can float search hits:
name|sortedForSearch
operator|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
name|sortedForMarking
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// This SortedList applies afterwards, and can float grouping hits:
name|sortedForGrouping
operator|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
name|sortedForSearch
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|searchMatcher
operator|=
literal|null
expr_stmt|;
name|groupMatcher
operator|=
literal|null
expr_stmt|;
name|searchComparator
operator|=
literal|null
expr_stmt|;
name|groupComparator
operator|=
literal|null
expr_stmt|;
name|DefaultEventTableModel
argument_list|<
name|BibEntry
argument_list|>
name|tableModel
init|=
operator|(
name|DefaultEventTableModel
argument_list|<
name|BibEntry
argument_list|>
operator|)
name|GlazedListsSwing
operator|.
name|eventTableModelWithThreadProxyList
argument_list|(
name|sortedForGrouping
argument_list|,
name|tableFormat
argument_list|)
decl_stmt|;
name|setModel
argument_list|(
name|tableModel
argument_list|)
expr_stmt|;
name|tableColorCodes
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_COLOR_CODES_ON
argument_list|)
expr_stmt|;
name|localSelectionModel
operator|=
operator|(
name|DefaultEventSelectionModel
argument_list|<
name|BibEntry
argument_list|>
operator|)
name|GlazedListsSwing
operator|.
name|eventSelectionModelWithThreadProxyList
argument_list|(
name|sortedForGrouping
argument_list|)
expr_stmt|;
name|setSelectionModel
argument_list|(
name|localSelectionModel
argument_list|)
expr_stmt|;
name|pane
operator|=
operator|new
name|JScrollPane
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|pane
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|()
argument_list|)
expr_stmt|;
name|pane
operator|.
name|getViewport
argument_list|()
operator|.
name|setBackground
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_BACKGROUND
argument_list|)
argument_list|)
expr_stmt|;
name|setGridColor
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|GRID_COLOR
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_SHOW_GRID
argument_list|)
condition|)
block|{
name|setShowGrid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setShowGrid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setIntercellSpacing
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|setTableHeader
argument_list|(
operator|new
name|PreventDraggingJTableHeader
argument_list|(
name|this
argument_list|,
name|tableFormat
argument_list|)
argument_list|)
expr_stmt|;
name|comparatorChooser
operator|=
name|this
operator|.
name|createTableComparatorChooser
argument_list|(
name|this
argument_list|,
name|sortedForTable
argument_list|,
name|TableComparatorChooser
operator|.
name|MULTIPLE_COLUMN_KEYBOARD
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableColumnListener
operator|=
operator|new
name|PersistenceTableColumnListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// TODO: Figure out, whether this call is needed.
name|getSelected
argument_list|()
expr_stmt|;
comment|// enable DnD
name|setDragEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TransferHandler
name|xfer
init|=
operator|new
name|EntryTableTransferHandler
argument_list|(
name|this
argument_list|,
name|frame
argument_list|,
name|panel
argument_list|)
decl_stmt|;
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
name|pane
operator|.
name|setTransferHandler
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
name|setupComparatorChooser
argument_list|()
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
name|setWidths
argument_list|()
expr_stmt|;
block|}
DECL|method|refreshSorting ()
specifier|public
name|void
name|refreshSorting
parameter_list|()
block|{
name|sortedForMarking
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|FLOAT_MARKED_ENTRIES
argument_list|)
condition|)
block|{
name|sortedForMarking
operator|.
name|setComparator
argument_list|(
name|markingComparator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortedForMarking
operator|.
name|setComparator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sortedForMarking
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|sortedForSearch
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|sortedForSearch
operator|.
name|setComparator
argument_list|(
name|searchComparator
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sortedForSearch
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|sortedForGrouping
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|sortedForGrouping
operator|.
name|setComparator
argument_list|(
name|groupComparator
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sortedForGrouping
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Adds a sorting rule that floats hits to the top, and causes non-hits to be grayed out:      */
DECL|method|showFloatSearch ()
specifier|public
name|void
name|showFloatSearch
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isFloatSearchActive
condition|)
block|{
name|isFloatSearchActive
operator|=
literal|true
expr_stmt|;
name|searchMatcher
operator|=
name|SearchMatcher
operator|.
name|INSTANCE
expr_stmt|;
name|searchComparator
operator|=
operator|new
name|HitOrMissComparator
argument_list|(
name|searchMatcher
argument_list|)
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
name|scrollTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes sorting by search results, and graying out of non-hits.      */
DECL|method|stopShowingFloatSearch ()
specifier|public
name|void
name|stopShowingFloatSearch
parameter_list|()
block|{
if|if
condition|(
name|isFloatSearchActive
condition|)
block|{
name|isFloatSearchActive
operator|=
literal|false
expr_stmt|;
name|searchMatcher
operator|=
literal|null
expr_stmt|;
name|searchComparator
operator|=
literal|null
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isFloatSearchActive ()
specifier|public
name|boolean
name|isFloatSearchActive
parameter_list|()
block|{
return|return
name|isFloatSearchActive
return|;
block|}
comment|/**      * Adds a sorting rule that floats group hits to the top, and causes non-hits to be grayed out:      */
DECL|method|showFloatGrouping ()
specifier|public
name|void
name|showFloatGrouping
parameter_list|()
block|{
name|isFloatGroupingActive
operator|=
literal|true
expr_stmt|;
name|groupMatcher
operator|=
name|GroupMatcher
operator|.
name|INSTANCE
expr_stmt|;
name|groupComparator
operator|=
operator|new
name|HitOrMissComparator
argument_list|(
name|groupMatcher
argument_list|)
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
comment|/**      * Removes sorting by group, and graying out of non-hits.      */
DECL|method|stopShowingFloatGrouping ()
specifier|public
name|void
name|stopShowingFloatGrouping
parameter_list|()
block|{
if|if
condition|(
name|isFloatGroupingActive
condition|)
block|{
name|isFloatGroupingActive
operator|=
literal|false
expr_stmt|;
name|groupMatcher
operator|=
literal|null
expr_stmt|;
name|groupComparator
operator|=
literal|null
expr_stmt|;
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isFloatGroupingActive ()
specifier|public
name|boolean
name|isFloatGroupingActive
parameter_list|()
block|{
return|return
name|isFloatGroupingActive
return|;
block|}
DECL|method|getTableRows ()
specifier|public
name|EventList
argument_list|<
name|BibEntry
argument_list|>
name|getTableRows
parameter_list|()
block|{
return|return
name|sortedForGrouping
return|;
block|}
DECL|method|addSelectionListener (ListEventListener<BibEntry> listener)
specifier|public
name|void
name|addSelectionListener
parameter_list|(
name|ListEventListener
argument_list|<
name|BibEntry
argument_list|>
name|listener
parameter_list|)
block|{
name|getSelected
argument_list|()
operator|.
name|addListEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|getPane ()
specifier|public
name|JScrollPane
name|getPane
parameter_list|()
block|{
return|return
name|pane
return|;
block|}
annotation|@
name|Override
DECL|method|getToolTipText (MouseEvent e)
specifier|public
name|String
name|getToolTipText
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// Set tooltip text for all columns which are not fully displayed
name|String
name|toolTipText
init|=
literal|null
decl_stmt|;
name|Point
name|p
init|=
name|e
operator|.
name|getPoint
argument_list|()
decl_stmt|;
name|int
name|col
init|=
name|columnAtPoint
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|rowAtPoint
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Component
name|comp
init|=
name|prepareRenderer
argument_list|(
name|getCellRenderer
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
argument_list|,
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|Rectangle
name|bounds
init|=
name|getCellRect
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Dimension
name|d
init|=
name|comp
operator|.
name|getPreferredSize
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|d
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|d
operator|.
name|width
operator|>
name|bounds
operator|.
name|width
operator|)
operator|&&
operator|(
name|getValueAt
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
name|toolTipText
operator|=
name|getValueAt
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|toolTipText
return|;
block|}
annotation|@
name|Override
DECL|method|getCellRenderer (int row, int column)
specifier|public
name|TableCellRenderer
name|getCellRenderer
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|int
name|score
init|=
operator|-
literal|3
decl_stmt|;
name|DefaultTableCellRenderer
name|renderer
init|=
name|MainTable
operator|.
name|defRenderer
decl_stmt|;
name|int
name|status
init|=
name|getCellStatus
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isFloatSearchActive
operator|||
name|matches
argument_list|(
name|row
argument_list|,
name|searchMatcher
argument_list|)
condition|)
block|{
name|score
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isFloatGroupingActive
operator|||
name|matches
argument_list|(
name|row
argument_list|,
name|groupMatcher
argument_list|)
condition|)
block|{
name|score
operator|+=
literal|2
expr_stmt|;
block|}
comment|// Now, a grayed out renderer is for entries with -1, and
comment|// a very grayed out one for entries with -2
if|if
condition|(
name|score
operator|<
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
name|MainTable
operator|.
name|veryGrayedOutNumberRenderer
operator|.
name|setNumber
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|renderer
operator|=
name|MainTable
operator|.
name|veryGrayedOutNumberRenderer
expr_stmt|;
block|}
else|else
block|{
name|renderer
operator|=
name|MainTable
operator|.
name|veryGrayedOutRenderer
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|score
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
name|MainTable
operator|.
name|grayedOutNumberRenderer
operator|.
name|setNumber
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|renderer
operator|=
name|MainTable
operator|.
name|grayedOutNumberRenderer
expr_stmt|;
block|}
else|else
block|{
name|renderer
operator|=
name|MainTable
operator|.
name|grayedOutRenderer
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|isComplete
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|MainTable
operator|.
name|compRenderer
operator|.
name|setNumber
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|int
name|marking
init|=
name|isMarked
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|marking
operator|>
literal|0
condition|)
block|{
name|marking
operator|=
name|Math
operator|.
name|min
argument_list|(
name|marking
argument_list|,
name|EntryMarker
operator|.
name|MARK_COLOR_LEVELS
argument_list|)
expr_stmt|;
name|renderer
operator|=
name|MainTable
operator|.
name|markedNumberRenderers
index|[
name|marking
operator|-
literal|1
index|]
expr_stmt|;
name|MainTable
operator|.
name|markedNumberRenderers
index|[
name|marking
operator|-
literal|1
index|]
operator|.
name|setNumber
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|renderer
operator|=
name|MainTable
operator|.
name|compRenderer
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Return a renderer with red background if the entry is incomplete.
name|MainTable
operator|.
name|incRenderer
operator|.
name|setNumber
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|renderer
operator|=
name|MainTable
operator|.
name|incRenderer
expr_stmt|;
block|}
name|renderer
operator|.
name|setHorizontalAlignment
argument_list|(
name|JLabel
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tableColorCodes
condition|)
block|{
if|if
condition|(
name|status
operator|==
name|MainTable
operator|.
name|REQUIRED
condition|)
block|{
name|renderer
operator|=
name|MainTable
operator|.
name|reqRenderer
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|MainTable
operator|.
name|OPTIONAL
condition|)
block|{
name|renderer
operator|=
name|MainTable
operator|.
name|optRenderer
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|MainTable
operator|.
name|BOOLEAN
condition|)
block|{
name|renderer
operator|=
operator|(
name|DefaultTableCellRenderer
operator|)
name|getDefaultRenderer
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For MARKED feature:
name|int
name|marking
init|=
name|isMarked
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|column
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|marking
operator|>
literal|0
operator|)
condition|)
block|{
name|marking
operator|=
name|Math
operator|.
name|min
argument_list|(
name|marking
argument_list|,
name|EntryMarker
operator|.
name|MARK_COLOR_LEVELS
argument_list|)
expr_stmt|;
name|renderer
operator|=
name|MainTable
operator|.
name|markedRenderers
index|[
name|marking
operator|-
literal|1
index|]
expr_stmt|;
block|}
return|return
name|renderer
return|;
block|}
DECL|method|setWidths ()
specifier|private
name|void
name|setWidths
parameter_list|()
block|{
comment|// Setting column widths:
name|int
name|ncWidth
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|NUMBER_COL_WIDTH
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|widthsFromPreferences
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_WIDTHS
argument_list|)
decl_stmt|;
name|TableColumnModel
name|cm
init|=
name|getColumnModel
argument_list|()
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|ncWidth
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|cm
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MainTableColumn
name|mainTableColumn
init|=
name|tableFormat
operator|.
name|getTableColumn
argument_list|(
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|getModelIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|SpecialFieldsUtils
operator|.
name|FIELDNAME_RANKING
operator|.
name|equals
argument_list|(
name|mainTableColumn
operator|.
name|getColumnName
argument_list|()
argument_list|)
condition|)
block|{
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL_RANKING
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMinWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL_RANKING
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMaxWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL_RANKING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mainTableColumn
operator|.
name|isIconColumn
argument_list|()
condition|)
block|{
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMinWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMaxWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|allColumns
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_NAMES
argument_list|)
decl_stmt|;
comment|// find index of current mainTableColumn in allColumns
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|allColumns
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|allColumns
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|mainTableColumn
operator|.
name|getDisplayName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
comment|// set preferred width by using found index j in the width array
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|widthsFromPreferences
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Exception while setting column widths. Choosing default."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|GUIGlobals
operator|.
name|DEFAULT_FIELD_LENGTH
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
block|}
DECL|method|getEntryAt (int row)
specifier|public
name|BibEntry
name|getEntryAt
parameter_list|(
name|int
name|row
parameter_list|)
block|{
return|return
name|sortedForGrouping
operator|.
name|get
argument_list|(
name|row
argument_list|)
return|;
block|}
comment|/**      * @return the return value is never null      */
DECL|method|getSelectedEntries ()
specifier|public
name|List
argument_list|<
name|BibEntry
argument_list|>
name|getSelectedEntries
parameter_list|()
block|{
return|return
name|getSelected
argument_list|()
return|;
block|}
DECL|method|getCurrentSortOrder ()
specifier|private
name|List
argument_list|<
name|Boolean
argument_list|>
name|getCurrentSortOrder
parameter_list|()
block|{
name|List
argument_list|<
name|Boolean
argument_list|>
name|order
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|sortCols
init|=
name|comparatorChooser
operator|.
name|getSortingColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|sortCols
control|)
block|{
name|order
operator|.
name|add
argument_list|(
name|comparatorChooser
operator|.
name|isColumnReverse
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|order
return|;
block|}
DECL|method|getCurrentSortFields ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getCurrentSortFields
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|sortCols
init|=
name|comparatorChooser
operator|.
name|getSortingColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|sortCols
control|)
block|{
comment|// TODO check whether this really works
name|String
name|name
init|=
name|tableFormat
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//TODO OLD
comment|// String name = tableFormat.getColumnType(i);
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
comment|/**      * This method sets up what Comparators are used for the various table columns.      * The ComparatorChooser enables and disables such Comparators as the user clicks      * columns, but this is where the Comparators are defined. Also, the ComparatorChooser      * is initialized with the sort order defined in Preferences.      */
DECL|method|setupComparatorChooser ()
specifier|private
name|void
name|setupComparatorChooser
parameter_list|()
block|{
comment|// First column:
name|List
argument_list|<
name|Comparator
argument_list|>
name|comparators
init|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|FirstColumnComparator
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|tableFormat
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MainTableColumn
name|tableColumn
init|=
name|tableFormat
operator|.
name|getTableColumn
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|SpecialFieldsUtils
operator|.
name|FIELDNAME_RANKING
operator|.
name|equals
argument_list|(
name|tableColumn
operator|.
name|getColumnName
argument_list|()
argument_list|)
condition|)
block|{
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|RankingFieldComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tableColumn
operator|.
name|isIconColumn
argument_list|()
condition|)
block|{
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|IconComparator
argument_list|(
name|tableColumn
operator|.
name|getBibtexFields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|FieldComparator
argument_list|(
name|tableFormat
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Set initial sort columns:
comment|// Default sort order:
name|String
index|[]
name|sortFields
init|=
operator|new
name|String
index|[]
block|{
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_PRIMARY_SORT_FIELD
argument_list|)
block|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_SECONDARY_SORT_FIELD
argument_list|)
block|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_TERTIARY_SORT_FIELD
argument_list|)
block|}
decl_stmt|;
name|boolean
index|[]
name|sortDirections
init|=
operator|new
name|boolean
index|[]
block|{
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_PRIMARY_SORT_DESCENDING
argument_list|)
block|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_SECONDARY_SORT_DESCENDING
argument_list|)
block|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_TERTIARY_SORT_DESCENDING
argument_list|)
block|}
decl_stmt|;
comment|// descending
name|sortedForTable
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
comment|// TODO where is this prefix set?
comment|//                if (!sortFields[i].startsWith(MainTableFormat.ICON_COLUMN_PREFIX))
if|if
condition|(
name|sortFields
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"iconcol:"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tableFormat
operator|.
name|getColumnCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|sortFields
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|tableFormat
operator|.
name|getColumnName
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
name|index
operator|=
name|j
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|index
operator|=
name|tableFormat
operator|.
name|getColumnIndex
argument_list|(
name|sortFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|comparatorChooser
operator|.
name|appendComparator
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
name|sortDirections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|sortedForTable
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Add action listener so we can remember the sort order:
name|comparatorChooser
operator|.
name|addSortActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
comment|// Get the information about the current sort order:
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|getCurrentSortFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|order
init|=
name|getCurrentSortOrder
argument_list|()
decl_stmt|;
comment|// Update preferences:
name|int
name|count
init|=
name|Math
operator|.
name|min
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|order
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>=
literal|1
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_PRIMARY_SORT_FIELD
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_PRIMARY_SORT_DESCENDING
argument_list|,
name|order
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
literal|2
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_SECONDARY_SORT_FIELD
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_SECONDARY_SORT_DESCENDING
argument_list|,
name|order
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_SECONDARY_SORT_FIELD
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_SECONDARY_SORT_DESCENDING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
literal|3
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_TERTIARY_SORT_FIELD
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_TERTIARY_SORT_DESCENDING
argument_list|,
name|order
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_TERTIARY_SORT_FIELD
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_TERTIARY_SORT_DESCENDING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getCellStatus (int row, int col)
specifier|private
name|int
name|getCellStatus
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
try|try
block|{
name|BibEntry
name|be
init|=
name|sortedForGrouping
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|EntryType
argument_list|>
name|type
init|=
name|EntryTypes
operator|.
name|getType
argument_list|(
name|be
operator|.
name|getType
argument_list|()
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|String
name|columnName
init|=
name|getColumnName
argument_list|(
name|col
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnName
operator|.
name|equals
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|)
operator|||
name|type
operator|.
name|get
argument_list|()
operator|.
name|getRequiredFieldsFlat
argument_list|()
operator|.
name|contains
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
return|return
name|MainTable
operator|.
name|REQUIRED
return|;
block|}
if|if
condition|(
name|type
operator|.
name|get
argument_list|()
operator|.
name|getOptionalFields
argument_list|()
operator|.
name|contains
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
return|return
name|MainTable
operator|.
name|OPTIONAL
return|;
block|}
block|}
return|return
name|MainTable
operator|.
name|OTHER
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
return|return
name|MainTable
operator|.
name|OTHER
return|;
block|}
block|}
comment|/**      * Use with caution! If you modify an entry in the table, the selection changes      *      * You can avoid it with      *<code>.getSelected().getReadWriteLock().writeLock().lock()</code>      *   and then<code>.unlock()</code>      */
DECL|method|getSelected ()
specifier|public
name|EventList
argument_list|<
name|BibEntry
argument_list|>
name|getSelected
parameter_list|()
block|{
return|return
name|localSelectionModel
operator|.
name|getSelected
argument_list|()
return|;
block|}
comment|/**      * Selects the given row      *      * @param row the row to select      */
DECL|method|setSelected (int row)
specifier|public
name|void
name|setSelected
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|localSelectionModel
operator|.
name|setSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds the given row to the selection      * @param row the row to add to the selection      */
DECL|method|addSelection (int row)
specifier|public
name|void
name|addSelection
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|this
operator|.
name|localSelectionModel
operator|.
name|addSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
DECL|method|findEntry (BibEntry entry)
specifier|public
name|int
name|findEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
return|return
name|sortedForGrouping
operator|.
name|indexOf
argument_list|(
name|entry
argument_list|)
return|;
block|}
comment|/**      * method to check whether a MainTableColumn at the modelIndex refers to the file field (either as a specific      * file extension filter or not)      *      * @param modelIndex model index of the column to check      * @return true if the column shows the "file" field; false otherwise      */
DECL|method|isFileColumn (int modelIndex)
specifier|public
name|boolean
name|isFileColumn
parameter_list|(
name|int
name|modelIndex
parameter_list|)
block|{
return|return
operator|(
name|tableFormat
operator|.
name|getTableColumn
argument_list|(
name|modelIndex
argument_list|)
operator|!=
literal|null
operator|)
operator|&&
name|tableFormat
operator|.
name|getTableColumn
argument_list|(
name|modelIndex
argument_list|)
operator|.
name|getBibtexFields
argument_list|()
operator|.
name|contains
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
return|;
block|}
DECL|method|matches (int row, Matcher<BibEntry> m)
specifier|private
name|boolean
name|matches
parameter_list|(
name|int
name|row
parameter_list|,
name|Matcher
argument_list|<
name|BibEntry
argument_list|>
name|m
parameter_list|)
block|{
return|return
name|m
operator|.
name|matches
argument_list|(
name|sortedForGrouping
operator|.
name|get
argument_list|(
name|row
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isComplete (int row)
specifier|private
name|boolean
name|isComplete
parameter_list|(
name|int
name|row
parameter_list|)
block|{
try|try
block|{
name|BibEntry
name|entry
init|=
name|sortedForGrouping
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|TypedBibEntry
name|typedEntry
init|=
operator|new
name|TypedBibEntry
argument_list|(
name|entry
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|panel
operator|.
name|database
argument_list|()
argument_list|)
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|typedEntry
operator|.
name|hasAllRequiredFields
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|isMarked (int row)
specifier|private
name|int
name|isMarked
parameter_list|(
name|int
name|row
parameter_list|)
block|{
try|try
block|{
name|BibEntry
name|be
init|=
name|sortedForGrouping
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|EntryMarker
operator|.
name|isMarked
argument_list|(
name|be
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|method|scrollTo (int y)
specifier|public
name|void
name|scrollTo
parameter_list|(
name|int
name|y
parameter_list|)
block|{
name|JScrollBar
name|scb
init|=
name|pane
operator|.
name|getVerticalScrollBar
argument_list|()
decl_stmt|;
name|scb
operator|.
name|setValue
argument_list|(
name|y
operator|*
name|scb
operator|.
name|getUnitIncrement
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * updateFont      */
DECL|method|updateFont ()
specifier|public
name|void
name|updateFont
parameter_list|()
block|{
name|setFont
argument_list|(
name|GUIGlobals
operator|.
name|CURRENTFONT
argument_list|)
expr_stmt|;
name|setRowHeight
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_ROW_PADDING
argument_list|)
operator|+
name|GUIGlobals
operator|.
name|CURRENTFONT
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureVisible (int row)
specifier|public
name|void
name|ensureVisible
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|JScrollBar
name|vert
init|=
name|pane
operator|.
name|getVerticalScrollBar
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|row
operator|*
name|getRowHeight
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|y
operator|<
name|vert
operator|.
name|getValue
argument_list|()
operator|)
operator|||
operator|(
operator|(
name|y
operator|>
operator|(
name|vert
operator|.
name|getValue
argument_list|()
operator|+
name|vert
operator|.
name|getVisibleAmount
argument_list|()
operator|)
operator|)
operator|&&
operator|!
name|isFloatSearchActive
operator|)
condition|)
block|{
name|scrollToCenter
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|scrollToCenter (int rowIndex, int vColIndex)
specifier|public
name|void
name|scrollToCenter
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|vColIndex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|this
operator|.
name|getParent
argument_list|()
operator|instanceof
name|JViewport
operator|)
condition|)
block|{
return|return;
block|}
name|JViewport
name|viewport
init|=
operator|(
name|JViewport
operator|)
name|this
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// This rectangle is relative to the table where the
comment|// northwest corner of cell (0,0) is always (0,0).
name|Rectangle
name|rect
init|=
name|this
operator|.
name|getCellRect
argument_list|(
name|rowIndex
argument_list|,
name|vColIndex
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// The location of the view relative to the table
name|Rectangle
name|viewRect
init|=
name|viewport
operator|.
name|getViewRect
argument_list|()
decl_stmt|;
comment|// Translate the cell location so that it is relative
comment|// to the view, assuming the northwest corner of the
comment|// view is (0,0).
name|rect
operator|.
name|setLocation
argument_list|(
name|rect
operator|.
name|x
operator|-
name|viewRect
operator|.
name|x
argument_list|,
name|rect
operator|.
name|y
operator|-
name|viewRect
operator|.
name|y
argument_list|)
expr_stmt|;
comment|// Calculate location of rect if it were at the center of view
name|int
name|centerX
init|=
operator|(
name|viewRect
operator|.
name|width
operator|-
name|rect
operator|.
name|width
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|centerY
init|=
operator|(
name|viewRect
operator|.
name|height
operator|-
name|rect
operator|.
name|height
operator|)
operator|/
literal|2
decl_stmt|;
comment|// Fake the location of the cell so that scrollRectToVisible
comment|// will move the cell to the center
if|if
condition|(
name|rect
operator|.
name|x
operator|<
name|centerX
condition|)
block|{
name|centerX
operator|=
operator|-
name|centerX
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|y
operator|<
name|centerY
condition|)
block|{
name|centerY
operator|=
operator|-
name|centerY
expr_stmt|;
block|}
name|rect
operator|.
name|translate
argument_list|(
name|centerX
argument_list|,
name|centerY
argument_list|)
expr_stmt|;
comment|// Scroll the area into view.
name|viewport
operator|.
name|scrollRectToVisible
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|revalidate
argument_list|()
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
block|}
DECL|method|updateRenderers ()
specifier|public
specifier|static
name|void
name|updateRenderers
parameter_list|()
block|{
name|MainTable
operator|.
name|defRenderer
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_BACKGROUND
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_TEXT
argument_list|)
argument_list|)
expr_stmt|;
name|Color
name|sel
init|=
name|MainTable
operator|.
name|defRenderer
operator|.
name|getTableCellRendererComponent
argument_list|(
operator|new
name|JTable
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getBackground
argument_list|()
decl_stmt|;
name|MainTable
operator|.
name|reqRenderer
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_REQ_FIELD_BACKGROUND
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_TEXT
argument_list|)
argument_list|)
expr_stmt|;
name|MainTable
operator|.
name|optRenderer
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_OPT_FIELD_BACKGROUND
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_TEXT
argument_list|)
argument_list|)
expr_stmt|;
name|MainTable
operator|.
name|incRenderer
operator|=
operator|new
name|IncompleteRenderer
argument_list|()
expr_stmt|;
name|MainTable
operator|.
name|compRenderer
operator|=
operator|new
name|CompleteRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_BACKGROUND
argument_list|)
argument_list|)
expr_stmt|;
name|MainTable
operator|.
name|grayedOutNumberRenderer
operator|=
operator|new
name|CompleteRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|GRAYED_OUT_BACKGROUND
argument_list|)
argument_list|)
expr_stmt|;
name|MainTable
operator|.
name|veryGrayedOutNumberRenderer
operator|=
operator|new
name|CompleteRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|VERY_GRAYED_OUT_BACKGROUND
argument_list|)
argument_list|)
expr_stmt|;
name|MainTable
operator|.
name|grayedOutRenderer
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|GRAYED_OUT_BACKGROUND
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|GRAYED_OUT_TEXT
argument_list|)
argument_list|,
name|MainTable
operator|.
name|mixColors
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|GRAYED_OUT_BACKGROUND
argument_list|)
argument_list|,
name|sel
argument_list|)
argument_list|)
expr_stmt|;
name|MainTable
operator|.
name|veryGrayedOutRenderer
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|VERY_GRAYED_OUT_BACKGROUND
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|VERY_GRAYED_OUT_TEXT
argument_list|)
argument_list|,
name|MainTable
operator|.
name|mixColors
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|VERY_GRAYED_OUT_BACKGROUND
argument_list|)
argument_list|,
name|sel
argument_list|)
argument_list|)
expr_stmt|;
name|MainTable
operator|.
name|markedRenderers
operator|=
operator|new
name|GeneralRenderer
index|[
name|EntryMarker
operator|.
name|MARK_COLOR_LEVELS
index|]
expr_stmt|;
name|MainTable
operator|.
name|markedNumberRenderers
operator|=
operator|new
name|CompleteRenderer
index|[
name|EntryMarker
operator|.
name|MARK_COLOR_LEVELS
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|EntryMarker
operator|.
name|MARK_COLOR_LEVELS
condition|;
name|i
operator|++
control|)
block|{
name|Color
name|c
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|MARKED_ENTRY_BACKGROUND
operator|+
name|i
argument_list|)
decl_stmt|;
name|MainTable
operator|.
name|markedRenderers
index|[
name|i
index|]
operator|=
operator|new
name|GeneralRenderer
argument_list|(
name|c
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_TEXT
argument_list|)
argument_list|,
name|MainTable
operator|.
name|mixColors
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|MARKED_ENTRY_BACKGROUND
operator|+
name|i
argument_list|)
argument_list|,
name|sel
argument_list|)
argument_list|)
expr_stmt|;
name|MainTable
operator|.
name|markedNumberRenderers
index|[
name|i
index|]
operator|=
operator|new
name|CompleteRenderer
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mixColors (Color one, Color two)
specifier|private
specifier|static
name|Color
name|mixColors
parameter_list|(
name|Color
name|one
parameter_list|,
name|Color
name|two
parameter_list|)
block|{
return|return
operator|new
name|Color
argument_list|(
operator|(
name|one
operator|.
name|getRed
argument_list|()
operator|+
name|two
operator|.
name|getRed
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|one
operator|.
name|getGreen
argument_list|()
operator|+
name|two
operator|.
name|getGreen
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|one
operator|.
name|getBlue
argument_list|()
operator|+
name|two
operator|.
name|getBlue
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
return|;
block|}
DECL|method|createTableComparatorChooser (JTable table, SortedList<BibEntry> list, Object sortingStrategy)
specifier|private
name|TableComparatorChooser
argument_list|<
name|BibEntry
argument_list|>
name|createTableComparatorChooser
parameter_list|(
name|JTable
name|table
parameter_list|,
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|list
parameter_list|,
name|Object
name|sortingStrategy
parameter_list|)
block|{
specifier|final
name|TableComparatorChooser
argument_list|<
name|BibEntry
argument_list|>
name|result
init|=
name|TableComparatorChooser
operator|.
name|install
argument_list|(
name|table
argument_list|,
name|list
argument_list|,
name|sortingStrategy
argument_list|)
decl_stmt|;
name|result
operator|.
name|addSortActionListener
argument_list|(
name|e
lambda|->
block|{
comment|// We need to reset the stack of sorted list each time sorting order
comment|// changes, or the sorting breaks down:
name|refreshSorting
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Morten Alver: This override is a workaround NullPointerException when      * dragging stuff into the table. I found this in a forum, but have no idea      * why it works.      * @param newUI      */
annotation|@
name|Override
DECL|method|setUI (TableUI newUI)
specifier|public
name|void
name|setUI
parameter_list|(
name|TableUI
name|newUI
parameter_list|)
block|{
name|super
operator|.
name|setUI
argument_list|(
name|newUI
argument_list|)
expr_stmt|;
name|TransferHandler
name|handler
init|=
name|getTransferHandler
argument_list|()
decl_stmt|;
name|setTransferHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setTransferHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Find out which column is set as sort column.      * @param number The position in the sort hierarchy (primary, secondary, etc.)      * @return The sort column number.      */
DECL|method|getSortingColumn (int number)
specifier|public
name|int
name|getSortingColumn
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|l
init|=
name|comparatorChooser
operator|.
name|getSortingColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|<=
name|number
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|l
operator|.
name|get
argument_list|(
name|number
argument_list|)
return|;
block|}
block|}
DECL|method|getTableColumnListener ()
specifier|public
name|PersistenceTableColumnListener
name|getTableColumnListener
parameter_list|()
block|{
return|return
name|tableColumnListener
return|;
block|}
comment|/**      * Returns the List of entries sorted by a user-selected term. This is the      * sorting before marking, search etc. applies.      *      * Note: The returned List must not be modified from the outside      * @return The sorted list of entries.      */
DECL|method|getSortedForTable ()
specifier|public
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|getSortedForTable
parameter_list|()
block|{
return|return
name|sortedForTable
return|;
block|}
DECL|method|getMainTableColumn (int modelIndex)
specifier|public
name|MainTableColumn
name|getMainTableColumn
parameter_list|(
name|int
name|modelIndex
parameter_list|)
block|{
return|return
name|tableFormat
operator|.
name|getTableColumn
argument_list|(
name|modelIndex
argument_list|)
return|;
block|}
block|}
end_class

end_unit

