begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.maintable
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BibtexFields
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|MainTableColumn
specifier|public
class|class
name|MainTableColumn
block|{
DECL|field|columnName
specifier|private
specifier|final
name|String
name|columnName
decl_stmt|;
DECL|field|bibtexFields
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|bibtexFields
decl_stmt|;
DECL|field|isIconColumn
specifier|private
specifier|final
name|boolean
name|isIconColumn
decl_stmt|;
DECL|method|MainTableColumn (String columnName, boolean isIconColumn)
specifier|public
name|MainTableColumn
parameter_list|(
name|String
name|columnName
parameter_list|,
name|boolean
name|isIconColumn
parameter_list|)
block|{
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|bibtexFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|isIconColumn
operator|=
name|isIconColumn
expr_stmt|;
block|}
DECL|method|MainTableColumn (String columnName, String[] bibtexFields)
specifier|public
name|MainTableColumn
parameter_list|(
name|String
name|columnName
parameter_list|,
name|String
index|[]
name|bibtexFields
parameter_list|)
block|{
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|bibtexFields
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|bibtexFields
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|isIconColumn
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|MainTableColumn (String columnName, String[] bibtexFields, boolean isIconColumn)
specifier|public
name|MainTableColumn
parameter_list|(
name|String
name|columnName
parameter_list|,
name|String
index|[]
name|bibtexFields
parameter_list|,
name|boolean
name|isIconColumn
parameter_list|)
block|{
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|bibtexFields
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|bibtexFields
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|isIconColumn
operator|=
name|isIconColumn
expr_stmt|;
block|}
comment|/**      * Get the table column name to be displayed in the UI      *      * TODO: use JLabel to be able to display Iconcols?      *      * @return      */
DECL|method|getDisplayName ()
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
if|if
condition|(
operator|!
name|bibtexFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|bibtexFields
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|MainTableFormat
operator|.
name|COL_DEFINITION_FIELD_SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|String
name|fieldDisplayName
init|=
name|BibtexFields
operator|.
name|getFieldDisplayName
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldDisplayName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|fieldDisplayName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|EntryUtil
operator|.
name|capitalizeFirst
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|columnName
return|;
block|}
block|}
comment|/**      * Checks whether the column should display names      * Relevant as name value format can be formatted.      *      * @return true if the bibtex fields contains author or editor      */
DECL|method|isNameColumn ()
specifier|public
name|boolean
name|isNameColumn
parameter_list|()
block|{
if|if
condition|(
name|bibtexFields
operator|.
name|contains
argument_list|(
literal|"author"
argument_list|)
operator|||
name|bibtexFields
operator|.
name|contains
argument_list|(
literal|"editor"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getColumnName ()
specifier|public
name|String
name|getColumnName
parameter_list|()
block|{
return|return
name|columnName
return|;
block|}
DECL|method|getBibtexFields ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBibtexFields
parameter_list|()
block|{
return|return
name|bibtexFields
return|;
block|}
DECL|method|isIconColumn ()
specifier|public
name|boolean
name|isIconColumn
parameter_list|()
block|{
return|return
name|isIconColumn
return|;
block|}
DECL|method|isFileFilter ()
specifier|public
name|boolean
name|isFileFilter
parameter_list|()
block|{
return|return
literal|false
return|;
comment|// Overridden in SpecialMainTableColumns for file filter columns
block|}
DECL|method|getColumnValue (BibtexEntry entry)
specifier|public
name|Object
name|getColumnValue
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
operator|!
name|bibtexFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|content
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|bibtexFields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
name|BibtexEntry
operator|.
name|TYPE_HEADER
argument_list|)
condition|)
block|{
name|content
operator|=
name|entry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|content
operator|=
name|entry
operator|.
name|getFieldOrAlias
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Author"
operator|.
name|equalsIgnoreCase
argument_list|(
name|columnName
argument_list|)
operator|&&
operator|(
name|content
operator|!=
literal|null
operator|)
condition|)
block|{
comment|//TODO
comment|// content = panel.database().resolveForStrings((String) content);
block|}
block|}
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|isNameColumn
argument_list|()
condition|)
block|{
comment|//TODO
comment|// return formatName(content);
block|}
return|return
name|content
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

