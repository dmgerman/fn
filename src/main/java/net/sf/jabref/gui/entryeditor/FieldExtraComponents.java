begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2016 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.entryeditor
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DnDConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTarget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|DocumentEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|DocumentListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|FieldContentSelector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|date
operator|.
name|DatePickerButton
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|EntryEditor
operator|.
name|StoreFieldAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|FieldEditor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
operator|.
name|MergeEntryDOIDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationRepository
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|URLUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|DOI
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|date
operator|.
name|EasyDateFormat
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|MonthUtil
import|;
end_import

begin_class
DECL|class|FieldExtraComponents
specifier|public
class|class
name|FieldExtraComponents
block|{
DECL|field|ABBREVIATION_TOOLTIP_TEXT
specifier|private
specifier|static
specifier|final
name|String
name|ABBREVIATION_TOOLTIP_TEXT
init|=
literal|"<HTML>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Switches between full and abbreviated journal name if the journal name is known."
argument_list|)
operator|+
literal|"<BR>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"To set up, go to"
argument_list|)
operator|+
literal|"<B>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Options"
argument_list|)
operator|+
literal|" -> "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Manage journal abbreviations"
argument_list|)
operator|+
literal|"</B></HTML>"
decl_stmt|;
comment|/**      * Add controls for switching between abbreviated and full journal names.      * If this field also has a FieldContentSelector, we need to combine these.      *      * @param frame      * @param panel      * @param editor      * @param entry      * @param contentSelectors      * @param storeFieldAction      * @return      */
DECL|method|getJournalExtraComponent (JabRefFrame frame, BasePanel panel, FieldEditor editor, BibEntry entry, Set<FieldContentSelector> contentSelectors, StoreFieldAction storeFieldAction)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getJournalExtraComponent
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanel
name|panel
parameter_list|,
name|FieldEditor
name|editor
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|Set
argument_list|<
name|FieldContentSelector
argument_list|>
name|contentSelectors
parameter_list|,
name|StoreFieldAction
name|storeFieldAction
parameter_list|)
block|{
name|JPanel
name|controls
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|controls
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|getContentSelectors
argument_list|(
name|editor
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FieldContentSelector
name|ws
init|=
operator|new
name|FieldContentSelector
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|frame
argument_list|,
name|editor
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|storeFieldAction
argument_list|,
literal|false
argument_list|,
literal|", "
argument_list|)
decl_stmt|;
name|contentSelectors
operator|.
name|add
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|controls
operator|.
name|add
argument_list|(
name|ws
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
block|}
comment|// Button to toggle abbreviated/full journal names
name|JButton
name|button
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Toggle abbreviation"
argument_list|)
argument_list|)
decl_stmt|;
name|button
operator|.
name|setToolTipText
argument_list|(
name|ABBREVIATION_TOOLTIP_TEXT
argument_list|)
expr_stmt|;
name|button
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|String
name|text
init|=
name|editor
operator|.
name|getText
argument_list|()
decl_stmt|;
name|JournalAbbreviationRepository
name|abbreviationRepository
init|=
name|Globals
operator|.
name|journalAbbreviationLoader
operator|.
name|getRepository
argument_list|()
decl_stmt|;
if|if
condition|(
name|abbreviationRepository
operator|.
name|isKnownName
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|abbreviationRepository
operator|.
name|getNextAbbreviation
argument_list|(
name|text
argument_list|)
operator|.
name|orElse
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|editor
operator|.
name|setText
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|editor
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|undoManager
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|editor
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|text
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|controls
operator|.
name|add
argument_list|(
name|button
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|controls
argument_list|)
return|;
block|}
comment|/**      * Set up a mouse listener for opening an external viewer for with with EXTRA_EXTERNAL      *      * @param fieldEditor      * @param panel      * @return      */
DECL|method|getExternalExtraComponent (BasePanel panel, FieldEditor fieldEditor)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getExternalExtraComponent
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|FieldEditor
name|fieldEditor
parameter_list|)
block|{
name|JPanel
name|controls
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|controls
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|JButton
name|button
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Open"
argument_list|)
argument_list|)
decl_stmt|;
name|button
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|button
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
try|try
block|{
name|JabRefDesktop
operator|.
name|openExternalViewer
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|fieldEditor
operator|.
name|getText
argument_list|()
argument_list|,
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to open link."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|controls
operator|.
name|add
argument_list|(
name|button
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
comment|// enable/disable button
name|JTextComponent
name|url
init|=
operator|(
name|JTextComponent
operator|)
name|fieldEditor
decl_stmt|;
name|DocumentListener
name|documentListener
init|=
operator|new
name|DocumentListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|changedUpdate
parameter_list|(
name|DocumentEvent
name|documentEvent
parameter_list|)
block|{
name|checkUrl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|insertUpdate
parameter_list|(
name|DocumentEvent
name|documentEvent
parameter_list|)
block|{
name|checkUrl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeUpdate
parameter_list|(
name|DocumentEvent
name|documentEvent
parameter_list|)
block|{
name|checkUrl
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkUrl
parameter_list|()
block|{
if|if
condition|(
name|URLUtil
operator|.
name|isURL
argument_list|(
name|url
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
name|button
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|button
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|url
operator|.
name|getDocument
argument_list|()
operator|.
name|addDocumentListener
argument_list|(
name|documentListener
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|controls
argument_list|)
return|;
block|}
comment|/**      * Set up a mouse listener for opening an external viewer and fetching by DOI      *      * @param fieldEditor      * @param panel      * @return      */
DECL|method|getDoiExtraComponent (BasePanel panel, EntryEditor entryEditor, FieldEditor fieldEditor)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getDoiExtraComponent
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|,
name|FieldEditor
name|fieldEditor
parameter_list|)
block|{
name|JPanel
name|controls
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|controls
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
comment|// open doi link
name|JButton
name|button
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Open"
argument_list|)
argument_list|)
decl_stmt|;
name|button
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|button
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
try|try
block|{
name|JabRefDesktop
operator|.
name|openExternalViewer
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|fieldEditor
operator|.
name|getText
argument_list|()
argument_list|,
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to open link."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// lookup doi
name|JButton
name|doiButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Lookup DOI"
argument_list|)
argument_list|)
decl_stmt|;
name|doiButton
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|Optional
argument_list|<
name|DOI
argument_list|>
name|doi
init|=
name|DOI
operator|.
name|fromBibEntry
argument_list|(
name|entryEditor
operator|.
name|getEntry
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doi
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|entryEditor
operator|.
name|getEntry
argument_list|()
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
name|doi
operator|.
name|get
argument_list|()
operator|.
name|getDOI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|setStatus
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No DOI found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// fetch bibtex data
name|JButton
name|fetchButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Get BibTeX data from DOI"
argument_list|)
argument_list|)
decl_stmt|;
name|fetchButton
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fetchButton
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
operator|new
name|MergeEntryDOIDialog
argument_list|(
name|panel
argument_list|)
argument_list|)
expr_stmt|;
name|controls
operator|.
name|add
argument_list|(
name|button
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|controls
operator|.
name|add
argument_list|(
name|doiButton
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|controls
operator|.
name|add
argument_list|(
name|fetchButton
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
comment|// enable/disable button
name|JTextComponent
name|doi
init|=
operator|(
name|JTextComponent
operator|)
name|fieldEditor
decl_stmt|;
name|DocumentListener
name|documentListener
init|=
operator|new
name|DocumentListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|changedUpdate
parameter_list|(
name|DocumentEvent
name|documentEvent
parameter_list|)
block|{
name|checkDoi
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|insertUpdate
parameter_list|(
name|DocumentEvent
name|documentEvent
parameter_list|)
block|{
name|checkDoi
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeUpdate
parameter_list|(
name|DocumentEvent
name|documentEvent
parameter_list|)
block|{
name|checkDoi
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkDoi
parameter_list|()
block|{
name|Optional
argument_list|<
name|DOI
argument_list|>
name|doiUrl
init|=
name|DOI
operator|.
name|build
argument_list|(
name|doi
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doiUrl
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|button
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fetchButton
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|button
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fetchButton
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|doi
operator|.
name|getDocument
argument_list|()
operator|.
name|addDocumentListener
argument_list|(
name|documentListener
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|controls
argument_list|)
return|;
block|}
comment|/**      * Return a dropdown list containing Yes and No for fields with EXTRA_YES_NO      *      * @param fieldEditor      * @param entryEditor      * @return      */
DECL|method|getYesNoExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getYesNoExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|options
init|=
block|{
literal|""
block|,
literal|"Yes"
block|,
literal|"No"
block|}
decl_stmt|;
name|JComboBox
argument_list|<
name|String
argument_list|>
name|yesno
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|yesno
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
operator|(
operator|(
name|String
operator|)
name|yesno
operator|.
name|getSelectedItem
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|yesno
argument_list|)
return|;
block|}
comment|/**      * Return a dropdown list with the month names for fields with EXTRA_MONTH      *      * @param fieldEditor      * @param entryEditor      * @param type      * @return      */
DECL|method|getMonthExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor, BibDatabaseMode type)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getMonthExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|,
name|BibDatabaseMode
name|type
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|options
init|=
operator|new
name|String
index|[
literal|13
index|]
decl_stmt|;
name|options
index|[
literal|0
index|]
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|options
index|[
name|i
index|]
operator|=
name|MonthUtil
operator|.
name|getMonthByNumber
argument_list|(
name|i
argument_list|)
operator|.
name|fullName
expr_stmt|;
block|}
name|JComboBox
argument_list|<
name|String
argument_list|>
name|month
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|month
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|int
name|monthnumber
init|=
name|month
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|monthnumber
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|BibDatabaseMode
operator|.
name|BIBLATEX
condition|)
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|monthnumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
literal|"#"
operator|+
operator|(
name|MonthUtil
operator|.
name|getMonthByNumber
argument_list|(
name|monthnumber
argument_list|)
operator|.
name|bibtexFormat
operator|)
operator|+
literal|"#"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
name|month
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|month
argument_list|)
return|;
block|}
comment|/**      * Return a button which sets the owner if the field for fields with EXTRA_SET_OWNER      * @param fieldEditor      * @param storeFieldAction      * @return      */
DECL|method|getSetOwnerExtraComponent (FieldEditor fieldEditor, StoreFieldAction storeFieldAction)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getSetOwnerExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|StoreFieldAction
name|storeFieldAction
parameter_list|)
block|{
name|JButton
name|button
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Auto"
argument_list|)
argument_list|)
decl_stmt|;
name|button
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_OWNER
argument_list|)
argument_list|)
expr_stmt|;
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|fieldEditor
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|button
argument_list|)
return|;
block|}
comment|/**      * Set up a drop target for URLs for fields with EXTRA_URL      *      * @param fieldEditor      * @param storeFieldAction      * @return      */
DECL|method|getURLExtraComponent (FieldEditor fieldEditor, StoreFieldAction storeFieldAction)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getURLExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|StoreFieldAction
name|storeFieldAction
parameter_list|)
block|{
operator|(
operator|(
name|JComponent
operator|)
name|fieldEditor
operator|)
operator|.
name|setDropTarget
argument_list|(
operator|new
name|DropTarget
argument_list|(
operator|(
name|Component
operator|)
name|fieldEditor
argument_list|,
name|DnDConstants
operator|.
name|ACTION_NONE
argument_list|,
operator|new
name|SimpleUrlDragDrop
argument_list|(
name|fieldEditor
argument_list|,
name|storeFieldAction
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**      * Return a button opening a content selector for fields where one exists      *      * @param frame      * @param panel      * @param editor      * @param contentSelectors      * @param storeFieldAction      * @return      */
DECL|method|getSelectorExtraComponent (JabRefFrame frame, BasePanel panel, FieldEditor editor, Set<FieldContentSelector> contentSelectors, StoreFieldAction storeFieldAction)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getSelectorExtraComponent
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanel
name|panel
parameter_list|,
name|FieldEditor
name|editor
parameter_list|,
name|Set
argument_list|<
name|FieldContentSelector
argument_list|>
name|contentSelectors
parameter_list|,
name|StoreFieldAction
name|storeFieldAction
parameter_list|)
block|{
name|FieldContentSelector
name|ws
init|=
operator|new
name|FieldContentSelector
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|frame
argument_list|,
name|editor
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|storeFieldAction
argument_list|,
literal|false
argument_list|,
name|InternalBibtexFields
operator|.
name|getFieldExtras
argument_list|(
name|editor
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|FieldProperties
operator|.
name|PERSON_NAMES
argument_list|)
condition|?
literal|" and "
else|:
literal|", "
argument_list|)
decl_stmt|;
name|contentSelectors
operator|.
name|add
argument_list|(
name|ws
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|ws
argument_list|)
return|;
block|}
comment|/**      * Set up field such that double click inserts the current date      * If isDataPicker is True, a button with a data picker is returned      *      * @param editor      * @param isDatePicker      * @return      */
DECL|method|getDateTimeExtraComponent (FieldEditor editor, Boolean isDatePicker)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getDateTimeExtraComponent
parameter_list|(
name|FieldEditor
name|editor
parameter_list|,
name|Boolean
name|isDatePicker
parameter_list|)
block|{
operator|(
operator|(
name|JTextArea
operator|)
name|editor
operator|)
operator|.
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|// double click
name|String
name|date
init|=
operator|new
name|EasyDateFormat
argument_list|()
operator|.
name|getCurrentDate
argument_list|()
decl_stmt|;
name|editor
operator|.
name|setText
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// insert a datepicker, if the extras field contains this command
if|if
condition|(
name|isDatePicker
condition|)
block|{
name|DatePickerButton
name|datePicker
init|=
operator|new
name|DatePickerButton
argument_list|(
name|editor
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|datePicker
operator|.
name|getDatePicker
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
comment|/**      * Return a dropdown list with the alternatives for editor type fields      *      * @param fieldEditor      * @param entryEditor      * @return      */
DECL|method|getEditorTypeExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getEditorTypeExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|optionValues
init|=
block|{
literal|""
block|,
literal|"editor"
block|,
literal|"compiler"
block|,
literal|"founder"
block|,
literal|"continuator"
block|,
literal|"redactor"
block|,
literal|"reviser"
block|,
literal|"collaborator"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|optionDescriptions
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Editor"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Compiler"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Founder"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Continuator"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Redactor"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Reviser"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Collaborator"
argument_list|)
block|}
decl_stmt|;
name|JComboBox
argument_list|<
name|String
argument_list|>
name|editorType
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|optionDescriptions
argument_list|)
decl_stmt|;
name|editorType
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|optionValues
index|[
name|editorType
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|editorType
argument_list|)
return|;
block|}
comment|/**      * Return a dropdown list with the alternatives for pagination type fields      *      * @param fieldEditor      * @param entryEditor      * @return      */
DECL|method|getPaginationExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getPaginationExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|optionValues
init|=
block|{
literal|""
block|,
literal|"page"
block|,
literal|"column"
block|,
literal|"line"
block|,
literal|"verse"
block|,
literal|"section"
block|,
literal|"paragraph"
block|,
literal|"none"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|optionDescriptions
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Page"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Column"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Line"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Verse"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Section"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Paragraph"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"None"
argument_list|)
block|}
decl_stmt|;
name|JComboBox
argument_list|<
name|String
argument_list|>
name|pagination
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|optionDescriptions
argument_list|)
decl_stmt|;
name|pagination
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|optionValues
index|[
name|pagination
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|pagination
argument_list|)
return|;
block|}
comment|/**      * Return a dropdown list with the alternatives for pagination type fields      *      * @param fieldEditor      * @param entryEditor      * @return      */
DECL|method|getTypeExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor, boolean isPatent)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getTypeExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|,
name|boolean
name|isPatent
parameter_list|)
block|{
name|String
index|[]
name|optionValues
decl_stmt|;
name|String
index|[]
name|optionDescriptions
decl_stmt|;
if|if
condition|(
name|isPatent
condition|)
block|{
name|optionValues
operator|=
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"patent"
block|,
literal|"patentde"
block|,
literal|"patenteu"
block|,
literal|"patentfr"
block|,
literal|"patentuk"
block|,
literal|"patentus"
block|,
literal|"patreq"
block|,
literal|"patreqde"
block|,
literal|"patreqeu"
block|,
literal|"patreqfr"
block|,
literal|"patrequk"
block|,
literal|"patrequs"
block|}
expr_stmt|;
name|optionDescriptions
operator|=
operator|new
name|String
index|[]
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"German patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"European patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"French patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"British patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"U.S. patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Patent request"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"German patent request"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"European patent request"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"French patent request"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"British patent request"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"U.S. patent request"
argument_list|)
block|}
expr_stmt|;
block|}
else|else
block|{
name|optionValues
operator|=
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"mathesis"
block|,
literal|"phdthesis"
block|,
literal|"candthesis"
block|,
literal|"techreport"
block|,
literal|"resreport"
block|,
literal|"software"
block|,
literal|"datacd"
block|,
literal|"audiocd"
block|}
expr_stmt|;
name|optionDescriptions
operator|=
operator|new
name|String
index|[]
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Master's thesis"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"PhD thesis"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Candidate thesis"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Technical report"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Research report"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Software"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Data CD"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Audio CD"
argument_list|)
block|}
expr_stmt|;
block|}
name|JComboBox
argument_list|<
name|String
argument_list|>
name|type
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|optionDescriptions
argument_list|)
decl_stmt|;
name|type
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|optionValues
index|[
name|type
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Return a dropdown list with the gender alternatives for fields with GENDER      *      * @param fieldEditor      * @param entryEditor      * @return      */
DECL|method|getGenderExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getGenderExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|optionValues
init|=
block|{
literal|""
block|,
literal|"sf"
block|,
literal|"sm"
block|,
literal|"sp"
block|,
literal|"pf"
block|,
literal|"pm"
block|,
literal|"pn"
block|,
literal|"pp"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|optionDescriptions
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Female name"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Male name"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Neuter name"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Female names"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Male names"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Neuter names"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Mixed names"
argument_list|)
block|}
decl_stmt|;
name|JComboBox
argument_list|<
name|String
argument_list|>
name|gender
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|optionDescriptions
argument_list|)
decl_stmt|;
name|gender
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|optionValues
index|[
name|gender
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|gender
argument_list|)
return|;
block|}
block|}
end_class

end_unit

