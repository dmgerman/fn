begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2016 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.shared
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPasswordField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|DatabaseLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|shared
operator|.
name|DBMSConnectionProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|shared
operator|.
name|DBMSConnector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|shared
operator|.
name|DBMSType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonBarBuilder
import|;
end_import

begin_class
DECL|class|OpenSharedDatabaseDialog
specifier|public
class|class
name|OpenSharedDatabaseDialog
extends|extends
name|JDialog
block|{
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|gridBagLayout
specifier|private
specifier|final
name|GridBagLayout
name|gridBagLayout
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
DECL|field|gridBagConstraints
specifier|private
specifier|final
name|GridBagConstraints
name|gridBagConstraints
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
DECL|field|connectionPanel
specifier|private
specifier|final
name|JPanel
name|connectionPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|buttonPanel
specifier|private
specifier|final
name|JPanel
name|buttonPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|databaseTypeLabel
specifier|private
specifier|final
name|JLabel
name|databaseTypeLabel
init|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Database type"
argument_list|)
operator|+
literal|":"
argument_list|)
decl_stmt|;
DECL|field|hostPortLabel
specifier|private
specifier|final
name|JLabel
name|hostPortLabel
init|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Host"
argument_list|)
operator|+
literal|"/"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Port"
argument_list|)
operator|+
literal|":"
argument_list|)
decl_stmt|;
DECL|field|databaseLabel
specifier|private
specifier|final
name|JLabel
name|databaseLabel
init|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Database"
argument_list|)
operator|+
literal|":"
argument_list|)
decl_stmt|;
DECL|field|userLabel
specifier|private
specifier|final
name|JLabel
name|userLabel
init|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"User"
argument_list|)
operator|+
literal|":"
argument_list|)
decl_stmt|;
DECL|field|passwordLabel
specifier|private
specifier|final
name|JLabel
name|passwordLabel
init|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Password"
argument_list|)
operator|+
literal|":"
argument_list|)
decl_stmt|;
DECL|field|hostField
specifier|private
specifier|final
name|JTextField
name|hostField
init|=
operator|new
name|JTextField
argument_list|(
literal|12
argument_list|)
decl_stmt|;
DECL|field|portField
specifier|private
specifier|final
name|JTextField
name|portField
init|=
operator|new
name|JTextField
argument_list|(
literal|4
argument_list|)
decl_stmt|;
DECL|field|userField
specifier|private
specifier|final
name|JTextField
name|userField
init|=
operator|new
name|JTextField
argument_list|(
literal|14
argument_list|)
decl_stmt|;
DECL|field|databaseField
specifier|private
specifier|final
name|JTextField
name|databaseField
init|=
operator|new
name|JTextField
argument_list|(
literal|14
argument_list|)
decl_stmt|;
DECL|field|passwordField
specifier|private
specifier|final
name|JPasswordField
name|passwordField
init|=
operator|new
name|JPasswordField
argument_list|(
literal|14
argument_list|)
decl_stmt|;
DECL|field|dbmsTypeDropDown
specifier|private
specifier|final
name|JComboBox
argument_list|<
name|DBMSType
argument_list|>
name|dbmsTypeDropDown
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|connectButton
specifier|private
specifier|final
name|JButton
name|connectButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connect"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|cancelButton
specifier|private
specifier|final
name|JButton
name|cancelButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|SHARED_DATABASE_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|SHARED_DATABASE_TYPE
init|=
literal|"sharedDatabaseType"
decl_stmt|;
DECL|field|SHARED_DATABASE_HOST
specifier|private
specifier|static
specifier|final
name|String
name|SHARED_DATABASE_HOST
init|=
literal|"sharedDatabaseHost"
decl_stmt|;
DECL|field|SHARED_DATABASE_PORT
specifier|private
specifier|static
specifier|final
name|String
name|SHARED_DATABASE_PORT
init|=
literal|"sharedDatabasePort"
decl_stmt|;
DECL|field|SHARED_DATABASE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SHARED_DATABASE_NAME
init|=
literal|"sharedDatabaseName"
decl_stmt|;
DECL|field|SHARED_DATABASE_USER
specifier|private
specifier|static
specifier|final
name|String
name|SHARED_DATABASE_USER
init|=
literal|"sharedDatabaseUser"
decl_stmt|;
comment|/**      * @param frame the JabRef Frame      */
DECL|method|OpenSharedDatabaseDialog (JabRefFrame frame)
specifier|public
name|OpenSharedDatabaseDialog
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|super
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Open shared database"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|initLayout
argument_list|()
expr_stmt|;
name|applyGlobalPrefs
argument_list|()
expr_stmt|;
name|setupActions
argument_list|()
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
name|setLocationRelativeTo
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
comment|/**      * Defines and sets the different actions up.      */
DECL|method|setupActions ()
specifier|private
name|void
name|setupActions
parameter_list|()
block|{
name|Action
name|openAction
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|checkFields
argument_list|()
expr_stmt|;
name|BibDatabaseMode
name|selectedMode
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultBibDatabaseMode
argument_list|()
decl_stmt|;
name|BibDatabaseContext
name|bibDatabaseContext
init|=
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|Defaults
argument_list|(
name|selectedMode
argument_list|)
argument_list|,
name|DatabaseLocation
operator|.
name|SHARED
argument_list|)
decl_stmt|;
name|DBMSConnectionProperties
name|connectionProperties
init|=
operator|new
name|DBMSConnectionProperties
argument_list|()
decl_stmt|;
name|connectionProperties
operator|.
name|setType
argument_list|(
operator|(
name|DBMSType
operator|)
name|dbmsTypeDropDown
operator|.
name|getSelectedItem
argument_list|()
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setHost
argument_list|(
name|hostField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setPort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|portField
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setDatabase
argument_list|(
name|databaseField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setUser
argument_list|(
name|userField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setPassword
argument_list|(
operator|new
name|String
argument_list|(
name|passwordField
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//JPasswordField.getPassword() does not return a String, but a char array.
name|bibDatabaseContext
operator|.
name|getDBSynchronizer
argument_list|()
operator|.
name|openSharedDatabase
argument_list|(
name|connectionProperties
argument_list|)
expr_stmt|;
name|frame
operator|.
name|addTab
argument_list|(
name|bibDatabaseContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setGlobalPrefs
argument_list|()
expr_stmt|;
name|bibDatabaseContext
operator|.
name|getDBSynchronizer
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|SharedDatabaseUIManager
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connection_to_%0_server_stablished."
argument_list|,
name|connectionProperties
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|exception
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenSharedDatabaseDialog
operator|.
name|this
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Driver error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|exception
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenSharedDatabaseDialog
operator|.
name|this
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connection error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JabRefException
name|exception
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenSharedDatabaseDialog
operator|.
name|this
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|connectButton
operator|.
name|addActionListener
argument_list|(
name|openAction
argument_list|)
expr_stmt|;
name|Action
name|cancelAction
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|cancelButton
operator|.
name|addActionListener
argument_list|(
name|cancelAction
argument_list|)
expr_stmt|;
comment|/**          * Set up a listener which updates the default port number once the selection in dbmsTypeDropDown has changed.          */
name|Action
name|dbmsTypeDropDownAction
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|portField
operator|.
name|setText
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|DBMSType
operator|)
name|dbmsTypeDropDown
operator|.
name|getSelectedItem
argument_list|()
operator|)
operator|.
name|getDefaultPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|dbmsTypeDropDown
operator|.
name|addActionListener
argument_list|(
name|dbmsTypeDropDownAction
argument_list|)
expr_stmt|;
comment|// Add enter button action listener
name|connectButton
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
operator|.
name|put
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_ENTER
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"Enter_pressed"
argument_list|)
expr_stmt|;
name|connectButton
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"Enter_pressed"
argument_list|,
name|openAction
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fetches possibly saved data and configures the control elements respectively.      */
DECL|method|applyGlobalPrefs ()
specifier|private
name|void
name|applyGlobalPrefs
parameter_list|()
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabaseType
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getAsOptional
argument_list|(
name|SHARED_DATABASE_TYPE
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabaseHost
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getAsOptional
argument_list|(
name|SHARED_DATABASE_HOST
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabasePort
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getAsOptional
argument_list|(
name|SHARED_DATABASE_PORT
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabaseName
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getAsOptional
argument_list|(
name|SHARED_DATABASE_NAME
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabaseUser
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getAsOptional
argument_list|(
name|SHARED_DATABASE_USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|sharedDatabaseType
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Optional
argument_list|<
name|DBMSType
argument_list|>
name|dbmsType
init|=
name|DBMSType
operator|.
name|fromString
argument_list|(
name|sharedDatabaseType
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbmsType
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|dbmsTypeDropDown
operator|.
name|setSelectedItem
argument_list|(
name|dbmsType
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sharedDatabaseHost
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|hostField
operator|.
name|setText
argument_list|(
name|sharedDatabaseHost
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sharedDatabasePort
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|portField
operator|.
name|setText
argument_list|(
name|sharedDatabasePort
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|portField
operator|.
name|setText
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|DBMSType
operator|)
name|dbmsTypeDropDown
operator|.
name|getSelectedItem
argument_list|()
operator|)
operator|.
name|getDefaultPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sharedDatabaseName
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|databaseField
operator|.
name|setText
argument_list|(
name|sharedDatabaseName
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sharedDatabaseUser
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|userField
operator|.
name|setText
argument_list|(
name|sharedDatabaseUser
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Set up the layout and position the control units in their right place.      */
DECL|method|initLayout ()
specifier|private
name|void
name|initLayout
parameter_list|()
block|{
name|setResizable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Insets
name|defautInsets
init|=
operator|new
name|Insets
argument_list|(
literal|4
argument_list|,
literal|15
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|connectionPanel
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connection"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connectionPanel
operator|.
name|setLayout
argument_list|(
name|gridBagLayout
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DBMSType
argument_list|>
name|availableDBMSTypes
init|=
name|DBMSConnector
operator|.
name|getAvailableDBMSTypes
argument_list|()
decl_stmt|;
name|DefaultComboBoxModel
argument_list|<
name|DBMSType
argument_list|>
name|comboBoxModel
init|=
operator|new
name|DefaultComboBoxModel
argument_list|<>
argument_list|(
name|availableDBMSTypes
operator|.
name|toArray
argument_list|(
operator|new
name|DBMSType
index|[
name|availableDBMSTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|dbmsTypeDropDown
operator|.
name|setModel
argument_list|(
name|comboBoxModel
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|insets
operator|=
name|defautInsets
expr_stmt|;
name|gridBagConstraints
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|gridBagLayout
operator|.
name|setConstraints
argument_list|(
name|connectionPanel
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
comment|//1. column
name|gridBagConstraints
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|connectionPanel
operator|.
name|add
argument_list|(
name|databaseTypeLabel
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|connectionPanel
operator|.
name|add
argument_list|(
name|hostPortLabel
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|2
expr_stmt|;
name|connectionPanel
operator|.
name|add
argument_list|(
name|databaseLabel
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|3
expr_stmt|;
name|connectionPanel
operator|.
name|add
argument_list|(
name|userLabel
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|4
expr_stmt|;
name|connectionPanel
operator|.
name|add
argument_list|(
name|passwordLabel
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
comment|// 2. column
name|gridBagConstraints
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridx
operator|=
literal|1
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|connectionPanel
operator|.
name|add
argument_list|(
name|dbmsTypeDropDown
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
comment|// the hostField is smaller than the others.
name|gridBagConstraints
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|4
argument_list|,
literal|15
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|connectionPanel
operator|.
name|add
argument_list|(
name|hostField
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|2
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|gridBagConstraints
operator|.
name|insets
operator|=
name|defautInsets
expr_stmt|;
name|connectionPanel
operator|.
name|add
argument_list|(
name|databaseField
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|3
expr_stmt|;
name|connectionPanel
operator|.
name|add
argument_list|(
name|userField
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|4
expr_stmt|;
name|connectionPanel
operator|.
name|add
argument_list|(
name|passwordField
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
comment|// 3. column
name|gridBagConstraints
operator|.
name|gridx
operator|=
literal|2
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|gridBagConstraints
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|connectionPanel
operator|.
name|add
argument_list|(
name|portField
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ButtonBarBuilder
name|bsb
init|=
operator|new
name|ButtonBarBuilder
argument_list|(
name|buttonPanel
argument_list|)
decl_stmt|;
name|bsb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bsb
operator|.
name|addButton
argument_list|(
name|connectButton
argument_list|)
expr_stmt|;
name|bsb
operator|.
name|addRelatedGap
argument_list|()
expr_stmt|;
name|bsb
operator|.
name|addButton
argument_list|(
name|cancelButton
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
name|gridBagLayout
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|gridBagLayout
operator|.
name|setConstraints
argument_list|(
name|connectionPanel
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|connectionPanel
argument_list|)
expr_stmt|;
name|gridBagConstraints
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|gridBagConstraints
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|gridBagLayout
operator|.
name|setConstraints
argument_list|(
name|buttonPanel
argument_list|,
name|gridBagConstraints
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|buttonPanel
argument_list|)
expr_stmt|;
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Owner window should be disabled while this dialog is opened.
block|}
comment|/**      * Saves the data from this dialog persistently to facilitate the usage.      */
DECL|method|setGlobalPrefs ()
specifier|public
name|void
name|setGlobalPrefs
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|SHARED_DATABASE_TYPE
argument_list|,
operator|(
operator|(
name|DBMSType
operator|)
name|dbmsTypeDropDown
operator|.
name|getSelectedItem
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|SHARED_DATABASE_HOST
argument_list|,
name|hostField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|SHARED_DATABASE_PORT
argument_list|,
name|portField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|SHARED_DATABASE_NAME
argument_list|,
name|databaseField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|SHARED_DATABASE_USER
argument_list|,
name|userField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|isEmptyField (JTextField field)
specifier|private
name|boolean
name|isEmptyField
parameter_list|(
name|JTextField
name|field
parameter_list|)
block|{
return|return
name|field
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
return|;
block|}
comment|/**      * Checks every required text field for emptiness.      */
DECL|method|checkFields ()
specifier|private
name|void
name|checkFields
parameter_list|()
throws|throws
name|JabRefException
block|{
if|if
condition|(
name|isEmptyField
argument_list|(
name|hostField
argument_list|)
condition|)
block|{
name|hostField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|JabRefException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Required_field_\"%0\"_is_empty."
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Host"
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|isEmptyField
argument_list|(
name|portField
argument_list|)
condition|)
block|{
name|portField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|JabRefException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Required_field_\"%0\"_is_empty."
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Port"
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|isEmptyField
argument_list|(
name|databaseField
argument_list|)
condition|)
block|{
name|databaseField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|JabRefException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Required_field_\"%0\"_is_empty."
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Database"
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|isEmptyField
argument_list|(
name|userField
argument_list|)
condition|)
block|{
name|userField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|JabRefException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Required_field_\"%0\"_is_empty."
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"User"
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

