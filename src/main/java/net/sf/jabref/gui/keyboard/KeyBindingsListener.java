begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.keyboard
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_comment
comment|/**  * respond to grabKey and display the key binding  */
end_comment

begin_class
DECL|class|KeyBindingsListener
specifier|public
class|class
name|KeyBindingsListener
extends|extends
name|KeyAdapter
block|{
DECL|field|table
specifier|private
specifier|final
name|KeyBindingTable
name|table
decl_stmt|;
DECL|method|KeyBindingsListener (KeyBindingTable table)
specifier|public
name|KeyBindingsListener
parameter_list|(
name|KeyBindingTable
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|keyPressed (KeyEvent evt)
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|evt
parameter_list|)
block|{
comment|// first check if anything is selected if not the return
specifier|final
name|int
name|selRow
init|=
name|table
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
name|boolean
name|isAnyRowSelected
init|=
name|selRow
operator|>=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|isAnyRowSelected
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|code
init|=
name|KeyEvent
operator|.
name|getKeyText
argument_list|(
name|evt
operator|.
name|getKeyCode
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|modifier
init|=
name|KeyEvent
operator|.
name|getKeyModifiersText
argument_list|(
name|evt
operator|.
name|getModifiers
argument_list|()
argument_list|)
decl_stmt|;
comment|// VALIDATE code and modifier
comment|// all key bindings must have a modifier: ctrl alt etc
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|modifier
argument_list|)
condition|)
block|{
name|int
name|kc
init|=
name|evt
operator|.
name|getKeyCode
argument_list|()
decl_stmt|;
name|boolean
name|isFunctionKey
init|=
operator|(
name|kc
operator|>=
name|KeyEvent
operator|.
name|VK_F1
operator|)
operator|&&
operator|(
name|kc
operator|<=
name|KeyEvent
operator|.
name|VK_F12
operator|)
decl_stmt|;
name|boolean
name|isEscapeKey
init|=
name|kc
operator|==
name|KeyEvent
operator|.
name|VK_ESCAPE
decl_stmt|;
name|boolean
name|isDeleteKey
init|=
name|kc
operator|==
name|KeyEvent
operator|.
name|VK_DELETE
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|isFunctionKey
operator|||
name|isEscapeKey
operator|||
name|isDeleteKey
operator|)
condition|)
block|{
return|return;
comment|// need a modifier except for function, escape and delete keys
block|}
block|}
comment|// second key cannot be a modifiers
if|if
condition|(
literal|"Tab"
operator|.
name|equals
argument_list|(
name|code
argument_list|)
operator|||
literal|"Backspace"
operator|.
name|equals
argument_list|(
name|code
argument_list|)
operator|||
literal|"Enter"
operator|.
name|equals
argument_list|(
name|code
argument_list|)
operator|||
literal|"Space"
operator|.
name|equals
argument_list|(
name|code
argument_list|)
operator|||
literal|"Ctrl"
operator|.
name|equals
argument_list|(
name|code
argument_list|)
operator|||
literal|"Shift"
operator|.
name|equals
argument_list|(
name|code
argument_list|)
operator|||
literal|"Alt"
operator|.
name|equals
argument_list|(
name|code
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// COMPUTE new key binding
name|String
name|newKey
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|modifier
argument_list|)
condition|)
block|{
name|newKey
operator|=
name|modifier
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\+"
argument_list|,
literal|" "
argument_list|)
operator|+
literal|" "
operator|+
name|code
expr_stmt|;
block|}
else|else
block|{
name|newKey
operator|=
name|code
expr_stmt|;
block|}
comment|// SHOW new key binding
comment|//find which key is selected and set its value
name|table
operator|.
name|setValueAt
argument_list|(
name|newKey
argument_list|,
name|selRow
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|table
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

