begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.keyboard
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|InputEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|KeyBindingPreferences
specifier|public
class|class
name|KeyBindingPreferences
block|{
DECL|field|SHORTCUT_MASK
specifier|private
name|int
name|SHORTCUT_MASK
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|keyBindingRepository
specifier|private
name|KeyBindingRepository
name|keyBindingRepository
init|=
operator|new
name|KeyBindingRepository
argument_list|()
decl_stmt|;
DECL|method|KeyBindingPreferences (JabRefPreferences prefs)
specifier|public
name|KeyBindingPreferences
parameter_list|(
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
name|this
operator|.
name|prefs
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|restoreKeyBindings
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the KeyStroke for this binding, as defined by the defaults, or in the Preferences.      */
DECL|method|getKey (KeyBinding bindName)
specifier|public
name|KeyStroke
name|getKey
parameter_list|(
name|KeyBinding
name|bindName
parameter_list|)
block|{
name|String
name|s
init|=
name|keyBindingRepository
operator|.
name|get
argument_list|(
name|bindName
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
return|return
name|getKeyForMac
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the KeyStroke for this binding, as defined by the defaults, or in the Preferences, but adapted for Mac      * users, with the Command key preferred instead of Control.      * TODO: Move to OS.java? Or replace with portable Java key codes, i.e. KeyEvent      */
DECL|method|getKeyForMac (KeyStroke ks)
specifier|private
name|KeyStroke
name|getKeyForMac
parameter_list|(
name|KeyStroke
name|ks
parameter_list|)
block|{
if|if
condition|(
name|ks
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|keyCode
init|=
name|ks
operator|.
name|getKeyCode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ks
operator|.
name|getModifiers
argument_list|()
operator|&
name|InputEvent
operator|.
name|CTRL_MASK
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|ks
return|;
block|}
else|else
block|{
name|int
name|modifiers
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|ks
operator|.
name|getModifiers
argument_list|()
operator|&
name|InputEvent
operator|.
name|SHIFT_MASK
operator|)
operator|!=
literal|0
condition|)
block|{
name|modifiers
operator|=
name|modifiers
operator||
name|InputEvent
operator|.
name|SHIFT_MASK
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|ks
operator|.
name|getModifiers
argument_list|()
operator|&
name|InputEvent
operator|.
name|ALT_MASK
operator|)
operator|!=
literal|0
condition|)
block|{
name|modifiers
operator|=
name|modifiers
operator||
name|InputEvent
operator|.
name|ALT_MASK
expr_stmt|;
block|}
if|if
condition|(
name|SHORTCUT_MASK
operator|==
operator|-
literal|1
condition|)
block|{
try|try
block|{
name|SHORTCUT_MASK
operator|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getMenuShortcutKeyMask
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AWTError
decl||
name|HeadlessException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
block|}
return|return
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|keyCode
argument_list|,
name|SHORTCUT_MASK
operator|+
name|modifiers
argument_list|)
return|;
block|}
block|}
comment|/**      * Stores new key bindings into Preferences, provided they actually differ from the old ones.      */
DECL|method|setNewKeyBindings (SortedMap<KeyBinding, String> newBindings)
specifier|public
name|void
name|setNewKeyBindings
parameter_list|(
name|SortedMap
argument_list|<
name|KeyBinding
argument_list|,
name|String
argument_list|>
name|newBindings
parameter_list|)
block|{
if|if
condition|(
operator|!
name|newBindings
operator|.
name|equals
argument_list|(
name|keyBindingRepository
operator|.
name|getKeyBindings
argument_list|()
argument_list|)
condition|)
block|{
comment|// This confirms that the bindings have actually changed.
name|List
argument_list|<
name|String
argument_list|>
name|bindNames
init|=
name|newBindings
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|KeyBinding
operator|::
name|getKey
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bindings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|newBindings
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|BIND_NAMES
argument_list|,
name|bindNames
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|BINDINGS
argument_list|,
name|bindings
argument_list|)
expr_stmt|;
name|keyBindingRepository
operator|.
name|overwriteBindings
argument_list|(
name|newBindings
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|restoreKeyBindings ()
specifier|private
name|void
name|restoreKeyBindings
parameter_list|()
block|{
comment|// First read the bindings, and their names.
name|List
argument_list|<
name|String
argument_list|>
name|bindNames
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|BIND_NAMES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bindings
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|BINDINGS
argument_list|)
decl_stmt|;
comment|// Then set up the key bindings HashMap.
if|if
condition|(
operator|(
name|bindNames
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|bindings
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|bindNames
operator|.
name|size
argument_list|()
operator|!=
name|bindings
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
comment|// Nothing defined in Preferences, or something is wrong.
name|keyBindingRepository
operator|=
operator|new
name|KeyBindingRepository
argument_list|()
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bindNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|keyBindingRepository
operator|.
name|put
argument_list|(
name|bindNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|bindings
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the HashMap containing all key bindings.      */
DECL|method|getKeyBindings ()
specifier|public
name|SortedMap
argument_list|<
name|KeyBinding
argument_list|,
name|String
argument_list|>
name|getKeyBindings
parameter_list|()
block|{
return|return
name|keyBindingRepository
operator|.
name|getKeyBindings
argument_list|()
return|;
block|}
block|}
end_class

end_unit

