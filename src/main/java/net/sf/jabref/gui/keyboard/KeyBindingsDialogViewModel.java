begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2016 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.keyboard
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
package|;
end_package

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|fxml
operator|.
name|FXML
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Alert
operator|.
name|AlertType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonBar
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonBar
operator|.
name|ButtonData
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|SelectionMode
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeItem
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeTableCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeTableColumn
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeTableView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|stage
operator|.
name|Stage
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|FXDialogs
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_class
DECL|class|KeyBindingsDialogViewModel
specifier|public
class|class
name|KeyBindingsDialogViewModel
block|{
DECL|field|keyBindingRepository
specifier|private
name|KeyBindingRepository
name|keyBindingRepository
decl_stmt|;
DECL|field|keyBindingPreferences
specifier|private
name|KeyBindingPreferences
name|keyBindingPreferences
decl_stmt|;
DECL|field|selectedKeyBinding
specifier|private
specifier|final
name|ObjectProperty
argument_list|<
name|TreeItem
argument_list|<
name|KeyBindingViewModel
argument_list|>
argument_list|>
name|selectedKeyBinding
init|=
operator|new
name|SimpleObjectProperty
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|FXML
DECL|field|keyBindingsTable
specifier|private
name|TreeTableView
argument_list|<
name|KeyBindingViewModel
argument_list|>
name|keyBindingsTable
decl_stmt|;
annotation|@
name|FXML
DECL|field|actionColumn
specifier|private
name|TreeTableColumn
argument_list|<
name|KeyBindingViewModel
argument_list|,
name|String
argument_list|>
name|actionColumn
decl_stmt|;
annotation|@
name|FXML
DECL|field|shortcutColumn
specifier|private
name|TreeTableColumn
argument_list|<
name|KeyBindingViewModel
argument_list|,
name|String
argument_list|>
name|shortcutColumn
decl_stmt|;
annotation|@
name|FXML
DECL|field|resetColumn
specifier|private
name|TreeTableColumn
argument_list|<
name|KeyBindingViewModel
argument_list|,
name|String
argument_list|>
name|resetColumn
decl_stmt|;
annotation|@
name|FXML
DECL|field|closeButton
specifier|private
name|Button
name|closeButton
decl_stmt|;
annotation|@
name|FXML
DECL|field|resetButton
specifier|private
name|Button
name|resetButton
decl_stmt|;
annotation|@
name|FXML
DECL|method|initialize ()
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|keyBindingsTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|setSelectionMode
argument_list|(
name|SelectionMode
operator|.
name|SINGLE
argument_list|)
expr_stmt|;
name|ButtonBar
operator|.
name|setButtonData
argument_list|(
name|resetButton
argument_list|,
name|ButtonData
operator|.
name|LEFT
argument_list|)
expr_stmt|;
name|selectedKeyBinding
operator|.
name|bind
argument_list|(
name|keyBindingsTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectedItemProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeView ()
specifier|public
name|void
name|initializeView
parameter_list|()
block|{
name|registerKeyEvents
argument_list|()
expr_stmt|;
name|populateTable
argument_list|()
expr_stmt|;
name|bindColumnValues
argument_list|()
expr_stmt|;
block|}
comment|/**      * Read all keybindings from the keybinding repository and create table keybinding      * models for them      */
DECL|method|populateTable ()
specifier|private
name|void
name|populateTable
parameter_list|()
block|{
name|TreeItem
argument_list|<
name|KeyBindingViewModel
argument_list|>
name|root
init|=
operator|new
name|TreeItem
argument_list|<>
argument_list|(
operator|new
name|KeyBindingViewModel
argument_list|(
name|KeyBindingCategory
operator|.
name|FILE
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyBindingCategory
name|category
range|:
name|KeyBindingCategory
operator|.
name|values
argument_list|()
control|)
block|{
name|TreeItem
argument_list|<
name|KeyBindingViewModel
argument_list|>
name|categoryItem
init|=
operator|new
name|TreeItem
argument_list|<>
argument_list|(
operator|new
name|KeyBindingViewModel
argument_list|(
name|category
argument_list|)
argument_list|)
decl_stmt|;
name|keyBindingRepository
operator|.
name|getKeyBindings
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|keyBinding
parameter_list|,
name|bind
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|keyBinding
operator|.
name|getCategory
argument_list|()
operator|==
name|category
condition|)
block|{
name|KeyBindingViewModel
name|keyBindViewModel
init|=
operator|new
name|KeyBindingViewModel
argument_list|(
name|keyBinding
argument_list|,
name|bind
argument_list|)
decl_stmt|;
name|TreeItem
argument_list|<
name|KeyBindingViewModel
argument_list|>
name|keyBindTreeItem
init|=
operator|new
name|TreeItem
argument_list|<>
argument_list|(
name|keyBindViewModel
argument_list|)
decl_stmt|;
name|categoryItem
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|keyBindTreeItem
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|categoryItem
operator|.
name|setExpanded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|categoryItem
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|setExpanded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|keyBindingsTable
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
DECL|method|bindColumnValues ()
specifier|private
name|void
name|bindColumnValues
parameter_list|()
block|{
name|actionColumn
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|nameProperty
argument_list|()
argument_list|)
expr_stmt|;
name|shortcutColumn
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|shownBindingProperty
argument_list|()
argument_list|)
expr_stmt|;
name|resetColumn
operator|.
name|setCellFactory
argument_list|(
operator|new
name|Callback
argument_list|<
name|TreeTableColumn
argument_list|<
name|KeyBindingViewModel
argument_list|,
name|String
argument_list|>
argument_list|,
name|TreeTableCell
argument_list|<
name|KeyBindingViewModel
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TreeTableCell
argument_list|<
name|KeyBindingViewModel
argument_list|,
name|String
argument_list|>
name|call
parameter_list|(
name|TreeTableColumn
argument_list|<
name|KeyBindingViewModel
argument_list|,
name|String
argument_list|>
name|p
parameter_list|)
block|{
return|return
operator|new
name|TreeTableCell
argument_list|<
name|KeyBindingViewModel
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|updateItem
parameter_list|(
name|String
name|item
parameter_list|,
name|boolean
name|empty
parameter_list|)
block|{
name|super
operator|.
name|updateItem
argument_list|(
name|item
argument_list|,
name|empty
argument_list|)
expr_stmt|;
name|KeyBindingViewModel
name|viewModel
init|=
name|getTreeTableRow
argument_list|()
operator|.
name|getItem
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|viewModel
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|viewModel
operator|.
name|isCategory
argument_list|()
condition|)
block|{
name|Text
name|graphic
init|=
operator|new
name|Text
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CLEANUP_ENTRIES
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
name|graphic
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"icon"
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
name|graphic
argument_list|)
expr_stmt|;
name|setOnMouseClicked
argument_list|(
name|evt
lambda|->
block|{
name|getTreeTableRow
argument_list|()
operator|.
name|getItem
argument_list|()
operator|.
name|resetToDefault
argument_list|(
name|keyBindingRepository
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
name|keyBindingsTable
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|registerKeyEvents ()
specifier|private
name|void
name|registerKeyEvents
parameter_list|()
block|{
name|keyBindingsTable
operator|.
name|setOnKeyPressed
argument_list|(
name|evt
lambda|->
name|grabKey
argument_list|(
name|evt
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getDialogStage ()
specifier|private
name|Stage
name|getDialogStage
parameter_list|()
block|{
return|return
operator|(
name|Stage
operator|)
name|closeButton
operator|.
name|getScene
argument_list|()
operator|.
name|getWindow
argument_list|()
return|;
block|}
annotation|@
name|FXML
DECL|method|closeDialog ()
specifier|private
name|void
name|closeDialog
parameter_list|()
block|{
name|Stage
name|stage
init|=
name|getDialogStage
argument_list|()
decl_stmt|;
name|stage
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|saveKeyBindings ()
specifier|public
name|void
name|saveKeyBindings
parameter_list|()
block|{
name|keyBindingPreferences
operator|.
name|setNewKeyBindings
argument_list|(
name|keyBindingRepository
operator|.
name|getKeyBindings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|saveKeyBindingsAndCloseDialog ()
specifier|private
name|void
name|saveKeyBindingsAndCloseDialog
parameter_list|()
block|{
name|saveKeyBindings
argument_list|()
expr_stmt|;
name|String
name|title
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Key bindings changed"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your new key bindings have been stored."
argument_list|)
operator|+
literal|'\n'
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must restart JabRef for the new key bindings to work properly."
argument_list|)
decl_stmt|;
name|FXDialogs
operator|.
name|showInformationDialogAndWait
argument_list|(
name|title
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|closeDialog
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|setDefaultBindings ()
specifier|private
name|void
name|setDefaultBindings
parameter_list|()
block|{
name|String
name|title
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Resetting all key bindings"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"All key bindings will be reset to their defaults."
argument_list|)
decl_stmt|;
name|ButtonType
name|resetButtonType
init|=
operator|new
name|ButtonType
argument_list|(
literal|"Reset"
argument_list|,
name|ButtonData
operator|.
name|OK_DONE
argument_list|)
decl_stmt|;
name|FXDialogs
operator|.
name|showCustomButtonDialogAndWait
argument_list|(
name|AlertType
operator|.
name|INFORMATION
argument_list|,
name|title
argument_list|,
name|content
argument_list|,
name|resetButtonType
argument_list|,
name|ButtonType
operator|.
name|CANCEL
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|response
lambda|->
block|{
if|if
condition|(
name|response
operator|==
name|resetButtonType
condition|)
block|{
name|resetKeyBindingsToDefault
argument_list|()
expr_stmt|;
name|populateTable
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|resetKeyBindingsToDefault ()
specifier|public
name|void
name|resetKeyBindingsToDefault
parameter_list|()
block|{
name|keyBindingRepository
operator|.
name|resetToDefault
argument_list|()
expr_stmt|;
block|}
DECL|method|grabKey (KeyEvent evt)
specifier|public
name|void
name|grabKey
parameter_list|(
name|KeyEvent
name|evt
parameter_list|)
block|{
comment|// first check if a valid entry is selected
if|if
condition|(
name|selectedKeyBinding
operator|.
name|isNull
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|KeyBindingViewModel
name|selectedEntry
init|=
name|selectedKeyBinding
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|selectedEntry
operator|==
literal|null
operator|)
operator|||
operator|(
name|selectedEntry
operator|.
name|isCategory
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|selectedEntry
operator|.
name|setNewBinding
argument_list|(
name|evt
argument_list|)
condition|)
block|{
name|keyBindingRepository
operator|.
name|put
argument_list|(
name|selectedEntry
operator|.
name|getKeyBinding
argument_list|()
argument_list|,
name|selectedEntry
operator|.
name|getBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setKeyBindingPreferences (KeyBindingPreferences keyBindingPreferences)
specifier|public
name|void
name|setKeyBindingPreferences
parameter_list|(
name|KeyBindingPreferences
name|keyBindingPreferences
parameter_list|)
block|{
name|this
operator|.
name|keyBindingPreferences
operator|=
name|keyBindingPreferences
expr_stmt|;
name|this
operator|.
name|keyBindingRepository
operator|=
operator|new
name|KeyBindingRepository
argument_list|(
name|keyBindingPreferences
operator|.
name|getKeyBindings
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getSelectedKeyBinding ()
specifier|public
name|ObjectProperty
argument_list|<
name|TreeItem
argument_list|<
name|KeyBindingViewModel
argument_list|>
argument_list|>
name|getSelectedKeyBinding
parameter_list|()
block|{
return|return
name|selectedKeyBinding
return|;
block|}
DECL|method|getKeyBindingRepository ()
specifier|public
name|KeyBindingRepository
name|getKeyBindingRepository
parameter_list|()
block|{
return|return
name|keyBindingRepository
return|;
block|}
block|}
end_class

end_unit

