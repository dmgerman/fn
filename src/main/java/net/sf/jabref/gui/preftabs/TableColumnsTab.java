begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.preftabs
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preftabs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JToolBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ScrollPaneConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|AbstractTableModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumnModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
operator|.
name|BibtexSingleField
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|bibtex
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|OSXCompatibleToolbar
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpFiles
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|specialfields
operator|.
name|SpecialFieldsUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|CellConstraints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|TableColumnsTab
class|class
name|TableColumnsTab
extends|extends
name|JPanel
implements|implements
name|PrefsTab
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableColumnsTab
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|tableChanged
specifier|private
name|boolean
name|tableChanged
decl_stmt|;
DECL|field|colSetup
specifier|private
specifier|final
name|JTable
name|colSetup
decl_stmt|;
DECL|field|rowCount
specifier|private
name|int
name|rowCount
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|ncWidth
specifier|private
name|int
name|ncWidth
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|tableRows
specifier|private
specifier|final
name|List
argument_list|<
name|TableRow
argument_list|>
name|tableRows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|urlColumn
specifier|private
specifier|final
name|JCheckBox
name|urlColumn
decl_stmt|;
DECL|field|fileColumn
specifier|private
specifier|final
name|JCheckBox
name|fileColumn
decl_stmt|;
DECL|field|arxivColumn
specifier|private
specifier|final
name|JCheckBox
name|arxivColumn
decl_stmt|;
DECL|field|extraFileColumns
specifier|private
specifier|final
name|JCheckBox
name|extraFileColumns
decl_stmt|;
DECL|field|listOfFileColumns
specifier|private
specifier|final
name|JList
argument_list|<
name|String
argument_list|>
name|listOfFileColumns
decl_stmt|;
DECL|field|preferUrl
specifier|private
specifier|final
name|JRadioButton
name|preferUrl
decl_stmt|;
DECL|field|preferDoi
specifier|private
specifier|final
name|JRadioButton
name|preferDoi
decl_stmt|;
comment|/*** begin: special fields ***/
DECL|field|specialFieldsEnabled
specifier|private
specifier|final
name|JCheckBox
name|specialFieldsEnabled
decl_stmt|;
DECL|field|rankingColumn
specifier|private
specifier|final
name|JCheckBox
name|rankingColumn
decl_stmt|;
DECL|field|qualityColumn
specifier|private
specifier|final
name|JCheckBox
name|qualityColumn
decl_stmt|;
DECL|field|priorityColumn
specifier|private
specifier|final
name|JCheckBox
name|priorityColumn
decl_stmt|;
DECL|field|relevanceColumn
specifier|private
specifier|final
name|JCheckBox
name|relevanceColumn
decl_stmt|;
DECL|field|printedColumn
specifier|private
specifier|final
name|JCheckBox
name|printedColumn
decl_stmt|;
DECL|field|readStatusColumn
specifier|private
specifier|final
name|JCheckBox
name|readStatusColumn
decl_stmt|;
DECL|field|syncKeywords
specifier|private
specifier|final
name|JRadioButton
name|syncKeywords
decl_stmt|;
DECL|field|writeSpecialFields
specifier|private
specifier|final
name|JRadioButton
name|writeSpecialFields
decl_stmt|;
DECL|field|oldSpecialFieldsEnabled
specifier|private
name|boolean
name|oldSpecialFieldsEnabled
decl_stmt|;
DECL|field|oldRankingColumn
specifier|private
name|boolean
name|oldRankingColumn
decl_stmt|;
DECL|field|oldQualityColumn
specifier|private
name|boolean
name|oldQualityColumn
decl_stmt|;
DECL|field|oldPriorityColumn
specifier|private
name|boolean
name|oldPriorityColumn
decl_stmt|;
DECL|field|oldRelevanceColumn
specifier|private
name|boolean
name|oldRelevanceColumn
decl_stmt|;
DECL|field|oldPrintedColumn
specifier|private
name|boolean
name|oldPrintedColumn
decl_stmt|;
DECL|field|oldReadStatusColumn
specifier|private
name|boolean
name|oldReadStatusColumn
decl_stmt|;
DECL|field|oldSyncKeyWords
specifier|private
name|boolean
name|oldSyncKeyWords
decl_stmt|;
DECL|field|oldWriteSpecialFields
specifier|private
name|boolean
name|oldWriteSpecialFields
decl_stmt|;
comment|/*** end: special fields ***/
DECL|class|TableRow
specifier|static
class|class
name|TableRow
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|length
specifier|private
name|int
name|length
decl_stmt|;
DECL|method|TableRow ()
specifier|public
name|TableRow
parameter_list|()
block|{
name|name
operator|=
literal|""
expr_stmt|;
name|length
operator|=
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_LENGTH
expr_stmt|;
block|}
DECL|method|TableRow (String name)
specifier|public
name|TableRow
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|length
operator|=
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_LENGTH
expr_stmt|;
block|}
DECL|method|TableRow (String name, int length)
specifier|public
name|TableRow
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getLength ()
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|setLength (int length)
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
block|}
comment|/**      * Customization of external program paths.      *      * @param prefs a<code>JabRefPreferences</code> value      */
DECL|method|TableColumnsTab (JabRefPreferences prefs, JabRefFrame frame)
specifier|public
name|TableColumnsTab
parameter_list|(
name|JabRefPreferences
name|prefs
parameter_list|,
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|this
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|TableModel
name|tm
init|=
operator|new
name|AbstractTableModel
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|rowCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|int
name|internalRow
init|=
name|row
decl_stmt|;
if|if
condition|(
name|internalRow
operator|==
literal|0
condition|)
block|{
return|return
name|column
operator|==
literal|0
condition|?
name|InternalBibtexFields
operator|.
name|NUMBER_COL
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|ncWidth
argument_list|)
return|;
block|}
name|internalRow
operator|--
expr_stmt|;
if|if
condition|(
name|internalRow
operator|>=
name|tableRows
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|Object
name|rowContent
init|=
name|tableRows
operator|.
name|get
argument_list|(
name|internalRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowContent
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|TableRow
name|tr
init|=
operator|(
name|TableRow
operator|)
name|rowContent
decl_stmt|;
comment|// Only two columns
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
return|return
name|tr
operator|.
name|getName
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|tr
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|?
name|Integer
operator|.
name|toString
argument_list|(
name|tr
operator|.
name|getLength
argument_list|()
argument_list|)
else|:
literal|""
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|col
parameter_list|)
block|{
return|return
name|col
operator|==
literal|0
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Field name"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"Column width"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getColumnClass
parameter_list|(
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
return|return
name|String
operator|.
name|class
return|;
block|}
return|return
name|Integer
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
return|return
operator|!
operator|(
operator|(
name|row
operator|==
literal|0
operator|)
operator|&&
operator|(
name|col
operator|==
literal|0
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
name|tableChanged
operator|=
literal|true
expr_stmt|;
comment|// Make sure the vector is long enough.
while|while
condition|(
name|row
operator|>=
name|tableRows
operator|.
name|size
argument_list|()
condition|)
block|{
name|tableRows
operator|.
name|add
argument_list|(
operator|new
name|TableRow
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|row
operator|==
literal|0
operator|)
operator|&&
operator|(
name|col
operator|==
literal|1
operator|)
condition|)
block|{
name|ncWidth
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|TableRow
name|rowContent
init|=
name|tableRows
operator|.
name|get
argument_list|(
name|row
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|==
literal|0
condition|)
block|{
name|rowContent
operator|.
name|setName
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|getValueAt
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|setValueAt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_LENGTH
argument_list|)
argument_list|,
name|row
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|rowContent
operator|.
name|setLength
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rowContent
operator|.
name|setLength
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|colSetup
operator|=
operator|new
name|JTable
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|TableColumnModel
name|cm
init|=
name|colSetup
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|140
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|1
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|FormLayout
name|layout
init|=
operator|new
name|FormLayout
argument_list|(
literal|"1dlu, 8dlu, left:pref, 4dlu, fill:pref"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builder
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layout
argument_list|)
decl_stmt|;
name|JPanel
name|pan
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|JPanel
name|tabPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|tabPanel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
name|colSetup
argument_list|,
name|ScrollPaneConstants
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|ScrollPaneConstants
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
decl_stmt|;
name|colSetup
operator|.
name|setPreferredScrollableViewportSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|250
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setMinimumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|250
argument_list|,
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|tabPanel
operator|.
name|add
argument_list|(
name|sp
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|JToolBar
name|toolBar
init|=
operator|new
name|OSXCompatibleToolbar
argument_list|(
name|SwingConstants
operator|.
name|VERTICAL
argument_list|)
decl_stmt|;
name|toolBar
operator|.
name|setFloatable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|AddRowAction
name|addRow
init|=
operator|new
name|AddRowAction
argument_list|()
decl_stmt|;
name|DeleteRowAction
name|deleteRow
init|=
operator|new
name|DeleteRowAction
argument_list|()
decl_stmt|;
name|MoveRowUpAction
name|moveUp
init|=
operator|new
name|MoveRowUpAction
argument_list|()
decl_stmt|;
name|MoveRowDownAction
name|moveDown
init|=
operator|new
name|MoveRowDownAction
argument_list|()
decl_stmt|;
name|toolBar
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|addRow
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|deleteRow
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|moveUp
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|moveDown
argument_list|)
expr_stmt|;
name|tabPanel
operator|.
name|add
argument_list|(
name|toolBar
argument_list|,
name|BorderLayout
operator|.
name|EAST
argument_list|)
expr_stmt|;
name|fileColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show file column"
argument_list|)
argument_list|)
expr_stmt|;
name|urlColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show URL/DOI column"
argument_list|)
argument_list|)
expr_stmt|;
name|preferUrl
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show URL first"
argument_list|)
argument_list|)
expr_stmt|;
name|preferDoi
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show DOI first"
argument_list|)
argument_list|)
expr_stmt|;
name|ButtonGroup
name|preferUrlDoiGroup
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|preferUrlDoiGroup
operator|.
name|add
argument_list|(
name|preferUrl
argument_list|)
expr_stmt|;
name|preferUrlDoiGroup
operator|.
name|add
argument_list|(
name|preferDoi
argument_list|)
expr_stmt|;
name|urlColumn
operator|.
name|addChangeListener
argument_list|(
name|arg0
lambda|->
block|{
name|preferUrl
operator|.
name|setEnabled
argument_list|(
name|urlColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|preferDoi
operator|.
name|setEnabled
argument_list|(
name|urlColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|arxivColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show ArXiv column"
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ExternalFileType
argument_list|>
name|fileTypes
init|=
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeSelection
argument_list|()
decl_stmt|;
name|String
index|[]
name|fileTypeNames
init|=
operator|new
name|String
index|[
name|fileTypes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExternalFileType
name|fileType
range|:
name|fileTypes
control|)
block|{
name|fileTypeNames
index|[
name|i
operator|++
index|]
operator|=
name|fileType
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|listOfFileColumns
operator|=
operator|new
name|JList
argument_list|<>
argument_list|(
name|fileTypeNames
argument_list|)
expr_stmt|;
name|JScrollPane
name|listOfFileColumnsScrollPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|listOfFileColumns
argument_list|)
decl_stmt|;
name|listOfFileColumns
operator|.
name|setVisibleRowCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|extraFileColumns
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show extra columns"
argument_list|)
argument_list|)
expr_stmt|;
name|extraFileColumns
operator|.
name|addChangeListener
argument_list|(
name|arg0
lambda|->
name|listOfFileColumns
operator|.
name|setEnabled
argument_list|(
name|extraFileColumns
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/*** begin: special table columns and special fields ***/
name|JButton
name|helpButton
init|=
operator|new
name|HelpAction
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Help on special fields"
argument_list|)
argument_list|,
name|HelpFiles
operator|.
name|specialFieldsHelp
argument_list|)
operator|.
name|getHelpButton
argument_list|()
decl_stmt|;
name|rankingColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show rank"
argument_list|)
argument_list|)
expr_stmt|;
name|qualityColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show quality"
argument_list|)
argument_list|)
expr_stmt|;
name|priorityColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show priority"
argument_list|)
argument_list|)
expr_stmt|;
name|relevanceColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show relevance"
argument_list|)
argument_list|)
expr_stmt|;
name|printedColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show printed status"
argument_list|)
argument_list|)
expr_stmt|;
name|readStatusColumn
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show read status"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "sync keywords" and "write special" fields may be configured mutually exclusive only
comment|// The implementation supports all combinations (TRUE+TRUE and FALSE+FALSE, even if the latter does not make sense)
comment|// To avoid confusion, we opted to make the setting mutually exclusive
name|syncKeywords
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Synchronize with keywords"
argument_list|)
argument_list|)
expr_stmt|;
name|writeSpecialFields
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Write values of special fields as separate fields to BibTeX"
argument_list|)
argument_list|)
expr_stmt|;
name|ButtonGroup
name|group
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|syncKeywords
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
name|writeSpecialFields
argument_list|)
expr_stmt|;
name|specialFieldsEnabled
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Enable special fields"
argument_list|)
argument_list|)
expr_stmt|;
name|specialFieldsEnabled
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
block|{
name|boolean
name|isEnabled
init|=
name|specialFieldsEnabled
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|rankingColumn
operator|.
name|setEnabled
argument_list|(
name|isEnabled
argument_list|)
expr_stmt|;
name|qualityColumn
operator|.
name|setEnabled
argument_list|(
name|isEnabled
argument_list|)
expr_stmt|;
name|priorityColumn
operator|.
name|setEnabled
argument_list|(
name|isEnabled
argument_list|)
expr_stmt|;
name|relevanceColumn
operator|.
name|setEnabled
argument_list|(
name|isEnabled
argument_list|)
expr_stmt|;
name|printedColumn
operator|.
name|setEnabled
argument_list|(
name|isEnabled
argument_list|)
expr_stmt|;
name|readStatusColumn
operator|.
name|setEnabled
argument_list|(
name|isEnabled
argument_list|)
expr_stmt|;
name|syncKeywords
operator|.
name|setEnabled
argument_list|(
name|isEnabled
argument_list|)
expr_stmt|;
name|writeSpecialFields
operator|.
name|setEnabled
argument_list|(
name|isEnabled
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|builder
operator|.
name|appendSeparator
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Special table columns"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|DefaultFormBuilder
name|specialTableColumnsBuilder
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"8dlu, 8dlu, 8cm, 8dlu, 8dlu, left:pref:grow"
argument_list|,
literal|"pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref"
argument_list|)
argument_list|)
decl_stmt|;
name|CellConstraints
name|cc
init|=
operator|new
name|CellConstraints
argument_list|()
decl_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|specialFieldsEnabled
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|rankingColumn
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|relevanceColumn
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|qualityColumn
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|priorityColumn
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|printedColumn
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|readStatusColumn
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|syncKeywords
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|writeSpecialFields
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|2
argument_list|,
literal|11
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|helpButton
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|fileColumn
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|urlColumn
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|preferUrl
argument_list|,
name|cc
operator|.
name|xy
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|preferDoi
argument_list|,
name|cc
operator|.
name|xy
argument_list|(
literal|6
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|arxivColumn
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|extraFileColumns
argument_list|,
name|cc
operator|.
name|xyw
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|listOfFileColumnsScrollPane
argument_list|,
name|cc
operator|.
name|xywh
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|specialTableColumnsBuilder
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
comment|/*** end: special table columns and special fields ***/
name|builder
operator|.
name|appendSeparator
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry table columns"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|tabPanel
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|JButton
name|buttonWidth
init|=
operator|new
name|JButton
argument_list|(
operator|new
name|UpdateWidthsAction
argument_list|()
argument_list|)
decl_stmt|;
name|JButton
name|buttonOrder
init|=
operator|new
name|JButton
argument_list|(
operator|new
name|UpdateOrderAction
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|buttonWidth
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|buttonOrder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|pan
operator|=
name|builder
operator|.
name|getPanel
argument_list|()
expr_stmt|;
name|pan
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|pan
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setValues ()
specifier|public
name|void
name|setValues
parameter_list|()
block|{
name|fileColumn
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|FILE_COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|urlColumn
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|URL_COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|preferUrl
operator|.
name|setSelected
argument_list|(
operator|!
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|PREFER_URL_DOI
argument_list|)
argument_list|)
expr_stmt|;
name|preferDoi
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|PREFER_URL_DOI
argument_list|)
argument_list|)
expr_stmt|;
name|fileColumn
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|FILE_COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|arxivColumn
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|ARXIV_COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|extraFileColumns
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXTRA_FILE_COLUMNS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraFileColumns
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|desiredColumns
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|LIST_OF_FILE_COLUMNS
argument_list|)
decl_stmt|;
name|int
name|listSize
init|=
name|listOfFileColumns
operator|.
name|getModel
argument_list|()
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|int
index|[]
name|indicesToSelect
init|=
operator|new
name|int
index|[
name|listSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
name|i
operator|++
control|)
block|{
name|indicesToSelect
index|[
name|i
index|]
operator|=
name|listSize
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|String
name|desiredColumn
range|:
name|desiredColumns
control|)
block|{
if|if
condition|(
name|listOfFileColumns
operator|.
name|getModel
argument_list|()
operator|.
name|getElementAt
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|desiredColumn
argument_list|)
condition|)
block|{
name|indicesToSelect
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
name|listOfFileColumns
operator|.
name|setSelectedIndices
argument_list|(
name|indicesToSelect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listOfFileColumns
operator|.
name|setSelectedIndices
argument_list|(
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
comment|/*** begin: special fields ***/
name|oldRankingColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RANKING
argument_list|)
expr_stmt|;
name|rankingColumn
operator|.
name|setSelected
argument_list|(
name|oldRankingColumn
argument_list|)
expr_stmt|;
name|oldQualityColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_QUALITY
argument_list|)
expr_stmt|;
name|qualityColumn
operator|.
name|setSelected
argument_list|(
name|oldQualityColumn
argument_list|)
expr_stmt|;
name|oldPriorityColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRIORITY
argument_list|)
expr_stmt|;
name|priorityColumn
operator|.
name|setSelected
argument_list|(
name|oldPriorityColumn
argument_list|)
expr_stmt|;
name|oldRelevanceColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RELEVANCE
argument_list|)
expr_stmt|;
name|relevanceColumn
operator|.
name|setSelected
argument_list|(
name|oldRelevanceColumn
argument_list|)
expr_stmt|;
name|oldPrintedColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRINTED
argument_list|)
expr_stmt|;
name|printedColumn
operator|.
name|setSelected
argument_list|(
name|oldPrintedColumn
argument_list|)
expr_stmt|;
name|oldReadStatusColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_READ
argument_list|)
expr_stmt|;
name|readStatusColumn
operator|.
name|setSelected
argument_list|(
name|oldReadStatusColumn
argument_list|)
expr_stmt|;
name|oldSyncKeyWords
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_AUTOSYNCSPECIALFIELDSTOKEYWORDS
argument_list|)
expr_stmt|;
name|syncKeywords
operator|.
name|setSelected
argument_list|(
name|oldSyncKeyWords
argument_list|)
expr_stmt|;
name|oldWriteSpecialFields
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SERIALIZESPECIALFIELDS
argument_list|)
expr_stmt|;
name|writeSpecialFields
operator|.
name|setSelected
argument_list|(
name|oldWriteSpecialFields
argument_list|)
expr_stmt|;
comment|// has to be called as last to correctly enable/disable the other settings
name|oldSpecialFieldsEnabled
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SPECIALFIELDSENABLED
argument_list|)
expr_stmt|;
name|specialFieldsEnabled
operator|.
name|setSelected
argument_list|(
operator|!
name|oldSpecialFieldsEnabled
argument_list|)
expr_stmt|;
name|specialFieldsEnabled
operator|.
name|setSelected
argument_list|(
name|oldSpecialFieldsEnabled
argument_list|)
expr_stmt|;
comment|// Call twice to make sure the ChangeListener is triggered
comment|/*** end: special fields ***/
name|tableRows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_NAMES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lengths
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_WIDTHS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|lengths
operator|.
name|size
argument_list|()
condition|)
block|{
name|tableRows
operator|.
name|add
argument_list|(
operator|new
name|TableRow
argument_list|(
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|lengths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableRows
operator|.
name|add
argument_list|(
operator|new
name|TableRow
argument_list|(
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rowCount
operator|=
name|tableRows
operator|.
name|size
argument_list|()
operator|+
literal|5
expr_stmt|;
name|ncWidth
operator|=
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|NUMBER_COL_WIDTH
argument_list|)
expr_stmt|;
block|}
DECL|class|DeleteRowAction
class|class
name|DeleteRowAction
extends|extends
name|AbstractAction
block|{
DECL|method|DeleteRowAction ()
specifier|public
name|DeleteRowAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Delete row"
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|REMOVE_NOBOX
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete rows"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
index|[]
name|rows
init|=
name|colSetup
operator|.
name|getSelectedRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|rows
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|offs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|rows
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
operator|(
name|rows
index|[
name|i
index|]
operator|<=
name|tableRows
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
name|rows
index|[
name|i
index|]
operator|!=
literal|0
operator|)
condition|)
block|{
name|tableRows
operator|.
name|remove
argument_list|(
name|rows
index|[
name|i
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
name|offs
operator|++
expr_stmt|;
block|}
block|}
name|rowCount
operator|-=
name|offs
expr_stmt|;
if|if
condition|(
name|rows
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|colSetup
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
name|colSetup
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|colSetup
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|tableChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|class|AddRowAction
class|class
name|AddRowAction
extends|extends
name|AbstractAction
block|{
DECL|method|AddRowAction ()
specifier|public
name|AddRowAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Add row"
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|ADD_NOBOX
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Insert rows"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
index|[]
name|rows
init|=
name|colSetup
operator|.
name|getSelectedRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|rows
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// No rows selected, so we just add one at the end.
name|rowCount
operator|++
expr_stmt|;
name|colSetup
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|colSetup
operator|.
name|repaint
argument_list|()
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|rows
index|[
name|i
index|]
operator|+
name|i
operator|)
operator|-
literal|1
operator|)
operator|<
name|tableRows
operator|.
name|size
argument_list|()
condition|)
block|{
name|tableRows
operator|.
name|add
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|rows
index|[
name|i
index|]
operator|+
name|i
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
operator|new
name|TableRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|rowCount
operator|+=
name|rows
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|rows
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|colSetup
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
name|colSetup
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|colSetup
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|tableChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|class|AbstractMoveRowAction
specifier|abstract
class|class
name|AbstractMoveRowAction
extends|extends
name|AbstractAction
block|{
DECL|method|AbstractMoveRowAction (String string, Icon image)
specifier|public
name|AbstractMoveRowAction
parameter_list|(
name|String
name|string
parameter_list|,
name|Icon
name|image
parameter_list|)
block|{
name|super
argument_list|(
name|string
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
DECL|method|swap (int i, int j)
specifier|public
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
if|if
condition|(
operator|(
name|i
operator|<
literal|0
operator|)
operator|||
operator|(
name|i
operator|>=
name|tableRows
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|(
name|j
operator|<
literal|0
operator|)
operator|||
operator|(
name|j
operator|>=
name|tableRows
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|TableRow
name|tmp
init|=
name|tableRows
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|tableRows
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|tableRows
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|tableRows
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MoveRowUpAction
class|class
name|MoveRowUpAction
extends|extends
name|AbstractMoveRowAction
block|{
DECL|method|MoveRowUpAction ()
specifier|public
name|MoveRowUpAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Up"
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|UP
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move up"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
index|[]
name|selected
init|=
name|colSetup
operator|.
name|getSelectedRows
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|selected
argument_list|)
expr_stmt|;
comment|// first element (#) not inside tableRows
comment|// don't move if a selected element is at bounce
if|if
condition|(
operator|(
name|selected
operator|.
name|length
operator|>
literal|0
operator|)
operator|&&
operator|(
name|selected
index|[
literal|0
index|]
operator|>
literal|1
operator|)
condition|)
block|{
name|boolean
index|[]
name|newSelected
init|=
operator|new
name|boolean
index|[
name|colSetup
operator|.
name|getRowCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|selected
control|)
block|{
name|swap
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|i
operator|-
literal|2
argument_list|)
expr_stmt|;
name|newSelected
index|[
name|i
operator|-
literal|1
index|]
operator|=
literal|true
expr_stmt|;
block|}
comment|// select all and remove unselected
name|colSetup
operator|.
name|setRowSelectionInterval
argument_list|(
literal|0
argument_list|,
name|colSetup
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colSetup
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|newSelected
index|[
name|i
index|]
condition|)
block|{
name|colSetup
operator|.
name|removeRowSelectionInterval
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|colSetup
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|colSetup
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|tableChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|class|MoveRowDownAction
class|class
name|MoveRowDownAction
extends|extends
name|AbstractMoveRowAction
block|{
DECL|method|MoveRowDownAction ()
specifier|public
name|MoveRowDownAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Down"
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|DOWN
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Down"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
index|[]
name|selected
init|=
name|colSetup
operator|.
name|getSelectedRows
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|selected
argument_list|)
expr_stmt|;
specifier|final
name|int
name|last
init|=
name|selected
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|boolean
index|[]
name|newSelected
init|=
operator|new
name|boolean
index|[
name|colSetup
operator|.
name|getRowCount
argument_list|()
index|]
decl_stmt|;
comment|// don't move if a selected element is at bounce
if|if
condition|(
operator|(
name|selected
operator|.
name|length
operator|>
literal|0
operator|)
operator|&&
operator|(
name|selected
index|[
name|last
index|]
operator|<
name|tableRows
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|last
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|swap
argument_list|(
name|selected
index|[
name|i
index|]
operator|-
literal|1
argument_list|,
name|selected
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|newSelected
index|[
name|selected
index|[
name|i
index|]
operator|+
literal|1
index|]
operator|=
literal|true
expr_stmt|;
block|}
comment|// select all and remove unselected
name|colSetup
operator|.
name|setRowSelectionInterval
argument_list|(
literal|0
argument_list|,
name|colSetup
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colSetup
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|newSelected
index|[
name|i
index|]
condition|)
block|{
name|colSetup
operator|.
name|removeRowSelectionInterval
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|colSetup
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|colSetup
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|tableChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|class|UpdateOrderAction
class|class
name|UpdateOrderAction
extends|extends
name|AbstractAction
block|{
DECL|method|UpdateOrderAction ()
specifier|public
name|UpdateOrderAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Update to current column order"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|BasePanel
name|panel
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// idea: sort elements according to value stored in hash, keep
comment|// everything not inside hash/mainTable as it was
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// first element (#) not inside tableRows
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|panel
operator|.
name|mainTable
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|panel
operator|.
name|mainTable
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|name
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|tableRows
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
block|{
name|Integer
name|n1
init|=
name|map
operator|.
name|get
argument_list|(
name|o1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|n2
init|=
name|map
operator|.
name|get
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|n1
operator|==
literal|null
operator|)
operator|||
operator|(
name|n2
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|n1
operator|.
name|compareTo
argument_list|(
name|n2
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|colSetup
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|tableChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|class|UpdateWidthsAction
class|class
name|UpdateWidthsAction
extends|extends
name|AbstractAction
block|{
DECL|method|UpdateWidthsAction ()
specifier|public
name|UpdateWidthsAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Update to current column widths"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|BasePanel
name|panel
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TableColumnModel
name|colMod
init|=
name|panel
operator|.
name|mainTable
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|colSetup
operator|.
name|setValueAt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|colMod
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|colMod
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|String
name|name
init|=
name|panel
operator|.
name|mainTable
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|colMod
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|getWidth
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|i
operator|<=
name|tableRows
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|String
operator|)
name|colSetup
operator|.
name|getValueAt
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|colSetup
operator|.
name|setValueAt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|width
argument_list|)
argument_list|,
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Doesn't match; search for a matching col in our table
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|colSetup
operator|.
name|getRowCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|j
operator|<
name|tableRows
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|String
operator|)
name|colSetup
operator|.
name|getValueAt
argument_list|(
name|j
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|colSetup
operator|.
name|setValueAt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|width
argument_list|)
argument_list|,
name|j
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem with table columns"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|colSetup
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|colSetup
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Store changes to table preferences. This method is called when      * the user clicks Ok.      *      */
annotation|@
name|Override
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|FILE_COLUMN
argument_list|,
name|fileColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|URL_COLUMN
argument_list|,
name|urlColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|PREFER_URL_DOI
argument_list|,
name|preferDoi
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|ARXIV_COLUMN
argument_list|,
name|arxivColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXTRA_FILE_COLUMNS
argument_list|,
name|extraFileColumns
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraFileColumns
operator|.
name|isSelected
argument_list|()
operator|&&
operator|!
name|listOfFileColumns
operator|.
name|isSelectionEmpty
argument_list|()
condition|)
block|{
name|int
name|numberSelected
init|=
name|listOfFileColumns
operator|.
name|getSelectedIndices
argument_list|()
operator|.
name|length
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|selections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numberSelected
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberSelected
condition|;
name|i
operator|++
control|)
block|{
name|selections
operator|.
name|add
argument_list|(
name|listOfFileColumns
operator|.
name|getModel
argument_list|()
operator|.
name|getElementAt
argument_list|(
name|listOfFileColumns
operator|.
name|getSelectedIndices
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|LIST_OF_FILE_COLUMNS
argument_list|,
name|selections
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|LIST_OF_FILE_COLUMNS
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*** begin: special fields ***/
name|boolean
name|newSpecialFieldsEnabled
init|=
name|specialFieldsEnabled
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newRankingColumn
init|=
name|rankingColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newQualityColumn
init|=
name|qualityColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newPriorityColumn
init|=
name|priorityColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newRelevanceColumn
init|=
name|relevanceColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newPrintedColumn
init|=
name|printedColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newReadStatusColumn
init|=
name|readStatusColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newSyncKeyWords
init|=
name|syncKeywords
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newWriteSpecialFields
init|=
name|writeSpecialFields
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|restartRequired
decl_stmt|;
name|restartRequired
operator|=
operator|(
name|oldSpecialFieldsEnabled
operator|!=
name|newSpecialFieldsEnabled
operator|)
operator|||
operator|(
name|oldRankingColumn
operator|!=
name|newRankingColumn
operator|)
operator|||
operator|(
name|oldQualityColumn
operator|!=
name|newQualityColumn
operator|)
operator|||
operator|(
name|oldPriorityColumn
operator|!=
name|newPriorityColumn
operator|)
operator|||
operator|(
name|oldRelevanceColumn
operator|!=
name|newRelevanceColumn
operator|)
operator|||
operator|(
name|oldPrintedColumn
operator|!=
name|newPrintedColumn
operator|)
operator|||
operator|(
name|oldReadStatusColumn
operator|!=
name|newReadStatusColumn
operator|)
operator|||
operator|(
name|oldSyncKeyWords
operator|!=
name|newSyncKeyWords
operator|)
operator|||
operator|(
name|oldWriteSpecialFields
operator|!=
name|newWriteSpecialFields
operator|)
expr_stmt|;
if|if
condition|(
name|restartRequired
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You have changed settings for special fields."
argument_list|)
operator|.
name|concat
argument_list|(
literal|" "
argument_list|)
operator|.
name|concat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must restart JabRef for this to come into effect."
argument_list|)
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Changed special field settings"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
block|}
comment|// restart required implies that the settings have been changed
comment|// the seetings need to be stored
if|if
condition|(
name|restartRequired
condition|)
block|{
name|prefs
operator|.
name|putBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SPECIALFIELDSENABLED
argument_list|,
name|newSpecialFieldsEnabled
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RANKING
argument_list|,
name|newRankingColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRIORITY
argument_list|,
name|newPriorityColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_QUALITY
argument_list|,
name|newQualityColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_RELEVANCE
argument_list|,
name|newRelevanceColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_PRINTED
argument_list|,
name|newPrintedColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SHOWCOLUMN_READ
argument_list|,
name|newReadStatusColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_AUTOSYNCSPECIALFIELDSTOKEYWORDS
argument_list|,
name|newSyncKeyWords
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|SpecialFieldsUtils
operator|.
name|PREF_SERIALIZESPECIALFIELDS
argument_list|,
name|newWriteSpecialFields
argument_list|)
expr_stmt|;
block|}
comment|/*** end: special fields ***/
if|if
condition|(
name|colSetup
operator|.
name|isEditing
argument_list|()
condition|)
block|{
name|int
name|col
init|=
name|colSetup
operator|.
name|getEditingColumn
argument_list|()
decl_stmt|;
name|int
name|row
init|=
name|colSetup
operator|.
name|getEditingRow
argument_list|()
decl_stmt|;
name|colSetup
operator|.
name|getCellEditor
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|.
name|stopCellEditing
argument_list|()
expr_stmt|;
block|}
comment|// Now we need to make sense of the contents the user has made to the
comment|// table setup table.
if|if
condition|(
name|tableChanged
condition|)
block|{
comment|// First we remove all rows with empty names.
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|tableRows
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|tableRows
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tableRows
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|// Then we make arrays
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tableRows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|widths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tableRows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|nWidths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tableRows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|prefs
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|NUMBER_COL_WIDTH
argument_list|,
name|ncWidth
argument_list|)
expr_stmt|;
for|for
control|(
name|TableRow
name|tr
range|:
name|tableRows
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|tr
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|nWidths
operator|.
name|add
argument_list|(
name|tr
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|widths
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|tr
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Finally, we store the new preferences.
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_NAMES
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_WIDTHS
argument_list|,
name|widths
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|validateSettings ()
specifier|public
name|boolean
name|validateSettings
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getTabName ()
specifier|public
name|String
name|getTabName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry table columns"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

