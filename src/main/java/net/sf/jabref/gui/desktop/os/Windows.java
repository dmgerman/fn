begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.desktop.os
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|os
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|ExternalFileTypes
import|;
end_import

begin_class
DECL|class|Windows
specifier|public
class|class
name|Windows
implements|implements
name|NativeDesktop
block|{
DECL|field|DEFAULT_EXECUTABLE_EXTENSION
specifier|private
specifier|static
name|String
name|DEFAULT_EXECUTABLE_EXTENSION
init|=
literal|".exe"
decl_stmt|;
annotation|@
name|Override
DECL|method|openFile (String filePath, String fileType)
specifier|public
name|void
name|openFile
parameter_list|(
name|String
name|filePath
parameter_list|,
name|String
name|fileType
parameter_list|)
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|type
init|=
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeByExt
argument_list|(
name|fileType
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|type
operator|.
name|get
argument_list|()
operator|.
name|getOpenWithApplication
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|openFileWithApplication
argument_list|(
name|filePath
argument_list|,
name|type
operator|.
name|get
argument_list|()
operator|.
name|getOpenWithApplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//filePath as string, because it could be an URL
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"explorer.exe"
block|,
name|filePath
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|detectProgramPath (String programName, String directoryName)
specifier|public
name|String
name|detectProgramPath
parameter_list|(
name|String
name|programName
parameter_list|,
name|String
name|directoryName
parameter_list|)
block|{
name|String
name|progFiles
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"ProgramFiles(x86)"
argument_list|)
decl_stmt|;
if|if
condition|(
name|progFiles
operator|==
literal|null
condition|)
block|{
name|progFiles
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"ProgramFiles"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|directoryName
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|directoryName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|progFiles
argument_list|,
name|directoryName
argument_list|,
name|programName
argument_list|,
name|DEFAULT_EXECUTABLE_EXTENSION
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|Paths
operator|.
name|get
argument_list|(
name|progFiles
argument_list|,
name|programName
argument_list|,
name|DEFAULT_EXECUTABLE_EXTENSION
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|openFileWithApplication (String filePath, String application)
specifier|public
name|void
name|openFileWithApplication
parameter_list|(
name|String
name|filePath
parameter_list|,
name|String
name|application
parameter_list|)
throws|throws
name|IOException
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|application
argument_list|)
operator|+
literal|" "
operator|+
name|Paths
operator|.
name|get
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|openFolderAndSelectFile (String filePath)
specifier|public
name|void
name|openFolderAndSelectFile
parameter_list|(
name|String
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|cmd
init|=
literal|"explorer.exe"
decl_stmt|;
name|String
name|arg
init|=
literal|"/select,"
decl_stmt|;
name|String
index|[]
name|commandWithArgs
init|=
block|{
name|cmd
block|,
name|arg
block|,
name|filePath
block|}
decl_stmt|;
comment|//Array variant, because otherwise the Tokenizer, which is internally run, kills the whitespaces in the path
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|commandWithArgs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|openConsole (String absolutePath)
specifier|public
name|void
name|openConsole
parameter_list|(
name|String
name|absolutePath
parameter_list|)
throws|throws
name|IOException
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
literal|"cmd.exe /c start"
argument_list|,
literal|null
argument_list|,
operator|new
name|File
argument_list|(
name|absolutePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

