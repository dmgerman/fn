begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.importer.actions
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|ExplicitGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_comment
comment|/**  * Converts legacy explicit groups, where the group contained a list of assigned entries, to the new format,  * where the entry stores a list of groups it belongs to.  */
end_comment

begin_class
DECL|class|ConvertLegacyExplicitGroups
specifier|public
class|class
name|ConvertLegacyExplicitGroups
implements|implements
name|PostOpenAction
block|{
annotation|@
name|Override
DECL|method|isActionNecessary (ParserResult pr)
specifier|public
name|boolean
name|isActionNecessary
parameter_list|(
name|ParserResult
name|pr
parameter_list|)
block|{
if|if
condition|(
name|pr
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
operator|!
name|getExplicitGroupsWithLegacyKeys
argument_list|(
name|pr
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|performAction (BasePanel panel, ParserResult pr)
specifier|public
name|void
name|performAction
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|ParserResult
name|pr
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|pr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pr
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ExplicitGroup
name|group
range|:
name|getExplicitGroupsWithLegacyKeys
argument_list|(
name|pr
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|entryKey
range|:
name|group
operator|.
name|getLegacyEntryKeys
argument_list|()
control|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntriesByKey
argument_list|(
name|entryKey
argument_list|)
control|)
block|{
name|group
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
name|group
operator|.
name|clearLegacyEntryKeys
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getExplicitGroupsWithLegacyKeys (GroupTreeNode node)
specifier|private
name|List
argument_list|<
name|ExplicitGroup
argument_list|>
name|getExplicitGroupsWithLegacyKeys
parameter_list|(
name|GroupTreeNode
name|node
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExplicitGroup
argument_list|>
name|findings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getGroup
argument_list|()
operator|instanceof
name|ExplicitGroup
condition|)
block|{
name|ExplicitGroup
name|group
init|=
operator|(
name|ExplicitGroup
operator|)
name|node
operator|.
name|getGroup
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|group
operator|.
name|getLegacyEntryKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|findings
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|.
name|getChildren
argument_list|()
operator|.
name|forEach
argument_list|(
name|child
lambda|->
name|findings
operator|.
name|addAll
argument_list|(
name|getExplicitGroupsWithLegacyKeys
argument_list|(
name|child
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|findings
return|;
block|}
block|}
end_class

end_unit

