begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2016 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.gui.errorconsole
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|errorconsole
package|;
end_package

begin_import
import|import
name|javafx
operator|.
name|fxml
operator|.
name|FXML
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Alert
operator|.
name|AlertType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|DialogPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ListCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ListView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|stage
operator|.
name|Stage
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|FXAlert
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|com
operator|.
name|airhacks
operator|.
name|afterburner
operator|.
name|views
operator|.
name|FXMLView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_class
DECL|class|ErrorConsoleView
specifier|public
class|class
name|ErrorConsoleView
extends|extends
name|FXMLView
block|{
DECL|field|errorViewModel
specifier|private
specifier|final
name|ErrorConsoleViewModel
name|errorViewModel
init|=
operator|new
name|ErrorConsoleViewModel
argument_list|()
decl_stmt|;
annotation|@
name|FXML
DECL|field|closeButton
specifier|private
name|Button
name|closeButton
decl_stmt|;
annotation|@
name|FXML
DECL|field|copyLogButton
specifier|private
name|Button
name|copyLogButton
decl_stmt|;
annotation|@
name|FXML
DECL|field|createIssueButton
specifier|private
name|Button
name|createIssueButton
decl_stmt|;
annotation|@
name|FXML
DECL|field|allMessages
specifier|private
name|ListView
argument_list|<
name|LogEvent
argument_list|>
name|allMessages
decl_stmt|;
annotation|@
name|FXML
DECL|field|descriptionLabel
specifier|private
name|Label
name|descriptionLabel
decl_stmt|;
DECL|method|ErrorConsoleView ()
specifier|public
name|ErrorConsoleView
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|bundle
operator|=
name|Localization
operator|.
name|getMessages
argument_list|()
expr_stmt|;
block|}
DECL|method|show ()
specifier|public
name|void
name|show
parameter_list|()
block|{
name|FXAlert
name|errorConsole
init|=
operator|new
name|FXAlert
argument_list|(
name|AlertType
operator|.
name|ERROR
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Event log"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DialogPane
name|pane
init|=
operator|(
name|DialogPane
operator|)
name|this
operator|.
name|getView
argument_list|()
decl_stmt|;
name|errorConsole
operator|.
name|setDialogPane
argument_list|(
name|pane
argument_list|)
expr_stmt|;
name|errorConsole
operator|.
name|setResizable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|errorConsole
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|initialize ()
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|listViewStyle
argument_list|()
expr_stmt|;
name|allMessages
operator|.
name|itemsProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|errorViewModel
operator|.
name|allMessagesDataproperty
argument_list|()
argument_list|)
expr_stmt|;
name|descriptionLabel
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CONSOLE
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|copyLogButton ()
specifier|private
name|void
name|copyLogButton
parameter_list|()
block|{
name|errorViewModel
operator|.
name|copyLog
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|createIssueButton ()
specifier|private
name|void
name|createIssueButton
parameter_list|()
block|{
name|errorViewModel
operator|.
name|reportIssue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|closeErrorDialog ()
specifier|private
name|void
name|closeErrorDialog
parameter_list|()
block|{
name|Stage
name|stage
init|=
operator|(
name|Stage
operator|)
name|closeButton
operator|.
name|getScene
argument_list|()
operator|.
name|getWindow
argument_list|()
decl_stmt|;
name|stage
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Style the list view with icon and message color      */
DECL|method|listViewStyle ()
specifier|private
name|void
name|listViewStyle
parameter_list|()
block|{
comment|// Handler for listCell appearance (example for exception Cell)
name|allMessages
operator|.
name|setCellFactory
argument_list|(
operator|new
name|Callback
argument_list|<
name|ListView
argument_list|<
name|LogEvent
argument_list|>
argument_list|,
name|ListCell
argument_list|<
name|LogEvent
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListCell
argument_list|<
name|LogEvent
argument_list|>
name|call
parameter_list|(
name|ListView
argument_list|<
name|LogEvent
argument_list|>
name|listView
parameter_list|)
block|{
return|return
operator|new
name|ListCell
argument_list|<
name|LogEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|updateItem
parameter_list|(
name|LogEvent
name|logMessage
parameter_list|,
name|boolean
name|empty
parameter_list|)
block|{
name|super
operator|.
name|updateItem
argument_list|(
name|logMessage
argument_list|,
name|empty
argument_list|)
expr_stmt|;
if|if
condition|(
name|logMessage
operator|!=
literal|null
condition|)
block|{
name|setText
argument_list|(
name|logMessage
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Level
name|logLevel
init|=
name|logMessage
operator|.
name|getLevel
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|logLevel
operator|.
name|getStandardLevel
argument_list|()
condition|)
block|{
case|case
name|ERROR
case|:
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"exception"
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|INTEGRITY_FAIL
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|WARN
case|:
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|INTEGRITY_WARN
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INFO
case|:
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"log"
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|INTEGRITY_INFO
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setGraphic
argument_list|(
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

