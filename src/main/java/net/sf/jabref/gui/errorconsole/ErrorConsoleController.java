begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.errorconsole
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|errorconsole
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ListChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|fxml
operator|.
name|FXML
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ListView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|SelectionMode
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|stage
operator|.
name|Stage
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|ClipBoardManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBindingPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ViewModelListCellFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_comment
comment|/**  * Controller for the error console view model having access to ui elements as well as to the view model.  */
end_comment

begin_class
DECL|class|ErrorConsoleController
specifier|public
class|class
name|ErrorConsoleController
block|{
DECL|field|errorViewModel
specifier|private
specifier|final
name|ErrorConsoleViewModel
name|errorViewModel
init|=
operator|new
name|ErrorConsoleViewModel
argument_list|()
decl_stmt|;
annotation|@
name|FXML
DECL|field|closeButton
specifier|private
name|Button
name|closeButton
decl_stmt|;
annotation|@
name|FXML
DECL|field|copyLogButton
specifier|private
name|Button
name|copyLogButton
decl_stmt|;
annotation|@
name|FXML
DECL|field|createIssueButton
specifier|private
name|Button
name|createIssueButton
decl_stmt|;
annotation|@
name|FXML
DECL|field|allMessages
specifier|private
name|ListView
argument_list|<
name|LogEvent
argument_list|>
name|allMessages
decl_stmt|;
annotation|@
name|FXML
DECL|field|descriptionLabel
specifier|private
name|Label
name|descriptionLabel
decl_stmt|;
annotation|@
name|FXML
DECL|method|initialize ()
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|listViewStyle
argument_list|()
expr_stmt|;
name|allMessages
operator|.
name|itemsProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|errorViewModel
operator|.
name|allMessagesDataproperty
argument_list|()
argument_list|)
expr_stmt|;
name|allMessages
operator|.
name|scrollTo
argument_list|(
name|errorViewModel
operator|.
name|allMessagesDataproperty
argument_list|()
operator|.
name|getSize
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|allMessages
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|setSelectionMode
argument_list|(
name|SelectionMode
operator|.
name|MULTIPLE
argument_list|)
expr_stmt|;
name|errorViewModel
operator|.
name|allMessagesDataproperty
argument_list|()
operator|.
name|addListener
argument_list|(
call|(
name|ListChangeListener
call|)
argument_list|(
name|change
lambda|->
block|{
name|int
name|size
init|=
name|errorViewModel
operator|.
name|allMessagesDataproperty
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|allMessages
operator|.
name|scrollTo
argument_list|(
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|descriptionLabel
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CONSOLE
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|copySelectedLogEntries (KeyEvent event)
specifier|private
name|void
name|copySelectedLogEntries
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
name|KeyBindingPreferences
name|keyPreferences
init|=
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyPreferences
operator|.
name|checkKeyCombinationEquality
argument_list|(
name|KeyBinding
operator|.
name|COPY
argument_list|,
name|event
argument_list|)
condition|)
block|{
name|ObservableList
argument_list|<
name|LogEvent
argument_list|>
name|selectedEntries
init|=
name|allMessages
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItems
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|selectedEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|new
name|ClipBoardManager
argument_list|()
operator|.
name|setClipboardContents
argument_list|(
name|selectedEntries
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|message
lambda|->
name|message
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|FXML
DECL|method|copyLogButton ()
specifier|private
name|void
name|copyLogButton
parameter_list|()
block|{
name|errorViewModel
operator|.
name|copyLog
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|createIssueButton ()
specifier|private
name|void
name|createIssueButton
parameter_list|()
block|{
name|errorViewModel
operator|.
name|reportIssue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|closeErrorDialog ()
specifier|private
name|void
name|closeErrorDialog
parameter_list|()
block|{
name|Stage
name|stage
init|=
operator|(
name|Stage
operator|)
name|closeButton
operator|.
name|getScene
argument_list|()
operator|.
name|getWindow
argument_list|()
decl_stmt|;
name|stage
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Style the list view with icon and message color      */
DECL|method|listViewStyle ()
specifier|private
name|void
name|listViewStyle
parameter_list|()
block|{
comment|// Handler for listCell appearance (example for exception Cell)
name|allMessages
operator|.
name|setCellFactory
argument_list|(
operator|new
name|ViewModelListCellFactory
argument_list|<
name|LogEvent
argument_list|>
argument_list|()
operator|.
name|withGraphic
argument_list|(
name|viewModel
lambda|->
block|{
name|Level
name|logLevel
init|=
name|viewModel
operator|.
name|getLevel
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|logLevel
operator|.
name|getStandardLevel
argument_list|()
condition|)
block|{
case|case
name|ERROR
case|:
return|return
operator|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|INTEGRITY_FAIL
operator|.
name|getGraphicNode
argument_list|()
operator|)
return|;
case|case
name|WARN
case|:
return|return
operator|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|INTEGRITY_WARN
operator|.
name|getGraphicNode
argument_list|()
operator|)
return|;
case|case
name|INFO
case|:
return|return
operator|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|INTEGRITY_INFO
operator|.
name|getGraphicNode
argument_list|()
operator|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|withStyleClass
argument_list|(
name|viewModel
lambda|->
block|{
name|Level
name|logLevel
init|=
name|viewModel
operator|.
name|getLevel
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|logLevel
operator|.
name|getStandardLevel
argument_list|()
condition|)
block|{
case|case
name|ERROR
case|:
return|return
literal|"exception"
return|;
case|case
name|WARN
case|:
return|return
literal|"output"
return|;
case|case
name|INFO
case|:
return|return
literal|"log"
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|withText
argument_list|(
name|viewModel
lambda|->
name|viewModel
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

