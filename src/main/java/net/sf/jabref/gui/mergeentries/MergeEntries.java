begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.mergeentries
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JSeparator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ScrollPaneConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|PreviewPanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|component
operator|.
name|DiffHighlightingTextPane
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|BibEntryWriter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|LatexFieldFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
operator|.
name|SentenceCaseFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|DiffHighlighting
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|CellConstraints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|ColumnSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|RowSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @author Oscar Gustafsson  *  *         Class for dealing with merging entries  */
end_comment

begin_class
DECL|class|MergeEntries
specifier|public
class|class
name|MergeEntries
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MergeEntries
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Headings
DECL|field|columnHeadings
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnHeadings
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Field"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Left entry"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Left"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"None"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Right"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Right entry"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|DIFF_MODES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DIFF_MODES
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Plain text"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show diff"
argument_list|)
operator|+
literal|" - "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"word"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show diff"
argument_list|)
operator|+
literal|" - "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"character"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show symmetric diff"
argument_list|)
operator|+
literal|" - "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"word"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show symmetric diff"
argument_list|)
operator|+
literal|" - "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"character"
argument_list|)
block|}
decl_stmt|;
DECL|field|identicalFields
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|identicalFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|differentFields
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|differentFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|mergedEntry
specifier|private
specifier|final
name|BibEntry
name|mergedEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
DECL|field|leftEntry
specifier|private
specifier|final
name|BibEntry
name|leftEntry
decl_stmt|;
DECL|field|rightEntry
specifier|private
specifier|final
name|BibEntry
name|rightEntry
decl_stmt|;
DECL|field|databaseType
specifier|private
specifier|final
name|BibDatabaseMode
name|databaseType
decl_stmt|;
DECL|field|scrollPane
specifier|private
name|JScrollPane
name|scrollPane
decl_stmt|;
DECL|field|sourceView
specifier|private
name|JTextArea
name|sourceView
decl_stmt|;
DECL|field|entryPreview
specifier|private
name|PreviewPanel
name|entryPreview
decl_stmt|;
DECL|field|doneBuilding
specifier|private
name|Boolean
name|doneBuilding
decl_stmt|;
DECL|field|identicalTypes
specifier|private
name|Boolean
name|identicalTypes
decl_stmt|;
DECL|field|typeRadioButtons
specifier|private
name|List
argument_list|<
name|JRadioButton
argument_list|>
name|typeRadioButtons
decl_stmt|;
DECL|field|allFields
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|allFields
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|diffMode
specifier|private
specifier|final
name|JComboBox
argument_list|<
name|String
argument_list|>
name|diffMode
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|leftTextPanes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JTextPane
argument_list|>
name|leftTextPanes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|rightTextPanes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JTextPane
argument_list|>
name|rightTextPanes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|radioButtons
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|JRadioButton
argument_list|>
argument_list|>
name|radioButtons
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|mainPanel
specifier|private
specifier|final
name|JPanel
name|mainPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|MARGIN
specifier|private
specifier|static
specifier|final
name|String
name|MARGIN
init|=
literal|"10px"
decl_stmt|;
DECL|field|HEADING_LABELS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|JLabel
argument_list|>
name|HEADING_LABELS
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
DECL|field|CELL_CONSTRAINTS
specifier|private
specifier|static
specifier|final
name|CellConstraints
name|CELL_CONSTRAINTS
init|=
operator|new
name|CellConstraints
argument_list|()
decl_stmt|;
comment|/**      * Constructor taking two entries      *      * @param entryLeft Left entry      * @param entryRight Right entry      * @param type Bib database mode      */
DECL|method|MergeEntries (BibEntry entryLeft, BibEntry entryRight, BibDatabaseMode type)
specifier|public
name|MergeEntries
parameter_list|(
name|BibEntry
name|entryLeft
parameter_list|,
name|BibEntry
name|entryRight
parameter_list|,
name|BibDatabaseMode
name|type
parameter_list|)
block|{
name|leftEntry
operator|=
name|entryLeft
expr_stmt|;
name|rightEntry
operator|=
name|entryRight
expr_stmt|;
name|this
operator|.
name|databaseType
operator|=
name|type
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor with optional column captions for the two entries      *      * @param entryLeft Left entry      * @param entryRight Right entry      * @param headingLeft Heading for left entry      * @param headingRight Heading for right entry      * @param type Bib database mode      */
DECL|method|MergeEntries (BibEntry entryLeft, BibEntry entryRight, String headingLeft, String headingRight, BibDatabaseMode type)
specifier|public
name|MergeEntries
parameter_list|(
name|BibEntry
name|entryLeft
parameter_list|,
name|BibEntry
name|entryRight
parameter_list|,
name|String
name|headingLeft
parameter_list|,
name|String
name|headingRight
parameter_list|,
name|BibDatabaseMode
name|type
parameter_list|)
block|{
name|columnHeadings
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|headingLeft
argument_list|)
expr_stmt|;
name|columnHeadings
operator|.
name|set
argument_list|(
literal|5
argument_list|,
name|headingRight
argument_list|)
expr_stmt|;
name|this
operator|.
name|leftEntry
operator|=
name|entryLeft
expr_stmt|;
name|this
operator|.
name|rightEntry
operator|=
name|entryRight
expr_stmt|;
name|this
operator|.
name|databaseType
operator|=
name|type
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
comment|/**      * Main function for building the merge entry JPanel      */
DECL|method|initialize ()
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|doneBuilding
operator|=
literal|false
expr_stmt|;
name|setupFields
argument_list|()
expr_stmt|;
name|fillDiffModes
argument_list|()
expr_stmt|;
comment|// Create main layout
name|String
name|colSpecMain
init|=
literal|"left:pref, 5px, center:3cm:grow, 5px, center:pref, 3px, center:pref, 3px, center:pref, 5px, center:3cm:grow"
decl_stmt|;
name|String
name|colSpecMerge
init|=
literal|"left:pref, 5px, fill:3cm:grow, 5px, center:pref, 3px, center:pref, 3px, center:pref, 5px, fill:3cm:grow"
decl_stmt|;
name|String
name|rowSpec
init|=
literal|"pref, pref, 10px, fill:5cm:grow, 10px, pref, 10px, fill:3cm:grow"
decl_stmt|;
name|StringBuilder
name|rowBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|rowBuilder
operator|.
name|append
argument_list|(
literal|"pref, 2dlu, "
argument_list|)
expr_stmt|;
block|}
name|rowBuilder
operator|.
name|append
argument_list|(
literal|"pref"
argument_list|)
expr_stmt|;
name|JPanel
name|mergePanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|FormLayout
name|mainLayout
init|=
operator|new
name|FormLayout
argument_list|(
name|colSpecMain
argument_list|,
name|rowSpec
argument_list|)
decl_stmt|;
name|FormLayout
name|mergeLayout
init|=
operator|new
name|FormLayout
argument_list|(
name|colSpecMerge
argument_list|,
name|rowBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|mainPanel
operator|.
name|setLayout
argument_list|(
name|mainLayout
argument_list|)
expr_stmt|;
name|mergePanel
operator|.
name|setLayout
argument_list|(
name|mergeLayout
argument_list|)
expr_stmt|;
name|setupHeadingRows
argument_list|()
expr_stmt|;
name|mainPanel
operator|.
name|add
argument_list|(
operator|new
name|JSeparator
argument_list|()
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|setupEntryTypeRow
argument_list|(
name|mergePanel
argument_list|)
expr_stmt|;
name|int
name|maxLabelWidth
init|=
name|setupFieldRows
argument_list|(
name|mergePanel
argument_list|)
decl_stmt|;
comment|// Create and add scrollpane
name|scrollPane
operator|=
operator|new
name|JScrollPane
argument_list|(
name|mergePanel
argument_list|,
name|ScrollPaneConstants
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|ScrollPaneConstants
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|()
argument_list|)
expr_stmt|;
name|updateTextPanes
argument_list|(
name|allFields
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|add
argument_list|(
name|scrollPane
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|add
argument_list|(
operator|new
name|JSeparator
argument_list|()
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|synchronizeColumnWidths
argument_list|(
name|mainLayout
argument_list|,
name|mergeLayout
argument_list|,
name|maxLabelWidth
argument_list|)
expr_stmt|;
comment|// Setup a PreviewPanel and a Bibtex source box for the merged entry
name|mainPanel
operator|.
name|add
argument_list|(
name|boldFontLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Merged entry"
argument_list|)
argument_list|)
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|entryPreview
operator|=
operator|new
name|PreviewPanel
argument_list|(
literal|null
argument_list|,
name|mergedEntry
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|add
argument_list|(
name|entryPreview
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|add
argument_list|(
name|boldFontLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Merged BibTeX source code"
argument_list|)
argument_list|)
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xyw
argument_list|(
literal|8
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|sourceView
operator|=
operator|new
name|JTextArea
argument_list|()
expr_stmt|;
name|sourceView
operator|.
name|setLineWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sourceView
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Monospaced"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_SIZE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|add
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|sourceView
argument_list|)
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xyw
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|sourceView
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Add some margin around the layout
name|mainLayout
operator|.
name|appendRow
argument_list|(
name|RowSpec
operator|.
name|decode
argument_list|(
name|MARGIN
argument_list|)
argument_list|)
expr_stmt|;
name|mainLayout
operator|.
name|appendColumn
argument_list|(
name|ColumnSpec
operator|.
name|decode
argument_list|(
name|MARGIN
argument_list|)
argument_list|)
expr_stmt|;
name|mainLayout
operator|.
name|insertRow
argument_list|(
literal|1
argument_list|,
name|RowSpec
operator|.
name|decode
argument_list|(
name|MARGIN
argument_list|)
argument_list|)
expr_stmt|;
name|mainLayout
operator|.
name|insertColumn
argument_list|(
literal|1
argument_list|,
name|ColumnSpec
operator|.
name|decode
argument_list|(
name|MARGIN
argument_list|)
argument_list|)
expr_stmt|;
comment|// Everything done, allow any action to actually update the merged entry
name|doneBuilding
operator|=
literal|true
expr_stmt|;
name|updateAll
argument_list|()
expr_stmt|;
comment|// Show what we've got
name|mainPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|scrollPane
operator|.
name|getVerticalScrollBar
argument_list|()
operator|.
name|setValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupFieldRows (JPanel mergePanel)
specifier|private
name|int
name|setupFieldRows
parameter_list|(
name|JPanel
name|mergePanel
parameter_list|)
block|{
comment|// For all fields in joint add a row and possibly radio buttons
name|int
name|row
init|=
literal|2
decl_stmt|;
name|int
name|maxLabelWidth
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|allFields
control|)
block|{
name|JLabel
name|label
init|=
name|boldFontLabel
argument_list|(
operator|new
name|SentenceCaseFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|label
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
operator|(
literal|2
operator|*
name|row
operator|)
operator|-
literal|1
argument_list|,
literal|"left, top"
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|leftString
init|=
name|leftEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|rightString
init|=
name|rightEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftString
operator|.
name|equals
argument_list|(
name|rightString
argument_list|)
condition|)
block|{
name|identicalFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|differentFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|maxLabelWidth
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxLabelWidth
argument_list|,
name|label
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|width
argument_list|)
expr_stmt|;
comment|// Left text pane
if|if
condition|(
name|leftString
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|JTextPane
name|tf
init|=
operator|new
name|DiffHighlightingTextPane
argument_list|()
decl_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|tf
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xy
argument_list|(
literal|3
argument_list|,
operator|(
literal|2
operator|*
name|row
operator|)
operator|-
literal|1
argument_list|,
literal|"f, f"
argument_list|)
argument_list|)
expr_stmt|;
name|leftTextPanes
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|tf
argument_list|)
expr_stmt|;
block|}
comment|// Add radio buttons if the two entries do not have identical fields
if|if
condition|(
name|identicalFields
operator|.
name|contains
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|mergedEntry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|leftString
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Will only happen if both entries have the field and the content is identical
block|}
else|else
block|{
name|ButtonGroup
name|group
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JRadioButton
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|3
condition|;
name|k
operator|++
control|)
block|{
name|JRadioButton
name|button
init|=
operator|new
name|JRadioButton
argument_list|()
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|button
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xy
argument_list|(
literal|5
operator|+
operator|(
name|k
operator|*
literal|2
operator|)
argument_list|,
operator|(
literal|2
operator|*
name|row
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|.
name|addChangeListener
argument_list|(
name|e
lambda|->
name|updateAll
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
name|radioButtons
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|list
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftString
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rightString
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Right text pane
if|if
condition|(
name|rightString
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|JTextPane
name|tf
init|=
operator|new
name|DiffHighlightingTextPane
argument_list|()
decl_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|tf
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xy
argument_list|(
literal|11
argument_list|,
operator|(
literal|2
operator|*
name|row
operator|)
operator|-
literal|1
argument_list|,
literal|"f, f"
argument_list|)
argument_list|)
expr_stmt|;
name|rightTextPanes
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|tf
argument_list|)
expr_stmt|;
block|}
name|row
operator|++
expr_stmt|;
block|}
return|return
name|maxLabelWidth
return|;
block|}
DECL|method|setupEntryTypeRow (JPanel mergePanel)
specifier|private
name|void
name|setupEntryTypeRow
parameter_list|(
name|JPanel
name|mergePanel
parameter_list|)
block|{
comment|// Start with entry type
name|mergePanel
operator|.
name|add
argument_list|(
name|boldFontLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry type"
argument_list|)
argument_list|)
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JTextPane
name|leftTypeDisplay
init|=
operator|new
name|DiffHighlightingTextPane
argument_list|()
decl_stmt|;
name|leftTypeDisplay
operator|.
name|setText
argument_list|(
name|DiffHighlighting
operator|.
name|HTML_START
operator|+
name|leftEntry
operator|.
name|getType
argument_list|()
operator|+
name|DiffHighlighting
operator|.
name|HTML_END
argument_list|)
expr_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|leftTypeDisplay
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xy
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftEntry
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|rightEntry
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|identicalTypes
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|identicalTypes
operator|=
literal|false
expr_stmt|;
name|ButtonGroup
name|group
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|typeRadioButtons
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|3
condition|;
name|k
operator|+=
literal|2
control|)
block|{
name|JRadioButton
name|button
init|=
operator|new
name|JRadioButton
argument_list|()
decl_stmt|;
name|typeRadioButtons
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|button
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xy
argument_list|(
literal|5
operator|+
operator|(
name|k
operator|*
literal|2
operator|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|.
name|addChangeListener
argument_list|(
name|e
lambda|->
name|updateAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|typeRadioButtons
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|JTextPane
name|rightTypeDisplay
init|=
operator|new
name|DiffHighlightingTextPane
argument_list|()
decl_stmt|;
name|rightTypeDisplay
operator|.
name|setText
argument_list|(
name|DiffHighlighting
operator|.
name|HTML_START
operator|+
name|rightEntry
operator|.
name|getType
argument_list|()
operator|+
name|DiffHighlighting
operator|.
name|HTML_END
argument_list|)
expr_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|rightTypeDisplay
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xy
argument_list|(
literal|11
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupHeadingRows ()
specifier|private
name|void
name|setupHeadingRows
parameter_list|()
block|{
name|mainPanel
operator|.
name|add
argument_list|(
name|boldFontLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Use"
argument_list|)
argument_list|)
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xyw
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|,
literal|"center, bottom"
argument_list|)
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|add
argument_list|(
name|diffMode
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xy
argument_list|(
literal|11
argument_list|,
literal|1
argument_list|,
literal|"right, bottom"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set headings
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|HEADING_LABELS
operator|.
name|add
argument_list|(
name|boldFontLabel
argument_list|(
name|columnHeadings
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|add
argument_list|(
name|HEADING_LABELS
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|CELL_CONSTRAINTS
operator|.
name|xy
argument_list|(
literal|1
operator|+
operator|(
name|i
operator|*
literal|2
operator|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fillDiffModes ()
specifier|private
name|void
name|fillDiffModes
parameter_list|()
block|{
comment|// Fill diff mode combo box
for|for
control|(
name|String
name|diffText
range|:
name|DIFF_MODES
control|)
block|{
name|diffMode
operator|.
name|addItem
argument_list|(
name|diffText
argument_list|)
expr_stmt|;
block|}
name|diffMode
operator|.
name|setSelectedIndex
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|MERGE_ENTRIES_DIFF_MODE
argument_list|)
argument_list|,
name|diffMode
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|diffMode
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|updateTextPanes
argument_list|(
name|differentFields
argument_list|)
expr_stmt|;
name|storePreference
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|synchronizeColumnWidths (FormLayout mainLayout, FormLayout mergeLayout, int maxLabelWidth)
specifier|private
name|void
name|synchronizeColumnWidths
parameter_list|(
name|FormLayout
name|mainLayout
parameter_list|,
name|FormLayout
name|mergeLayout
parameter_list|,
name|int
name|maxLabelWidth
parameter_list|)
block|{
comment|// Synchronize column widths
name|String
index|[]
name|rbAlign
init|=
block|{
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|}
decl_stmt|;
name|mainLayout
operator|.
name|setColumnSpec
argument_list|(
literal|1
argument_list|,
name|ColumnSpec
operator|.
name|decode
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|maxLabelWidth
argument_list|)
operator|+
literal|"px"
argument_list|)
argument_list|)
expr_stmt|;
name|Integer
name|maxRBWidth
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|2
init|;
name|k
operator|<
literal|5
condition|;
name|k
operator|++
control|)
block|{
name|maxRBWidth
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxRBWidth
argument_list|,
name|HEADING_LABELS
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|width
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|3
condition|;
name|k
operator|++
control|)
block|{
name|mergeLayout
operator|.
name|setColumnSpec
argument_list|(
literal|5
operator|+
operator|(
name|k
operator|*
literal|2
operator|)
argument_list|,
name|ColumnSpec
operator|.
name|decode
argument_list|(
name|rbAlign
index|[
name|k
index|]
operator|+
literal|":"
operator|+
name|maxRBWidth
operator|+
literal|"px"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|boldFontLabel (String text)
specifier|private
name|JLabel
name|boldFontLabel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|JLabel
name|label
init|=
operator|new
name|JLabel
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|Font
name|font
init|=
name|label
operator|.
name|getFont
argument_list|()
decl_stmt|;
name|label
operator|.
name|setFont
argument_list|(
name|font
operator|.
name|deriveFont
argument_list|(
name|font
operator|.
name|getStyle
argument_list|()
operator||
name|Font
operator|.
name|BOLD
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|label
return|;
block|}
DECL|method|storePreference ()
specifier|private
name|void
name|storePreference
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|MERGE_ENTRIES_DIFF_MODE
argument_list|,
name|diffMode
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupFields ()
specifier|private
name|void
name|setupFields
parameter_list|()
block|{
name|allFields
operator|.
name|addAll
argument_list|(
name|leftEntry
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
name|allFields
operator|.
name|addAll
argument_list|(
name|rightEntry
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove internal fields
name|Set
argument_list|<
name|String
argument_list|>
name|toberemoved
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|allFields
control|)
block|{
if|if
condition|(
name|InternalBibtexFields
operator|.
name|isInternalField
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|toberemoved
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|allFields
operator|.
name|removeAll
argument_list|(
name|toberemoved
argument_list|)
expr_stmt|;
block|}
DECL|method|updateTextPanes (Collection<String> fields)
specifier|private
name|void
name|updateTextPanes
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|int
name|oldScrollPaneValue
init|=
name|scrollPane
operator|.
name|getVerticalScrollBar
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|String
name|leftString
init|=
name|leftEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|String
name|rightString
init|=
name|rightEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|diffMode
operator|.
name|getSelectedIndex
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
comment|// Plain text
break|break;
case|case
literal|1
case|:
comment|// Latexdiff style - word
name|rightString
operator|=
name|DiffHighlighting
operator|.
name|generateDiffHighlighting
argument_list|(
name|leftString
argument_list|,
name|rightString
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// Latexdiff style - character
name|rightString
operator|=
name|DiffHighlighting
operator|.
name|generateDiffHighlighting
argument_list|(
name|leftString
argument_list|,
name|rightString
argument_list|,
literal|""
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// Symmetric style - word
name|String
name|tmpLeftString
init|=
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
name|leftString
argument_list|,
name|rightString
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|rightString
operator|=
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
name|rightString
argument_list|,
name|leftString
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|leftString
operator|=
name|tmpLeftString
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// Symmetric style - character
name|tmpLeftString
operator|=
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
name|leftString
argument_list|,
name|rightString
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|rightString
operator|=
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
name|rightString
argument_list|,
name|leftString
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|leftString
operator|=
name|tmpLeftString
expr_stmt|;
break|break;
default|default:
comment|// Shouldn't happen
break|break;
block|}
if|if
condition|(
operator|(
name|leftString
operator|!=
literal|null
operator|)
operator|&&
name|leftTextPanes
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|leftTextPanes
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|setText
argument_list|(
name|DiffHighlighting
operator|.
name|HTML_START
operator|+
name|leftString
operator|+
name|DiffHighlighting
operator|.
name|HTML_END
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|rightString
operator|!=
literal|null
operator|)
operator|&&
name|rightTextPanes
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|rightTextPanes
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|setText
argument_list|(
name|DiffHighlighting
operator|.
name|HTML_START
operator|+
name|rightString
operator|+
name|DiffHighlighting
operator|.
name|HTML_END
argument_list|)
expr_stmt|;
block|}
block|}
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|scrollPane
operator|.
name|getVerticalScrollBar
argument_list|()
operator|.
name|setValue
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|scrollPane
operator|.
name|getVerticalScrollBar
argument_list|()
operator|.
name|getMaximum
argument_list|()
argument_list|,
name|oldScrollPaneValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Merged BibEntry      */
DECL|method|getMergeEntry ()
specifier|public
name|BibEntry
name|getMergeEntry
parameter_list|()
block|{
return|return
name|mergedEntry
return|;
block|}
comment|/**      * @return The merge entry JPanel      */
DECL|method|getMergeEntryPanel ()
specifier|public
name|JPanel
name|getMergeEntryPanel
parameter_list|()
block|{
return|return
name|mainPanel
return|;
block|}
comment|/**      * Update the merged BibEntry with source and preview panel every time something is changed      */
DECL|method|updateAll ()
specifier|private
name|void
name|updateAll
parameter_list|()
block|{
if|if
condition|(
operator|!
name|doneBuilding
condition|)
block|{
comment|// If we are not done adding everything, do not do anything...
return|return;
block|}
comment|// Check if the type has changed
if|if
condition|(
operator|!
name|identicalTypes
operator|&&
name|typeRadioButtons
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|mergedEntry
operator|.
name|setType
argument_list|(
name|leftEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mergedEntry
operator|.
name|setType
argument_list|(
name|rightEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check the potentially different fields
for|for
control|(
name|String
name|field
range|:
name|differentFields
control|)
block|{
if|if
condition|(
name|radioButtons
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|mergedEntry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|leftEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Will only happen if field exists
block|}
elseif|else
if|if
condition|(
name|radioButtons
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|mergedEntry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|rightEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Will only happen if field exists
block|}
else|else
block|{
name|mergedEntry
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update the PreviewPanel
name|entryPreview
operator|.
name|setEntry
argument_list|(
name|mergedEntry
argument_list|)
expr_stmt|;
comment|// Update the BibTeX source view
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|BibEntryWriter
argument_list|(
operator|new
name|LatexFieldFormatter
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|write
argument_list|(
name|mergedEntry
argument_list|,
name|writer
argument_list|,
name|databaseType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error in entry"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|sourceView
operator|.
name|setText
argument_list|(
name|writer
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sourceView
operator|.
name|setCaretPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

