begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Frame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ComponentAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ComponentEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ComponentListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ItemEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ItemListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultListCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFileChooser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JProgressBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRootPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTree
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|WindowConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|filechooser
operator|.
name|FileSystemView
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultMutableTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultTreeCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultTreeModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreeModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRef
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefExecutorService
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|EntryFromFileCreator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|EntryFromFileCreatorManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|UnlinkedFilesCrawler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|UnlinkedPDFFileFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonBarBuilder
import|;
end_import

begin_comment
comment|/**  * GUI Dialog for the feature "Find unlinked files".  *   * @author Nosh&Dan  * @version 25.11.2008 | 23:13:29  *  */
end_comment

begin_class
DECL|class|FindUnlinkedFilesDialog
specifier|public
class|class
name|FindUnlinkedFilesDialog
extends|extends
name|JDialog
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5778378185253640030L
decl_stmt|;
comment|/**      * Keys to be used for referencing this Action.      */
DECL|field|ACTION_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_COMMAND
init|=
literal|"findUnlinkedFiles"
decl_stmt|;
DECL|field|ACTION_TITLE
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_TITLE
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Find unlinked files"
argument_list|)
operator|+
literal|"..."
decl_stmt|;
comment|// this entry is NOT in Menu_en.properties as the same string also appears in JabRef_en.properties
DECL|field|ACTION_ICON
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_ICON
init|=
literal|"toggleSearch"
decl_stmt|;
DECL|field|ACTION_KEYBINDING_ACTION
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_KEYBINDING_ACTION
init|=
literal|"Find unlinked files"
decl_stmt|;
DECL|field|ACTION_SHORT_DESCRIPTION
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_SHORT_DESCRIPTION
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Searches for unlinked PDF files on the file system"
argument_list|)
decl_stmt|;
DECL|field|GLOBAL_PREFS_WORKING_DIRECTORY_KEY
specifier|private
specifier|static
specifier|final
name|String
name|GLOBAL_PREFS_WORKING_DIRECTORY_KEY
init|=
literal|"findUnlinkedFilesWD"
decl_stmt|;
DECL|field|GLOBAL_PREFS_DIALOG_SIZE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|GLOBAL_PREFS_DIALOG_SIZE_KEY
init|=
literal|"findUnlinkedFilesDialogSize"
decl_stmt|;
DECL|field|frame
specifier|private
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|database
specifier|private
name|BibtexDatabase
name|database
decl_stmt|;
DECL|field|creatorManager
specifier|private
name|EntryFromFileCreatorManager
name|creatorManager
decl_stmt|;
DECL|field|crawler
specifier|private
name|UnlinkedFilesCrawler
name|crawler
decl_stmt|;
DECL|field|lastSelectedDirectory
specifier|private
name|File
name|lastSelectedDirectory
decl_stmt|;
DECL|field|treeModel
specifier|private
name|TreeModel
name|treeModel
decl_stmt|;
comment|/* PANELS */
DECL|field|panelDirectory
specifier|private
name|JPanel
name|panelDirectory
decl_stmt|;
DECL|field|panelSearchArea
specifier|private
name|JPanel
name|panelSearchArea
decl_stmt|;
DECL|field|panelFiles
specifier|private
name|JPanel
name|panelFiles
decl_stmt|;
DECL|field|panelOptions
specifier|private
name|JPanel
name|panelOptions
decl_stmt|;
DECL|field|panelButtons
specifier|private
name|JPanel
name|panelButtons
decl_stmt|;
DECL|field|panelEntryTypesSelection
specifier|private
name|JPanel
name|panelEntryTypesSelection
decl_stmt|;
DECL|field|panelImportArea
specifier|private
name|JPanel
name|panelImportArea
decl_stmt|;
DECL|field|buttonBrowse
specifier|private
name|JButton
name|buttonBrowse
decl_stmt|;
DECL|field|buttonScan
specifier|private
name|JButton
name|buttonScan
decl_stmt|;
DECL|field|buttonApply
specifier|private
name|JButton
name|buttonApply
decl_stmt|;
DECL|field|buttonClose
specifier|private
name|JButton
name|buttonClose
decl_stmt|;
comment|/* Options for the TreeView */
DECL|field|buttonOptionSelectAll
specifier|private
name|JButton
name|buttonOptionSelectAll
decl_stmt|;
DECL|field|buttonOptionUnselectAll
specifier|private
name|JButton
name|buttonOptionUnselectAll
decl_stmt|;
DECL|field|buttonOptionExpandAll
specifier|private
name|JButton
name|buttonOptionExpandAll
decl_stmt|;
DECL|field|buttonOptionCollapseAll
specifier|private
name|JButton
name|buttonOptionCollapseAll
decl_stmt|;
DECL|field|checkboxCreateKeywords
specifier|private
name|JCheckBox
name|checkboxCreateKeywords
decl_stmt|;
DECL|field|textfieldDirectoryPath
specifier|private
name|JTextField
name|textfieldDirectoryPath
decl_stmt|;
DECL|field|labelDirectoryDescription
specifier|private
name|JLabel
name|labelDirectoryDescription
decl_stmt|;
DECL|field|labelFileTypesDescription
specifier|private
name|JLabel
name|labelFileTypesDescription
decl_stmt|;
DECL|field|labelFilesDescription
specifier|private
name|JLabel
name|labelFilesDescription
decl_stmt|;
DECL|field|labelEntryTypeDescription
specifier|private
name|JLabel
name|labelEntryTypeDescription
decl_stmt|;
DECL|field|labelSearchingDirectoryInfo
specifier|private
name|JLabel
name|labelSearchingDirectoryInfo
decl_stmt|;
DECL|field|labelImportingInfo
specifier|private
name|JLabel
name|labelImportingInfo
decl_stmt|;
DECL|field|tree
specifier|private
name|JTree
name|tree
decl_stmt|;
DECL|field|scrollpaneTree
specifier|private
name|JScrollPane
name|scrollpaneTree
decl_stmt|;
DECL|field|comboBoxFileTypeSelection
specifier|private
name|JComboBox
name|comboBoxFileTypeSelection
decl_stmt|;
DECL|field|comboBoxEntryTypeSelection
specifier|private
name|JComboBox
name|comboBoxEntryTypeSelection
decl_stmt|;
DECL|field|progressBarSearching
specifier|private
name|JProgressBar
name|progressBarSearching
decl_stmt|;
DECL|field|progressBarImporting
specifier|private
name|JProgressBar
name|progressBarImporting
decl_stmt|;
DECL|field|fileChooser
specifier|private
name|JFileChooser
name|fileChooser
decl_stmt|;
DECL|field|treeMouseListener
specifier|private
name|MouseListener
name|treeMouseListener
decl_stmt|;
DECL|field|actionSelectAll
specifier|private
name|Action
name|actionSelectAll
decl_stmt|;
DECL|field|actionUnselectAll
specifier|private
name|Action
name|actionUnselectAll
decl_stmt|;
DECL|field|actionExpandTree
specifier|private
name|Action
name|actionExpandTree
decl_stmt|;
DECL|field|actionCollapseTree
specifier|private
name|Action
name|actionCollapseTree
decl_stmt|;
DECL|field|dialogPositionListener
specifier|private
name|ComponentListener
name|dialogPositionListener
decl_stmt|;
DECL|field|threadState
specifier|private
name|int
index|[]
name|threadState
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|}
decl_stmt|;
DECL|field|checkBoxWhyIsThereNoGetSelectedStupidSwing
specifier|private
name|boolean
name|checkBoxWhyIsThereNoGetSelectedStupidSwing
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FindUnlinkedFilesDialog
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * For Unit-testing only.<i>Don't remove!</i><br>      * Used via reflection in {@link net.sf.jabref.imports.DatabaseFileLookup} to construct this      * class.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|FindUnlinkedFilesDialog ()
specifier|private
name|FindUnlinkedFilesDialog
parameter_list|()
block|{     }
DECL|method|FindUnlinkedFilesDialog (Frame owner, JabRefFrame frame, BasePanel panel)
specifier|public
name|FindUnlinkedFilesDialog
parameter_list|(
name|Frame
name|owner
parameter_list|,
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanel
name|panel
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Find unlinked files"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|restoreSizeOfDialog
argument_list|()
expr_stmt|;
name|database
operator|=
name|panel
operator|.
name|getDatabase
argument_list|()
expr_stmt|;
name|creatorManager
operator|=
operator|new
name|EntryFromFileCreatorManager
argument_list|()
expr_stmt|;
name|crawler
operator|=
operator|new
name|UnlinkedFilesCrawler
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|lastSelectedDirectory
operator|=
name|loadLastSelectedDirectory
argument_list|()
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
name|buttonApply
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Close dialog when pressing escape      */
annotation|@
name|Override
DECL|method|createRootPane ()
specifier|protected
name|JRootPane
name|createRootPane
parameter_list|()
block|{
name|ActionListener
name|actionListener
init|=
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|JRootPane
name|rootPane
init|=
operator|new
name|JRootPane
argument_list|()
decl_stmt|;
name|KeyStroke
name|stroke
init|=
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_ESCAPE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|rootPane
operator|.
name|registerKeyboardAction
argument_list|(
name|actionListener
argument_list|,
name|stroke
argument_list|,
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
expr_stmt|;
return|return
name|rootPane
return|;
block|}
comment|/**      * Stores the current size of this dialog persistently.      */
DECL|method|storeSizeOfDialog ()
specifier|private
name|void
name|storeSizeOfDialog
parameter_list|()
block|{
name|Dimension
name|dim
init|=
name|getSize
argument_list|()
decl_stmt|;
name|String
name|store
init|=
name|dim
operator|.
name|width
operator|+
literal|";"
operator|+
name|dim
operator|.
name|height
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|FindUnlinkedFilesDialog
operator|.
name|GLOBAL_PREFS_DIALOG_SIZE_KEY
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
comment|/**      * Restores the location and size of this dialog from the persistent storage.      */
DECL|method|restoreSizeOfDialog ()
specifier|private
name|void
name|restoreSizeOfDialog
parameter_list|()
block|{
name|String
name|store
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|FindUnlinkedFilesDialog
operator|.
name|GLOBAL_PREFS_DIALOG_SIZE_KEY
argument_list|)
decl_stmt|;
name|Dimension
name|dimension
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
index|[]
name|dim
init|=
name|store
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|dimension
operator|=
operator|new
name|Dimension
argument_list|(
operator|new
name|Integer
argument_list|(
name|dim
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
name|dim
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{             }
block|}
if|if
condition|(
name|dimension
operator|!=
literal|null
condition|)
block|{
name|setPreferredSize
argument_list|(
name|dimension
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Initializes the components, the layout, the data structure and the      * actions in this dialog.      */
DECL|method|initialize ()
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|initializeActions
argument_list|()
expr_stmt|;
name|initComponents
argument_list|()
expr_stmt|;
name|createTree
argument_list|()
expr_stmt|;
name|createFileTypesCombobox
argument_list|()
expr_stmt|;
name|createEntryTypesCombobox
argument_list|()
expr_stmt|;
name|initLayout
argument_list|()
expr_stmt|;
name|setupActions
argument_list|()
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
block|}
comment|/**      * Initializes action objects.<br>      * Does not assign actions to components yet!      */
DECL|method|initializeActions ()
specifier|private
name|void
name|initializeActions
parameter_list|()
block|{
name|actionSelectAll
operator|=
operator|new
name|AbstractAction
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select all"
argument_list|)
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|9153126361571985383L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|CheckableTreeNode
name|rootNode
init|=
operator|(
name|CheckableTreeNode
operator|)
name|tree
operator|.
name|getModel
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|rootNode
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tree
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|tree
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|actionUnselectAll
operator|=
operator|new
name|AbstractAction
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unselect all"
argument_list|)
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|9012913268030356450L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|CheckableTreeNode
name|rootNode
init|=
operator|(
name|CheckableTreeNode
operator|)
name|tree
operator|.
name|getModel
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|rootNode
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tree
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|tree
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|actionExpandTree
operator|=
operator|new
name|AbstractAction
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Expand all"
argument_list|)
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4794088095435302433L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|CheckableTreeNode
name|rootNode
init|=
operator|(
name|CheckableTreeNode
operator|)
name|tree
operator|.
name|getModel
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|expandTree
argument_list|(
name|tree
argument_list|,
operator|new
name|TreePath
argument_list|(
name|rootNode
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|actionCollapseTree
operator|=
operator|new
name|AbstractAction
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Collapse all"
argument_list|)
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6007246730370326456L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|CheckableTreeNode
name|rootNode
init|=
operator|(
name|CheckableTreeNode
operator|)
name|tree
operator|.
name|getModel
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|expandTree
argument_list|(
name|tree
argument_list|,
operator|new
name|TreePath
argument_list|(
name|rootNode
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|dialogPositionListener
operator|=
operator|new
name|ComponentAdapter
argument_list|()
block|{
comment|/* (non-Javadoc)              * @see java.awt.event.ComponentAdapter#componentResized(java.awt.event.ComponentEvent)              */
annotation|@
name|Override
specifier|public
name|void
name|componentResized
parameter_list|(
name|ComponentEvent
name|e
parameter_list|)
block|{
name|storeSizeOfDialog
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc)              * @see java.awt.event.ComponentAdapter#componentMoved(java.awt.event.ComponentEvent)              */
annotation|@
name|Override
specifier|public
name|void
name|componentMoved
parameter_list|(
name|ComponentEvent
name|e
parameter_list|)
block|{
name|storeSizeOfDialog
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
comment|/**      * Stores the working directory path for this view in the global      * preferences.      *       * @param lastSelectedDirectory      *            directory that is used as the working directory in this view.      */
DECL|method|storeLastSelectedDirectory (File lastSelectedDirectory)
specifier|private
name|void
name|storeLastSelectedDirectory
parameter_list|(
name|File
name|lastSelectedDirectory
parameter_list|)
block|{
name|this
operator|.
name|lastSelectedDirectory
operator|=
name|lastSelectedDirectory
expr_stmt|;
if|if
condition|(
name|lastSelectedDirectory
operator|!=
literal|null
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|FindUnlinkedFilesDialog
operator|.
name|GLOBAL_PREFS_WORKING_DIRECTORY_KEY
argument_list|,
name|lastSelectedDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Loads the working directory path which is persistantly stored for this      * view and returns it as a {@link File}-Object.<br>      *<br>      * If there is no working directory path stored, the general working      * directory will be consulted.      *       * @return The persistently stored working directory path for this view.      */
DECL|method|loadLastSelectedDirectory ()
specifier|private
name|File
name|loadLastSelectedDirectory
parameter_list|()
block|{
name|String
name|workingDirectory
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|FindUnlinkedFilesDialog
operator|.
name|GLOBAL_PREFS_WORKING_DIRECTORY_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|workingDirectory
operator|==
literal|null
condition|)
block|{
name|workingDirectory
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WORKING_DIRECTORY
argument_list|)
expr_stmt|;
block|}
name|lastSelectedDirectory
operator|=
operator|new
name|File
argument_list|(
name|workingDirectory
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastSelectedDirectory
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|lastSelectedDirectory
operator|=
name|lastSelectedDirectory
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
return|return
name|lastSelectedDirectory
return|;
block|}
comment|/**      * Opens a {@link JFileChooser} and receives the user input as a      * {@link File} object, which this method returns.<br>      *<br>      * The "Open file" dialog will start at the path that is set in the      * "directory" textfield, or at the last stored path for this dialog, if the      * textfield is empty.<br>      *<br>      * If the user cancels the "Open file" dialog, this method returns null.<br>      *<br>      * If the user has selected a valid directory in the "Open file" dialog,      * this path will be stored persistently for this dialog, so that it can be      * preset at the next time this dialog is opened.      *       * @return The selected directory from the user, or<code>null</code>, if      *         the user has aborted the selection.      */
DECL|method|chooseDirectory ()
specifier|private
name|File
name|chooseDirectory
parameter_list|()
block|{
if|if
condition|(
name|fileChooser
operator|==
literal|null
condition|)
block|{
name|fileChooser
operator|=
operator|new
name|JFileChooser
argument_list|()
expr_stmt|;
name|fileChooser
operator|.
name|setAutoscrolls
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fileChooser
operator|.
name|setDialogTitle
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select Directory"
argument_list|)
argument_list|)
expr_stmt|;
name|fileChooser
operator|.
name|setApproveButtonText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Choose Directory"
argument_list|)
argument_list|)
expr_stmt|;
name|fileChooser
operator|.
name|setApproveButtonToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Use the selected directory to start with the search."
argument_list|)
argument_list|)
expr_stmt|;
name|fileChooser
operator|.
name|setFileSelectionMode
argument_list|(
name|JFileChooser
operator|.
name|DIRECTORIES_ONLY
argument_list|)
expr_stmt|;
block|}
name|String
name|path
init|=
name|textfieldDirectoryPath
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|fileChooser
operator|.
name|setCurrentDirectory
argument_list|(
name|lastSelectedDirectory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileChooser
operator|.
name|setCurrentDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|result
init|=
name|fileChooser
operator|.
name|showOpenDialog
argument_list|(
name|frame
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|JFileChooser
operator|.
name|CANCEL_OPTION
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|selectedDirectory
init|=
name|fileChooser
operator|.
name|getSelectedFile
argument_list|()
decl_stmt|;
name|String
name|filepath
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|selectedDirectory
operator|!=
literal|null
condition|)
block|{
name|filepath
operator|=
name|selectedDirectory
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|textfieldDirectoryPath
operator|.
name|setText
argument_list|(
name|filepath
argument_list|)
expr_stmt|;
return|return
name|selectedDirectory
return|;
block|}
comment|/**      * Disables or enables all visible Elements in this Dialog.<br>      *<br>      * This also removes the {@link MouseListener} from the Tree-View to prevent      * it from receiving mouse events when in disabled-state.      *       * @param enable      *<code>true</code> when the elements shall get enabled,      *<code>false</code> when they shall get disabled.      */
DECL|method|disOrEnableDialog (boolean enable)
specifier|private
name|void
name|disOrEnableDialog
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
if|if
condition|(
name|enable
condition|)
block|{
name|tree
operator|.
name|addMouseListener
argument_list|(
name|treeMouseListener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tree
operator|.
name|removeMouseListener
argument_list|(
name|treeMouseListener
argument_list|)
expr_stmt|;
block|}
name|disOrEnableAllElements
argument_list|(
name|FindUnlinkedFilesDialog
operator|.
name|this
argument_list|,
name|enable
argument_list|)
expr_stmt|;
block|}
comment|/**      * Recursively disables or enables all swing and awt components in this      * dialog, starting with but not including the container      *<code>startContainer</code>.      *       * @param startContainer      *            The GUI Element to start with.      * @param enable      *<code>true</code>, if all elements will get enabled,      *<code>false</code> if all elements will get disabled.      */
DECL|method|disOrEnableAllElements (Container startContainer, boolean enable)
specifier|private
name|void
name|disOrEnableAllElements
parameter_list|(
name|Container
name|startContainer
parameter_list|,
name|boolean
name|enable
parameter_list|)
block|{
name|Component
index|[]
name|children
init|=
name|startContainer
operator|.
name|getComponents
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|Container
condition|)
block|{
name|disOrEnableAllElements
argument_list|(
operator|(
name|Container
operator|)
name|child
argument_list|,
name|enable
argument_list|)
expr_stmt|;
block|}
name|child
operator|.
name|setEnabled
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Expands or collapses the specified tree according to the      *<code>expand</code>-parameter.      */
DECL|method|expandTree (JTree tree, TreePath parent, boolean expand)
specifier|private
name|void
name|expandTree
parameter_list|(
name|JTree
name|tree
parameter_list|,
name|TreePath
name|parent
parameter_list|,
name|boolean
name|expand
parameter_list|)
block|{
name|TreeNode
name|node
init|=
operator|(
name|TreeNode
operator|)
name|parent
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getChildCount
argument_list|()
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|node
operator|.
name|children
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|TreePath
name|path
init|=
name|parent
operator|.
name|pathByAddingChild
argument_list|(
name|e
operator|.
name|nextElement
argument_list|()
argument_list|)
decl_stmt|;
name|expandTree
argument_list|(
name|tree
argument_list|,
name|path
argument_list|,
name|expand
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expand
condition|)
block|{
name|tree
operator|.
name|expandPath
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tree
operator|.
name|collapsePath
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Starts the search of unlinked files according to the current dialog      * state.<br>      *<br>      * This state is made of:<br>      *<li>The value of the "directory"-input-textfield and<li>The file type      * selection.<br>      * The search will process in a seperate thread and the progress bar behind      * the "search" button will be displayed.<br>      *<br>      * When the search has completed, the      * {@link #searchFinishedHandler(CheckableTreeNode)} handler method is      * invoked.      */
DECL|method|startSearch ()
specifier|private
name|void
name|startSearch
parameter_list|()
block|{
specifier|final
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|textfieldDirectoryPath
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|directory
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|textfieldDirectoryPath
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return;
block|}
name|storeLastSelectedDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|progressBarSearching
operator|.
name|setMinimumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
name|buttonScan
operator|.
name|getSize
argument_list|()
operator|.
name|width
argument_list|,
name|progressBarSearching
operator|.
name|getMinimumSize
argument_list|()
operator|.
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|progressBarSearching
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|progressBarSearching
operator|.
name|setString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|labelSearchingDirectoryInfo
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|disOrEnableDialog
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|labelSearchingDirectoryInfo
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|FileFilter
name|selectedFileFilter
init|=
operator|(
name|FileFilter
operator|)
name|comboBoxFileTypeSelection
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
name|threadState
operator|=
operator|new
name|int
index|[]
block|{
literal|1
block|}
expr_stmt|;
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|UnlinkedPDFFileFilter
name|ff
init|=
operator|new
name|UnlinkedPDFFileFilter
argument_list|(
name|selectedFileFilter
argument_list|,
name|database
argument_list|)
decl_stmt|;
name|CheckableTreeNode
name|rootNode
init|=
name|crawler
operator|.
name|searchDirectory
argument_list|(
name|directory
argument_list|,
name|ff
argument_list|,
name|threadState
argument_list|,
operator|new
name|ChangeListener
argument_list|()
block|{
name|int
name|counter
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
name|progressBarSearching
operator|.
name|setString
argument_list|(
operator|++
name|counter
operator|+
literal|" files found"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|searchFinishedHandler
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will start the import of all file of all selected nodes in this      * dialogs tree view.<br>      *<br>      * The import itself will run in a seperate thread, whilst this dialog will      * be showing a progress bar, until the thread has finished its work.<br>      *<br>      * When the import has finished, the {@link #importFinishedHandler(int, java.util.List)} is      * invoked.      */
DECL|method|startImport ()
specifier|private
name|void
name|startImport
parameter_list|()
block|{
if|if
condition|(
name|treeModel
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|setDefaultCloseOperation
argument_list|(
name|WindowConstants
operator|.
name|DO_NOTHING_ON_CLOSE
argument_list|)
expr_stmt|;
name|CheckableTreeNode
name|root
init|=
operator|(
name|CheckableTreeNode
operator|)
name|treeModel
operator|.
name|getRoot
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|File
argument_list|>
name|fileList
init|=
name|getFileListFromNode
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileList
operator|==
literal|null
operator|||
name|fileList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|progressBarImporting
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|labelImportingInfo
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttonApply
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buttonClose
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|disOrEnableDialog
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|labelImportingInfo
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|progressBarImporting
operator|.
name|setMinimum
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|progressBarImporting
operator|.
name|setMaximum
argument_list|(
name|fileList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|progressBarImporting
operator|.
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|progressBarImporting
operator|.
name|setString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
specifier|final
name|BibtexEntryType
name|entryType
init|=
operator|(
operator|(
name|BibtexEntryTypeWrapper
operator|)
name|comboBoxEntryTypeSelection
operator|.
name|getSelectedItem
argument_list|()
operator|)
operator|.
name|entryType
decl_stmt|;
name|threadState
operator|=
operator|new
name|int
index|[]
block|{
literal|1
block|}
expr_stmt|;
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|creatorManager
operator|.
name|addEntriesFromFiles
argument_list|(
name|fileList
argument_list|,
name|database
argument_list|,
name|frame
operator|.
name|basePanel
argument_list|()
argument_list|,
name|entryType
argument_list|,
name|checkBoxWhyIsThereNoGetSelectedStupidSwing
argument_list|,
operator|new
name|ChangeListener
argument_list|()
block|{
name|int
name|counter
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
name|progressBarImporting
operator|.
name|setValue
argument_list|(
operator|++
name|counter
argument_list|)
expr_stmt|;
name|progressBarImporting
operator|.
name|setString
argument_list|(
name|counter
operator|+
literal|" of "
operator|+
name|progressBarImporting
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|errors
argument_list|)
decl_stmt|;
name|importFinishedHandler
argument_list|(
name|count
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      *       * @param errors      */
DECL|method|importFinishedHandler (int count, List<String> errors)
specifier|private
name|void
name|importFinishedHandler
parameter_list|(
name|int
name|count
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|errors
parameter_list|)
block|{
if|if
condition|(
name|errors
operator|!=
literal|null
operator|&&
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
argument_list|,
literal|"The import finished with warnings:\n"
operator|+
literal|"There "
operator|+
operator|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|"were "
else|:
literal|"was "
operator|)
operator|+
name|errors
operator|.
name|size
argument_list|()
operator|+
operator|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|" files"
else|:
literal|" file"
operator|)
operator|+
operator|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|" which"
else|:
literal|" that"
operator|)
operator|+
literal|" could not be imported."
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
block|}
name|progressBarImporting
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|labelImportingInfo
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buttonApply
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttonClose
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|disOrEnableDialog
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setDefaultCloseOperation
argument_list|(
name|WindowConstants
operator|.
name|DISPOSE_ON_CLOSE
argument_list|)
expr_stmt|;
name|frame
operator|.
name|basePanel
argument_list|()
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
comment|/**      * Will be called from the Thread in which the "unlinked files search" is      * processed. As the result of the search, the root node of the determined      * file structure is passed.      *       * @param rootNode      *            The root of the file structure as the result of the search.      */
DECL|method|searchFinishedHandler (CheckableTreeNode rootNode)
specifier|private
name|void
name|searchFinishedHandler
parameter_list|(
name|CheckableTreeNode
name|rootNode
parameter_list|)
block|{
name|treeModel
operator|=
operator|new
name|DefaultTreeModel
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setModel
argument_list|(
name|treeModel
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setRootVisible
argument_list|(
name|rootNode
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|tree
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|progressBarSearching
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|labelSearchingDirectoryInfo
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actionSelectAll
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|disOrEnableDialog
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttonApply
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets up the actions for the components.      */
DECL|method|setupActions ()
specifier|private
name|void
name|setupActions
parameter_list|()
block|{
comment|/**          * Stores the selected Directory.          */
name|buttonBrowse
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|File
name|selectedDirectory
init|=
name|chooseDirectory
argument_list|()
decl_stmt|;
name|storeLastSelectedDirectory
argument_list|(
name|selectedDirectory
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|startSearch
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|/**          * Action for the button "Import...".<br>          *<br>          * Actions on this button will start the import of all file of all          * selected nodes in this dialogs tree view.<br>          */
name|ActionListener
name|actionListenerImportEntrys
init|=
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|startImport
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|buttonApply
operator|.
name|addActionListener
argument_list|(
name|actionListenerImportEntrys
argument_list|)
expr_stmt|;
name|buttonClose
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a list of {@link File}s for all leaf nodes in the tree structure      *<code>node</code>, which have been marked as<i>selected</i>.<br>      *<br>      *<code>Selected</code> nodes correspond to those entries in the tree,      * whose checkbox is<code>checked</code>.      *       * SIDE EFFECT: The checked nodes are removed from the tree.      *       * @param node      *            The root node representing a tree structure.      * @return A list of files of all checked leaf nodes.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getFileListFromNode (CheckableTreeNode node)
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|getFileListFromNode
parameter_list|(
name|CheckableTreeNode
name|node
parameter_list|)
block|{
name|List
argument_list|<
name|File
argument_list|>
name|filesList
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|CheckableTreeNode
argument_list|>
name|childs
init|=
name|node
operator|.
name|depthFirstEnumeration
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|CheckableTreeNode
argument_list|>
name|nodesToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|FindUnlinkedFilesDialog
operator|.
name|CheckableTreeNode
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|childs
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|CheckableTreeNode
name|child
init|=
name|childs
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|isLeaf
argument_list|()
operator|&&
name|child
operator|.
name|getSelected
argument_list|()
condition|)
block|{
name|File
name|nodeFile
init|=
operator|(
operator|(
name|FileNodeWrapper
operator|)
name|child
operator|.
name|getUserObject
argument_list|()
operator|)
operator|.
name|file
decl_stmt|;
if|if
condition|(
name|nodeFile
operator|!=
literal|null
operator|&&
name|nodeFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|filesList
operator|.
name|add
argument_list|(
name|nodeFile
argument_list|)
expr_stmt|;
name|nodesToRemove
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// remove imported files from tree
name|DefaultTreeModel
name|model
init|=
operator|(
name|DefaultTreeModel
operator|)
name|tree
operator|.
name|getModel
argument_list|()
decl_stmt|;
for|for
control|(
name|CheckableTreeNode
name|nodeToRemove
range|:
name|nodesToRemove
control|)
block|{
name|DefaultMutableTreeNode
name|parent
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|nodeToRemove
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|model
operator|.
name|removeNodeFromParent
argument_list|(
name|nodeToRemove
argument_list|)
expr_stmt|;
comment|// remove empty parent node
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
name|DefaultMutableTreeNode
name|pp
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|parent
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|pp
operator|!=
literal|null
condition|)
block|{
name|model
operator|.
name|removeNodeFromParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|parent
operator|=
name|pp
expr_stmt|;
block|}
comment|// TODO: update counter / see: getTreeCellRendererComponent for label generation
block|}
name|tree
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|tree
operator|.
name|repaint
argument_list|()
expr_stmt|;
return|return
name|filesList
return|;
block|}
comment|/**      * Initializes the visible components in this dialog.      */
DECL|method|initComponents ()
specifier|private
name|void
name|initComponents
parameter_list|()
block|{
name|this
operator|.
name|addComponentListener
argument_list|(
name|dialogPositionListener
argument_list|)
expr_stmt|;
comment|/* Interrupts the searchThread by setting the State-Array to 0 */
name|this
operator|.
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|threadState
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|panelDirectory
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|panelSearchArea
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|panelFiles
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|panelOptions
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|panelEntryTypesSelection
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|panelButtons
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|panelImportArea
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|buttonBrowse
operator|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Browse..."
argument_list|)
argument_list|)
expr_stmt|;
name|buttonBrowse
operator|.
name|setMnemonic
argument_list|(
literal|'B'
argument_list|)
expr_stmt|;
name|buttonBrowse
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Opens the file browser."
argument_list|)
argument_list|)
expr_stmt|;
name|buttonScan
operator|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Scan directory"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|setMnemonic
argument_list|(
literal|'S'
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Searches the selected directory for unlinked files."
argument_list|)
argument_list|)
expr_stmt|;
name|buttonApply
operator|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Apply"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonApply
operator|.
name|setMnemonic
argument_list|(
literal|'I'
argument_list|)
expr_stmt|;
name|buttonApply
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Starts the import of bibtex entries."
argument_list|)
argument_list|)
expr_stmt|;
name|buttonClose
operator|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Close"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonClose
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Leave this dialog."
argument_list|)
argument_list|)
expr_stmt|;
name|buttonClose
operator|.
name|setMnemonic
argument_list|(
literal|'C'
argument_list|)
expr_stmt|;
comment|/* Options for the TreeView */
name|buttonOptionSelectAll
operator|=
operator|new
name|JButton
argument_list|()
expr_stmt|;
name|buttonOptionSelectAll
operator|.
name|setMnemonic
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
name|buttonOptionSelectAll
operator|.
name|setAction
argument_list|(
name|actionSelectAll
argument_list|)
expr_stmt|;
name|buttonOptionUnselectAll
operator|=
operator|new
name|JButton
argument_list|()
expr_stmt|;
name|buttonOptionUnselectAll
operator|.
name|setMnemonic
argument_list|(
literal|'U'
argument_list|)
expr_stmt|;
name|buttonOptionUnselectAll
operator|.
name|setAction
argument_list|(
name|actionUnselectAll
argument_list|)
expr_stmt|;
name|buttonOptionExpandAll
operator|=
operator|new
name|JButton
argument_list|()
expr_stmt|;
name|buttonOptionExpandAll
operator|.
name|setMnemonic
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
name|buttonOptionExpandAll
operator|.
name|setAction
argument_list|(
name|actionExpandTree
argument_list|)
expr_stmt|;
name|buttonOptionCollapseAll
operator|=
operator|new
name|JButton
argument_list|()
expr_stmt|;
name|buttonOptionCollapseAll
operator|.
name|setMnemonic
argument_list|(
literal|'L'
argument_list|)
expr_stmt|;
name|buttonOptionCollapseAll
operator|.
name|setAction
argument_list|(
name|actionCollapseTree
argument_list|)
expr_stmt|;
name|checkboxCreateKeywords
operator|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Create directory based keywords"
argument_list|)
argument_list|)
expr_stmt|;
name|checkboxCreateKeywords
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Creates keywords in created entrys with directory pathnames"
argument_list|)
argument_list|)
expr_stmt|;
name|checkboxCreateKeywords
operator|.
name|setSelected
argument_list|(
name|checkBoxWhyIsThereNoGetSelectedStupidSwing
argument_list|)
expr_stmt|;
name|checkboxCreateKeywords
operator|.
name|addItemListener
argument_list|(
operator|new
name|ItemListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|itemStateChanged
parameter_list|(
name|ItemEvent
name|e
parameter_list|)
block|{
name|checkBoxWhyIsThereNoGetSelectedStupidSwing
operator|=
operator|!
name|checkBoxWhyIsThereNoGetSelectedStupidSwing
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|textfieldDirectoryPath
operator|=
operator|new
name|JTextField
argument_list|()
expr_stmt|;
name|textfieldDirectoryPath
operator|.
name|setText
argument_list|(
name|lastSelectedDirectory
operator|==
literal|null
condition|?
literal|""
else|:
name|lastSelectedDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|labelDirectoryDescription
operator|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select a directory where the search shall start."
argument_list|)
argument_list|)
expr_stmt|;
name|labelFileTypesDescription
operator|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select file type:"
argument_list|)
argument_list|)
expr_stmt|;
name|labelFilesDescription
operator|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"These files are not linked in the active database."
argument_list|)
argument_list|)
expr_stmt|;
name|labelEntryTypeDescription
operator|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry type to be created:"
argument_list|)
argument_list|)
expr_stmt|;
name|labelSearchingDirectoryInfo
operator|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Searching file system..."
argument_list|)
argument_list|)
expr_stmt|;
name|labelSearchingDirectoryInfo
operator|.
name|setHorizontalAlignment
argument_list|(
name|JTextField
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|labelSearchingDirectoryInfo
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|labelImportingInfo
operator|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Importing into Database..."
argument_list|)
argument_list|)
expr_stmt|;
name|labelImportingInfo
operator|.
name|setHorizontalAlignment
argument_list|(
name|JTextField
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|labelImportingInfo
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tree
operator|=
operator|new
name|JTree
argument_list|()
expr_stmt|;
name|scrollpaneTree
operator|=
operator|new
name|JScrollPane
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|scrollpaneTree
operator|.
name|setWheelScrollingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|progressBarSearching
operator|=
operator|new
name|JProgressBar
argument_list|()
expr_stmt|;
name|progressBarSearching
operator|.
name|setIndeterminate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|progressBarSearching
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|progressBarSearching
operator|.
name|setStringPainted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|progressBarImporting
operator|=
operator|new
name|JProgressBar
argument_list|()
expr_stmt|;
name|progressBarImporting
operator|.
name|setIndeterminate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|progressBarImporting
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|progressBarImporting
operator|.
name|setStringPainted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes the layout for the visible components in this menu. A      * {@link GridBagLayout} is used.      */
DECL|method|initLayout ()
specifier|private
name|void
name|initLayout
parameter_list|()
block|{
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|panelDirectory
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select directory"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|panelFiles
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select files"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|panelEntryTypesSelection
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createTitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createEtchedBorder
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Bibtex entry creation"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Insets
name|basicInsets
init|=
operator|new
name|Insets
argument_list|(
literal|6
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Insets
name|smallInsets
init|=
operator|new
name|Insets
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Insets
name|noInsets
init|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// 		x, y, w, h, wx,wy,ix,iy
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelSearchArea
argument_list|,
name|buttonScan
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|EAST
argument_list|,
name|noInsets
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|40
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelSearchArea
argument_list|,
name|labelSearchingDirectoryInfo
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|EAST
argument_list|,
name|noInsets
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelSearchArea
argument_list|,
name|progressBarSearching
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|EAST
argument_list|,
name|noInsets
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelDirectory
argument_list|,
name|labelDirectoryDescription
argument_list|,
literal|null
argument_list|,
name|GridBagConstraints
operator|.
name|WEST
argument_list|,
operator|new
name|Insets
argument_list|(
literal|6
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelDirectory
argument_list|,
name|textfieldDirectoryPath
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
literal|null
argument_list|,
name|basicInsets
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelDirectory
argument_list|,
name|buttonBrowse
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|EAST
argument_list|,
name|basicInsets
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelDirectory
argument_list|,
name|labelFileTypesDescription
argument_list|,
name|GridBagConstraints
operator|.
name|NONE
argument_list|,
name|GridBagConstraints
operator|.
name|WEST
argument_list|,
operator|new
name|Insets
argument_list|(
literal|18
argument_list|,
literal|6
argument_list|,
literal|18
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelDirectory
argument_list|,
name|comboBoxFileTypeSelection
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|WEST
argument_list|,
operator|new
name|Insets
argument_list|(
literal|18
argument_list|,
literal|3
argument_list|,
literal|18
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelDirectory
argument_list|,
name|panelSearchArea
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|EAST
argument_list|,
operator|new
name|Insets
argument_list|(
literal|18
argument_list|,
literal|6
argument_list|,
literal|18
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelFiles
argument_list|,
name|labelFilesDescription
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|WEST
argument_list|,
operator|new
name|Insets
argument_list|(
literal|6
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelFiles
argument_list|,
name|scrollpaneTree
argument_list|,
name|GridBagConstraints
operator|.
name|BOTH
argument_list|,
name|GridBagConstraints
operator|.
name|CENTER
argument_list|,
name|basicInsets
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelFiles
argument_list|,
name|panelOptions
argument_list|,
name|GridBagConstraints
operator|.
name|NONE
argument_list|,
name|GridBagConstraints
operator|.
name|NORTHEAST
argument_list|,
name|basicInsets
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelOptions
argument_list|,
name|buttonOptionSelectAll
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|NORTH
argument_list|,
name|noInsets
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelOptions
argument_list|,
name|buttonOptionUnselectAll
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|NORTH
argument_list|,
name|noInsets
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelOptions
argument_list|,
name|buttonOptionExpandAll
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|NORTH
argument_list|,
operator|new
name|Insets
argument_list|(
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelOptions
argument_list|,
name|buttonOptionCollapseAll
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|NORTH
argument_list|,
name|noInsets
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelEntryTypesSelection
argument_list|,
name|labelEntryTypeDescription
argument_list|,
name|GridBagConstraints
operator|.
name|NONE
argument_list|,
name|GridBagConstraints
operator|.
name|WEST
argument_list|,
name|basicInsets
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelEntryTypesSelection
argument_list|,
name|comboBoxEntryTypeSelection
argument_list|,
name|GridBagConstraints
operator|.
name|NONE
argument_list|,
name|GridBagConstraints
operator|.
name|WEST
argument_list|,
name|basicInsets
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelEntryTypesSelection
argument_list|,
name|checkboxCreateKeywords
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|WEST
argument_list|,
name|basicInsets
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelImportArea
argument_list|,
name|labelImportingInfo
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|CENTER
argument_list|,
operator|new
name|Insets
argument_list|(
literal|6
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelImportArea
argument_list|,
name|progressBarImporting
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|CENTER
argument_list|,
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|panelButtons
argument_list|,
name|panelImportArea
argument_list|,
name|GridBagConstraints
operator|.
name|NONE
argument_list|,
name|GridBagConstraints
operator|.
name|EAST
argument_list|,
name|smallInsets
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|getContentPane
argument_list|()
argument_list|,
name|panelDirectory
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|CENTER
argument_list|,
name|basicInsets
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|getContentPane
argument_list|()
argument_list|,
name|panelFiles
argument_list|,
name|GridBagConstraints
operator|.
name|BOTH
argument_list|,
name|GridBagConstraints
operator|.
name|NORTHWEST
argument_list|,
operator|new
name|Insets
argument_list|(
literal|12
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|getContentPane
argument_list|()
argument_list|,
name|panelEntryTypesSelection
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|SOUTHWEST
argument_list|,
operator|new
name|Insets
argument_list|(
literal|12
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|getContentPane
argument_list|()
argument_list|,
name|panelButtons
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
name|GridBagConstraints
operator|.
name|CENTER
argument_list|,
operator|new
name|Insets
argument_list|(
literal|10
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ButtonBarBuilder
name|bb
init|=
operator|new
name|ButtonBarBuilder
argument_list|()
decl_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|buttonApply
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|buttonClose
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|panelImportArea
operator|.
name|add
argument_list|(
name|bb
operator|.
name|getPanel
argument_list|()
argument_list|,
name|GridBagConstraints
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
block|}
comment|/**      * Adds a component to a container, using the specified gridbag-layout and      * the supplied parameters.<br>      *<br>      * This method is simply used to ged rid of thousands of lines of code,      * which inevitably rise when layouts such as the gridbag-layout is being      * used.      *       * @param layout      *            The layout to be used.      * @param container      *            The {@link Container}, to which the component will be added.      * @param component      *            An AWT {@link Component}, that will be added to the container.      * @param fill      *            A constant describing the fill behaviour (see      *            {@link GridBagConstraints}). Can be<code>null</code>, if no      *            filling wants to be specified.      * @param anchor      *            A constant describing the anchor of the element in its parent      *            container (see {@link GridBagConstraints}). Can be      *<code>null</code>, if no specification is needed.      * @param gridX      *            The relative grid-X coordinate.      * @param gridY      *            The relative grid-Y coordinate.      * @param width      *            The relative width of the component.      * @param height      *            The relative height of the component.      * @param weightX      *            A value for the horizontal weight.      * @param weightY      *            A value for the vertical weight.      * @param insets      *            Insets of the component. Can be<code>null</code>.      */
DECL|method|addComponent (GridBagLayout layout, Container container, Component component, Integer fill, Integer anchor, Insets insets, int gridX, int gridY, int width, int height, double weightX, double weightY, int ipadX, int ipadY)
specifier|private
specifier|static
name|void
name|addComponent
parameter_list|(
name|GridBagLayout
name|layout
parameter_list|,
name|Container
name|container
parameter_list|,
name|Component
name|component
parameter_list|,
name|Integer
name|fill
parameter_list|,
name|Integer
name|anchor
parameter_list|,
name|Insets
name|insets
parameter_list|,
name|int
name|gridX
parameter_list|,
name|int
name|gridY
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|double
name|weightX
parameter_list|,
name|double
name|weightY
parameter_list|,
name|int
name|ipadX
parameter_list|,
name|int
name|ipadY
parameter_list|)
block|{
name|container
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|GridBagConstraints
name|constraints
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|constraints
operator|.
name|gridx
operator|=
name|gridX
expr_stmt|;
name|constraints
operator|.
name|gridy
operator|=
name|gridY
expr_stmt|;
name|constraints
operator|.
name|gridwidth
operator|=
name|width
expr_stmt|;
name|constraints
operator|.
name|gridheight
operator|=
name|height
expr_stmt|;
name|constraints
operator|.
name|weightx
operator|=
name|weightX
expr_stmt|;
name|constraints
operator|.
name|weighty
operator|=
name|weightY
expr_stmt|;
name|constraints
operator|.
name|ipadx
operator|=
name|ipadX
expr_stmt|;
name|constraints
operator|.
name|ipady
operator|=
name|ipadY
expr_stmt|;
if|if
condition|(
name|fill
operator|!=
literal|null
condition|)
block|{
name|constraints
operator|.
name|fill
operator|=
name|fill
expr_stmt|;
block|}
if|if
condition|(
name|insets
operator|!=
literal|null
condition|)
block|{
name|constraints
operator|.
name|insets
operator|=
name|insets
expr_stmt|;
block|}
if|if
condition|(
name|anchor
operator|!=
literal|null
condition|)
block|{
name|constraints
operator|.
name|anchor
operator|=
name|anchor
expr_stmt|;
block|}
name|layout
operator|.
name|setConstraints
argument_list|(
name|component
argument_list|,
name|constraints
argument_list|)
expr_stmt|;
name|container
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the tree view, that holds the data structure.<br>      *<br>      * Initially, the root node is<b>not</b> visible, so that the tree appears empty at the beginning.      */
DECL|method|createTree ()
specifier|private
name|void
name|createTree
parameter_list|()
block|{
comment|/**          * Mouse listener to listen for mouse events on the tree.<br>          * This will mark the selected tree entry as "selected" or "unselected",          * which will cause this nodes checkbox to appear as either "checked" or          * "unchecked".          */
name|treeMouseListener
operator|=
operator|new
name|MouseAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|int
name|x
init|=
name|e
operator|.
name|getX
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|e
operator|.
name|getY
argument_list|()
decl_stmt|;
name|int
name|row
init|=
name|tree
operator|.
name|getRowForLocation
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|TreePath
name|path
init|=
name|tree
operator|.
name|getPathForRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|CheckableTreeNode
name|node
init|=
operator|(
name|CheckableTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|Object
name|userObject
init|=
name|node
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|userObject
operator|instanceof
name|FileNodeWrapper
operator|&&
name|node
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
name|FileNodeWrapper
name|fnw
init|=
operator|(
name|FileNodeWrapper
operator|)
name|userObject
decl_stmt|;
try|try
block|{
name|JabRefDesktop
operator|.
name|openExternalViewer
argument_list|(
name|JabRef
operator|.
name|jrf
operator|.
name|basePanel
argument_list|()
operator|.
name|metaData
argument_list|()
argument_list|,
name|fnw
operator|.
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"pdf"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Error opening file"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|node
operator|.
name|check
argument_list|()
expr_stmt|;
name|tree
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|tree
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|CheckableTreeNode
name|startNode
init|=
operator|new
name|CheckableTreeNode
argument_list|(
literal|"ROOT"
argument_list|)
decl_stmt|;
name|DefaultTreeModel
name|model
init|=
operator|new
name|DefaultTreeModel
argument_list|(
name|startNode
argument_list|)
decl_stmt|;
name|tree
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setRootVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|DefaultTreeCellRenderer
name|renderer
init|=
operator|new
name|CheckboxTreeCellRenderer
argument_list|()
decl_stmt|;
name|tree
operator|.
name|setCellRenderer
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
name|tree
operator|.
name|addMouseListener
argument_list|(
name|treeMouseListener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialises the combobox that contains the available file types which      * bibtex entries can be created of.      */
DECL|method|createFileTypesCombobox ()
specifier|private
name|void
name|createFileTypesCombobox
parameter_list|()
block|{
name|List
argument_list|<
name|FileFilter
argument_list|>
name|fileFilterList
init|=
name|creatorManager
operator|.
name|getFileFilterList
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|FileFilter
argument_list|>
name|vector
init|=
operator|new
name|Vector
argument_list|<
name|FileFilter
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileFilter
name|fileFilter
range|:
name|fileFilterList
control|)
block|{
name|vector
operator|.
name|add
argument_list|(
name|fileFilter
argument_list|)
expr_stmt|;
block|}
name|comboBoxFileTypeSelection
operator|=
operator|new
name|JComboBox
argument_list|(
name|vector
argument_list|)
expr_stmt|;
name|comboBoxFileTypeSelection
operator|.
name|setRenderer
argument_list|(
operator|new
name|DefaultListCellRenderer
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|8503499454763947465L
decl_stmt|;
comment|/* (non-Javadoc)              * @see javax.swing.DefaultListCellRenderer#getListCellRendererComponent(javax.swing.JList, java.lang.Object, int, boolean, boolean)              */
annotation|@
name|Override
specifier|public
name|Component
name|getListCellRendererComponent
parameter_list|(
name|JList
name|list
parameter_list|,
name|Object
name|value
parameter_list|,
name|int
name|index
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|cellHasFocus
parameter_list|)
block|{
name|JLabel
name|label
init|=
operator|(
name|JLabel
operator|)
name|super
operator|.
name|getListCellRendererComponent
argument_list|(
name|list
argument_list|,
name|value
argument_list|,
name|index
argument_list|,
name|isSelected
argument_list|,
name|cellHasFocus
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|EntryFromFileCreator
condition|)
block|{
name|EntryFromFileCreator
name|creator
init|=
operator|(
name|EntryFromFileCreator
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|creator
operator|.
name|getExternalFileType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|label
operator|.
name|setIcon
argument_list|(
name|creator
operator|.
name|getExternalFileType
argument_list|()
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|label
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the ComboBox-View vor the Listbox that holds the Bibtex entry      * types.      */
DECL|method|createEntryTypesCombobox ()
specifier|private
name|void
name|createEntryTypesCombobox
parameter_list|()
block|{
name|Iterator
argument_list|<
name|BibtexEntryType
argument_list|>
name|iterator
init|=
name|BibtexEntryType
operator|.
name|getAllValues
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|BibtexEntryTypeWrapper
argument_list|>
name|list
init|=
operator|new
name|Vector
argument_list|<
name|BibtexEntryTypeWrapper
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|BibtexEntryTypeWrapper
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|BibtexEntryTypeWrapper
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|comboBoxEntryTypeSelection
operator|=
operator|new
name|JComboBox
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**      * Wrapper for displaying the Type {@link BibtexEntryType} in a Combobox.      *       * @author Nosh&Dan      * @version 12.11.2008 | 01:02:30      *      */
DECL|class|BibtexEntryTypeWrapper
specifier|private
specifier|static
class|class
name|BibtexEntryTypeWrapper
block|{
DECL|field|entryType
specifier|final
name|BibtexEntryType
name|entryType
decl_stmt|;
DECL|method|BibtexEntryTypeWrapper (BibtexEntryType bibtexType)
name|BibtexEntryTypeWrapper
parameter_list|(
name|BibtexEntryType
name|bibtexType
parameter_list|)
block|{
name|this
operator|.
name|entryType
operator|=
name|bibtexType
expr_stmt|;
block|}
comment|/* (non-Javadoc)          * @see java.lang.Object#toString()          */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|entryType
operator|==
literal|null
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"<No selection>"
argument_list|)
return|;
block|}
return|return
name|entryType
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
DECL|class|CheckableTreeNode
specifier|public
specifier|static
class|class
name|CheckableTreeNode
extends|extends
name|DefaultMutableTreeNode
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1131241777605570737L
decl_stmt|;
DECL|field|isSelected
specifier|private
name|boolean
name|isSelected
decl_stmt|;
DECL|field|checkbox
specifier|private
name|JCheckBox
name|checkbox
decl_stmt|;
DECL|method|CheckableTreeNode (Object userObject)
specifier|public
name|CheckableTreeNode
parameter_list|(
name|Object
name|userObject
parameter_list|)
block|{
name|super
argument_list|(
name|userObject
argument_list|)
expr_stmt|;
name|checkbox
operator|=
operator|new
name|JCheckBox
argument_list|()
expr_stmt|;
block|}
comment|/**          * @return the checkbox          */
DECL|method|getCheckbox ()
specifier|public
name|JCheckBox
name|getCheckbox
parameter_list|()
block|{
return|return
name|checkbox
return|;
block|}
comment|/**          * @param checkbox          *            the checkbox to set          */
DECL|method|setCheckbox (JCheckBox checkbox)
specifier|public
name|void
name|setCheckbox
parameter_list|(
name|JCheckBox
name|checkbox
parameter_list|)
block|{
name|this
operator|.
name|checkbox
operator|=
name|checkbox
expr_stmt|;
block|}
DECL|method|check ()
specifier|public
name|void
name|check
parameter_list|()
block|{
name|setSelected
argument_list|(
operator|!
name|isSelected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setSelected (boolean bSelected)
specifier|public
name|void
name|setSelected
parameter_list|(
name|boolean
name|bSelected
parameter_list|)
block|{
name|isSelected
operator|=
name|bSelected
expr_stmt|;
name|Enumeration
argument_list|<
name|CheckableTreeNode
argument_list|>
name|children
init|=
name|this
operator|.
name|children
argument_list|()
decl_stmt|;
while|while
condition|(
name|children
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|CheckableTreeNode
name|child
init|=
name|children
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|child
operator|.
name|setSelected
argument_list|(
name|bSelected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSelected ()
specifier|public
name|boolean
name|getSelected
parameter_list|()
block|{
return|return
name|isSelected
return|;
block|}
block|}
DECL|class|CheckboxTreeCellRenderer
specifier|private
specifier|static
class|class
name|CheckboxTreeCellRenderer
extends|extends
name|DefaultTreeCellRenderer
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3737245079578074387L
decl_stmt|;
DECL|field|fsv
specifier|final
name|FileSystemView
name|fsv
init|=
name|FileSystemView
operator|.
name|getFileSystemView
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getTreeCellRendererComponent (final JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus)
specifier|public
name|Component
name|getTreeCellRendererComponent
parameter_list|(
specifier|final
name|JTree
name|tree
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|sel
parameter_list|,
name|boolean
name|expanded
parameter_list|,
name|boolean
name|leaf
parameter_list|,
name|int
name|row
parameter_list|,
name|boolean
name|hasFocus
parameter_list|)
block|{
name|Component
name|nodeComponent
init|=
name|super
operator|.
name|getTreeCellRendererComponent
argument_list|(
name|tree
argument_list|,
name|value
argument_list|,
name|sel
argument_list|,
name|expanded
argument_list|,
name|leaf
argument_list|,
name|row
argument_list|,
name|hasFocus
argument_list|)
decl_stmt|;
name|CheckableTreeNode
name|node
init|=
operator|(
name|CheckableTreeNode
operator|)
name|value
decl_stmt|;
name|FileNodeWrapper
name|userObject
init|=
operator|(
name|FileNodeWrapper
operator|)
name|node
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
name|JPanel
name|newPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|JCheckBox
name|checkbox
init|=
name|node
operator|.
name|getCheckbox
argument_list|()
decl_stmt|;
name|checkbox
operator|.
name|setSelected
argument_list|(
name|node
operator|.
name|getSelected
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|setIcon
argument_list|(
name|fsv
operator|.
name|getSystemIcon
argument_list|(
name|userObject
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{             }
name|newPanel
operator|.
name|setBackground
argument_list|(
name|nodeComponent
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
name|checkbox
operator|.
name|setBackground
argument_list|(
name|nodeComponent
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|newPanel
argument_list|,
name|checkbox
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|newPanel
argument_list|,
name|nodeComponent
argument_list|,
name|GridBagConstraints
operator|.
name|HORIZONTAL
argument_list|,
literal|null
argument_list|,
operator|new
name|Insets
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|userObject
operator|.
name|fileCount
operator|>
literal|0
condition|)
block|{
name|JLabel
name|label
init|=
operator|new
name|JLabel
argument_list|(
literal|"("
operator|+
name|userObject
operator|.
name|fileCount
operator|+
literal|" file"
operator|+
operator|(
name|userObject
operator|.
name|fileCount
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|FindUnlinkedFilesDialog
operator|.
name|addComponent
argument_list|(
name|gbl
argument_list|,
name|newPanel
argument_list|,
name|label
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|Insets
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|newPanel
return|;
block|}
block|}
DECL|class|FileNodeWrapper
specifier|public
specifier|static
class|class
name|FileNodeWrapper
block|{
DECL|field|file
specifier|public
specifier|final
name|File
name|file
decl_stmt|;
DECL|field|fileCount
specifier|public
specifier|final
name|int
name|fileCount
decl_stmt|;
DECL|method|FileNodeWrapper (File aFile)
specifier|public
name|FileNodeWrapper
parameter_list|(
name|File
name|aFile
parameter_list|)
block|{
name|this
argument_list|(
name|aFile
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**          * @param aDirectory          * @param fileCount          */
DECL|method|FileNodeWrapper (File aDirectory, int fileCount)
specifier|public
name|FileNodeWrapper
parameter_list|(
name|File
name|aDirectory
parameter_list|,
name|int
name|fileCount
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|aDirectory
expr_stmt|;
name|this
operator|.
name|fileCount
operator|=
name|fileCount
expr_stmt|;
block|}
comment|/*          * (non-Javadoc)          *           * @see java.lang.Object#toString()          */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|file
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

