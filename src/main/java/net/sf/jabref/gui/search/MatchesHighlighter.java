begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.gui.search
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|MatchesHighlighter
specifier|public
class|class
name|MatchesHighlighter
block|{
comment|// used at highlighting in preview area.
comment|// Color chosen similar to JTextComponent.getSelectionColor(), which is
comment|// used at highlighting words at the editor
DECL|field|HIGHLIGHT_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|HIGHLIGHT_COLOR
init|=
literal|"#3399FF"
decl_stmt|;
comment|/**      * Will return the text that was called by the method with HTML tags to highlight each word the user has searched      * for and will skip the highlight process if the first Char isn't a letter or a digit.      *<p>      * This check is a quick hack to avoid highlighting of HTML tags It does not always work, but it does its job mostly      *      * @param text             This is a String in which we search for different words      * @param wordsToHighlight List of all words which must be highlighted      * @return String that was called by the method, with HTML Tags if a word was found      */
DECL|method|highlightWordsWithHTML (String text, Optional<Pattern> highlightPattern)
specifier|public
specifier|static
name|String
name|highlightWordsWithHTML
parameter_list|(
name|String
name|text
parameter_list|,
name|Optional
argument_list|<
name|Pattern
argument_list|>
name|highlightPattern
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|highlightPattern
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|highlightPattern
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|text
return|;
block|}
name|Matcher
name|matcher
init|=
name|highlightPattern
operator|.
name|get
argument_list|()
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|foundSomething
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|found
init|=
name|matcher
operator|.
name|group
argument_list|()
decl_stmt|;
comment|// color the search keyword
comment|// put first String Part and then html + word + html to a StringBuffer
name|matcher
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
literal|"<span style=\"background-color:"
operator|+
name|HIGHLIGHT_COLOR
operator|+
literal|";\">"
operator|+
name|found
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
name|foundSomething
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|foundSomething
condition|)
block|{
name|matcher
operator|.
name|appendTail
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|text
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|text
return|;
block|}
block|}
end_class

end_unit

