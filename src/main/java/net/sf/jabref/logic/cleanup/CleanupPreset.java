begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.     This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.     You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.cleanup
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_class
DECL|class|CleanupPreset
specifier|public
class|class
name|CleanupPreset
block|{
DECL|field|cleanUpSuperscripts
specifier|private
name|boolean
name|cleanUpSuperscripts
decl_stmt|;
DECL|field|cleanUpDOI
specifier|private
name|boolean
name|cleanUpDOI
decl_stmt|;
DECL|field|cleanUpMonth
specifier|private
name|boolean
name|cleanUpMonth
decl_stmt|;
DECL|field|cleanUpPageNumbers
specifier|private
name|boolean
name|cleanUpPageNumbers
decl_stmt|;
DECL|field|cleanUpDate
specifier|private
name|boolean
name|cleanUpDate
decl_stmt|;
DECL|field|makePathsRelative
specifier|private
name|boolean
name|makePathsRelative
decl_stmt|;
DECL|field|renamePDF
specifier|private
name|boolean
name|renamePDF
decl_stmt|;
DECL|field|renamePdfOnlyRelativePaths
specifier|private
name|boolean
name|renamePdfOnlyRelativePaths
decl_stmt|;
DECL|field|cleanUpUpgradeExternalLinks
specifier|private
name|boolean
name|cleanUpUpgradeExternalLinks
decl_stmt|;
DECL|field|convertHTMLToLatex
specifier|private
name|boolean
name|convertHTMLToLatex
decl_stmt|;
DECL|field|convertCase
specifier|private
name|boolean
name|convertCase
decl_stmt|;
DECL|field|convertLaTeX
specifier|private
name|boolean
name|convertLaTeX
decl_stmt|;
DECL|field|convertUnits
specifier|private
name|boolean
name|convertUnits
decl_stmt|;
DECL|field|convertUnicodeToLatex
specifier|private
name|boolean
name|convertUnicodeToLatex
decl_stmt|;
DECL|field|convertToBiblatex
specifier|private
name|boolean
name|convertToBiblatex
decl_stmt|;
DECL|field|fixFileLinks
specifier|private
name|boolean
name|fixFileLinks
decl_stmt|;
DECL|method|loadFromPreferences (JabRefPreferences preferences)
specifier|public
specifier|static
name|CleanupPreset
name|loadFromPreferences
parameter_list|(
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
name|CleanupPreset
name|preset
init|=
operator|new
name|CleanupPreset
argument_list|()
decl_stmt|;
name|preset
operator|.
name|setCleanUpSuperscripts
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_SUPERSCRIPTS
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setCleanUpDOI
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_DOI
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setCleanUpMonth
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setCleanUpPageNumbers
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_PAGE_NUMBERS
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setCleanUpDate
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_DATE
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setMakePathsRelative
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_MAKE_PATHS_RELATIVE
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setRenamePDF
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_RENAME_PDF
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setRenamePdfOnlyRelativePaths
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_RENAME_PDF_ONLY_RELATIVE_PATHS
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setCleanUpUpgradeExternalLinks
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_UPGRADE_EXTERNAL_LINKS
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setConvertHTMLToLatex
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_HTML
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setConvertCase
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_CASE
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setConvertLaTeX
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_LATEX
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setConvertUnits
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_UNITS
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setConvertUnicodeToLatex
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_UNICODE
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setConvertToBiblatex
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_CONVERT_TO_BIBLATEX
argument_list|)
argument_list|)
expr_stmt|;
name|preset
operator|.
name|setFixFileLinks
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_FIX_FILE_LINKS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|preset
return|;
block|}
DECL|method|storeInPreferences (JabRefPreferences preferences)
specifier|public
name|void
name|storeInPreferences
parameter_list|(
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_SUPERSCRIPTS
argument_list|,
name|cleanUpSuperscripts
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_DOI
argument_list|,
name|cleanUpDOI
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_MONTH
argument_list|,
name|cleanUpMonth
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_PAGE_NUMBERS
argument_list|,
name|cleanUpPageNumbers
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_DATE
argument_list|,
name|cleanUpDate
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_MAKE_PATHS_RELATIVE
argument_list|,
name|makePathsRelative
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_RENAME_PDF
argument_list|,
name|renamePDF
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_RENAME_PDF_ONLY_RELATIVE_PATHS
argument_list|,
name|renamePdfOnlyRelativePaths
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_UPGRADE_EXTERNAL_LINKS
argument_list|,
name|cleanUpUpgradeExternalLinks
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_HTML
argument_list|,
name|convertHTMLToLatex
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_CASE
argument_list|,
name|convertCase
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_LATEX
argument_list|,
name|convertLaTeX
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_UNITS
argument_list|,
name|convertUnits
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_UNICODE
argument_list|,
name|convertUnicodeToLatex
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_CONVERT_TO_BIBLATEX
argument_list|,
name|convertToBiblatex
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_FIX_FILE_LINKS
argument_list|,
name|fixFileLinks
argument_list|)
expr_stmt|;
block|}
DECL|method|isCleanUpSuperscripts ()
specifier|public
name|boolean
name|isCleanUpSuperscripts
parameter_list|()
block|{
return|return
name|cleanUpSuperscripts
return|;
block|}
comment|/**      * Converts the text in 1st, 2nd, ... to real superscripts by wrapping in \textsuperscript{st}, ...      */
DECL|method|setCleanUpSuperscripts (boolean cleanUpSuperscripts)
specifier|public
name|void
name|setCleanUpSuperscripts
parameter_list|(
name|boolean
name|cleanUpSuperscripts
parameter_list|)
block|{
name|this
operator|.
name|cleanUpSuperscripts
operator|=
name|cleanUpSuperscripts
expr_stmt|;
block|}
comment|/**      * Removes the http://... for each DOI. Moves DOIs from URL and NOTE filed to DOI field.      */
DECL|method|isCleanUpDOI ()
specifier|public
name|boolean
name|isCleanUpDOI
parameter_list|()
block|{
return|return
name|cleanUpDOI
return|;
block|}
DECL|method|setCleanUpDOI (boolean cleanUpDOI)
specifier|public
name|void
name|setCleanUpDOI
parameter_list|(
name|boolean
name|cleanUpDOI
parameter_list|)
block|{
name|this
operator|.
name|cleanUpDOI
operator|=
name|cleanUpDOI
expr_stmt|;
block|}
DECL|method|isCleanUpMonth ()
specifier|public
name|boolean
name|isCleanUpMonth
parameter_list|()
block|{
return|return
name|cleanUpMonth
return|;
block|}
DECL|method|setCleanUpMonth (boolean cleanUpMonth)
specifier|public
name|void
name|setCleanUpMonth
parameter_list|(
name|boolean
name|cleanUpMonth
parameter_list|)
block|{
name|this
operator|.
name|cleanUpMonth
operator|=
name|cleanUpMonth
expr_stmt|;
block|}
DECL|method|isCleanUpPageNumbers ()
specifier|public
name|boolean
name|isCleanUpPageNumbers
parameter_list|()
block|{
return|return
name|cleanUpPageNumbers
return|;
block|}
DECL|method|setCleanUpPageNumbers (boolean cleanUpPageNumbers)
specifier|public
name|void
name|setCleanUpPageNumbers
parameter_list|(
name|boolean
name|cleanUpPageNumbers
parameter_list|)
block|{
name|this
operator|.
name|cleanUpPageNumbers
operator|=
name|cleanUpPageNumbers
expr_stmt|;
block|}
DECL|method|isCleanUpDate ()
specifier|public
name|boolean
name|isCleanUpDate
parameter_list|()
block|{
return|return
name|cleanUpDate
return|;
block|}
comment|/**      * Format dates correctly (yyyy-mm-dd or yyyy-mm)      */
DECL|method|setCleanUpDate (boolean cleanUpDate)
specifier|public
name|void
name|setCleanUpDate
parameter_list|(
name|boolean
name|cleanUpDate
parameter_list|)
block|{
name|this
operator|.
name|cleanUpDate
operator|=
name|cleanUpDate
expr_stmt|;
block|}
comment|/**      * Collects file links from the pdf or ps field, and adds them to the list contained in the file field.      */
DECL|method|isCleanUpUpgradeExternalLinks ()
specifier|public
name|boolean
name|isCleanUpUpgradeExternalLinks
parameter_list|()
block|{
return|return
name|cleanUpUpgradeExternalLinks
return|;
block|}
DECL|method|setCleanUpUpgradeExternalLinks (boolean cleanUpUpgradeExternalLinks)
specifier|public
name|void
name|setCleanUpUpgradeExternalLinks
parameter_list|(
name|boolean
name|cleanUpUpgradeExternalLinks
parameter_list|)
block|{
name|this
operator|.
name|cleanUpUpgradeExternalLinks
operator|=
name|cleanUpUpgradeExternalLinks
expr_stmt|;
block|}
DECL|method|isMakePathsRelative ()
specifier|public
name|boolean
name|isMakePathsRelative
parameter_list|()
block|{
return|return
name|makePathsRelative
return|;
block|}
DECL|method|setMakePathsRelative (boolean makePathsRelative)
specifier|public
name|void
name|setMakePathsRelative
parameter_list|(
name|boolean
name|makePathsRelative
parameter_list|)
block|{
name|this
operator|.
name|makePathsRelative
operator|=
name|makePathsRelative
expr_stmt|;
block|}
DECL|method|isRenamePDF ()
specifier|public
name|boolean
name|isRenamePDF
parameter_list|()
block|{
return|return
name|renamePDF
return|;
block|}
DECL|method|setRenamePDF (boolean renamePDF)
specifier|public
name|void
name|setRenamePDF
parameter_list|(
name|boolean
name|renamePDF
parameter_list|)
block|{
name|this
operator|.
name|renamePDF
operator|=
name|renamePDF
expr_stmt|;
block|}
DECL|method|isConvertHTMLToLatex ()
specifier|public
name|boolean
name|isConvertHTMLToLatex
parameter_list|()
block|{
return|return
name|convertHTMLToLatex
return|;
block|}
comment|/**      * Converts HTML code to LaTeX code      */
DECL|method|setConvertHTMLToLatex (boolean convertHTMLToLatex)
specifier|public
name|void
name|setConvertHTMLToLatex
parameter_list|(
name|boolean
name|convertHTMLToLatex
parameter_list|)
block|{
name|this
operator|.
name|convertHTMLToLatex
operator|=
name|convertHTMLToLatex
expr_stmt|;
block|}
DECL|method|isConvertCase ()
specifier|public
name|boolean
name|isConvertCase
parameter_list|()
block|{
return|return
name|convertCase
return|;
block|}
comment|/**      * Adds curly brackets {} around keywords      */
DECL|method|setConvertCase (boolean convertCase)
specifier|public
name|void
name|setConvertCase
parameter_list|(
name|boolean
name|convertCase
parameter_list|)
block|{
name|this
operator|.
name|convertCase
operator|=
name|convertCase
expr_stmt|;
block|}
DECL|method|isConvertLaTeX ()
specifier|public
name|boolean
name|isConvertLaTeX
parameter_list|()
block|{
return|return
name|convertLaTeX
return|;
block|}
DECL|method|setConvertLaTeX (boolean convertLaTeX)
specifier|public
name|void
name|setConvertLaTeX
parameter_list|(
name|boolean
name|convertLaTeX
parameter_list|)
block|{
name|this
operator|.
name|convertLaTeX
operator|=
name|convertLaTeX
expr_stmt|;
block|}
DECL|method|isConvertUnits ()
specifier|public
name|boolean
name|isConvertUnits
parameter_list|()
block|{
return|return
name|convertUnits
return|;
block|}
DECL|method|setConvertUnits (boolean convertUnits)
specifier|public
name|void
name|setConvertUnits
parameter_list|(
name|boolean
name|convertUnits
parameter_list|)
block|{
name|this
operator|.
name|convertUnits
operator|=
name|convertUnits
expr_stmt|;
block|}
comment|/**      * Converts Unicode characters to LaTeX code      */
DECL|method|isConvertUnicodeToLatex ()
specifier|public
name|boolean
name|isConvertUnicodeToLatex
parameter_list|()
block|{
return|return
name|convertUnicodeToLatex
return|;
block|}
DECL|method|setConvertUnicodeToLatex (boolean convertUnicodeToLatex)
specifier|public
name|void
name|setConvertUnicodeToLatex
parameter_list|(
name|boolean
name|convertUnicodeToLatex
parameter_list|)
block|{
name|this
operator|.
name|convertUnicodeToLatex
operator|=
name|convertUnicodeToLatex
expr_stmt|;
block|}
comment|/**      * Converts to BibLatex format      */
DECL|method|isConvertToBiblatex ()
specifier|public
name|boolean
name|isConvertToBiblatex
parameter_list|()
block|{
return|return
name|convertToBiblatex
return|;
block|}
DECL|method|setConvertToBiblatex (boolean convertToBiblatex)
specifier|public
name|void
name|setConvertToBiblatex
parameter_list|(
name|boolean
name|convertToBiblatex
parameter_list|)
block|{
name|this
operator|.
name|convertToBiblatex
operator|=
name|convertToBiblatex
expr_stmt|;
block|}
DECL|method|isRenamePdfOnlyRelativePaths ()
specifier|public
name|boolean
name|isRenamePdfOnlyRelativePaths
parameter_list|()
block|{
return|return
name|renamePdfOnlyRelativePaths
return|;
block|}
DECL|method|setRenamePdfOnlyRelativePaths (boolean renamePdfOnlyRelativePaths)
specifier|public
name|void
name|setRenamePdfOnlyRelativePaths
parameter_list|(
name|boolean
name|renamePdfOnlyRelativePaths
parameter_list|)
block|{
name|this
operator|.
name|renamePdfOnlyRelativePaths
operator|=
name|renamePdfOnlyRelativePaths
expr_stmt|;
block|}
DECL|method|isFixFileLinks ()
specifier|public
name|boolean
name|isFixFileLinks
parameter_list|()
block|{
return|return
name|fixFileLinks
return|;
block|}
DECL|method|setFixFileLinks (boolean fixFileLinks)
specifier|public
name|void
name|setFixFileLinks
parameter_list|(
name|boolean
name|fixFileLinks
parameter_list|)
block|{
name|this
operator|.
name|fixFileLinks
operator|=
name|fixFileLinks
expr_stmt|;
block|}
block|}
end_class

end_unit

