begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.cleanup
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|FileDirectoryPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|TypedBibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatterPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|ParsedFileField
import|;
end_import

begin_class
DECL|class|RenamePdfCleanup
specifier|public
class|class
name|RenamePdfCleanup
implements|implements
name|CleanupJob
block|{
DECL|field|databaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|onlyRelativePaths
specifier|private
specifier|final
name|boolean
name|onlyRelativePaths
decl_stmt|;
DECL|field|fileNamePattern
specifier|private
specifier|final
name|String
name|fileNamePattern
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|LayoutFormatterPreferences
name|prefs
decl_stmt|;
DECL|field|fileDirectoryPreferences
specifier|private
specifier|final
name|FileDirectoryPreferences
name|fileDirectoryPreferences
decl_stmt|;
DECL|field|unsuccessfulRenames
specifier|private
name|int
name|unsuccessfulRenames
decl_stmt|;
DECL|method|RenamePdfCleanup (boolean onlyRelativePaths, BibDatabaseContext databaseContext, String fileNamePattern, LayoutFormatterPreferences prefs, FileDirectoryPreferences fileDirectoryPreferences)
specifier|public
name|RenamePdfCleanup
parameter_list|(
name|boolean
name|onlyRelativePaths
parameter_list|,
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|String
name|fileNamePattern
parameter_list|,
name|LayoutFormatterPreferences
name|prefs
parameter_list|,
name|FileDirectoryPreferences
name|fileDirectoryPreferences
parameter_list|)
block|{
name|this
operator|.
name|databaseContext
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|databaseContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|onlyRelativePaths
operator|=
name|onlyRelativePaths
expr_stmt|;
name|this
operator|.
name|fileNamePattern
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|fileNamePattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefs
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileDirectoryPreferences
operator|=
name|fileDirectoryPreferences
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cleanup (BibEntry entry)
specifier|public
name|List
argument_list|<
name|FieldChange
argument_list|>
name|cleanup
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|TypedBibEntry
name|typedEntry
init|=
operator|new
name|TypedBibEntry
argument_list|(
name|entry
argument_list|,
name|databaseContext
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ParsedFileField
argument_list|>
name|fileList
init|=
name|typedEntry
operator|.
name|getFiles
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ParsedFileField
argument_list|>
name|newFileList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ParsedFileField
name|flEntry
range|:
name|fileList
control|)
block|{
name|String
name|realOldFilename
init|=
name|flEntry
operator|.
name|getLink
argument_list|()
decl_stmt|;
if|if
condition|(
name|onlyRelativePaths
operator|&&
operator|(
operator|new
name|File
argument_list|(
name|realOldFilename
argument_list|)
operator|.
name|isAbsolute
argument_list|()
operator|)
condition|)
block|{
name|newFileList
operator|.
name|add
argument_list|(
name|flEntry
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|StringBuilder
name|newFilename
init|=
operator|new
name|StringBuilder
argument_list|(
name|FileUtil
operator|.
name|createFileNameFromPattern
argument_list|(
name|databaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|fileNamePattern
argument_list|,
name|prefs
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
comment|//Add extension to newFilename
name|newFilename
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|getFileExtension
argument_list|(
name|realOldFilename
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|//get new Filename with path
comment|//Create new Path based on old Path and new filename
name|Optional
argument_list|<
name|File
argument_list|>
name|expandedOldFile
init|=
name|FileUtil
operator|.
name|expandFilename
argument_list|(
name|realOldFilename
argument_list|,
name|databaseContext
operator|.
name|getFileDirectory
argument_list|(
name|fileDirectoryPreferences
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|expandedOldFile
operator|.
name|isPresent
argument_list|()
operator|)
operator|||
operator|(
name|expandedOldFile
operator|.
name|get
argument_list|()
operator|.
name|getParent
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
comment|// something went wrong. Just skip this entry
name|newFileList
operator|.
name|add
argument_list|(
name|flEntry
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|newPath
init|=
name|expandedOldFile
operator|.
name|get
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|concat
argument_list|(
name|OS
operator|.
name|FILE_SEPARATOR
argument_list|)
operator|.
name|concat
argument_list|(
name|newFilename
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expandedOldFilePath
init|=
name|expandedOldFile
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|pathsDifferOnlyByCase
init|=
name|newPath
operator|.
name|equalsIgnoreCase
argument_list|(
name|expandedOldFilePath
argument_list|)
operator|&&
operator|!
name|newPath
operator|.
name|equals
argument_list|(
name|expandedOldFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|newPath
argument_list|)
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|pathsDifferOnlyByCase
condition|)
block|{
comment|// we do not overwrite files
comment|// Since File.exists is sometimes not case-sensitive, the check pathsDifferOnlyByCase ensures that we
comment|// nonetheless rename files to a new name which just differs by case.
comment|// TODO: we could check here if the newPath file is linked with the current entry. And if not, we could add a link
name|newFileList
operator|.
name|add
argument_list|(
name|flEntry
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|//do rename
name|boolean
name|renameSuccessful
init|=
name|FileUtil
operator|.
name|renameFile
argument_list|(
name|expandedOldFilePath
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|renameSuccessful
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
comment|//Change the path for this entry
name|String
name|description
init|=
name|flEntry
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|flEntry
operator|.
name|getFileType
argument_list|()
decl_stmt|;
comment|// we cannot use "newPath" to generate a FileListEntry as newPath is absolute, but we want to keep relative paths whenever possible
name|File
name|parent
init|=
operator|(
operator|new
name|File
argument_list|(
name|realOldFilename
argument_list|)
operator|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|String
name|newFileEntryFileName
decl_stmt|;
if|if
condition|(
operator|(
name|parent
operator|==
literal|null
operator|)
operator|||
name|databaseContext
operator|.
name|getFileDirectory
argument_list|(
name|fileDirectoryPreferences
argument_list|)
operator|.
name|contains
argument_list|(
name|parent
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|)
block|{
name|newFileEntryFileName
operator|=
name|newFilename
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newFileEntryFileName
operator|=
name|parent
operator|.
name|toString
argument_list|()
operator|.
name|concat
argument_list|(
name|OS
operator|.
name|FILE_SEPARATOR
argument_list|)
operator|.
name|concat
argument_list|(
name|newFilename
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newFileList
operator|.
name|add
argument_list|(
operator|new
name|ParsedFileField
argument_list|(
name|description
argument_list|,
name|newFileEntryFileName
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unsuccessfulRenames
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|typedEntry
operator|.
name|setFiles
argument_list|(
name|newFileList
argument_list|)
decl_stmt|;
comment|//we put an undo of the field content here
comment|//the file is not being renamed back, which leads to inconsistencies
comment|//if we put a null undo object here, the change by "doMakePathsRelative" would overwrite the field value nevertheless.
if|if
condition|(
name|change
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|change
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
DECL|method|getUnsuccessfulRenames ()
specifier|public
name|int
name|getUnsuccessfulRenames
parameter_list|()
block|{
return|return
name|unsuccessfulRenames
return|;
block|}
block|}
end_class

end_unit

