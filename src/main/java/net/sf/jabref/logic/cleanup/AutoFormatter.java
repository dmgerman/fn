begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.cleanup
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * This class includes sensible defaults for consistent formatting of BibTex entries.  */
end_comment

begin_class
DECL|class|AutoFormatter
specifier|public
class|class
name|AutoFormatter
block|{
DECL|field|entry
specifier|private
name|BibtexEntry
name|entry
decl_stmt|;
DECL|method|AutoFormatter (BibtexEntry entry)
specifier|public
name|AutoFormatter
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
block|}
comment|/**      * Runs all default cleanups for the BibTex entry.      */
DECL|method|runDefaultCleanups ()
specifier|public
name|void
name|runDefaultCleanups
parameter_list|()
block|{
name|applySuperscripts
argument_list|()
expr_stmt|;
block|}
comment|/**      * Converts ordinal numbers to superscripts, e.g. 1st, 2nd or 3rd.      * Run the replacement for every available BibTex field.      * Will replace ordinal numbers even if they are semantically wrong, e.g. 21rd      *      *<example>      *     1st Conf. Cloud Computing -> 1\textsuperscript{st} Conf. Cloud Computing      *</example>      */
DECL|method|applySuperscripts ()
specifier|public
name|void
name|applySuperscripts
parameter_list|()
block|{
comment|// find possible superscripts on word boundaries
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\b(\\d+)(st|nd|rd|th)\\b"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|MULTILINE
argument_list|)
decl_stmt|;
comment|// adds superscript tag
specifier|final
name|String
name|replace
init|=
literal|"$1\\\\textsuperscript{$2}"
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|entry
operator|.
name|getAllFields
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|entry
operator|.
name|getField
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// nothing to do
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
comment|// replace globally
name|String
name|newValue
init|=
name|matcher
operator|.
name|replaceAll
argument_list|(
name|replace
argument_list|)
decl_stmt|;
comment|// write field
if|if
condition|(
operator|!
name|newValue
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|name
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

