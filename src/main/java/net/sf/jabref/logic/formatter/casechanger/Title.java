begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.formatter.casechanger
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Represents a title of a bibtex entry.  */
end_comment

begin_class
DECL|class|Title
specifier|public
specifier|final
class|class
name|Title
block|{
DECL|field|words
specifier|private
specifier|final
name|List
argument_list|<
name|Word
argument_list|>
name|words
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Title (String title)
specifier|public
name|Title
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|this
operator|.
name|words
operator|.
name|addAll
argument_list|(
operator|new
name|TitleParser
argument_list|()
operator|.
name|parse
argument_list|(
name|title
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getWords ()
specifier|public
name|List
argument_list|<
name|Word
argument_list|>
name|getWords
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|words
argument_list|)
return|;
block|}
DECL|method|getFirstWord ()
specifier|public
name|Optional
argument_list|<
name|Word
argument_list|>
name|getFirstWord
parameter_list|()
block|{
if|if
condition|(
name|getWords
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|getWords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLastWord ()
specifier|public
name|Optional
argument_list|<
name|Word
argument_list|>
name|getLastWord
parameter_list|()
block|{
if|if
condition|(
name|getWords
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|getWords
argument_list|()
operator|.
name|get
argument_list|(
name|getWords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|words
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Word
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|" "
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

