begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.formatter.casechanger
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  * Parses a title to a list of words.  */
end_comment

begin_class
DECL|class|TitleParser
specifier|public
specifier|final
class|class
name|TitleParser
block|{
DECL|field|buffer
specifier|private
name|StringBuffer
name|buffer
decl_stmt|;
DECL|field|wordStart
specifier|private
name|int
name|wordStart
decl_stmt|;
DECL|method|parse (String title)
specifier|public
name|List
argument_list|<
name|Word
argument_list|>
name|parse
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|List
argument_list|<
name|Word
argument_list|>
name|words
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|isProtected
init|=
name|determineProtectedChars
argument_list|(
name|title
argument_list|)
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|title
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
condition|)
block|{
if|if
condition|(
name|wordStart
operator|==
operator|-
literal|1
condition|)
block|{
name|wordStart
operator|=
name|index
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createWord
argument_list|(
name|isProtected
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|words
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
name|createWord
argument_list|(
name|isProtected
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|words
operator|::
name|add
argument_list|)
expr_stmt|;
return|return
name|words
return|;
block|}
DECL|method|createWord (boolean[] isProtected)
specifier|private
name|Optional
argument_list|<
name|Word
argument_list|>
name|createWord
parameter_list|(
name|boolean
index|[]
name|isProtected
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|char
index|[]
name|chars
init|=
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|protectedChars
init|=
operator|new
name|boolean
index|[
name|chars
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|isProtected
argument_list|,
name|wordStart
argument_list|,
name|protectedChars
argument_list|,
literal|0
argument_list|,
name|chars
operator|.
name|length
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|Word
argument_list|(
name|chars
argument_list|,
name|protectedChars
argument_list|)
argument_list|)
return|;
block|}
DECL|method|reset ()
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|wordStart
operator|=
operator|-
literal|1
expr_stmt|;
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
DECL|method|determineProtectedChars (String title)
specifier|private
specifier|static
name|boolean
index|[]
name|determineProtectedChars
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|boolean
index|[]
name|isProtected
init|=
operator|new
name|boolean
index|[
name|title
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|char
index|[]
name|chars
init|=
name|title
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|brakets
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|title
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|==
literal|'{'
condition|)
block|{
name|brakets
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|==
literal|'}'
condition|)
block|{
name|brakets
operator|--
expr_stmt|;
block|}
else|else
block|{
name|isProtected
index|[
name|i
index|]
operator|=
name|brakets
operator|>
literal|0
expr_stmt|;
block|}
block|}
return|return
name|isProtected
return|;
block|}
block|}
end_class

end_unit

