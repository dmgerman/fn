begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.formatter.casechanger
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Represents a word in a title of a bibtex entry.  *<p>  * A word can have protected chars (enclosed in '{' '}') and may be a small (a, an, the, ...) word.  */
end_comment

begin_class
DECL|class|Word
specifier|public
specifier|final
class|class
name|Word
block|{
DECL|field|SMALLER_WORDS
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SMALLER_WORDS
decl_stmt|;
static|static
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|smallerWords
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Articles
name|smallerWords
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"an"
argument_list|,
literal|"the"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Prepositions
name|smallerWords
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"above"
argument_list|,
literal|"about"
argument_list|,
literal|"across"
argument_list|,
literal|"against"
argument_list|,
literal|"along"
argument_list|,
literal|"among"
argument_list|,
literal|"around"
argument_list|,
literal|"at"
argument_list|,
literal|"before"
argument_list|,
literal|"behind"
argument_list|,
literal|"below"
argument_list|,
literal|"beneath"
argument_list|,
literal|"beside"
argument_list|,
literal|"between"
argument_list|,
literal|"beyond"
argument_list|,
literal|"by"
argument_list|,
literal|"down"
argument_list|,
literal|"during"
argument_list|,
literal|"except"
argument_list|,
literal|"for"
argument_list|,
literal|"from"
argument_list|,
literal|"in"
argument_list|,
literal|"inside"
argument_list|,
literal|"into"
argument_list|,
literal|"like"
argument_list|,
literal|"near"
argument_list|,
literal|"of"
argument_list|,
literal|"off"
argument_list|,
literal|"on"
argument_list|,
literal|"onto"
argument_list|,
literal|"since"
argument_list|,
literal|"to"
argument_list|,
literal|"toward"
argument_list|,
literal|"through"
argument_list|,
literal|"under"
argument_list|,
literal|"until"
argument_list|,
literal|"up"
argument_list|,
literal|"upon"
argument_list|,
literal|"with"
argument_list|,
literal|"within"
argument_list|,
literal|"without"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Conjunctions
name|smallerWords
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"and"
argument_list|,
literal|"but"
argument_list|,
literal|"for"
argument_list|,
literal|"nor"
argument_list|,
literal|"or"
argument_list|,
literal|"so"
argument_list|,
literal|"yet"
argument_list|)
argument_list|)
expr_stmt|;
comment|// unmodifiable for thread safety
name|SMALLER_WORDS
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|smallerWords
argument_list|)
expr_stmt|;
block|}
DECL|field|chars
specifier|private
specifier|final
name|char
index|[]
name|chars
decl_stmt|;
DECL|field|protectedChars
specifier|private
specifier|final
name|boolean
index|[]
name|protectedChars
decl_stmt|;
DECL|method|Word (char[] chars, boolean[] protectedChars)
specifier|public
name|Word
parameter_list|(
name|char
index|[]
name|chars
parameter_list|,
name|boolean
index|[]
name|protectedChars
parameter_list|)
block|{
name|this
operator|.
name|chars
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|chars
argument_list|)
expr_stmt|;
name|this
operator|.
name|protectedChars
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|protectedChars
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|chars
operator|.
name|length
operator|!=
name|this
operator|.
name|protectedChars
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"the chars and the protectedChars array must be of same length"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Only change letters of the word that are unprotected to upper case.      */
DECL|method|toUpperCase ()
specifier|public
name|void
name|toUpperCase
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|protectedChars
index|[
name|i
index|]
condition|)
block|{
continue|continue;
block|}
name|chars
index|[
name|i
index|]
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Only change letters of the word that are unprotected to lower case.      */
DECL|method|toLowerCase ()
specifier|public
name|void
name|toLowerCase
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|protectedChars
index|[
name|i
index|]
condition|)
block|{
continue|continue;
block|}
name|chars
index|[
name|i
index|]
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toUpperFirst ()
specifier|public
name|void
name|toUpperFirst
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|protectedChars
index|[
name|i
index|]
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|chars
index|[
name|i
index|]
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chars
index|[
name|i
index|]
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isSmallerWord ()
specifier|public
name|boolean
name|isSmallerWord
parameter_list|()
block|{
comment|// "word:" is still a small "word"
return|return
name|SMALLER_WORDS
operator|.
name|contains
argument_list|(
name|this
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isLargerWord ()
specifier|public
name|boolean
name|isLargerWord
parameter_list|()
block|{
return|return
operator|!
name|isSmallerWord
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|chars
argument_list|)
return|;
block|}
DECL|method|endsWithColon ()
specifier|public
name|boolean
name|endsWithColon
parameter_list|()
block|{
return|return
name|this
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|":"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

