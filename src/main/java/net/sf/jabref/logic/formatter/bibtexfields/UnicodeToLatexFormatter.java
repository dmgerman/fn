begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2016 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.formatter.bibtexfields
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|bibtexfields
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|HTMLUnicodeConversionMaps
import|;
end_import

begin_class
DECL|class|UnicodeToLatexFormatter
specifier|public
class|class
name|UnicodeToLatexFormatter
implements|implements
name|LayoutFormatter
implements|,
name|Formatter
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UnicodeToLatexFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|UnicodeToLatexFormatter ()
specifier|public
name|UnicodeToLatexFormatter
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|format (String text)
specifier|public
name|String
name|format
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|text
return|;
block|}
comment|// Standard symbols
name|Set
argument_list|<
name|Character
argument_list|>
name|chars
init|=
name|HTMLUnicodeConversionMaps
operator|.
name|UNICODE_LATEX_CONVERSION_MAP
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Character
name|character
range|:
name|chars
control|)
block|{
name|text
operator|=
name|text
operator|.
name|replaceAll
argument_list|(
name|character
operator|.
name|toString
argument_list|()
argument_list|,
name|HTMLUnicodeConversionMaps
operator|.
name|UNICODE_LATEX_CONVERSION_MAP
operator|.
name|get
argument_list|(
name|character
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Combining accents
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|consumed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
operator|(
name|text
operator|.
name|length
argument_list|()
operator|-
literal|2
operator|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|consumed
operator|&&
operator|(
name|i
operator|<
operator|(
name|text
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
operator|)
condition|)
block|{
name|int
name|cpCurrent
init|=
name|text
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|cpNext
init|=
name|text
operator|.
name|codePointAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|HTMLUnicodeConversionMaps
operator|.
name|ESCAPED_ACCENTS
operator|.
name|get
argument_list|(
name|cpNext
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|cpCurrent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"{\\"
operator|+
name|code
operator|+
literal|'{'
operator|+
operator|(
name|char
operator|)
name|cpCurrent
operator|+
literal|"}}"
argument_list|)
expr_stmt|;
name|consumed
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|consumed
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|consumed
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|text
operator|.
name|codePointAt
argument_list|(
name|text
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|text
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// Check if any symbols is not converted
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
operator|(
name|text
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cp
init|=
name|text
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|cp
operator|>=
literal|129
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Unicode character not converted: "
operator|+
name|cp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|text
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"UnicodeConverter"
return|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
literal|"UnicodeConverter"
return|;
block|}
block|}
end_class

end_unit

