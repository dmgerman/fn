begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.formatter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|CleanupJob
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Can be used to turn a formatter into a cleanup action.  */
end_comment

begin_class
DECL|class|CleanupFormatter
specifier|public
class|class
name|CleanupFormatter
implements|implements
name|CleanupJob
block|{
DECL|field|formatter
specifier|private
name|Formatter
name|formatter
decl_stmt|;
DECL|field|fieldKey
specifier|private
name|String
name|fieldKey
decl_stmt|;
DECL|method|CleanupFormatter (Formatter formatter, String fieldKey)
specifier|public
name|CleanupFormatter
parameter_list|(
name|Formatter
name|formatter
parameter_list|,
name|String
name|fieldKey
parameter_list|)
block|{
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
name|this
operator|.
name|fieldKey
operator|=
name|fieldKey
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cleanup (BibEntry entry)
specifier|public
name|List
argument_list|<
name|FieldChange
argument_list|>
name|cleanup
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|List
argument_list|<
name|FieldChange
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|fieldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fieldKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldValue
operator|!=
literal|null
condition|)
block|{
name|String
name|newValue
init|=
name|formatter
operator|.
name|format
argument_list|(
name|fieldValue
argument_list|)
decl_stmt|;
comment|//see if something has changed
if|if
condition|(
operator|!
name|fieldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|fieldKey
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|FieldChange
name|change
init|=
operator|new
name|FieldChange
argument_list|(
name|entry
argument_list|,
name|fieldKey
argument_list|,
name|fieldValue
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

