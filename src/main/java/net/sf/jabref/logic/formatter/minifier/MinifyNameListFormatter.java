begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.formatter.minifier
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|minifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_comment
comment|/**  * Replaces three or more authors with and others  */
end_comment

begin_class
DECL|class|MinifyNameListFormatter
specifier|public
class|class
name|MinifyNameListFormatter
implements|implements
name|Formatter
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Minify list of person names"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
literal|"minify_name_list"
return|;
block|}
comment|/**      * Replaces three or more authors with and others.      *      *<example>      *     Stefan Kolb -> Stefan Kolb      *     Stefan Kolb and Simon Harrer -> Stefan Kolb and Simon Harrer      *     Stefan Kolb and Simon Harrer and JÃ¶rg Lenhard -> Stefan Kolb and others      *</example>      */
annotation|@
name|Override
DECL|method|format (String value)
specifier|public
name|String
name|format
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// nothing to do
return|return
name|value
return|;
block|}
return|return
name|abbreviateAuthor
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Shortens lists of persons if there are more than 2 persons to \"et al.\"."
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getExampleInput ()
specifier|public
name|String
name|getExampleInput
parameter_list|()
block|{
return|return
literal|"Stefan Kolb and Simon Harrer and Oliver Kopp"
return|;
block|}
DECL|method|abbreviateAuthor (String authorField)
specifier|private
name|String
name|abbreviateAuthor
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
comment|// single author
name|String
name|authorSeparator
init|=
literal|" and "
decl_stmt|;
if|if
condition|(
operator|!
name|authorField
operator|.
name|contains
argument_list|(
name|authorSeparator
argument_list|)
condition|)
block|{
return|return
name|authorField
return|;
block|}
name|String
index|[]
name|authors
init|=
name|authorField
operator|.
name|split
argument_list|(
name|authorSeparator
argument_list|)
decl_stmt|;
comment|// trim authors
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|authors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|authors
index|[
name|i
index|]
operator|=
name|authors
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
comment|// already abbreviated
if|if
condition|(
literal|"others"
operator|.
name|equals
argument_list|(
name|authors
index|[
name|authors
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
operator|&&
operator|(
name|authors
operator|.
name|length
operator|==
literal|2
operator|)
condition|)
block|{
return|return
name|authorField
return|;
block|}
comment|// abbreviate
if|if
condition|(
name|authors
operator|.
name|length
operator|<
literal|3
condition|)
block|{
return|return
name|authorField
return|;
block|}
return|return
name|authors
index|[
literal|0
index|]
operator|+
name|authorSeparator
operator|+
literal|"others"
return|;
block|}
block|}
end_class

end_unit

