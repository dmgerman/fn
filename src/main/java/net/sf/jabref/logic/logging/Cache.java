begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.logging
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_comment
comment|/**  * Enables caching of messages  */
end_comment

begin_class
DECL|class|Cache
specifier|public
class|class
name|Cache
block|{
DECL|field|DEFAULT_CAPACITY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CAPACITY
init|=
literal|500
decl_stmt|;
DECL|field|capacity
specifier|private
specifier|final
name|int
name|capacity
decl_stmt|;
DECL|field|queue
specifier|private
specifier|final
name|Queue
argument_list|<
name|String
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|cache
specifier|private
name|String
name|cache
init|=
literal|""
decl_stmt|;
DECL|field|cacheRefreshNeeded
specifier|private
name|boolean
name|cacheRefreshNeeded
init|=
literal|true
decl_stmt|;
DECL|method|Cache ()
specifier|public
name|Cache
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_CAPACITY
argument_list|)
expr_stmt|;
block|}
DECL|method|Cache (int capacity)
specifier|public
name|Cache
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
specifier|synchronized
name|String
name|get
parameter_list|()
block|{
name|ensureCacheIsFresh
argument_list|()
expr_stmt|;
return|return
name|cache
return|;
block|}
DECL|method|ensureCacheIsFresh ()
specifier|private
name|void
name|ensureCacheIsFresh
parameter_list|()
block|{
if|if
condition|(
name|cacheRefreshNeeded
condition|)
block|{
name|cache
operator|=
name|String
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add (String message)
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCapacityExceeded
argument_list|()
condition|)
block|{
comment|// if we reached capacity, we switch to the "real" caching method and remove old lines
name|cacheRefreshNeeded
operator|=
literal|true
expr_stmt|;
name|truncateLog
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// if we did not yet reach capacity, we just append the string to the cache
comment|// cache is still up to date
name|cache
operator|=
name|cache
operator|+
name|message
expr_stmt|;
block|}
block|}
DECL|method|truncateLog ()
specifier|private
name|void
name|truncateLog
parameter_list|()
block|{
while|while
condition|(
name|isCapacityExceeded
argument_list|()
condition|)
block|{
comment|// if log is too large, remove first line
comment|// we need a while loop as the formatter may output more than one line
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isCapacityExceeded ()
specifier|private
name|boolean
name|isCapacityExceeded
parameter_list|()
block|{
return|return
name|queue
operator|.
name|size
argument_list|()
operator|>
name|capacity
return|;
block|}
block|}
end_class

end_unit

