begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.                   2003-2015 Ulrik Stervbo (ulriks AT ruc.dk)      This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.labelPattern
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|labelPattern
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
operator|.
name|Word
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|AuthorList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|exporter
operator|.
name|layout
operator|.
name|format
operator|.
name|RemoveLatexCommands
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * This is the utility class of the LabelPattern package.  */
end_comment

begin_class
DECL|class|LabelPatternUtil
specifier|public
class|class
name|LabelPatternUtil
block|{
comment|// All single characters that we can use for extending a key to make it unique:
DECL|field|CHARS
specifier|private
specifier|static
specifier|final
name|String
name|CHARS
init|=
literal|"abcdefghijklmnopqrstuvwxyz"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LabelPatternUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_LABELPATTERN
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|DEFAULT_LABELPATTERN
decl_stmt|;
static|static
block|{
name|LabelPatternUtil
operator|.
name|updateDefaultPattern
argument_list|()
expr_stmt|;
block|}
DECL|field|database
specifier|private
specifier|static
name|BibDatabase
name|database
decl_stmt|;
DECL|method|updateDefaultPattern ()
specifier|public
specifier|static
name|void
name|updateDefaultPattern
parameter_list|()
block|{
name|LabelPatternUtil
operator|.
name|DEFAULT_LABELPATTERN
operator|=
name|LabelPatternUtil
operator|.
name|split
argument_list|(
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_LABEL_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Required fro LabelPatternUtilTest      *      * @param db the DB to use as global database      */
DECL|method|setDataBase (BibDatabase db)
specifier|public
specifier|static
name|void
name|setDataBase
parameter_list|(
name|BibDatabase
name|db
parameter_list|)
block|{
name|LabelPatternUtil
operator|.
name|database
operator|=
name|db
expr_stmt|;
block|}
DECL|method|normalize (String content)
specifier|private
specifier|static
name|String
name|normalize
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|b
init|=
literal|0
decl_stmt|;
name|String
name|and
init|=
literal|""
decl_stmt|;
name|String
name|token
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|content
operator|.
name|length
argument_list|()
condition|;
name|p
operator|++
control|)
block|{
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|and
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|content
operator|.
name|charAt
argument_list|(
name|p
argument_list|)
operator|==
literal|' '
operator|)
operator|)
operator|||
operator|(
literal|" "
operator|.
name|equals
argument_list|(
name|and
argument_list|)
operator|&&
operator|(
name|content
operator|.
name|charAt
argument_list|(
name|p
argument_list|)
operator|==
literal|'a'
operator|)
operator|)
operator|||
operator|(
literal|" a"
operator|.
name|equals
argument_list|(
name|and
argument_list|)
operator|&&
operator|(
name|content
operator|.
name|charAt
argument_list|(
name|p
argument_list|)
operator|==
literal|'n'
operator|)
operator|)
operator|||
operator|(
literal|" an"
operator|.
name|equals
argument_list|(
name|and
argument_list|)
operator|&&
operator|(
name|content
operator|.
name|charAt
argument_list|(
name|p
argument_list|)
operator|==
literal|'d'
operator|)
operator|)
condition|)
block|{
name|and
operator|+=
name|content
operator|.
name|charAt
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|" and"
operator|.
name|equals
argument_list|(
name|and
argument_list|)
operator|&&
operator|(
name|content
operator|.
name|charAt
argument_list|(
name|p
argument_list|)
operator|==
literal|' '
operator|)
condition|)
block|{
name|and
operator|=
literal|""
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|token
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|content
operator|.
name|charAt
argument_list|(
name|p
argument_list|)
operator|==
literal|'{'
condition|)
block|{
name|b
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|content
operator|.
name|charAt
argument_list|(
name|p
argument_list|)
operator|==
literal|'}'
condition|)
block|{
name|b
operator|--
expr_stmt|;
block|}
name|token
operator|+=
name|and
expr_stmt|;
name|and
operator|=
literal|""
expr_stmt|;
name|token
operator|+=
name|content
operator|.
name|charAt
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|token
operator|+=
name|content
operator|.
name|charAt
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|tokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|StringBuilder
name|normalized
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|normalized
operator|.
name|append
argument_list|(
literal|" and "
argument_list|)
expr_stmt|;
block|}
name|normalized
operator|.
name|append
argument_list|(
name|LabelPatternUtil
operator|.
name|isInstitution
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|?
name|LabelPatternUtil
operator|.
name|generateInstitutionKey
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
else|:
name|LabelPatternUtil
operator|.
name|removeDiacritics
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|normalized
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Will remove diacritics from the content.      *      * Replaces umlaut: \"x with xe, e.g. \"o -> oe, \"u -> ue, etc.      * Removes all other diacritics: \?x -> x, e.g. \'a -> a, etc.      *      * @param content The content.      * @return The content without diacritics.      */
DECL|method|removeDiacritics (String content)
specifier|private
specifier|static
name|String
name|removeDiacritics
parameter_list|(
name|String
name|content
parameter_list|)
block|{
if|if
condition|(
name|content
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|content
return|;
block|}
comment|// Replace umaut with '?e'
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\{\\\\\"([a-zA-Z])\\}"
argument_list|,
literal|"$1e"
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\\\\"\\{([a-zA-Z])\\}"
argument_list|,
literal|"$1e"
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\\\\"([a-zA-Z])"
argument_list|,
literal|"$1e"
argument_list|)
expr_stmt|;
comment|// Remove diacritics
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\{\\\\.([a-zA-Z])\\}"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\\\.\\{([a-zA-Z])\\}"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\\\.([a-zA-Z])"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
return|return
name|content
return|;
block|}
comment|/**      * Unifies umlauts.      *      * Replaces: $\ddot{\mathrm{X}}$ (an alternative umlaut) with: {\"X}      * Replaces: \?{X} and \?X with {\?X}, where ? is a diacritic symbol      *      * @param content The content.      * @return The content with unified diacritics.      */
DECL|method|unifyDiacritics (String content)
specifier|private
specifier|static
name|String
name|unifyDiacritics
parameter_list|(
name|String
name|content
parameter_list|)
block|{
return|return
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\$\\\\ddot\\{\\\\mathrm\\{([^\\}])\\}\\}\\$"
argument_list|,
literal|"{\\\"$1}"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"(\\\\[^\\-a-zA-Z])\\{?([a-zA-Z])\\}?"
argument_list|,
literal|"{$1$2}"
argument_list|)
return|;
block|}
comment|/**      * Check if a value is institution.      *      * This is usable for distinguishing between persons and institutions in      * the author or editor fields.      *      * A person:      *   - "John Doe"      *   - "Doe, John"      *      * An institution:      *   - "{The Big Company or Institution Inc.}"      *   - "{The Big Company or Institution Inc. (BCI)}"      *      * @param author Author or editor.      * @return True if the author or editor is an institution.      */
DECL|method|isInstitution (String author)
specifier|private
specifier|static
name|boolean
name|isInstitution
parameter_list|(
name|String
name|author
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|author
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
operator|(
name|author
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'{'
operator|)
operator|&&
operator|(
name|author
operator|.
name|charAt
argument_list|(
name|author
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'}'
operator|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
comment|// In case of empty author
block|}
block|}
comment|/**      *<p>      * An author or editor may be and institution not a person. In that case the      * key generator builds very long keys, e.g.: for&ldquo;The Attributed      * Graph Grammar System (AGG)&rdquo; ->      *&ldquo;TheAttributedGraphGrammarSystemAGG&rdquo;.      *</p>      *      *<p>      * An institution name should be inside<code>{}</code> brackets. If the      * institution name also includes its abbreviation this abbreviation should      * be also in<code>{}</code> brackets. For the previous example the value      * should look like:      *<code>{The Attributed Graph Grammar System ({AGG})}</code>.      *</p>      *      *<p>      * If an institution includes its abbreviation, i.e. "...({XYZ})", first      * such abbreviation should be used as the key value part of such author.      *</p>      *      *<p>      * If an institution does not include its abbreviation the key should be      * generated form its name in the following way:      *</p>      *      *<p>      * The institution value can contain: institution name, part of the      * institution, address, etc. Those information should be separated by      * comma. Name of the institution and possible part of the institution      * should be on the beginning, while address and secondary information      * should be on the end.      *</p>      *      * Each part is examined separately:      *<ol>      *<li>We remove all tokens of a part which are one of the defined ignore      * words (the, press), which end with a dot (ltd., co., ...) and which first      * character is lowercase (of, on, di, ...).</li>      *<li>We detect a type of the part: university, technology institute,      * department, school, rest      *<ul>      *<li>University:<code>"Uni[NameOfTheUniversity]"</code></li>      *<li>Department: will be an abbreviation of all words beginning with the      * uppercase letter except of words:<code>d[ei]part.*</code>, school,      * faculty</li>      *<li>School: same as department</li>      *<li>Rest: If there are less than 3 tokens in such part than the result      * will be by concatenating those tokens, otherwise the result will be build      * from the first letters of words starting with and uppercase letter.</li>      *</ul>      *</ol>      *      * Parts are concatenated together in the following way:      *<ul>      *<li>If there is a university part use it otherwise use the rest part.</li>      *<li>If there is a school part append it.</li>      *<li>If there is a department part and it is not same as school part      * append it.</li>      *</ul>      *      * Rest part is only the first part which do not match any other type. All      * other parts (address, ...) are ignored.      *      * @param content the institution to generate a Bibtex key for      * @return<ul>      *<li>the institution key</li>      *<li>"" in the case of a failure</li>      *<li>null if content is null</li>      *</ul>      */
DECL|method|generateInstitutionKey (String content)
specifier|private
specifier|static
name|String
name|generateInstitutionKey
parameter_list|(
name|String
name|content
parameter_list|)
block|{
if|if
condition|(
name|content
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|content
return|;
block|}
name|content
operator|=
name|LabelPatternUtil
operator|.
name|unifyDiacritics
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ignore
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"press"
argument_list|,
literal|"the"
argument_list|)
decl_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"^\\{"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\}$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Pattern
name|regex
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*\\(\\{([A-Z]+)\\}\\).*"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|regex
operator|.
name|matcher
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|content
operator|=
name|LabelPatternUtil
operator|.
name|removeDiacritics
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|content
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
comment|// Key parts
name|String
name|university
init|=
literal|null
decl_stmt|;
name|String
name|department
init|=
literal|null
decl_stmt|;
name|String
name|school
init|=
literal|null
decl_stmt|;
name|String
name|rest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|parts
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|part
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Cleanup: remove unnecessary words.
for|for
control|(
name|String
name|k
range|:
name|parts
index|[
name|index
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\{[A-Z]+\\}"
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|"[ \\-_]"
argument_list|)
control|)
block|{
if|if
condition|(
operator|(
operator|!
operator|(
name|k
operator|.
name|isEmpty
argument_list|()
operator|)
comment|// remove empty
operator|&&
operator|!
name|ignore
operator|.
name|contains
argument_list|(
name|k
operator|.
name|toLowerCase
argument_list|()
argument_list|)
comment|// remove ignored words
operator|&&
operator|(
name|k
operator|.
name|charAt
argument_list|(
name|k
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'.'
operator|)
operator|&&
operator|(
name|String
operator|.
name|valueOf
argument_list|(
name|k
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|.
name|matches
argument_list|(
literal|"[A-Z]"
argument_list|)
operator|)
operator|||
operator|(
operator|(
name|k
operator|.
name|length
argument_list|()
operator|>=
literal|3
operator|)
operator|&&
literal|"uni"
operator|.
name|equals
argument_list|(
name|k
operator|.
name|toLowerCase
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|part
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|isUniversity
init|=
literal|false
decl_stmt|;
comment|// university
name|boolean
name|isTechnology
init|=
literal|false
decl_stmt|;
comment|// technology institute
name|boolean
name|isDepartment
init|=
literal|false
decl_stmt|;
comment|// departments
name|boolean
name|isSchool
init|=
literal|false
decl_stmt|;
comment|// schools
comment|// Deciding about a part type...
for|for
control|(
name|String
name|k
range|:
name|part
control|)
block|{
if|if
condition|(
operator|(
name|k
operator|.
name|length
argument_list|()
operator|>=
literal|5
operator|)
operator|&&
literal|"univ"
operator|.
name|equals
argument_list|(
name|k
operator|.
name|toLowerCase
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
condition|)
block|{
name|isUniversity
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|k
operator|.
name|length
argument_list|()
operator|>=
literal|6
operator|)
operator|&&
literal|"techn"
operator|.
name|equals
argument_list|(
name|k
operator|.
name|toLowerCase
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|)
condition|)
block|{
name|isTechnology
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
literal|"school"
operator|.
name|equals
argument_list|(
name|k
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|isSchool
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|k
operator|.
name|length
argument_list|()
operator|>=
literal|7
operator|)
operator|&&
name|k
operator|.
name|toLowerCase
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
operator|.
name|matches
argument_list|(
literal|"d[ei]part"
argument_list|)
operator|)
operator|||
operator|(
operator|(
name|k
operator|.
name|length
argument_list|()
operator|>=
literal|4
operator|)
operator|&&
literal|"lab"
operator|.
name|equals
argument_list|(
name|k
operator|.
name|toLowerCase
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|isDepartment
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isTechnology
condition|)
block|{
name|isUniversity
operator|=
literal|false
expr_stmt|;
comment|// technology institute isn't university :-)
block|}
comment|// University part looks like: Uni[NameOfTheUniversity]
comment|//
comment|// If university is detected than the previous part is suggested
comment|// as department
if|if
condition|(
name|isUniversity
condition|)
block|{
name|StringBuilder
name|universitySB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|universitySB
operator|.
name|append
argument_list|(
literal|"Uni"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|k
range|:
name|part
control|)
block|{
if|if
condition|(
operator|(
name|k
operator|.
name|length
argument_list|()
operator|>=
literal|5
operator|)
operator|&&
operator|!
literal|"univ"
operator|.
name|equals
argument_list|(
name|k
operator|.
name|toLowerCase
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
condition|)
block|{
name|universitySB
operator|.
name|append
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
name|university
operator|=
name|universitySB
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|index
operator|>
literal|0
operator|)
operator|&&
operator|(
name|department
operator|==
literal|null
operator|)
condition|)
block|{
name|department
operator|=
name|parts
index|[
name|index
operator|-
literal|1
index|]
expr_stmt|;
block|}
comment|// School is an abbreviation of all the words beginning with a
comment|// capital letter excluding: department, school and faculty words.
comment|//
comment|// Explicitly defined department part is build the same way as
comment|// school
block|}
elseif|else
if|if
condition|(
name|isSchool
operator|||
name|isDepartment
condition|)
block|{
name|StringBuilder
name|schoolSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|departmentSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
name|part
control|)
block|{
if|if
condition|(
operator|(
name|k
operator|.
name|length
argument_list|()
operator|>=
literal|7
operator|)
operator|&&
operator|!
name|k
operator|.
name|toLowerCase
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
operator|.
name|matches
argument_list|(
literal|"d[ei]part"
argument_list|)
operator|&&
operator|!
literal|"school"
operator|.
name|equals
argument_list|(
name|k
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|&&
operator|!
literal|"faculty"
operator|.
name|equals
argument_list|(
name|k
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|k
operator|.
name|replaceAll
argument_list|(
literal|"[^A-Z]"
argument_list|,
literal|""
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|isSchool
condition|)
block|{
name|schoolSB
operator|.
name|append
argument_list|(
name|k
operator|.
name|replaceAll
argument_list|(
literal|"[^A-Z]"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isDepartment
condition|)
block|{
name|departmentSB
operator|.
name|append
argument_list|(
name|k
operator|.
name|replaceAll
argument_list|(
literal|"[^A-Z]"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isSchool
condition|)
block|{
name|school
operator|=
name|schoolSB
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isDepartment
condition|)
block|{
name|department
operator|=
name|departmentSB
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// A part not matching university, department nor school.
block|}
elseif|else
if|if
condition|(
name|rest
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|restSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Less than 3 parts -> concatenate those
if|if
condition|(
name|part
operator|.
name|size
argument_list|()
operator|<
literal|3
condition|)
block|{
for|for
control|(
name|String
name|k
range|:
name|part
control|)
block|{
name|restSB
operator|.
name|append
argument_list|(
name|k
argument_list|)
expr_stmt|;
comment|// More than 3 parts -> use 1st letter abbreviation
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|k
range|:
name|part
control|)
block|{
name|k
operator|=
name|k
operator|.
name|replaceAll
argument_list|(
literal|"[^A-Z]"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|k
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|restSB
operator|.
name|append
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rest
operator|=
name|restSB
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Putting parts together.
return|return
operator|(
name|university
operator|==
literal|null
condition|?
name|rest
else|:
name|university
operator|)
operator|+
operator|(
name|school
operator|==
literal|null
condition|?
literal|""
else|:
name|school
operator|)
operator|+
operator|(
operator|(
name|department
operator|==
literal|null
operator|)
operator|||
operator|(
operator|(
name|school
operator|!=
literal|null
operator|)
operator|&&
name|department
operator|.
name|equals
argument_list|(
name|school
argument_list|)
operator|)
condition|?
literal|""
else|:
name|department
operator|)
return|;
block|}
comment|/**      * This method takes a string of the form [field1]spacer[field2]spacer[field3]...,      * where the fields are the (required) fields of a BibTex entry. The string is split      * into fields and spacers by recognizing the [ and ].      *      * @param labelPattern a<code>String</code>      * @return an<code>ArrayList</code> The first item of the list      * is a string representation of the key pattern (the parameter),      * the remaining items are the fields      */
DECL|method|split (String labelPattern)
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|split
parameter_list|(
name|String
name|labelPattern
parameter_list|)
block|{
comment|// A holder for fields of the entry to be used for the key
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Before we do anything, we add the parameter to the ArrayLIst
name|fieldList
operator|.
name|add
argument_list|(
name|labelPattern
argument_list|)
expr_stmt|;
comment|//String[] ss = labelPattern.split("\\[|\\]");
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|labelPattern
argument_list|,
literal|"[]"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|fieldList
operator|.
name|add
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldList
return|;
block|}
comment|/**      * Generates a BibTeX label according to the pattern for a given entry type, and saves the unique label in the      *<code>Bibtexentry</code>.      *      * The given database is used to avoid duplicate keys.      *      * @param dBase a<code>BibDatabase</code>      * @param entry a<code>BibEntry</code>      * @return modified Bibtexentry      */
DECL|method|makeLabel (MetaData metaData, BibDatabase dBase, BibEntry entry)
specifier|public
specifier|static
name|void
name|makeLabel
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|BibDatabase
name|dBase
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
block|{
name|LabelPatternUtil
operator|.
name|database
operator|=
name|dBase
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|typeList
decl_stmt|;
name|String
name|key
decl_stmt|;
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|forceUpper
init|=
literal|false
decl_stmt|;
name|boolean
name|forceLower
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// get the type of entry
name|String
name|entryType
init|=
name|entry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// Get the arrayList corresponding to the type
name|typeList
operator|=
name|metaData
operator|.
name|getLabelPattern
argument_list|()
operator|.
name|getValue
argument_list|(
name|entryType
argument_list|)
expr_stmt|;
name|int
name|typeListSize
init|=
name|typeList
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|field
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|typeListSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|typeListEntry
init|=
name|typeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"["
operator|.
name|equals
argument_list|(
name|typeListEntry
argument_list|)
condition|)
block|{
name|field
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"]"
operator|.
name|equals
argument_list|(
name|typeListEntry
argument_list|)
condition|)
block|{
name|field
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
condition|)
block|{
comment|// check whether there is a modifier on the end such as
comment|// ":lower"
comment|// String modifier = null;
name|String
index|[]
name|parts
init|=
name|LabelPatternUtil
operator|.
name|parseFieldMarker
argument_list|(
name|typeListEntry
argument_list|)
decl_stmt|;
comment|//val.split(":");
name|String
name|label
init|=
name|LabelPatternUtil
operator|.
name|makeLabel
argument_list|(
name|entry
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// apply modifier if present
if|if
condition|(
name|parts
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|label
operator|=
name|LabelPatternUtil
operator|.
name|applyModifiers
argument_list|(
name|label
argument_list|,
name|parts
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|stringBuilder
operator|.
name|append
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|typeListEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Cannot make label"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Remove all illegal characters from the key.
name|key
operator|=
name|Util
operator|.
name|checkLegalKey
argument_list|(
name|stringBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove Regular Expressions while generating Keys
name|String
name|regex
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_PATTERN_REGEX
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|regex
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|regex
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|replacement
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_PATTERN_REPLACEMENT
argument_list|)
decl_stmt|;
name|key
operator|=
name|key
operator|.
name|replaceAll
argument_list|(
name|regex
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|forceUpper
condition|)
block|{
name|key
operator|=
name|key
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|forceLower
condition|)
block|{
name|key
operator|=
name|key
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|String
name|oldKey
init|=
name|entry
operator|.
name|getCiteKey
argument_list|()
decl_stmt|;
name|int
name|occurrences
init|=
name|LabelPatternUtil
operator|.
name|database
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|oldKey
operator|!=
literal|null
operator|)
operator|&&
name|oldKey
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|occurrences
operator|--
expr_stmt|;
comment|// No change, so we can accept one dupe.
block|}
name|boolean
name|alwaysAddLetter
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_GEN_ALWAYS_ADD_LETTER
argument_list|)
decl_stmt|;
name|boolean
name|firstLetterA
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_GEN_FIRST_LETTER_A
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|alwaysAddLetter
operator|&&
operator|(
name|occurrences
operator|==
literal|0
operator|)
condition|)
block|{
comment|// No dupes found, so we can just go ahead.
if|if
condition|(
operator|!
name|key
operator|.
name|equals
argument_list|(
name|oldKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|LabelPatternUtil
operator|.
name|database
operator|.
name|getEntryById
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// entry does not (yet) exist in the database, just update the entry
name|entry
operator|.
name|setField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LabelPatternUtil
operator|.
name|database
operator|.
name|setCiteKeyForEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// The key is already in use, so we must modify it.
name|int
name|number
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|alwaysAddLetter
operator|&&
operator|!
name|firstLetterA
condition|)
block|{
name|number
operator|=
literal|1
expr_stmt|;
block|}
name|String
name|moddedKey
init|=
name|key
operator|+
name|LabelPatternUtil
operator|.
name|getAddition
argument_list|(
name|number
argument_list|)
decl_stmt|;
name|occurrences
operator|=
name|LabelPatternUtil
operator|.
name|database
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
name|moddedKey
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|oldKey
operator|!=
literal|null
operator|)
operator|&&
name|oldKey
operator|.
name|equals
argument_list|(
name|moddedKey
argument_list|)
condition|)
block|{
name|occurrences
operator|--
expr_stmt|;
block|}
while|while
condition|(
name|occurrences
operator|>
literal|0
condition|)
block|{
name|number
operator|++
expr_stmt|;
name|moddedKey
operator|=
name|key
operator|+
name|LabelPatternUtil
operator|.
name|getAddition
argument_list|(
name|number
argument_list|)
expr_stmt|;
name|occurrences
operator|=
name|LabelPatternUtil
operator|.
name|database
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
name|moddedKey
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|oldKey
operator|!=
literal|null
operator|)
operator|&&
name|oldKey
operator|.
name|equals
argument_list|(
name|moddedKey
argument_list|)
condition|)
block|{
name|occurrences
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|moddedKey
operator|.
name|equals
argument_list|(
name|oldKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|LabelPatternUtil
operator|.
name|database
operator|.
name|getEntryById
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// entry does not (yet) exist in the database, just update the entry
name|entry
operator|.
name|setField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
name|moddedKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LabelPatternUtil
operator|.
name|database
operator|.
name|setCiteKeyForEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|moddedKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Applies modifiers to a label generated based on a field marker.      * @param label The generated label.      * @param parts String array containing the modifiers.      * @param offset The number of initial items in the modifiers array to skip.      * @return The modified label.      */
DECL|method|applyModifiers (String label, String[] parts, int offset)
specifier|public
specifier|static
name|String
name|applyModifiers
parameter_list|(
name|String
name|label
parameter_list|,
name|String
index|[]
name|parts
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|parts
operator|.
name|length
operator|>
name|offset
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|offset
init|;
name|j
operator|<
name|parts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|modifier
init|=
name|parts
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
literal|"lower"
operator|.
name|equals
argument_list|(
name|modifier
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"upper"
operator|.
name|equals
argument_list|(
name|modifier
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"abbr"
operator|.
name|equals
argument_list|(
name|modifier
argument_list|)
condition|)
block|{
comment|// Abbreviate - that is,
name|StringBuilder
name|abbreviateSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
index|[]
name|words
init|=
name|label
operator|.
name|replaceAll
argument_list|(
literal|"[\\{\\}']"
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|"[\\(\\) \r\n\"]"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|word1
range|:
name|words
control|)
block|{
if|if
condition|(
operator|!
name|word1
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|abbreviateSB
operator|.
name|append
argument_list|(
name|word1
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|label
operator|=
name|abbreviateSB
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|modifier
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
operator|&&
name|modifier
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
comment|// Alternate text modifier in parentheses. Should be inserted if
comment|// the label is empty:
if|if
condition|(
name|label
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|modifier
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|)
condition|)
block|{
return|return
name|modifier
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|modifier
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Key generator warning: unknown modifier '"
operator|+
name|modifier
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|label
return|;
block|}
DECL|method|makeLabel (BibEntry entry, String val)
specifier|public
specifier|static
name|String
name|makeLabel
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|String
name|val
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|val
operator|.
name|startsWith
argument_list|(
literal|"auth"
argument_list|)
operator|||
name|val
operator|.
name|startsWith
argument_list|(
literal|"pureauth"
argument_list|)
condition|)
block|{
comment|/*                  * For label code "auth...": if there is no author, but there                  * are editor(s) (e.g. for an Edited Book), use the editor(s)                  * instead. (saw27@mrao.cam.ac.uk). This is what most people                  * want, but in case somebody really needs a field which expands                  * to nothing if there is no author (e.g. someone who uses both                  * "auth" and "ed" in the same label), we provide an alternative                  * form "pureauth..." which does not do this fallback                  * substitution of editor.                  */
name|String
name|authString
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
if|if
condition|(
name|authString
operator|!=
literal|null
condition|)
block|{
name|authString
operator|=
name|LabelPatternUtil
operator|.
name|normalize
argument_list|(
name|LabelPatternUtil
operator|.
name|database
operator|.
name|resolveForStrings
argument_list|(
name|authString
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|.
name|startsWith
argument_list|(
literal|"pure"
argument_list|)
condition|)
block|{
comment|// remove the "pure" prefix so the remaining
comment|// code in this section functions correctly
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|authString
operator|==
literal|null
operator|)
operator|||
name|authString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|authString
operator|=
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
expr_stmt|;
if|if
condition|(
name|authString
operator|!=
literal|null
condition|)
block|{
name|authString
operator|=
name|LabelPatternUtil
operator|.
name|normalize
argument_list|(
name|LabelPatternUtil
operator|.
name|database
operator|.
name|resolveForStrings
argument_list|(
name|authString
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authString
operator|=
literal|""
expr_stmt|;
block|}
block|}
comment|// Gather all author-related checks, so we don't
comment|// have to check all the time.
if|if
condition|(
literal|"auth"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|firstAuthor
argument_list|(
name|authString
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"authForeIni"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|firstAuthorForenameInitials
argument_list|(
name|authString
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"authFirstFull"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|firstAuthorVonAndLast
argument_list|(
name|authString
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"authors"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|allAuthors
argument_list|(
name|authString
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"authorsAlpha"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|authorsAlpha
argument_list|(
name|authString
argument_list|)
return|;
block|}
comment|// Last author's last name
elseif|else
if|if
condition|(
literal|"authorLast"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|lastAuthor
argument_list|(
name|authString
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"authorLastForeIni"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|lastAuthorForenameInitials
argument_list|(
name|authString
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"authorIni"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|oneAuthorPlusIni
argument_list|(
name|authString
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"authIni[\\d]+"
argument_list|)
condition|)
block|{
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|LabelPatternUtil
operator|.
name|authIniN
argument_list|(
name|authString
argument_list|,
name|num
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
literal|"auth.auth.ea"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|LabelPatternUtil
operator|.
name|authAuthEa
argument_list|(
name|authString
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
literal|"auth.etal"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|LabelPatternUtil
operator|.
name|authEtal
argument_list|(
name|authString
argument_list|,
literal|"."
argument_list|,
literal|".etal"
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
literal|"authEtAl"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|LabelPatternUtil
operator|.
name|authEtal
argument_list|(
name|authString
argument_list|,
literal|""
argument_list|,
literal|"EtAl"
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
literal|"authshort"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|LabelPatternUtil
operator|.
name|authshort
argument_list|(
name|authString
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"auth[\\d]+_[\\d]+"
argument_list|)
condition|)
block|{
name|String
index|[]
name|nums
init|=
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|LabelPatternUtil
operator|.
name|authN_M
argument_list|(
name|authString
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"auth\\d+"
argument_list|)
condition|)
block|{
comment|// authN. First N chars of the first author's last
comment|// name.
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fa
init|=
name|LabelPatternUtil
operator|.
name|firstAuthor
argument_list|(
name|authString
argument_list|)
decl_stmt|;
if|if
condition|(
name|fa
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|num
operator|>
name|fa
operator|.
name|length
argument_list|()
condition|)
block|{
name|num
operator|=
name|fa
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|fa
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|num
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"authors\\d+"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|LabelPatternUtil
operator|.
name|NAuthors
argument_list|(
name|authString
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
else|else
block|{
comment|// This "auth" business was a dead end, so just
comment|// use it literally:
return|return
name|LabelPatternUtil
operator|.
name|getField
argument_list|(
name|entry
argument_list|,
name|val
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|startsWith
argument_list|(
literal|"ed"
argument_list|)
condition|)
block|{
comment|// Gather all markers starting with "ed" here, so we
comment|// don't have to check all the time.
if|if
condition|(
literal|"edtr"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|firstAuthor
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"edtrForeIni"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|firstAuthorForenameInitials
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"editors"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|allAuthors
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|)
return|;
comment|// Last author's last name
block|}
elseif|else
if|if
condition|(
literal|"editorLast"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|lastAuthor
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"editorLastForeIni"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|lastAuthorForenameInitials
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"editorIni"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|oneAuthorPlusIni
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"edtrIni[\\d]+"
argument_list|)
condition|)
block|{
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|LabelPatternUtil
operator|.
name|authIniN
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|,
name|num
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"edtr[\\d]+_[\\d]+"
argument_list|)
condition|)
block|{
name|String
index|[]
name|nums
init|=
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|LabelPatternUtil
operator|.
name|authN_M
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|nums
index|[
literal|1
index|]
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
literal|"edtr.edtr.ea"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|LabelPatternUtil
operator|.
name|authAuthEa
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
elseif|else
if|if
condition|(
literal|"edtrshort"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|LabelPatternUtil
operator|.
name|authshort
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
comment|// authN. First N chars of the first author's last
comment|// name.
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"edtr\\d+"
argument_list|)
condition|)
block|{
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fa
init|=
name|LabelPatternUtil
operator|.
name|firstAuthor
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"editor"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fa
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|num
operator|>
name|fa
operator|.
name|length
argument_list|()
condition|)
block|{
name|num
operator|=
name|fa
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|fa
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|num
argument_list|)
return|;
block|}
else|else
block|{
comment|// This "ed" business was a dead end, so just
comment|// use it literally:
return|return
name|LabelPatternUtil
operator|.
name|getField
argument_list|(
name|entry
argument_list|,
name|val
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"firstpage"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|firstPage
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"lastpage"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|lastPage
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"shorttitle"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|getTitleWords
argument_list|(
literal|3
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"veryshorttitle"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|LabelPatternUtil
operator|.
name|getTitleWords
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"shortyear"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|String
name|ss
init|=
name|entry
operator|.
name|getFieldOrAlias
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|startsWith
argument_list|(
literal|"in"
argument_list|)
operator|||
name|ss
operator|.
name|startsWith
argument_list|(
literal|"sub"
argument_list|)
condition|)
block|{
return|return
literal|"IP"
return|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
return|return
name|ss
operator|.
name|substring
argument_list|(
name|ss
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ss
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"keyword\\d+"
argument_list|)
condition|)
block|{
comment|// according to LabelPattern.php, it returns keyword number n
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|separatedKeywords
init|=
name|entry
operator|.
name|getSeparatedKeywords
argument_list|()
decl_stmt|;
if|if
condition|(
name|separatedKeywords
operator|.
name|size
argument_list|()
operator|<
name|num
condition|)
block|{
comment|// not enough keywords
return|return
literal|""
return|;
block|}
else|else
block|{
comment|// num counts from 1 to n, but index in arrayList count from 0 to n-1
return|return
name|separatedKeywords
operator|.
name|get
argument_list|(
name|num
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|matches
argument_list|(
literal|"keywords\\d*"
argument_list|)
condition|)
block|{
comment|// return all keywords, not separated
name|int
name|num
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|length
argument_list|()
operator|>
literal|8
condition|)
block|{
name|num
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|num
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|separatedKeywords
init|=
name|entry
operator|.
name|getSeparatedKeywords
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|separatedKeywords
operator|.
name|size
argument_list|()
argument_list|,
name|num
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|String
name|keyword
init|=
name|separatedKeywords
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// remove all spaces
name|keyword
operator|=
name|keyword
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
comment|// we haven't seen any special demands
return|return
name|LabelPatternUtil
operator|.
name|getField
argument_list|(
name|entry
argument_list|,
name|val
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
comment|/**      * Look up a field of a BibEntry, returning its String value, or an      * empty string if it isn't set.      * @param entry The entry.      * @param field The field to look up.      * @return The field value.      */
DECL|method|getField (BibEntry entry, String field)
specifier|private
specifier|static
name|String
name|getField
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|String
name|s
init|=
name|entry
operator|.
name|getFieldOrAlias
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
return|;
block|}
comment|/**      * Computes an appendix to a BibTeX key that could make it unique. We use      * a-z for numbers 0-25, and then aa-az, ba-bz, etc.      *      * @param number      *            The appendix number.      * @return The String to append.      */
DECL|method|getAddition (int number)
specifier|private
specifier|static
name|String
name|getAddition
parameter_list|(
name|int
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>=
name|LabelPatternUtil
operator|.
name|CHARS
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|lastChar
init|=
name|number
operator|%
name|LabelPatternUtil
operator|.
name|CHARS
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|LabelPatternUtil
operator|.
name|getAddition
argument_list|(
operator|(
name|number
operator|/
name|LabelPatternUtil
operator|.
name|CHARS
operator|.
name|length
argument_list|()
operator|)
operator|-
literal|1
argument_list|)
operator|+
name|LabelPatternUtil
operator|.
name|CHARS
operator|.
name|substring
argument_list|(
name|lastChar
argument_list|,
name|lastChar
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|LabelPatternUtil
operator|.
name|CHARS
operator|.
name|substring
argument_list|(
name|number
argument_list|,
name|number
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
comment|/**      * Determines "number" words out of the "title" field in the given BibTeX entry      */
DECL|method|getTitleWords (int number, String title)
specifier|static
name|String
name|getTitleWords
parameter_list|(
name|int
name|number
parameter_list|,
name|String
name|title
parameter_list|)
block|{
name|String
name|ss
init|=
operator|new
name|RemoveLatexCommands
argument_list|()
operator|.
name|format
argument_list|(
name|title
argument_list|)
decl_stmt|;
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|current
decl_stmt|;
name|int
name|piv
init|=
literal|0
decl_stmt|;
name|int
name|words
init|=
literal|0
decl_stmt|;
comment|// sorry for being English-centric. I guess these
comment|// words should really be an editable preference.
name|mainl
label|:
while|while
condition|(
operator|(
name|piv
operator|<
name|ss
operator|.
name|length
argument_list|()
operator|)
operator|&&
operator|(
name|words
operator|<
name|number
operator|)
condition|)
block|{
name|current
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
comment|// Get the next word:
while|while
condition|(
operator|(
name|piv
operator|<
name|ss
operator|.
name|length
argument_list|()
operator|)
operator|&&
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|ss
operator|.
name|charAt
argument_list|(
name|piv
argument_list|)
argument_list|)
operator|&&
operator|(
name|ss
operator|.
name|charAt
argument_list|(
name|piv
argument_list|)
operator|!=
literal|'-'
operator|)
condition|)
block|{
name|current
operator|.
name|append
argument_list|(
name|ss
operator|.
name|charAt
argument_list|(
name|piv
argument_list|)
argument_list|)
expr_stmt|;
name|piv
operator|++
expr_stmt|;
block|}
name|piv
operator|++
expr_stmt|;
comment|// Check if it is ok:
name|String
name|word
init|=
name|current
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|word
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|String
name|smallWord
range|:
name|Word
operator|.
name|SMALLER_WORDS
control|)
block|{
if|if
condition|(
name|word
operator|.
name|equalsIgnoreCase
argument_list|(
name|smallWord
argument_list|)
condition|)
block|{
continue|continue
name|mainl
continue|;
block|}
block|}
comment|// If we get here, the word was accepted.
if|if
condition|(
name|stringBuilder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|stringBuilder
operator|.
name|append
argument_list|(
name|word
argument_list|)
expr_stmt|;
name|words
operator|++
expr_stmt|;
block|}
return|return
name|LabelPatternUtil
operator|.
name|keepLettersAndDigitsOnly
argument_list|(
name|stringBuilder
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|keepLettersAndDigitsOnly (String in)
specifier|private
specifier|static
name|String
name|keepLettersAndDigitsOnly
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Gets the last name of the first author/editor      *      * @param authorField      *            a<code>String</code>      * @return the surname of an author/editor or "" if no author was found      *    This method is guaranteed to never return null.      *      * @throws NullPointerException      *             if authorField == null      */
DECL|method|firstAuthor (String authorField)
specifier|static
name|String
name|firstAuthor
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|AuthorList
name|authorList
init|=
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|authorField
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|s
init|=
name|authorList
operator|.
name|getAuthor
argument_list|(
literal|0
argument_list|)
operator|.
name|getLast
argument_list|()
decl_stmt|;
return|return
name|s
operator|!=
literal|null
condition|?
name|s
else|:
literal|""
return|;
block|}
comment|/**      * Gets the first name initials of the first author/editor      *      * @param authorField      *            a<code>String</code>      * @return the first name initial of an author/editor or "" if no author was found      *    This method is guaranteed to never return null.      *      * @throws NullPointerException      *             if authorField == null      */
DECL|method|firstAuthorForenameInitials (String authorField)
specifier|static
name|String
name|firstAuthorForenameInitials
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|AuthorList
name|authorList
init|=
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|authorField
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|s
init|=
name|authorList
operator|.
name|getAuthor
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstAbbr
argument_list|()
decl_stmt|;
return|return
name|s
operator|!=
literal|null
condition|?
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
else|:
literal|""
return|;
block|}
comment|/**      * Gets the von part and the last name of the first author/editor      * No spaces are returned      *      * @param authorField      *            a<code>String</code>      * @return the von part and surname of an author/editor or "" if no author was found.      *  This method is guaranteed to never return null.      *      * @throws NullPointerException      *             if authorField == null      */
DECL|method|firstAuthorVonAndLast (String authorField)
specifier|static
name|String
name|firstAuthorVonAndLast
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|AuthorList
name|authorList
init|=
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|authorField
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|vonAuthor
init|=
name|authorList
operator|.
name|getAuthor
argument_list|(
literal|0
argument_list|)
operator|.
name|getVon
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|vonAuthor
operator|!=
literal|null
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|vonAuthor
argument_list|)
expr_stmt|;
block|}
name|vonAuthor
operator|=
name|authorList
operator|.
name|getAuthor
argument_list|(
literal|0
argument_list|)
operator|.
name|getLast
argument_list|()
expr_stmt|;
if|if
condition|(
name|vonAuthor
operator|!=
literal|null
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|vonAuthor
argument_list|)
expr_stmt|;
block|}
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Gets the last name of the last author/editor      * @param authorField a<code>String</code>      * @return the surname of an author/editor      */
DECL|method|lastAuthor (String authorField)
specifier|static
name|String
name|lastAuthor
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|String
index|[]
name|tokens
init|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\s+\\band\\b\\s+"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|lastAuthor
init|=
name|tokens
index|[
name|tokens
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
return|return
name|lastAuthor
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
comment|// if author is empty
return|return
literal|""
return|;
block|}
block|}
comment|/**      * Gets the forename initials of the last author/editor      *      * @param authorField      *            a<code>String</code>      * @return the forename initial of an author/editor or "" if no author was found      *    This method is guaranteed to never return null.      *      * @throws NullPointerException      *             if authorField == null      */
DECL|method|lastAuthorForenameInitials (String authorField)
specifier|static
name|String
name|lastAuthorForenameInitials
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|AuthorList
name|authorList
init|=
name|AuthorList
operator|.
name|getAuthorList
argument_list|(
name|authorField
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|s
init|=
name|authorList
operator|.
name|getAuthor
argument_list|(
name|authorList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getFirstAbbr
argument_list|()
decl_stmt|;
return|return
name|s
operator|!=
literal|null
condition|?
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
else|:
literal|""
return|;
block|}
comment|/**      * Gets the last name of all authors/editors      * @param authorField a<code>String</code>      * @return the sur name of all authors/editors      */
DECL|method|allAuthors (String authorField)
specifier|static
name|String
name|allAuthors
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
comment|// Quick hack to use NAuthors to avoid code duplication
return|return
name|NAuthors
argument_list|(
name|authorField
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**      * Returns the authors according to the BibTeX-alpha-Style      * @param authorField string containing the value of the author field      * @return the initials of all authornames      */
DECL|method|authorsAlpha (String authorField)
specifier|static
name|String
name|authorsAlpha
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|String
name|authors
init|=
literal|""
decl_stmt|;
name|String
name|fixedAuthors
init|=
name|AuthorList
operator|.
name|fixAuthor_lastNameOnlyCommas
argument_list|(
name|authorField
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// drop the "and" before the last author
comment|// -> makes processing easier
name|fixedAuthors
operator|=
name|fixedAuthors
operator|.
name|replace
argument_list|(
literal|" and "
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
name|String
index|[]
name|tokens
init|=
name|fixedAuthors
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|tokens
operator|.
name|length
operator|>
literal|4
condition|?
literal|3
else|:
name|tokens
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|max
operator|==
literal|1
condition|)
block|{
name|String
index|[]
name|firstAuthor
init|=
name|tokens
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// take first letter of any "prefixes" (e.g. van der Aalst -> vd)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
operator|(
name|firstAuthor
operator|.
name|length
operator|-
literal|1
operator|)
condition|;
name|j
operator|++
control|)
block|{
name|authors
operator|=
name|authors
operator|.
name|concat
argument_list|(
name|firstAuthor
index|[
name|j
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// append last part of last name completely
name|authors
operator|=
name|authors
operator|.
name|concat
argument_list|(
name|firstAuthor
index|[
name|firstAuthor
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|3
argument_list|,
name|firstAuthor
index|[
name|firstAuthor
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
comment|// replace all whitespaces by " "
comment|// split the lastname at " "
name|String
index|[]
name|curAuthor
init|=
name|tokens
index|[
name|i
index|]
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|aCurAuthor
range|:
name|curAuthor
control|)
block|{
comment|// use first character of each part of lastname
name|authors
operator|=
name|authors
operator|.
name|concat
argument_list|(
name|aCurAuthor
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|4
condition|)
block|{
name|authors
operator|=
name|authors
operator|.
name|concat
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|authors
return|;
block|}
comment|/**      * Gets the surnames of the first N authors and appends EtAl if there are more than N authors      * @param authorField a<code>String</code>      * @param n the number of desired authors      * @return Gets the surnames of the first N authors and appends EtAl if there are more than N authors      */
DECL|method|NAuthors (String authorField, int n)
specifier|static
name|String
name|NAuthors
parameter_list|(
name|String
name|authorField
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|String
index|[]
name|tokens
init|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\s+\\band\\b\\s+"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|authorSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|tokens
operator|.
name|length
operator|>
name|i
operator|)
operator|&&
operator|(
name|i
operator|<
name|n
operator|)
condition|)
block|{
name|String
name|lastName
init|=
name|tokens
index|[
name|i
index|]
operator|.
name|replaceAll
argument_list|(
literal|",\\s+.*"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|authorSB
operator|.
name|append
argument_list|(
name|lastName
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
name|n
condition|)
block|{
name|authorSB
operator|.
name|append
argument_list|(
literal|"EtAl"
argument_list|)
expr_stmt|;
block|}
return|return
name|authorSB
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Gets the first part of the last name of the first      * author/editor, and appends the last name initial of the      * remaining authors/editors.      * Maximum 5 characters      * @param authorField a<code>String</code>      * @return the surname of all authors/editors      */
DECL|method|oneAuthorPlusIni (String authorField)
specifier|static
name|String
name|oneAuthorPlusIni
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
specifier|final
name|int
name|CHARS_OF_FIRST
init|=
literal|5
decl_stmt|;
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\s+\\band\\b\\s+"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|firstAuthor
init|=
name|tokens
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|StringBuilder
name|authorSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|authorSB
operator|.
name|append
argument_list|(
name|firstAuthor
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|CHARS_OF_FIRST
argument_list|,
name|firstAuthor
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|tokens
operator|.
name|length
operator|>
name|i
condition|)
block|{
comment|// convert lastname, firstname to firstname lastname
name|authorSB
operator|.
name|append
argument_list|(
name|tokens
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|authorSB
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * auth.auth.ea format:      * Isaac Newton and James Maxwell and Albert Einstein (1960)      * Isaac Newton and James Maxwell (1960)      *  give:      * Newton.Maxwell.ea      * Newton.Maxwell      */
DECL|method|authAuthEa (String authorField)
specifier|static
name|String
name|authAuthEa
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|StringBuilder
name|author
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\s+\\band\\b\\s+"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
comment|// append first author
name|author
operator|.
name|append
argument_list|(
operator|(
name|tokens
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
comment|// append second author
name|author
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|tokens
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|2
condition|)
block|{
comment|// append ".ea" if more than 2 authors
name|author
operator|.
name|append
argument_list|(
literal|".ea"
argument_list|)
expr_stmt|;
block|}
return|return
name|author
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * auth.etal, authEtAl, ... format:      * Isaac Newton and James Maxwell and Albert Einstein (1960)      * Isaac Newton and James Maxwell (1960)      *      *  auth.etal give (delim=".", append=".etal"):      * Newton.etal      * Newton.Maxwell      *      *  authEtAl give (delim="", append="EtAl"):      * NewtonEtAl      * NewtonMaxwell      *      * Note that [authEtAl] equals [authors2]      */
DECL|method|authEtal (String authorField, String delim, String append)
specifier|static
name|String
name|authEtal
parameter_list|(
name|String
name|authorField
parameter_list|,
name|String
name|delim
parameter_list|,
name|String
name|append
parameter_list|)
block|{
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|StringBuilder
name|author
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\s*\\band\\b\\s*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|author
operator|.
name|append
argument_list|(
operator|(
name|tokens
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|author
operator|.
name|append
argument_list|(
name|delim
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|tokens
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|author
operator|.
name|append
argument_list|(
name|append
argument_list|)
expr_stmt|;
block|}
return|return
name|author
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * The first N characters of the Mth author/editor.      * M starts counting from 1      */
DECL|method|authN_M (String authorField, int n, int m)
specifier|static
name|String
name|authN_M
parameter_list|(
name|String
name|authorField
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|m
parameter_list|)
block|{
comment|// have m counting from 0
name|m
operator|--
expr_stmt|;
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\s+\\band\\b\\s+"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|tokens
operator|.
name|length
operator|<=
name|m
operator|)
operator|||
operator|(
name|n
operator|<
literal|0
operator|)
operator|||
operator|(
name|m
operator|<
literal|0
operator|)
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|lastName
init|=
operator|(
name|tokens
index|[
name|m
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|lastName
operator|.
name|length
argument_list|()
operator|<=
name|n
condition|)
block|{
return|return
name|lastName
return|;
block|}
else|else
block|{
return|return
name|lastName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
return|;
block|}
block|}
comment|/**      * authshort format:      * added by Kolja Brix, kbx@users.sourceforge.net      *      * given author names      *      *   Isaac Newton and James Maxwell and Albert Einstein and N. Bohr      *      *   Isaac Newton and James Maxwell and Albert Einstein      *      *   Isaac Newton and James Maxwell      *      *   Isaac Newton      *      * yield      *      *   NME+      *      *   NME      *      *   NM      *      *   Newton      */
DECL|method|authshort (String authorField)
specifier|static
name|String
name|authshort
parameter_list|(
name|String
name|authorField
parameter_list|)
block|{
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|StringBuilder
name|author
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|author
operator|.
name|append
argument_list|(
name|LabelPatternUtil
operator|.
name|authN_M
argument_list|(
name|authorField
argument_list|,
name|authorField
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokens
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
while|while
condition|(
operator|(
name|tokens
operator|.
name|length
operator|>
name|i
operator|)
operator|&&
operator|(
name|i
operator|<
literal|3
operator|)
condition|)
block|{
name|author
operator|.
name|append
argument_list|(
name|LabelPatternUtil
operator|.
name|authN_M
argument_list|(
name|authorField
argument_list|,
literal|1
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|3
condition|)
block|{
name|author
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|author
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * authIniN format:      *      * Each author gets (N div #authors) chars, the remaining (N mod #authors)      * chars are equally distributed to the authors first in the row.      *      * If (N< #authors), only the first N authors get mentioned.      *      * For example if      *      * a) I. Newton and J. Maxwell and A. Einstein and N. Bohr (..)      *      * b) I. Newton and J. Maxwell and A. Einstein      *      * c) I. Newton and J. Maxwell      *      * d) I. Newton      *      * authIni4 gives: a) NMEB, b) NeME, c) NeMa, d) Newt      *      * @param authorField      *            The authors to format.      *      * @param n      *            The maximum number of characters this string will be long. A      *            negative number or zero will lead to "" be returned.      *      * @throws NullPointerException      *             if authorField is null and n> 0      */
DECL|method|authIniN (String authorField, int n)
specifier|static
name|String
name|authIniN
parameter_list|(
name|String
name|authorField
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|authorField
operator|=
name|AuthorList
operator|.
name|fixAuthorForAlphabetization
argument_list|(
name|authorField
argument_list|)
expr_stmt|;
name|StringBuilder
name|author
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|authorField
operator|.
name|split
argument_list|(
literal|"\\band\\b"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|charsAll
init|=
name|n
operator|/
name|tokens
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|author
operator|.
name|toString
argument_list|()
return|;
block|}
while|while
condition|(
name|tokens
operator|.
name|length
operator|>
name|i
condition|)
block|{
if|if
condition|(
name|i
operator|<
operator|(
name|n
operator|%
name|tokens
operator|.
name|length
operator|)
condition|)
block|{
name|author
operator|.
name|append
argument_list|(
name|LabelPatternUtil
operator|.
name|authN_M
argument_list|(
name|authorField
argument_list|,
name|charsAll
operator|+
literal|1
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|author
operator|.
name|append
argument_list|(
name|LabelPatternUtil
operator|.
name|authN_M
argument_list|(
name|authorField
argument_list|,
name|charsAll
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|author
operator|.
name|length
argument_list|()
operator|<=
name|n
condition|)
block|{
return|return
name|author
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|author
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
return|;
block|}
block|}
comment|/**      * Split the pages field into separate numbers and return the lowest      *      * @param pages      *            (may not be null) a pages string such as 42--111 or      *            7,41,73--97 or 43+      *      * @return the first page number or "" if no number is found in the string      *      * @throws NullPointerException      *             if pages is null      */
DECL|method|firstPage (String pages)
specifier|public
specifier|static
name|String
name|firstPage
parameter_list|(
name|String
name|pages
parameter_list|)
block|{
name|String
index|[]
name|_pages
init|=
name|pages
operator|.
name|split
argument_list|(
literal|"\\D+"
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|_pages
control|)
block|{
if|if
condition|(
name|n
operator|.
name|matches
argument_list|(
literal|"\\d+"
argument_list|)
condition|)
block|{
name|result
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|n
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
comment|/**      * Split the pages field into separate numbers and return the highest      *      * @param pages      *            a pages string such as 42--111 or 7,41,73--97 or 43+      *      * @return the first page number or "" if no number is found in the string      *      * @throws NullPointerException      *             if pages is null.      */
DECL|method|lastPage (String pages)
specifier|public
specifier|static
name|String
name|lastPage
parameter_list|(
name|String
name|pages
parameter_list|)
block|{
name|String
index|[]
name|_pages
init|=
name|pages
operator|.
name|split
argument_list|(
literal|"\\D+"
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|_pages
control|)
block|{
if|if
condition|(
name|n
operator|.
name|matches
argument_list|(
literal|"\\d+"
argument_list|)
condition|)
block|{
name|result
operator|=
name|Math
operator|.
name|max
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|n
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
comment|/**      * Parse a field marker with modifiers, possibly containing a parenthesised modifier,      * as well as escaped colons and parentheses.      * @param arg The argument string.      * @return An array of strings representing the parts of the marker      */
DECL|method|parseFieldMarker (String arg)
specifier|private
specifier|static
name|String
index|[]
name|parseFieldMarker
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|current
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|escaped
init|=
literal|false
decl_stmt|;
name|int
name|inParenthesis
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arg
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|!
name|escaped
operator|&&
operator|(
name|inParenthesis
operator|==
literal|0
operator|)
condition|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|current
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'('
operator|)
operator|&&
operator|!
name|escaped
condition|)
block|{
name|inParenthesis
operator|++
expr_stmt|;
name|current
operator|.
name|append
argument_list|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|')'
operator|)
operator|&&
operator|!
name|escaped
operator|&&
operator|(
name|inParenthesis
operator|>
literal|0
operator|)
condition|)
block|{
name|inParenthesis
operator|--
expr_stmt|;
name|current
operator|.
name|append
argument_list|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
name|escaped
condition|)
block|{
name|escaped
operator|=
literal|false
expr_stmt|;
name|current
operator|.
name|append
argument_list|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|escaped
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|escaped
condition|)
block|{
name|current
operator|.
name|append
argument_list|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|escaped
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|current
operator|.
name|append
argument_list|(
name|arg
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|parts
operator|.
name|add
argument_list|(
name|current
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|parts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

