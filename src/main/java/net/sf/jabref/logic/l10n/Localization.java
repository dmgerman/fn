begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.l10n
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|Localization
specifier|public
class|class
name|Localization
block|{
comment|// Encodings
DECL|field|ENCODINGS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|ENCODINGS
decl_stmt|;
DECL|field|ENCODING_NAMES_LOOKUP
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ENCODING_NAMES_LOOKUP
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Localization
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RESOURCE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_PREFIX
init|=
literal|"l10n/JabRef"
decl_stmt|;
DECL|field|MENU_RESOURCE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|MENU_RESOURCE_PREFIX
init|=
literal|"l10n/Menu"
decl_stmt|;
DECL|field|INTEGRITY_RESOURCE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|INTEGRITY_RESOURCE_PREFIX
init|=
literal|"l10n/IntegrityMessage"
decl_stmt|;
DECL|field|ALL_ENCODINGS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|ALL_ENCODINGS
init|=
comment|// (String[])
comment|// Charset.availableCharsets().keySet().toArray(new
comment|// String[]{});
operator|new
name|String
index|[]
block|{
literal|"ISO8859_1"
block|,
literal|"UTF8"
block|,
literal|"UTF-16"
block|,
literal|"ASCII"
block|,
literal|"Cp1250"
block|,
literal|"Cp1251"
block|,
literal|"Cp1252"
block|,
literal|"Cp1253"
block|,
literal|"Cp1254"
block|,
literal|"Cp1257"
block|,
literal|"SJIS"
block|,
literal|"KOI8_R"
block|,
comment|// Cyrillic
literal|"EUC_JP"
block|,
comment|// Added Japanese encodings.
literal|"Big5"
block|,
literal|"Big5_HKSCS"
block|,
literal|"GBK"
block|,
literal|"ISO8859_2"
block|,
literal|"ISO8859_3"
block|,
literal|"ISO8859_4"
block|,
literal|"ISO8859_5"
block|,
literal|"ISO8859_6"
block|,
literal|"ISO8859_7"
block|,
literal|"ISO8859_8"
block|,
literal|"ISO8859_9"
block|,
literal|"ISO8859_13"
block|,
literal|"ISO8859_15"
block|}
decl_stmt|;
DECL|field|messages
specifier|private
specifier|static
name|ResourceBundle
name|messages
decl_stmt|;
DECL|field|menuTitles
specifier|private
specifier|static
name|ResourceBundle
name|menuTitles
decl_stmt|;
DECL|field|intMessages
specifier|private
specifier|static
name|ResourceBundle
name|intMessages
decl_stmt|;
static|static
block|{
comment|// Build list of encodings, by filtering out all that are not supported
comment|// on this system:
name|List
argument_list|<
name|String
argument_list|>
name|encodings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ALL_ENCODING
range|:
name|Localization
operator|.
name|ALL_ENCODINGS
control|)
block|{
if|if
condition|(
name|Charset
operator|.
name|isSupported
argument_list|(
name|ALL_ENCODING
argument_list|)
condition|)
block|{
name|encodings
operator|.
name|add
argument_list|(
name|ALL_ENCODING
argument_list|)
expr_stmt|;
block|}
block|}
name|ENCODINGS
operator|=
name|encodings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|encodings
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
comment|// Build a map for translating Java encoding names into common encoding names:
name|ENCODING_NAMES_LOOKUP
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1250"
argument_list|,
literal|"windows-1250"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1251"
argument_list|,
literal|"windows-1251"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1252"
argument_list|,
literal|"windows-1252"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1253"
argument_list|,
literal|"windows-1253"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1254"
argument_list|,
literal|"windows-1254"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Cp1257"
argument_list|,
literal|"windows-1257"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_1"
argument_list|,
literal|"ISO-8859-1"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_2"
argument_list|,
literal|"ISO-8859-2"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_3"
argument_list|,
literal|"ISO-8859-3"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_4"
argument_list|,
literal|"ISO-8859-4"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_5"
argument_list|,
literal|"ISO-8859-5"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_6"
argument_list|,
literal|"ISO-8859-6"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_7"
argument_list|,
literal|"ISO-8859-7"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_8"
argument_list|,
literal|"ISO-8859-8"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_9"
argument_list|,
literal|"ISO-8859-9"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_13"
argument_list|,
literal|"ISO-8859-13"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ISO8859_15"
argument_list|,
literal|"ISO-8859-15"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"KOI8_R"
argument_list|,
literal|"KOI8-R"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"UTF8"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"UTF-16"
argument_list|,
literal|"UTF-16"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"SJIS"
argument_list|,
literal|"Shift_JIS"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"GBK"
argument_list|,
literal|"GBK"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Big5_HKSCS"
argument_list|,
literal|"Big5-HKSCS"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"Big5"
argument_list|,
literal|"Big5"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"EUC_JP"
argument_list|,
literal|"EUC-JP"
argument_list|)
expr_stmt|;
name|ENCODING_NAMES_LOOKUP
operator|.
name|put
argument_list|(
literal|"ASCII"
argument_list|,
literal|"US-ASCII"
argument_list|)
expr_stmt|;
block|}
DECL|method|setLanguage (String language, String country)
specifier|public
specifier|static
name|void
name|setLanguage
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|country
parameter_list|)
block|{
name|Locale
name|locale
init|=
operator|new
name|Locale
argument_list|(
name|language
argument_list|,
name|country
argument_list|)
decl_stmt|;
name|messages
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|RESOURCE_PREFIX
argument_list|,
name|locale
argument_list|,
operator|new
name|EncodingControl
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|menuTitles
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|MENU_RESOURCE_PREFIX
argument_list|,
name|locale
argument_list|,
operator|new
name|EncodingControl
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|intMessages
operator|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|INTEGRITY_RESOURCE_PREFIX
argument_list|,
name|locale
argument_list|,
operator|new
name|EncodingControl
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Locale
operator|.
name|setDefault
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|javax
operator|.
name|swing
operator|.
name|JComponent
operator|.
name|setDefaultLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
DECL|method|lang (String key, String... params)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|messages
operator|!=
literal|null
condition|)
block|{
name|translation
operator|=
name|messages
operator|.
name|getString
argument_list|(
name|key
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Warning: could not get translation for \""
operator|+
name|key
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|translation
operator|==
literal|null
condition|)
block|{
name|translation
operator|=
name|key
expr_stmt|;
block|}
if|if
condition|(
name|translation
operator|!=
literal|null
operator|&&
operator|!
name|translation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|translation
operator|=
name|translation
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
literal|false
decl_stmt|;
name|char
name|c
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|translation
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|c
operator|=
name|translation
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'%'
condition|)
block|{
name|b
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<=
name|params
operator|.
name|length
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|params
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// append literally (for quoting) or insert special
comment|// symbol
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'c'
case|:
comment|// colon
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
comment|// equal
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// anything else, e.g. %
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|key
return|;
block|}
DECL|method|lang (String key)
specifier|public
specifier|static
name|String
name|lang
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|lang
argument_list|(
name|key
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
return|;
block|}
DECL|method|menuTitle (String key)
specifier|public
specifier|static
name|String
name|menuTitle
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|messages
operator|!=
literal|null
condition|)
block|{
name|translation
operator|=
name|menuTitles
operator|.
name|getString
argument_list|(
name|key
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
name|translation
operator|=
name|key
expr_stmt|;
block|}
if|if
condition|(
name|translation
operator|!=
literal|null
operator|&&
operator|!
name|translation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|translation
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
DECL|method|getIntegrityMessage (String key)
specifier|public
specifier|static
name|String
name|getIntegrityMessage
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|translation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|intMessages
operator|!=
literal|null
condition|)
block|{
name|translation
operator|=
name|intMessages
operator|.
name|getString
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
name|translation
operator|=
name|key
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Warning: could not get menu item translation for \""
operator|+
name|key
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|translation
operator|!=
literal|null
operator|&&
operator|!
name|translation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|translation
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
block|}
end_class

end_unit

