begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.auxparser
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|auxparser
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexString
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * LaTeX Aux to BibTeX Parser  *<p>  * Extracts a subset of BibTeX entries from a BibDatabase that are included in an aux file.  */
end_comment

begin_class
DECL|class|AuxFileParser
specifier|public
class|class
name|AuxFileParser
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AuxFileParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CITE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|CITE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\(citation|abx@aux@cite)\\{(.+)\\}"
argument_list|)
decl_stmt|;
DECL|field|INPUT_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|INPUT_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\@input\\{(.+)\\}"
argument_list|)
decl_stmt|;
DECL|field|masterDatabase
specifier|private
name|BibDatabase
name|masterDatabase
decl_stmt|;
DECL|field|auxDatabase
specifier|private
name|BibDatabase
name|auxDatabase
decl_stmt|;
DECL|field|uniqueKeys
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|uniqueKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|unresolvedKeys
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|unresolvedKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nestedAuxCount
specifier|private
name|int
name|nestedAuxCount
decl_stmt|;
DECL|field|crossRefEntriesCount
specifier|private
name|int
name|crossRefEntriesCount
decl_stmt|;
comment|/**      * Generates a database based on the given aux file and BibTeX database      *      * @param auxFile  Path to the LaTeX aux file      * @param database BibTeX database      */
DECL|method|AuxFileParser (String auxFile, BibDatabase database)
specifier|public
name|AuxFileParser
parameter_list|(
name|String
name|auxFile
parameter_list|,
name|BibDatabase
name|database
parameter_list|)
block|{
name|auxDatabase
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
name|masterDatabase
operator|=
name|database
expr_stmt|;
name|parseAuxFile
argument_list|(
name|auxFile
argument_list|)
expr_stmt|;
name|resolveTags
argument_list|()
expr_stmt|;
block|}
DECL|method|getGeneratedBibDatabase ()
specifier|public
name|BibDatabase
name|getGeneratedBibDatabase
parameter_list|()
block|{
return|return
name|auxDatabase
return|;
block|}
DECL|method|getUnresolvedKeys ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getUnresolvedKeys
parameter_list|()
block|{
return|return
name|unresolvedKeys
return|;
block|}
DECL|method|getFoundKeysInAux ()
specifier|public
name|int
name|getFoundKeysInAux
parameter_list|()
block|{
return|return
name|uniqueKeys
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getResolvedKeysCount ()
specifier|public
name|int
name|getResolvedKeysCount
parameter_list|()
block|{
return|return
name|auxDatabase
operator|.
name|getEntryCount
argument_list|()
operator|-
name|crossRefEntriesCount
return|;
block|}
DECL|method|getUnresolvedKeysCount ()
specifier|public
name|int
name|getUnresolvedKeysCount
parameter_list|()
block|{
return|return
name|unresolvedKeys
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Query the number of extra entries pulled in due to crossrefs from other entries.      *      * @return The number of additional entries pulled in due to crossref      */
DECL|method|getCrossRefEntriesCount ()
specifier|public
name|int
name|getCrossRefEntriesCount
parameter_list|()
block|{
return|return
name|crossRefEntriesCount
return|;
block|}
comment|/**      * Prints parsing statistics      *      * @param includeMissingEntries      * @return      */
DECL|method|getInformation (boolean includeMissingEntries)
specifier|public
name|String
name|getInformation
parameter_list|(
name|boolean
name|includeMissingEntries
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"keys_in_database"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|masterDatabase
operator|.
name|getEntryCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"found_in_aux_file"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|getFoundKeysInAux
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"resolved"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|getResolvedKeysCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"not_found"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|getUnresolvedKeysCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"crossreferenced entries included"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|getCrossRefEntriesCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeMissingEntries
operator|&&
operator|(
name|getUnresolvedKeysCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|String
name|entry
range|:
name|unresolvedKeys
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|entry
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nestedAuxCount
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"nested_aux_files"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|nestedAuxCount
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*      * Parses the aux file and extracts all bib keys.      * Also supports nested aux files (latex \\include).      *      * There exists no specification of the aux file.      * Every package, class or document can write to the aux file.      * The aux file consists of LaTeX macros and is read at the \begin{document} and again at the \end{document}.      *      * BibTeX citation: \citation{x,y,z}      * Biblatex citation: \abx@aux@cite{x,y,z}      * Nested aux files: \@input{x}      */
DECL|method|parseAuxFile (String filename)
specifier|private
name|void
name|parseAuxFile
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
comment|// nested aux files
name|List
argument_list|<
name|String
argument_list|>
name|fileList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|fileList
operator|.
name|add
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|int
name|fileIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|fileIndex
operator|<
name|fileList
operator|.
name|size
argument_list|()
condition|)
block|{
name|String
name|file
init|=
name|fileList
operator|.
name|get
argument_list|(
name|fileIndex
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|citeMatch
init|=
name|CITE_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
while|while
condition|(
name|citeMatch
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|keyString
init|=
name|citeMatch
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|keys
init|=
name|keyString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|uniqueKeys
operator|.
name|add
argument_list|(
name|key
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Matcher
name|inputMatch
init|=
name|INPUT_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
while|while
condition|(
name|inputMatch
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|inputString
init|=
name|inputMatch
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|inputFile
init|=
name|inputString
decl_stmt|;
name|Path
name|rootPath
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootPath
operator|!=
literal|null
condition|)
block|{
name|inputFile
operator|=
name|rootPath
operator|.
name|resolve
argument_list|(
name|inputString
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fileList
operator|.
name|contains
argument_list|(
name|inputFile
argument_list|)
condition|)
block|{
name|fileList
operator|.
name|add
argument_list|(
name|inputFile
argument_list|)
expr_stmt|;
name|nestedAuxCount
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Cannot locate input file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem opening file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|fileIndex
operator|++
expr_stmt|;
block|}
block|}
comment|/*      * Try to find an equivalent BibTeX entry inside the reference database for all keys inside the aux file.      */
DECL|method|resolveTags ()
specifier|private
name|void
name|resolveTags
parameter_list|()
block|{
for|for
control|(
name|String
name|key
range|:
name|uniqueKeys
control|)
block|{
name|BibEntry
name|entry
init|=
name|masterDatabase
operator|.
name|getEntryByKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|unresolvedKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|resolveCrossReferences
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|auxDatabase
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|copyDatabaseConfiguration
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * Resolves and adds CrossRef entries      */
DECL|method|resolveCrossReferences (BibEntry entry)
specifier|private
name|void
name|resolveCrossReferences
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"crossref"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|crossref
lambda|->
block|{
if|if
condition|(
operator|!
name|uniqueKeys
operator|.
name|contains
argument_list|(
name|crossref
argument_list|)
condition|)
block|{
name|BibEntry
name|refEntry
init|=
name|masterDatabase
operator|.
name|getEntryByKey
argument_list|(
name|crossref
argument_list|)
decl_stmt|;
if|if
condition|(
name|refEntry
operator|==
literal|null
condition|)
block|{
name|unresolvedKeys
operator|.
name|add
argument_list|(
name|crossref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|insertEntry
argument_list|(
name|refEntry
argument_list|)
expr_stmt|;
name|crossRefEntriesCount
operator|++
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/*      * Insert a clone of the given entry. The clone is given a new unique ID.      */
DECL|method|insertEntry (BibEntry entry)
specifier|private
name|void
name|insertEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|BibEntry
name|clonedEntry
init|=
operator|(
name|BibEntry
operator|)
name|entry
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clonedEntry
operator|.
name|setId
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|auxDatabase
operator|.
name|insertEntry
argument_list|(
name|clonedEntry
argument_list|)
expr_stmt|;
block|}
comment|/*      *  Copy the database's configuration, i.e., preamble and strings.      */
DECL|method|copyDatabaseConfiguration ()
specifier|private
name|void
name|copyDatabaseConfiguration
parameter_list|()
block|{
name|auxDatabase
operator|.
name|setPreamble
argument_list|(
name|masterDatabase
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|masterDatabase
operator|.
name|getStringKeySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|BibtexString
name|string
init|=
name|masterDatabase
operator|.
name|getString
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|auxDatabase
operator|.
name|addString
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

