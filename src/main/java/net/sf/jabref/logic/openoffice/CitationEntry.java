begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2016 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.openoffice
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_class
DECL|class|CitationEntry
specifier|public
class|class
name|CitationEntry
implements|implements
name|Comparable
argument_list|<
name|CitationEntry
argument_list|>
block|{
DECL|field|refMarkName
specifier|private
specifier|final
name|String
name|refMarkName
decl_stmt|;
DECL|field|pageInfo
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|pageInfo
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|String
name|context
decl_stmt|;
DECL|field|origPageInfo
specifier|private
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|origPageInfo
decl_stmt|;
comment|// Only used for testing...
DECL|method|CitationEntry (String refMarkName, String context)
specifier|public
name|CitationEntry
parameter_list|(
name|String
name|refMarkName
parameter_list|,
name|String
name|context
parameter_list|)
block|{
name|this
argument_list|(
name|refMarkName
argument_list|,
name|context
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Only used for testing...
DECL|method|CitationEntry (String refMarkName, String context, String pageInfo)
specifier|public
name|CitationEntry
parameter_list|(
name|String
name|refMarkName
parameter_list|,
name|String
name|context
parameter_list|,
name|String
name|pageInfo
parameter_list|)
block|{
name|this
argument_list|(
name|refMarkName
argument_list|,
name|context
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|pageInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|CitationEntry (String refMarkName, String context, Optional<String> pageInfo)
specifier|public
name|CitationEntry
parameter_list|(
name|String
name|refMarkName
parameter_list|,
name|String
name|context
parameter_list|,
name|Optional
argument_list|<
name|String
argument_list|>
name|pageInfo
parameter_list|)
block|{
name|this
operator|.
name|refMarkName
operator|=
name|refMarkName
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|pageInfo
operator|=
name|pageInfo
expr_stmt|;
name|this
operator|.
name|origPageInfo
operator|=
name|pageInfo
expr_stmt|;
block|}
DECL|method|getPageInfo ()
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getPageInfo
parameter_list|()
block|{
return|return
name|pageInfo
return|;
block|}
DECL|method|getRefMarkName ()
specifier|public
name|String
name|getRefMarkName
parameter_list|()
block|{
return|return
name|refMarkName
return|;
block|}
DECL|method|pageInfoChanged ()
specifier|public
name|boolean
name|pageInfoChanged
parameter_list|()
block|{
if|if
condition|(
name|pageInfo
operator|.
name|isPresent
argument_list|()
operator|^
name|origPageInfo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|pageInfo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// This means that origPageInfo.isPresent is also true here
return|return
name|pageInfo
operator|.
name|get
argument_list|()
operator|.
name|compareTo
argument_list|(
name|origPageInfo
operator|.
name|get
argument_list|()
argument_list|)
operator|!=
literal|0
return|;
block|}
else|else
block|{
comment|// So origPageInfo.isPresent is false here
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareTo (CitationEntry other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|CitationEntry
name|other
parameter_list|)
block|{
return|return
name|this
operator|.
name|refMarkName
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|refMarkName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|CitationEntry
condition|)
block|{
name|CitationEntry
name|other
init|=
operator|(
name|CitationEntry
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|refMarkName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|refMarkName
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|refMarkName
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|getContext ()
specifier|public
name|String
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|setPageInfo (String trim)
specifier|public
name|void
name|setPageInfo
parameter_list|(
name|String
name|trim
parameter_list|)
block|{
name|pageInfo
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|trim
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

