begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.error
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|error
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_comment
comment|/**  * All writes to this print stream are copied to two print streams  *<p/>  * Is based on the command line tool tee  */
end_comment

begin_class
DECL|class|TeeStream
specifier|public
class|class
name|TeeStream
extends|extends
name|PrintStream
block|{
DECL|field|outStream
specifier|private
specifier|final
name|PrintStream
name|outStream
decl_stmt|;
DECL|method|TeeStream (PrintStream out1, PrintStream out2)
specifier|public
name|TeeStream
parameter_list|(
name|PrintStream
name|out1
parameter_list|,
name|PrintStream
name|out2
parameter_list|)
block|{
name|super
argument_list|(
name|out1
argument_list|)
expr_stmt|;
name|this
operator|.
name|outStream
operator|=
name|out2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] buf, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
try|try
block|{
name|super
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|super
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

