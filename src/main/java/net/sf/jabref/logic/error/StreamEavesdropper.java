begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.error
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|error
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|application
operator|.
name|Platform
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|logging
operator|.
name|LogMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|impl
operator|.
name|Log4jLogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|SimpleMessage
import|;
end_import

begin_comment
comment|/**  * Allows to eavesdrop on an out and an err stream.  *<p/>  * It can be used to listen to any messages to the System.out and System.err.  */
end_comment

begin_class
DECL|class|StreamEavesdropper
specifier|public
class|class
name|StreamEavesdropper
block|{
DECL|field|systemOut
specifier|private
specifier|final
name|PrintStream
name|systemOut
decl_stmt|;
DECL|field|systemErr
specifier|private
specifier|final
name|PrintStream
name|systemErr
decl_stmt|;
DECL|method|StreamEavesdropper (PrintStream systemOut, PrintStream systemErr)
specifier|public
name|StreamEavesdropper
parameter_list|(
name|PrintStream
name|systemOut
parameter_list|,
name|PrintStream
name|systemErr
parameter_list|)
block|{
name|this
operator|.
name|systemOut
operator|=
name|systemOut
expr_stmt|;
name|this
operator|.
name|systemErr
operator|=
name|systemErr
expr_stmt|;
block|}
DECL|method|eavesdropOnSystem ()
specifier|public
specifier|static
name|StreamEavesdropper
name|eavesdropOnSystem
parameter_list|()
block|{
name|StreamEavesdropper
name|streamEavesdropper
init|=
operator|new
name|StreamEavesdropper
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|streamEavesdropper
operator|.
name|getOutStream
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|streamEavesdropper
operator|.
name|getErrStream
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|streamEavesdropper
return|;
block|}
comment|/**      * Return a new {@code PrintStream} which also creates a new log event with {@link Level#WARN} for each message and forwards it to the {@link LogMessages} archive.      *      * @return a PrintStream      */
DECL|method|getOutStream ()
specifier|public
name|PrintStream
name|getOutStream
parameter_list|()
block|{
return|return
operator|new
name|PrintStream
argument_list|(
name|systemOut
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|super
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|String
name|message
init|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|addToLog
argument_list|(
name|message
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * Return a new {@code PrintStream} which also creates a new log event with {@link Level#ERROR} for each message and forwards it to the {@link LogMessages} archive.      *      * @return a PrintStream      */
DECL|method|getErrStream ()
specifier|public
name|PrintStream
name|getErrStream
parameter_list|()
block|{
return|return
operator|new
name|PrintStream
argument_list|(
name|systemErr
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|super
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|String
name|message
init|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|addToLog
argument_list|(
name|message
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * Creates a new log event with the given parameters and forwards it to the {@link LogMessages} archive.      *      * @param message message of log event      * @param level   level of log event      */
DECL|method|addToLog (String message, Level level)
specifier|private
name|void
name|addToLog
parameter_list|(
name|String
name|message
parameter_list|,
name|Level
name|level
parameter_list|)
block|{
if|if
condition|(
operator|!
name|message
operator|.
name|equals
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|messageFormat
init|=
name|message
operator|.
name|replaceAll
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|LogEvent
name|messageWithLevel
init|=
name|Log4jLogEvent
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMessage
argument_list|(
operator|new
name|SimpleMessage
argument_list|(
name|messageFormat
argument_list|)
argument_list|)
operator|.
name|setLevel
argument_list|(
name|level
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Platform
operator|.
name|runLater
argument_list|(
parameter_list|()
lambda|->
name|LogMessages
operator|.
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|messageWithLevel
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

