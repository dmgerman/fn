begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.error
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|error
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_comment
comment|/**  * Allows to eavesdrop on an out and an err stream.  *<p/>  * It can be used to listen to any messages to the System.out and System.err.  */
end_comment

begin_class
DECL|class|StreamEavesdropper
specifier|public
class|class
name|StreamEavesdropper
block|{
DECL|field|errByteStream
specifier|private
specifier|final
name|ByteArrayOutputStream
name|errByteStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|outByteStream
specifier|private
specifier|final
name|ByteArrayOutputStream
name|outByteStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|systemOut
specifier|private
specifier|final
name|PrintStream
name|systemOut
decl_stmt|;
DECL|field|systemErr
specifier|private
specifier|final
name|PrintStream
name|systemErr
decl_stmt|;
DECL|method|eavesdropOnSystem ()
specifier|public
specifier|static
name|StreamEavesdropper
name|eavesdropOnSystem
parameter_list|()
block|{
name|StreamEavesdropper
name|streamEavesdropper
init|=
operator|new
name|StreamEavesdropper
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|streamEavesdropper
operator|.
name|getOutStream
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|streamEavesdropper
operator|.
name|getErrStream
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|streamEavesdropper
return|;
block|}
DECL|method|StreamEavesdropper (PrintStream systemOut, PrintStream systemErr)
specifier|public
name|StreamEavesdropper
parameter_list|(
name|PrintStream
name|systemOut
parameter_list|,
name|PrintStream
name|systemErr
parameter_list|)
block|{
name|this
operator|.
name|systemOut
operator|=
name|systemOut
expr_stmt|;
name|this
operator|.
name|systemErr
operator|=
name|systemErr
expr_stmt|;
block|}
DECL|method|getOutStream ()
specifier|public
name|PrintStream
name|getOutStream
parameter_list|()
block|{
name|PrintStream
name|consoleOut
init|=
operator|new
name|PrintStream
argument_list|(
name|outByteStream
argument_list|)
decl_stmt|;
return|return
operator|new
name|TeeStream
argument_list|(
name|consoleOut
argument_list|,
name|systemOut
argument_list|)
return|;
block|}
DECL|method|getErrStream ()
specifier|public
name|PrintStream
name|getErrStream
parameter_list|()
block|{
name|PrintStream
name|consoleErr
init|=
operator|new
name|PrintStream
argument_list|(
name|errByteStream
argument_list|)
decl_stmt|;
return|return
operator|new
name|TeeStream
argument_list|(
name|consoleErr
argument_list|,
name|systemErr
argument_list|)
return|;
block|}
DECL|method|getErrorMessages ()
specifier|public
name|String
name|getErrorMessages
parameter_list|()
block|{
return|return
name|errByteStream
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getOutput ()
specifier|public
name|String
name|getOutput
parameter_list|()
block|{
return|return
name|outByteStream
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

