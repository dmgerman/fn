begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.importer.fileformat
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|Importer
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|AbstractDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|DateDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|DetailDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|ExtentDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|GenreDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|HierarchicalGeographicDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|IdentifierDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|IssuanceDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|LanguageDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|LanguageTermDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|LocationDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|ModsCollectionDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|ModsDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|NameDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|NamePartDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|NoteDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|OriginInfoDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|PartDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|PhysicalLocationDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|PlaceDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|PlaceTermDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|RecordInfoDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|RelatedItemDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|StringPlusLanguage
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|StringPlusLanguagePlusAuthority
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|StringPlusLanguagePlusSupplied
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|SubjectDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|TitleInfoDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|mods
operator|.
name|UrlDefinition
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|FileExtensions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Importer for the MODS format.<br>  * More details about the format can be found here<a href="http://www.loc.gov/standards/mods/">http://www.loc.gov/standards/mods/</a>.<br>  * The newest xml schema can also be found here<a href="www.loc.gov/standards/mods/mods-schemas.html.">www.loc.gov/standards/mods/mods-schemas.html.</a>.  */
end_comment

begin_class
DECL|class|ModsImporter
specifier|public
class|class
name|ModsImporter
extends|extends
name|Importer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ModsImporter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|KEYWORD_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|KEYWORD_SEPARATOR
init|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
operator|.
name|getImportFormatPreferences
argument_list|()
operator|.
name|getKeywordSeparator
argument_list|()
operator|+
literal|" "
decl_stmt|;
DECL|field|MODS_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|MODS_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<mods .*>"
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
name|JAXBContext
name|context
decl_stmt|;
annotation|@
name|Override
DECL|method|isRecognizedFormat (BufferedReader input)
specifier|public
name|boolean
name|isRecognizedFormat
parameter_list|(
name|BufferedReader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|input
operator|.
name|lines
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|line
lambda|->
name|MODS_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|find
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|importDatabase (BufferedReader input)
specifier|public
name|ParserResult
name|importDatabase
parameter_list|(
name|BufferedReader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibItems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
literal|"net.sf.jabref.logic.importer.fileformat.mods"
argument_list|)
expr_stmt|;
block|}
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
comment|//The unmarshalled object is a jaxbElement.
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|unmarshalledObject
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ModsCollectionDefinition
argument_list|>
name|collection
init|=
name|getElement
argument_list|(
name|unmarshalledObject
operator|.
name|getValue
argument_list|()
argument_list|,
name|ModsCollectionDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ModsDefinition
argument_list|>
name|mods
init|=
name|getElement
argument_list|(
name|unmarshalledObject
operator|.
name|getValue
argument_list|()
argument_list|,
name|ModsDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ModsDefinition
argument_list|>
name|modsDefinitions
init|=
name|collection
operator|.
name|get
argument_list|()
operator|.
name|getMods
argument_list|()
decl_stmt|;
name|parseModsCollection
argument_list|(
name|bibItems
argument_list|,
name|modsDefinitions
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mods
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ModsDefinition
name|modsDefinition
init|=
name|mods
operator|.
name|get
argument_list|()
decl_stmt|;
name|parseMods
argument_list|(
name|bibItems
argument_list|,
name|modsDefinition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Not expected root element found"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"could not parse document"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|ParserResult
operator|.
name|fromErrorMessage
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|ParserResult
argument_list|(
name|bibItems
argument_list|)
return|;
block|}
DECL|method|parseModsCollection (List<BibEntry> bibItems, List<ModsDefinition> mods)
specifier|private
name|void
name|parseModsCollection
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibItems
parameter_list|,
name|List
argument_list|<
name|ModsDefinition
argument_list|>
name|mods
parameter_list|)
block|{
for|for
control|(
name|ModsDefinition
name|modsDefinition
range|:
name|mods
control|)
block|{
name|parseMods
argument_list|(
name|bibItems
argument_list|,
name|modsDefinition
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseMods (List<BibEntry> bibItems, ModsDefinition modsDefinition)
specifier|private
name|void
name|parseMods
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibItems
parameter_list|,
name|ModsDefinition
name|modsDefinition
parameter_list|)
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|modsDefinition
operator|.
name|getID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setCiteKey
argument_list|(
name|modsDefinition
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modsDefinition
operator|.
name|getModsGroup
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parseModsGroup
argument_list|(
name|fields
argument_list|,
name|modsDefinition
operator|.
name|getModsGroup
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setField
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|bibItems
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
DECL|method|parseModsGroup (Map<String, String> fields, List<Object> modsGroup, BibEntry entry)
specifier|private
name|void
name|parseModsGroup
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|modsGroup
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keywords
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|authors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|notes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|groupElement
range|:
name|modsGroup
control|)
block|{
comment|//Get the element. Only one of the elements should be not an empty optional.
name|Optional
argument_list|<
name|AbstractDefinition
argument_list|>
name|abstractDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|AbstractDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|GenreDefinition
argument_list|>
name|genreDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|GenreDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|LanguageDefinition
argument_list|>
name|languageDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|LanguageDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|LocationDefinition
argument_list|>
name|locationDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|LocationDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|NameDefinition
argument_list|>
name|nameDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|NameDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|OriginInfoDefinition
argument_list|>
name|originInfoDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|OriginInfoDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|RecordInfoDefinition
argument_list|>
name|recordInfoDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|RecordInfoDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|NoteDefinition
argument_list|>
name|noteDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|NoteDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|RelatedItemDefinition
argument_list|>
name|relatedItemDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|RelatedItemDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|SubjectDefinition
argument_list|>
name|subjectDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|SubjectDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|IdentifierDefinition
argument_list|>
name|identifierDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|IdentifierDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|TitleInfoDefinition
argument_list|>
name|titleInfoDefinition
init|=
name|getElement
argument_list|(
name|groupElement
argument_list|,
name|TitleInfoDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Now parse the information if the element is present
name|abstractDefinition
operator|.
name|ifPresent
argument_list|(
name|abstractDef
lambda|->
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|ABSTRACT
argument_list|,
name|abstractDef
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|genreDefinition
operator|.
name|ifPresent
argument_list|(
name|genre
lambda|->
name|entry
operator|.
name|setType
argument_list|(
name|genre
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|languageDefinition
operator|.
name|ifPresent
argument_list|(
name|languageDef
lambda|->
name|languageDef
operator|.
name|getLanguageTerm
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|LanguageTermDefinition
operator|::
name|getValue
argument_list|)
operator|.
name|forEach
argument_list|(
name|language
lambda|->
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|LANGUAGE
argument_list|,
name|language
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|locationDefinition
operator|.
name|ifPresent
argument_list|(
name|location
lambda|->
name|parseLocationAndUrl
argument_list|(
name|fields
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|nameDefinition
operator|.
name|ifPresent
argument_list|(
name|name
lambda|->
name|handleAuthorsInNamePart
argument_list|(
name|name
argument_list|,
name|authors
argument_list|,
name|fields
argument_list|)
argument_list|)
expr_stmt|;
name|originInfoDefinition
operator|.
name|ifPresent
argument_list|(
name|originInfo
lambda|->
name|originInfo
operator|.
name|getPlaceOrPublisherOrDateIssued
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|element
lambda|->
name|putPlaceOrPublisherOrDate
argument_list|(
name|fields
argument_list|,
name|element
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|element
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|recordInfoDefinition
operator|.
name|ifPresent
argument_list|(
name|recordInfo
lambda|->
name|parseRecordInfo
argument_list|(
name|fields
argument_list|,
name|recordInfo
argument_list|)
argument_list|)
expr_stmt|;
name|noteDefinition
operator|.
name|ifPresent
argument_list|(
name|note
lambda|->
name|notes
operator|.
name|add
argument_list|(
name|note
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|relatedItemDefinition
operator|.
name|ifPresent
argument_list|(
name|relatedItem
lambda|->
name|parseRelatedModsGroup
argument_list|(
name|fields
argument_list|,
name|relatedItem
operator|.
name|getModsGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|subjectDefinition
operator|.
name|ifPresent
argument_list|(
name|subject
lambda|->
name|parseTopic
argument_list|(
name|fields
argument_list|,
name|subject
operator|.
name|getTopicOrGeographicOrTemporal
argument_list|()
argument_list|,
name|keywords
argument_list|)
argument_list|)
expr_stmt|;
name|identifierDefinition
operator|.
name|ifPresent
argument_list|(
name|identifier
lambda|->
name|parseIdentifier
argument_list|(
name|fields
argument_list|,
name|identifier
argument_list|,
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|titleInfoDefinition
operator|.
name|ifPresent
argument_list|(
name|titleInfo
lambda|->
name|parseTitle
argument_list|(
name|fields
argument_list|,
name|titleInfo
operator|.
name|getTitleOrSubTitleOrPartNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//The element subject can appear more than one time, that's why the keywords has to be put out of the for loop
name|putIfListIsNotEmpty
argument_list|(
name|fields
argument_list|,
name|keywords
argument_list|,
name|FieldName
operator|.
name|KEYWORDS
argument_list|,
name|KEYWORD_SEPARATOR
argument_list|)
expr_stmt|;
comment|//same goes for authors and notes
name|putIfListIsNotEmpty
argument_list|(
name|fields
argument_list|,
name|authors
argument_list|,
name|FieldName
operator|.
name|AUTHOR
argument_list|,
literal|" and "
argument_list|)
expr_stmt|;
name|putIfListIsNotEmpty
argument_list|(
name|fields
argument_list|,
name|notes
argument_list|,
name|FieldName
operator|.
name|NOTE
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
DECL|method|parseTitle (Map<String, String> fields, List<Object> titleOrSubTitleOrPartNumber)
specifier|private
name|void
name|parseTitle
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|titleOrSubTitleOrPartNumber
parameter_list|)
block|{
for|for
control|(
name|Object
name|object
range|:
name|titleOrSubTitleOrPartNumber
control|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|JAXBElement
condition|)
block|{
name|JAXBElement
argument_list|<
name|StringPlusLanguage
argument_list|>
name|element
init|=
operator|(
name|JAXBElement
argument_list|<
name|StringPlusLanguage
argument_list|>
operator|)
name|object
decl_stmt|;
if|if
condition|(
literal|"title"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|StringPlusLanguage
name|title
init|=
name|element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
name|title
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|parseIdentifier (Map<String, String> fields, IdentifierDefinition identifier, BibEntry entry)
specifier|private
name|void
name|parseIdentifier
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|IdentifierDefinition
name|identifier
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
block|{
name|String
name|type
init|=
name|identifier
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"citekey"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|entry
operator|.
name|setCiteKey
argument_list|(
name|identifier
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
literal|"local"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
literal|"citekey"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|//put all identifiers (doi, issn, isbn,...) except of local and citekey
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|identifier
operator|.
name|getType
argument_list|()
argument_list|,
name|identifier
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseTopic (Map<String, String> fields, List<JAXBElement<?>> topicOrGeographicOrTemporal, List<String> keywords)
specifier|private
name|void
name|parseTopic
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|JAXBElement
argument_list|<
name|?
argument_list|>
argument_list|>
name|topicOrGeographicOrTemporal
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keywords
parameter_list|)
block|{
for|for
control|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
range|:
name|topicOrGeographicOrTemporal
control|)
block|{
name|Object
name|value
init|=
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|elementName
init|=
name|jaxbElement
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|HierarchicalGeographicDefinition
condition|)
block|{
name|HierarchicalGeographicDefinition
name|hierarchichalGeographic
init|=
operator|(
name|HierarchicalGeographicDefinition
operator|)
name|value
decl_stmt|;
name|parseGeographicInformation
argument_list|(
name|fields
argument_list|,
name|hierarchichalGeographic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|value
operator|instanceof
name|StringPlusLanguagePlusAuthority
operator|)
operator|&&
literal|"topic"
operator|.
name|equals
argument_list|(
name|elementName
argument_list|)
condition|)
block|{
name|StringPlusLanguagePlusAuthority
name|topic
init|=
operator|(
name|StringPlusLanguagePlusAuthority
operator|)
name|value
decl_stmt|;
name|keywords
operator|.
name|add
argument_list|(
name|topic
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns an Optional which contains an instance of the given class, if the given element can be cast to this class.      * If the element can not be cast to the given class, then an empty optional will be returned.      *      * @param groupElement The element that should be cast      * @param clazz        The class to which groupElement should be cast      * @return An Optional, that contains the groupElement as instance of clazz, if groupElement can be cast to clazz.      * An empty Optional, if groupElement can not be cast to clazz      */
DECL|method|getElement (Object groupElement, Class<T> clazz)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|getElement
parameter_list|(
name|Object
name|groupElement
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|groupElement
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|clazz
operator|.
name|cast
argument_list|(
name|groupElement
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|parseGeographicInformation (Map<String, String> fields, HierarchicalGeographicDefinition hierarchichalGeographic)
specifier|private
name|void
name|parseGeographicInformation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|HierarchicalGeographicDefinition
name|hierarchichalGeographic
parameter_list|)
block|{
name|List
argument_list|<
name|JAXBElement
argument_list|<
name|?
extends|extends
name|StringPlusLanguage
argument_list|>
argument_list|>
name|areaOrContinentOrCountry
init|=
name|hierarchichalGeographic
operator|.
name|getExtraTerrestrialAreaOrContinentOrCountry
argument_list|()
decl_stmt|;
for|for
control|(
name|JAXBElement
argument_list|<
name|?
extends|extends
name|StringPlusLanguage
argument_list|>
name|element
range|:
name|areaOrContinentOrCountry
control|)
block|{
name|String
name|localName
init|=
name|element
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"city"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|StringPlusLanguage
name|city
init|=
name|element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"city"
argument_list|,
name|city
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"country"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|StringPlusLanguage
name|country
init|=
name|element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"country"
argument_list|,
name|country
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseLocationAndUrl (Map<String, String> fields, LocationDefinition locationDefinition)
specifier|private
name|void
name|parseLocationAndUrl
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|LocationDefinition
name|locationDefinition
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|locations
init|=
name|locationDefinition
operator|.
name|getPhysicalLocation
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|PhysicalLocationDefinition
operator|::
name|getValue
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|putIfListIsNotEmpty
argument_list|(
name|fields
argument_list|,
name|locations
argument_list|,
name|FieldName
operator|.
name|LOCATION
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|urls
init|=
name|locationDefinition
operator|.
name|getUrl
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|UrlDefinition
operator|::
name|getValue
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|putIfListIsNotEmpty
argument_list|(
name|fields
argument_list|,
name|urls
argument_list|,
name|FieldName
operator|.
name|URL
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
DECL|method|parseRecordInfo (Map<String, String> fields, RecordInfoDefinition recordInfo)
specifier|private
name|void
name|parseRecordInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|RecordInfoDefinition
name|recordInfo
parameter_list|)
block|{
name|List
argument_list|<
name|JAXBElement
argument_list|<
name|?
argument_list|>
argument_list|>
name|recordContent
init|=
name|recordInfo
operator|.
name|getRecordContentSourceOrRecordCreationDateOrRecordChangeDate
argument_list|()
decl_stmt|;
for|for
control|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
range|:
name|recordContent
control|)
block|{
name|Object
name|value
init|=
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|StringPlusLanguagePlusAuthority
condition|)
block|{
name|StringPlusLanguagePlusAuthority
name|source
init|=
operator|(
name|StringPlusLanguagePlusAuthority
operator|)
name|value
decl_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"source"
argument_list|,
name|source
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|LanguageDefinition
condition|)
block|{
name|LanguageDefinition
name|language
init|=
operator|(
name|LanguageDefinition
operator|)
name|value
decl_stmt|;
name|List
argument_list|<
name|LanguageTermDefinition
argument_list|>
name|languageTerms
init|=
name|language
operator|.
name|getLanguageTerm
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|languages
init|=
name|languageTerms
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|LanguageTermDefinition
operator|::
name|getValue
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|putIfListIsNotEmpty
argument_list|(
name|fields
argument_list|,
name|languages
argument_list|,
name|FieldName
operator|.
name|LANGUAGE
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Puts the Information from the RelatedModsGroup. It has the same elements like the ModsGroup.      * But Informations like volume, issue and the pages appear here instead of in the ModsGroup.      * Also if there appears a title field, then this indicates that is the name of journal which the article belongs to.      */
DECL|method|parseRelatedModsGroup (Map<String, String> fields, List<Object> relatedModsGroup)
specifier|private
name|void
name|parseRelatedModsGroup
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|relatedModsGroup
parameter_list|)
block|{
for|for
control|(
name|Object
name|groupElement
range|:
name|relatedModsGroup
control|)
block|{
if|if
condition|(
name|groupElement
operator|instanceof
name|PartDefinition
condition|)
block|{
name|PartDefinition
name|part
init|=
operator|(
name|PartDefinition
operator|)
name|groupElement
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|detailOrExtentOrDate
init|=
name|part
operator|.
name|getDetailOrExtentOrDate
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|detailOrExtentOrDate
control|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|DetailDefinition
condition|)
block|{
name|DetailDefinition
name|detail
init|=
operator|(
name|DetailDefinition
operator|)
name|object
decl_stmt|;
name|List
argument_list|<
name|JAXBElement
argument_list|<
name|StringPlusLanguage
argument_list|>
argument_list|>
name|numberOrCaptionOrTitle
init|=
name|detail
operator|.
name|getNumberOrCaptionOrTitle
argument_list|()
decl_stmt|;
comment|//In the for loop should only be the value of the element that belongs to the detail not be null
for|for
control|(
name|JAXBElement
argument_list|<
name|StringPlusLanguage
argument_list|>
name|jaxbElement
range|:
name|numberOrCaptionOrTitle
control|)
block|{
name|StringPlusLanguage
name|value
init|=
name|jaxbElement
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|//put details like volume, issue,...
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|detail
operator|.
name|getType
argument_list|()
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|ExtentDefinition
condition|)
block|{
name|ExtentDefinition
name|extentDefinition
init|=
operator|(
name|ExtentDefinition
operator|)
name|object
decl_stmt|;
name|putPageInformation
argument_list|(
name|extentDefinition
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|groupElement
operator|instanceof
name|TitleInfoDefinition
condition|)
block|{
name|TitleInfoDefinition
name|titleInfo
init|=
operator|(
name|TitleInfoDefinition
operator|)
name|groupElement
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|titleOrSubTitleOrPartNumber
init|=
name|titleInfo
operator|.
name|getTitleOrSubTitleOrPartNumber
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|titleOrSubTitleOrPartNumber
control|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|JAXBElement
condition|)
block|{
name|JAXBElement
argument_list|<
name|StringPlusLanguage
argument_list|>
name|element
init|=
operator|(
name|JAXBElement
argument_list|<
name|StringPlusLanguage
argument_list|>
operator|)
name|object
decl_stmt|;
if|if
condition|(
literal|"title"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|StringPlusLanguage
name|journal
init|=
name|element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|JOURNAL
argument_list|,
name|journal
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|putPageInformation (ExtentDefinition extentDefinition, Map<String, String> fields)
specifier|private
name|void
name|putPageInformation
parameter_list|(
name|ExtentDefinition
name|extentDefinition
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|)
block|{
if|if
condition|(
name|extentDefinition
operator|.
name|getTotal
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|PAGES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|extentDefinition
operator|.
name|getTotal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extentDefinition
operator|.
name|getStart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|PAGES
argument_list|,
name|extentDefinition
operator|.
name|getStart
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|extentDefinition
operator|.
name|getEnd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|endPage
init|=
name|extentDefinition
operator|.
name|getEnd
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|//if end appears, then there has to be a start page appeared, so get it and put it together with
comment|//the end page
name|String
name|startPage
init|=
name|fields
operator|.
name|get
argument_list|(
name|FieldName
operator|.
name|PAGES
argument_list|)
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|PAGES
argument_list|,
name|startPage
operator|+
literal|"-"
operator|+
name|endPage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|putPlaceOrPublisherOrDate (Map<String, String> fields, String elementName, Object object)
specifier|private
name|void
name|putPlaceOrPublisherOrDate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|String
name|elementName
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|Optional
argument_list|<
name|IssuanceDefinition
argument_list|>
name|issuanceDefinition
init|=
name|getElement
argument_list|(
name|object
argument_list|,
name|IssuanceDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|PlaceDefinition
argument_list|>
name|placeDefinition
init|=
name|getElement
argument_list|(
name|object
argument_list|,
name|PlaceDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|DateDefinition
argument_list|>
name|dateDefinition
init|=
name|getElement
argument_list|(
name|object
argument_list|,
name|DateDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|StringPlusLanguagePlusSupplied
argument_list|>
name|publisherOrEdition
init|=
name|getElement
argument_list|(
name|object
argument_list|,
name|StringPlusLanguagePlusSupplied
operator|.
name|class
argument_list|)
decl_stmt|;
name|issuanceDefinition
operator|.
name|ifPresent
argument_list|(
name|issuance
lambda|->
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"issuance"
argument_list|,
name|issuance
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|places
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|placeDefinition
operator|.
name|ifPresent
argument_list|(
name|place
lambda|->
name|place
operator|.
name|getPlaceTerm
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|placeTerm
lambda|->
name|placeTerm
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|map
argument_list|(
name|PlaceTermDefinition
operator|::
name|getValue
argument_list|)
operator|.
name|forEach
argument_list|(
name|element
lambda|->
name|places
operator|.
name|add
argument_list|(
name|element
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|putIfListIsNotEmpty
argument_list|(
name|fields
argument_list|,
name|places
argument_list|,
name|FieldName
operator|.
name|ADDRESS
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
name|dateDefinition
operator|.
name|ifPresent
argument_list|(
name|date
lambda|->
name|putDate
argument_list|(
name|fields
argument_list|,
name|elementName
argument_list|,
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|publisherOrEdition
operator|.
name|ifPresent
argument_list|(
name|pubOrEd
lambda|->
name|putPublisherOrEdition
argument_list|(
name|fields
argument_list|,
name|elementName
argument_list|,
name|pubOrEd
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|putPublisherOrEdition (Map<String, String> fields, String elementName, StringPlusLanguagePlusSupplied pubOrEd)
specifier|private
name|void
name|putPublisherOrEdition
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|String
name|elementName
parameter_list|,
name|StringPlusLanguagePlusSupplied
name|pubOrEd
parameter_list|)
block|{
if|if
condition|(
literal|"publisher"
operator|.
name|equals
argument_list|(
name|elementName
argument_list|)
condition|)
block|{
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|PUBLISHER
argument_list|,
name|pubOrEd
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"edition"
operator|.
name|equals
argument_list|(
name|elementName
argument_list|)
condition|)
block|{
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|EDITION
argument_list|,
name|pubOrEd
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putDate (Map<String, String> fields, String elementName, DateDefinition date)
specifier|private
name|void
name|putDate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|String
name|elementName
parameter_list|,
name|DateDefinition
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|elementName
condition|)
block|{
case|case
literal|"dateIssued"
case|:
comment|//The first 4 digits of dateIssued should be the year
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
name|date
operator|.
name|getValue
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"dateCreated"
case|:
comment|//If there was no year in date issued, then take the year from date created
if|if
condition|(
name|fields
operator|.
name|get
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|)
operator|==
literal|null
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
name|date
operator|.
name|getValue
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|put
argument_list|(
literal|"created"
argument_list|,
name|date
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"dateCaptured"
case|:
name|fields
operator|.
name|put
argument_list|(
literal|"captured"
argument_list|,
name|date
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"dateModified"
case|:
name|fields
operator|.
name|put
argument_list|(
literal|"modified"
argument_list|,
name|date
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
DECL|method|putIfListIsNotEmpty (Map<String, String> fields, List<String> list, String key, String separator)
specifier|private
name|void
name|putIfListIsNotEmpty
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
name|separator
argument_list|)
operator|.
name|join
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleAuthorsInNamePart (NameDefinition name, List<String> authors, Map<String, String> fields)
specifier|private
name|void
name|handleAuthorsInNamePart
parameter_list|(
name|NameDefinition
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|authors
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|List
argument_list|<
name|JAXBElement
argument_list|<
name|?
argument_list|>
argument_list|>
name|namePartOrDisplayFormOrAffiliation
init|=
name|name
operator|.
name|getNamePartOrDisplayFormOrAffiliation
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|foreName
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|familyName
init|=
literal|""
decl_stmt|;
name|String
name|author
init|=
literal|""
decl_stmt|;
for|for
control|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|element
range|:
name|namePartOrDisplayFormOrAffiliation
control|)
block|{
name|Object
name|value
init|=
name|element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|elementName
init|=
name|element
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|NamePartDefinition
condition|)
block|{
name|NamePartDefinition
name|namePart
init|=
operator|(
name|NamePartDefinition
operator|)
name|value
decl_stmt|;
name|String
name|type
init|=
name|namePart
operator|.
name|getAtType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|type
operator|==
literal|null
operator|)
operator|&&
operator|(
name|namePart
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|authors
operator|.
name|add
argument_list|(
name|namePart
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"family"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
operator|(
name|namePart
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
comment|//family should come first, so if family appears we can set the author then comes before
comment|//we have to check if forename and family name are not empty in case it's the first author
if|if
condition|(
operator|!
name|foreName
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|familyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//now set and add the old author
name|author
operator|=
name|familyName
operator|+
literal|", "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|foreName
argument_list|)
expr_stmt|;
name|authors
operator|.
name|add
argument_list|(
name|author
argument_list|)
expr_stmt|;
comment|//remove old forenames
name|foreName
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|foreName
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|familyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|authors
operator|.
name|add
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
block|}
name|familyName
operator|=
name|namePart
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"given"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
operator|(
name|namePart
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|foreName
operator|.
name|add
argument_list|(
name|namePart
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|value
operator|instanceof
name|StringPlusLanguage
operator|)
operator|&&
literal|"affiliation"
operator|.
name|equals
argument_list|(
name|elementName
argument_list|)
condition|)
block|{
name|StringPlusLanguage
name|affiliation
init|=
operator|(
name|StringPlusLanguage
operator|)
name|value
decl_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"affiliation"
argument_list|,
name|affiliation
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//last author is not added, so do it here
if|if
condition|(
operator|!
name|foreName
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|familyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|author
operator|=
name|familyName
operator|+
literal|", "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|foreName
argument_list|)
expr_stmt|;
name|authors
operator|.
name|add
argument_list|(
name|author
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|foreName
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|foreName
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|familyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|authors
operator|.
name|add
argument_list|(
name|familyName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putIfValueNotNull (Map<String, String> fields, String modsKey, String value)
specifier|private
name|void
name|putIfValueNotNull
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|String
name|modsKey
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|modsKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"MODS"
return|;
block|}
annotation|@
name|Override
DECL|method|getExtensions ()
specifier|public
name|FileExtensions
name|getExtensions
parameter_list|()
block|{
return|return
name|FileExtensions
operator|.
name|MODS
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Importer for the MODS format"
return|;
block|}
block|}
end_class

end_unit

