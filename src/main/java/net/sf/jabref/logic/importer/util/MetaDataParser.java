begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.importer.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|FieldFormatterCleanups
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|GroupsParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|MetaDataParser
specifier|public
class|class
name|MetaDataParser
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetaDataParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|parse (Map<String, String> data, String keywordSeparator)
specifier|public
specifier|static
name|MetaData
name|parse
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
parameter_list|,
name|String
name|keywordSeparator
parameter_list|)
throws|throws
name|ParseException
block|{
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|()
decl_stmt|;
name|metaData
operator|.
name|setParsedData
argument_list|(
name|getParsedData
argument_list|(
name|data
argument_list|,
name|keywordSeparator
argument_list|,
name|metaData
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|metaData
return|;
block|}
DECL|method|getParsedData (Map<String, String> inData, String keywordSeparator, MetaData metaData)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getParsedData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inData
parameter_list|,
name|String
name|keywordSeparator
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
throws|throws
name|ParseException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|newMetaData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|inData
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StringReader
name|data
init|=
operator|new
name|StringReader
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|orderedData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// We must allow for ; and \ in escape sequences.
try|try
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|unit
decl_stmt|;
while|while
condition|(
operator|(
name|unit
operator|=
name|getNextUnit
argument_list|(
name|data
argument_list|)
operator|)
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|orderedData
operator|.
name|add
argument_list|(
name|unit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Weird error while parsing meta data."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MetaData
operator|.
name|GROUPSTREE
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|metaData
operator|.
name|setGroups
argument_list|(
name|GroupsParser
operator|.
name|importGroups
argument_list|(
name|orderedData
argument_list|,
name|keywordSeparator
argument_list|)
argument_list|)
expr_stmt|;
comment|// the keys "groupsversion" and "groups" were used in JabRef versions around 1.3, we will not support them anymore
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Group tree could not be parsed. If you save the BibTeX database, all groups will be lost."
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|MetaData
operator|.
name|SAVE_ACTIONS
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|newMetaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|SAVE_ACTIONS
argument_list|,
name|FieldFormatterCleanups
operator|.
name|parse
argument_list|(
name|orderedData
argument_list|)
operator|.
name|getAsStringList
argument_list|()
argument_list|)
expr_stmt|;
comment|// Without MetaDataChangedEvent
block|}
else|else
block|{
name|newMetaData
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|orderedData
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newMetaData
return|;
block|}
comment|/**      * Reads the next unit. Units are delimited by ';' (MetaData.SEPARATOR_CHARACTER).      */
DECL|method|getNextUnit (Reader reader)
specifier|private
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|getNextUnit
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|c
decl_stmt|;
name|boolean
name|escape
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|res
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|escape
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
name|escape
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
name|MetaData
operator|.
name|ESCAPE_CHARACTER
condition|)
block|{
name|escape
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
name|MetaData
operator|.
name|SEPARATOR_CHARACTER
condition|)
block|{
break|break;
block|}
else|else
block|{
name|res
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|res
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|res
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

