begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.importer
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabases
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_class
DECL|class|ParserResult
specifier|public
class|class
name|ParserResult
block|{
DECL|field|NULL_RESULT
specifier|private
specifier|static
specifier|final
name|ParserResult
name|NULL_RESULT
init|=
operator|new
name|ParserResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|base
specifier|private
specifier|final
name|BibDatabase
name|base
decl_stmt|;
DECL|field|metaData
specifier|private
name|MetaData
name|metaData
decl_stmt|;
DECL|field|entryTypes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|EntryType
argument_list|>
name|entryTypes
decl_stmt|;
DECL|field|bibDatabaseContext
specifier|private
name|BibDatabaseContext
name|bibDatabaseContext
decl_stmt|;
DECL|field|file
specifier|private
name|File
name|file
decl_stmt|;
DECL|field|warnings
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|warnings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|duplicateKeys
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|duplicateKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|errorMessage
specifier|private
name|String
name|errorMessage
decl_stmt|;
DECL|field|invalid
specifier|private
name|boolean
name|invalid
decl_stmt|;
DECL|field|toOpenTab
specifier|private
name|boolean
name|toOpenTab
decl_stmt|;
DECL|method|ParserResult ()
specifier|public
name|ParserResult
parameter_list|()
block|{
name|this
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ParserResult (Collection<BibEntry> entries)
specifier|public
name|ParserResult
parameter_list|(
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|this
argument_list|(
name|BibDatabases
operator|.
name|createDatabase
argument_list|(
name|BibDatabases
operator|.
name|purgeEmptyEntries
argument_list|(
name|entries
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ParserResult (BibDatabase database)
specifier|public
name|ParserResult
parameter_list|(
name|BibDatabase
name|database
parameter_list|)
block|{
name|this
argument_list|(
name|database
argument_list|,
operator|new
name|MetaData
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ParserResult (BibDatabase base, MetaData metaData, Map<String, EntryType> entryTypes)
specifier|public
name|ParserResult
parameter_list|(
name|BibDatabase
name|base
parameter_list|,
name|MetaData
name|metaData
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|EntryType
argument_list|>
name|entryTypes
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
name|this
operator|.
name|entryTypes
operator|=
name|entryTypes
expr_stmt|;
if|if
condition|(
name|Objects
operator|.
name|nonNull
argument_list|(
name|base
argument_list|)
operator|&&
name|Objects
operator|.
name|nonNull
argument_list|(
name|metaData
argument_list|)
condition|)
block|{
name|this
operator|.
name|bibDatabaseContext
operator|=
operator|new
name|BibDatabaseContext
argument_list|(
name|base
argument_list|,
name|metaData
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fromErrorMessage (String message)
specifier|public
specifier|static
name|ParserResult
name|fromErrorMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|ParserResult
name|parserResult
init|=
operator|new
name|ParserResult
argument_list|()
decl_stmt|;
name|parserResult
operator|.
name|addWarning
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|parserResult
return|;
block|}
comment|/**      * Check if this base is marked to be added to the currently open tab. Default is false.      *      * @return      */
DECL|method|toOpenTab ()
specifier|public
name|boolean
name|toOpenTab
parameter_list|()
block|{
return|return
name|toOpenTab
return|;
block|}
DECL|method|setToOpenTab (boolean toOpenTab)
specifier|public
name|void
name|setToOpenTab
parameter_list|(
name|boolean
name|toOpenTab
parameter_list|)
block|{
name|this
operator|.
name|toOpenTab
operator|=
name|toOpenTab
expr_stmt|;
block|}
DECL|method|getDatabase ()
specifier|public
name|BibDatabase
name|getDatabase
parameter_list|()
block|{
return|return
name|base
return|;
block|}
DECL|method|getMetaData ()
specifier|public
name|MetaData
name|getMetaData
parameter_list|()
block|{
return|return
name|metaData
return|;
block|}
DECL|method|setMetaData (MetaData md)
specifier|public
name|void
name|setMetaData
parameter_list|(
name|MetaData
name|md
parameter_list|)
block|{
name|this
operator|.
name|metaData
operator|=
name|md
expr_stmt|;
block|}
DECL|method|getEntryTypes ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|EntryType
argument_list|>
name|getEntryTypes
parameter_list|()
block|{
return|return
name|entryTypes
return|;
block|}
DECL|method|getFile ()
specifier|public
name|Optional
argument_list|<
name|File
argument_list|>
name|getFile
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|file
argument_list|)
return|;
block|}
DECL|method|setFile (File f)
specifier|public
name|void
name|setFile
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|file
operator|=
name|f
expr_stmt|;
block|}
comment|/**      * Add a parser warning.      *      * @param s String Warning text. Must be pretranslated. Only added if there isn't already a dupe.      */
DECL|method|addWarning (String s)
specifier|public
name|void
name|addWarning
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
operator|!
name|warnings
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|warnings
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hasWarnings ()
specifier|public
name|boolean
name|hasWarnings
parameter_list|()
block|{
return|return
operator|!
name|warnings
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|warnings ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|warnings
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|warnings
argument_list|)
return|;
block|}
comment|/**      * Add a key to the list of duplicated BibTeX keys found in the database.      *      * @param key The duplicated key      */
DECL|method|addDuplicateKey (String key)
specifier|public
name|void
name|addDuplicateKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|duplicateKeys
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|duplicateKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Query whether any duplicated BibTeX keys have been found in the database.      *      * @return true if there is at least one duplicate key.      */
DECL|method|hasDuplicateKeys ()
specifier|public
name|boolean
name|hasDuplicateKeys
parameter_list|()
block|{
return|return
operator|!
name|duplicateKeys
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Get all duplicated keys found in the database.      *      * @return A list containing the duplicated keys.      */
DECL|method|getDuplicateKeys ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDuplicateKeys
parameter_list|()
block|{
return|return
name|duplicateKeys
return|;
block|}
DECL|method|isInvalid ()
specifier|public
name|boolean
name|isInvalid
parameter_list|()
block|{
return|return
name|invalid
return|;
block|}
DECL|method|setInvalid (boolean invalid)
specifier|public
name|void
name|setInvalid
parameter_list|(
name|boolean
name|invalid
parameter_list|)
block|{
name|this
operator|.
name|invalid
operator|=
name|invalid
expr_stmt|;
block|}
DECL|method|getErrorMessage ()
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
return|return
name|errorMessage
return|;
block|}
DECL|method|setErrorMessage (String errorMessage)
specifier|public
name|void
name|setErrorMessage
parameter_list|(
name|String
name|errorMessage
parameter_list|)
block|{
name|this
operator|.
name|errorMessage
operator|=
name|errorMessage
expr_stmt|;
block|}
DECL|method|getDatabaseContext ()
specifier|public
name|BibDatabaseContext
name|getDatabaseContext
parameter_list|()
block|{
if|if
condition|(
name|Objects
operator|.
name|isNull
argument_list|(
name|this
operator|.
name|bibDatabaseContext
argument_list|)
condition|)
block|{
name|this
operator|.
name|bibDatabaseContext
operator|=
operator|new
name|BibDatabaseContext
argument_list|(
name|base
argument_list|,
name|metaData
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|bibDatabaseContext
return|;
block|}
DECL|method|setDatabaseContext (BibDatabaseContext bibDatabaseContext)
specifier|public
name|void
name|setDatabaseContext
parameter_list|(
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|bibDatabaseContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|bibDatabaseContext
operator|=
name|bibDatabaseContext
expr_stmt|;
block|}
DECL|method|hasDatabaseContext ()
specifier|public
name|boolean
name|hasDatabaseContext
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|nonNull
argument_list|(
name|this
operator|.
name|bibDatabaseContext
argument_list|)
return|;
block|}
DECL|method|isNullResult ()
specifier|public
name|boolean
name|isNullResult
parameter_list|()
block|{
return|return
name|this
operator|==
name|NULL_RESULT
return|;
block|}
DECL|method|getNullResult ()
specifier|public
specifier|static
name|ParserResult
name|getNullResult
parameter_list|()
block|{
return|return
name|NULL_RESULT
return|;
block|}
block|}
end_class

end_unit

