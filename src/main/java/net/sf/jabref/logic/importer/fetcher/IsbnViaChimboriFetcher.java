begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.importer.fetcher
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|FetcherException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mashape
operator|.
name|unirest
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mashape
operator|.
name|unirest
operator|.
name|http
operator|.
name|Unirest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mashape
operator|.
name|unirest
operator|.
name|http
operator|.
name|exceptions
operator|.
name|UnirestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|helper
operator|.
name|StringUtil
import|;
end_import

begin_comment
comment|/**  * Fetcher for ISBN using https://bibtex.chimbori.com/, which in turn uses Amazon's API.  */
end_comment

begin_class
DECL|class|IsbnViaChimboriFetcher
specifier|public
class|class
name|IsbnViaChimboriFetcher
extends|extends
name|AbstractIsbnFetcher
block|{
DECL|method|IsbnViaChimboriFetcher (ImportFormatPreferences importFormatPreferences)
specifier|public
name|IsbnViaChimboriFetcher
parameter_list|(
name|ImportFormatPreferences
name|importFormatPreferences
parameter_list|)
block|{
name|super
argument_list|(
name|importFormatPreferences
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"ISBN (Chimbori/Amazon)"
return|;
block|}
comment|/**      * @return null, because the identifier is passed using form data. This method is not used.      */
annotation|@
name|Override
DECL|method|getURLForID (String identifier)
specifier|public
name|URL
name|getURLForID
parameter_list|(
name|String
name|identifier
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|MalformedURLException
throws|,
name|FetcherException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|performSearchById (String identifier)
specifier|public
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|performSearchById
parameter_list|(
name|String
name|identifier
parameter_list|)
throws|throws
name|FetcherException
block|{
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|identifier
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|this
operator|.
name|ensureThatIsbnIsValid
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|HttpResponse
argument_list|<
name|String
argument_list|>
name|postResponse
decl_stmt|;
try|try
block|{
name|postResponse
operator|=
name|Unirest
operator|.
name|post
argument_list|(
literal|"https://bibtex.chimbori.com/isbn-bibtex"
argument_list|)
operator|.
name|field
argument_list|(
literal|"isbn"
argument_list|,
name|identifier
argument_list|)
operator|.
name|asString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnirestException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FetcherException
argument_list|(
literal|"Could not retrieve data from chimbori.com"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|postResponse
operator|.
name|getStatus
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|FetcherException
argument_list|(
literal|"Error while retrieving data from chimbori.com: "
operator|+
name|postResponse
operator|.
name|getBody
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|BibEntry
argument_list|>
name|fetchedEntries
decl_stmt|;
try|try
block|{
name|fetchedEntries
operator|=
name|getParser
argument_list|()
operator|.
name|parseEntries
argument_list|(
name|postResponse
operator|.
name|getRawBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FetcherException
argument_list|(
literal|"An internal parser error occurred"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|fetchedEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|fetchedEntries
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Fetcher "
operator|+
name|getName
argument_list|()
operator|+
literal|"found more than one result for identifier "
operator|+
name|identifier
operator|+
literal|". We will use the first entry."
argument_list|)
expr_stmt|;
block|}
name|BibEntry
name|entry
init|=
name|fetchedEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// chimbori does not return an ISBN. Thus, we add the one searched for
name|entry
operator|.
name|setField
argument_list|(
literal|"isbn"
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
name|doPostCleanup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|entry
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doPostCleanup (BibEntry entry)
specifier|public
name|void
name|doPostCleanup
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
comment|// We MUST NOT clean the URL. this is the deal with @manastungare - see https://github.com/JabRef/jabref/issues/684#issuecomment-266541507
comment|// DO NOT add following code:
comment|// new FieldFormatterCleanup(FieldName.URL, new ClearFormatter()).cleanup(entry);
block|}
block|}
end_class

end_unit

