begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.importer.fileformat
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|Importer
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Abstract
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|AbstractText
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|AffiliationInfo
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|ArticleId
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|ArticleIdList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|ArticleTitle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Author
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|AuthorList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Book
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|BookDocument
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|BookTitle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Chemical
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|ContributionDate
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|DateCompleted
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|DateCreated
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|DateRevised
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|ELocationID
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|GeneSymbolList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|GeneralNote
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|ISSN
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Investigator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|InvestigatorList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|JournalIssue
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Keyword
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|KeywordList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|MedlineCitation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|MedlineJournalInfo
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|MeshHeading
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|MeshHeadingList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|OtherID
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Pagination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|PersonalNameSubject
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|PersonalNameSubjectList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|PubDate
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|PublicationType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Publisher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|PubmedArticle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|PubmedArticleSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|PubmedBookArticle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|PubmedBookArticleSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|PubmedBookData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|QualifierName
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Sections
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|medline
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|FileExtensions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Importer for the Medline/Pubmed format.  *<p>  * check here for details on the format  * https://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html  */
end_comment

begin_class
DECL|class|MedlineImporter
specifier|public
class|class
name|MedlineImporter
extends|extends
name|Importer
implements|implements
name|Parser
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MedlineImporter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|KEYWORD_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|KEYWORD_SEPARATOR
init|=
literal|"; "
decl_stmt|;
DECL|field|ENGLISH
specifier|private
specifier|static
specifier|final
name|Locale
name|ENGLISH
init|=
name|Locale
operator|.
name|ENGLISH
decl_stmt|;
DECL|method|join (List<String> list, String string)
specifier|private
specifier|static
name|String
name|join
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
name|String
name|string
parameter_list|)
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
name|string
argument_list|)
operator|.
name|join
argument_list|(
name|list
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Medline"
return|;
block|}
annotation|@
name|Override
DECL|method|getExtensions ()
specifier|public
name|FileExtensions
name|getExtensions
parameter_list|()
block|{
return|return
name|FileExtensions
operator|.
name|MEDLINE
return|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"medline"
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Importer for the Medline format."
return|;
block|}
annotation|@
name|Override
DECL|method|isRecognizedFormat (BufferedReader reader)
specifier|public
name|boolean
name|isRecognizedFormat
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|str
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
operator|(
name|str
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|i
operator|<
literal|50
operator|)
condition|)
block|{
if|if
condition|(
name|str
operator|.
name|toLowerCase
argument_list|(
name|ENGLISH
argument_list|)
operator|.
name|contains
argument_list|(
literal|"<pubmedarticle>"
argument_list|)
operator|||
name|str
operator|.
name|toLowerCase
argument_list|(
name|ENGLISH
argument_list|)
operator|.
name|contains
argument_list|(
literal|"<pubmedbookarticle>"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|importDatabase (BufferedReader reader)
specifier|public
name|ParserResult
name|importDatabase
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibItems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
literal|"net.sf.jabref.logic.importer.fileformat.medline"
argument_list|)
decl_stmt|;
name|XMLInputFactory
name|xmlInputFactory
init|=
name|XMLInputFactory
operator|.
name|newFactory
argument_list|()
decl_stmt|;
name|XMLStreamReader
name|xmlStreamReader
init|=
name|xmlInputFactory
operator|.
name|createXMLStreamReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
comment|//go to the root element
while|while
condition|(
operator|!
name|xmlStreamReader
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|xmlStreamReader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Object
name|unmarshalledObject
init|=
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|xmlStreamReader
argument_list|)
decl_stmt|;
comment|//check whether we have an article set, an article, a book article or a book article set
if|if
condition|(
name|unmarshalledObject
operator|instanceof
name|PubmedArticleSet
condition|)
block|{
name|PubmedArticleSet
name|articleSet
init|=
operator|(
name|PubmedArticleSet
operator|)
name|unmarshalledObject
decl_stmt|;
for|for
control|(
name|Object
name|article
range|:
name|articleSet
operator|.
name|getPubmedArticleOrPubmedBookArticle
argument_list|()
control|)
block|{
if|if
condition|(
name|article
operator|instanceof
name|PubmedArticle
condition|)
block|{
name|PubmedArticle
name|currentArticle
init|=
operator|(
name|PubmedArticle
operator|)
name|article
decl_stmt|;
name|parseArticle
argument_list|(
name|currentArticle
argument_list|,
name|bibItems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|article
operator|instanceof
name|PubmedBookArticle
condition|)
block|{
name|PubmedBookArticle
name|currentArticle
init|=
operator|(
name|PubmedBookArticle
operator|)
name|article
decl_stmt|;
name|parseBookArticle
argument_list|(
name|currentArticle
argument_list|,
name|bibItems
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|unmarshalledObject
operator|instanceof
name|PubmedArticle
condition|)
block|{
name|PubmedArticle
name|article
init|=
operator|(
name|PubmedArticle
operator|)
name|unmarshalledObject
decl_stmt|;
name|parseArticle
argument_list|(
name|article
argument_list|,
name|bibItems
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unmarshalledObject
operator|instanceof
name|PubmedBookArticle
condition|)
block|{
name|PubmedBookArticle
name|currentArticle
init|=
operator|(
name|PubmedBookArticle
operator|)
name|unmarshalledObject
decl_stmt|;
name|parseBookArticle
argument_list|(
name|currentArticle
argument_list|,
name|bibItems
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PubmedBookArticleSet
name|bookArticleSet
init|=
operator|(
name|PubmedBookArticleSet
operator|)
name|unmarshalledObject
decl_stmt|;
for|for
control|(
name|PubmedBookArticle
name|bookArticle
range|:
name|bookArticleSet
operator|.
name|getPubmedBookArticle
argument_list|()
control|)
block|{
name|parseBookArticle
argument_list|(
name|bookArticle
argument_list|,
name|bibItems
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JAXBException
decl||
name|XMLStreamException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"could not parse document"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|ParserResult
operator|.
name|fromError
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
operator|new
name|ParserResult
argument_list|(
name|bibItems
argument_list|)
return|;
block|}
DECL|method|parseBookArticle (PubmedBookArticle currentArticle, List<BibEntry> bibItems)
specifier|private
name|void
name|parseBookArticle
parameter_list|(
name|PubmedBookArticle
name|currentArticle
parameter_list|,
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibItems
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentArticle
operator|.
name|getBookDocument
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BookDocument
name|bookDocument
init|=
name|currentArticle
operator|.
name|getBookDocument
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|PMID
argument_list|,
name|bookDocument
operator|.
name|getPMID
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bookDocument
operator|.
name|getDateRevised
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DateRevised
name|dateRevised
init|=
name|bookDocument
operator|.
name|getDateRevised
argument_list|()
decl_stmt|;
name|addDateRevised
argument_list|(
name|fields
argument_list|,
name|dateRevised
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bookDocument
operator|.
name|getAbstract
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Abstract
name|abs
init|=
name|bookDocument
operator|.
name|getAbstract
argument_list|()
decl_stmt|;
name|addAbstract
argument_list|(
name|fields
argument_list|,
name|abs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bookDocument
operator|.
name|getPagination
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Pagination
name|pagination
init|=
name|bookDocument
operator|.
name|getPagination
argument_list|()
decl_stmt|;
name|addPagination
argument_list|(
name|fields
argument_list|,
name|pagination
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bookDocument
operator|.
name|getSections
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Sections
name|sections
init|=
name|bookDocument
operator|.
name|getSections
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|sections
operator|.
name|getSection
argument_list|()
control|)
block|{
for|for
control|(
name|Serializable
name|content
range|:
name|section
operator|.
name|getSectionTitle
argument_list|()
operator|.
name|getContent
argument_list|()
control|)
block|{
if|if
condition|(
name|content
operator|instanceof
name|String
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|content
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|fields
operator|.
name|put
argument_list|(
literal|"sections"
argument_list|,
name|join
argument_list|(
name|result
argument_list|,
literal|"; "
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bookDocument
operator|.
name|getKeywordList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addKeyWords
argument_list|(
name|fields
argument_list|,
name|bookDocument
operator|.
name|getKeywordList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bookDocument
operator|.
name|getContributionDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addContributionDate
argument_list|(
name|fields
argument_list|,
name|bookDocument
operator|.
name|getContributionDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bookDocument
operator|.
name|getPublicationType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PublicationType
name|type
range|:
name|bookDocument
operator|.
name|getPublicationType
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|type
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fields
operator|.
name|put
argument_list|(
literal|"pubtype"
argument_list|,
name|join
argument_list|(
name|result
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bookDocument
operator|.
name|getArticleTitle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ArticleTitle
name|articleTitle
init|=
name|bookDocument
operator|.
name|getArticleTitle
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|titles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Serializable
name|content
range|:
name|articleTitle
operator|.
name|getContent
argument_list|()
control|)
block|{
if|if
condition|(
name|content
operator|instanceof
name|String
condition|)
block|{
name|titles
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|content
argument_list|)
expr_stmt|;
block|}
block|}
name|fields
operator|.
name|put
argument_list|(
literal|"article"
argument_list|,
name|join
argument_list|(
name|titles
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bookDocument
operator|.
name|getBook
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addBookInformation
argument_list|(
name|fields
argument_list|,
name|bookDocument
operator|.
name|getBook
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentArticle
operator|.
name|getPubmedBookData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PubmedBookData
name|bookData
init|=
name|currentArticle
operator|.
name|getPubmedBookData
argument_list|()
decl_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"pubstatus"
argument_list|,
name|bookData
operator|.
name|getPublicationStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|(
literal|"article"
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|bibItems
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
DECL|method|addBookInformation (Map<String, String> fields, Book book)
specifier|private
name|void
name|addBookInformation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|Book
name|book
parameter_list|)
block|{
if|if
condition|(
name|book
operator|.
name|getPublisher
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Publisher
name|publisher
init|=
name|book
operator|.
name|getPublisher
argument_list|()
decl_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"publocation"
argument_list|,
name|publisher
operator|.
name|getPublisherLocation
argument_list|()
argument_list|)
expr_stmt|;
name|putStringFromSerializableList
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|PUBLISHER
argument_list|,
name|publisher
operator|.
name|getPublisherName
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|book
operator|.
name|getBookTitle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BookTitle
name|title
init|=
name|book
operator|.
name|getBookTitle
argument_list|()
decl_stmt|;
name|putStringFromSerializableList
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|TITLE
argument_list|,
name|title
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|book
operator|.
name|getPubDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addPubDate
argument_list|(
name|fields
argument_list|,
name|book
operator|.
name|getPubDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|book
operator|.
name|getAuthorList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|AuthorList
argument_list|>
name|authorLists
init|=
name|book
operator|.
name|getAuthorList
argument_list|()
decl_stmt|;
comment|//authorLists size should be one
if|if
condition|(
name|authorLists
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|AuthorList
name|authorList
range|:
name|authorLists
control|)
block|{
name|handleAuthors
argument_list|(
name|fields
argument_list|,
name|authorList
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Size of authorlist was %s"
argument_list|,
name|authorLists
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|VOLUME
argument_list|,
name|book
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|EDITION
argument_list|,
name|book
operator|.
name|getEdition
argument_list|()
argument_list|)
expr_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"medium"
argument_list|,
name|book
operator|.
name|getMedium
argument_list|()
argument_list|)
expr_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"reportnumber"
argument_list|,
name|book
operator|.
name|getReportNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|book
operator|.
name|getELocationID
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ELocationID
name|id
range|:
name|book
operator|.
name|getELocationID
argument_list|()
control|)
block|{
name|addElocationID
argument_list|(
name|fields
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|book
operator|.
name|getIsbn
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|ISBN
argument_list|,
name|join
argument_list|(
name|book
operator|.
name|getIsbn
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putStringFromSerializableList (Map<String, String> fields, String medlineKey, List<Serializable> contentList)
specifier|private
name|void
name|putStringFromSerializableList
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|String
name|medlineKey
parameter_list|,
name|List
argument_list|<
name|Serializable
argument_list|>
name|contentList
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Serializable
name|content
range|:
name|contentList
control|)
block|{
if|if
condition|(
name|content
operator|instanceof
name|String
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|content
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|medlineKey
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addContributionDate (Map<String, String> fields, ContributionDate contributionDate)
specifier|private
name|void
name|addContributionDate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|ContributionDate
name|contributionDate
parameter_list|)
block|{
if|if
condition|(
operator|(
name|contributionDate
operator|.
name|getDay
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|contributionDate
operator|.
name|getMonth
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|contributionDate
operator|.
name|getYear
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|String
name|result
init|=
name|convertToDateFormat
argument_list|(
name|contributionDate
operator|.
name|getYear
argument_list|()
argument_list|,
name|contributionDate
operator|.
name|getMonth
argument_list|()
argument_list|,
name|contributionDate
operator|.
name|getDay
argument_list|()
argument_list|)
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"contribution"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|convertToDateFormat (String year, String month, String day)
specifier|private
name|String
name|convertToDateFormat
parameter_list|(
name|String
name|year
parameter_list|,
name|String
name|month
parameter_list|,
name|String
name|day
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s-%s-%s"
argument_list|,
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
return|;
block|}
DECL|method|parseArticle (PubmedArticle article, List<BibEntry> bibItems)
specifier|private
name|void
name|parseArticle
parameter_list|(
name|PubmedArticle
name|article
parameter_list|,
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibItems
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|article
operator|.
name|getPubmedData
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|article
operator|.
name|getMedlineCitation
argument_list|()
operator|.
name|getDateRevised
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DateRevised
name|dateRevised
init|=
name|article
operator|.
name|getMedlineCitation
argument_list|()
operator|.
name|getDateRevised
argument_list|()
decl_stmt|;
name|addDateRevised
argument_list|(
name|fields
argument_list|,
name|dateRevised
argument_list|)
expr_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"pubstatus"
argument_list|,
name|article
operator|.
name|getPubmedData
argument_list|()
operator|.
name|getPublicationStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|article
operator|.
name|getPubmedData
argument_list|()
operator|.
name|getArticleIdList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ArticleIdList
name|articleIdList
init|=
name|article
operator|.
name|getPubmedData
argument_list|()
operator|.
name|getArticleIdList
argument_list|()
decl_stmt|;
name|addArticleIdList
argument_list|(
name|fields
argument_list|,
name|articleIdList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|article
operator|.
name|getMedlineCitation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|MedlineCitation
name|medlineCitation
init|=
name|article
operator|.
name|getMedlineCitation
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
name|medlineCitation
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|DateCreated
name|dateCreated
init|=
name|medlineCitation
operator|.
name|getDateCreated
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"created"
argument_list|,
name|convertToDateFormat
argument_list|(
name|dateCreated
operator|.
name|getYear
argument_list|()
argument_list|,
name|dateCreated
operator|.
name|getMonth
argument_list|()
argument_list|,
name|dateCreated
operator|.
name|getDay
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"pubmodel"
argument_list|,
name|medlineCitation
operator|.
name|getArticle
argument_list|()
operator|.
name|getPubModel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|medlineCitation
operator|.
name|getDateCompleted
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DateCompleted
name|dateCompleted
init|=
name|medlineCitation
operator|.
name|getDateCompleted
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"completed"
argument_list|,
name|convertToDateFormat
argument_list|(
name|dateCompleted
operator|.
name|getYear
argument_list|()
argument_list|,
name|dateCompleted
operator|.
name|getMonth
argument_list|()
argument_list|,
name|dateCompleted
operator|.
name|getDay
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|PMID
argument_list|,
name|medlineCitation
operator|.
name|getPMID
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|OWNER
argument_list|,
name|medlineCitation
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|addArticleInformation
argument_list|(
name|fields
argument_list|,
name|medlineCitation
operator|.
name|getArticle
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|MedlineJournalInfo
name|medlineJournalInfo
init|=
name|medlineCitation
operator|.
name|getMedlineJournalInfo
argument_list|()
decl_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"country"
argument_list|,
name|medlineJournalInfo
operator|.
name|getCountry
argument_list|()
argument_list|)
expr_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"journal-abbreviation"
argument_list|,
name|medlineJournalInfo
operator|.
name|getMedlineTA
argument_list|()
argument_list|)
expr_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"nlm-id"
argument_list|,
name|medlineJournalInfo
operator|.
name|getNlmUniqueID
argument_list|()
argument_list|)
expr_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"issn-linking"
argument_list|,
name|medlineJournalInfo
operator|.
name|getISSNLinking
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|medlineCitation
operator|.
name|getChemicalList
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|medlineCitation
operator|.
name|getChemicalList
argument_list|()
operator|.
name|getChemical
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addChemicals
argument_list|(
name|fields
argument_list|,
name|medlineCitation
operator|.
name|getChemicalList
argument_list|()
operator|.
name|getChemical
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|medlineCitation
operator|.
name|getCitationSubset
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
literal|"citation-subset"
argument_list|,
name|join
argument_list|(
name|medlineCitation
operator|.
name|getCitationSubset
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|medlineCitation
operator|.
name|getGeneSymbolList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addGeneSymbols
argument_list|(
name|fields
argument_list|,
name|medlineCitation
operator|.
name|getGeneSymbolList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|medlineCitation
operator|.
name|getMeshHeadingList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addMeashHeading
argument_list|(
name|fields
argument_list|,
name|medlineCitation
operator|.
name|getMeshHeadingList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"references"
argument_list|,
name|medlineCitation
operator|.
name|getNumberOfReferences
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|medlineCitation
operator|.
name|getPersonalNameSubjectList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addPersonalNames
argument_list|(
name|fields
argument_list|,
name|medlineCitation
operator|.
name|getPersonalNameSubjectList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|medlineCitation
operator|.
name|getOtherID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addOtherId
argument_list|(
name|fields
argument_list|,
name|medlineCitation
operator|.
name|getOtherID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|medlineCitation
operator|.
name|getKeywordList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addKeyWords
argument_list|(
name|fields
argument_list|,
name|medlineCitation
operator|.
name|getKeywordList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|medlineCitation
operator|.
name|getSpaceFlightMission
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
literal|"space-flight-mission"
argument_list|,
name|join
argument_list|(
name|medlineCitation
operator|.
name|getSpaceFlightMission
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|medlineCitation
operator|.
name|getInvestigatorList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addInvestigators
argument_list|(
name|fields
argument_list|,
name|medlineCitation
operator|.
name|getInvestigatorList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|medlineCitation
operator|.
name|getGeneralNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addNotes
argument_list|(
name|fields
argument_list|,
name|medlineCitation
operator|.
name|getGeneralNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|(
literal|"article"
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|bibItems
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
DECL|method|addArticleIdList (Map<String, String> fields, ArticleIdList articleIdList)
specifier|private
name|void
name|addArticleIdList
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|ArticleIdList
name|articleIdList
parameter_list|)
block|{
for|for
control|(
name|ArticleId
name|id
range|:
name|articleIdList
operator|.
name|getArticleId
argument_list|()
control|)
block|{
if|if
condition|(
name|id
operator|.
name|getIdType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"pubmed"
operator|.
name|equals
argument_list|(
name|id
operator|.
name|getIdType
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
literal|"pmid"
argument_list|,
name|id
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|.
name|put
argument_list|(
name|id
operator|.
name|getIdType
argument_list|()
argument_list|,
name|id
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addNotes (Map<String, String> fields, List<GeneralNote> generalNote)
specifier|private
name|void
name|addNotes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|GeneralNote
argument_list|>
name|generalNote
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|notes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|GeneralNote
name|note
range|:
name|generalNote
control|)
block|{
if|if
condition|(
name|note
operator|!=
literal|null
condition|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|note
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|NOTE
argument_list|,
name|join
argument_list|(
name|notes
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addInvestigators (Map<String, String> fields, InvestigatorList investigatorList)
specifier|private
name|void
name|addInvestigators
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|InvestigatorList
name|investigatorList
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|investigatorNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|affiliationInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|""
decl_stmt|;
comment|// add the investigators like the authors
if|if
condition|(
name|investigatorList
operator|.
name|getInvestigator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Investigator
argument_list|>
name|investigators
init|=
name|investigatorList
operator|.
name|getInvestigator
argument_list|()
decl_stmt|;
for|for
control|(
name|Investigator
name|investigator
range|:
name|investigators
control|)
block|{
name|name
operator|=
name|investigator
operator|.
name|getLastName
argument_list|()
expr_stmt|;
if|if
condition|(
name|investigator
operator|.
name|getForeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|+=
literal|", "
operator|+
name|investigator
operator|.
name|getForeName
argument_list|()
expr_stmt|;
block|}
name|investigatorNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|//now add the affiliation info
if|if
condition|(
name|investigator
operator|.
name|getAffiliationInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AffiliationInfo
name|info
range|:
name|investigator
operator|.
name|getAffiliationInfo
argument_list|()
control|)
block|{
for|for
control|(
name|Serializable
name|affiliation
range|:
name|info
operator|.
name|getAffiliation
argument_list|()
operator|.
name|getContent
argument_list|()
control|)
block|{
if|if
condition|(
name|affiliation
operator|instanceof
name|String
condition|)
block|{
name|affiliationInfos
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|affiliation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|fields
operator|.
name|put
argument_list|(
literal|"affiliation"
argument_list|,
name|join
argument_list|(
name|affiliationInfos
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|fields
operator|.
name|put
argument_list|(
literal|"investigator"
argument_list|,
name|join
argument_list|(
name|investigatorNames
argument_list|,
literal|" and "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addKeyWords (Map<String, String> fields, List<KeywordList> allKeywordLists)
specifier|private
name|void
name|addKeyWords
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|KeywordList
argument_list|>
name|allKeywordLists
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keywordStrings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//add keywords to the list
for|for
control|(
name|KeywordList
name|keywordList
range|:
name|allKeywordLists
control|)
block|{
for|for
control|(
name|Keyword
name|keyword
range|:
name|keywordList
operator|.
name|getKeyword
argument_list|()
control|)
block|{
for|for
control|(
name|Serializable
name|content
range|:
name|keyword
operator|.
name|getContent
argument_list|()
control|)
block|{
if|if
condition|(
name|content
operator|instanceof
name|String
condition|)
block|{
name|keywordStrings
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|content
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//Check whether MeshHeadingList exist or not
if|if
condition|(
name|fields
operator|.
name|get
argument_list|(
name|FieldName
operator|.
name|KEYWORDS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|KEYWORDS
argument_list|,
name|join
argument_list|(
name|keywordStrings
argument_list|,
name|KEYWORD_SEPARATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|keywordStrings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//if it exists, combine the MeshHeading with the keywords
name|String
name|result
init|=
name|join
argument_list|(
name|keywordStrings
argument_list|,
literal|"; "
argument_list|)
decl_stmt|;
name|result
operator|=
name|fields
operator|.
name|get
argument_list|(
name|FieldName
operator|.
name|KEYWORDS
argument_list|)
operator|+
name|KEYWORD_SEPARATOR
operator|+
name|result
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|KEYWORDS
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addOtherId (Map<String, String> fields, List<OtherID> otherID)
specifier|private
name|void
name|addOtherId
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|OtherID
argument_list|>
name|otherID
parameter_list|)
block|{
for|for
control|(
name|OtherID
name|id
range|:
name|otherID
control|)
block|{
if|if
condition|(
operator|(
name|id
operator|.
name|getSource
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|id
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|id
operator|.
name|getSource
argument_list|()
argument_list|,
name|id
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addPersonalNames (Map<String, String> fields, PersonalNameSubjectList personalNameSubjectList)
specifier|private
name|void
name|addPersonalNames
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|PersonalNameSubjectList
name|personalNameSubjectList
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|.
name|get
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|//if no authors appear, then add the personal names as authors
name|List
argument_list|<
name|String
argument_list|>
name|personalNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|personalNameSubjectList
operator|.
name|getPersonalNameSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|PersonalNameSubject
argument_list|>
name|personalNameSubject
init|=
name|personalNameSubjectList
operator|.
name|getPersonalNameSubject
argument_list|()
decl_stmt|;
for|for
control|(
name|PersonalNameSubject
name|personalName
range|:
name|personalNameSubject
control|)
block|{
name|String
name|name
init|=
name|personalName
operator|.
name|getLastName
argument_list|()
decl_stmt|;
if|if
condition|(
name|personalName
operator|.
name|getForeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|+=
literal|", "
operator|+
name|personalName
operator|.
name|getForeName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|personalNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
name|join
argument_list|(
name|personalNames
argument_list|,
literal|" and "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addMeashHeading (Map<String, String> fields, MeshHeadingList meshHeadingList)
specifier|private
name|void
name|addMeashHeading
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|MeshHeadingList
name|meshHeadingList
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keywords
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MeshHeading
name|keyword
range|:
name|meshHeadingList
operator|.
name|getMeshHeading
argument_list|()
control|)
block|{
name|String
name|result
init|=
name|keyword
operator|.
name|getDescriptorName
argument_list|()
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyword
operator|.
name|getQualifierName
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|QualifierName
name|qualifier
range|:
name|keyword
operator|.
name|getQualifierName
argument_list|()
control|)
block|{
name|result
operator|+=
literal|", "
operator|+
name|qualifier
operator|.
name|getContent
argument_list|()
expr_stmt|;
block|}
block|}
name|keywords
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|KEYWORDS
argument_list|,
name|join
argument_list|(
name|keywords
argument_list|,
name|KEYWORD_SEPARATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addGeneSymbols (Map<String, String> fields, GeneSymbolList geneSymbolList)
specifier|private
name|void
name|addGeneSymbols
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|GeneSymbolList
name|geneSymbolList
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|geneSymbols
init|=
name|geneSymbolList
operator|.
name|getGeneSymbol
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"gene-symbols"
argument_list|,
name|join
argument_list|(
name|geneSymbols
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addChemicals (Map<String, String> fields, List<Chemical> chemicals)
specifier|private
name|void
name|addChemicals
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|Chemical
argument_list|>
name|chemicals
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|chemicalNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Chemical
name|chemical
range|:
name|chemicals
control|)
block|{
if|if
condition|(
name|chemical
operator|!=
literal|null
condition|)
block|{
name|chemicalNames
operator|.
name|add
argument_list|(
name|chemical
operator|.
name|getNameOfSubstance
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fields
operator|.
name|put
argument_list|(
literal|"chemicals"
argument_list|,
name|join
argument_list|(
name|chemicalNames
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addArticleInformation (Map<String, String> fields, List<Object> content)
specifier|private
name|void
name|addArticleInformation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|content
parameter_list|)
block|{
for|for
control|(
name|Object
name|object
range|:
name|content
control|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Journal
condition|)
block|{
name|Journal
name|journal
init|=
operator|(
name|Journal
operator|)
name|object
decl_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|JOURNAL
argument_list|,
name|journal
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ISSN
name|issn
init|=
name|journal
operator|.
name|getISSN
argument_list|()
decl_stmt|;
if|if
condition|(
name|issn
operator|!=
literal|null
condition|)
block|{
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|ISSN
argument_list|,
name|issn
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JournalIssue
name|journalIssue
init|=
name|journal
operator|.
name|getJournalIssue
argument_list|()
decl_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|VOLUME
argument_list|,
name|journalIssue
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|ISSUE
argument_list|,
name|journalIssue
operator|.
name|getIssue
argument_list|()
argument_list|)
expr_stmt|;
name|addPubDate
argument_list|(
name|fields
argument_list|,
name|journalIssue
operator|.
name|getPubDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|ArticleTitle
condition|)
block|{
name|ArticleTitle
name|articleTitle
init|=
operator|(
name|ArticleTitle
operator|)
name|object
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
name|StringUtil
operator|.
name|stripBrackets
argument_list|(
name|articleTitle
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|Pagination
condition|)
block|{
name|Pagination
name|pagination
init|=
operator|(
name|Pagination
operator|)
name|object
decl_stmt|;
name|addPagination
argument_list|(
name|fields
argument_list|,
name|pagination
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|ELocationID
condition|)
block|{
name|ELocationID
name|eLocationID
init|=
operator|(
name|ELocationID
operator|)
name|object
decl_stmt|;
name|addElocationID
argument_list|(
name|fields
argument_list|,
name|eLocationID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|Abstract
condition|)
block|{
name|Abstract
name|abs
init|=
operator|(
name|Abstract
operator|)
name|object
decl_stmt|;
name|addAbstract
argument_list|(
name|fields
argument_list|,
name|abs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|AuthorList
condition|)
block|{
name|AuthorList
name|authors
init|=
operator|(
name|AuthorList
operator|)
name|object
decl_stmt|;
name|handleAuthors
argument_list|(
name|fields
argument_list|,
name|authors
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addElocationID (Map<String, String> fields, ELocationID eLocationID)
specifier|private
name|void
name|addElocationID
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|ELocationID
name|eLocationID
parameter_list|)
block|{
if|if
condition|(
name|FieldName
operator|.
name|DOI
operator|.
name|equals
argument_list|(
name|eLocationID
operator|.
name|getEIdType
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|,
name|eLocationID
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"pii"
operator|.
name|equals
argument_list|(
name|eLocationID
operator|.
name|getEIdType
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
literal|"pii"
argument_list|,
name|eLocationID
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addPubDate (Map<String, String> fields, PubDate pubDate)
specifier|private
name|void
name|addPubDate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|PubDate
name|pubDate
parameter_list|)
block|{
if|if
condition|(
name|pubDate
operator|.
name|getYear
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//if year of the pubdate is null, the medlineDate shouldn't be null
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
name|extractYear
argument_list|(
name|pubDate
operator|.
name|getMedlineDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
name|pubDate
operator|.
name|getYear
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pubDate
operator|.
name|getMonth
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|MONTH
argument_list|,
name|pubDate
operator|.
name|getMonth
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pubDate
operator|.
name|getSeason
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
literal|"season"
argument_list|,
name|pubDate
operator|.
name|getSeason
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addAbstract (Map<String, String> fields, Abstract abs)
specifier|private
name|void
name|addAbstract
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|Abstract
name|abs
parameter_list|)
block|{
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
literal|"copyright"
argument_list|,
name|abs
operator|.
name|getCopyrightInformation
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|abstractText
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractText
name|text
range|:
name|abs
operator|.
name|getAbstractText
argument_list|()
control|)
block|{
for|for
control|(
name|Serializable
name|textContent
range|:
name|text
operator|.
name|getContent
argument_list|()
control|)
block|{
if|if
condition|(
name|textContent
operator|instanceof
name|String
condition|)
block|{
name|abstractText
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|textContent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|,
name|join
argument_list|(
name|abstractText
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addPagination (Map<String, String> fields, Pagination pagination)
specifier|private
name|void
name|addPagination
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|Pagination
name|pagination
parameter_list|)
block|{
name|String
name|startPage
init|=
literal|""
decl_stmt|;
name|String
name|endPage
init|=
literal|""
decl_stmt|;
for|for
control|(
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|element
range|:
name|pagination
operator|.
name|getContent
argument_list|()
control|)
block|{
if|if
condition|(
literal|"MedlinePgn"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|PAGES
argument_list|,
name|fixPageRange
argument_list|(
name|element
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"StartPage"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
comment|//it could happen, that the article has only a start page
name|startPage
operator|=
name|element
operator|.
name|getValue
argument_list|()
operator|+
name|endPage
expr_stmt|;
name|putIfValueNotNull
argument_list|(
name|fields
argument_list|,
name|FieldName
operator|.
name|PAGES
argument_list|,
name|startPage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"EndPage"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|endPage
operator|=
name|element
operator|.
name|getValue
argument_list|()
expr_stmt|;
comment|//but it should not happen, that a endpage appears without startpage
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|PAGES
argument_list|,
name|fixPageRange
argument_list|(
name|startPage
operator|+
literal|"-"
operator|+
name|endPage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|extractYear (String medlineDate)
specifier|private
name|String
name|extractYear
parameter_list|(
name|String
name|medlineDate
parameter_list|)
block|{
comment|//The year of the medlineDate should be the first 4 digits
return|return
name|medlineDate
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
return|;
block|}
DECL|method|handleAuthors (Map<String, String> fields, AuthorList authors)
specifier|private
name|void
name|handleAuthors
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|AuthorList
name|authors
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|authorNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Author
name|author
range|:
name|authors
operator|.
name|getAuthor
argument_list|()
control|)
block|{
if|if
condition|(
name|author
operator|.
name|getCollectiveName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Text
name|collectiveNames
init|=
name|author
operator|.
name|getCollectiveName
argument_list|()
decl_stmt|;
for|for
control|(
name|Serializable
name|content
range|:
name|collectiveNames
operator|.
name|getContent
argument_list|()
control|)
block|{
if|if
condition|(
name|content
operator|instanceof
name|String
condition|)
block|{
name|authorNames
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|content
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|String
name|authorName
init|=
name|author
operator|.
name|getLastName
argument_list|()
decl_stmt|;
if|if
condition|(
name|author
operator|.
name|getForeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|authorName
operator|+=
literal|", "
operator|+
name|author
operator|.
name|getForeName
argument_list|()
expr_stmt|;
block|}
name|authorNames
operator|.
name|add
argument_list|(
name|authorName
argument_list|)
expr_stmt|;
block|}
block|}
name|fields
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
name|join
argument_list|(
name|authorNames
argument_list|,
literal|" and "
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addDateRevised (Map<String, String> fields, DateRevised dateRevised)
specifier|private
name|void
name|addDateRevised
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|DateRevised
name|dateRevised
parameter_list|)
block|{
if|if
condition|(
operator|(
name|dateRevised
operator|.
name|getDay
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dateRevised
operator|.
name|getMonth
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dateRevised
operator|.
name|getYear
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
literal|"revised"
argument_list|,
name|convertToDateFormat
argument_list|(
name|dateRevised
operator|.
name|getYear
argument_list|()
argument_list|,
name|dateRevised
operator|.
name|getMonth
argument_list|()
argument_list|,
name|dateRevised
operator|.
name|getDay
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putIfValueNotNull (Map<String, String> fields, String medlineKey, String value)
specifier|private
name|void
name|putIfValueNotNull
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|String
name|medlineKey
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|medlineKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convert medline page ranges from short form to full form.      * Medline reports page ranges in a shorthand format.      * The last page is reported using only the digits which      * differ from the first page.      * i.e. 12345-51 refers to the actual range 12345-12351      */
DECL|method|fixPageRange (String pageRange)
specifier|private
name|String
name|fixPageRange
parameter_list|(
name|String
name|pageRange
parameter_list|)
block|{
name|int
name|minusPos
init|=
name|pageRange
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|minusPos
operator|<
literal|0
condition|)
block|{
return|return
name|pageRange
return|;
block|}
name|String
name|startPage
init|=
name|pageRange
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|minusPos
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|endPage
init|=
name|pageRange
operator|.
name|substring
argument_list|(
name|minusPos
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|lengthOfEndPage
init|=
name|endPage
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|lengthOfStartPage
init|=
name|startPage
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|lengthOfEndPage
operator|<
name|lengthOfStartPage
condition|)
block|{
name|endPage
operator|=
name|startPage
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lengthOfStartPage
operator|-
name|lengthOfEndPage
argument_list|)
operator|+
name|endPage
expr_stmt|;
block|}
return|return
name|startPage
operator|+
literal|"--"
operator|+
name|endPage
return|;
block|}
annotation|@
name|Override
DECL|method|parseEntries (InputStream inputStream)
specifier|public
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parseEntries
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|ParseException
block|{
try|try
block|{
return|return
name|importDatabase
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

