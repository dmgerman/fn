begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.importer.fetcher
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|bibtexfields
operator|.
name|UnitsToLatexFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
operator|.
name|ProtectTermsFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|URLDownload
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|DOI
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|DOItoBibTeX
specifier|public
class|class
name|DOItoBibTeX
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DOItoBibTeX
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|protectTermsFormatter
specifier|private
specifier|static
specifier|final
name|ProtectTermsFormatter
name|protectTermsFormatter
init|=
operator|new
name|ProtectTermsFormatter
argument_list|()
decl_stmt|;
DECL|field|unitsToLatexFormatter
specifier|private
specifier|static
specifier|final
name|UnitsToLatexFormatter
name|unitsToLatexFormatter
init|=
operator|new
name|UnitsToLatexFormatter
argument_list|()
decl_stmt|;
DECL|method|getEntryFromDOI (String doiStr, ImportFormatPreferences importFormatPreferences)
specifier|public
specifier|static
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|getEntryFromDOI
parameter_list|(
name|String
name|doiStr
parameter_list|,
name|ImportFormatPreferences
name|importFormatPreferences
parameter_list|)
block|{
return|return
name|getEntryFromDOI
argument_list|(
name|doiStr
argument_list|,
literal|null
argument_list|,
name|importFormatPreferences
argument_list|)
return|;
block|}
DECL|method|getEntryFromDOI (String doiStr, ParserResult parserResult, ImportFormatPreferences importFormatPreferences)
specifier|public
specifier|static
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|getEntryFromDOI
parameter_list|(
name|String
name|doiStr
parameter_list|,
name|ParserResult
name|parserResult
parameter_list|,
name|ImportFormatPreferences
name|importFormatPreferences
parameter_list|)
block|{
name|Optional
argument_list|<
name|DOI
argument_list|>
name|doi
init|=
name|DOI
operator|.
name|build
argument_list|(
name|doiStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|doi
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|parserResult
operator|!=
literal|null
condition|)
block|{
name|parserResult
operator|.
name|addWarning
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Invalid DOI: '%0'."
argument_list|,
name|doiStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
try|try
block|{
name|URL
name|doiURL
init|=
operator|new
name|URL
argument_list|(
name|doi
operator|.
name|get
argument_list|()
operator|.
name|getURIAsASCIIString
argument_list|()
argument_list|)
decl_stmt|;
comment|// BibTeX data
name|URLDownload
name|download
init|=
operator|new
name|URLDownload
argument_list|(
name|doiURL
argument_list|)
decl_stmt|;
name|download
operator|.
name|addParameters
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/x-bibtex"
argument_list|)
expr_stmt|;
name|String
name|bibtexString
init|=
name|download
operator|.
name|downloadToString
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|bibtexString
operator|=
name|cleanupEncoding
argument_list|(
name|bibtexString
argument_list|)
expr_stmt|;
comment|// BibTeX entry
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|bibEntry
init|=
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
name|bibtexString
argument_list|,
name|importFormatPreferences
argument_list|)
decl_stmt|;
name|bibEntry
operator|.
name|ifPresent
argument_list|(
name|entry
lambda|->
name|formatTitleField
argument_list|(
name|entry
argument_list|,
name|importFormatPreferences
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bibEntry
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Bad DOI URL"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|parserResult
operator|!=
literal|null
condition|)
block|{
name|parserResult
operator|.
name|addWarning
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unknown DOI: '%0'."
argument_list|,
name|doi
operator|.
name|get
argument_list|()
operator|.
name|getDOI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Unknown DOI"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Communication problems"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
DECL|method|formatTitleField (BibEntry entry, ImportFormatPreferences importFormatPreferences)
specifier|private
specifier|static
name|void
name|formatTitleField
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|ImportFormatPreferences
name|importFormatPreferences
parameter_list|)
block|{
comment|// Optionally add curly brackets around key words to keep the case
name|entry
operator|.
name|getFieldOptional
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|title
lambda|->
block|{
comment|// Unit formatting
if|if
condition|(
name|importFormatPreferences
operator|.
name|isConvertUnitsOnSearch
argument_list|()
condition|)
block|{
name|title
operator|=
name|unitsToLatexFormatter
operator|.
name|format
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
comment|// Case keeping
if|if
condition|(
name|importFormatPreferences
operator|.
name|isUseCaseKeeperOnSearch
argument_list|()
condition|)
block|{
name|title
operator|=
name|protectTermsFormatter
operator|.
name|format
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanupEncoding (String bibtex)
specifier|private
specifier|static
name|String
name|cleanupEncoding
parameter_list|(
name|String
name|bibtex
parameter_list|)
block|{
comment|// Usually includes an en-dash in the page range. Char is in cp1252 but not
comment|// ISO 8859-1 (which is what latex expects). For convenience replace here.
return|return
name|bibtex
operator|.
name|replaceAll
argument_list|(
literal|"(pages=\\{[0-9]+)\u2013([0-9]+\\})"
argument_list|,
literal|"$1--$2"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

