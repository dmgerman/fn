begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.layout.format
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|StringInt
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|RtfCharMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Transform a LaTeX-String to RTF.  *  * This method will:  *  *   1.) Remove LaTeX-Command sequences.  *  *   2.) Replace LaTeX-Special chars with RTF aquivalents.  *  *   3.) Replace emph and textit and textbf with their RTF replacements.  *  *   4.) Take special care to save all unicode characters correctly.  *  *   5.) Replace --- by \emdash and -- by \endash.  */
end_comment

begin_class
DECL|class|RTFChars
specifier|public
class|class
name|RTFChars
implements|implements
name|LayoutFormatter
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LayoutFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RTF_CHARS
specifier|private
specifier|static
specifier|final
name|RtfCharMap
name|RTF_CHARS
init|=
operator|new
name|RtfCharMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|format (String field)
specifier|public
name|String
name|format
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|StringBuilder
name|currentCommand
init|=
literal|null
decl_stmt|;
name|boolean
name|escaped
init|=
literal|false
decl_stmt|;
name|boolean
name|incommand
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|field
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|field
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|escaped
operator|&&
operator|(
name|c
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|escaped
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|escaped
operator|=
literal|true
expr_stmt|;
name|incommand
operator|=
literal|true
expr_stmt|;
name|currentCommand
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|incommand
operator|&&
operator|(
operator|(
name|c
operator|==
literal|'{'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'}'
operator|)
operator|)
condition|)
block|{
comment|// Swallow the brace.
block|}
elseif|else
if|if
condition|(
name|Character
operator|.
name|isLetter
argument_list|(
name|c
argument_list|)
operator|||
name|StringUtil
operator|.
name|SPECIAL_COMMAND_CHARS
operator|.
name|contains
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
name|escaped
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|incommand
condition|)
block|{
comment|// Else we are in a command, and should not keep the letter.
name|currentCommand
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|testCharCom
label|:
if|if
condition|(
operator|(
name|currentCommand
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|)
operator|&&
name|StringUtil
operator|.
name|SPECIAL_COMMAND_CHARS
operator|.
name|contains
argument_list|(
name|currentCommand
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// This indicates that we are in a command of the type
comment|// \^o or \~{n}
if|if
condition|(
name|i
operator|>=
operator|(
name|field
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
break|break
name|testCharCom
break|;
block|}
name|String
name|command
init|=
name|currentCommand
operator|.
name|toString
argument_list|()
decl_stmt|;
name|i
operator|++
expr_stmt|;
name|c
operator|=
name|field
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|String
name|combody
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'{'
condition|)
block|{
name|StringInt
name|part
init|=
name|getPart
argument_list|(
name|field
argument_list|,
name|i
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|i
operator|+=
name|part
operator|.
name|i
expr_stmt|;
name|combody
operator|=
name|part
operator|.
name|s
expr_stmt|;
block|}
else|else
block|{
name|combody
operator|=
name|field
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|RTF_CHARS
operator|.
name|get
argument_list|(
name|command
operator|+
name|combody
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|incommand
operator|=
literal|false
expr_stmt|;
name|escaped
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|testContent
label|:
if|if
condition|(
operator|!
name|incommand
operator|||
operator|(
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
operator|&&
operator|(
name|c
operator|!=
literal|'{'
operator|)
operator|&&
operator|(
name|c
operator|!=
literal|'}'
operator|)
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|incommand
assert|;
comment|// First test for braces that may be part of a LaTeX command:
if|if
condition|(
operator|(
name|c
operator|==
literal|'{'
operator|)
operator|&&
operator|(
name|currentCommand
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
comment|// We have seen something like \{, which is probably the start
comment|// of a command like \{aa}. Swallow the brace.
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|(
name|c
operator|==
literal|'}'
operator|)
operator|&&
operator|(
name|currentCommand
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
comment|// Seems to be the end of a command like \{aa}. Look it up:
name|String
name|command
init|=
name|currentCommand
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|RTF_CHARS
operator|.
name|get
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|incommand
operator|=
literal|false
expr_stmt|;
name|escaped
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
comment|// Then look for italics etc.,
comment|// but first check if we are already at the end of the string.
if|if
condition|(
name|i
operator|>=
name|field
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
break|break
name|testContent
break|;
block|}
if|if
condition|(
operator|(
operator|(
name|c
operator|==
literal|'{'
operator|)
operator|||
operator|(
name|c
operator|==
literal|' '
operator|)
operator|)
operator|&&
operator|(
name|currentCommand
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|String
name|command
init|=
name|currentCommand
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Then test if we are dealing with a italics or bold
comment|// command. If so, handle.
if|if
condition|(
literal|"em"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
operator|||
literal|"emph"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
operator|||
literal|"textit"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
operator|||
literal|"it"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|StringInt
name|part
init|=
name|getPart
argument_list|(
name|field
argument_list|,
name|i
argument_list|,
name|c
operator|==
literal|'{'
argument_list|)
decl_stmt|;
name|i
operator|+=
name|part
operator|.
name|i
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{\\i "
argument_list|)
operator|.
name|append
argument_list|(
name|part
operator|.
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"textbf"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
operator|||
literal|"bf"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|StringInt
name|part
init|=
name|getPart
argument_list|(
name|field
argument_list|,
name|i
argument_list|,
name|c
operator|==
literal|'{'
argument_list|)
decl_stmt|;
name|i
operator|+=
name|part
operator|.
name|i
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{\\b "
argument_list|)
operator|.
name|append
argument_list|(
name|part
operator|.
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Unknown command "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|' '
condition|)
block|{
comment|// command was separated with the content by ' '
comment|// We have to add the space a
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|incommand
operator|=
literal|false
expr_stmt|;
name|escaped
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|char
index|[]
name|chars
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
for|for
control|(
name|char
name|c
range|:
name|chars
control|)
block|{
if|if
condition|(
name|c
operator|<
literal|128
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\u"
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|long
operator|)
name|c
argument_list|)
operator|.
name|append
argument_list|(
name|transformSpecialCharacter
argument_list|(
operator|(
name|long
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"---"
argument_list|,
literal|"{\\emdash}"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"--"
argument_list|,
literal|"{\\endash}"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"``"
argument_list|,
literal|"{\\ldblquote}"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"''"
argument_list|,
literal|"{\\rdblquote}"
argument_list|)
return|;
block|}
comment|/**      * @param text the text to extract the part from      * @param i the position to start      * @param commandNestedInBraces true if the command is nested in braces (\emph{xy}), false if spaces are sued (\emph xy)      * @return a tuple of number of added characters and the extracted part      */
DECL|method|getPart (String text, int i, boolean commandNestedInBraces)
specifier|private
name|StringInt
name|getPart
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|i
parameter_list|,
name|boolean
name|commandNestedInBraces
parameter_list|)
block|{
name|char
name|c
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|icount
init|=
name|i
decl_stmt|;
name|StringBuilder
name|part
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|loop
label|:
while|while
condition|(
operator|(
name|count
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|icount
operator|<
name|text
operator|.
name|length
argument_list|()
operator|)
condition|)
block|{
name|icount
operator|++
expr_stmt|;
name|c
operator|=
name|text
operator|.
name|charAt
argument_list|(
name|icount
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'}'
case|:
name|count
operator|--
expr_stmt|;
break|break;
case|case
literal|'{'
case|:
name|count
operator|++
expr_stmt|;
break|break;
case|case
literal|' '
case|:
if|if
condition|(
operator|!
name|commandNestedInBraces
condition|)
block|{
comment|// in any case, a space terminates the loop
break|break
name|loop
break|;
block|}
break|break;
default|default:
break|break;
block|}
name|part
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|String
name|res
init|=
name|part
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// the wrong "}" at the end is removed by "format(res)"
return|return
operator|new
name|StringInt
argument_list|(
name|format
argument_list|(
name|res
argument_list|)
argument_list|,
name|part
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This method transforms the unicode of a special character into its base character: 233 (Ã©) -> e      * @param c long      * @return returns the basic character of the given unicode      */
DECL|method|transformSpecialCharacter (long c)
specifier|private
name|String
name|transformSpecialCharacter
parameter_list|(
name|long
name|c
parameter_list|)
block|{
if|if
condition|(
operator|(
literal|192
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|197
operator|)
operator|||
name|c
operator|==
literal|256
operator|||
name|c
operator|==
literal|258
operator|||
name|c
operator|==
literal|260
condition|)
block|{
return|return
literal|"A"
return|;
block|}
if|if
condition|(
operator|(
literal|224
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|229
operator|)
operator|||
name|c
operator|==
literal|257
operator|||
name|c
operator|==
literal|259
operator|||
name|c
operator|==
literal|261
condition|)
block|{
return|return
literal|"a"
return|;
block|}
if|if
condition|(
literal|199
operator|==
name|c
operator|||
literal|262
operator|==
name|c
operator|||
literal|264
operator|==
name|c
operator|||
literal|266
operator|==
name|c
operator|||
literal|268
operator|==
name|c
condition|)
block|{
return|return
literal|"C"
return|;
block|}
if|if
condition|(
literal|231
operator|==
name|c
operator|||
literal|263
operator|==
name|c
operator|||
literal|265
operator|==
name|c
operator|||
literal|267
operator|==
name|c
operator|||
literal|269
operator|==
name|c
condition|)
block|{
return|return
literal|"c"
return|;
block|}
if|if
condition|(
literal|208
operator|==
name|c
operator|||
literal|272
operator|==
name|c
condition|)
block|{
return|return
literal|"D"
return|;
block|}
if|if
condition|(
literal|240
operator|==
name|c
operator|||
literal|273
operator|==
name|c
condition|)
block|{
return|return
literal|"d"
return|;
block|}
if|if
condition|(
operator|(
literal|200
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|203
operator|)
operator|||
literal|274
operator|==
name|c
operator|||
literal|276
operator|==
name|c
operator|||
literal|278
operator|==
name|c
operator|||
literal|280
operator|==
name|c
operator|||
literal|282
operator|==
name|c
condition|)
block|{
return|return
literal|"E"
return|;
block|}
if|if
condition|(
operator|(
literal|232
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|235
operator|)
operator|||
literal|275
operator|==
name|c
operator|||
literal|277
operator|==
name|c
operator|||
literal|279
operator|==
name|c
operator|||
literal|281
operator|==
name|c
operator|||
literal|283
operator|==
name|c
condition|)
block|{
return|return
literal|"e"
return|;
block|}
if|if
condition|(
operator|(
literal|284
operator|==
name|c
operator|||
literal|286
operator|==
name|c
operator|)
operator|||
literal|288
operator|==
name|c
operator|||
literal|290
operator|==
name|c
operator|||
literal|330
operator|==
name|c
condition|)
block|{
return|return
literal|"G"
return|;
block|}
if|if
condition|(
literal|285
operator|==
name|c
operator|||
literal|287
operator|==
name|c
operator|||
literal|289
operator|==
name|c
operator|||
literal|291
operator|==
name|c
operator|||
literal|331
operator|==
name|c
condition|)
block|{
return|return
literal|"g"
return|;
block|}
if|if
condition|(
literal|292
operator|==
name|c
operator|||
literal|294
operator|==
name|c
condition|)
block|{
return|return
literal|"H"
return|;
block|}
if|if
condition|(
literal|293
operator|==
name|c
operator|||
literal|295
operator|==
name|c
condition|)
block|{
return|return
literal|"h"
return|;
block|}
if|if
condition|(
operator|(
literal|204
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|207
operator|)
operator|||
literal|296
operator|==
name|c
operator|||
literal|298
operator|==
name|c
operator|||
literal|300
operator|==
name|c
operator|||
literal|302
operator|==
name|c
operator|||
literal|304
operator|==
name|c
condition|)
block|{
return|return
literal|"I"
return|;
block|}
if|if
condition|(
operator|(
literal|236
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|239
operator|)
operator|||
literal|297
operator|==
name|c
operator|||
literal|299
operator|==
name|c
operator|||
literal|301
operator|==
name|c
operator|||
literal|303
operator|==
name|c
condition|)
block|{
return|return
literal|"i"
return|;
block|}
if|if
condition|(
literal|308
operator|==
name|c
condition|)
block|{
return|return
literal|"J"
return|;
block|}
if|if
condition|(
literal|309
operator|==
name|c
condition|)
block|{
return|return
literal|"j"
return|;
block|}
if|if
condition|(
literal|310
operator|==
name|c
condition|)
block|{
return|return
literal|"K"
return|;
block|}
if|if
condition|(
literal|311
operator|==
name|c
condition|)
block|{
return|return
literal|"k"
return|;
block|}
if|if
condition|(
literal|313
operator|==
name|c
operator|||
literal|315
operator|==
name|c
operator|||
literal|319
operator|==
name|c
condition|)
block|{
return|return
literal|"L"
return|;
block|}
if|if
condition|(
literal|314
operator|==
name|c
operator|||
literal|316
operator|==
name|c
operator|||
literal|320
operator|==
name|c
operator|||
literal|322
operator|==
name|c
condition|)
block|{
return|return
literal|"l"
return|;
block|}
if|if
condition|(
literal|209
operator|==
name|c
operator|||
literal|323
operator|==
name|c
operator|||
literal|325
operator|==
name|c
operator|||
literal|327
operator|==
name|c
condition|)
block|{
return|return
literal|"N"
return|;
block|}
if|if
condition|(
literal|241
operator|==
name|c
operator|||
literal|324
operator|==
name|c
operator|||
literal|326
operator|==
name|c
operator|||
literal|328
operator|==
name|c
condition|)
block|{
return|return
literal|"n"
return|;
block|}
if|if
condition|(
operator|(
literal|210
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|214
operator|)
operator|||
name|c
operator|==
literal|216
operator|||
literal|332
operator|==
name|c
operator|||
literal|334
operator|==
name|c
condition|)
block|{
return|return
literal|"O"
return|;
block|}
if|if
condition|(
operator|(
literal|242
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|248
operator|&&
literal|247
operator|!=
name|c
operator|)
operator|||
literal|333
operator|==
name|c
operator|||
literal|335
operator|==
name|c
condition|)
block|{
return|return
literal|"o"
return|;
block|}
if|if
condition|(
literal|340
operator|==
name|c
operator|||
literal|342
operator|==
name|c
operator|||
literal|344
operator|==
name|c
condition|)
block|{
return|return
literal|"R"
return|;
block|}
if|if
condition|(
literal|341
operator|==
name|c
operator|||
literal|343
operator|==
name|c
operator|||
literal|345
operator|==
name|c
condition|)
block|{
return|return
literal|"r"
return|;
block|}
if|if
condition|(
literal|346
operator|==
name|c
operator|||
literal|348
operator|==
name|c
operator|||
literal|350
operator|==
name|c
operator|||
literal|352
operator|==
name|c
condition|)
block|{
return|return
literal|"S"
return|;
block|}
if|if
condition|(
literal|347
operator|==
name|c
operator|||
literal|349
operator|==
name|c
operator|||
literal|351
operator|==
name|c
operator|||
literal|353
operator|==
name|c
condition|)
block|{
return|return
literal|"s"
return|;
block|}
if|if
condition|(
literal|354
operator|==
name|c
operator|||
literal|356
operator|==
name|c
operator|||
literal|358
operator|==
name|c
condition|)
block|{
return|return
literal|"T"
return|;
block|}
if|if
condition|(
literal|355
operator|==
name|c
operator|||
literal|359
operator|==
name|c
condition|)
block|{
return|return
literal|"t"
return|;
block|}
if|if
condition|(
operator|(
literal|217
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|220
operator|)
operator|||
literal|360
operator|==
name|c
operator|||
literal|362
operator|==
name|c
operator|||
literal|364
operator|==
name|c
operator|||
literal|366
operator|==
name|c
operator|||
literal|370
operator|==
name|c
condition|)
block|{
return|return
literal|"U"
return|;
block|}
if|if
condition|(
operator|(
literal|249
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|251
operator|)
operator|||
literal|361
operator|==
name|c
operator|||
literal|363
operator|==
name|c
operator|||
literal|365
operator|==
name|c
operator|||
literal|367
operator|==
name|c
operator|||
literal|371
operator|==
name|c
condition|)
block|{
return|return
literal|"u"
return|;
block|}
if|if
condition|(
literal|372
operator|==
name|c
condition|)
block|{
return|return
literal|"W"
return|;
block|}
if|if
condition|(
literal|373
operator|==
name|c
condition|)
block|{
return|return
literal|"w"
return|;
block|}
if|if
condition|(
literal|374
operator|==
name|c
operator|||
literal|376
operator|==
name|c
operator|||
literal|221
operator|==
name|c
condition|)
block|{
return|return
literal|"Y"
return|;
block|}
if|if
condition|(
literal|375
operator|==
name|c
operator|||
literal|255
operator|==
name|c
condition|)
block|{
return|return
literal|"y"
return|;
block|}
if|if
condition|(
literal|377
operator|==
name|c
operator|||
literal|379
operator|==
name|c
operator|||
literal|381
operator|==
name|c
condition|)
block|{
return|return
literal|"Z"
return|;
block|}
if|if
condition|(
literal|378
operator|==
name|c
operator|||
literal|380
operator|==
name|c
operator|||
literal|382
operator|==
name|c
condition|)
block|{
return|return
literal|"z"
return|;
block|}
if|if
condition|(
literal|198
operator|==
name|c
condition|)
block|{
return|return
literal|"AE"
return|;
block|}
if|if
condition|(
literal|230
operator|==
name|c
condition|)
block|{
return|return
literal|"ae"
return|;
block|}
if|if
condition|(
literal|338
operator|==
name|c
condition|)
block|{
return|return
literal|"OE"
return|;
block|}
if|if
condition|(
literal|339
operator|==
name|c
condition|)
block|{
return|return
literal|"oe"
return|;
block|}
if|if
condition|(
literal|222
operator|==
name|c
condition|)
block|{
return|return
literal|"TH"
return|;
block|}
if|if
condition|(
literal|223
operator|==
name|c
condition|)
block|{
return|return
literal|"ss"
return|;
block|}
if|if
condition|(
literal|161
operator|==
name|c
condition|)
block|{
return|return
literal|"!"
return|;
block|}
return|return
literal|"?"
return|;
block|}
block|}
end_class

end_unit

