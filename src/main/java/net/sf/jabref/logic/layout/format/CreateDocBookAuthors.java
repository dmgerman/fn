begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.layout.format
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|Author
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|AuthorList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_comment
comment|/**  * Create DocBook authors formatter.  */
end_comment

begin_class
DECL|class|CreateDocBookAuthors
specifier|public
class|class
name|CreateDocBookAuthors
implements|implements
name|LayoutFormatter
block|{
DECL|field|XML_CHARS
specifier|private
specifier|static
specifier|final
name|XMLChars
name|XML_CHARS
init|=
operator|new
name|XMLChars
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|format (String fieldText)
specifier|public
name|String
name|format
parameter_list|(
name|String
name|fieldText
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|AuthorList
name|al
init|=
name|AuthorList
operator|.
name|parse
argument_list|(
name|fieldText
argument_list|)
decl_stmt|;
name|addBody
argument_list|(
name|sb
argument_list|,
name|al
argument_list|,
name|FieldName
operator|.
name|AUTHOR
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|addBody (StringBuilder sb, AuthorList al, String tagName)
specifier|public
name|void
name|addBody
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|AuthorList
name|al
parameter_list|,
name|String
name|tagName
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|al
operator|.
name|getNumberOfAuthors
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
operator|.
name|append
argument_list|(
name|tagName
argument_list|)
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|Author
name|a
init|=
name|al
operator|.
name|getAuthor
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|a
operator|.
name|getFirst
argument_list|()
operator|.
name|filter
argument_list|(
name|first
lambda|->
operator|!
name|first
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|first
lambda|->
name|sb
operator|.
name|append
argument_list|(
literal|"<firstname>"
argument_list|)
operator|.
name|append
argument_list|(
name|CreateDocBookAuthors
operator|.
name|XML_CHARS
operator|.
name|format
argument_list|(
name|first
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</firstname>"
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|getVon
argument_list|()
operator|.
name|filter
argument_list|(
name|von
lambda|->
operator|!
name|von
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|von
lambda|->
name|sb
operator|.
name|append
argument_list|(
literal|"<othername>"
argument_list|)
operator|.
name|append
argument_list|(
name|CreateDocBookAuthors
operator|.
name|XML_CHARS
operator|.
name|format
argument_list|(
name|von
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</othername>"
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|getLast
argument_list|()
operator|.
name|filter
argument_list|(
name|last
lambda|->
operator|!
name|last
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|last
lambda|->
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<surname>"
argument_list|)
operator|.
name|append
argument_list|(
name|CreateDocBookAuthors
operator|.
name|XML_CHARS
operator|.
name|format
argument_list|(
name|last
argument_list|)
argument_list|)
argument_list|;
name|a
operator|.
name|getJr
argument_list|()
operator|.
name|filter
argument_list|(
name|jr
lambda|->
operator|!
name|jr
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|jr
lambda|->
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|CreateDocBookAuthors
operator|.
name|XML_CHARS
operator|.
name|format
argument_list|(
name|jr
argument_list|)
argument_list|)
argument_list|)
argument_list|;
name|sb
operator|.
name|append
argument_list|(
literal|"</surname>"
argument_list|)
argument_list|;
block|}
block|)
function|;
if|if
condition|(
name|i
operator|<
operator|(
name|al
operator|.
name|getNumberOfAuthors
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"</"
argument_list|)
operator|.
name|append
argument_list|(
name|tagName
argument_list|)
operator|.
name|append
argument_list|(
literal|">\n       "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"</"
argument_list|)
operator|.
name|append
argument_list|(
name|tagName
argument_list|)
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
block|}
end_class

unit|}  }
end_unit

