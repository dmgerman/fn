begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.exporter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_class
DECL|class|MetaDataSerializer
specifier|public
class|class
name|MetaDataSerializer
block|{
comment|/**      * Writes all data in the format<key, serialized data>.      */
DECL|method|getSerializedStringMap (MetaData metaData)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSerializedStringMap
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serializedMetaData
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// first write all meta data except groups
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|metaItem
range|:
name|metaData
operator|.
name|getMetaData
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dataItem
range|:
name|metaItem
operator|.
name|getValue
argument_list|()
control|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|StringUtil
operator|.
name|quote
argument_list|(
name|dataItem
argument_list|,
name|MetaData
operator|.
name|SEPARATOR_STRING
argument_list|,
name|MetaData
operator|.
name|ESCAPE_CHARACTER
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|MetaData
operator|.
name|SEPARATOR_STRING
argument_list|)
expr_stmt|;
comment|//in case of save actions, add an additional newline after the enabled flag
if|if
condition|(
name|metaItem
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|MetaData
operator|.
name|SAVE_ACTIONS
argument_list|)
operator|&&
operator|(
name|FieldFormatterCleanups
operator|.
name|ENABLED
operator|.
name|equals
argument_list|(
name|dataItem
argument_list|)
operator|||
name|FieldFormatterCleanups
operator|.
name|DISABLED
operator|.
name|equals
argument_list|(
name|dataItem
argument_list|)
operator|)
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|serializedItem
init|=
name|stringBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Only add non-empty values
if|if
condition|(
operator|!
name|serializedItem
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|MetaData
operator|.
name|SEPARATOR_STRING
operator|.
name|equals
argument_list|(
name|serializedItem
argument_list|)
condition|)
block|{
name|serializedMetaData
operator|.
name|put
argument_list|(
name|metaItem
operator|.
name|getKey
argument_list|()
argument_list|,
name|serializedItem
argument_list|)
expr_stmt|;
block|}
block|}
comment|// write groups if present. skip this if only the root node exists
comment|// (which is always the AllEntriesGroup).
name|metaData
operator|.
name|getGroups
argument_list|()
operator|.
name|filter
argument_list|(
name|groups
lambda|->
name|groups
operator|.
name|getNumberOfChildren
argument_list|()
operator|>
literal|0
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|groups
lambda|->
block|{
name|StringBuilder
name|stringBuilder
operator|=
operator|new
name|StringBuilder
argument_list|()
argument_list|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|;              for
operator|(
name|String
name|groupNode
operator|:
name|groups
operator|.
name|getTreeAsString
argument_list|()
operator|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|StringUtil
operator|.
name|quote
argument_list|(
name|groupNode
argument_list|,
name|MetaData
operator|.
name|SEPARATOR_STRING
argument_list|,
name|MetaData
operator|.
name|ESCAPE_CHARACTER
argument_list|)
argument_list|)
block|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|MetaData
operator|.
name|SEPARATOR_STRING
argument_list|)
block|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
block|;             }
name|serializedMetaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|GROUPSTREE
argument_list|,
name|stringBuilder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|;
block|}
block|)
class|;
end_class

begin_return
return|return
name|serializedMetaData
return|;
end_return

unit|}  }
end_unit

