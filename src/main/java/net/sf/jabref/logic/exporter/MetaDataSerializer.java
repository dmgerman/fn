begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.exporter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|AbstractBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|GlobalBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|FieldFormatterCleanups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|ContentSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_class
DECL|class|MetaDataSerializer
specifier|public
class|class
name|MetaDataSerializer
block|{
comment|/**      * Writes all data in the format<key, serialized data>.      */
DECL|method|getSerializedStringMap (MetaData metaData, GlobalBibtexKeyPattern globalCiteKeyPattern)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSerializedStringMap
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|GlobalBibtexKeyPattern
name|globalCiteKeyPattern
parameter_list|)
block|{
comment|// First write all meta data except groups
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|stringyMetaData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|metaData
operator|.
name|getSaveOrderConfig
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|saveOrderConfig
lambda|->
name|stringyMetaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|SAVE_ORDER_CONFIG
argument_list|,
name|saveOrderConfig
operator|.
name|getAsStringList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|getSaveActions
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|saveActions
lambda|->
name|stringyMetaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|SAVE_ACTIONS
argument_list|,
name|saveActions
operator|.
name|getAsStringList
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|metaData
operator|.
name|isProtected
argument_list|()
condition|)
block|{
name|stringyMetaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|PROTECTED_FLAG_META
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stringyMetaData
operator|.
name|putAll
argument_list|(
name|serializeCiteKeyPattern
argument_list|(
name|metaData
argument_list|,
name|globalCiteKeyPattern
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|getMode
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|mode
lambda|->
name|stringyMetaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|DATABASE_TYPE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|mode
operator|.
name|getAsString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|getDefaultFileDirectory
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|path
lambda|->
name|stringyMetaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|FILE_DIRECTORY
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|path
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|getUserFileDirectories
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|user
parameter_list|,
name|path
parameter_list|)
lambda|->
name|stringyMetaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|FILE_DIRECTORY
operator|+
literal|'-'
operator|+
name|user
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|path
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ContentSelector
name|selector
range|:
name|metaData
operator|.
name|getContentSelectorList
argument_list|()
control|)
block|{
name|stringyMetaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|SELECTOR_META_PREFIX
operator|+
name|selector
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|selector
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serializedMetaData
init|=
name|serializeMetaData
argument_list|(
name|stringyMetaData
argument_list|)
decl_stmt|;
comment|// Write groups if present.
comment|// Skip this if only the root node exists (which is always the AllEntriesGroup).
name|metaData
operator|.
name|getGroups
argument_list|()
operator|.
name|filter
argument_list|(
name|root
lambda|->
name|root
operator|.
name|getNumberOfChildren
argument_list|()
operator|>
literal|0
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|root
lambda|->
name|serializedMetaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|GROUPSTREE
argument_list|,
name|serializeGroups
argument_list|(
name|root
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|serializedMetaData
return|;
block|}
DECL|method|serializeMetaData (Map<String, List<String>> stringyMetaData)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serializeMetaData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|stringyMetaData
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serializedMetaData
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|metaItem
range|:
name|stringyMetaData
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dataItem
range|:
name|metaItem
operator|.
name|getValue
argument_list|()
control|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|StringUtil
operator|.
name|quote
argument_list|(
name|dataItem
argument_list|,
name|MetaData
operator|.
name|SEPARATOR_STRING
argument_list|,
name|MetaData
operator|.
name|ESCAPE_CHARACTER
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|MetaData
operator|.
name|SEPARATOR_STRING
argument_list|)
expr_stmt|;
comment|//in case of save actions, add an additional newline after the enabled flag
if|if
condition|(
name|metaItem
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|MetaData
operator|.
name|SAVE_ACTIONS
argument_list|)
operator|&&
operator|(
name|FieldFormatterCleanups
operator|.
name|ENABLED
operator|.
name|equals
argument_list|(
name|dataItem
argument_list|)
operator|||
name|FieldFormatterCleanups
operator|.
name|DISABLED
operator|.
name|equals
argument_list|(
name|dataItem
argument_list|)
operator|)
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|serializedItem
init|=
name|stringBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Only add non-empty values
if|if
condition|(
operator|!
name|serializedItem
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|MetaData
operator|.
name|SEPARATOR_STRING
operator|.
name|equals
argument_list|(
name|serializedItem
argument_list|)
condition|)
block|{
name|serializedMetaData
operator|.
name|put
argument_list|(
name|metaItem
operator|.
name|getKey
argument_list|()
argument_list|,
name|serializedItem
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|serializedMetaData
return|;
block|}
DECL|method|serializeCiteKeyPattern (MetaData metaData, GlobalBibtexKeyPattern globalCiteKeyPattern)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|serializeCiteKeyPattern
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|GlobalBibtexKeyPattern
name|globalCiteKeyPattern
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|stringyPattern
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|AbstractBibtexKeyPattern
name|citeKeyPattern
init|=
name|metaData
operator|.
name|getCiteKeyPattern
argument_list|(
name|globalCiteKeyPattern
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|citeKeyPattern
operator|.
name|getAllKeys
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|citeKeyPattern
operator|.
name|isDefaultValue
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
name|citeKeyPattern
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|metaDataKey
init|=
name|MetaData
operator|.
name|PREFIX_KEYPATTERN
operator|+
name|key
decl_stmt|;
name|stringyPattern
operator|.
name|put
argument_list|(
name|metaDataKey
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|citeKeyPattern
operator|.
name|getDefaultValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|citeKeyPattern
operator|.
name|getDefaultValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
name|citeKeyPattern
operator|.
name|getDefaultValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|stringyPattern
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|KEYPATTERNDEFAULT
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|stringyPattern
return|;
block|}
DECL|method|serializeGroups (GroupTreeNode root)
specifier|private
specifier|static
name|String
name|serializeGroups
parameter_list|(
name|GroupTreeNode
name|root
parameter_list|)
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|groupNode
range|:
operator|new
name|GroupSerializer
argument_list|()
operator|.
name|serializeTree
argument_list|(
name|root
argument_list|)
control|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|StringUtil
operator|.
name|quote
argument_list|(
name|groupNode
argument_list|,
name|MetaData
operator|.
name|SEPARATOR_STRING
argument_list|,
name|MetaData
operator|.
name|ESCAPE_CHARACTER
argument_list|)
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|MetaData
operator|.
name|SEPARATOR_STRING
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
block|}
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

