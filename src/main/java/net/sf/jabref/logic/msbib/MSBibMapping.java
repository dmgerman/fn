begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.msbib
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|msbib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BiblatexEntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBiMap
import|;
end_import

begin_comment
comment|/**  * Mapping between Msbib and biblatex  * All Fields:<a href = "https://msdn.microsoft.com/de-de/library/office/documentformat.openxml.bibliography">List of all MSBib fields</a>  *  */
end_comment

begin_class
DECL|class|MSBibMapping
specifier|public
class|class
name|MSBibMapping
block|{
DECL|field|BIBTEX_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|BIBTEX_PREFIX
init|=
literal|"BIBTEX_"
decl_stmt|;
DECL|field|MSBIB_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|MSBIB_PREFIX
init|=
literal|"msbib-"
decl_stmt|;
DECL|field|biblatexToMsBib
specifier|private
specifier|static
specifier|final
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|biblatexToMsBib
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
static|static
block|{
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
literal|"Tag"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
literal|"Title"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
literal|"Year"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|NOTE
argument_list|,
literal|"Comments"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|VOLUME
argument_list|,
literal|"Volume"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|LANGUAGE
argument_list|,
literal|"LCID"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|EDITION
argument_list|,
literal|"Edition"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|PUBLISHER
argument_list|,
literal|"Publisher"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|BOOKTITLE
argument_list|,
literal|"BookTitle"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
literal|"shorttitle"
argument_list|,
literal|"ShortTitle"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|NOTE
argument_list|,
literal|"Comments"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|VOLUMES
argument_list|,
literal|"NumberVolumes"
argument_list|)
expr_stmt|;
comment|//biblatexToMsBib.put(FieldName.BOOKTITLE, "ConferenceName");
comment|//biblatexToMsBib.put(FieldName.PAGES, "Pages");
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|CHAPTER
argument_list|,
literal|"ChapterNumber"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|ISSUE
argument_list|,
literal|"Issue"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|SCHOOL
argument_list|,
literal|"Department"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|INSTITUTION
argument_list|,
literal|"Institution"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|,
literal|"DOI"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|,
literal|"URL"
argument_list|)
expr_stmt|;
comment|// BibTeX/Biblatex only fields
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|SERIES
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"Series"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"Abstract"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|KEYWORDS
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"KeyWords"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|CROSSREF
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"CrossRef"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|HOWPUBLISHED
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"HowPublished"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|PUBSTATE
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"Pubstate"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
literal|"affiliation"
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"Affiliation"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
literal|"contents"
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"Contents"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
literal|"copyright"
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"Copyright"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
literal|"price"
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"Price"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"Size"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
literal|"intype"
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"InType"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
literal|"paper"
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"Paper"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|FieldName
operator|.
name|KEY
argument_list|,
name|BIBTEX_PREFIX
operator|+
literal|"Key"
argument_list|)
expr_stmt|;
comment|// MSBib only fields
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"periodical"
argument_list|,
literal|"PeriodicalTitle"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
name|FieldName
operator|.
name|DAY
argument_list|,
literal|"Day"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"accessed"
argument_list|,
literal|"Accessed"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"medium"
argument_list|,
literal|"Medium"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"recordingnumber"
argument_list|,
literal|"RecordingNumber"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"theater"
argument_list|,
literal|"Theater"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"distributor"
argument_list|,
literal|"Distributor"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"broadcaster"
argument_list|,
literal|"Broadcaster"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"station"
argument_list|,
literal|"Station"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
name|FieldName
operator|.
name|TYPE
argument_list|,
literal|"Type"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"court"
argument_list|,
literal|"Court"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"reporter"
argument_list|,
literal|"Reporter"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"casenumber"
argument_list|,
literal|"CaseNumber"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"abbreviatedcasenumber"
argument_list|,
literal|"AbbreviatedCaseNumber"
argument_list|)
expr_stmt|;
name|biblatexToMsBib
operator|.
name|put
argument_list|(
name|MSBIB_PREFIX
operator|+
literal|"productioncompany"
argument_list|,
literal|"ProductionCompany"
argument_list|)
expr_stmt|;
block|}
DECL|method|getBiblatexEntryType (String msbibType)
specifier|public
specifier|static
name|String
name|getBiblatexEntryType
parameter_list|(
name|String
name|msbibType
parameter_list|)
block|{
specifier|final
name|String
name|defaultType
init|=
name|BibtexEntryTypes
operator|.
name|MISC
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entryTypeMapping
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"Book"
argument_list|,
name|BiblatexEntryTypes
operator|.
name|BOOK
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"BookSection"
argument_list|,
name|BiblatexEntryTypes
operator|.
name|BOOK
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"JournalArticle"
argument_list|,
name|BiblatexEntryTypes
operator|.
name|ARTICLE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"ArticleInAPeriodical"
argument_list|,
name|BiblatexEntryTypes
operator|.
name|PERIODICAL
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"ConferenceProceedings"
argument_list|,
name|BiblatexEntryTypes
operator|.
name|INPROCEEDINGS
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"Report"
argument_list|,
name|BiblatexEntryTypes
operator|.
name|TECHREPORT
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"Patent"
argument_list|,
name|BiblatexEntryTypes
operator|.
name|PATENT
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"InternetSite"
argument_list|,
name|BiblatexEntryTypes
operator|.
name|ONLINE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entryTypeMapping
operator|.
name|getOrDefault
argument_list|(
name|msbibType
argument_list|,
name|defaultType
argument_list|)
return|;
block|}
DECL|method|getMSBibEntryType (String bibtexType)
specifier|public
specifier|static
name|MSBibEntryType
name|getMSBibEntryType
parameter_list|(
name|String
name|bibtexType
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MSBibEntryType
argument_list|>
name|entryTypeMapping
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"book"
argument_list|,
name|MSBibEntryType
operator|.
name|Book
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"inbook"
argument_list|,
name|MSBibEntryType
operator|.
name|BookSection
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"booklet"
argument_list|,
name|MSBibEntryType
operator|.
name|BookSection
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"incollection"
argument_list|,
name|MSBibEntryType
operator|.
name|BookSection
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"article"
argument_list|,
name|MSBibEntryType
operator|.
name|JournalArticle
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"inproceedings"
argument_list|,
name|MSBibEntryType
operator|.
name|ConferenceProceedings
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"conference"
argument_list|,
name|MSBibEntryType
operator|.
name|ConferenceProceedings
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"proceedings"
argument_list|,
name|MSBibEntryType
operator|.
name|ConferenceProceedings
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|MSBibEntryType
operator|.
name|ConferenceProceedings
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"techreport"
argument_list|,
name|MSBibEntryType
operator|.
name|Report
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"manual"
argument_list|,
name|MSBibEntryType
operator|.
name|Report
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"mastersthesis"
argument_list|,
name|MSBibEntryType
operator|.
name|Report
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"phdthesis"
argument_list|,
name|MSBibEntryType
operator|.
name|Report
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"unpublished"
argument_list|,
name|MSBibEntryType
operator|.
name|Report
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"patent"
argument_list|,
name|MSBibEntryType
operator|.
name|Patent
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"misc"
argument_list|,
name|MSBibEntryType
operator|.
name|Misc
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"electronic"
argument_list|,
name|MSBibEntryType
operator|.
name|ElectronicSource
argument_list|)
expr_stmt|;
name|entryTypeMapping
operator|.
name|put
argument_list|(
literal|"online"
argument_list|,
name|MSBibEntryType
operator|.
name|InternetSite
argument_list|)
expr_stmt|;
return|return
name|entryTypeMapping
operator|.
name|getOrDefault
argument_list|(
name|bibtexType
argument_list|,
name|MSBibEntryType
operator|.
name|Misc
argument_list|)
return|;
block|}
comment|/**      * Only English is supported<br>      *<a href="http://www.microsoft.com/globaldev/reference/lcid-all.mspx">All LCID codes</a>      * @param language The language to transform      * @return Returns 0 for English      */
DECL|method|getLCID (String language)
specifier|public
specifier|static
name|int
name|getLCID
parameter_list|(
name|String
name|language
parameter_list|)
block|{
comment|// TODO: add language to LCID mapping
comment|// 0 is English
return|return
literal|0
return|;
block|}
comment|/**      * Only English is supported<br>      *<a href="http://www.microsoft.com/globaldev/reference/lcid-all.mspx">All LCID codes</a>      * @param language      * @return Returns english      */
DECL|method|getLanguage (int LCID)
specifier|public
specifier|static
name|String
name|getLanguage
parameter_list|(
name|int
name|LCID
parameter_list|)
block|{
comment|// TODO: add language to LCID mapping
return|return
literal|"english"
return|;
block|}
DECL|method|getMSBibField (String bibtexFieldName)
specifier|public
specifier|static
name|String
name|getMSBibField
parameter_list|(
name|String
name|bibtexFieldName
parameter_list|)
block|{
return|return
name|biblatexToMsBib
operator|.
name|get
argument_list|(
name|bibtexFieldName
argument_list|)
return|;
block|}
DECL|method|getBibTeXField (String msbibFieldName)
specifier|public
specifier|static
name|String
name|getBibTeXField
parameter_list|(
name|String
name|msbibFieldName
parameter_list|)
block|{
return|return
name|biblatexToMsBib
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|msbibFieldName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

