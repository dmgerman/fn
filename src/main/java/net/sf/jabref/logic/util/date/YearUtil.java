begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.util.date
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|date
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_class
DECL|class|YearUtil
specifier|public
class|class
name|YearUtil
block|{
DECL|field|CURRENT_YEAR
specifier|private
specifier|static
specifier|final
name|int
name|CURRENT_YEAR
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
comment|/**      * Will convert a two digit year using the following scheme (describe at      * http://www.filemaker.com/help/02-Adding%20and%20view18.html):      *<p/>      * If a two digit year is encountered they are matched against the last 69      * years and future 30 years.      *<p/>      * For instance if it is the year 1992 then entering 23 is taken to be 1923      * but if you enter 23 in 1993 then it will evaluate to 2023.      *      * @param year The year to convert to 4 digits.      * @return      */
DECL|method|toFourDigitYear (String year)
specifier|public
specifier|static
name|String
name|toFourDigitYear
parameter_list|(
name|String
name|year
parameter_list|)
block|{
return|return
name|YearUtil
operator|.
name|toFourDigitYear
argument_list|(
name|year
argument_list|,
name|YearUtil
operator|.
name|CURRENT_YEAR
argument_list|)
return|;
block|}
comment|/**      * Will convert a two digit year using the following scheme (describe at      * http://www.filemaker.com/help/02-Adding%20and%20view18.html):      *<p/>      * If a two digit year is encountered they are matched against the last 69      * years and future 30 years.      *<p/>      * For instance if it is the year 1992 then entering 23 is taken to be 1923      * but if you enter 23 in 1993 then it will evaluate to 2023.      *      * @param year The year to convert to 4 digits.      * @return      */
DECL|method|toFourDigitYear (String year, int thisYear)
specifier|static
name|String
name|toFourDigitYear
parameter_list|(
name|String
name|year
parameter_list|,
name|int
name|thisYear
parameter_list|)
block|{
if|if
condition|(
name|year
operator|==
literal|null
operator|||
name|year
operator|.
name|length
argument_list|()
operator|!=
literal|2
condition|)
block|{
return|return
name|year
return|;
block|}
try|try
block|{
name|int
name|yearNumber
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|year
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
operator|new
name|Year
argument_list|(
name|thisYear
argument_list|)
operator|.
name|toFourDigitYear
argument_list|(
name|yearNumber
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|year
return|;
block|}
block|}
DECL|class|Year
specifier|private
specifier|static
class|class
name|Year
block|{
DECL|field|year
specifier|private
specifier|final
name|int
name|year
decl_stmt|;
DECL|field|century
specifier|private
specifier|final
name|int
name|century
decl_stmt|;
DECL|field|yearShort
specifier|private
specifier|final
name|int
name|yearShort
decl_stmt|;
DECL|method|Year (int year)
specifier|public
name|Year
parameter_list|(
name|int
name|year
parameter_list|)
block|{
name|this
operator|.
name|year
operator|=
name|year
expr_stmt|;
name|this
operator|.
name|yearShort
operator|=
name|this
operator|.
name|year
operator|%
literal|100
expr_stmt|;
name|this
operator|.
name|century
operator|=
name|this
operator|.
name|year
operator|/
literal|100
operator|*
literal|100
expr_stmt|;
block|}
DECL|method|toFourDigitYear (int relativeYear)
name|int
name|toFourDigitYear
parameter_list|(
name|int
name|relativeYear
parameter_list|)
block|{
if|if
condition|(
name|relativeYear
operator|==
name|yearShort
condition|)
block|{
return|return
name|this
operator|.
name|year
return|;
block|}
comment|// 20 , 90
comment|// 99> 30
if|if
condition|(
operator|(
name|relativeYear
operator|+
literal|100
operator|-
name|yearShort
operator|)
operator|%
literal|100
operator|>
literal|30
condition|)
block|{
if|if
condition|(
name|relativeYear
operator|<
name|yearShort
condition|)
block|{
return|return
name|century
operator|+
name|relativeYear
return|;
block|}
else|else
block|{
return|return
name|century
operator|-
literal|100
operator|+
name|relativeYear
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|relativeYear
operator|<
name|yearShort
condition|)
block|{
return|return
name|century
operator|+
literal|100
operator|+
name|relativeYear
return|;
block|}
else|else
block|{
return|return
name|century
operator|+
name|relativeYear
return|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

