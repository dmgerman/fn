begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 Raik Nagel     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_comment
comment|// function : simple xml reader functions
end_comment

begin_package
DECL|package|net.sf.jabref.logic.util.io
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TXMLReader
specifier|public
class|class
name|TXMLReader
block|{
DECL|field|config
specifier|private
name|Document
name|config
decl_stmt|;
comment|// XML data
DECL|field|ready
specifier|private
name|boolean
name|ready
decl_stmt|;
DECL|method|TXMLReader (String resPath)
specifier|public
name|TXMLReader
parameter_list|(
name|String
name|resPath
parameter_list|)
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resPath
operator|!=
literal|null
condition|)
block|{
name|stream
operator|=
name|TXMLReader
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resPath
argument_list|)
expr_stmt|;
block|}
comment|// not found, check the src/ directory (IDE mode)
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|stream
operator|=
operator|new
name|FileInputStream
argument_list|(
literal|"src"
operator|+
name|resPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|config
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|ready
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|oe
parameter_list|)
block|{
name|oe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isReady ()
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
name|ready
return|;
block|}
DECL|method|getNodes (String name)
specifier|public
name|NodeList
name|getNodes
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|config
operator|.
name|getElementsByTagName
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getFirstElement (Element element, String name)
specifier|private
specifier|static
name|Element
name|getFirstElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeList
name|nl
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|nl
operator|.
name|getLength
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Element: "
operator|+
name|element
operator|+
literal|" does not contain: "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
operator|(
name|Element
operator|)
name|nl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/** returns all "plain" data of a subnode with name<name> */
DECL|method|getSimpleElementText (Element node, String name)
specifier|public
name|String
name|getSimpleElementText
parameter_list|(
name|Element
name|node
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Element
name|namedElement
init|=
name|getFirstElement
argument_list|(
name|node
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|getSimpleElementText
argument_list|(
name|namedElement
argument_list|)
return|;
block|}
comment|/** collect all "plain" data of a xml node */
DECL|method|getSimpleElementText (Element node)
specifier|private
specifier|static
name|String
name|getSimpleElementText
parameter_list|(
name|Element
name|node
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Text
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|child
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// ---------------------------------------------------------------------------
comment|// read some attributes
comment|// --------------------------------------------------------------------------
DECL|method|readIntegerAttribute (Element node, String attrName, int defaultValue)
specifier|public
name|int
name|readIntegerAttribute
parameter_list|(
name|Element
name|node
parameter_list|,
name|String
name|attrName
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|int
name|back
init|=
name|defaultValue
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|String
name|data
init|=
name|node
operator|.
name|getAttribute
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|back
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
block|}
return|return
name|back
return|;
block|}
DECL|method|readStringAttribute (Element node, String attrName, String defaultValue)
specifier|public
name|String
name|readStringAttribute
parameter_list|(
name|Element
name|node
parameter_list|,
name|String
name|attrName
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|String
name|data
init|=
name|node
operator|.
name|getAttribute
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|data
return|;
block|}
block|}
block|}
return|return
name|defaultValue
return|;
block|}
DECL|method|readDoubleAttribute (Element node, String attrName, double defaultValue)
specifier|public
name|double
name|readDoubleAttribute
parameter_list|(
name|Element
name|node
parameter_list|,
name|String
name|attrName
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|String
name|data
init|=
name|node
operator|.
name|getAttribute
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|defaultValue
return|;
block|}
block|}
end_class

end_unit

