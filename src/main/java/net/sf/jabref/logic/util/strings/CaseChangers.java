begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors and Moritz Ringler, Simon Harrer, Oscar Gustafsson     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.util.strings
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_comment
comment|/**  * Class with static methods for changing the case of strings and arrays of strings.  */
end_comment

begin_class
DECL|class|CaseChangers
specifier|public
class|class
name|CaseChangers
block|{
DECL|field|SPACE_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|SPACE_SEPARATOR
init|=
literal|" "
decl_stmt|;
DECL|interface|CaseChanger
specifier|public
interface|interface
name|CaseChanger
block|{
DECL|method|getName ()
name|String
name|getName
parameter_list|()
function_decl|;
DECL|method|changeCase (String input)
name|String
name|changeCase
parameter_list|(
name|String
name|input
parameter_list|)
function_decl|;
block|}
DECL|class|LowerCaseChanger
specifier|public
specifier|static
class|class
name|LowerCaseChanger
implements|implements
name|CaseChanger
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"lower"
return|;
block|}
comment|/**          * Converts all characters of the string to lower case, but does not change words starting with "{"          */
annotation|@
name|Override
DECL|method|changeCase (String input)
specifier|public
name|String
name|changeCase
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
index|[]
name|words
init|=
name|input
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|words
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|words
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|words
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
index|[
name|i
index|]
operator|=
name|words
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|StringUtil
operator|.
name|join
argument_list|(
name|result
argument_list|,
name|CaseChangers
operator|.
name|SPACE_SEPARATOR
argument_list|)
return|;
block|}
block|}
DECL|class|UpperCaseChanger
specifier|public
specifier|static
class|class
name|UpperCaseChanger
implements|implements
name|CaseChanger
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"UPPER"
return|;
block|}
comment|/**          * Converts all characters of the given string to upper case, but does not change words starting with "{"          */
annotation|@
name|Override
DECL|method|changeCase (String input)
specifier|public
name|String
name|changeCase
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
index|[]
name|words
init|=
name|input
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|words
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|words
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|words
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
index|[
name|i
index|]
operator|=
name|words
index|[
name|i
index|]
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|StringUtil
operator|.
name|join
argument_list|(
name|result
argument_list|,
name|CaseChangers
operator|.
name|SPACE_SEPARATOR
argument_list|)
return|;
block|}
block|}
DECL|class|UpperFirstCaseChanger
specifier|public
specifier|static
class|class
name|UpperFirstCaseChanger
implements|implements
name|CaseChanger
block|{
DECL|field|UF_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|UF_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\b\\w"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Upper first"
return|;
block|}
comment|/**          * Converts the first character of the first word of the given string to a upper case (and the remaining characters of the first word to lower case), but does not change anything if word starts with "{"          */
annotation|@
name|Override
DECL|method|changeCase (String input)
specifier|public
name|String
name|changeCase
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
name|lowerCase
init|=
name|CaseChangers
operator|.
name|LOWER
operator|.
name|changeCase
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|UpperFirstCaseChanger
operator|.
name|UF_PATTERN
operator|.
name|matcher
argument_list|(
name|lowerCase
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|matcher
operator|.
name|replaceFirst
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|input
return|;
block|}
block|}
block|}
DECL|class|UpperEachFirstCaseChanger
specifier|public
specifier|static
class|class
name|UpperEachFirstCaseChanger
implements|implements
name|CaseChanger
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Upper Each First"
return|;
block|}
comment|/**          * Converts the first character of each word of the given string to a upper case (and all others to lower case), but does not change words starting with "{"          */
annotation|@
name|Override
DECL|method|changeCase (String input)
specifier|public
name|String
name|changeCase
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
index|[]
name|words
init|=
name|input
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|words
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|words
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|words
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
index|[
name|i
index|]
operator|=
name|StringUtil
operator|.
name|capitalizeFirst
argument_list|(
name|words
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|StringUtil
operator|.
name|join
argument_list|(
name|result
argument_list|,
name|CaseChangers
operator|.
name|SPACE_SEPARATOR
argument_list|)
return|;
block|}
block|}
DECL|class|TitleCaseChanger
specifier|public
specifier|static
class|class
name|TitleCaseChanger
implements|implements
name|CaseChanger
block|{
DECL|field|notToCapitalize
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|notToCapitalize
decl_stmt|;
static|static
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|smallerWords
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Articles
name|smallerWords
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"an"
argument_list|,
literal|"the"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Prepositions
name|smallerWords
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"above"
argument_list|,
literal|"about"
argument_list|,
literal|"across"
argument_list|,
literal|"against"
argument_list|,
literal|"along"
argument_list|,
literal|"among"
argument_list|,
literal|"around"
argument_list|,
literal|"at"
argument_list|,
literal|"before"
argument_list|,
literal|"behind"
argument_list|,
literal|"below"
argument_list|,
literal|"beneath"
argument_list|,
literal|"beside"
argument_list|,
literal|"between"
argument_list|,
literal|"beyond"
argument_list|,
literal|"by"
argument_list|,
literal|"down"
argument_list|,
literal|"during"
argument_list|,
literal|"except"
argument_list|,
literal|"for"
argument_list|,
literal|"from"
argument_list|,
literal|"in"
argument_list|,
literal|"inside"
argument_list|,
literal|"into"
argument_list|,
literal|"like"
argument_list|,
literal|"near"
argument_list|,
literal|"of"
argument_list|,
literal|"off"
argument_list|,
literal|"on"
argument_list|,
literal|"onto"
argument_list|,
literal|"since"
argument_list|,
literal|"to"
argument_list|,
literal|"toward"
argument_list|,
literal|"through"
argument_list|,
literal|"under"
argument_list|,
literal|"until"
argument_list|,
literal|"up"
argument_list|,
literal|"upon"
argument_list|,
literal|"with"
argument_list|,
literal|"within"
argument_list|,
literal|"without"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Conjuctions
name|smallerWords
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"and"
argument_list|,
literal|"but"
argument_list|,
literal|"for"
argument_list|,
literal|"nor"
argument_list|,
literal|"or"
argument_list|,
literal|"so"
argument_list|,
literal|"yet"
argument_list|)
argument_list|)
expr_stmt|;
comment|// unmodifiable for thread safety
name|notToCapitalize
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|smallerWords
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Title"
return|;
block|}
comment|/**          * Converts all words to upper case, but converts articles, prepositions, and conjunctions to lower case          * Does not change words starting with "{"          */
annotation|@
name|Override
DECL|method|changeCase (String input)
specifier|public
name|String
name|changeCase
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
index|[]
name|words
init|=
name|input
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|words
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|words
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|words
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|String
name|word
init|=
name|words
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// first word is Always capitalized
name|boolean
name|alwaysCapitalizeFirstWord
init|=
name|i
operator|==
literal|0
decl_stmt|;
name|boolean
name|alwaysCapitalizeLastWord
init|=
name|i
operator|==
operator|(
name|words
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|alwaysCapitalizeFirstWord
operator|||
name|alwaysCapitalizeLastWord
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|StringUtil
operator|.
name|capitalizeFirst
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TitleCaseChanger
operator|.
name|notToCapitalize
operator|.
name|contains
argument_list|(
name|word
argument_list|)
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|word
expr_stmt|;
block|}
else|else
block|{
name|result
index|[
name|i
index|]
operator|=
name|StringUtil
operator|.
name|capitalizeFirst
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|StringUtil
operator|.
name|join
argument_list|(
name|result
argument_list|,
name|CaseChangers
operator|.
name|SPACE_SEPARATOR
argument_list|)
return|;
block|}
block|}
DECL|field|LOWER
specifier|public
specifier|static
specifier|final
name|LowerCaseChanger
name|LOWER
init|=
operator|new
name|LowerCaseChanger
argument_list|()
decl_stmt|;
DECL|field|UPPER
specifier|public
specifier|static
specifier|final
name|UpperCaseChanger
name|UPPER
init|=
operator|new
name|UpperCaseChanger
argument_list|()
decl_stmt|;
DECL|field|UPPER_FIRST
specifier|public
specifier|static
specifier|final
name|UpperFirstCaseChanger
name|UPPER_FIRST
init|=
operator|new
name|UpperFirstCaseChanger
argument_list|()
decl_stmt|;
DECL|field|UPPER_EACH_FIRST
specifier|public
specifier|static
specifier|final
name|UpperEachFirstCaseChanger
name|UPPER_EACH_FIRST
init|=
operator|new
name|UpperEachFirstCaseChanger
argument_list|()
decl_stmt|;
DECL|field|TITLE
specifier|public
specifier|static
specifier|final
name|TitleCaseChanger
name|TITLE
init|=
operator|new
name|TitleCaseChanger
argument_list|()
decl_stmt|;
DECL|field|ALL
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|CaseChanger
argument_list|>
name|ALL
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|CaseChangers
operator|.
name|LOWER
argument_list|,
name|CaseChangers
operator|.
name|UPPER
argument_list|,
name|CaseChangers
operator|.
name|UPPER_FIRST
argument_list|,
name|CaseChangers
operator|.
name|UPPER_EACH_FIRST
argument_list|,
name|CaseChangers
operator|.
name|TITLE
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

