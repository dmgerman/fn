begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.util.io
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * Currently used for debugging only  */
end_comment

begin_class
DECL|class|XMLUtil
specifier|public
class|class
name|XMLUtil
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|XMLUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Prints out the document to standard out. Used to generate files for test cases.      */
DECL|method|printDocument (Document doc)
specifier|public
specifier|static
name|void
name|printDocument
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
try|try
block|{
name|DOMSource
name|domSource
init|=
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|TransformerFactory
name|tf
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|tf
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|domSource
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|asList (NodeList n)
specifier|public
specifier|static
name|List
argument_list|<
name|Node
argument_list|>
name|asList
parameter_list|(
name|NodeList
name|n
parameter_list|)
block|{
return|return
name|n
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
operator|new
name|NodeListWrapper
argument_list|(
name|n
argument_list|)
return|;
block|}
comment|/**      * Gets the content of a subnode.      * For example,      *<item>      *<nodeName>content</nodeName>      *</item>      */
DECL|method|getNodeContent (Node item, String nodeName)
specifier|public
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|getNodeContent
parameter_list|(
name|Node
name|item
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
if|if
condition|(
name|item
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|NodeList
name|metadata
init|=
operator|(
operator|(
name|Element
operator|)
name|item
operator|)
operator|.
name|getElementsByTagName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|metadata
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
comment|/**      * Gets the content of an attribute.      * For example,      *<item attributeName="content" />      */
DECL|method|getAttributeContent (Node item, String attributeName)
specifier|public
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|getAttributeContent
parameter_list|(
name|Node
name|item
parameter_list|,
name|String
name|attributeName
parameter_list|)
block|{
name|NamedNodeMap
name|attributes
init|=
name|item
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|attributes
operator|.
name|getNamedItem
argument_list|(
name|attributeName
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Node
operator|::
name|getTextContent
argument_list|)
return|;
block|}
comment|/**      * Gets a list of subnodes with the specified tag name.      * For example,      *<item>      *<node>first hit</node>      *<node>second hit</node>      *</item>      */
DECL|method|getNodesByName (Node item, String nodeName)
specifier|public
specifier|static
name|List
argument_list|<
name|Node
argument_list|>
name|getNodesByName
parameter_list|(
name|Node
name|item
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
if|if
condition|(
name|item
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|NodeList
name|nodes
init|=
operator|(
operator|(
name|Element
operator|)
name|item
operator|)
operator|.
name|getElementsByTagName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
return|return
name|asList
argument_list|(
name|nodes
argument_list|)
return|;
block|}
comment|/**      * Gets a the first subnode with the specified tag name.      * For example,      *<item>      *<node>hit</node>      *<node>second hit, but not returned</node>      *</item>      */
DECL|method|getNode (Node item, String nodeName)
specifier|public
specifier|static
name|Optional
argument_list|<
name|Node
argument_list|>
name|getNode
parameter_list|(
name|Node
name|item
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
return|return
name|getNodesByName
argument_list|(
name|item
argument_list|,
name|nodeName
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
return|;
block|}
comment|// Wrapper to make NodeList iterable,
comment|// taken from<a href="http://stackoverflow.com/questions/19589231/can-i-iterate-through-a-nodelist-using-for-each-in-java">StackOverflow Answer</a>.
DECL|class|NodeListWrapper
specifier|private
specifier|static
specifier|final
class|class
name|NodeListWrapper
extends|extends
name|AbstractList
argument_list|<
name|Node
argument_list|>
implements|implements
name|RandomAccess
block|{
DECL|field|list
specifier|private
specifier|final
name|NodeList
name|list
decl_stmt|;
DECL|method|NodeListWrapper (NodeList list)
name|NodeListWrapper
parameter_list|(
name|NodeList
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
DECL|method|get (int index)
specifier|public
name|Node
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|list
operator|.
name|item
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

