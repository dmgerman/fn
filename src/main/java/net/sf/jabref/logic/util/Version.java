begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * Represents the Application Version with the major and minor number, the full Version String and if it's a developer version  */
end_comment

begin_class
DECL|class|Version
specifier|public
class|class
name|Version
block|{
DECL|field|JABREF_DOWNLOAD_URL
specifier|public
specifier|static
specifier|final
name|String
name|JABREF_DOWNLOAD_URL
init|=
literal|"https://downloads.jabref.org"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Version
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|JABREF_GITHUB_URL
specifier|private
specifier|static
specifier|final
name|String
name|JABREF_GITHUB_URL
init|=
literal|"https://api.github.com/repos/JabRef/jabref/releases/latest"
decl_stmt|;
DECL|field|fullVersion
specifier|private
name|String
name|fullVersion
init|=
name|BuildInfo
operator|.
name|UNKNOWN_VERSION
decl_stmt|;
DECL|field|major
specifier|private
name|int
name|major
decl_stmt|;
DECL|field|minor
specifier|private
name|int
name|minor
decl_stmt|;
DECL|field|patch
specifier|private
name|int
name|patch
decl_stmt|;
DECL|field|isDevelopmentVersion
specifier|private
name|boolean
name|isDevelopmentVersion
decl_stmt|;
comment|/**      * @param version must be in form of X.X (e.g., 3.3; 3.4dev)      */
DECL|method|Version (String version)
specifier|public
name|Version
parameter_list|(
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
operator|(
name|version
operator|==
literal|null
operator|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|version
argument_list|)
operator|||
name|version
operator|.
name|equals
argument_list|(
name|BuildInfo
operator|.
name|UNKNOWN_VERSION
argument_list|)
operator|||
literal|"${version}"
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|versionParts
init|=
name|version
operator|.
name|split
argument_list|(
literal|"dev"
argument_list|)
decl_stmt|;
name|String
index|[]
name|versionNumbers
init|=
name|versionParts
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|major
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|versionNumbers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|minor
operator|=
name|versionNumbers
operator|.
name|length
operator|>=
literal|2
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|versionNumbers
index|[
literal|1
index|]
argument_list|)
else|:
literal|0
expr_stmt|;
name|this
operator|.
name|patch
operator|=
name|versionNumbers
operator|.
name|length
operator|>=
literal|3
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|versionNumbers
index|[
literal|2
index|]
argument_list|)
else|:
literal|0
expr_stmt|;
name|this
operator|.
name|fullVersion
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|isDevelopmentVersion
operator|=
name|version
operator|.
name|contains
argument_list|(
literal|"dev"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Invalid version string used: "
operator|+
name|version
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Grabs the latest release version from the JabRef GitHub repository      */
DECL|method|getLatestVersion ()
specifier|public
specifier|static
name|Version
name|getLatestVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|URLConnection
name|connection
init|=
operator|new
name|URL
argument_list|(
name|JABREF_GITHUB_URL
argument_list|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestProperty
argument_list|(
literal|"Accept-Charset"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|BufferedReader
name|rd
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JSONObject
name|obj
init|=
operator|new
name|JSONObject
argument_list|(
name|rd
operator|.
name|readLine
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Version
argument_list|(
name|obj
operator|.
name|getString
argument_list|(
literal|"tag_name"
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|"v"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @return true iff this version is newer than the passed one      */
DECL|method|isNewerThan (Version otherVersion)
specifier|public
name|boolean
name|isNewerThan
parameter_list|(
name|Version
name|otherVersion
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|otherVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|this
argument_list|,
name|otherVersion
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|getFullVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|BuildInfo
operator|.
name|UNKNOWN_VERSION
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|otherVersion
operator|.
name|getFullVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|BuildInfo
operator|.
name|UNKNOWN_VERSION
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|getMajor
argument_list|()
operator|>
name|otherVersion
operator|.
name|getMajor
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|getMajor
argument_list|()
operator|==
name|otherVersion
operator|.
name|getMajor
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|getMinor
argument_list|()
operator|>
name|otherVersion
operator|.
name|getMinor
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
operator|(
name|this
operator|.
name|getMinor
argument_list|()
operator|==
name|otherVersion
operator|.
name|getMinor
argument_list|()
operator|)
operator|&&
operator|(
name|this
operator|.
name|getPatch
argument_list|()
operator|>
name|otherVersion
operator|.
name|getPatch
argument_list|()
operator|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|getFullVersion ()
specifier|public
name|String
name|getFullVersion
parameter_list|()
block|{
return|return
name|fullVersion
return|;
block|}
DECL|method|getMajor ()
specifier|public
name|int
name|getMajor
parameter_list|()
block|{
return|return
name|major
return|;
block|}
DECL|method|getMinor ()
specifier|public
name|int
name|getMinor
parameter_list|()
block|{
return|return
name|minor
return|;
block|}
DECL|method|getPatch ()
specifier|public
name|int
name|getPatch
parameter_list|()
block|{
return|return
name|patch
return|;
block|}
DECL|method|isDevelopmentVersion ()
specifier|public
name|boolean
name|isDevelopmentVersion
parameter_list|()
block|{
return|return
name|isDevelopmentVersion
return|;
block|}
comment|/**      * @return The link to the changelog on github to this specific version      * (https://github.com/JabRef/jabref/blob/vX.X/CHANGELOG.md)      */
DECL|method|getChangelogUrl ()
specifier|public
name|String
name|getChangelogUrl
parameter_list|()
block|{
name|String
name|version
init|=
name|this
operator|.
name|getMajor
argument_list|()
operator|+
literal|"."
operator|+
name|this
operator|.
name|getMinor
argument_list|()
operator|+
operator|(
name|this
operator|.
name|getPatch
argument_list|()
operator|!=
literal|0
condition|?
literal|"."
operator|+
name|this
operator|.
name|getPatch
argument_list|()
else|:
literal|""
operator|)
decl_stmt|;
return|return
literal|"https://github.com/JabRef/jabref/blob/v"
operator|+
name|version
operator|+
literal|"/CHANGELOG.md"
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|Version
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Version
name|otherVersion
init|=
operator|(
name|Version
operator|)
name|other
decl_stmt|;
comment|// till all the information are stripped from the fullverison this should suffice
return|return
name|this
operator|.
name|getFullVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|otherVersion
operator|.
name|getFullVersion
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getFullVersion
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getFullVersion
argument_list|()
return|;
block|}
block|}
end_class

end_unit

