begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.util.io
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryNotEmptyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
DECL|class|FileUtil
specifier|public
class|class
name|FileUtil
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Returns the extension of a file or null if the file does not have one (no . in name).      *      * @param file      * @return The extension, trimmed and in lowercase.      */
DECL|method|getFileExtension (File file)
specifier|public
specifier|static
name|String
name|getFileExtension
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
operator|&&
name|pos
operator|<
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Copies a file.      *      * @param source         File Source file      * @param dest           File Destination file      * @param deleteIfExists boolean Determines whether the copy goes on even if the file      *                       exists.      * @return boolean Whether the copy succeeded, or was stopped due to the      * file already existing.      * @throws IOException      */
DECL|method|copyFile (File source, File dest, boolean deleteIfExists)
specifier|public
specifier|static
name|boolean
name|copyFile
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|dest
parameter_list|,
name|boolean
name|deleteIfExists
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedInputStream
name|in
init|=
literal|null
decl_stmt|;
name|BufferedOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Check if the file already exists.
if|if
condition|(
name|dest
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|deleteIfExists
condition|)
block|{
return|return
literal|false
return|;
comment|// else dest.delete();
block|}
block|}
name|in
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|el
decl_stmt|;
comment|// int tell = 0;
while|while
condition|(
operator|(
name|el
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * @param fileName      * @param destFilename      * @return      */
DECL|method|renameFile (String fileName, String destFilename)
specifier|public
specifier|static
name|boolean
name|renameFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|destFilename
parameter_list|)
block|{
comment|// File (or directory) with old name
name|File
name|fromFile
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// File (or directory) with new name
name|File
name|toFile
init|=
operator|new
name|File
argument_list|(
name|destFilename
argument_list|)
decl_stmt|;
comment|// Rename file (or directory)
return|return
name|fromFile
operator|.
name|renameTo
argument_list|(
name|toFile
argument_list|)
return|;
block|}
comment|/**      * Converts a relative filename to an absolute one, if necessary. Returns      * null if the file does not exist.<br/>      *<p>      * Uses<ul>      *<li>the default directory associated with the extension of the file</li>      *<li>the standard file directory</li>      *<li>the directory of the bib file</li>      *</ul>      *      * @param metaData The MetaData for the database this file belongs to.      * @param name     The filename, may also be a relative path to the file      */
DECL|method|expandFilename (final MetaData metaData, String name)
specifier|public
specifier|static
name|File
name|expandFilename
parameter_list|(
specifier|final
name|MetaData
name|metaData
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|int
name|pos
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|extension
init|=
name|pos
operator|>=
literal|0
operator|&&
name|pos
operator|<
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|?
name|name
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// Find the default directory for this field type, if any:
name|String
index|[]
name|dir
init|=
name|metaData
operator|.
name|getFileDirectory
argument_list|(
name|extension
argument_list|)
decl_stmt|;
comment|// Include the standard "file" directory:
name|String
index|[]
name|fileDir
init|=
name|metaData
operator|.
name|getFileDirectory
argument_list|(
name|GUIGlobals
operator|.
name|FILE_FIELD
argument_list|)
decl_stmt|;
comment|// Include the directory of the bib file:
name|ArrayList
argument_list|<
name|String
argument_list|>
name|al
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|aDir
range|:
name|dir
control|)
block|{
if|if
condition|(
operator|!
name|al
operator|.
name|contains
argument_list|(
name|aDir
argument_list|)
condition|)
block|{
name|al
operator|.
name|add
argument_list|(
name|aDir
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|aFileDir
range|:
name|fileDir
control|)
block|{
if|if
condition|(
operator|!
name|al
operator|.
name|contains
argument_list|(
name|aFileDir
argument_list|)
condition|)
block|{
name|al
operator|.
name|add
argument_list|(
name|aFileDir
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|dirs
init|=
name|al
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|al
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
name|expandFilename
argument_list|(
name|name
argument_list|,
name|dirs
argument_list|)
return|;
block|}
comment|/**      * Converts a relative filename to an absolute one, if necessary. Returns      * null if the file does not exist.      *<p>      * Will look in each of the given dirs starting from the beginning and      * returning the first found file to match if any.      */
DECL|method|expandFilename (String name, String[] dir)
specifier|public
specifier|static
name|File
name|expandFilename
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|dir
parameter_list|)
block|{
for|for
control|(
name|String
name|aDir
range|:
name|dir
control|)
block|{
if|if
condition|(
name|aDir
operator|!=
literal|null
condition|)
block|{
name|File
name|result
init|=
name|expandFilename
argument_list|(
name|name
argument_list|,
name|aDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Converts a relative filename to an absolute one, if necessary. Returns      * null if the file does not exist.      */
DECL|method|expandFilename (String name, String dir)
specifier|public
specifier|static
name|File
name|expandFilename
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|dir
parameter_list|)
block|{
name|File
name|file
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|dir
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dir
operator|.
name|endsWith
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
condition|)
block|{
name|name
operator|=
name|dir
operator|+
name|name
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|dir
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|name
expr_stmt|;
block|}
comment|// System.out.println("expanded to: "+name);
comment|// if (name.startsWith("ftp"))
name|file
operator|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|file
return|;
block|}
comment|// Ok, try to fix / and \ problems:
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
comment|// workaround for catching Java bug in regexp replacer
comment|// and, why, why, why ... I don't get it - wegner 2006/01/22
try|try
block|{
name|name
operator|=
name|name
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
literal|"\\\\"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StringIndexOutOfBoundsException
name|exc
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"An internal Java error was caused by the entry "
operator|+
literal|"\""
operator|+
name|name
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|name
operator|=
name|name
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
comment|// System.out.println("expandFilename: "+name);
name|file
operator|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|file
return|;
block|}
comment|/**      * Converts an absolute filename to a relative one, if necessary.      * Returns the parameter fileName itself if no shortening is possible      *<p>      * This method works correctly only if dirs are sorted decent in their length      * i.e. /home/user/literature/important before /home/user/literature      *      * @param fileName the filename to be shortened      * @param dirs     directories to check.      */
DECL|method|shortenFileName (File fileName, String[] dirs)
specifier|public
specifier|static
name|File
name|shortenFileName
parameter_list|(
name|File
name|fileName
parameter_list|,
name|String
index|[]
name|dirs
parameter_list|)
block|{
if|if
condition|(
name|fileName
operator|==
literal|null
operator|||
name|fileName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|fileName
return|;
block|}
if|if
condition|(
operator|!
name|fileName
operator|.
name|isAbsolute
argument_list|()
operator|||
name|dirs
operator|==
literal|null
condition|)
block|{
return|return
name|fileName
return|;
block|}
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|File
name|result
init|=
name|shortenFileName
argument_list|(
name|fileName
argument_list|,
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
block|}
return|return
name|fileName
return|;
block|}
DECL|method|shortenFileName (File fileName, String dir)
specifier|private
specifier|static
name|File
name|shortenFileName
parameter_list|(
name|File
name|fileName
parameter_list|,
name|String
name|dir
parameter_list|)
block|{
if|if
condition|(
name|fileName
operator|==
literal|null
operator|||
name|fileName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|fileName
return|;
block|}
if|if
condition|(
operator|!
name|fileName
operator|.
name|isAbsolute
argument_list|()
operator|||
name|dir
operator|==
literal|null
condition|)
block|{
return|return
name|fileName
return|;
block|}
name|String
name|longName
decl_stmt|;
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
comment|// case-insensitive matching on Windows
name|longName
operator|=
name|fileName
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|dir
operator|=
name|dir
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|longName
operator|=
name|fileName
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|endsWith
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
condition|)
block|{
name|dir
operator|=
name|dir
operator|.
name|concat
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|longName
operator|.
name|startsWith
argument_list|(
name|dir
argument_list|)
condition|)
block|{
comment|// result is based on original name, not on lower-cased name
name|String
name|newName
init|=
name|fileName
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|dir
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|newName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|fileName
return|;
block|}
block|}
block|}
end_class

end_unit

