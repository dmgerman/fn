begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.util.io
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|DOI
import|;
end_import

begin_class
DECL|class|URLUtil
specifier|public
class|class
name|URLUtil
block|{
DECL|field|URL_EXP
specifier|private
specifier|static
specifier|final
name|String
name|URL_EXP
init|=
literal|"^(https?|ftp)://.+"
decl_stmt|;
comment|/**      * Cleans URLs returned by Google search.      *      *<example>      *  If you copy links from search results from Google, all links will be enriched with search meta data, e.g.      *  https://www.google.de/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&&url=http%3A%2F%2Fwww.inrg.csie.ntu.edu.tw%2Falgorithm2014%2Fhomework%2FWagner-74.pdf&ei=DifeVYHkDYWqU5W0j6gD&usg=AFQjCNFl638rl5KVta1jIMWLyb4CPSZidg&sig2=0hSSMw9XZXL3HJWwEcJtOg      *</example>      *      * @param url the Google search URL string      * @return the cleaned Google URL or @code{url} if no search URL was detected      */
DECL|method|cleanGoogleSearchURL (String url)
specifier|public
specifier|static
name|String
name|cleanGoogleSearchURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
comment|// Detect Google search URL
specifier|final
name|String
name|searchExp
init|=
literal|"^https?://(?:www\\.)?google\\.[\\.a-z]+?/url.*"
decl_stmt|;
if|if
condition|(
operator|!
name|url
operator|.
name|matches
argument_list|(
name|searchExp
argument_list|)
condition|)
block|{
return|return
name|url
return|;
block|}
comment|// Extract destination URL
try|try
block|{
name|URL
name|searchURL
init|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// URL parameters
name|String
name|query
init|=
name|searchURL
operator|.
name|getQuery
argument_list|()
decl_stmt|;
comment|// no parameters
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
comment|// extract url parameter
name|String
index|[]
name|pairs
init|=
name|query
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pair
range|:
name|pairs
control|)
block|{
comment|// "clean" url is decoded value of "url" parameter
if|if
condition|(
name|pair
operator|.
name|startsWith
argument_list|(
literal|"url="
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|pair
operator|.
name|substring
argument_list|(
name|pair
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|,
name|pair
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|decode
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|value
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|// url?
if|if
condition|(
name|decode
operator|.
name|matches
argument_list|(
name|URL_EXP
argument_list|)
condition|)
block|{
return|return
name|decode
return|;
block|}
block|}
block|}
return|return
name|url
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
decl||
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
name|url
return|;
block|}
block|}
comment|/**      * Make sure an URL is "portable", in that it doesn't contain bad characters that break the open command in some      * OSes.      *      * A call to this method will also remove \\url{} enclosings and clean Doi links.      *      * @param link :the URL to sanitize.      * @return Sanitized URL      */
DECL|method|sanitizeUrl (String link)
specifier|public
specifier|static
name|String
name|sanitizeUrl
parameter_list|(
name|String
name|link
parameter_list|)
block|{
name|link
operator|=
name|link
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// First check if it is enclosed in \\url{}. If so, remove the wrapper.
if|if
condition|(
name|link
operator|.
name|startsWith
argument_list|(
literal|"\\url{"
argument_list|)
operator|&&
name|link
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
condition|)
block|{
name|link
operator|=
name|link
operator|.
name|substring
argument_list|(
literal|5
argument_list|,
name|link
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// DOI cleanup
comment|// converts doi-only link to full http address
comment|// Morten Alver 6 Nov 2012: this extracts a nonfunctional Doi from some complete
comment|// http addresses (e.g. http://onlinelibrary.wiley.com/doi/10.1002/rra.999/abstract, where
comment|// the trailing "/abstract" is included but doesn't lead to a resolvable Doi).
comment|// To prevent mangling of working URLs I'm disabling this check if the link is already
comment|// a full http link:
comment|// TODO: not sure if this is allowed
if|if
condition|(
name|link
operator|.
name|matches
argument_list|(
literal|"^doi:/*.*"
argument_list|)
condition|)
block|{
comment|// Remove 'doi:'
name|link
operator|=
name|link
operator|.
name|replaceFirst
argument_list|(
literal|"^doi:/*"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|link
operator|=
operator|new
name|DOI
argument_list|(
name|link
argument_list|)
operator|.
name|getURLAsASCIIString
argument_list|()
expr_stmt|;
block|}
name|Optional
argument_list|<
name|DOI
argument_list|>
name|doi
init|=
name|DOI
operator|.
name|build
argument_list|(
name|link
argument_list|)
decl_stmt|;
if|if
condition|(
name|doi
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|link
operator|.
name|matches
argument_list|(
literal|"^https?://.*"
argument_list|)
condition|)
block|{
name|link
operator|=
name|doi
operator|.
name|get
argument_list|()
operator|.
name|getURLAsASCIIString
argument_list|()
expr_stmt|;
block|}
comment|// FIXME: everything below is really flawed atm
name|link
operator|=
name|link
operator|.
name|replaceAll
argument_list|(
literal|"\\+"
argument_list|,
literal|"%2B"
argument_list|)
expr_stmt|;
try|try
block|{
name|link
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|link
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
comment|/**          * Fix for: [ 1574773 ] sanitizeUrl() breaks ftp:// and file:///          *          * http://sourceforge.net/tracker/index.php?func=detail&aid=1574773&group_id=92314&atid=600306          */
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
name|link
argument_list|,
literal|null
argument_list|)
operator|.
name|toASCIIString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
return|return
name|link
return|;
block|}
block|}
block|}
end_class

end_unit

