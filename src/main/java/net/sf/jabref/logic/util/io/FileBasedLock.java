begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.util.io
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|SaveSession
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_class
DECL|class|FileBasedLock
specifier|public
class|class
name|FileBasedLock
block|{
comment|/**      * This method checks whether there is a lock file for the given file. If      * there is, it waits for 500 ms. This is repeated until the lock is gone      * or we have waited the maximum number of times.      *      * @param file The file to check the lock for.      * @param maxWaitCount The maximum number of times to wait.      * @return true if the lock file is gone, false if it is still there.      */
DECL|method|waitForFileLock (File file, int maxWaitCount)
specifier|public
specifier|static
name|boolean
name|waitForFileLock
parameter_list|(
name|File
name|file
parameter_list|,
name|int
name|maxWaitCount
parameter_list|)
block|{
comment|// Check if the file is locked by another JabRef user:
name|int
name|lockCheckCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|hasLockFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
if|if
condition|(
name|lockCheckCount
operator|++
operator|==
name|maxWaitCount
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{             }
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Check whether a lock file exists for this file.      * @param file The file to check.      * @return true if a lock file exists, false otherwise.      */
DECL|method|hasLockFile (File file)
specifier|public
specifier|static
name|boolean
name|hasLockFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|File
name|lock
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|+
name|SaveSession
operator|.
name|LOCKFILE_SUFFIX
argument_list|)
decl_stmt|;
return|return
name|lock
operator|.
name|exists
argument_list|()
return|;
block|}
comment|/**      * Find the lock file's last modified time, if it has a lock file.      * @param file The file to check.      * @return the last modified time if lock file exists, -1 otherwise.      */
DECL|method|getLockFileTimeStamp (File file)
specifier|public
specifier|static
name|long
name|getLockFileTimeStamp
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|File
name|lock
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|+
name|SaveSession
operator|.
name|LOCKFILE_SUFFIX
argument_list|)
decl_stmt|;
return|return
name|lock
operator|.
name|exists
argument_list|()
condition|?
name|lock
operator|.
name|lastModified
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
comment|/**      * Check if a lock file exists, and delete it if it does.      * @return true if the lock file existed, false otherwise.      */
DECL|method|deleteLockFile (File file)
specifier|public
specifier|static
name|boolean
name|deleteLockFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|File
name|lock
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|+
name|SaveSession
operator|.
name|LOCKFILE_SUFFIX
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lock
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|lock
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

