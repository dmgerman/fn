begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.util.io
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|FileTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|FileBasedLock
specifier|public
class|class
name|FileBasedLock
block|{
comment|/**      * The age in ms of a lockfile before JabRef will offer to "steal" the locked file.      */
DECL|field|LOCKFILE_CRITICAL_AGE
specifier|public
specifier|static
specifier|final
name|long
name|LOCKFILE_CRITICAL_AGE
init|=
literal|60000
decl_stmt|;
DECL|field|LOCKFILE_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCKFILE_SUFFIX
init|=
literal|".lock"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileBasedLock
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * This method checks whether there is a lock file for the given file. If      * there is, it waits for 500 ms. This is repeated until the lock is gone      * or we have waited the maximum number of times.      *      * @param file The file to check the lock for.      * @param maxWaitCount The maximum number of times to wait.      * @return true if the lock file is gone, false if it is still there.      */
DECL|method|waitForFileLock (Path file, int maxWaitCount)
specifier|public
specifier|static
name|boolean
name|waitForFileLock
parameter_list|(
name|Path
name|file
parameter_list|,
name|int
name|maxWaitCount
parameter_list|)
block|{
comment|// Check if the file is locked by another JabRef user:
name|int
name|lockCheckCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|hasLockFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
if|if
condition|(
name|lockCheckCount
operator|++
operator|==
name|maxWaitCount
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Check whether a lock file exists for this file.      * @param file The file to check.      * @return true if a lock file exists, false otherwise.      */
DECL|method|hasLockFile (Path file)
specifier|public
specifier|static
name|boolean
name|hasLockFile
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|Path
name|lockFile
init|=
name|getLockFilePath
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
name|Files
operator|.
name|exists
argument_list|(
name|lockFile
argument_list|)
return|;
block|}
comment|/**      * Find the lock file's last modified time, if it has a lock file.      * @param file The file to check.      * @return the last modified time if lock file exists, empty optional otherwise.      */
DECL|method|getLockFileTimeStamp (Path file)
specifier|public
specifier|static
name|Optional
argument_list|<
name|FileTime
argument_list|>
name|getLockFileTimeStamp
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|Path
name|lockFile
init|=
name|getLockFilePath
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Files
operator|.
name|exists
argument_list|(
name|lockFile
argument_list|)
condition|?
name|Optional
operator|.
name|of
argument_list|(
name|Files
operator|.
name|readAttributes
argument_list|(
name|lockFile
argument_list|,
name|BasicFileAttributes
operator|.
name|class
argument_list|)
operator|.
name|lastModifiedTime
argument_list|()
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
comment|/**      * Check if a lock file exists, and delete it if it does.      *      * @return true if the lock file existed, false otherwise.      */
DECL|method|deleteLockFile (Path file)
specifier|public
specifier|static
name|boolean
name|deleteLockFile
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|Path
name|lockFile
init|=
name|getLockFilePath
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|lockFile
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|lockFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Cannot delete lock file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Check if a lock file exists, and create it if it doesn't.      *      * @return true if the lock file already existed      * @throws IOException if something happens during creation.      */
DECL|method|createLockFile (Path file)
specifier|public
specifier|static
name|boolean
name|createLockFile
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|lockFile
init|=
name|getLockFilePath
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|lockFile
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|Files
operator|.
name|write
argument_list|(
name|lockFile
argument_list|,
literal|"0"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error when creating lock file."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|lockFile
operator|.
name|toFile
argument_list|()
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|getLockFilePath (Path file)
specifier|private
specifier|static
name|Path
name|getLockFilePath
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|resolveSibling
argument_list|(
name|file
operator|.
name|getFileName
argument_list|()
operator|+
name|LOCKFILE_SUFFIX
argument_list|)
return|;
block|}
block|}
end_class

end_unit

