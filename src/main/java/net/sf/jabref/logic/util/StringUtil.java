begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.util
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_class
DECL|class|StringUtil
specifier|public
class|class
name|StringUtil
block|{
comment|/**      * Returns the string, after shaving off whitespace at the beginning and end,      * and removing (at most) one pair of braces or " surrounding it.      *      * @param toShave      * @return      */
DECL|method|shaveString (String toShave)
specifier|public
specifier|static
name|String
name|shaveString
parameter_list|(
name|String
name|toShave
parameter_list|)
block|{
if|if
condition|(
name|toShave
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|char
name|first
decl_stmt|;
name|char
name|second
decl_stmt|;
name|int
name|begin
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
name|toShave
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// We start out assuming nothing will be removed.
name|boolean
name|beginOk
init|=
literal|false
decl_stmt|;
name|boolean
name|endOk
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|beginOk
condition|)
block|{
if|if
condition|(
name|begin
operator|<
name|toShave
operator|.
name|length
argument_list|()
condition|)
block|{
name|first
operator|=
name|toShave
operator|.
name|charAt
argument_list|(
name|begin
argument_list|)
expr_stmt|;
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|first
argument_list|)
condition|)
block|{
name|begin
operator|++
expr_stmt|;
block|}
else|else
block|{
name|beginOk
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|beginOk
operator|=
literal|true
expr_stmt|;
block|}
block|}
while|while
condition|(
operator|!
name|endOk
condition|)
block|{
if|if
condition|(
name|end
operator|>
name|begin
operator|+
literal|1
condition|)
block|{
name|first
operator|=
name|toShave
operator|.
name|charAt
argument_list|(
name|end
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|first
argument_list|)
condition|)
block|{
name|end
operator|--
expr_stmt|;
block|}
else|else
block|{
name|endOk
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|endOk
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|end
operator|>
name|begin
operator|+
literal|1
condition|)
block|{
name|first
operator|=
name|toShave
operator|.
name|charAt
argument_list|(
name|begin
argument_list|)
expr_stmt|;
name|second
operator|=
name|toShave
operator|.
name|charAt
argument_list|(
name|end
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|==
literal|'{'
operator|&&
name|second
operator|==
literal|'}'
operator|||
name|first
operator|==
literal|'"'
operator|&&
name|second
operator|==
literal|'"'
condition|)
block|{
name|begin
operator|++
expr_stmt|;
name|end
operator|--
expr_stmt|;
block|}
block|}
name|toShave
operator|=
name|toShave
operator|.
name|substring
argument_list|(
name|begin
argument_list|,
name|end
argument_list|)
expr_stmt|;
return|return
name|toShave
return|;
block|}
DECL|method|rightTrim (String toTrim)
specifier|private
specifier|static
name|String
name|rightTrim
parameter_list|(
name|String
name|toTrim
parameter_list|)
block|{
return|return
name|toTrim
operator|.
name|replaceAll
argument_list|(
literal|"\\s+$"
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**      * Concatenate all strings in the array from index 'from' to 'to' (excluding      * to) with the given separator.      *<p>      * Example:      *<p>      * String[] s = "ab/cd/ed".split("/"); join(s, "\\", 0, s.length) ->      * "ab\\cd\\ed"      *      * @param strings      * @param separator      * @param from      * @param to        Excluding strings[to]      * @return      */
DECL|method|join (String[] strings, String separator, int from, int to)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
index|[]
name|strings
parameter_list|,
name|String
name|separator
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
if|if
condition|(
name|strings
operator|.
name|length
operator|==
literal|0
operator|||
name|from
operator|>=
name|to
condition|)
block|{
return|return
literal|""
return|;
block|}
name|from
operator|=
name|Math
operator|.
name|max
argument_list|(
name|from
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|to
operator|=
name|Math
operator|.
name|min
argument_list|(
name|strings
operator|.
name|length
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<
name|to
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
return|return
name|stringBuilder
operator|.
name|append
argument_list|(
name|strings
index|[
name|to
operator|-
literal|1
index|]
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|join (String[] strings, String separator)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
index|[]
name|strings
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
return|return
name|join
argument_list|(
name|strings
argument_list|,
name|separator
argument_list|,
literal|0
argument_list|,
name|strings
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Returns the given string but with the first character turned into an      * upper case character.      *<p>      * Example: testTest becomes TestTest      *      * @param string The string to change the first character to upper case to.      * @return A string has the first character turned to upper case and the      * rest unchanged from the given one.      */
DECL|method|toUpperFirstLetter (String string)
specifier|public
specifier|static
name|String
name|toUpperFirstLetter
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|string
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|string
return|;
block|}
return|return
name|Character
operator|.
name|toUpperCase
argument_list|(
name|string
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|string
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**      * Takes a delimited string, splits it and returns      *      * @param names a<code>String</code> value      * @return a<code>String[]</code> value      */
DECL|method|split (String names, String delimiter)
specifier|public
specifier|static
name|String
index|[]
name|split
parameter_list|(
name|String
name|names
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|names
operator|.
name|split
argument_list|(
name|delimiter
argument_list|)
return|;
block|}
DECL|method|capitalizeFirst (String toCapitalize)
specifier|public
specifier|static
name|String
name|capitalizeFirst
parameter_list|(
name|String
name|toCapitalize
parameter_list|)
block|{
comment|// Make first character of String uppercase, and the
comment|// rest lowercase.
if|if
condition|(
name|toCapitalize
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
name|toCapitalize
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|toCapitalize
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|toCapitalize
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|toCapitalize
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
block|}
comment|/**      * Removes optional square brackets from the string s      *      * @param toStrip      * @return      */
DECL|method|stripBrackets (String toStrip)
specifier|public
specifier|static
name|String
name|stripBrackets
parameter_list|(
name|String
name|toStrip
parameter_list|)
block|{
name|int
name|beginIndex
init|=
name|toStrip
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|endIndex
init|=
name|toStrip
operator|.
name|endsWith
argument_list|(
literal|"]"
argument_list|)
condition|?
name|toStrip
operator|.
name|length
argument_list|()
operator|-
literal|1
else|:
name|toStrip
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|toStrip
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|endIndex
argument_list|)
return|;
block|}
comment|/**      * extends the filename with a default Extension, if no Extension '.x' could      * be found      */
DECL|method|getCorrectFileName (String orgName, String defaultExtension)
specifier|public
specifier|static
name|String
name|getCorrectFileName
parameter_list|(
name|String
name|orgName
parameter_list|,
name|String
name|defaultExtension
parameter_list|)
block|{
if|if
condition|(
name|orgName
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|back
init|=
name|orgName
decl_stmt|;
name|int
name|hiddenChar
init|=
name|orgName
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// hidden files Linux/Unix (?)
if|if
condition|(
name|hiddenChar
operator|<
literal|1
condition|)
block|{
name|back
operator|=
name|back
operator|+
literal|"."
operator|+
name|defaultExtension
expr_stmt|;
block|}
return|return
name|back
return|;
block|}
comment|/**      * Creates a substring from a text      *      * @param text      * @param index      * @param terminateOnEndBraceOnly      * @return      */
DECL|method|getPart (String text, int index, boolean terminateOnEndBraceOnly)
specifier|public
specifier|static
name|String
name|getPart
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|index
parameter_list|,
name|boolean
name|terminateOnEndBraceOnly
parameter_list|)
block|{
name|char
name|c
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|part
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// advance to first char and skip whitespace
name|index
operator|++
expr_stmt|;
while|while
condition|(
name|index
operator|<
name|text
operator|.
name|length
argument_list|()
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|text
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
block|{
name|index
operator|++
expr_stmt|;
block|}
comment|// then grab whathever is the first token (counting braces)
while|while
condition|(
name|index
operator|<
name|text
operator|.
name|length
argument_list|()
condition|)
block|{
name|c
operator|=
name|text
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|terminateOnEndBraceOnly
operator|&&
name|count
operator|==
literal|0
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// end argument and leave whitespace for further processing
break|break;
block|}
if|if
condition|(
name|c
operator|==
literal|'}'
operator|&&
operator|--
name|count
operator|<
literal|0
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'{'
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|part
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
return|return
name|part
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Formats field contents for output. Must be "symmetric" with the parse method above,      * so stored and reloaded fields are not mangled.      *      * @param in      * @param wrapAmount      * @return the wrapped String.      */
DECL|method|wrap (String in, int wrapAmount)
specifier|public
specifier|static
name|String
name|wrap
parameter_list|(
name|String
name|in
parameter_list|,
name|int
name|wrapAmount
parameter_list|)
block|{
name|String
index|[]
name|lines
init|=
name|in
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|addWrappedLine
argument_list|(
name|result
argument_list|,
name|lines
index|[
literal|0
index|]
argument_list|,
name|wrapAmount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|lines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|lines
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|lines
index|[
name|i
index|]
decl_stmt|;
comment|// remove all whitespace at the end of the string, this especially includes \r created when the field content has \r\n as line separator
name|line
operator|=
name|rightTrim
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|addWrappedLine
argument_list|(
name|result
argument_list|,
name|line
argument_list|,
name|wrapAmount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|addWrappedLine (StringBuilder result, String line, int wrapAmount)
specifier|private
specifier|static
name|void
name|addWrappedLine
parameter_list|(
name|StringBuilder
name|result
parameter_list|,
name|String
name|line
parameter_list|,
name|int
name|wrapAmount
parameter_list|)
block|{
comment|// Set our pointer to the beginning of the new line in the StringBuffer:
name|int
name|length
init|=
name|result
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// Add the line, unmodified:
name|result
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
while|while
condition|(
name|length
operator|<
name|result
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|current
init|=
name|result
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|,
name|length
operator|+
name|wrapAmount
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|<
literal|0
operator|||
name|current
operator|>=
name|result
operator|.
name|length
argument_list|()
condition|)
block|{
break|break;
block|}
name|result
operator|.
name|deleteCharAt
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|result
operator|.
name|insert
argument_list|(
name|current
argument_list|,
name|Globals
operator|.
name|NEWLINE
operator|+
literal|"\t"
argument_list|)
expr_stmt|;
name|length
operator|=
name|current
operator|+
name|Globals
operator|.
name|NEWLINE_LENGTH
expr_stmt|;
block|}
block|}
comment|/**      * Quotes each and every character, e.g. '!' as&#33;. Used for verbatim      * display of arbitrary strings that may contain HTML entities.      */
DECL|method|quoteForHTML (String toQuote)
specifier|public
specifier|static
name|String
name|quoteForHTML
parameter_list|(
name|String
name|toQuote
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toQuote
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"&#"
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|toQuote
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|quote (String toQuote, String specials, char quoteChar)
specifier|public
specifier|static
name|String
name|quote
parameter_list|(
name|String
name|toQuote
parameter_list|,
name|String
name|specials
parameter_list|,
name|char
name|quoteChar
parameter_list|)
block|{
return|return
name|quote
argument_list|(
name|toQuote
argument_list|,
name|specials
argument_list|,
name|quoteChar
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Quote special characters.      *      * @param toQuote         The String which may contain special characters.      * @param specials  A String containing all special characters except the quoting      *                  character itself, which is automatically quoted.      * @param quoteChar The quoting character.      * @param linewrap  The number of characters after which a linebreak is inserted      *                  (this linebreak is undone by unquote()). Set to 0 to disable.      * @return A String with every special character (including the quoting      * character itself) quoted.      */
DECL|method|quote (String toQuote, String specials, char quoteChar, int linewrap)
specifier|private
specifier|static
name|String
name|quote
parameter_list|(
name|String
name|toQuote
parameter_list|,
name|String
name|specials
parameter_list|,
name|char
name|quoteChar
parameter_list|,
name|int
name|linewrap
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|char
name|c
decl_stmt|;
name|int
name|lineLength
init|=
literal|0
decl_stmt|;
name|boolean
name|isSpecial
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toQuote
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|c
operator|=
name|toQuote
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|isSpecial
operator|=
name|specials
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|>=
literal|0
operator|||
name|c
operator|==
name|quoteChar
expr_stmt|;
comment|// linebreak?
if|if
condition|(
name|linewrap
operator|>
literal|0
operator|&&
operator|(
operator|++
name|lineLength
operator|>=
name|linewrap
operator|||
name|isSpecial
operator|&&
name|lineLength
operator|>=
name|linewrap
operator|-
literal|1
operator|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|quoteChar
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|lineLength
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|isSpecial
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|quoteChar
argument_list|)
expr_stmt|;
operator|++
name|lineLength
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Unquote special characters.      *      * @param toUnquote         The String which may contain quoted special characters.      * @param quoteChar The quoting character.      * @return A String with all quoted characters unquoted.      */
DECL|method|unquote (String toUnquote, char quoteChar)
specifier|public
specifier|static
name|String
name|unquote
parameter_list|(
name|String
name|toUnquote
parameter_list|,
name|char
name|quoteChar
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|char
name|c
decl_stmt|;
name|boolean
name|quoted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toUnquote
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|c
operator|=
name|toUnquote
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|quoted
condition|)
block|{
comment|// append literally...
if|if
condition|(
name|c
operator|!=
literal|'\n'
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|quoted
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|!=
name|quoteChar
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// quote char
name|quoted
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Append '.bib' to the string unless it ends with that.      *<p>      * makeBibtexExtension("asfd") => "asdf.bib"      * makeBibtexExtension("asdf.bib") => "asdf.bib"      *      * @param name the string      * @return s or s + ".bib"      */
DECL|method|makeBibtexExtension (String name)
specifier|public
specifier|static
name|String
name|makeBibtexExtension
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".bib"
argument_list|)
condition|)
block|{
return|return
name|name
operator|+
literal|".bib"
return|;
block|}
return|return
name|name
return|;
block|}
DECL|method|booleanToBinaryString (boolean expression)
specifier|public
specifier|static
name|String
name|booleanToBinaryString
parameter_list|(
name|boolean
name|expression
parameter_list|)
block|{
return|return
name|expression
condition|?
literal|"1"
else|:
literal|"0"
return|;
block|}
block|}
end_class

end_unit

