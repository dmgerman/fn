begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.net
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_class
DECL|class|NetUtil
specifier|public
class|class
name|NetUtil
block|{
comment|/**      * Download the URL and return contents as a String.      *      * @param source      * @return      * @throws IOException      */
DECL|method|getResults (URL source)
specifier|public
specifier|static
name|String
name|getResults
parameter_list|(
name|URL
name|source
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|NetUtil
operator|.
name|getResultsWithEncoding
argument_list|(
name|source
operator|.
name|openConnection
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Download the URL and return contents as a String.      *      * @param source      * @return      * @throws IOException      */
DECL|method|getResults (URLConnection source)
specifier|public
specifier|static
name|String
name|getResults
parameter_list|(
name|URLConnection
name|source
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|NetUtil
operator|.
name|getResultsWithEncoding
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Download the URL using specified encoding and return contents as a String.      *      * @param source encoding      * @return      * @throws IOException      */
DECL|method|getResultsWithEncoding (URL source, Charset encoding)
specifier|public
specifier|static
name|String
name|getResultsWithEncoding
parameter_list|(
name|URL
name|source
parameter_list|,
name|Charset
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|NetUtil
operator|.
name|getResultsWithEncoding
argument_list|(
name|source
operator|.
name|openConnection
argument_list|()
argument_list|,
name|encoding
argument_list|)
return|;
block|}
comment|/**      * Download the URL using specified encoding and return contents as a String.      *      * @param source encoding      * @return      * @throws IOException      */
DECL|method|getResultsWithEncoding (URLConnection source, Charset encoding)
specifier|public
specifier|static
name|String
name|getResultsWithEncoding
parameter_list|(
name|URLConnection
name|source
parameter_list|,
name|Charset
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set user-agent to avoid being blocked as a crawler
name|source
operator|.
name|setRequestProperty
argument_list|(
literal|"User-Agent"
argument_list|,
literal|"Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0"
argument_list|)
expr_stmt|;
name|InputStreamReader
name|in
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|in
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|source
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|source
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|byteRead
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|byteRead
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|byteRead
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Get the results of HTTP post on a URL and return contents as a String.      *      * @param source postData encoding      * @return      * @throws IOException      */
DECL|method|getPostResults (URL source, String postData, Charset encoding)
specifier|public
specifier|static
name|String
name|getPostResults
parameter_list|(
name|URL
name|source
parameter_list|,
name|String
name|postData
parameter_list|,
name|Charset
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|con
init|=
operator|(
name|HttpURLConnection
operator|)
name|source
operator|.
name|openConnection
argument_list|()
decl_stmt|;
return|return
name|NetUtil
operator|.
name|getPostResults
argument_list|(
name|con
argument_list|,
name|postData
argument_list|,
name|encoding
argument_list|)
return|;
block|}
comment|/**      * Get the results of HTTP post on a URL and return contents as a String.      *      * @param source postData encoding      * @return      * @throws IOException      */
DECL|method|getPostResults (HttpURLConnection source, String postData, Charset encoding)
specifier|public
specifier|static
name|String
name|getPostResults
parameter_list|(
name|HttpURLConnection
name|source
parameter_list|,
name|String
name|postData
parameter_list|,
name|Charset
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
comment|//add a default request header
name|source
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|source
operator|.
name|setRequestProperty
argument_list|(
literal|"User-Agent"
argument_list|,
literal|"Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0"
argument_list|)
expr_stmt|;
name|source
operator|.
name|setRequestProperty
argument_list|(
literal|"Accept-Language"
argument_list|,
literal|"en-US,en;q=0.5"
argument_list|)
expr_stmt|;
comment|// Send post request
name|source
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|DataOutputStream
name|wr
init|=
operator|new
name|DataOutputStream
argument_list|(
name|source
operator|.
name|getOutputStream
argument_list|()
argument_list|)
init|;
init|)
block|{
name|wr
operator|.
name|writeBytes
argument_list|(
name|postData
argument_list|)
expr_stmt|;
block|}
name|String
name|inputLine
decl_stmt|;
name|StringBuffer
name|response
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|source
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|encoding
argument_list|)
argument_list|)
init|;
init|)
block|{
while|while
condition|(
operator|(
name|inputLine
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|append
argument_list|(
name|inputLine
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|response
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Read results from a file instead of an URL. Just for faster debugging.      *      * @param f      * @return      * @throws IOException      */
DECL|method|getResultsFromFile (File f)
specifier|public
specifier|static
name|String
name|getResultsFromFile
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|)
init|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesRead
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

