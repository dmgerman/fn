begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|FieldChange
specifier|public
class|class
name|FieldChange
block|{
DECL|field|entry
specifier|private
specifier|final
name|BibEntry
name|entry
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|oldValue
specifier|private
specifier|final
name|String
name|oldValue
decl_stmt|;
DECL|field|newValue
specifier|private
specifier|final
name|String
name|newValue
decl_stmt|;
DECL|method|FieldChange (BibEntry entry, String field, String oldValue, String newValue)
specifier|public
name|FieldChange
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|oldValue
parameter_list|,
name|String
name|newValue
parameter_list|)
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|oldValue
operator|=
name|oldValue
expr_stmt|;
name|this
operator|.
name|newValue
operator|=
name|newValue
expr_stmt|;
block|}
DECL|method|getEntry ()
specifier|public
name|BibEntry
name|getEntry
parameter_list|()
block|{
return|return
name|this
operator|.
name|entry
return|;
block|}
DECL|method|getField ()
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|this
operator|.
name|field
return|;
block|}
DECL|method|getOldValue ()
specifier|public
name|String
name|getOldValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|oldValue
return|;
block|}
DECL|method|getNewValue ()
specifier|public
name|String
name|getNewValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|newValue
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|entry
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|entry
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|field
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|field
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|newValue
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|newValue
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|oldValue
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|oldValue
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FieldChange
name|other
init|=
operator|(
name|FieldChange
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|entry
operator|.
name|equals
argument_list|(
name|other
operator|.
name|entry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|field
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|field
operator|.
name|equals
argument_list|(
name|other
operator|.
name|field
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|newValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|newValue
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|newValue
operator|.
name|equals
argument_list|(
name|other
operator|.
name|newValue
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|oldValue
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|other
operator|.
name|oldValue
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FieldChange [entry="
operator|+
name|entry
operator|.
name|getCiteKey
argument_list|()
operator|+
literal|", field="
operator|+
name|field
operator|+
literal|", oldValue="
operator|+
name|oldValue
operator|+
literal|", newValue="
operator|+
name|newValue
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

