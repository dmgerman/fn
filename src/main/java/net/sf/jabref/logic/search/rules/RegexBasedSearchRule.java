begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.search.rules
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
operator|.
name|RemoveLatexCommands
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_comment
comment|/**  * Search rule for regex-based search.  */
end_comment

begin_class
DECL|class|RegexBasedSearchRule
specifier|public
class|class
name|RegexBasedSearchRule
implements|implements
name|SearchRule
block|{
DECL|field|REMOVE_LATEX_COMMANDS
specifier|private
specifier|static
specifier|final
name|RemoveLatexCommands
name|REMOVE_LATEX_COMMANDS
init|=
operator|new
name|RemoveLatexCommands
argument_list|()
decl_stmt|;
DECL|field|caseSensitive
specifier|private
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
DECL|method|RegexBasedSearchRule (boolean caseSensitive)
specifier|public
name|RegexBasedSearchRule
parameter_list|(
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
block|}
DECL|method|isCaseSensitive ()
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|caseSensitive
return|;
block|}
annotation|@
name|Override
DECL|method|validateSearchStrings (String query)
specifier|public
name|boolean
name|validateSearchStrings
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|String
name|searchString
init|=
name|query
decl_stmt|;
if|if
condition|(
operator|!
name|caseSensitive
condition|)
block|{
name|searchString
operator|=
name|searchString
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|searchString
argument_list|,
name|caseSensitive
condition|?
literal|0
else|:
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|applyRule (String query, BibEntry bibEntry)
specifier|public
name|boolean
name|applyRule
parameter_list|(
name|String
name|query
parameter_list|,
name|BibEntry
name|bibEntry
parameter_list|)
block|{
name|Pattern
name|pattern
decl_stmt|;
try|try
block|{
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|query
argument_list|,
name|caseSensitive
condition|?
literal|0
else|:
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|field
range|:
name|bibEntry
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
if|if
condition|(
name|bibEntry
operator|.
name|hasField
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|String
name|fieldContent
init|=
name|RegexBasedSearchRule
operator|.
name|REMOVE_LATEX_COMMANDS
operator|.
name|format
argument_list|(
name|bibEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fieldContentNoBrackets
init|=
name|RegexBasedSearchRule
operator|.
name|REMOVE_LATEX_COMMANDS
operator|.
name|format
argument_list|(
name|fieldContent
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|fieldContentNoBrackets
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

