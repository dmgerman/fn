begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.search.rules
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
operator|.
name|RemoveLatexCommands
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchRule
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|rules
operator|.
name|util
operator|.
name|SentenceAnalyzer
import|;
end_import

begin_comment
comment|/**  * Search rule for contain-based search.  */
end_comment

begin_class
DECL|class|ContainBasedSearchRule
specifier|public
class|class
name|ContainBasedSearchRule
implements|implements
name|SearchRule
block|{
DECL|field|REMOVE_LATEX_COMMANDS
specifier|private
specifier|static
specifier|final
name|RemoveLatexCommands
name|REMOVE_LATEX_COMMANDS
init|=
operator|new
name|RemoveLatexCommands
argument_list|()
decl_stmt|;
DECL|field|caseSensitive
specifier|private
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
DECL|method|ContainBasedSearchRule (boolean caseSensitive)
specifier|public
name|ContainBasedSearchRule
parameter_list|(
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
block|}
DECL|method|isCaseSensitive ()
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|caseSensitive
return|;
block|}
annotation|@
name|Override
DECL|method|validateSearchStrings (String query)
specifier|public
name|boolean
name|validateSearchStrings
parameter_list|(
name|String
name|query
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|applyRule (String query, BibtexEntry bibtexEntry)
specifier|public
name|boolean
name|applyRule
parameter_list|(
name|String
name|query
parameter_list|,
name|BibtexEntry
name|bibtexEntry
parameter_list|)
block|{
name|String
name|searchString
init|=
name|query
decl_stmt|;
if|if
condition|(
operator|!
name|caseSensitive
condition|)
block|{
name|searchString
operator|=
name|searchString
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|words
init|=
operator|new
name|SentenceAnalyzer
argument_list|(
name|searchString
argument_list|)
operator|.
name|getWords
argument_list|()
decl_stmt|;
comment|//print(words);
comment|// We need match for all words:
name|boolean
index|[]
name|matchFound
init|=
operator|new
name|boolean
index|[
name|words
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|bibtexEntry
operator|.
name|getAllFields
argument_list|()
control|)
block|{
name|Object
name|fieldContentAsObject
init|=
name|bibtexEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldContentAsObject
operator|!=
literal|null
condition|)
block|{
name|String
name|fieldContent
init|=
name|ContainBasedSearchRule
operator|.
name|REMOVE_LATEX_COMMANDS
operator|.
name|format
argument_list|(
name|fieldContentAsObject
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|caseSensitive
condition|)
block|{
name|fieldContent
operator|=
name|fieldContent
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
comment|// Check if we have a match for each of the query words, ignoring
comment|// those words for which we already have a match:
for|for
control|(
name|String
name|s
range|:
name|words
control|)
block|{
name|matchFound
index|[
name|index
index|]
operator|=
name|matchFound
index|[
name|index
index|]
operator|||
name|fieldContent
operator|.
name|contains
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|boolean
name|aMatchFound
range|:
name|matchFound
control|)
block|{
if|if
condition|(
operator|!
name|aMatchFound
condition|)
block|{
return|return
literal|false
return|;
comment|// Didn't match all words.
block|}
block|}
return|return
literal|true
return|;
comment|// Matched all words.
block|}
block|}
end_class

end_unit

