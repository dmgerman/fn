begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.integrity
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FileField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|IntegrityCheck
specifier|public
class|class
name|IntegrityCheck
block|{
DECL|field|AUTHOR_NAME_CHECKER
specifier|public
specifier|static
specifier|final
name|Checker
name|AUTHOR_NAME_CHECKER
init|=
operator|new
name|AuthorNameChecker
argument_list|()
decl_stmt|;
DECL|field|YEAR_CHECKER
specifier|public
specifier|static
specifier|final
name|Checker
name|YEAR_CHECKER
init|=
operator|new
name|YearChecker
argument_list|()
decl_stmt|;
DECL|field|TITLE_CHECKER
specifier|public
specifier|static
specifier|final
name|Checker
name|TITLE_CHECKER
init|=
operator|new
name|TitleChecker
argument_list|()
decl_stmt|;
DECL|field|BRACKET_CHECKER
specifier|public
specifier|static
specifier|final
name|Checker
name|BRACKET_CHECKER
init|=
operator|new
name|BracketChecker
argument_list|()
decl_stmt|;
DECL|field|PAGES_CHECKER
specifier|public
specifier|static
specifier|final
name|Checker
name|PAGES_CHECKER
init|=
operator|new
name|PagesChecker
argument_list|()
decl_stmt|;
DECL|field|URL_CHECKER
specifier|public
specifier|static
specifier|final
name|Checker
name|URL_CHECKER
init|=
operator|new
name|UrlChecker
argument_list|()
decl_stmt|;
DECL|field|FILE_CHECKER
specifier|public
specifier|static
specifier|final
name|Checker
name|FILE_CHECKER
init|=
operator|new
name|FileChecker
argument_list|()
decl_stmt|;
DECL|field|ABBREVIATION_CHECKER
specifier|public
specifier|static
specifier|final
name|Checker
name|ABBREVIATION_CHECKER
init|=
operator|new
name|AbbreviationChecker
argument_list|()
decl_stmt|;
DECL|field|TYPE_CHECKER
specifier|public
specifier|static
specifier|final
name|Checker
name|TYPE_CHECKER
init|=
operator|new
name|TypeChecker
argument_list|()
decl_stmt|;
DECL|field|bibDatabaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|bibDatabaseContext
decl_stmt|;
DECL|method|IntegrityCheck (BibDatabaseContext bibDatabaseContext)
specifier|public
name|IntegrityCheck
parameter_list|(
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
name|this
operator|.
name|bibDatabaseContext
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|bibDatabaseContext
argument_list|)
expr_stmt|;
block|}
DECL|method|checkBibtexDatabase ()
specifier|public
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|checkBibtexDatabase
parameter_list|()
block|{
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|checkBibtexEntry
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|checkBibtexEntry (BibEntry entry)
specifier|public
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|checkBibtexEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"author"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|data
lambda|->
name|AUTHOR_NAME_CHECKER
operator|.
name|check
argument_list|(
name|data
argument_list|,
literal|"author"
argument_list|,
name|entry
argument_list|,
name|result
argument_list|,
name|bibDatabaseContext
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"editor"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|data
lambda|->
name|AUTHOR_NAME_CHECKER
operator|.
name|check
argument_list|(
name|data
argument_list|,
literal|"editor"
argument_list|,
name|entry
argument_list|,
name|result
argument_list|,
name|bibDatabaseContext
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"title"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|data
lambda|->
block|{
if|if
condition|(
operator|!
name|bibDatabaseContext
operator|.
name|isBiblatexMode
argument_list|()
condition|)
block|{
name|TITLE_CHECKER
operator|.
name|check
argument_list|(
name|data
argument_list|,
literal|"title"
argument_list|,
name|entry
argument_list|,
name|result
argument_list|,
name|bibDatabaseContext
argument_list|)
expr_stmt|;
block|}
name|BRACKET_CHECKER
operator|.
name|check
argument_list|(
name|data
argument_list|,
literal|"title"
argument_list|,
name|entry
argument_list|,
name|result
argument_list|,
name|bibDatabaseContext
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"year"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|data
lambda|->
name|YEAR_CHECKER
operator|.
name|check
argument_list|(
name|data
argument_list|,
literal|"year"
argument_list|,
name|entry
argument_list|,
name|result
argument_list|,
name|bibDatabaseContext
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"pages"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|data
lambda|->
name|PAGES_CHECKER
operator|.
name|check
argument_list|(
name|data
operator|.
name|toString
argument_list|()
argument_list|,
literal|"pages"
argument_list|,
name|entry
argument_list|,
name|result
argument_list|,
name|bibDatabaseContext
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"url"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|data
lambda|->
name|URL_CHECKER
operator|.
name|check
argument_list|(
name|data
argument_list|,
literal|"url"
argument_list|,
name|entry
argument_list|,
name|result
argument_list|,
name|bibDatabaseContext
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"file"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|data
lambda|->
name|FILE_CHECKER
operator|.
name|check
argument_list|(
name|data
argument_list|,
literal|"file"
argument_list|,
name|entry
argument_list|,
name|result
argument_list|,
name|bibDatabaseContext
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"pages"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|data
lambda|->
name|TYPE_CHECKER
operator|.
name|check
argument_list|(
name|data
argument_list|,
literal|"pages"
argument_list|,
name|entry
argument_list|,
name|result
argument_list|,
name|bibDatabaseContext
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"journal"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|data
lambda|->
name|ABBREVIATION_CHECKER
operator|.
name|check
argument_list|(
name|data
argument_list|,
literal|"journal"
argument_list|,
name|entry
argument_list|,
name|result
argument_list|,
name|bibDatabaseContext
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"booktitle"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|data
lambda|->
name|ABBREVIATION_CHECKER
operator|.
name|check
argument_list|(
name|data
argument_list|,
literal|"booktitle"
argument_list|,
name|entry
argument_list|,
name|result
argument_list|,
name|bibDatabaseContext
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|interface|Checker
specifier|public
interface|interface
name|Checker
block|{
DECL|method|check (String value, String fieldName, BibEntry entry, List<IntegrityMessage> collector, BibDatabaseContext bibDatabaseContext)
name|void
name|check
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|collector
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
function_decl|;
block|}
DECL|class|TypeChecker
specifier|private
specifier|static
class|class
name|TypeChecker
implements|implements
name|Checker
block|{
annotation|@
name|Override
DECL|method|check (String value, String fieldName, BibEntry entry, List<IntegrityMessage> collector, BibDatabaseContext bibDatabaseContext)
specifier|public
name|void
name|check
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|collector
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
if|if
condition|(
literal|"proceedings"
operator|.
name|equalsIgnoreCase
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"wrong entry type as proceedings has page numbers"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|AbbreviationChecker
specifier|private
specifier|static
class|class
name|AbbreviationChecker
implements|implements
name|Checker
block|{
annotation|@
name|Override
DECL|method|check (String value, String fieldName, BibEntry entry, List<IntegrityMessage> collector, BibDatabaseContext bibDatabaseContext)
specifier|public
name|void
name|check
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|collector
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"abbreviation detected"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|FileChecker
specifier|private
specifier|static
class|class
name|FileChecker
implements|implements
name|Checker
block|{
annotation|@
name|Override
DECL|method|check (String value, String fieldName, BibEntry entry, List<IntegrityMessage> collector, BibDatabaseContext bibDatabaseContext)
specifier|public
name|void
name|check
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|collector
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
name|FileField
operator|.
name|parse
argument_list|(
name|value
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
operator|!
operator|(
name|p
operator|.
name|link
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
operator|||
name|p
operator|.
name|link
operator|.
name|startsWith
argument_list|(
literal|"https://"
argument_list|)
operator|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|p
lambda|->
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fileDirectories
operator|=
name|bibDatabaseContext
operator|.
name|getMetaData
argument_list|()
operator|.
name|getFileDirectory
argument_list|(
name|Globals
operator|.
name|FILE_FIELD
argument_list|)
argument_list|;                  for
operator|(
name|String
name|fileDirectory
operator|:
name|fileDirectories
operator|)
block|{
name|Optional
argument_list|<
name|File
argument_list|>
name|file
operator|=
name|FileUtil
operator|.
name|expandFilename
argument_list|(
name|p
operator|.
name|link
argument_list|,
name|fileDirectory
argument_list|)
block|;
if|if
condition|(
operator|(
operator|!
name|file
operator|.
name|isPresent
argument_list|()
operator|)
operator|||
operator|!
name|file
operator|.
name|get
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"link should refer to a correct file path"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|)
class|;
end_class

begin_class
unit|}     }
DECL|class|UrlChecker
specifier|private
specifier|static
class|class
name|UrlChecker
implements|implements
name|Checker
block|{
annotation|@
name|Override
DECL|method|check (String value, String fieldName, BibEntry entry, List<IntegrityMessage> collector, BibDatabaseContext bibDatabaseContext)
specifier|public
name|void
name|check
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|collector
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|contains
argument_list|(
literal|"://"
argument_list|)
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"should contain a protocol"
argument_list|)
operator|+
literal|": http[s]://, file://, ftp://, ..."
argument_list|,
name|entry
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|AuthorNameChecker
specifier|private
specifier|static
class|class
name|AuthorNameChecker
implements|implements
name|Checker
block|{
annotation|@
name|Override
DECL|method|check (String value, String fieldName, BibEntry entry, List<IntegrityMessage> collector, BibDatabaseContext bibDatabaseContext)
specifier|public
name|void
name|check
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|collector
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
name|String
name|valueTrimmedAndLowerCase
init|=
name|value
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueTrimmedAndLowerCase
operator|.
name|startsWith
argument_list|(
literal|"and "
argument_list|)
operator|||
name|valueTrimmedAndLowerCase
operator|.
name|startsWith
argument_list|(
literal|","
argument_list|)
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"should start with a name"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|valueTrimmedAndLowerCase
operator|.
name|endsWith
argument_list|(
literal|" and"
argument_list|)
operator|||
name|valueTrimmedAndLowerCase
operator|.
name|endsWith
argument_list|(
literal|","
argument_list|)
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"should end with a name"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|BracketChecker
specifier|private
specifier|static
class|class
name|BracketChecker
implements|implements
name|Checker
block|{
annotation|@
name|Override
DECL|method|check (String value, String fieldName, BibEntry entry, List<IntegrityMessage> collector, BibDatabaseContext bibDatabaseContext)
specifier|public
name|void
name|check
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|collector
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
comment|// metaphor: integer-based stack (push + / pop -)
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|char
name|a
range|:
name|value
operator|.
name|trim
argument_list|()
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|==
literal|'{'
condition|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|==
literal|'}'
condition|)
block|{
if|if
condition|(
name|counter
operator|==
literal|0
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"unexpected closing curly braket"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|counter
operator|--
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|counter
operator|>
literal|0
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"unexpected opening curly braket"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|TitleChecker
specifier|private
specifier|static
class|class
name|TitleChecker
implements|implements
name|Checker
block|{
DECL|field|INSIDE_CURLY_BRAKETS
specifier|private
specifier|static
specifier|final
name|Pattern
name|INSIDE_CURLY_BRAKETS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\{[^}\\{]*\\}"
argument_list|)
decl_stmt|;
DECL|field|HAS_CAPITAL_LETTERS
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|HAS_CAPITAL_LETTERS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[\\p{Lu}\\p{Lt}]"
argument_list|)
operator|.
name|asPredicate
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|check (String value, String fieldName, BibEntry entry, List<IntegrityMessage> collector, BibDatabaseContext bibDatabaseContext)
specifier|public
name|void
name|check
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|collector
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
comment|/*              * Algorithm:              * - remove trailing whitespaces              * - ignore first letter as this can always be written in caps              * - remove everything that is in brackets              * - check if at least one capital letter is in the title              */
name|String
name|valueTrimmed
init|=
name|value
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|valueIgnoringFirstLetter
init|=
name|valueTrimmed
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
condition|?
name|valueTrimmed
else|:
name|valueTrimmed
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|valueOnlySpacesWithinCurlyBraces
init|=
name|valueIgnoringFirstLetter
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Matcher
name|matcher
init|=
name|INSIDE_CURLY_BRAKETS
operator|.
name|matcher
argument_list|(
name|valueOnlySpacesWithinCurlyBraces
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
break|break;
block|}
name|valueOnlySpacesWithinCurlyBraces
operator|=
name|matcher
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasCapitalLettersThatBibtexWillConvertToSmallerOnes
init|=
name|HAS_CAPITAL_LETTERS
operator|.
name|test
argument_list|(
name|valueOnlySpacesWithinCurlyBraces
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasCapitalLettersThatBibtexWillConvertToSmallerOnes
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"large capitals are not masked using curly brackets {}"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|YearChecker
specifier|private
specifier|static
class|class
name|YearChecker
implements|implements
name|Checker
block|{
DECL|field|CONTAINS_FOUR_DIGIT
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|CONTAINS_FOUR_DIGIT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^0-9]|^)[0-9]{4}([^0-9]|$)"
argument_list|)
operator|.
name|asPredicate
argument_list|()
decl_stmt|;
comment|/**          * Checks, if the number String contains a four digit year          */
annotation|@
name|Override
DECL|method|check (String value, String fieldName, BibEntry entry, List<IntegrityMessage> collector, BibDatabaseContext bibDatabaseContext)
specifier|public
name|void
name|check
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|collector
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
if|if
condition|(
operator|!
name|CONTAINS_FOUR_DIGIT
operator|.
name|test
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"should contain a four digit number"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**      * From BibTex manual:      * One or more page numbers or range of numbers, such as 42--111 or 7,41,73--97 or 43+      * (the '+' in this last example indicates pages following that don't form a simple range).      * To make it easier to maintain Scribe-compatible databases, the standard styles convert      * a single dash (as in 7-33) to the double dash used in TEX to denote number ranges (as in 7--33).      */
end_comment

begin_class
DECL|class|PagesChecker
specifier|private
specifier|static
class|class
name|PagesChecker
implements|implements
name|Checker
block|{
DECL|field|PAGES_EXP
specifier|private
specifier|static
specifier|final
name|String
name|PAGES_EXP
init|=
literal|""
operator|+
literal|"\\A"
comment|// begin String
operator|+
literal|"\\d+"
comment|// number
operator|+
literal|"(?:"
comment|// non-capture group
operator|+
literal|"\\+|\\-{2}\\d+"
comment|// + or --number (range)
operator|+
literal|")?"
comment|// optional group
operator|+
literal|"(?:"
comment|// non-capture group
operator|+
literal|","
comment|// comma
operator|+
literal|"\\d+(?:\\+|\\-{2}\\d+)?"
comment|// repeat former pattern
operator|+
literal|")*"
comment|// repeat group 0,*
operator|+
literal|"\\z"
decl_stmt|;
comment|// end String
DECL|field|VALID_PAGE_NUMBER
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|VALID_PAGE_NUMBER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|PAGES_EXP
argument_list|)
operator|.
name|asPredicate
argument_list|()
decl_stmt|;
comment|/**          * Checks, if the page numbers String conforms to the BibTex manual          */
annotation|@
name|Override
DECL|method|check (String value, String fieldName, BibEntry entry, List<IntegrityMessage> collector, BibDatabaseContext bibDatabaseContext)
specifier|public
name|void
name|check
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|collector
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
if|if
condition|(
operator|!
name|VALID_PAGE_NUMBER
operator|.
name|test
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"should contain a valid page number range"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

unit|}
end_unit

