begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.integrity
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
operator|.
name|IntegrityCheck
operator|.
name|Checker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_class
DECL|class|EditionChecker
specifier|public
class|class
name|EditionChecker
implements|implements
name|Checker
block|{
DECL|field|FIRST_LETTER_CAPITALIZED
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|FIRST_LETTER_CAPITALIZED
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[A-Z]"
argument_list|)
operator|.
name|asPredicate
argument_list|()
decl_stmt|;
DECL|field|ONLY_NUMERALS_OR_LITERALS
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|ONLY_NUMERALS_OR_LITERALS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([0-9]+|[^0-9]+)$"
argument_list|)
operator|.
name|asPredicate
argument_list|()
decl_stmt|;
DECL|field|bibDatabaseContextEdition
specifier|private
specifier|final
name|BibDatabaseContext
name|bibDatabaseContextEdition
decl_stmt|;
DECL|method|EditionChecker (BibDatabaseContext bibDatabaseContext)
specifier|public
name|EditionChecker
parameter_list|(
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
name|this
operator|.
name|bibDatabaseContextEdition
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|bibDatabaseContext
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks, if field contains only an integer or a literal (BibLaTeX mode)      * Checks, if the first letter is capitalized (BibTeX mode)      * BibLaTex:      * The edition of a printed publication. This must be an integer, not an ordinal.      * It is also possible to give the edition as a literal string, for example "Third, revised and expanded edition".      * Official bibtex spec:      * The edition of a book-for example, "Second".      * This should be an ordinal, and should have the first letter capitalized.      */
annotation|@
name|Override
DECL|method|check (BibEntry entry)
specifier|public
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|check
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|value
init|=
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|EDITION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|//BibLaTeX
if|if
condition|(
name|bibDatabaseContextEdition
operator|.
name|isBiblatexMode
argument_list|()
operator|&&
operator|!
name|ONLY_NUMERALS_OR_LITERALS
operator|.
name|test
argument_list|(
name|value
operator|.
name|get
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"should contain an integer or a literal"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|FieldName
operator|.
name|EDITION
argument_list|)
argument_list|)
return|;
block|}
comment|//BibTeX
if|if
condition|(
operator|!
name|bibDatabaseContextEdition
operator|.
name|isBiblatexMode
argument_list|()
operator|&&
operator|!
name|FIRST_LETTER_CAPITALIZED
operator|.
name|test
argument_list|(
name|value
operator|.
name|get
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"should have the first letter capitalized"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|FieldName
operator|.
name|EDITION
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

