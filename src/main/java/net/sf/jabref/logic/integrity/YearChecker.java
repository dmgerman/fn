begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.integrity
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
operator|.
name|IntegrityCheck
operator|.
name|Checker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_class
DECL|class|YearChecker
specifier|public
class|class
name|YearChecker
implements|implements
name|Checker
block|{
DECL|field|CONTAINS_FOUR_DIGIT
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|CONTAINS_FOUR_DIGIT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^0-9]|^)[0-9]{4}([^0-9]|$)"
argument_list|)
operator|.
name|asPredicate
argument_list|()
decl_stmt|;
DECL|field|ENDS_WITH_FOUR_DIGIT
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|ENDS_WITH_FOUR_DIGIT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[0-9]{4}$"
argument_list|)
operator|.
name|asPredicate
argument_list|()
decl_stmt|;
DECL|field|PUNCTUATION_MARKS
specifier|private
specifier|static
specifier|final
name|String
name|PUNCTUATION_MARKS
init|=
literal|"[(){},.;!?<>%&$]"
decl_stmt|;
comment|/**      * Checks, if the number String contains a four digit year and ends with it.      * Official bibtex spec:      * Generally it should consist of four numerals, such as 1984, although the standard styles      * can handle any year whose last four nonpunctuation characters are numerals, such as â(about 1984)â.      * Source: http://ftp.fernuni-hagen.de/ftp-dir/pub/mirrors/www.ctan.org/biblio/bibtex/base/btxdoc.pdf      */
annotation|@
name|Override
DECL|method|check (BibEntry entry)
specifier|public
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|check
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|value
init|=
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|CONTAINS_FOUR_DIGIT
operator|.
name|test
argument_list|(
name|value
operator|.
name|get
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"should contain a four digit number"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|FieldName
operator|.
name|YEAR
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|ENDS_WITH_FOUR_DIGIT
operator|.
name|test
argument_list|(
name|value
operator|.
name|get
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|PUNCTUATION_MARKS
argument_list|,
literal|""
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"last four nonpunctuation characters should be numerals"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|FieldName
operator|.
name|YEAR
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

