begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.logic.integrity
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
operator|.
name|IntegrityCheck
operator|.
name|Checker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryConverter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_comment
comment|/**  * This checker checks whether the entry does not contain any field appearing only in BibLaTeX (and not in BibTex)  */
end_comment

begin_class
DECL|class|NoBibtexFieldChecker
specifier|public
class|class
name|NoBibtexFieldChecker
implements|implements
name|Checker
block|{
annotation|@
name|Override
DECL|method|check (BibEntry entry)
specifier|public
name|List
argument_list|<
name|IntegrityMessage
argument_list|>
name|check
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|allBibLaTeXOnlyFields
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|allBibLaTeXOnlyFields
operator|.
name|addAll
argument_list|(
name|EntryConverter
operator|.
name|FIELD_ALIASES_LTX_TO_TEX
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// file is both in BibTeX and BibLaTeX
name|allBibLaTeXOnlyFields
operator|.
name|remove
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
expr_stmt|;
comment|// this exists in BibLaTeX only (and is no aliased field)
name|allBibLaTeXOnlyFields
operator|.
name|add
argument_list|(
name|FieldName
operator|.
name|JOURNALSUBTITLE
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|name
lambda|->
name|allBibLaTeXOnlyFields
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|name
lambda|->
operator|new
name|IntegrityMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"BibLaTeX field only"
argument_list|)
argument_list|,
name|entry
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

