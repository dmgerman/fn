begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.logic.autocompleter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|autocompleter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_class
DECL|class|AutoCompletePreferences
specifier|public
class|class
name|AutoCompletePreferences
block|{
DECL|field|preferences
specifier|private
specifier|final
name|JabRefPreferences
name|preferences
decl_stmt|;
DECL|field|PREF_SHORTEST_TO_COMPLETE
specifier|private
specifier|static
specifier|final
name|String
name|PREF_SHORTEST_TO_COMPLETE
init|=
literal|"shortestToComplete"
decl_stmt|;
DECL|field|PREF_FIRSTNAME_MODE
specifier|private
specifier|static
specifier|final
name|String
name|PREF_FIRSTNAME_MODE
init|=
literal|"autoCompFirstNameMode"
decl_stmt|;
DECL|field|PREF_LAST_FIRST
specifier|private
specifier|static
specifier|final
name|String
name|PREF_LAST_FIRST
init|=
literal|"autoCompLF"
decl_stmt|;
DECL|field|PREF_FIRST_LAST
specifier|private
specifier|static
specifier|final
name|String
name|PREF_FIRST_LAST
init|=
literal|"autoCompFF"
decl_stmt|;
DECL|field|PREF_COMPLETE_FIELDS
specifier|private
specifier|static
specifier|final
name|String
name|PREF_COMPLETE_FIELDS
init|=
literal|"autoCompleteFields"
decl_stmt|;
DECL|method|putDefaults (HashMap<String, Object> defaults)
specifier|public
specifier|static
name|void
name|putDefaults
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaults
parameter_list|)
block|{
name|defaults
operator|.
name|put
argument_list|(
name|PREF_SHORTEST_TO_COMPLETE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREF_FIRSTNAME_MODE
argument_list|,
name|AutoCompleteFirstNameMode
operator|.
name|BOTH
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREF_FIRST_LAST
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// "Autocomplete names in 'Firstname Lastname' format only"
name|defaults
operator|.
name|put
argument_list|(
name|PREF_LAST_FIRST
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// "Autocomplete names in 'Lastname, Firstname' format only"
name|defaults
operator|.
name|put
argument_list|(
name|PREF_COMPLETE_FIELDS
argument_list|,
literal|"author;editor;title;journal;publisher;keywords;crossref"
argument_list|)
expr_stmt|;
block|}
DECL|method|AutoCompletePreferences (JabRefPreferences preferences)
specifier|public
name|AutoCompletePreferences
parameter_list|(
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
name|this
operator|.
name|preferences
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|preferences
argument_list|)
expr_stmt|;
block|}
DECL|method|getShortestLengthToComplete ()
specifier|public
name|int
name|getShortestLengthToComplete
parameter_list|()
block|{
return|return
name|preferences
operator|.
name|getInt
argument_list|(
name|PREF_SHORTEST_TO_COMPLETE
argument_list|)
return|;
block|}
DECL|method|setShortestLengthToComplete (Integer value)
specifier|public
name|void
name|setShortestLengthToComplete
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|preferences
operator|.
name|putInt
argument_list|(
name|PREF_SHORTEST_TO_COMPLETE
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getFirstnameMode ()
specifier|public
name|AutoCompleteFirstNameMode
name|getFirstnameMode
parameter_list|()
block|{
try|try
block|{
return|return
name|AutoCompleteFirstNameMode
operator|.
name|valueOf
argument_list|(
name|preferences
operator|.
name|get
argument_list|(
name|PREF_FIRSTNAME_MODE
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// Should only occur when preferences are set directly via preferences.put and not via setFirstnameMode
return|return
name|AutoCompleteFirstNameMode
operator|.
name|BOTH
return|;
block|}
block|}
DECL|method|setFirstnameMode (AutoCompleteFirstNameMode mode)
specifier|public
name|void
name|setFirstnameMode
parameter_list|(
name|AutoCompleteFirstNameMode
name|mode
parameter_list|)
block|{
name|preferences
operator|.
name|put
argument_list|(
name|PREF_FIRSTNAME_MODE
argument_list|,
name|mode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getCompleteLastFirst ()
specifier|public
name|boolean
name|getCompleteLastFirst
parameter_list|()
block|{
return|return
name|preferences
operator|.
name|getBoolean
argument_list|(
name|PREF_LAST_FIRST
argument_list|)
return|;
block|}
DECL|method|setCompleteLastFirst (boolean value)
specifier|public
name|void
name|setCompleteLastFirst
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|preferences
operator|.
name|putBoolean
argument_list|(
name|PREF_LAST_FIRST
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getCompleteFirstLast ()
specifier|public
name|boolean
name|getCompleteFirstLast
parameter_list|()
block|{
return|return
name|preferences
operator|.
name|getBoolean
argument_list|(
name|PREF_FIRST_LAST
argument_list|)
return|;
block|}
DECL|method|setCompleteFirstLast (boolean value)
specifier|public
name|void
name|setCompleteFirstLast
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|preferences
operator|.
name|putBoolean
argument_list|(
name|PREF_FIRST_LAST
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getCompleteNames ()
specifier|public
name|String
index|[]
name|getCompleteNames
parameter_list|()
block|{
return|return
name|preferences
operator|.
name|getStringArray
argument_list|(
name|PREF_COMPLETE_FIELDS
argument_list|)
return|;
block|}
DECL|method|getCompleteNamesAsString ()
specifier|public
name|String
name|getCompleteNamesAsString
parameter_list|()
block|{
return|return
name|preferences
operator|.
name|get
argument_list|(
name|PREF_COMPLETE_FIELDS
argument_list|)
return|;
block|}
DECL|method|setCompleteNames (String value)
specifier|public
name|void
name|setCompleteNames
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|preferences
operator|.
name|put
argument_list|(
name|PREF_COMPLETE_FIELDS
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

