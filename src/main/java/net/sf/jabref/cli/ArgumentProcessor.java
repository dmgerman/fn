begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.cli
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefGUI
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|AutoSetLinks
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ImportFormatReader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ImportInspectionCommandLine
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|OpenDatabaseAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|fetcher
operator|.
name|EntryFetcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|fetcher
operator|.
name|EntryFetchers
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|CustomEntryTypesManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|BibDatabaseWriter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|BibtexDatabaseWriter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|ExportFormats
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|FileSaveSession
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|IExportFormat
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|SaveException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|SavePreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|SaveSession
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|labelpattern
operator|.
name|LabelPatternUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|logging
operator|.
name|JabRefLogger
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|DatabaseSearcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchQuery
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|ArgumentProcessor
specifier|public
class|class
name|ArgumentProcessor
block|{
DECL|enum|Mode
specifier|public
enum|enum
name|Mode
block|{
DECL|enumConstant|INITIAL_START
name|INITIAL_START
block|,
DECL|enumConstant|REMOTE_START
name|REMOTE_START
block|}
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ArgumentProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cli
specifier|private
specifier|final
name|JabRefCLI
name|cli
decl_stmt|;
DECL|field|parserResults
specifier|private
specifier|final
name|List
argument_list|<
name|ParserResult
argument_list|>
name|parserResults
decl_stmt|;
DECL|field|startupMode
specifier|private
specifier|final
name|Mode
name|startupMode
decl_stmt|;
DECL|field|noGUINeeded
specifier|private
name|boolean
name|noGUINeeded
decl_stmt|;
DECL|method|ArgumentProcessor (String[] args, Mode startupMode)
specifier|public
name|ArgumentProcessor
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Mode
name|startupMode
parameter_list|)
block|{
name|cli
operator|=
operator|new
name|JabRefCLI
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|this
operator|.
name|startupMode
operator|=
name|startupMode
expr_stmt|;
name|parserResults
operator|=
name|processArguments
argument_list|()
expr_stmt|;
block|}
DECL|method|getParserResults ()
specifier|public
name|List
argument_list|<
name|ParserResult
argument_list|>
name|getParserResults
parameter_list|()
block|{
return|return
name|parserResults
return|;
block|}
DECL|method|hasParserResults ()
specifier|public
name|boolean
name|hasParserResults
parameter_list|()
block|{
return|return
operator|!
name|parserResults
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|processArguments ()
specifier|private
name|List
argument_list|<
name|ParserResult
argument_list|>
name|processArguments
parameter_list|()
block|{
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
name|cli
operator|.
name|isDebugLogging
argument_list|()
condition|)
block|{
name|JabRefLogger
operator|.
name|setDebug
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|startupMode
operator|==
name|Mode
operator|.
name|INITIAL_START
operator|)
operator|&&
name|cli
operator|.
name|isShowVersion
argument_list|()
condition|)
block|{
name|cli
operator|.
name|displayVersion
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|startupMode
operator|==
name|Mode
operator|.
name|INITIAL_START
operator|)
operator|&&
name|cli
operator|.
name|isHelp
argument_list|()
condition|)
block|{
name|cli
operator|.
name|printUsage
argument_list|()
expr_stmt|;
name|noGUINeeded
operator|=
literal|true
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// Check if we should reset all preferences to default values:
if|if
condition|(
name|cli
operator|.
name|isPreferencesReset
argument_list|()
condition|)
block|{
name|resetPreferences
argument_list|(
name|cli
operator|.
name|getPreferencesReset
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check if we should import preferences from a file:
if|if
condition|(
name|cli
operator|.
name|isPreferencesImport
argument_list|()
condition|)
block|{
name|importPreferences
argument_list|()
expr_stmt|;
block|}
comment|// List to put imported/loaded database(s) in.
name|List
argument_list|<
name|ParserResult
argument_list|>
name|loaded
init|=
name|importAndOpenFiles
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
name|cli
operator|.
name|isFetcherEngine
argument_list|()
condition|)
block|{
name|fetch
argument_list|(
name|cli
operator|.
name|getFetcherEngine
argument_list|()
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|loaded
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|isExportMatches
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|loaded
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|exportMatches
argument_list|(
name|loaded
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"The output option depends on a valid input option."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cli
operator|.
name|isGenerateBibtexKeys
argument_list|()
condition|)
block|{
name|regenerateBibtexKeys
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|isAutomaticallySetFileLinks
argument_list|()
condition|)
block|{
name|automaticallySetFileLinks
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|isFileExport
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|loaded
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|exportFile
argument_list|(
name|loaded
argument_list|,
name|cli
operator|.
name|getFileExport
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"The output option depends on a valid import option."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Finished export"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cli
operator|.
name|isPreferencesExport
argument_list|()
condition|)
block|{
try|try
block|{
name|Globals
operator|.
name|prefs
operator|.
name|exportPreferences
argument_list|(
name|cli
operator|.
name|getPreferencesExport
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JabRefException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Cannot export preferences"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
name|cli
operator|.
name|isAuxImport
argument_list|()
condition|)
block|{
name|doAuxImport
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
block|}
return|return
name|loaded
return|;
block|}
DECL|method|exportMatches (List<ParserResult> loaded)
specifier|private
name|boolean
name|exportMatches
parameter_list|(
name|List
argument_list|<
name|ParserResult
argument_list|>
name|loaded
parameter_list|)
block|{
name|String
index|[]
name|data
init|=
name|cli
operator|.
name|getExportMatches
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|searchTerm
init|=
name|data
index|[
literal|0
index|]
operator|.
name|replace
argument_list|(
literal|"\\$"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
comment|//enables blanks within the search term:
comment|//$ stands for a blank
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|get
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|BibDatabaseContext
name|databaseContext
init|=
name|pr
operator|.
name|getDatabaseContext
argument_list|()
decl_stmt|;
name|BibDatabase
name|dataBase
init|=
name|pr
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|SearchQuery
name|query
init|=
operator|new
name|SearchQuery
argument_list|(
name|searchTerm
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_CASE_SENSITIVE
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SEARCH_REG_EXP
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|matches
init|=
operator|new
name|DatabaseSearcher
argument_list|(
name|query
argument_list|,
name|dataBase
argument_list|)
operator|.
name|getMatches
argument_list|()
decl_stmt|;
comment|//export matches
if|if
condition|(
operator|!
name|matches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|formatName
decl_stmt|;
comment|//read in the export format, take default format if no format entered
switch|switch
condition|(
name|data
operator|.
name|length
condition|)
block|{
case|case
literal|3
case|:
name|formatName
operator|=
name|data
index|[
literal|2
index|]
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|//default ExportFormat: HTML table (with Abstract& BibTeX)
name|formatName
operator|=
literal|"tablerefsabsbib"
expr_stmt|;
break|break;
default|default:
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Output file missing"
argument_list|)
operator|.
name|concat
argument_list|(
literal|". \n \t "
argument_list|)
operator|.
name|concat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Usage"
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
literal|": "
argument_list|)
operator|+
name|JabRefCLI
operator|.
name|getExportMatchesSyntax
argument_list|()
argument_list|)
expr_stmt|;
name|noGUINeeded
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//export new database
name|IExportFormat
name|format
init|=
name|ExportFormats
operator|.
name|getExportFormat
argument_list|(
name|formatName
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unknown export format"
argument_list|)
operator|+
literal|": "
operator|+
name|formatName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We have an ExportFormat instance:
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Exporting"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|format
operator|.
name|performExport
argument_list|(
name|databaseContext
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|,
name|databaseContext
operator|.
name|getMetaData
argument_list|()
operator|.
name|getEncoding
argument_list|()
argument_list|,
name|matches
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not export file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|1
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No search matches."
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|doAuxImport (List<ParserResult> loaded)
specifier|private
name|void
name|doAuxImport
parameter_list|(
name|List
argument_list|<
name|ParserResult
argument_list|>
name|loaded
parameter_list|)
block|{
name|boolean
name|usageMsg
decl_stmt|;
if|if
condition|(
operator|!
name|loaded
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|usageMsg
operator|=
name|generateAux
argument_list|(
name|loaded
argument_list|,
name|cli
operator|.
name|getAuxImport
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|usageMsg
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|usageMsg
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"no base-BibTeX-file specified"
argument_list|)
operator|+
literal|"!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"usage"
argument_list|)
operator|+
literal|" :"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"jabref --aux infile[.aux],outfile[.bib] base-BibTeX-file"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|importAndOpenFiles ()
specifier|private
name|List
argument_list|<
name|ParserResult
argument_list|>
name|importAndOpenFiles
parameter_list|()
block|{
name|List
argument_list|<
name|ParserResult
argument_list|>
name|loaded
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toImport
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
operator|(
name|cli
operator|.
name|getLeftOver
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|String
name|aLeftOver
range|:
name|cli
operator|.
name|getLeftOver
argument_list|()
control|)
block|{
comment|// Leftover arguments that have a "bib" extension are interpreted as
comment|// BIB files to open. Other files, and files that could not be opened
comment|// as bib, we try to import instead.
name|boolean
name|bibExtension
init|=
name|aLeftOver
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"bib"
argument_list|)
decl_stmt|;
name|ParserResult
name|pr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bibExtension
condition|)
block|{
name|pr
operator|=
name|OpenDatabaseAction
operator|.
name|loadDatabaseOrAutoSave
argument_list|(
name|aLeftOver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bibExtension
operator|||
operator|(
name|pr
operator|.
name|isNullResult
argument_list|()
operator|)
condition|)
block|{
comment|// We will try to import this file. Normally we
comment|// will import it into a new tab, but if this import has
comment|// been initiated by another instance through the remote
comment|// listener, we will instead import it into the current database.
comment|// This will enable easy integration with web browsers that can
comment|// open a reference file in JabRef.
if|if
condition|(
name|startupMode
operator|==
name|Mode
operator|.
name|INITIAL_START
condition|)
block|{
name|toImport
operator|.
name|add
argument_list|(
name|aLeftOver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loaded
operator|.
name|add
argument_list|(
name|importToOpenBase
argument_list|(
name|aLeftOver
argument_list|)
operator|.
name|orElse
argument_list|(
name|ParserResult
operator|.
name|getNullResult
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|loaded
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
name|cli
operator|.
name|isFileImport
argument_list|()
condition|)
block|{
name|toImport
operator|.
name|add
argument_list|(
name|cli
operator|.
name|getFileImport
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|filenameString
range|:
name|toImport
control|)
block|{
name|importFile
argument_list|(
name|filenameString
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|loaded
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cli
operator|.
name|isBlank
argument_list|()
operator|&&
name|cli
operator|.
name|isImportToOpenBase
argument_list|()
condition|)
block|{
name|importToOpenBase
argument_list|(
name|cli
operator|.
name|getImportToOpenBase
argument_list|()
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|loaded
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
return|return
name|loaded
return|;
block|}
DECL|method|generateAux (List<ParserResult> loaded, String[] data)
specifier|private
name|boolean
name|generateAux
parameter_list|(
name|List
argument_list|<
name|ParserResult
argument_list|>
name|loaded
parameter_list|,
name|String
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AuxCommandLine
name|acl
init|=
operator|new
name|AuxCommandLine
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|BibDatabase
name|newBase
init|=
name|acl
operator|.
name|perform
argument_list|()
decl_stmt|;
name|boolean
name|notSavedMsg
init|=
literal|false
decl_stmt|;
comment|// write an output, if something could be resolved
if|if
condition|(
operator|(
name|newBase
operator|!=
literal|null
operator|)
operator|&&
name|newBase
operator|.
name|hasEntries
argument_list|()
condition|)
block|{
name|String
name|subName
init|=
name|StringUtil
operator|.
name|getCorrectFileName
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
literal|"bib"
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Saving"
argument_list|)
operator|+
literal|": "
operator|+
name|subName
argument_list|)
expr_stmt|;
name|SavePreferences
name|prefs
init|=
name|SavePreferences
operator|.
name|loadForSaveFromPreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
decl_stmt|;
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibtexDatabaseWriter
argument_list|(
name|FileSaveSession
operator|::
operator|new
argument_list|)
decl_stmt|;
name|Defaults
name|defaults
init|=
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|fromPreference
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|BIBLATEX_DEFAULT_MODE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SaveSession
name|session
init|=
name|databaseWriter
operator|.
name|saveDatabase
argument_list|(
operator|new
name|BibDatabaseContext
argument_list|(
name|newBase
argument_list|,
name|defaults
argument_list|)
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
comment|// Show just a warning message if encoding did not work for all characters:
if|if
condition|(
operator|!
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|couldEncodeAll
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"The chosen encoding '%0' could not encode the following characters:"
argument_list|,
name|session
operator|.
name|getEncoding
argument_list|()
operator|.
name|displayName
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|getProblemCharacters
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|(
name|subName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not save file."
argument_list|)
operator|+
literal|"\n"
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|notSavedMsg
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|notSavedMsg
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"no database generated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|exportFile (List<ParserResult> loaded, String[] data)
specifier|private
name|void
name|exportFile
parameter_list|(
name|List
argument_list|<
name|ParserResult
argument_list|>
name|loaded
parameter_list|,
name|String
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// This signals that the latest import should be stored in BibTeX
comment|// format to the given file.
if|if
condition|(
operator|!
name|loaded
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|get
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pr
operator|.
name|isInvalid
argument_list|()
condition|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Saving"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|SavePreferences
name|prefs
init|=
name|SavePreferences
operator|.
name|loadForSaveFromPreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
decl_stmt|;
name|Defaults
name|defaults
init|=
operator|new
name|Defaults
argument_list|(
name|BibDatabaseMode
operator|.
name|fromPreference
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|BIBLATEX_DEFAULT_MODE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BibDatabaseWriter
name|databaseWriter
init|=
operator|new
name|BibtexDatabaseWriter
argument_list|(
name|FileSaveSession
operator|::
operator|new
argument_list|)
decl_stmt|;
name|SaveSession
name|session
init|=
name|databaseWriter
operator|.
name|saveDatabase
argument_list|(
operator|new
name|BibDatabaseContext
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|pr
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|defaults
argument_list|)
argument_list|,
name|prefs
argument_list|)
decl_stmt|;
comment|// Show just a warning message if encoding did not work for all characters:
if|if
condition|(
operator|!
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|couldEncodeAll
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
operator|+
literal|": "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"The chosen encoding '%0' could not encode the following characters:"
argument_list|,
name|session
operator|.
name|getEncoding
argument_list|()
operator|.
name|displayName
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|getProblemCharacters
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not save file."
argument_list|)
operator|+
literal|"\n"
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"The output option depends on a valid import option."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// This signals that the latest import should be stored in the given
comment|// format to the given file.
name|ParserResult
name|pr
init|=
name|loaded
operator|.
name|get
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Set the global variable for this database's file directory before exporting,
comment|// so formatters can resolve linked files correctly.
comment|// (This is an ugly hack!)
name|File
name|theFile
init|=
name|pr
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|theFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|theFile
operator|=
name|theFile
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
name|BibDatabaseContext
name|databaseContext
init|=
name|pr
operator|.
name|getDatabaseContext
argument_list|()
decl_stmt|;
name|databaseContext
operator|.
name|setDatabaseFile
argument_list|(
name|theFile
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|fileDirForDatabase
operator|=
name|databaseContext
operator|.
name|getFileDirectory
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Exporting"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|IExportFormat
name|format
init|=
name|ExportFormats
operator|.
name|getExportFormat
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unknown export format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We have an ExportFormat instance:
try|try
block|{
name|format
operator|.
name|performExport
argument_list|(
name|pr
operator|.
name|getDatabaseContext
argument_list|()
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|,
name|pr
operator|.
name|getDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|getEncoding
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not export file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|importPreferences ()
specifier|private
name|void
name|importPreferences
parameter_list|()
block|{
try|try
block|{
name|Globals
operator|.
name|prefs
operator|.
name|importPreferences
argument_list|(
name|cli
operator|.
name|getPreferencesImport
argument_list|()
argument_list|)
expr_stmt|;
name|CustomEntryTypesManager
operator|.
name|loadCustomEntryTypes
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
name|ExportFormats
operator|.
name|initAllExports
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|customExports
operator|.
name|getCustomExportFormats
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JabRefException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Cannot import preferences"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resetPreferences (String value)
specifier|private
name|void
name|resetPreferences
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
literal|"all"
operator|.
name|equals
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Setting all preferences to default values."
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to clear preferences."
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Unable to clear preferences"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
index|[]
name|keys
init|=
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|hasKey
argument_list|(
name|key
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Resetting preference key '%0'"
argument_list|,
name|key
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|clear
argument_list|(
name|key
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unknown preference key '%0'"
argument_list|,
name|key
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|automaticallySetFileLinks (List<ParserResult> loaded)
specifier|private
name|void
name|automaticallySetFileLinks
parameter_list|(
name|List
argument_list|<
name|ParserResult
argument_list|>
name|loaded
parameter_list|)
block|{
for|for
control|(
name|ParserResult
name|parserResult
range|:
name|loaded
control|)
block|{
name|BibDatabase
name|database
init|=
name|parserResult
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Automatically setting file links"
argument_list|)
argument_list|)
expr_stmt|;
name|AutoSetLinks
operator|.
name|autoSetLinks
argument_list|(
name|database
operator|.
name|getEntries
argument_list|()
argument_list|,
name|parserResult
operator|.
name|getDatabaseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|regenerateBibtexKeys (List<ParserResult> loaded)
specifier|private
name|void
name|regenerateBibtexKeys
parameter_list|(
name|List
argument_list|<
name|ParserResult
argument_list|>
name|loaded
parameter_list|)
block|{
for|for
control|(
name|ParserResult
name|parserResult
range|:
name|loaded
control|)
block|{
name|BibDatabase
name|database
init|=
name|parserResult
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|parserResult
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaData
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Regenerating BibTeX keys according to metadata"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|database
operator|.
name|getEntries
argument_list|()
control|)
block|{
comment|// try to make a new label
name|LabelPatternUtil
operator|.
name|makeLabel
argument_list|(
name|metaData
argument_list|,
name|database
argument_list|,
name|entry
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No meta data present in BIB_file. Cannot regenerate BibTeX keys"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Run an entry fetcher from the command line.      *<p>      * Note that this only works headlessly if the EntryFetcher does not show any GUI.      *      * @param fetchCommand A string containing both the fetcher to use (id of EntryFetcherExtension minus Fetcher) and      *                     the search query, separated by a :      * @return A parser result containing the entries fetched or null if an error occurred.      */
DECL|method|fetch (String fetchCommand)
specifier|private
name|Optional
argument_list|<
name|ParserResult
argument_list|>
name|fetch
parameter_list|(
name|String
name|fetchCommand
parameter_list|)
block|{
if|if
condition|(
operator|(
name|fetchCommand
operator|==
literal|null
operator|)
operator|||
operator|!
name|fetchCommand
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
operator|||
operator|(
name|fetchCommand
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|.
name|length
operator|!=
literal|2
operator|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Expected syntax for --fetch='<name of fetcher>:<query>'"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"The following fetchers are available:"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|String
index|[]
name|split
init|=
name|fetchCommand
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|engine
init|=
name|split
index|[
literal|0
index|]
decl_stmt|;
name|EntryFetchers
name|fetchers
init|=
operator|new
name|EntryFetchers
argument_list|(
name|Globals
operator|.
name|journalAbbreviationLoader
argument_list|)
decl_stmt|;
name|EntryFetcher
name|fetcher
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EntryFetcher
name|e
range|:
name|fetchers
operator|.
name|getEntryFetchers
argument_list|()
control|)
block|{
if|if
condition|(
name|engine
operator|.
name|equalsIgnoreCase
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"Fetcher"
argument_list|,
literal|""
argument_list|)
argument_list|)
condition|)
block|{
name|fetcher
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fetcher
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not find fetcher '%0'"
argument_list|,
name|engine
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"The following fetchers are available:"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|EntryFetcher
name|e
range|:
name|fetchers
operator|.
name|getEntryFetchers
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"Fetcher"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|String
name|query
init|=
name|split
index|[
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Running query '%0' with fetcher '%1'."
argument_list|,
name|query
argument_list|,
name|engine
argument_list|)
operator|+
literal|" "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please wait..."
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|result
init|=
operator|new
name|ImportInspectionCommandLine
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|fetcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Query '%0' with fetcher '%1' did not return any results."
argument_list|,
name|query
argument_list|,
name|engine
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|ParserResult
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isBlank ()
specifier|public
name|boolean
name|isBlank
parameter_list|()
block|{
return|return
name|cli
operator|.
name|isBlank
argument_list|()
return|;
block|}
comment|/**      * Will open a file (like importFile), but will also request JabRef to focus on this database      *      * @param argument See importFile.      * @return ParserResult with setToOpenTab(true)      */
DECL|method|importToOpenBase (String argument)
specifier|private
specifier|static
name|Optional
argument_list|<
name|ParserResult
argument_list|>
name|importToOpenBase
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
name|Optional
argument_list|<
name|ParserResult
argument_list|>
name|result
init|=
name|importFile
argument_list|(
name|argument
argument_list|)
decl_stmt|;
name|result
operator|.
name|ifPresent
argument_list|(
name|x
lambda|->
name|x
operator|.
name|setToOpenTab
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|importFile (String argument)
specifier|private
specifier|static
name|Optional
argument_list|<
name|ParserResult
argument_list|>
name|importFile
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
name|String
index|[]
name|data
init|=
name|argument
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|data
operator|.
name|length
operator|>
literal|1
operator|)
operator|&&
operator|!
literal|"*"
operator|.
name|equals
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Importing"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|Path
name|file
decl_stmt|;
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
name|file
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|data
index|[
literal|0
index|]
operator|.
name|replace
argument_list|(
literal|"~"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ParserResult
name|result
init|=
name|Globals
operator|.
name|IMPORT_FORMAT_READER
operator|.
name|importFromFile
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
operator|.
name|showMessage
argument_list|(
name|result
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unknown import format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
else|else
block|{
comment|// * means "guess the format":
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Importing in unknown format"
argument_list|)
operator|+
literal|": "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ImportFormatReader
operator|.
name|UnknownFormatImport
name|importResult
decl_stmt|;
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
name|importResult
operator|=
name|Globals
operator|.
name|IMPORT_FORMAT_READER
operator|.
name|importUnknownFormat
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|importResult
operator|=
name|Globals
operator|.
name|IMPORT_FORMAT_READER
operator|.
name|importUnknownFormat
argument_list|(
name|data
index|[
literal|0
index|]
operator|.
name|replace
argument_list|(
literal|"~"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|importResult
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not find a suitable import format."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Format used"
argument_list|)
operator|+
literal|": "
operator|+
name|importResult
operator|.
name|format
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|importResult
operator|.
name|parserResult
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|data
index|[
literal|0
index|]
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|shouldShutDown ()
specifier|public
name|boolean
name|shouldShutDown
parameter_list|()
block|{
return|return
name|cli
operator|.
name|isDisableGui
argument_list|()
operator|||
name|cli
operator|.
name|isShowVersion
argument_list|()
operator|||
name|noGUINeeded
return|;
block|}
block|}
end_class

end_unit

