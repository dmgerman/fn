begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.external
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|DOI
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|fetcher
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|URLDownload
import|;
end_import

begin_comment
comment|/**  * Utility class for trying to resolve URLs to full-text PDF for articles.  */
end_comment

begin_class
DECL|class|FindFullText
specifier|public
class|class
name|FindFullText
block|{
DECL|field|FOUND_PDF
specifier|private
specifier|static
specifier|final
name|int
name|FOUND_PDF
init|=
literal|0
decl_stmt|;
DECL|field|WRONG_MIME_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|WRONG_MIME_TYPE
init|=
literal|1
decl_stmt|;
DECL|field|LINK_NOT_FOUND
specifier|public
specifier|static
specifier|final
name|int
name|LINK_NOT_FOUND
init|=
literal|2
decl_stmt|;
DECL|field|IO_EXCEPTION
specifier|public
specifier|static
specifier|final
name|int
name|IO_EXCEPTION
init|=
literal|3
decl_stmt|;
DECL|field|finders
specifier|private
specifier|final
name|List
argument_list|<
name|FullTextFinder
argument_list|>
name|finders
init|=
operator|new
name|ArrayList
argument_list|<
name|FullTextFinder
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|FindFullText ()
specifier|public
name|FindFullText
parameter_list|()
block|{
comment|// Ordering is important, authorities first!
comment|// Publisher
name|finders
operator|.
name|add
argument_list|(
operator|new
name|ScienceDirect
argument_list|()
argument_list|)
expr_stmt|;
name|finders
operator|.
name|add
argument_list|(
operator|new
name|SpringerLink
argument_list|()
argument_list|)
expr_stmt|;
name|finders
operator|.
name|add
argument_list|(
operator|new
name|ACS
argument_list|()
argument_list|)
expr_stmt|;
comment|// Meta search
name|finders
operator|.
name|add
argument_list|(
operator|new
name|GoogleScholar
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|findFullText (BibtexEntry entry)
specifier|public
name|FindResult
name|findFullText
parameter_list|(
name|BibtexEntry
name|entry
parameter_list|)
block|{
for|for
control|(
name|FullTextFinder
name|finder
range|:
name|finders
control|)
block|{
try|try
block|{
name|Optional
argument_list|<
name|URL
argument_list|>
name|result
init|=
name|finder
operator|.
name|findFullText
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// TODO: recheck this!
comment|// Check the MIME type of this URL to see if it is a PDF. If not,
comment|// it could be because the user doesn't have access:
comment|// FIXME: redirection break this!
comment|// Property-based software engineering measurement
comment|// http://drum.lib.umd.edu/bitstream/1903/19/2/CS-TR-3368.pdf
comment|// FIXME:
comment|// INFO: Fulltext PDF found @ Google: https://www.uni-bamberg.de/fileadmin/uni/fakultaeten/wiai_lehrstuehle/praktische_informatik/Dateien/Publikationen/sose14-towards-application-portability-in-paas.pdf
comment|// javax.net.ssl.SSLProtocolException: handshake alert:  unrecognized_name
comment|// http://stackoverflow.com/questions/7615645/ssl-handshake-alert-unrecognized-name-error-since-upgrade-to-java-1-7-0
name|String
name|mimeType
init|=
operator|new
name|URLDownload
argument_list|(
name|result
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|determineMimeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
operator|&&
name|mimeType
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"application/pdf"
argument_list|)
condition|)
block|{
return|return
operator|new
name|FindResult
argument_list|(
name|result
operator|.
name|get
argument_list|()
argument_list|,
name|result
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|FindResult
argument_list|(
name|WRONG_MIME_TYPE
argument_list|,
name|result
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|new
name|FindResult
argument_list|(
name|IO_EXCEPTION
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|FindResult
argument_list|(
name|LINK_NOT_FOUND
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Follow redirects until the final location is reached. This is necessary to handle Doi links, which      * redirect to publishers' web sites. We need to know the publisher's domain name in order to choose      * which FullTextFinder to use.      *      * @param url           The url to start with.      * @param redirectCount The number of previous redirects. We will follow a maximum of 5 redirects.      * @return the final URL, or the initial one in case there is no redirect.      * @throws IOException for connection error      */
DECL|method|resolveRedirects (URL url, int redirectCount)
specifier|private
specifier|static
name|URL
name|resolveRedirects
parameter_list|(
name|URL
name|url
parameter_list|,
name|int
name|redirectCount
parameter_list|)
throws|throws
name|IOException
block|{
name|URLConnection
name|uc
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|uc
operator|instanceof
name|HttpURLConnection
condition|)
block|{
name|HttpURLConnection
name|huc
init|=
operator|(
name|HttpURLConnection
operator|)
name|uc
decl_stmt|;
name|huc
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|huc
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|responseCode
init|=
name|huc
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|String
name|location
init|=
name|huc
operator|.
name|getHeaderField
argument_list|(
literal|"location"
argument_list|)
decl_stmt|;
name|huc
operator|.
name|disconnect
argument_list|()
expr_stmt|;
if|if
condition|(
name|responseCode
operator|==
name|HttpURLConnection
operator|.
name|HTTP_MOVED_TEMP
operator|||
name|responseCode
operator|==
name|HttpURLConnection
operator|.
name|HTTP_MOVED_PERM
operator|&&
name|redirectCount
operator|<
literal|5
condition|)
block|{
comment|//System.out.println(responseCode);
comment|//System.out.println(location);
try|try
block|{
name|URL
name|newUrl
init|=
operator|new
name|URL
argument_list|(
name|location
argument_list|)
decl_stmt|;
return|return
name|resolveRedirects
argument_list|(
name|newUrl
argument_list|,
name|redirectCount
operator|+
literal|1
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
return|return
name|url
return|;
comment|// take the previous one, since this one didn't make sense.
comment|// TODO: this could be caused by location being a relative link, but this would just give
comment|// the default page in the case of www.springerlink.com, not the article page. Don't know why.
block|}
block|}
else|else
block|{
return|return
name|url
return|;
block|}
block|}
else|else
block|{
return|return
name|url
return|;
block|}
block|}
DECL|method|loadPage (URL url)
specifier|public
specifier|static
name|String
name|loadPage
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|in
init|=
literal|null
decl_stmt|;
name|URLConnection
name|uc
decl_stmt|;
name|HttpURLConnection
name|huc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uc
operator|=
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|uc
operator|instanceof
name|HttpURLConnection
condition|)
block|{
name|huc
operator|=
operator|(
name|HttpURLConnection
operator|)
name|uc
expr_stmt|;
name|huc
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|huc
operator|.
name|connect
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|huc
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
comment|// TODO: are other types of connection (https?) relevant?
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|huc
operator|!=
literal|null
condition|)
block|{
name|huc
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|FindResult
specifier|public
specifier|static
class|class
name|FindResult
block|{
DECL|field|url
specifier|public
specifier|final
name|URL
name|url
decl_stmt|;
DECL|field|host
specifier|public
name|String
name|host
decl_stmt|;
DECL|field|status
specifier|public
specifier|final
name|int
name|status
decl_stmt|;
DECL|method|FindResult (URL url, URL originalUrl)
specifier|public
name|FindResult
parameter_list|(
name|URL
name|url
parameter_list|,
name|URL
name|originalUrl
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|FindFullText
operator|.
name|FOUND_PDF
expr_stmt|;
if|if
condition|(
name|originalUrl
operator|!=
literal|null
condition|)
block|{
name|host
operator|=
name|originalUrl
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|FindResult (int status, URL originalUrl)
specifier|public
name|FindResult
parameter_list|(
name|int
name|status
parameter_list|,
name|URL
name|originalUrl
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
if|if
condition|(
name|originalUrl
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|host
operator|=
name|originalUrl
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

