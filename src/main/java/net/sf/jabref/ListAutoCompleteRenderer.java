begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultListModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ListSelectionModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionListener
import|;
end_import

begin_comment
comment|/**  * Renders possible autocomplete items in form of a simple list.  * @param<E> the type of the items  */
end_comment

begin_class
DECL|class|ListAutoCompleteRenderer
specifier|public
class|class
name|ListAutoCompleteRenderer
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AutoCompleteRenderer
argument_list|<
name|E
argument_list|>
block|{
DECL|field|list
name|JList
argument_list|<
name|E
argument_list|>
name|list
init|=
operator|new
name|JList
argument_list|<
name|E
argument_list|>
argument_list|(
operator|new
name|DefaultListModel
argument_list|<
name|E
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|acceptAction
name|ActionListener
name|acceptAction
decl_stmt|;
comment|/** 	 * Every selection change by the user is interpreted as accepting the new item as autocompletion. 	 * Thus we need this helper variable to prevent that also programmatical trigger an autocompletion. 	 */
DECL|field|interpretSelectionChangeAsAccept
name|Boolean
name|interpretSelectionChangeAsAccept
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|update (E[] autoCompletions)
specifier|public
name|void
name|update
parameter_list|(
name|E
index|[]
name|autoCompletions
parameter_list|)
block|{
if|if
condition|(
name|autoCompletions
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|setListData
argument_list|(
name|autoCompletions
argument_list|)
expr_stmt|;
name|list
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|DefaultListModel
argument_list|<
name|E
argument_list|>
name|listModel
init|=
operator|(
name|DefaultListModel
argument_list|<
name|E
argument_list|>
operator|)
name|list
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|listModel
operator|.
name|removeAllElements
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (ActionListener newAcceptAction)
specifier|public
name|Component
name|init
parameter_list|(
name|ActionListener
name|newAcceptAction
parameter_list|)
block|{
name|this
operator|.
name|acceptAction
operator|=
name|newAcceptAction
expr_stmt|;
comment|// Init list
name|list
operator|.
name|setSelectionMode
argument_list|(
name|ListSelectionModel
operator|.
name|SINGLE_SELECTION
argument_list|)
expr_stmt|;
name|list
operator|.
name|setFocusable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|setRequestFocusEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|addListSelectionListener
argument_list|(
operator|new
name|ListSelectionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|valueChanged
parameter_list|(
name|ListSelectionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|interpretSelectionChangeAsAccept
operator|&&
name|acceptAction
operator|!=
literal|null
condition|)
name|acceptAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|this
argument_list|,
name|ActionEvent
operator|.
name|ACTION_PERFORMED
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Init pane containing the list
name|JScrollPane
name|scrollPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|scrollPane
operator|.
name|setFocusable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setRequestFocusEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|()
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_NEVER
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setHorizontalScrollBarPolicy
argument_list|(
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
expr_stmt|;
return|return
name|scrollPane
return|;
block|}
annotation|@
name|Override
DECL|method|getSelectedItem ()
specifier|public
name|E
name|getSelectedItem
parameter_list|()
block|{
return|return
name|list
operator|.
name|getSelectedValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|selectItem (int index)
specifier|public
name|void
name|selectItem
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|interpretSelectionChangeAsAccept
operator|=
literal|false
expr_stmt|;
comment|// Set new index if valid otherwise clean selection
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|list
operator|.
name|getModel
argument_list|()
operator|.
name|getSize
argument_list|()
condition|)
block|{
name|list
operator|.
name|setSelectedIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|list
operator|.
name|ensureIndexIsVisible
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
name|list
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|interpretSelectionChangeAsAccept
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSelectedIndex ()
specifier|public
name|int
name|getSelectedIndex
parameter_list|()
block|{
return|return
name|list
operator|.
name|getSelectedIndex
argument_list|()
return|;
block|}
block|}
end_class

end_unit

