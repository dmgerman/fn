begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General public static License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General public static License for more details.      You should have received a copy of the GNU General public static License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref.sql.exporter
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexString
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|structure
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|FileActions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
operator|.
name|DBImportExportDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
operator|.
name|DBImporterExporter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
operator|.
name|DBStrings
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
operator|.
name|SQLUtil
import|;
end_import

begin_comment
comment|/**  *   * @author ifsteinm.  *   *         Jan 20th Abstract Class to provide main features to export entries to  *         a DB. To insert a new DB it is necessary to extend this class and add  *         the DB name the enum available at  *         net.sf.jabref.sql.DBImporterAndExporterFactory (and to the GUI). This  *         class and its subclasses create database, entries and related stuff  *         within a DB.  *   */
end_comment

begin_class
DECL|class|DBExporter
specifier|public
specifier|abstract
class|class
name|DBExporter
extends|extends
name|DBImporterExporter
block|{
DECL|field|fieldStr
specifier|private
specifier|final
name|String
name|fieldStr
init|=
name|SQLUtil
operator|.
name|getFieldStr
argument_list|()
decl_stmt|;
DECL|field|dbStrings
name|DBStrings
name|dbStrings
decl_stmt|;
DECL|field|dbNames
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Method for the exportDatabase methods.      *       * @param database      *            The DBTYPE of the database      * @param database      *            The BibtexDatabase to export      * @param metaData      *            The MetaData object containing the groups information      * @param keySet      *            The set of IDs of the entries to export.      * @param out      *            The output (PrintStream or Connection) object to which the DML      *            should be written.      */
DECL|method|performExport (final BibtexDatabase database, final MetaData metaData, Set<String> keySet, Object out, String dbName)
specifier|private
name|void
name|performExport
parameter_list|(
specifier|final
name|BibtexDatabase
name|database
parameter_list|,
specifier|final
name|MetaData
name|metaData
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
parameter_list|,
name|Object
name|out
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
init|=
name|FileActions
operator|.
name|getSortedEntries
argument_list|(
name|database
argument_list|,
name|metaData
argument_list|,
name|keySet
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|GroupTreeNode
name|gtn
init|=
name|metaData
operator|.
name|getGroups
argument_list|()
decl_stmt|;
name|int
name|database_id
init|=
name|getDatabaseIDByName
argument_list|(
name|metaData
argument_list|,
name|out
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|removeAllRecordsForAGivenDB
argument_list|(
name|out
argument_list|,
name|database_id
argument_list|)
expr_stmt|;
name|populateEntryTypesTable
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|populateEntriesTable
argument_list|(
name|database_id
argument_list|,
name|entries
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|populateStringTable
argument_list|(
name|database
argument_list|,
name|out
argument_list|,
name|database_id
argument_list|)
expr_stmt|;
name|populateGroupTypesTable
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|populateGroupsTable
argument_list|(
name|gtn
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|out
argument_list|,
name|database_id
argument_list|)
expr_stmt|;
name|populateEntryGroupsTable
argument_list|(
name|gtn
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|out
argument_list|,
name|database_id
argument_list|)
expr_stmt|;
block|}
comment|/**      * Generates the DML required to populate the entries table with jabref data      * and writes it to the output PrintStream.      *       * @param database_id      *            ID of Jabref database related to the entries to be exported      *            This information can be gathered using      *            getDatabaseIDByPath(metaData, out)      * @param entries      *            The BibtexEntries to export      * @param out      *            The output (PrintStream or Connection) object to which the DML      *            should be written.      */
DECL|method|populateEntriesTable (int database_id, List<BibtexEntry> entries, Object out)
specifier|private
name|void
name|populateEntriesTable
parameter_list|(
name|int
name|database_id
parameter_list|,
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|entries
parameter_list|,
name|Object
name|out
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|query
decl_stmt|;
name|String
name|val
decl_stmt|;
name|String
name|insert
init|=
literal|"INSERT INTO entries (jabref_eid, entry_types_id, cite_key, "
operator|+
name|fieldStr
operator|+
literal|", database_id) VALUES ("
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|entries
control|)
block|{
name|query
operator|=
name|insert
operator|+
literal|'\''
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|'\''
operator|+
literal|", (SELECT entry_types_id FROM entry_types WHERE label='"
operator|+
name|entry
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'), '"
operator|+
name|entry
operator|.
name|getCiteKey
argument_list|()
operator|+
literal|'\''
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SQLUtil
operator|.
name|getAllFields
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|=
name|query
operator|+
literal|", "
expr_stmt|;
name|val
operator|=
name|entry
operator|.
name|getField
argument_list|(
name|SQLUtil
operator|.
name|getAllFields
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|val
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"\\\\"
argument_list|)
expr_stmt|;
name|val
operator|=
name|val
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|"\\\""
argument_list|)
expr_stmt|;
name|val
operator|=
name|val
operator|.
name|replace
argument_list|(
literal|"\'"
argument_list|,
literal|"''"
argument_list|)
expr_stmt|;
name|val
operator|=
name|val
operator|.
name|replace
argument_list|(
literal|"`"
argument_list|,
literal|"\\`"
argument_list|)
expr_stmt|;
name|query
operator|=
name|query
operator|+
literal|'\''
operator|+
name|val
operator|+
literal|'\''
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|query
operator|+
literal|"NULL"
expr_stmt|;
block|}
block|}
name|query
operator|=
name|query
operator|+
literal|", '"
operator|+
name|database_id
operator|+
literal|"');"
expr_stmt|;
name|SQLUtil
operator|.
name|processQuery
argument_list|(
name|out
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Recursive method to include a tree of groups.      *       * @param cursor      *            The current GroupTreeNode in the GroupsTree      * @param parentID      *            The integer ID associated with the cursors's parent node      * @param currentID      *            The integer value to associate with the cursor      * @param out      *            The output (PrintStream or Connection) object to which the DML      *            should be written.      * @param database_id      *            Id of jabref database to which the group is part of      */
DECL|method|populateEntryGroupsTable (GroupTreeNode cursor, int parentID, int currentID, Object out, int database_id)
specifier|private
name|int
name|populateEntryGroupsTable
parameter_list|(
name|GroupTreeNode
name|cursor
parameter_list|,
name|int
name|parentID
parameter_list|,
name|int
name|currentID
parameter_list|,
name|Object
name|out
parameter_list|,
name|int
name|database_id
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// if this group contains entries...
if|if
condition|(
name|cursor
operator|.
name|getGroup
argument_list|()
operator|instanceof
name|ExplicitGroup
condition|)
block|{
name|ExplicitGroup
name|grp
init|=
operator|(
name|ExplicitGroup
operator|)
name|cursor
operator|.
name|getGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|be
range|:
name|grp
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|SQLUtil
operator|.
name|processQuery
argument_list|(
name|out
argument_list|,
literal|"INSERT INTO entry_group (entries_id, groups_id) "
operator|+
literal|"VALUES ("
operator|+
literal|"(SELECT entries_id FROM entries WHERE jabref_eid="
operator|+
literal|'\''
operator|+
name|be
operator|.
name|getId
argument_list|()
operator|+
literal|"' AND database_id = "
operator|+
name|database_id
operator|+
literal|"), "
operator|+
literal|"(SELECT groups_id FROM groups WHERE database_id="
operator|+
literal|'\''
operator|+
name|database_id
operator|+
literal|"' AND parent_id="
operator|+
literal|'\''
operator|+
name|parentID
operator|+
literal|"' AND label="
operator|+
literal|'\''
operator|+
name|grp
operator|.
name|getName
argument_list|()
operator|+
literal|"')"
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// recurse on child nodes (depth-first traversal)
name|Object
name|response
init|=
name|SQLUtil
operator|.
name|processQueryWithResults
argument_list|(
name|out
argument_list|,
literal|"SELECT groups_id FROM groups WHERE label='"
operator|+
name|cursor
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' AND database_id='"
operator|+
name|database_id
operator|+
literal|"' AND parent_id='"
operator|+
name|parentID
operator|+
literal|"';"
argument_list|)
decl_stmt|;
comment|// setting values to ID and myID to be used in case of textual SQL
comment|// export
operator|++
name|currentID
expr_stmt|;
name|int
name|myID
init|=
name|currentID
decl_stmt|;
if|if
condition|(
name|response
operator|instanceof
name|Statement
condition|)
block|{
name|ResultSet
name|rs
init|=
operator|(
operator|(
name|Statement
operator|)
name|response
operator|)
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|myID
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"groups_id"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Enumeration
argument_list|<
name|GroupTreeNode
argument_list|>
name|e
init|=
name|cursor
operator|.
name|children
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|currentID
operator|=
name|populateEntryGroupsTable
argument_list|(
name|e
operator|.
name|nextElement
argument_list|()
argument_list|,
name|myID
argument_list|,
name|currentID
argument_list|,
name|out
argument_list|,
name|database_id
argument_list|)
expr_stmt|;
block|}
return|return
name|currentID
return|;
block|}
comment|/**      * Generates the SQL required to populate the entry_types table with jabref      * data.      *       * @param out      *            The output (PrintSream or Connection) object to which the DML      *            should be written.      */
DECL|method|populateEntryTypesTable (Object out)
specifier|private
name|void
name|populateEntryTypesTable
parameter_list|(
name|Object
name|out
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|query
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldRequirement
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|existentTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|out
operator|instanceof
name|Connection
condition|)
block|{
name|ResultSet
name|rs
init|=
operator|(
operator|(
name|Statement
operator|)
name|SQLUtil
operator|.
name|processQueryWithResults
argument_list|(
name|out
argument_list|,
literal|"SELECT label FROM entry_types"
argument_list|)
operator|)
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|existentTypes
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|BibtexEntryType
name|val
range|:
name|BibtexEntryType
operator|.
name|getAllValues
argument_list|()
control|)
block|{
name|fieldRequirement
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SQLUtil
operator|.
name|getAllFields
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fieldRequirement
operator|.
name|add
argument_list|(
name|i
argument_list|,
literal|"gen"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|reqFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|val
operator|.
name|getRequiredFields
argument_list|()
operator|!=
literal|null
condition|?
name|val
operator|.
name|getRequiredFields
argument_list|()
else|:
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|optFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|val
operator|.
name|getOptionalFields
argument_list|()
operator|!=
literal|null
condition|?
name|val
operator|.
name|getOptionalFields
argument_list|()
else|:
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|utiFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|val
operator|.
name|getUtilityFields
argument_list|()
operator|!=
literal|null
condition|?
name|val
operator|.
name|getUtilityFields
argument_list|()
else|:
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|fieldRequirement
operator|=
name|SQLUtil
operator|.
name|setFieldRequirement
argument_list|(
name|SQLUtil
operator|.
name|getAllFields
argument_list|()
argument_list|,
name|reqFields
argument_list|,
name|optFields
argument_list|,
name|utiFields
argument_list|,
name|fieldRequirement
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|existentTypes
operator|.
name|contains
argument_list|(
name|val
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|insert
init|=
literal|"INSERT INTO entry_types (label, "
operator|+
name|fieldStr
operator|+
literal|") VALUES ("
decl_stmt|;
name|query
operator|=
name|insert
operator|+
literal|'\''
operator|+
name|val
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|'\''
expr_stmt|;
for|for
control|(
name|String
name|aFieldRequirement
range|:
name|fieldRequirement
control|)
block|{
name|query
operator|=
name|query
operator|+
literal|", '"
operator|+
name|aFieldRequirement
operator|+
literal|'\''
expr_stmt|;
block|}
name|query
operator|=
name|query
operator|+
literal|");"
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|update
init|=
name|fieldStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"UPDATE entry_types SET \n"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRequirement
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|+=
name|update
index|[
name|i
index|]
operator|+
literal|"='"
operator|+
name|fieldRequirement
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"',"
expr_stmt|;
block|}
name|query
operator|=
name|query
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|query
operator|.
name|lastIndexOf
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|+=
literal|" WHERE label='"
operator|+
name|val
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|'\''
expr_stmt|;
block|}
name|SQLUtil
operator|.
name|processQuery
argument_list|(
name|out
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Recursive worker method for the populateGroupsTable methods.      *       * @param cursor      *            The current GroupTreeNode in the GroupsTree      * @param parentID      *            The integer ID associated with the cursors's parent node      * @param currentID      *            The integer value to associate with the cursor      * @param out      *            The output (PrintStream or Connection) object to which the DML      *            should be written.      * @param database_id      *            Id of jabref database to which the groups/entries are part of      */
DECL|method|populateGroupsTable (GroupTreeNode cursor, int parentID, int currentID, Object out, int database_id)
specifier|private
name|int
name|populateGroupsTable
parameter_list|(
name|GroupTreeNode
name|cursor
parameter_list|,
name|int
name|parentID
parameter_list|,
name|int
name|currentID
parameter_list|,
name|Object
name|out
parameter_list|,
name|int
name|database_id
parameter_list|)
throws|throws
name|SQLException
block|{
name|AbstractGroup
name|group
init|=
name|cursor
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|String
name|searchField
init|=
literal|null
decl_stmt|;
name|String
name|searchExpr
init|=
literal|null
decl_stmt|;
name|String
name|caseSens
init|=
literal|null
decl_stmt|;
name|String
name|reg_exp
init|=
literal|null
decl_stmt|;
name|GroupHierarchyType
name|hierContext
init|=
name|group
operator|.
name|getHierarchicalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|instanceof
name|KeywordGroup
condition|)
block|{
name|searchField
operator|=
operator|(
operator|(
name|KeywordGroup
operator|)
name|group
operator|)
operator|.
name|getSearchField
argument_list|()
expr_stmt|;
name|searchExpr
operator|=
operator|(
operator|(
name|KeywordGroup
operator|)
name|group
operator|)
operator|.
name|getSearchExpression
argument_list|()
expr_stmt|;
name|caseSens
operator|=
operator|(
operator|(
name|KeywordGroup
operator|)
name|group
operator|)
operator|.
name|isCaseSensitive
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
expr_stmt|;
name|reg_exp
operator|=
operator|(
operator|(
name|KeywordGroup
operator|)
name|group
operator|)
operator|.
name|isRegExp
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|group
operator|instanceof
name|SearchGroup
condition|)
block|{
name|searchExpr
operator|=
operator|(
operator|(
name|SearchGroup
operator|)
name|group
operator|)
operator|.
name|getSearchExpression
argument_list|()
expr_stmt|;
name|caseSens
operator|=
operator|(
operator|(
name|SearchGroup
operator|)
name|group
operator|)
operator|.
name|isCaseSensitive
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
expr_stmt|;
name|reg_exp
operator|=
operator|(
operator|(
name|SearchGroup
operator|)
name|group
operator|)
operator|.
name|isRegExp
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
expr_stmt|;
block|}
comment|// Protect all quotes in the group descriptions:
if|if
condition|(
name|searchField
operator|!=
literal|null
condition|)
block|{
name|searchField
operator|=
name|StringUtil
operator|.
name|quote
argument_list|(
name|searchField
argument_list|,
literal|"'"
argument_list|,
literal|'\\'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchExpr
operator|!=
literal|null
condition|)
block|{
name|searchExpr
operator|=
name|StringUtil
operator|.
name|quote
argument_list|(
name|searchExpr
argument_list|,
literal|"'"
argument_list|,
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|SQLUtil
operator|.
name|processQuery
argument_list|(
name|out
argument_list|,
literal|"INSERT INTO groups (label, parent_id, group_types_id, search_field, "
operator|+
literal|"search_expression, case_sensitive, reg_exp, hierarchical_context, database_id) "
operator|+
literal|"VALUES ('"
operator|+
name|group
operator|.
name|getName
argument_list|()
operator|+
literal|"', "
operator|+
name|parentID
operator|+
literal|", (SELECT group_types_id FROM group_types where label='"
operator|+
name|group
operator|.
name|getTypeId
argument_list|()
operator|+
literal|"')"
operator|+
literal|", "
operator|+
operator|(
name|searchField
operator|!=
literal|null
condition|?
literal|'\''
operator|+
name|searchField
operator|+
literal|'\''
else|:
literal|"NULL"
operator|)
operator|+
literal|", "
operator|+
operator|(
name|searchExpr
operator|!=
literal|null
condition|?
literal|'\''
operator|+
name|searchExpr
operator|+
literal|'\''
else|:
literal|"NULL"
operator|)
operator|+
literal|", "
operator|+
operator|(
name|caseSens
operator|!=
literal|null
condition|?
literal|'\''
operator|+
name|caseSens
operator|+
literal|'\''
else|:
literal|"NULL"
operator|)
operator|+
literal|", "
operator|+
operator|(
name|reg_exp
operator|!=
literal|null
condition|?
literal|'\''
operator|+
name|reg_exp
operator|+
literal|'\''
else|:
literal|"NULL"
operator|)
operator|+
literal|", "
operator|+
name|hierContext
operator|.
name|ordinal
argument_list|()
operator|+
literal|", '"
operator|+
name|database_id
operator|+
literal|"');"
argument_list|)
expr_stmt|;
comment|// recurse on child nodes (depth-first traversal)
name|Object
name|response
init|=
name|SQLUtil
operator|.
name|processQueryWithResults
argument_list|(
name|out
argument_list|,
literal|"SELECT groups_id FROM groups WHERE label='"
operator|+
name|cursor
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' AND database_id='"
operator|+
name|database_id
operator|+
literal|"' AND parent_id='"
operator|+
name|parentID
operator|+
literal|"';"
argument_list|)
decl_stmt|;
comment|// setting values to ID and myID to be used in case of textual SQL
comment|// export
name|int
name|myID
init|=
name|currentID
decl_stmt|;
if|if
condition|(
name|response
operator|instanceof
name|Statement
condition|)
block|{
name|ResultSet
name|rs
init|=
operator|(
operator|(
name|Statement
operator|)
name|response
operator|)
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|myID
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"groups_id"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Enumeration
argument_list|<
name|GroupTreeNode
argument_list|>
name|e
init|=
name|cursor
operator|.
name|children
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
operator|++
name|currentID
expr_stmt|;
name|currentID
operator|=
name|populateGroupsTable
argument_list|(
name|e
operator|.
name|nextElement
argument_list|()
argument_list|,
name|myID
argument_list|,
name|currentID
argument_list|,
name|out
argument_list|,
name|database_id
argument_list|)
expr_stmt|;
block|}
return|return
name|currentID
return|;
block|}
comment|/**      * Generates the DML required to populate the group_types table with JabRef      * data.      *       * @param out      *            The output (PrintSream or Connection) object to which the DML      *            should be written.      *       * @throws SQLException      */
DECL|method|populateGroupTypesTable (Object out)
specifier|private
name|void
name|populateGroupTypesTable
parameter_list|(
name|Object
name|out
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|quantidade
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|out
operator|instanceof
name|Connection
condition|)
block|{
name|ResultSet
name|res
init|=
operator|(
operator|(
name|Statement
operator|)
name|SQLUtil
operator|.
name|processQueryWithResults
argument_list|(
name|out
argument_list|,
literal|"SELECT COUNT(*) AS amount FROM group_types"
argument_list|)
operator|)
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
name|quantidade
operator|=
name|res
operator|.
name|getInt
argument_list|(
literal|"amount"
argument_list|)
expr_stmt|;
name|res
operator|.
name|getStatement
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|quantidade
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|typeNames
init|=
operator|new
name|String
index|[]
block|{
name|AllEntriesGroup
operator|.
name|ID
block|,
name|ExplicitGroup
operator|.
name|ID
block|,
name|KeywordGroup
operator|.
name|ID
block|,
name|SearchGroup
operator|.
name|ID
block|}
decl_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|typeNames
control|)
block|{
name|String
name|insert
init|=
literal|"INSERT INTO group_types (label) VALUES ('"
operator|+
name|typeName
operator|+
literal|"');"
decl_stmt|;
name|SQLUtil
operator|.
name|processQuery
argument_list|(
name|out
argument_list|,
name|insert
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Generates the SQL required to populate the strings table with jabref      * data.      *       * @param database      *            BibtexDatabase object used from where the strings will be      *            exported      * @param out      *            The output (PrintStream or Connection) object to which the DML      *            should be written.      * @param database_id      *            ID of Jabref database related to the entries to be exported      *            This information can be gathered using      *            getDatabaseIDByPath(metaData, out)      * @throws SQLException      */
DECL|method|populateStringTable (BibtexDatabase database, Object out, int database_id)
specifier|private
name|void
name|populateStringTable
parameter_list|(
name|BibtexDatabase
name|database
parameter_list|,
name|Object
name|out
parameter_list|,
name|int
name|database_id
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|insert
init|=
literal|"INSERT INTO strings (label, content, database_id) VALUES ("
decl_stmt|;
if|if
condition|(
name|database
operator|.
name|getPreamble
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|dml
init|=
name|insert
operator|+
literal|"'@PREAMBLE', "
operator|+
literal|'\''
operator|+
name|StringUtil
operator|.
name|quote
argument_list|(
name|database
operator|.
name|getPreamble
argument_list|()
argument_list|,
literal|"'"
argument_list|,
literal|'\\'
argument_list|)
operator|+
literal|"', "
operator|+
literal|'\''
operator|+
name|database_id
operator|+
literal|"');"
decl_stmt|;
name|SQLUtil
operator|.
name|processQuery
argument_list|(
name|out
argument_list|,
name|dml
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|database
operator|.
name|getStringKeySet
argument_list|()
control|)
block|{
name|BibtexString
name|string
init|=
name|database
operator|.
name|getString
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|dml
init|=
name|insert
operator|+
literal|'\''
operator|+
name|StringUtil
operator|.
name|quote
argument_list|(
name|string
operator|.
name|getName
argument_list|()
argument_list|,
literal|"'"
argument_list|,
literal|'\\'
argument_list|)
operator|+
literal|"', "
operator|+
literal|'\''
operator|+
name|StringUtil
operator|.
name|quote
argument_list|(
name|string
operator|.
name|getContent
argument_list|()
argument_list|,
literal|"'"
argument_list|,
literal|'\\'
argument_list|)
operator|+
literal|"', "
operator|+
literal|'\''
operator|+
name|database_id
operator|+
literal|'\''
operator|+
literal|");"
decl_stmt|;
name|SQLUtil
operator|.
name|processQuery
argument_list|(
name|out
argument_list|,
name|dml
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Given a DBStrings it connects to the DB and returns the      * java.sql.Connection object      *       * @param dbstrings      *            The DBStrings to use to make the connection      * @return java.sql.Connection to the DB chosen      * @throws Exception      */
DECL|method|connectToDB (DBStrings dbstrings)
specifier|public
specifier|abstract
name|Connection
name|connectToDB
parameter_list|(
name|DBStrings
name|dbstrings
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Generates DML code necessary to create all tables in a database, and      * writes it to appropriate output.      *       * @param out      *            The output (PrintStream or Connection) object to which the DML      *            should be written.      */
DECL|method|createTables (Object out)
specifier|protected
specifier|abstract
name|void
name|createTables
parameter_list|(
name|Object
name|out
parameter_list|)
throws|throws
name|SQLException
function_decl|;
comment|/**      * Accepts the BibtexDatabase and MetaData, generates the DML required to      * create and populate SQL database tables, and writes this DML to the      * specified output file.      *       * @param database      *            The BibtexDatabase to export      * @param metaData      *            The MetaData object containing the groups information      * @param keySet      *            The set of IDs of the entries to export.      * @param file      *            The name of the file to which the DML should be written      */
DECL|method|exportDatabaseAsFile (final BibtexDatabase database, final MetaData metaData, Set<String> keySet, String file)
specifier|public
name|void
name|exportDatabaseAsFile
parameter_list|(
specifier|final
name|BibtexDatabase
name|database
parameter_list|,
specifier|final
name|MetaData
name|metaData
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|Exception
block|{
comment|// open output file
name|File
name|outfile
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|outfile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|outfile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|BufferedOutputStream
name|writer
decl_stmt|;
name|writer
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outfile
argument_list|)
argument_list|)
expr_stmt|;
name|PrintStream
name|fout
decl_stmt|;
name|fout
operator|=
operator|new
name|PrintStream
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|performExport
argument_list|(
name|database
argument_list|,
name|metaData
argument_list|,
name|keySet
argument_list|,
name|fout
argument_list|,
literal|"file"
argument_list|)
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Accepts the BibtexDatabase and MetaData, generates the DML required to      * create and populate SQL database tables, and writes this DML to the      * specified SQL database.      *       * @param database      *            The BibtexDatabase to export      * @param metaData      *            The MetaData object containing the groups information      * @param keySet      *            The set of IDs of the entries to export.      * @param dbStrings      *            The necessary database connection information      */
DECL|method|exportDatabaseToDBMS (final BibtexDatabase database, final MetaData metaData, Set<String> keySet, DBStrings dbStrings, JabRefFrame frame)
specifier|public
name|void
name|exportDatabaseToDBMS
parameter_list|(
specifier|final
name|BibtexDatabase
name|database
parameter_list|,
specifier|final
name|MetaData
name|metaData
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
parameter_list|,
name|DBStrings
name|dbStrings
parameter_list|,
name|JabRefFrame
name|frame
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbName
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|boolean
name|redisplay
init|=
literal|false
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|this
operator|.
name|connectToDB
argument_list|(
name|dbStrings
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|>
name|matrix
init|=
name|createExistentDBNamesMatrix
argument_list|(
name|dbStrings
argument_list|)
decl_stmt|;
name|DBImportExportDialog
name|dialogo
init|=
operator|new
name|DBImportExportDialog
argument_list|(
name|frame
argument_list|,
name|matrix
argument_list|,
name|DBImportExportDialog
operator|.
name|DialogType
operator|.
name|EXPORTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|dialogo
operator|.
name|removeAction
condition|)
block|{
name|dbName
operator|=
name|getDBName
argument_list|(
name|matrix
argument_list|,
name|dbStrings
argument_list|,
name|frame
argument_list|,
name|dialogo
argument_list|)
expr_stmt|;
name|removeDB
argument_list|(
name|dialogo
argument_list|,
name|dbName
argument_list|,
name|conn
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|redisplay
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dialogo
operator|.
name|hasDBSelected
condition|)
block|{
name|dbName
operator|=
name|getDBName
argument_list|(
name|matrix
argument_list|,
name|dbStrings
argument_list|,
name|frame
argument_list|,
name|dialogo
argument_list|)
expr_stmt|;
name|performExport
argument_list|(
name|database
argument_list|,
name|metaData
argument_list|,
name|keySet
argument_list|,
name|conn
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|conn
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|redisplay
condition|)
block|{
name|exportDatabaseToDBMS
argument_list|(
name|database
argument_list|,
name|metaData
argument_list|,
name|keySet
argument_list|,
name|dbStrings
argument_list|,
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|conn
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
name|conn
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|getDBName (Vector<Vector<String>> matrix, DBStrings dbStrings, JabRefFrame frame, DBImportExportDialog dialogo)
specifier|private
name|String
name|getDBName
parameter_list|(
name|Vector
argument_list|<
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|>
name|matrix
parameter_list|,
name|DBStrings
name|dbStrings
parameter_list|,
name|JabRefFrame
name|frame
parameter_list|,
name|DBImportExportDialog
name|dialogo
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|matrix
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|dialogo
operator|.
name|hasDBSelected
condition|)
block|{
name|dbName
operator|=
name|dialogo
operator|.
name|selectedDB
expr_stmt|;
if|if
condition|(
operator|(
name|dialogo
operator|.
name|selectedInt
operator|==
literal|0
operator|)
operator|&&
operator|(
operator|!
name|dialogo
operator|.
name|removeAction
operator|)
condition|)
block|{
name|dbName
operator|=
name|JOptionPane
operator|.
name|showInputDialog
argument_list|(
name|dialogo
operator|.
name|getDiag
argument_list|()
argument_list|,
literal|"Please enter the desired name:"
argument_list|,
literal|"SQL Export"
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbName
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
operator|!
name|isValidDBName
argument_list|(
name|dbNames
argument_list|,
name|dbName
argument_list|)
condition|)
block|{
name|dbName
operator|=
name|JOptionPane
operator|.
name|showInputDialog
argument_list|(
name|dialogo
operator|.
name|getDiag
argument_list|()
argument_list|,
literal|"You have entered an invalid or already existent DB name.\n Please enter the desired name:"
argument_list|,
literal|"SQL Export"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getDBName
argument_list|(
name|matrix
argument_list|,
name|dbStrings
argument_list|,
name|frame
argument_list|,
operator|new
name|DBImportExportDialog
argument_list|(
name|frame
argument_list|,
name|matrix
argument_list|,
name|DBImportExportDialog
operator|.
name|DialogType
operator|.
name|EXPORTER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|dbName
operator|=
name|JOptionPane
operator|.
name|showInputDialog
argument_list|(
name|frame
argument_list|,
literal|"Please enter the desired name:"
argument_list|,
literal|"SQL Export"
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
block|}
return|return
name|dbName
return|;
block|}
DECL|method|createExistentDBNamesMatrix ( DBStrings dbStrings)
specifier|private
name|Vector
argument_list|<
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|>
name|createExistentDBNamesMatrix
parameter_list|(
name|DBStrings
name|dbStrings
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultSet
name|rs
init|=
name|SQLUtil
operator|.
name|queryAllFromTable
argument_list|(
name|this
operator|.
name|connectToDB
argument_list|(
name|dbStrings
argument_list|)
argument_list|,
literal|"jabref_database"
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|v
decl_stmt|;
name|Vector
argument_list|<
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|>
name|matrix
init|=
operator|new
name|Vector
argument_list|<
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|dbNames
operator|.
name|clear
argument_list|()
expr_stmt|;
name|v
operator|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|v
operator|.
name|add
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"< CREATE NEW DATABASE>"
argument_list|)
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|v
operator|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|v
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"database_name"
argument_list|)
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|dbNames
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"database_name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|matrix
return|;
block|}
DECL|method|isValidDBName (ArrayList<String> dbNames, String desiredName)
specifier|private
name|boolean
name|isValidDBName
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dbNames
parameter_list|,
name|String
name|desiredName
parameter_list|)
block|{
return|return
operator|(
name|desiredName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|)
operator|&&
operator|!
name|dbNames
operator|.
name|contains
argument_list|(
name|desiredName
argument_list|)
return|;
block|}
comment|/**      * Returns a Jabref Database ID from the database in case the DB is already      * exported. In case the bib was already exported before, the method returns      * the id, otherwise it calls the method that inserts a new row and returns      * the ID for this new database      *       * @param metaData      *            The MetaData object containing the database information      * @param out      *            The output (PrintStream or Connection) object to which the DML      *            should be written.      * @return The ID of database row of the jabref database being exported      * @throws SQLException      */
comment|/*      * public int getDatabaseIDByPath(MetaData metaData, Object out, String      * dbName) throws SQLException {      *       * if (out instanceof Connection) { Object response =      * SQLUtil.processQueryWithResults(out,      * "SELECT database_id FROM jabref_database WHERE md5_path=md5('" +      * metaData.getFile().getAbsolutePath() + "');"); ResultSet rs =      * ((Statement) response).getResultSet(); if (rs.next()) return      * rs.getInt("database_id"); else { insertJabRefDatabase(metaData, out,      * dbName); return getDatabaseIDByPath(metaData, out, dbName); } } // in      * case of text export there will be only 1 bib exported else {      * insertJabRefDatabase(metaData, out, dbName); return 1; } }      */
block|}
end_class

end_unit

