begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.sql
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  * All DBTypes must appear here. The enum items must be the  * names that appear in the combobox used to select the DB,  * because this text is used to choose which DatabaseImporter/Exporter  * will be sent back to the requester  */
end_comment

begin_enum
DECL|enum|DatabaseType
specifier|public
enum|enum
name|DatabaseType
block|{
DECL|enumConstant|MYSQL
DECL|enumConstant|POSTGRESQL
name|MYSQL
argument_list|(
literal|"MySQL"
argument_list|)
block|,
name|POSTGRESQL
argument_list|(
literal|"PostgreSQL"
argument_list|)
block|;
DECL|field|formattedName
specifier|private
specifier|final
name|String
name|formattedName
decl_stmt|;
DECL|method|DatabaseType (String formattedName)
name|DatabaseType
parameter_list|(
name|String
name|formattedName
parameter_list|)
block|{
name|this
operator|.
name|formattedName
operator|=
name|formattedName
expr_stmt|;
block|}
DECL|method|getFormattedName ()
specifier|public
name|String
name|getFormattedName
parameter_list|()
block|{
return|return
name|formattedName
return|;
block|}
DECL|method|build (String serverType)
specifier|public
specifier|static
name|Optional
argument_list|<
name|DatabaseType
argument_list|>
name|build
parameter_list|(
name|String
name|serverType
parameter_list|)
block|{
for|for
control|(
name|DatabaseType
name|type
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|getFormattedName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|serverType
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|formattedName
return|;
block|}
block|}
end_enum

end_unit

