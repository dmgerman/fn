begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2016 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.sql
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_comment
comment|/**  * @author pattonlk  */
end_comment

begin_class
DECL|class|DBStrings
specifier|public
class|class
name|DBStrings
block|{
DECL|field|dbPreferences
specifier|private
name|DBStringsPreferences
name|dbPreferences
decl_stmt|;
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|field|dbParameters
specifier|private
name|String
name|dbParameters
init|=
literal|""
decl_stmt|;
DECL|field|isInitialized
specifier|private
name|boolean
name|isInitialized
decl_stmt|;
DECL|field|configValid
specifier|private
name|boolean
name|configValid
decl_stmt|;
comment|/**      * Creates a new instance of DBStrings      */
DECL|method|DBStrings ()
specifier|public
name|DBStrings
parameter_list|()
block|{
name|this
operator|.
name|dbPreferences
operator|=
operator|new
name|DBStringsPreferences
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|setPassword
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|isInitialized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|isConfigValid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes the variables needed with defaults      */
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|this
operator|.
name|dbPreferences
operator|=
name|DBStringsPreferences
operator|.
name|loadFromPreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
name|setPassword
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|isInitialized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|isInitialized ()
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|isInitialized
return|;
block|}
DECL|method|isInitialized (boolean isInit)
specifier|private
name|void
name|isInitialized
parameter_list|(
name|boolean
name|isInit
parameter_list|)
block|{
name|this
operator|.
name|isInitialized
operator|=
name|isInit
expr_stmt|;
block|}
DECL|method|isConfigValid ()
specifier|public
name|boolean
name|isConfigValid
parameter_list|()
block|{
return|return
name|configValid
return|;
block|}
DECL|method|isConfigValid (boolean confValid)
specifier|public
name|void
name|isConfigValid
parameter_list|(
name|boolean
name|confValid
parameter_list|)
block|{
name|this
operator|.
name|configValid
operator|=
name|confValid
expr_stmt|;
block|}
comment|/**      * Returns the database parameters set      *      * @return dbParameters: The concatenated parameters      */
DECL|method|getDbParameters ()
specifier|public
name|String
name|getDbParameters
parameter_list|()
block|{
return|return
name|dbParameters
return|;
block|}
comment|/**      * Add server specific database parameter(s)<br>      * Multiple parameters must be concatenated in the format<br>      * {@code ?Parameter1=value&parameter2=value2}      *      * @param dbParameter The concatendated parameter      */
DECL|method|setDbParameters (String dbParameters)
specifier|public
name|void
name|setDbParameters
parameter_list|(
name|String
name|dbParameters
parameter_list|)
block|{
name|this
operator|.
name|dbParameters
operator|=
name|dbParameters
expr_stmt|;
block|}
DECL|method|getDbPreferences ()
specifier|public
name|DBStringsPreferences
name|getDbPreferences
parameter_list|()
block|{
return|return
name|dbPreferences
return|;
block|}
DECL|method|setDbPreferences (DBStringsPreferences dbPreferences)
specifier|public
name|void
name|setDbPreferences
parameter_list|(
name|DBStringsPreferences
name|dbPreferences
parameter_list|)
block|{
name|this
operator|.
name|dbPreferences
operator|=
name|dbPreferences
expr_stmt|;
block|}
block|}
end_class

end_unit

