begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: alver  * Date: Sep 1, 2005  * Time: 11:35:02 PM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
DECL|class|MarkedComparator
specifier|public
class|class
name|MarkedComparator
implements|implements
name|Comparator
argument_list|<
name|BibtexEntry
argument_list|>
block|{
DECL|field|next
specifier|final
name|Comparator
argument_list|<
name|BibtexEntry
argument_list|>
name|next
decl_stmt|;
DECL|method|MarkedComparator (Comparator<BibtexEntry> next)
specifier|public
name|MarkedComparator
parameter_list|(
name|Comparator
argument_list|<
name|BibtexEntry
argument_list|>
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (BibtexEntry e1, BibtexEntry e2)
specifier|public
name|int
name|compare
parameter_list|(
name|BibtexEntry
name|e1
parameter_list|,
name|BibtexEntry
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|==
name|e2
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|mrk1
init|=
name|Util
operator|.
name|isMarked
argument_list|(
name|e1
argument_list|)
decl_stmt|,
name|mrk2
init|=
name|Util
operator|.
name|isMarked
argument_list|(
name|e2
argument_list|)
decl_stmt|;
if|if
condition|(
name|mrk1
operator|==
name|mrk2
condition|)
block|{
return|return
operator|(
name|next
operator|!=
literal|null
condition|?
name|next
operator|.
name|compare
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
else|:
name|idCompare
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
name|mrk2
operator|-
name|mrk1
return|;
block|}
block|}
DECL|method|idCompare (BibtexEntry b1, BibtexEntry b2)
specifier|private
name|int
name|idCompare
parameter_list|(
name|BibtexEntry
name|b1
parameter_list|,
name|BibtexEntry
name|b2
parameter_list|)
block|{
return|return
operator|(
operator|(
name|b1
operator|.
name|getId
argument_list|()
operator|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|b2
operator|.
name|getId
argument_list|()
operator|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

