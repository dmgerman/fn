begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.wizard.auximport
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|auximport
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexString
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * LaTeX Aux to BibTeX Parser  *  * Extracts a subset of BibTeX entries from a BibDatabase that are included in an aux file.  */
end_comment

begin_class
DECL|class|AuxFileParser
specifier|public
class|class
name|AuxFileParser
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AuxFileParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TAG_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|TAG_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\(citation|abx@aux@cite)\\{(.+)\\}"
argument_list|)
decl_stmt|;
DECL|field|masterDatabase
specifier|private
name|BibDatabase
name|masterDatabase
decl_stmt|;
DECL|field|auxDatabase
specifier|private
name|BibDatabase
name|auxDatabase
decl_stmt|;
DECL|field|uniqueKeys
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|uniqueKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|unresolvedKeys
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|unresolvedKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nestedAuxCount
specifier|private
name|int
name|nestedAuxCount
decl_stmt|;
DECL|field|crossRefEntriesCount
specifier|private
name|int
name|crossRefEntriesCount
decl_stmt|;
comment|/**      * Generates a database based on the given aux file and BibTeX database      *      * @param auxFile Path to the LaTeX aux file      * @param database BibTeX database      */
DECL|method|AuxFileParser (String auxFile, BibDatabase database)
specifier|public
name|AuxFileParser
parameter_list|(
name|String
name|auxFile
parameter_list|,
name|BibDatabase
name|database
parameter_list|)
block|{
name|auxDatabase
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
name|masterDatabase
operator|=
name|database
expr_stmt|;
name|parseAuxFile
argument_list|(
name|auxFile
argument_list|)
expr_stmt|;
name|resolveTags
argument_list|()
expr_stmt|;
block|}
DECL|method|getGeneratedBibDatabase ()
specifier|public
name|BibDatabase
name|getGeneratedBibDatabase
parameter_list|()
block|{
return|return
name|auxDatabase
return|;
block|}
DECL|method|getUnresolvedKeys ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getUnresolvedKeys
parameter_list|()
block|{
return|return
name|unresolvedKeys
return|;
block|}
DECL|method|getFoundKeysInAux ()
specifier|public
name|int
name|getFoundKeysInAux
parameter_list|()
block|{
return|return
name|uniqueKeys
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getResolvedKeysCount ()
specifier|public
name|int
name|getResolvedKeysCount
parameter_list|()
block|{
return|return
name|auxDatabase
operator|.
name|getEntryCount
argument_list|()
operator|-
name|crossRefEntriesCount
return|;
block|}
DECL|method|getUnresolvedKeysCount ()
specifier|public
name|int
name|getUnresolvedKeysCount
parameter_list|()
block|{
return|return
name|unresolvedKeys
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Query the number of extra entries pulled in due to crossrefs from other entries.      *      * @return The number of additional entries pulled in due to crossref      */
DECL|method|getCrossRefEntriesCount ()
specifier|public
name|int
name|getCrossRefEntriesCount
parameter_list|()
block|{
return|return
name|crossRefEntriesCount
return|;
block|}
comment|/**      * Prints parsing statistics      *      * @param includeMissingEntries      * @return      */
DECL|method|getInformation (boolean includeMissingEntries)
specifier|public
name|String
name|getInformation
parameter_list|(
name|boolean
name|includeMissingEntries
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"keys_in_database"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|masterDatabase
operator|.
name|getEntryCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"found_in_aux_file"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|getFoundKeysInAux
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"resolved"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|getResolvedKeysCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"not_found"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|getUnresolvedKeysCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"crossreferenced entries included"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|getCrossRefEntriesCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeMissingEntries
operator|&&
operator|(
name|getUnresolvedKeysCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|String
name|entry
range|:
name|unresolvedKeys
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|entry
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nestedAuxCount
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"nested_aux_files"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|nestedAuxCount
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*      * parseAuxFile read the Aux file and fill up some intern data structures. Nested aux files (latex \\include)      * supported!      *      *     // found at comp.text.tex      //> Can anyone tell be the information held within a .aux file?  Is there a      //> specific format to this file?      //      // I don't think there is a particular format. Every package, class      // or document can write to the aux file. The aux file consists of LaTeX macros      // and is read at the \begin{document} and again at the \end{document}.      //      // It usually contains information about existing labels      //  \\newlabel{sec:Intro}{{1}{1}}      // and citations      //  \citation{hiri:conv:1993}      // and macros to write information to other files (like toc, lof or lot files)      //  \@writefile{toc}{\contentsline {section}{\numberline      // {1}Intro}{1}}      // but as I said, there can be a lot more       // aux file :      //      // \\citation{x}  x = used reference of bibtex library entry      //      // \\@input{x}  x = nested aux file      //      // the \\bibdata{x} directive contains information about the      // bibtex library file -> x = name of bib file      //      // \\bibcite{x}{y}      //   x is a label for an item and y is the index in bibliography      * @param filename String : Path to LatexAuxFile      * @return boolean, true = no error occurs      */
DECL|method|parseAuxFile (String filename)
specifier|private
name|boolean
name|parseAuxFile
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
comment|// regular expressions
name|Matcher
name|matcher
decl_stmt|;
comment|// file list, used for nested aux files
name|List
argument_list|<
name|String
argument_list|>
name|fileList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|fileList
operator|.
name|add
argument_list|(
name|filename
argument_list|)
expr_stmt|;
comment|// get the file path
name|File
name|dummy
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|dummy
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|path
operator|+
name|File
operator|.
name|separator
expr_stmt|;
block|}
name|nestedAuxCount
operator|=
operator|-
literal|1
expr_stmt|;
comment|// count only the nested reads
comment|// index of current file in list
name|int
name|fileIndex
init|=
literal|0
decl_stmt|;
comment|// while condition
name|boolean
name|cont
decl_stmt|;
while|while
condition|(
name|fileIndex
operator|<
name|fileList
operator|.
name|size
argument_list|()
condition|)
block|{
name|String
name|fName
init|=
name|fileList
operator|.
name|get
argument_list|(
name|fileIndex
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|fName
argument_list|)
argument_list|)
init|)
block|{
name|cont
operator|=
literal|true
expr_stmt|;
while|while
condition|(
name|cont
condition|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|maybeLine
decl_stmt|;
try|try
block|{
name|maybeLine
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|maybeLine
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maybeLine
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|maybeLine
operator|.
name|get
argument_list|()
decl_stmt|;
name|matcher
operator|=
name|TAG_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
expr_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
comment|// extract the bibtex-key(s) XXX from \citation{XXX} string
name|int
name|len
init|=
name|matcher
operator|.
name|end
argument_list|()
operator|-
name|matcher
operator|.
name|start
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|11
condition|)
block|{
name|String
name|str
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// could be an comma separated list of keys
name|String
index|[]
name|keys
init|=
name|str
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dummyStr
range|:
name|keys
control|)
block|{
comment|// delete all unnecessary blanks and save key into an set
name|uniqueKeys
operator|.
name|add
argument_list|(
name|dummyStr
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// try to find a nested aux file
name|int
name|index
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|"\\@input{"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|int
name|start
init|=
name|index
operator|+
literal|8
decl_stmt|;
name|int
name|end
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|,
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|>
name|start
condition|)
block|{
name|String
name|str
init|=
name|path
operator|+
name|line
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|8
argument_list|,
name|end
argument_list|)
decl_stmt|;
comment|// if filename already in file list
if|if
condition|(
operator|!
name|fileList
operator|.
name|contains
argument_list|(
name|str
argument_list|)
condition|)
block|{
name|fileList
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
comment|// insert file into file list
block|}
block|}
block|}
block|}
else|else
block|{
name|cont
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|nestedAuxCount
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Cannot locate input file!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem opening file!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|fileIndex
operator|++
expr_stmt|;
comment|// load next file
block|}
return|return
literal|true
return|;
block|}
comment|/*      * Try to find an equivalent BibTeX entry inside the reference database for all keys inside the aux file.      */
DECL|method|resolveTags ()
specifier|private
name|void
name|resolveTags
parameter_list|()
block|{
name|auxDatabase
operator|=
operator|new
name|BibDatabase
argument_list|()
expr_stmt|;
name|unresolvedKeys
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// for all bibtex keys (found in aux-file) try to find an equivalent
comment|// entry into reference database
for|for
control|(
name|String
name|key
range|:
name|uniqueKeys
control|)
block|{
name|BibEntry
name|entry
init|=
name|masterDatabase
operator|.
name|getEntryByKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|unresolvedKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// Check if the entry we just found references another entry which
comment|// we don't already have in our list of entries to include. If so,
comment|// pull in that entry as well:
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"crossref"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|crossref
lambda|->
block|{
if|if
condition|(
operator|!
name|uniqueKeys
operator|.
name|contains
argument_list|(
name|crossref
argument_list|)
condition|)
block|{
name|BibEntry
name|refEntry
init|=
name|masterDatabase
operator|.
name|getEntryByKey
argument_list|(
name|crossref
argument_list|)
decl_stmt|;
if|if
condition|(
name|refEntry
operator|==
literal|null
condition|)
block|{
name|unresolvedKeys
operator|.
name|add
argument_list|(
name|crossref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|insertEntry
argument_list|(
name|refEntry
argument_list|)
expr_stmt|;
name|crossRefEntriesCount
operator|++
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|auxDatabase
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|copyDatabaseConfiguration
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      *  Copy the database's configuration, i.e., preamble and strings.      */
DECL|method|copyDatabaseConfiguration ()
specifier|private
name|void
name|copyDatabaseConfiguration
parameter_list|()
block|{
name|auxDatabase
operator|.
name|setPreamble
argument_list|(
name|masterDatabase
operator|.
name|getPreamble
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|masterDatabase
operator|.
name|getStringKeySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|BibtexString
name|string
init|=
name|masterDatabase
operator|.
name|getString
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|auxDatabase
operator|.
name|addString
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Insert a clone of the given entry.      * The clone is given a new unique ID.      */
DECL|method|insertEntry (BibEntry entry)
specifier|private
name|void
name|insertEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|BibEntry
name|clonedEntry
init|=
operator|(
name|BibEntry
operator|)
name|entry
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clonedEntry
operator|.
name|setId
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|auxDatabase
operator|.
name|insertEntry
argument_list|(
name|clonedEntry
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

