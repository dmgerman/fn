begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2004 R. Nagel  All programs in this directory and subdirectories are published under the GNU General Public License as described below.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  Further information about the GNU GPL is available at: http://www.gnu.org/copyleft/gpl.ja.html  */
end_comment

begin_comment
comment|// created by : r.nagel 09.12.2004
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// function : a class for wrapping a IntegrityCheck message
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// modified :
end_comment

begin_package
DECL|package|net.sf.jabref.wizard.integrity
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|wizard
operator|.
name|integrity
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_class
DECL|class|IntegrityMessage
specifier|public
class|class
name|IntegrityMessage
implements|implements
name|Cloneable
block|{
comment|// Hints and Infos< 1000 :-)
specifier|public
specifier|static
specifier|final
name|int
DECL|field|GENERIC_HINT
name|GENERIC_HINT
init|=
literal|1
decl_stmt|,
DECL|field|UPPER_AND_LOWER_HINT
name|UPPER_AND_LOWER_HINT
init|=
literal|10
decl_stmt|,
DECL|field|FOUR_DIGITS_HINT
name|FOUR_DIGITS_HINT
init|=
literal|11
decl_stmt|;
comment|//> 1000 Warnings
specifier|public
specifier|static
specifier|final
name|int
DECL|field|GENERIC_WARNING
name|GENERIC_WARNING
init|=
literal|1001
decl_stmt|,
DECL|field|NAME_START_WARNING
name|NAME_START_WARNING
init|=
literal|1010
decl_stmt|,
DECL|field|NAME_END_WARNING
name|NAME_END_WARNING
init|=
literal|1011
decl_stmt|,
DECL|field|NAME_SEMANTIC_WARNING
name|NAME_SEMANTIC_WARNING
init|=
literal|1012
decl_stmt|;
comment|//> 2000 Failure Messages
specifier|public
specifier|static
specifier|final
name|int
DECL|field|UNKNONW_FAILURE
name|UNKNONW_FAILURE
init|=
literal|2001
decl_stmt|,
DECL|field|UNEXPECTED_CLOSING_BRACE_FAILURE
name|UNEXPECTED_CLOSING_BRACE_FAILURE
init|=
literal|2010
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|FULL_MODE
name|FULL_MODE
init|=
literal|1
decl_stmt|;
comment|// print with Bibtex Entry
DECL|field|SINLGE_MODE
specifier|public
specifier|static
specifier|final
name|int
name|SINLGE_MODE
init|=
literal|2
comment|// print only Message
decl_stmt|;
DECL|field|printMode
specifier|private
specifier|static
name|int
name|printMode
init|=
name|IntegrityMessage
operator|.
name|SINLGE_MODE
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|int
name|type
decl_stmt|;
DECL|field|entry
specifier|private
specifier|final
name|BibtexEntry
name|entry
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|additionalInfo
specifier|private
specifier|final
name|Object
name|additionalInfo
decl_stmt|;
DECL|field|msg
specifier|private
specifier|final
name|String
name|msg
decl_stmt|;
DECL|field|fixed
specifier|private
name|boolean
name|fixed
decl_stmt|;
comment|// the user has changed sometings on BibtexEntry
DECL|method|setPrintMode (int newMode)
specifier|public
specifier|static
specifier|synchronized
name|void
name|setPrintMode
parameter_list|(
name|int
name|newMode
parameter_list|)
block|{
name|IntegrityMessage
operator|.
name|printMode
operator|=
name|newMode
expr_stmt|;
block|}
DECL|method|IntegrityMessage (int pType, BibtexEntry pEntry, String pFieldName, Object pAdditionalInfo)
specifier|public
name|IntegrityMessage
parameter_list|(
name|int
name|pType
parameter_list|,
name|BibtexEntry
name|pEntry
parameter_list|,
name|String
name|pFieldName
parameter_list|,
name|Object
name|pAdditionalInfo
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|pType
expr_stmt|;
name|this
operator|.
name|entry
operator|=
name|pEntry
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|pFieldName
expr_stmt|;
name|this
operator|.
name|additionalInfo
operator|=
name|pAdditionalInfo
expr_stmt|;
name|fixed
operator|=
literal|false
expr_stmt|;
name|msg
operator|=
name|getMessage
argument_list|()
expr_stmt|;
block|}
DECL|method|getMessage ()
specifier|private
name|String
name|getMessage
parameter_list|()
block|{
name|String
name|back
init|=
name|Globals
operator|.
name|getIntegrityMessage
argument_list|(
literal|"ITEXT_"
operator|+
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|back
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|fieldName
operator|!=
literal|null
operator|)
condition|)
block|{
name|back
operator|=
name|back
operator|.
name|replaceAll
argument_list|(
literal|"\\$FIELD"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
return|return
name|back
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|back
init|=
name|msg
decl_stmt|;
if|if
condition|(
name|IntegrityMessage
operator|.
name|printMode
operator|==
name|IntegrityMessage
operator|.
name|FULL_MODE
condition|)
block|{
name|back
operator|=
literal|"["
operator|+
name|entry
operator|.
name|getCiteKey
argument_list|()
operator|+
literal|"] "
operator|+
name|msg
expr_stmt|;
block|}
return|return
name|back
return|;
block|}
DECL|method|getType ()
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getEntry ()
specifier|public
name|BibtexEntry
name|getEntry
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
DECL|method|getAdditionalInfo ()
specifier|public
name|Object
name|getAdditionalInfo
parameter_list|()
block|{
return|return
name|additionalInfo
return|;
block|}
DECL|method|getFixed ()
specifier|public
name|boolean
name|getFixed
parameter_list|()
block|{
return|return
name|fixed
return|;
block|}
DECL|method|setFixed (boolean pFixed)
specifier|public
name|void
name|setFixed
parameter_list|(
name|boolean
name|pFixed
parameter_list|)
block|{
name|this
operator|.
name|fixed
operator|=
name|pFixed
expr_stmt|;
block|}
block|}
end_class

end_unit

