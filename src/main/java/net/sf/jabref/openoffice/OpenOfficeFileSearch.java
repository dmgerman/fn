begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.openoffice
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationRepository
import|;
end_import

begin_class
DECL|class|OpenOfficeFileSearch
specifier|public
class|class
name|OpenOfficeFileSearch
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OpenOfficeFileSearch
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|STYLE_FILE_EXTENSION
specifier|private
specifier|static
specifier|final
name|String
name|STYLE_FILE_EXTENSION
init|=
literal|".jstyle"
decl_stmt|;
DECL|field|repository
specifier|private
specifier|final
name|JournalAbbreviationRepository
name|repository
decl_stmt|;
DECL|method|OpenOfficeFileSearch (JournalAbbreviationRepository repository)
specifier|public
name|OpenOfficeFileSearch
parameter_list|(
name|JournalAbbreviationRepository
name|repository
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
comment|/**      * Search for Program files directory.      * @return the File pointing to the Program files directory, or null if not found.      *   Since we are not including a library for Windows integration, this method can't      *   find the Program files dir in localized Windows installations.      */
DECL|method|findWindowsProgramFilesDir ()
specifier|public
name|List
argument_list|<
name|File
argument_list|>
name|findWindowsProgramFilesDir
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sourceList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dirList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 64-bits first
name|String
name|progFiles
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"ProgramFiles"
argument_list|)
decl_stmt|;
if|if
condition|(
name|progFiles
operator|!=
literal|null
condition|)
block|{
name|sourceList
operator|.
name|add
argument_list|(
name|progFiles
argument_list|)
expr_stmt|;
block|}
comment|// Then 32-bits
name|progFiles
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"ProgramFiles(x86)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|progFiles
operator|!=
literal|null
condition|)
block|{
name|sourceList
operator|.
name|add
argument_list|(
name|progFiles
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|rootPath
range|:
name|sourceList
control|)
block|{
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
name|File
index|[]
name|dirs
init|=
name|root
operator|.
name|listFiles
argument_list|(
name|File
operator|::
name|isDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirs
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|dirList
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dirList
return|;
block|}
comment|/**      * If the string dir indicates a file, parse it and add it to the list of styles if      * successful. If the string dir indicates a directory, parse all files looking like      * style files, and add them. The parameter recurse determines whether we should      * recurse into subdirectories.      * @param dir the directory or file to handle.      * @param recurse true indicates that we should recurse into subdirectories.      * @param encoding      */
DECL|method|addStyles (String dir, boolean recurse, Charset encoding, List<OOBibStyle> styles)
specifier|public
name|void
name|addStyles
parameter_list|(
name|String
name|dir
parameter_list|,
name|boolean
name|recurse
parameter_list|,
name|Charset
name|encoding
parameter_list|,
name|List
argument_list|<
name|OOBibStyle
argument_list|>
name|styles
parameter_list|)
block|{
name|File
name|dirF
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirF
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|fileArray
init|=
name|dirF
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|files
decl_stmt|;
if|if
condition|(
name|fileArray
operator|==
literal|null
condition|)
block|{
name|files
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|files
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fileArray
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// If the file looks like a style file, parse it:
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|STYLE_FILE_EXTENSION
argument_list|)
operator|)
condition|)
block|{
name|addSingleFile
argument_list|(
name|file
argument_list|,
name|encoding
argument_list|,
name|styles
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
operator|&&
name|recurse
condition|)
block|{
comment|// If the file is a directory, and we should recurse, do:
name|addStyles
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|recurse
argument_list|,
name|encoding
argument_list|,
name|styles
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// The file wasn't a directory, so we simply parse it:
name|addSingleFile
argument_list|(
name|dirF
argument_list|,
name|encoding
argument_list|,
name|styles
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parse a single file, and add it to the list of styles if parse was successful.      * @param file the file to parse.      * @param encoding the encoding of the style file      * @param styles the list to add the style to      */
DECL|method|addSingleFile (File file, Charset encoding, List<OOBibStyle> styles)
specifier|private
name|void
name|addSingleFile
parameter_list|(
name|File
name|file
parameter_list|,
name|Charset
name|encoding
parameter_list|,
name|List
argument_list|<
name|OOBibStyle
argument_list|>
name|styles
parameter_list|)
block|{
try|try
block|{
name|OOBibStyle
name|style
init|=
operator|new
name|OOBibStyle
argument_list|(
name|file
argument_list|,
name|repository
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
comment|// Check if the parse was successful before adding it:
if|if
condition|(
name|style
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|styles
operator|.
name|contains
argument_list|(
name|style
argument_list|)
condition|)
block|{
name|styles
operator|.
name|add
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Unable to read style file: '"
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

