begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.openoffice
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonBarBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|exporter
operator|.
name|layout
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|exporter
operator|.
name|layout
operator|.
name|LayoutHelper
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|external
operator|.
name|push
operator|.
name|PushToApplication
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|AbstractWorker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|BrowseAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinds
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibtexDatabase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This test panel can be opened by reflection from JabRef, passing the JabRefFrame as an  * argument to the start() method. It displays buttons for testing interaction functions  * between JabRef and OpenOffice.  */
end_comment

begin_class
DECL|class|OpenOfficePanel
specifier|public
class|class
name|OpenOfficePanel
extends|extends
name|AbstractWorker
implements|implements
name|PushToApplication
block|{
DECL|field|defaultAuthorYearStylePath
specifier|public
specifier|static
specifier|final
name|String
name|defaultAuthorYearStylePath
init|=
literal|"/resource/openoffice/default_authoryear.jstyle"
decl_stmt|;
DECL|field|defaultNumericalStylePath
specifier|public
specifier|static
specifier|final
name|String
name|defaultNumericalStylePath
init|=
literal|"/resource/openoffice/default_numerical.jstyle"
decl_stmt|;
comment|// This field indicates whether the running JabRef supports post formatters in Layout:
DECL|field|postLayoutSupported
specifier|public
specifier|static
name|boolean
name|postLayoutSupported
decl_stmt|;
static|static
block|{
name|OpenOfficePanel
operator|.
name|postLayoutSupported
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|Layout
name|l
init|=
operator|new
name|LayoutHelper
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|getLayoutFromText
argument_list|(
name|Globals
operator|.
name|FORMATTER_PACKAGE
argument_list|)
decl_stmt|;
name|l
operator|.
name|setPostFormatter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodError
name|ex
parameter_list|)
block|{
name|OpenOfficePanel
operator|.
name|postLayoutSupported
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// Ignored
block|}
block|}
DECL|field|comp
specifier|private
name|OOPanel
name|comp
decl_stmt|;
DECL|field|diag
specifier|private
name|JDialog
name|diag
decl_stmt|;
specifier|private
specifier|static
name|JButton
DECL|field|connect
name|connect
decl_stmt|;
DECL|field|manualConnect
specifier|private
specifier|static
name|JButton
name|manualConnect
decl_stmt|;
DECL|field|selectDocument
specifier|private
specifier|static
name|JButton
name|selectDocument
decl_stmt|;
DECL|field|setStyleFile
specifier|private
specifier|static
specifier|final
name|JButton
name|setStyleFile
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select style"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntries
specifier|private
specifier|static
specifier|final
name|JButton
name|pushEntries
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntriesInt
specifier|private
specifier|static
specifier|final
name|JButton
name|pushEntriesInt
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite in-text"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntriesEmpty
specifier|private
specifier|static
specifier|final
name|JButton
name|pushEntriesEmpty
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Insert empty citation"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntriesAdvanced
specifier|private
specifier|static
specifier|final
name|JButton
name|pushEntriesAdvanced
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite special"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|focus
specifier|private
specifier|static
specifier|final
name|JButton
name|focus
init|=
operator|new
name|JButton
argument_list|(
literal|"Focus OO document"
argument_list|)
decl_stmt|;
DECL|field|update
specifier|private
specifier|static
name|JButton
name|update
decl_stmt|;
DECL|field|insertFullRef
specifier|private
specifier|static
specifier|final
name|JButton
name|insertFullRef
init|=
operator|new
name|JButton
argument_list|(
literal|"Insert reference text"
argument_list|)
decl_stmt|;
DECL|field|merge
specifier|private
specifier|static
specifier|final
name|JButton
name|merge
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Merge citations"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|manageCitations
specifier|private
specifier|static
specifier|final
name|JButton
name|manageCitations
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Manage citations"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|settingsB
specifier|private
specifier|static
specifier|final
name|JButton
name|settingsB
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Settings"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|help
specifier|private
specifier|static
specifier|final
name|JButton
name|help
init|=
operator|new
name|HelpAction
argument_list|(
name|GUIGlobals
operator|.
name|helpDiag
argument_list|,
literal|"OpenOfficeIntegration.html"
argument_list|)
operator|.
name|getIconButton
argument_list|()
decl_stmt|;
DECL|field|test
specifier|private
specifier|static
specifier|final
name|JButton
name|test
init|=
operator|new
name|JButton
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
DECL|field|inPar
specifier|private
name|JRadioButton
name|inPar
decl_stmt|;
DECL|field|inText
specifier|private
name|JRadioButton
name|inText
decl_stmt|;
DECL|field|settings
specifier|private
name|JPanel
name|settings
decl_stmt|;
DECL|field|styleFile
specifier|private
specifier|static
name|String
name|styleFile
decl_stmt|;
DECL|field|ooBase
specifier|private
specifier|static
name|OOBibBase
name|ooBase
decl_stmt|;
DECL|field|frame
specifier|private
specifier|static
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|manager
specifier|private
name|SidePaneManager
name|manager
decl_stmt|;
DECL|field|style
specifier|private
specifier|static
name|OOBibStyle
name|style
decl_stmt|;
DECL|field|useDefaultAuthoryearStyle
specifier|private
specifier|static
name|boolean
name|useDefaultAuthoryearStyle
decl_stmt|;
DECL|field|useDefaultNumericalStyle
specifier|private
specifier|static
name|boolean
name|useDefaultNumericalStyle
decl_stmt|;
DECL|field|styleDialog
specifier|private
name|StyleSelectDialog
name|styleDialog
decl_stmt|;
DECL|field|dialogOkPressed
specifier|private
name|boolean
name|dialogOkPressed
decl_stmt|;
DECL|field|autoDetected
specifier|private
name|boolean
name|autoDetected
decl_stmt|;
DECL|field|sOffice
specifier|private
name|String
name|sOffice
decl_stmt|;
DECL|field|connectException
specifier|private
name|Throwable
name|connectException
decl_stmt|;
DECL|field|instance
specifier|private
specifier|static
name|OpenOfficePanel
name|instance
decl_stmt|;
DECL|method|getInstance ()
specifier|public
specifier|static
name|OpenOfficePanel
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|OpenOfficePanel
operator|.
name|instance
operator|==
literal|null
condition|)
block|{
name|OpenOfficePanel
operator|.
name|instance
operator|=
operator|new
name|OpenOfficePanel
argument_list|()
expr_stmt|;
block|}
return|return
name|OpenOfficePanel
operator|.
name|instance
return|;
block|}
DECL|method|OpenOfficePanel ()
specifier|private
name|OpenOfficePanel
parameter_list|()
block|{
name|Icon
name|connectImage
init|=
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CONNECT_OPEN_OFFICE
operator|.
name|getSmallIcon
argument_list|()
decl_stmt|;
name|OpenOfficePanel
operator|.
name|connect
operator|=
operator|new
name|JButton
argument_list|(
name|connectImage
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|manualConnect
operator|=
operator|new
name|JButton
argument_list|(
name|connectImage
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|connect
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connect"
argument_list|)
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|manualConnect
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Manual connect"
argument_list|)
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|selectDocument
operator|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|OPEN
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|selectDocument
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select Writer document"
argument_list|)
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|update
operator|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|REFRESH
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|update
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Sync OO bibliography"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooPath"
argument_list|,
literal|"C:\\Program Files\\OpenOffice.org 3"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooExecutablePath"
argument_list|,
literal|"C:\\Program Files\\OpenOffice.org 2.3\\program\\soffice.exe"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooJarsPath"
argument_list|,
literal|"C:\\Program Files\\OpenOffice.org 2.3\\program\\classes"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooExecutablePath"
argument_list|,
literal|"/Applications/OpenOffice.org.app/Contents/MacOS/soffice.bin"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooPath"
argument_list|,
literal|"/Applications/OpenOffice.org.app"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooJarsPath"
argument_list|,
literal|"/Applications/OpenOffice.org.app/Contents/basis-link"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Linux
comment|//Globals.prefs.putDefaultValue("ooPath", "/usr/lib/openoffice");
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooPath"
argument_list|,
literal|"/opt/openoffice.org3"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooExecutablePath"
argument_list|,
literal|"/usr/lib/openoffice/program/soffice"
argument_list|)
expr_stmt|;
comment|//Globals.prefs.putDefaultValue("ooJarsPath", "/usr/share/java/openoffice");
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooJarsPath"
argument_list|,
literal|"/opt/openoffice.org/basis3.0"
argument_list|)
expr_stmt|;
block|}
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"connectToOO3"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|//Globals.prefs.putDefaultValue("ooStyleFileDirectories", System.getProperty("user.home")+";false");
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooStyleFileLastDir"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooInParCitation"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"syncOOWhenCiting"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"showOOPanel"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"useAllOpenBases"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooUseDefaultAuthoryearStyle"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooUseDefaultNumericalStyle"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooChooseStyleDirectly"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooDirectFile"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDefaultValue
argument_list|(
literal|"ooStyleDirectory"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|styleFile
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooBibliographyStyleFile"
argument_list|)
expr_stmt|;
block|}
DECL|method|getSidePaneComponent ()
specifier|public
name|SidePaneComponent
name|getSidePaneComponent
parameter_list|()
block|{
return|return
name|comp
return|;
block|}
DECL|method|init (JabRefFrame jrFrame, SidePaneManager spManager)
specifier|public
name|void
name|init
parameter_list|(
name|JabRefFrame
name|jrFrame
parameter_list|,
name|SidePaneManager
name|spManager
parameter_list|)
block|{
name|OpenOfficePanel
operator|.
name|frame
operator|=
name|jrFrame
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|spManager
expr_stmt|;
name|comp
operator|=
operator|new
name|OOPanel
argument_list|(
name|spManager
argument_list|,
name|IconTheme
operator|.
name|getImage
argument_list|(
literal|"openoffice"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"OpenOffice"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|initPanel
argument_list|()
expr_stmt|;
name|spManager
operator|.
name|register
argument_list|(
name|getName
argument_list|()
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getMenuItem ()
specifier|public
name|JMenuItem
name|getMenuItem
parameter_list|()
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"showOOPanel"
argument_list|)
condition|)
block|{
name|manager
operator|.
name|show
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JMenuItem
name|item
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"OpenOffice/LibreOffice connection"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|getImage
argument_list|(
literal|"openoffice"
argument_list|)
argument_list|)
decl_stmt|;
name|item
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|manager
operator|.
name|show
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|item
return|;
block|}
DECL|method|getShortcutKey ()
specifier|public
name|String
name|getShortcutKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|initPanel ()
specifier|private
name|void
name|initPanel
parameter_list|()
block|{
name|OpenOfficePanel
operator|.
name|useDefaultAuthoryearStyle
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"ooUseDefaultAuthoryearStyle"
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|useDefaultNumericalStyle
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"ooUseDefaultNumericalStyle"
argument_list|)
expr_stmt|;
name|Action
name|al
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|connect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|OpenOfficePanel
operator|.
name|connect
operator|.
name|addActionListener
argument_list|(
name|al
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|manualConnect
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|connect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|selectDocument
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select which open Writer document to work on"
argument_list|)
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|selectDocument
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|selectDocument
argument_list|()
expr_stmt|;
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connected to document"
argument_list|)
operator|+
literal|": "
operator|+
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|getCurrentDocumentTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|setStyleFile
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|styleDialog
operator|==
literal|null
condition|)
block|{
name|styleDialog
operator|=
operator|new
name|StyleSelectDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|OpenOfficePanel
operator|.
name|styleFile
argument_list|)
expr_stmt|;
block|}
name|styleDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|styleDialog
operator|.
name|isOkPressed
argument_list|()
condition|)
block|{
name|OpenOfficePanel
operator|.
name|useDefaultAuthoryearStyle
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"ooUseDefaultAuthoryearStyle"
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|useDefaultNumericalStyle
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"ooUseDefaultNumericalStyle"
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|styleFile
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooBibliographyStyleFile"
argument_list|)
expr_stmt|;
try|try
block|{
name|readStyleFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntries
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite selected entries"
argument_list|)
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntries
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|pushEntries
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesInt
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite selected entries with in-text citation"
argument_list|)
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesInt
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|pushEntries
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesEmpty
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Insert a citation without text (the entry will appear in the reference list)"
argument_list|)
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesEmpty
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|pushEntries
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesAdvanced
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite selected entries with extra information"
argument_list|)
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesAdvanced
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|pushEntries
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|focus
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|setFocus
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|update
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Ensure that the bibliography is up-to-date"
argument_list|)
argument_list|)
expr_stmt|;
name|Action
name|updateAction
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
try|try
block|{
if|if
condition|(
name|OpenOfficePanel
operator|.
name|style
operator|==
literal|null
condition|)
block|{
name|readStyleFile
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|OpenOfficePanel
operator|.
name|style
operator|.
name|ensureUpToDate
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must select either a valid style file, or use one of the default styles."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"No valid style file defined"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|updateSortedReferenceMarks
argument_list|()
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|BibtexDatabase
argument_list|>
name|databases
init|=
name|getBaseList
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
name|unresolvedKeys
init|=
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|refreshCiteMarkers
argument_list|(
name|databases
argument_list|,
name|OpenOfficePanel
operator|.
name|style
argument_list|)
decl_stmt|;
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|rebuildBibTextSection
argument_list|(
name|databases
argument_list|,
name|OpenOfficePanel
operator|.
name|style
argument_list|)
expr_stmt|;
comment|//ooBase.sync(frame.getCurrentBasePanel().database(), style);
if|if
condition|(
operator|!
name|unresolvedKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your OpenOffice document references the BibTeX key '%0', which could not be found in your current database."
argument_list|,
name|unresolvedKeys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to synchronize bibliography"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedCharacterFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedParagraphFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedParagraphFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionLostException
name|ex
parameter_list|)
block|{
name|showConnectionLostErrorMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BibtexEntryNotFoundException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your OpenOffice document references the BibTeX key '%0', which could not be found in your current database."
argument_list|,
name|ex
operator|.
name|getBibtexKey
argument_list|()
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to synchronize bibliography"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|OpenOfficePanel
operator|.
name|update
operator|.
name|addActionListener
argument_list|(
name|updateAction
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|insertFullRef
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|insertFullRefs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|merge
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Combine pairs of citations that are separated by spaces only"
argument_list|)
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|merge
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|combineCiteMarkers
argument_list|(
name|getBaseList
argument_list|()
argument_list|,
name|OpenOfficePanel
operator|.
name|style
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedCharacterFormatException
name|e
parameter_list|)
block|{
name|reportUndefinedCharacterFormat
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|settingsB
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|showSettingsPopup
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|manageCitations
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|CitationManager
name|cm
init|=
operator|new
name|CitationManager
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|OpenOfficePanel
operator|.
name|ooBase
argument_list|)
decl_stmt|;
name|cm
operator|.
name|showDialog
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|test
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
try|try
block|{
comment|//pushEntries(false, true, true);
comment|//ooBase.testFrameHandling();
comment|//ooBase.combineCiteMarkers(frame.getCurrentBasePanel().database(), style);
comment|//insertUsingBST();
comment|//ooBase.testFootnote();
comment|//ooBase.refreshCiteMarkers(frame.getCurrentBasePanel().database(), style);
comment|//ooBase.createBibTextSection(true);
comment|//ooBase.clearBibTextSectionContent();
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|selectDocument
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntries
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesInt
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesEmpty
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesAdvanced
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|focus
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|update
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|insertFullRef
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|merge
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|manageCitations
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|test
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|diag
operator|=
operator|new
name|JDialog
argument_list|(
operator|(
name|JFrame
operator|)
literal|null
argument_list|,
literal|"OpenOffice panel"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DefaultFormBuilder
name|b
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"fill:pref:grow"
argument_list|,
comment|//"p,0dlu,p,0dlu,p,0dlu,p,0dlu,p,0dlu,p,0dlu,p,0dlu,p,0dlu,p,0dlu,p,0dlu"));
literal|"p,p,p,p,p,p,p,p,p,p"
argument_list|)
argument_list|)
decl_stmt|;
comment|//ButtonBarBuilder bb = new ButtonBarBuilder();
name|DefaultFormBuilder
name|bb
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"fill:pref:grow, 1dlu, fill:pref:grow, 1dlu, fill:pref:grow, "
operator|+
literal|"1dlu, fill:pref:grow, 1dlu, fill:pref:grow"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|bb
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|connect
argument_list|)
expr_stmt|;
name|bb
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|manualConnect
argument_list|)
expr_stmt|;
name|bb
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|selectDocument
argument_list|)
expr_stmt|;
name|bb
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|update
argument_list|)
expr_stmt|;
name|bb
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|help
argument_list|)
expr_stmt|;
comment|//b.append(connect);
comment|//b.append(manualConnect);
comment|//b.append(selectDocument);
name|b
operator|.
name|append
argument_list|(
name|bb
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|setStyleFile
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|pushEntries
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|pushEntriesInt
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|pushEntriesAdvanced
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|pushEntriesEmpty
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|merge
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|manageCitations
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|OpenOfficePanel
operator|.
name|settingsB
argument_list|)
expr_stmt|;
comment|//b.append(focus);
comment|//b.append(update);
comment|//b.append(insertFullRef);
comment|//b.append(test);
comment|//diag.getContentPane().add(b.getPanel(), BorderLayout.CENTER);
name|JPanel
name|content
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|comp
operator|.
name|setContentContainer
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|content
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|add
argument_list|(
name|b
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|getTabbedPane
argument_list|()
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getKey
argument_list|(
name|KeyBinds
operator|.
name|REFRESH_OO
argument_list|)
argument_list|,
literal|"Refresh OO"
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|getTabbedPane
argument_list|()
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"Refresh OO"
argument_list|,
name|updateAction
argument_list|)
expr_stmt|;
comment|//diag.pack();
comment|//diag.setVisible(true);
block|}
DECL|method|getBaseList ()
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|BibtexDatabase
argument_list|>
name|getBaseList
parameter_list|()
block|{
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|BibtexDatabase
argument_list|>
name|databases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useAllOpenBases"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|getBasePanelCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|databases
operator|.
name|add
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|database
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|databases
operator|.
name|add
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|database
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|databases
return|;
block|}
DECL|method|connect (boolean auto)
specifier|private
name|void
name|connect
parameter_list|(
name|boolean
name|auto
parameter_list|)
block|{
comment|/*if (ooBase != null) {             try {                 java.util.List<XTextDocument> list = ooBase.getTextDocuments();                 // TODO: how to find the title of the documents?             } catch (Exception ex) {                 ex.printStackTrace();             }             return;         }*/
name|String
name|unoilDir
decl_stmt|;
name|String
name|ooBaseDirectory
decl_stmt|;
if|if
condition|(
name|auto
condition|)
block|{
name|AutoDetectPaths
name|adp
init|=
operator|new
name|AutoDetectPaths
argument_list|(
name|diag
argument_list|)
decl_stmt|;
if|if
condition|(
name|adp
operator|.
name|runAutodetection
argument_list|()
condition|)
block|{
name|autoDetected
operator|=
literal|true
expr_stmt|;
name|dialogOkPressed
operator|=
literal|true
expr_stmt|;
name|diag
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|adp
operator|.
name|cancelled
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|diag
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetection failed"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetection failed"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|autoDetected
condition|)
block|{
return|return;
block|}
comment|// User clicked Auto, and the system successfully detected paths:
name|unoilDir
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooUnoilPath"
argument_list|)
expr_stmt|;
name|ooBaseDirectory
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooJurtPath"
argument_list|)
expr_stmt|;
name|sOffice
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooExecutablePath"
argument_list|)
expr_stmt|;
comment|//System.out.println("unoilDir: "+unoilDir);
comment|//System.out.println("ooBaseDir: "+ooBaseDirectory);
comment|//System.out.println("soffice: "+sOffice);
block|}
else|else
block|{
comment|// Manual connect
name|showConnectDialog
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dialogOkPressed
condition|)
block|{
return|return;
block|}
name|String
name|ooPath
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooPath"
argument_list|)
decl_stmt|;
name|String
name|ooJars
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooJarsPath"
argument_list|)
decl_stmt|;
name|sOffice
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooExecutablePath"
argument_list|)
expr_stmt|;
name|boolean
name|openOffice3
init|=
literal|true
decl_stmt|;
comment|//Globals.prefs.getBoolean("connectToOO3");
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
comment|//if (openOffice3) {
name|unoilDir
operator|=
name|ooPath
operator|+
literal|"\\Basis\\program\\classes"
expr_stmt|;
name|ooBaseDirectory
operator|=
name|ooPath
operator|+
literal|"\\URE\\java"
expr_stmt|;
name|sOffice
operator|=
name|ooPath
operator|+
literal|"\\program\\soffice.exe"
expr_stmt|;
comment|//}
block|}
elseif|else
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
comment|//if (openOffice3) {
name|sOffice
operator|=
name|ooPath
operator|+
literal|"/Contents/MacOS/soffice.bin"
expr_stmt|;
name|ooBaseDirectory
operator|=
name|ooPath
operator|+
literal|"/Contents/basis-link/ure-link/share/java"
expr_stmt|;
name|unoilDir
operator|=
name|ooPath
operator|+
literal|"/Contents/basis-link/program/classes"
expr_stmt|;
comment|//}
block|}
else|else
block|{
comment|// Linux:
comment|//if (openOffice3) {
name|unoilDir
operator|=
name|ooJars
operator|+
literal|"/program/classes"
expr_stmt|;
name|ooBaseDirectory
operator|=
name|ooJars
operator|+
literal|"/ure-link/share/java"
expr_stmt|;
comment|//sOffice = ooPath+"/program/soffice";
comment|//}
block|}
block|}
comment|// Add OO jars to the classpath:
try|try
block|{
name|File
index|[]
name|jarFiles
init|=
operator|new
name|File
index|[]
block|{
operator|new
name|File
argument_list|(
name|unoilDir
argument_list|,
literal|"unoil.jar"
argument_list|)
block|,
operator|new
name|File
argument_list|(
name|ooBaseDirectory
argument_list|,
literal|"jurt.jar"
argument_list|)
block|,
operator|new
name|File
argument_list|(
name|ooBaseDirectory
argument_list|,
literal|"juh.jar"
argument_list|)
block|,
operator|new
name|File
argument_list|(
name|ooBaseDirectory
argument_list|,
literal|"ridl.jar"
argument_list|)
block|}
decl_stmt|;
name|URL
index|[]
name|jarList
init|=
operator|new
name|URL
index|[
name|jarFiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jarList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|jarFiles
index|[
name|i
index|]
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"File not found: "
operator|+
name|jarFiles
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
name|jarList
index|[
name|i
index|]
operator|=
name|jarFiles
index|[
name|i
index|]
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
name|OpenOfficePanel
operator|.
name|addURL
argument_list|(
name|jarList
argument_list|)
expr_stmt|;
comment|// Show progress dialog:
specifier|final
name|JDialog
name|progDiag
init|=
operator|new
name|AutoDetectPaths
argument_list|(
name|diag
argument_list|)
operator|.
name|showProgressDialog
argument_list|(
name|diag
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connecting"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please wait..."
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|getWorker
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Do the actual connection, using Spin to get off the EDT.
name|progDiag
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|diag
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|OpenOfficePanel
operator|.
name|ooBase
operator|==
literal|null
condition|)
block|{
throw|throw
name|connectException
throw|;
block|}
if|if
condition|(
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|isConnectedToDocument
argument_list|()
condition|)
block|{
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connected to document"
argument_list|)
operator|+
literal|": "
operator|+
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|getCurrentDocumentTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Enable actions that depend on Connect:
name|OpenOfficePanel
operator|.
name|selectDocument
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntries
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesInt
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesEmpty
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|pushEntriesAdvanced
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|focus
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|update
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|insertFullRef
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|merge
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|manageCitations
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|test
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|UnsatisfiedLinkError
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to connect. One possible reason is that JabRef "
operator|+
literal|"and OpenOffice/LibreOffice are not both running in either 32 bit mode or 64 bit mode."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not connect to running OpenOffice.\n"
operator|+
literal|"Make sure you have installed OpenOffice with Java support.\nIf connecting manually, please verify program and library paths.\n"
operator|+
literal|"\nError message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Connect:
name|OpenOfficePanel
operator|.
name|ooBase
operator|=
operator|new
name|OOBibBase
argument_list|(
name|sOffice
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|OpenOfficePanel
operator|.
name|ooBase
operator|=
literal|null
expr_stmt|;
name|connectException
operator|=
name|e
expr_stmt|;
comment|//JOptionPane.showMessageDialog(frame, Globals.lang("Unable to connect"));
block|}
block|}
comment|/**      * Read the style file. Record the last modified time of the file.      * @throws Exception      */
DECL|method|readStyleFile ()
specifier|private
name|void
name|readStyleFile
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|OpenOfficePanel
operator|.
name|useDefaultAuthoryearStyle
condition|)
block|{
name|URL
name|defPath
init|=
name|JabRef
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|OpenOfficePanel
operator|.
name|defaultAuthorYearStylePath
argument_list|)
decl_stmt|;
name|Reader
name|r
init|=
operator|new
name|InputStreamReader
argument_list|(
name|defPath
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|OpenOfficePanel
operator|.
name|style
operator|=
operator|new
name|OOBibStyle
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OpenOfficePanel
operator|.
name|useDefaultNumericalStyle
condition|)
block|{
name|URL
name|defPath
init|=
name|JabRef
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|OpenOfficePanel
operator|.
name|defaultNumericalStylePath
argument_list|)
decl_stmt|;
name|Reader
name|r
init|=
operator|new
name|InputStreamReader
argument_list|(
name|defPath
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|OpenOfficePanel
operator|.
name|style
operator|=
operator|new
name|OOBibStyle
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|OpenOfficePanel
operator|.
name|style
operator|=
operator|new
name|OOBibStyle
argument_list|(
operator|new
name|File
argument_list|(
name|OpenOfficePanel
operator|.
name|styleFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The methods addFile and associated final Class[] parameters were gratefully copied from
comment|// anthony_miguel @ http://forum.java.sun.com/thread.jsp?forum=32&thread=300557&tstart=0&trange=15
DECL|field|parameters
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameters
init|=
operator|new
name|Class
index|[]
block|{
name|URL
operator|.
name|class
block|}
decl_stmt|;
DECL|method|addURL (URL[] u)
specifier|private
specifier|static
name|void
name|addURL
parameter_list|(
name|URL
index|[]
name|u
parameter_list|)
throws|throws
name|IOException
block|{
name|URLClassLoader
name|sysloader
init|=
operator|(
name|URLClassLoader
operator|)
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|URLClassLoader
argument_list|>
name|sysclass
init|=
name|URLClassLoader
operator|.
name|class
decl_stmt|;
try|try
block|{
name|Method
name|method
init|=
name|sysclass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"addURL"
argument_list|,
name|OpenOfficePanel
operator|.
name|parameters
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|URL
name|anU
range|:
name|u
control|)
block|{
name|method
operator|.
name|invoke
argument_list|(
name|sysloader
argument_list|,
name|anU
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error, could not add URL to system classloader"
argument_list|)
throw|;
block|}
block|}
DECL|method|updateConnectionParams (String ooPath, String ooExec, String ooJars, boolean oo3)
specifier|private
name|void
name|updateConnectionParams
parameter_list|(
name|String
name|ooPath
parameter_list|,
name|String
name|ooExec
parameter_list|,
name|String
name|ooJars
parameter_list|,
name|boolean
name|oo3
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
literal|"ooPath"
argument_list|,
name|ooPath
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
literal|"ooExecutablePath"
argument_list|,
name|ooExec
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
literal|"ooJarsPath"
argument_list|,
name|ooJars
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"connectToOO3"
argument_list|,
name|oo3
argument_list|)
expr_stmt|;
block|}
DECL|method|showConnectDialog ()
specifier|private
name|void
name|showConnectDialog
parameter_list|()
block|{
name|dialogOkPressed
operator|=
literal|false
expr_stmt|;
specifier|final
name|JDialog
name|cDiag
init|=
operator|new
name|JDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Set connection parameters"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|JTextField
name|ooPath
init|=
operator|new
name|JTextField
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|JButton
name|browseOOPath
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Browse"
argument_list|)
argument_list|)
decl_stmt|;
name|ooPath
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooPath"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|JTextField
name|ooExec
init|=
operator|new
name|JTextField
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|JButton
name|browseOOExec
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Browse"
argument_list|)
argument_list|)
decl_stmt|;
name|browseOOExec
operator|.
name|addActionListener
argument_list|(
name|BrowseAction
operator|.
name|buildForFile
argument_list|(
name|ooExec
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|JTextField
name|ooJars
init|=
operator|new
name|JTextField
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|JButton
name|browseOOJars
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Browse"
argument_list|)
argument_list|)
decl_stmt|;
name|browseOOJars
operator|.
name|addActionListener
argument_list|(
name|BrowseAction
operator|.
name|buildForDir
argument_list|(
name|ooJars
argument_list|)
argument_list|)
expr_stmt|;
name|ooExec
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooExecutablePath"
argument_list|)
argument_list|)
expr_stmt|;
name|ooJars
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
literal|"ooJarsPath"
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultFormBuilder
name|builder
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"left:pref, 4dlu, fill:pref:grow, 4dlu, fill:pref"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|OS
operator|.
name|WINDOWS
operator|||
name|OS
operator|.
name|OS_X
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Path to OpenOffice directory"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|ooPath
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|browseOOPath
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Path to OpenOffice executable"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|ooExec
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|browseOOExec
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Path to OpenOffice library dir"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|ooJars
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|browseOOJars
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
block|}
name|ButtonBarBuilder
name|bb
init|=
operator|new
name|ButtonBarBuilder
argument_list|()
decl_stmt|;
name|JButton
name|ok
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Ok"
argument_list|)
argument_list|)
decl_stmt|;
name|JButton
name|cancel
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
comment|//JButton auto = new JButton(Globals.lang("Autodetect"));
name|ActionListener
name|tfListener
init|=
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|updateConnectionParams
argument_list|(
name|ooPath
operator|.
name|getText
argument_list|()
argument_list|,
name|ooExec
operator|.
name|getText
argument_list|()
argument_list|,
name|ooJars
operator|.
name|getText
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cDiag
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ooPath
operator|.
name|addActionListener
argument_list|(
name|tfListener
argument_list|)
expr_stmt|;
name|ooExec
operator|.
name|addActionListener
argument_list|(
name|tfListener
argument_list|)
expr_stmt|;
name|ooJars
operator|.
name|addActionListener
argument_list|(
name|tfListener
argument_list|)
expr_stmt|;
name|ok
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|updateConnectionParams
argument_list|(
name|ooPath
operator|.
name|getText
argument_list|()
argument_list|,
name|ooExec
operator|.
name|getText
argument_list|()
argument_list|,
name|ooJars
operator|.
name|getText
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dialogOkPressed
operator|=
literal|true
expr_stmt|;
name|cDiag
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|cDiag
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addRelatedGap
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|builder
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|bb
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|cDiag
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|builder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|cDiag
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|bb
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|cDiag
operator|.
name|pack
argument_list|()
expr_stmt|;
name|cDiag
operator|.
name|setLocationRelativeTo
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|)
expr_stmt|;
name|cDiag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|pushEntries (boolean inParenthesis, boolean withText, boolean addPageInfo)
specifier|private
name|void
name|pushEntries
parameter_list|(
name|boolean
name|inParenthesis
parameter_list|,
name|boolean
name|withText
parameter_list|,
name|boolean
name|addPageInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|isConnectedToDocument
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Not connected to any Writer document. Please"
operator|+
literal|" make sure a document is open, and use the 'Select Writer document' button to connect to it."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|pageInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|addPageInfo
condition|)
block|{
name|AdvancedCiteDialog
name|acd
init|=
operator|new
name|AdvancedCiteDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|)
decl_stmt|;
name|acd
operator|.
name|showDialog
argument_list|()
expr_stmt|;
if|if
condition|(
name|acd
operator|.
name|cancelled
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|acd
operator|.
name|getPageInfo
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pageInfo
operator|=
name|acd
operator|.
name|getPageInfo
argument_list|()
expr_stmt|;
block|}
name|inParenthesis
operator|=
name|acd
operator|.
name|isInParenthesisCite
argument_list|()
expr_stmt|;
block|}
name|BasePanel
name|panel
init|=
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
specifier|final
name|BibtexDatabase
name|database
init|=
name|panel
operator|.
name|database
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
block|{
name|BibtexEntry
index|[]
name|entries
init|=
name|panel
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|length
operator|>
literal|0
condition|)
block|{
try|try
block|{
if|if
condition|(
name|OpenOfficePanel
operator|.
name|style
operator|==
literal|null
condition|)
block|{
name|readStyleFile
argument_list|()
expr_stmt|;
block|}
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|insertEntry
argument_list|(
name|entries
argument_list|,
name|database
argument_list|,
name|getBaseList
argument_list|()
argument_list|,
name|OpenOfficePanel
operator|.
name|style
argument_list|,
name|inParenthesis
argument_list|,
name|withText
argument_list|,
name|pageInfo
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"syncOOWhenCiting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must select either a valid style file, or use one of the default styles."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"No valid style file defined"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionLostException
name|ex
parameter_list|)
block|{
name|showConnectionLostErrorMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedCharacterFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedParagraphFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedParagraphFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|showConnectionLostErrorMessage ()
specifier|private
name|void
name|showConnectionLostErrorMessage
parameter_list|()
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connection to OpenOffice has been lost. "
operator|+
literal|"Please make sure OpenOffice is running, and try to reconnect."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connection lost"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
DECL|method|insertFullRefs ()
specifier|private
name|void
name|insertFullRefs
parameter_list|()
block|{
try|try
block|{
comment|// Create or clear bibliography:
comment|/*boolean hadBib = ooBase.createBibTextSection(true);             if (hadBib)                 ooBase.clearBibTextSectionContent();               */
name|BasePanel
name|panel
init|=
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
specifier|final
name|BibtexDatabase
name|database
init|=
name|panel
operator|.
name|database
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|BibtexEntry
argument_list|,
name|BibtexDatabase
argument_list|>
name|entries
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
block|{
name|BibtexEntry
index|[]
name|e
init|=
name|panel
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|anE
range|:
name|e
control|)
block|{
name|entries
operator|.
name|put
argument_list|(
name|anE
argument_list|,
name|database
argument_list|)
expr_stmt|;
block|}
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|insertFullReferenceAtViewCursor
argument_list|(
name|entries
argument_list|,
name|OpenOfficePanel
operator|.
name|style
argument_list|,
literal|"Default"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndefinedParagraphFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedParagraphFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reportUndefinedParagraphFormat (UndefinedParagraphFormatException ex)
specifier|private
name|void
name|reportUndefinedParagraphFormat
parameter_list|(
name|UndefinedParagraphFormatException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
literal|"<html>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your style file specifies the paragraph format '%0', "
operator|+
literal|"which is undefined in your current OpenOffice document."
argument_list|,
name|ex
operator|.
name|getFormatName
argument_list|()
argument_list|)
operator|+
literal|"<br>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"The paragraph format is controlled by the property 'ReferenceParagraphFormat' or 'ReferenceHeaderParagraphFormat' in the style file."
argument_list|)
operator|+
literal|"</html>"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|""
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
DECL|method|reportUndefinedCharacterFormat (UndefinedCharacterFormatException ex)
specifier|private
name|void
name|reportUndefinedCharacterFormat
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
literal|"<html>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your style file specifies the character format '%0', "
operator|+
literal|"which is undefined in your current OpenOffice document."
argument_list|,
name|ex
operator|.
name|getFormatName
argument_list|()
argument_list|)
operator|+
literal|"<br>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"The character format is controlled by the citation property 'CitationCharacterFormat' in the style file."
argument_list|)
operator|+
literal|"</html>"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|""
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
DECL|method|insertUsingBST ()
specifier|public
name|void
name|insertUsingBST
parameter_list|()
block|{
try|try
block|{
name|BasePanel
name|panel
init|=
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
specifier|final
name|BibtexDatabase
name|database
init|=
name|panel
operator|.
name|database
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
block|{
name|BibtexEntry
index|[]
name|entries
init|=
name|panel
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|BibtexEntry
argument_list|>
name|el
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|el
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|BstWrapper
name|wrapper
init|=
operator|new
name|BstWrapper
argument_list|()
decl_stmt|;
comment|//wrapper.loadBstFile(new File("/home/usr/share/texmf-tetex/bibtex/bst/base/plain.bst"));
name|wrapper
operator|.
name|loadBstFile
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/usr/share/texmf-tetex/bibtex/bst/ams/amsalpha.bst"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
name|wrapper
operator|.
name|processEntries
argument_list|(
name|el
argument_list|,
name|database
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|result
operator|.
name|keySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Key: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Entry: "
operator|+
name|result
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|insertMarkedUpTextAtViewCursor
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
literal|"Default"
argument_list|)
expr_stmt|;
block|}
comment|//System.out.println(result);
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|showSettingsPopup ()
specifier|private
name|void
name|showSettingsPopup
parameter_list|()
block|{
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
specifier|final
name|JCheckBoxMenuItem
name|autoSync
init|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Automatically sync bibliography when inserting citations"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"syncOOWhenCiting"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|JRadioButtonMenuItem
name|useActiveBase
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Look up BibTeX entries in the active tab only"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|JRadioButtonMenuItem
name|useAllBases
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Look up BibTeX entries in all open databases"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|JMenuItem
name|clearConnectionSettings
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Clear connection settings"
argument_list|)
argument_list|)
decl_stmt|;
name|ButtonGroup
name|bg
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|useActiveBase
argument_list|)
expr_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|useAllBases
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"useAllOpenBases"
argument_list|)
condition|)
block|{
name|useAllBases
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|useActiveBase
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|autoSync
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"syncOOWhenCiting"
argument_list|,
name|autoSync
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|useAllBases
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"useAllOpenBases"
argument_list|,
name|useAllBases
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|useActiveBase
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"useAllOpenBases"
argument_list|,
operator|!
name|useActiveBase
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|clearConnectionSettings
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|clear
argument_list|(
literal|"ooPAth"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|clear
argument_list|(
literal|"ooExecutablePath"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|clear
argument_list|(
literal|"ooJarsPath"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|clear
argument_list|(
literal|"connectToOO3"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|clear
argument_list|(
literal|"ooUnoilPath"
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|clear
argument_list|(
literal|"ooJurtPath"
argument_list|)
expr_stmt|;
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cleared connection settings."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|autoSync
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|useActiveBase
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|useAllBases
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|clearConnectionSettings
argument_list|)
expr_stmt|;
name|menu
operator|.
name|show
argument_list|(
name|OpenOfficePanel
operator|.
name|settingsB
argument_list|,
literal|0
argument_list|,
name|OpenOfficePanel
operator|.
name|settingsB
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|pushEntries (boolean inParenthesis, BibtexEntry[] entries)
specifier|private
name|void
name|pushEntries
parameter_list|(
name|boolean
name|inParenthesis
parameter_list|,
name|BibtexEntry
index|[]
name|entries
parameter_list|)
block|{
specifier|final
name|BibtexDatabase
name|database
init|=
name|OpenOfficePanel
operator|.
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|database
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|pageInfo
init|=
literal|null
decl_stmt|;
comment|//if (addPageInfo) {
name|AdvancedCiteDialog
name|acd
init|=
operator|new
name|AdvancedCiteDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|)
decl_stmt|;
name|acd
operator|.
name|showDialog
argument_list|()
expr_stmt|;
if|if
condition|(
name|acd
operator|.
name|cancelled
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|acd
operator|.
name|getPageInfo
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pageInfo
operator|=
name|acd
operator|.
name|getPageInfo
argument_list|()
expr_stmt|;
block|}
name|inParenthesis
operator|=
name|acd
operator|.
name|isInParenthesisCite
argument_list|()
expr_stmt|;
comment|//}
try|try
block|{
name|OpenOfficePanel
operator|.
name|ooBase
operator|.
name|insertEntry
argument_list|(
name|entries
argument_list|,
name|database
argument_list|,
name|getBaseList
argument_list|()
argument_list|,
name|OpenOfficePanel
operator|.
name|style
argument_list|,
name|inParenthesis
argument_list|,
literal|true
argument_list|,
name|pageInfo
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"syncOOWhenCiting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionLostException
name|ex
parameter_list|)
block|{
name|showConnectionLostErrorMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedCharacterFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedParagraphFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedParagraphFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Push to OpenOffice"
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationName ()
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
return|return
literal|"OpenOffice"
return|;
block|}
annotation|@
name|Override
DECL|method|getTooltip ()
specifier|public
name|String
name|getTooltip
parameter_list|()
block|{
return|return
literal|"Push selection to OpenOffice"
return|;
block|}
annotation|@
name|Override
DECL|method|getIcon ()
specifier|public
name|Icon
name|getIcon
parameter_list|()
block|{
return|return
name|IconTheme
operator|.
name|getImage
argument_list|(
literal|"openoffice"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSettingsPanel ()
specifier|public
name|JPanel
name|getSettingsPanel
parameter_list|()
block|{
return|return
literal|null
return|;
comment|/*if (settings == null)             initSettingsPanel();         return settings;*/
block|}
DECL|method|initSettingsPanel ()
specifier|private
name|void
name|initSettingsPanel
parameter_list|()
block|{
name|boolean
name|inParen
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"ooInParCitation"
argument_list|)
decl_stmt|;
name|inPar
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Use in-parenthesis citation"
argument_list|)
argument_list|,
name|inParen
argument_list|)
expr_stmt|;
name|inText
operator|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Use in-text citation"
argument_list|)
argument_list|,
operator|!
name|inParen
argument_list|)
expr_stmt|;
name|ButtonGroup
name|bg
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|inPar
argument_list|)
expr_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|inText
argument_list|)
expr_stmt|;
name|settings
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|settings
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|inPar
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|inText
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"ooInParCitation"
argument_list|,
name|inPar
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|pushEntries (BibtexDatabase bibtexDatabase, BibtexEntry[] entries, String s, MetaData metaData)
specifier|public
name|void
name|pushEntries
parameter_list|(
name|BibtexDatabase
name|bibtexDatabase
parameter_list|,
name|BibtexEntry
index|[]
name|entries
parameter_list|,
name|String
name|s
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
block|{
if|if
condition|(
name|OpenOfficePanel
operator|.
name|ooBase
operator|==
literal|null
condition|)
block|{
name|connect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|OpenOfficePanel
operator|.
name|ooBase
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|OpenOfficePanel
operator|.
name|style
operator|==
literal|null
condition|)
block|{
name|readStyleFile
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|OpenOfficePanel
operator|.
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must select either a valid style file, or use one of the default styles."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"No valid style file defined"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
name|pushEntries
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"ooInParCitation"
argument_list|)
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|operationCompleted (BasePanel basePanel)
specifier|public
name|void
name|operationCompleted
parameter_list|(
name|BasePanel
name|basePanel
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|requiresBibtexKeys ()
specifier|public
name|boolean
name|requiresBibtexKeys
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|class|OOPanel
class|class
name|OOPanel
extends|extends
name|SidePaneComponent
block|{
DECL|method|OOPanel (SidePaneManager sidePaneManager, Icon url, String s)
specifier|public
name|OOPanel
parameter_list|(
name|SidePaneManager
name|sidePaneManager
parameter_list|,
name|Icon
name|url
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|sidePaneManager
argument_list|,
name|url
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|OpenOfficePanel
operator|.
name|this
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|componentClosing ()
specifier|public
name|void
name|componentClosing
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"showOOPanel"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|componentOpening ()
specifier|public
name|void
name|componentOpening
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
literal|"showOOPanel"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

