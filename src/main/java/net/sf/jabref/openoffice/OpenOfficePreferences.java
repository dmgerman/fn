begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.openoffice
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_class
DECL|class|OpenOfficePreferences
specifier|public
class|class
name|OpenOfficePreferences
block|{
DECL|field|preferences
specifier|private
specifier|final
name|JabRefPreferences
name|preferences
decl_stmt|;
DECL|method|OpenOfficePreferences (JabRefPreferences preferences)
specifier|public
name|OpenOfficePreferences
parameter_list|(
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
name|this
operator|.
name|preferences
operator|=
name|preferences
expr_stmt|;
block|}
DECL|method|putDefaultPreferences ()
specifier|public
name|void
name|putDefaultPreferences
parameter_list|()
block|{
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_PATH
argument_list|,
literal|"C:\\Program Files\\OpenOffice.org 4"
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXECUTABLE_PATH
argument_list|,
literal|"C:\\Program Files\\OpenOffice.org 4\\program\\soffice.exe"
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_JARS_PATH
argument_list|,
literal|"C:\\Program Files\\OpenOffice.org 4\\program\\classes"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXECUTABLE_PATH
argument_list|,
literal|"/Applications/OpenOffice.org.app/Contents/MacOS/soffice.bin"
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_PATH
argument_list|,
literal|"/Applications/OpenOffice.org.app"
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_JARS_PATH
argument_list|,
literal|"/Applications/OpenOffice.org.app/Contents/Resources/java"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Linux
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_PATH
argument_list|,
literal|"/opt/openoffice.org3"
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXECUTABLE_PATH
argument_list|,
literal|"/usr/lib/openoffice/program/soffice"
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_JARS_PATH
argument_list|,
literal|"/opt/openoffice.org/basis3.0"
argument_list|)
expr_stmt|;
block|}
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_SYNC_WHEN_CITING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_SHOW_PANEL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_USE_ALL_OPEN_BASES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_USE_DEFAULT_AUTHORYEAR_STYLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_USE_DEFAULT_NUMERICAL_STYLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_CHOOSE_STYLE_DIRECTLY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_DIRECT_FILE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putDefaultValue
argument_list|(
name|JabRefPreferences
operator|.
name|OO_STYLE_DIRECTORY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|updateConnectionParams (String ooPath, String execPath, String jarsPath)
specifier|public
name|void
name|updateConnectionParams
parameter_list|(
name|String
name|ooPath
parameter_list|,
name|String
name|execPath
parameter_list|,
name|String
name|jarsPath
parameter_list|)
block|{
name|preferences
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|OO_PATH
argument_list|,
name|ooPath
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXECUTABLE_PATH
argument_list|,
name|execPath
argument_list|)
expr_stmt|;
name|setJarsPath
argument_list|(
name|jarsPath
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAutoDetectedPaths ()
specifier|public
name|boolean
name|checkAutoDetectedPaths
parameter_list|()
block|{
if|if
condition|(
name|preferences
operator|.
name|hasKey
argument_list|(
name|JabRefPreferences
operator|.
name|OO_JARS_PATH
argument_list|)
operator|&&
name|preferences
operator|.
name|hasKey
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXECUTABLE_PATH
argument_list|)
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getJarsPath
argument_list|()
argument_list|,
literal|"jurt.jar"
argument_list|)
operator|.
name|exists
argument_list|()
operator|&&
operator|new
name|File
argument_list|(
name|preferences
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXECUTABLE_PATH
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|clearConnectionSettings ()
specifier|public
name|String
name|clearConnectionSettings
parameter_list|()
block|{
name|preferences
operator|.
name|clear
argument_list|(
name|JabRefPreferences
operator|.
name|OO_PATH
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|clear
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXECUTABLE_PATH
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|clear
argument_list|(
name|JabRefPreferences
operator|.
name|OO_JARS_PATH
argument_list|)
expr_stmt|;
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cleared connection settings."
argument_list|)
return|;
block|}
DECL|method|getJarsPath ()
specifier|public
name|String
name|getJarsPath
parameter_list|()
block|{
return|return
name|preferences
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|OO_JARS_PATH
argument_list|)
return|;
block|}
DECL|method|setJarsPath (String path)
specifier|public
name|void
name|setJarsPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|preferences
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|OO_JARS_PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|useAllDatabases ()
specifier|public
name|boolean
name|useAllDatabases
parameter_list|()
block|{
return|return
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_USE_ALL_OPEN_BASES
argument_list|)
return|;
block|}
DECL|method|setUseAllDatabases (boolean use)
specifier|public
name|void
name|setUseAllDatabases
parameter_list|(
name|boolean
name|use
parameter_list|)
block|{
name|preferences
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_USE_ALL_OPEN_BASES
argument_list|,
name|use
argument_list|)
expr_stmt|;
block|}
DECL|method|syncWhenCiting ()
specifier|public
name|boolean
name|syncWhenCiting
parameter_list|()
block|{
return|return
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_SYNC_WHEN_CITING
argument_list|)
return|;
block|}
DECL|method|setSyncWhenCiting (boolean sync)
specifier|public
name|void
name|setSyncWhenCiting
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_SYNC_WHEN_CITING
argument_list|,
name|sync
argument_list|)
expr_stmt|;
block|}
DECL|method|showPanel ()
specifier|public
name|boolean
name|showPanel
parameter_list|()
block|{
return|return
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_SHOW_PANEL
argument_list|)
return|;
block|}
DECL|method|setShowPanel (boolean show)
specifier|public
name|void
name|setShowPanel
parameter_list|(
name|boolean
name|show
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_SHOW_PANEL
argument_list|,
name|show
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

