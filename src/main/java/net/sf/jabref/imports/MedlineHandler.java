begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2014 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.imports
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|id
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_class
DECL|class|MedlineHandler
class|class
name|MedlineHandler
extends|extends
name|DefaultHandler
block|{
DECL|field|htmlConverter
specifier|private
specifier|static
specifier|final
name|HTMLConverter
name|htmlConverter
init|=
operator|new
name|HTMLConverter
argument_list|()
decl_stmt|;
DECL|field|bibitems
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|BibtexEntry
argument_list|>
name|bibitems
init|=
operator|new
name|ArrayList
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|inTitle
specifier|private
name|boolean
name|inTitle
decl_stmt|;
DECL|field|inYear
specifier|private
name|boolean
name|inYear
decl_stmt|;
DECL|field|inJournal
specifier|private
name|boolean
name|inJournal
decl_stmt|;
DECL|field|inMonth
specifier|private
name|boolean
name|inMonth
decl_stmt|;
DECL|field|inVolume
specifier|private
name|boolean
name|inVolume
decl_stmt|;
DECL|field|inAuthorList
specifier|private
name|boolean
name|inAuthorList
decl_stmt|;
DECL|field|inAuthor
specifier|private
name|boolean
name|inAuthor
decl_stmt|;
DECL|field|inLastName
specifier|private
name|boolean
name|inLastName
decl_stmt|;
DECL|field|inSuffix
specifier|private
name|boolean
name|inSuffix
decl_stmt|;
DECL|field|inInitials
specifier|private
name|boolean
name|inInitials
decl_stmt|;
DECL|field|inMedlinePgn
specifier|private
name|boolean
name|inMedlinePgn
decl_stmt|;
DECL|field|inIssue
specifier|private
name|boolean
name|inIssue
decl_stmt|;
DECL|field|inPubDate
specifier|private
name|boolean
name|inPubDate
decl_stmt|;
DECL|field|inUrl
specifier|private
name|boolean
name|inUrl
decl_stmt|;
DECL|field|inForename
specifier|private
name|boolean
name|inForename
decl_stmt|;
DECL|field|inAbstractText
specifier|private
name|boolean
name|inAbstractText
decl_stmt|;
DECL|field|inMedlineDate
specifier|private
name|boolean
name|inMedlineDate
decl_stmt|;
DECL|field|inPubMedID
specifier|private
name|boolean
name|inPubMedID
decl_stmt|;
DECL|field|inDescriptorName
specifier|private
name|boolean
name|inDescriptorName
decl_stmt|;
DECL|field|inDoi
specifier|private
name|boolean
name|inDoi
decl_stmt|;
DECL|field|inPii
specifier|private
name|boolean
name|inPii
decl_stmt|;
DECL|field|inPmc
specifier|private
name|boolean
name|inPmc
decl_stmt|;
DECL|field|inAffiliation
specifier|private
name|boolean
name|inAffiliation
decl_stmt|;
DECL|field|inMeshHeader
specifier|private
name|boolean
name|inMeshHeader
decl_stmt|;
DECL|field|inQualifierName
specifier|private
name|boolean
name|inQualifierName
decl_stmt|;
DECL|field|inLanguage
specifier|private
name|boolean
name|inLanguage
decl_stmt|;
DECL|field|inPst
specifier|private
name|boolean
name|inPst
decl_stmt|;
DECL|field|title
specifier|private
name|String
name|title
init|=
literal|""
decl_stmt|;
DECL|field|journal
specifier|private
name|String
name|journal
init|=
literal|""
decl_stmt|;
DECL|field|author
specifier|private
name|String
name|author
init|=
literal|""
decl_stmt|;
DECL|field|lastName
specifier|private
name|String
name|lastName
init|=
literal|""
decl_stmt|;
DECL|field|suffix
specifier|private
name|String
name|suffix
init|=
literal|""
decl_stmt|;
DECL|field|year
specifier|private
name|String
name|year
init|=
literal|""
decl_stmt|;
DECL|field|forename
specifier|private
name|String
name|forename
init|=
literal|""
decl_stmt|;
DECL|field|abstractText
specifier|private
name|String
name|abstractText
init|=
literal|""
decl_stmt|;
DECL|field|affiliation
specifier|private
name|String
name|affiliation
init|=
literal|""
decl_stmt|;
DECL|field|month
specifier|private
name|String
name|month
init|=
literal|""
decl_stmt|;
DECL|field|volume
specifier|private
name|String
name|volume
init|=
literal|""
decl_stmt|;
DECL|field|lastname
specifier|private
name|String
name|lastname
init|=
literal|""
decl_stmt|;
DECL|field|initials
specifier|private
name|String
name|initials
init|=
literal|""
decl_stmt|;
DECL|field|number
specifier|private
name|String
name|number
init|=
literal|""
decl_stmt|;
DECL|field|page
specifier|private
name|String
name|page
init|=
literal|""
decl_stmt|;
DECL|field|MedlineDate
specifier|private
name|String
name|MedlineDate
init|=
literal|""
decl_stmt|;
DECL|field|series
name|String
name|series
init|=
literal|""
decl_stmt|;
DECL|field|editor
name|String
name|editor
init|=
literal|""
decl_stmt|;
DECL|field|booktitle
name|String
name|booktitle
init|=
literal|""
decl_stmt|;
DECL|field|type
name|String
name|type
init|=
literal|"article"
decl_stmt|;
DECL|field|key
name|String
name|key
init|=
literal|""
decl_stmt|;
DECL|field|address
name|String
name|address
init|=
literal|""
decl_stmt|;
DECL|field|pubmedid
specifier|private
name|String
name|pubmedid
init|=
literal|""
decl_stmt|;
DECL|field|doi
specifier|private
name|String
name|doi
init|=
literal|""
decl_stmt|;
DECL|field|pii
specifier|private
name|String
name|pii
init|=
literal|""
decl_stmt|;
DECL|field|pmc
specifier|private
name|String
name|pmc
init|=
literal|""
decl_stmt|;
DECL|field|majorTopic
specifier|private
name|String
name|majorTopic
init|=
literal|""
decl_stmt|;
DECL|field|minorTopics
specifier|private
name|String
name|minorTopics
init|=
literal|""
decl_stmt|;
DECL|field|language
specifier|private
name|String
name|language
init|=
literal|""
decl_stmt|;
DECL|field|pst
specifier|private
name|String
name|pst
init|=
literal|""
decl_stmt|;
DECL|field|authors
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|authors
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|descriptors
specifier|private
specifier|final
name|TreeSet
argument_list|<
name|String
argument_list|>
name|descriptors
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// To gather keywords
DECL|field|rowNum
name|int
name|rowNum
decl_stmt|;
DECL|field|KEYWORD_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|KEYWORD_SEPARATOR
init|=
literal|"; "
decl_stmt|;
DECL|method|getItems ()
specifier|public
name|ArrayList
argument_list|<
name|BibtexEntry
argument_list|>
name|getItems
parameter_list|()
block|{
return|return
name|bibitems
return|;
block|}
DECL|method|MedlineHandler ()
specifier|public
name|MedlineHandler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startElement (String uri, String localName, String qName, Attributes atts)
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
block|{
comment|//		public void startElement(String localName, Attributes atts) {
comment|// Get the number of attribute
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PubmedArticle"
argument_list|)
condition|)
block|{         }
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ArticleTitle"
argument_list|)
condition|)
block|{
name|inTitle
operator|=
literal|true
expr_stmt|;
name|title
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PubDate"
argument_list|)
condition|)
block|{
name|inPubDate
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Year"
argument_list|)
operator|&&
name|inPubDate
condition|)
block|{
name|inYear
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlineDate"
argument_list|)
operator|&&
name|inPubDate
condition|)
block|{
name|inMedlineDate
operator|=
literal|true
expr_stmt|;
block|}
comment|// medline date does not have 4 digit dates instead it has multiyear etc
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlineTA"
argument_list|)
condition|)
block|{
name|inJournal
operator|=
literal|true
expr_stmt|;
name|journal
operator|=
literal|""
expr_stmt|;
block|}
comment|//journal name
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Month"
argument_list|)
operator|&&
name|inPubDate
condition|)
block|{
name|inMonth
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Volume"
argument_list|)
condition|)
block|{
name|inVolume
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Language"
argument_list|)
condition|)
block|{
name|inLanguage
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PublicationStatus"
argument_list|)
condition|)
block|{
name|inPst
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"AuthorList"
argument_list|)
condition|)
block|{
name|inAuthorList
operator|=
literal|true
expr_stmt|;
name|authors
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MeshHeading"
argument_list|)
condition|)
block|{
name|inMeshHeader
operator|=
literal|true
expr_stmt|;
name|majorTopic
operator|=
literal|""
expr_stmt|;
name|minorTopics
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"DescriptorName"
argument_list|)
condition|)
block|{
name|inDescriptorName
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"QualifierName"
argument_list|)
condition|)
block|{
name|inQualifierName
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Author"
argument_list|)
condition|)
block|{
name|inAuthor
operator|=
literal|true
expr_stmt|;
name|author
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"CollectiveName"
argument_list|)
condition|)
block|{
name|inForename
operator|=
literal|true
expr_stmt|;
name|forename
operator|=
literal|""
expr_stmt|;
block|}
comment|// Morten A. 20040513.
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PMID"
argument_list|)
condition|)
block|{
comment|// Set PMID only once, because there can be<CommentIn> tags later on that
comment|// contain IDs of different articles.
if|if
condition|(
name|pubmedid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|inPubMedID
operator|=
literal|true
expr_stmt|;
name|pubmedid
operator|=
literal|""
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"LastName"
argument_list|)
condition|)
block|{
name|inLastName
operator|=
literal|true
expr_stmt|;
name|lastName
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ForeName"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"FirstName"
argument_list|)
condition|)
block|{
name|inForename
operator|=
literal|true
expr_stmt|;
name|forename
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Suffix"
argument_list|)
condition|)
block|{
name|inSuffix
operator|=
literal|true
expr_stmt|;
name|suffix
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Issue"
argument_list|)
condition|)
block|{
name|inIssue
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlinePgn"
argument_list|)
condition|)
block|{
name|inMedlinePgn
operator|=
literal|true
expr_stmt|;
block|}
comment|//pagenumber
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"URL"
argument_list|)
condition|)
block|{
name|inUrl
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Initials"
argument_list|)
condition|)
block|{
name|inInitials
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"AbstractText"
argument_list|)
condition|)
block|{
name|inAbstractText
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ArticleId"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"doi"
argument_list|)
condition|)
block|{
name|inDoi
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"pii"
argument_list|)
condition|)
block|{
name|inPii
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"pmc"
argument_list|)
condition|)
block|{
name|inPmc
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Affiliation"
argument_list|)
condition|)
block|{
name|inAffiliation
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|join (Object[] sa, String delim)
specifier|private
name|String
name|join
parameter_list|(
name|Object
index|[]
name|sa
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sa
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|sa
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sa
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|makeBibtexString ()
name|String
name|makeBibtexString
parameter_list|()
block|{
name|String
name|out
decl_stmt|;
comment|// PENDING jeffrey.kuhn@yale.edu 2005-05-27 : added call to fixPageRange
name|out
operator|=
literal|"article{,\n"
operator|+
literal|" author = { "
operator|+
name|author
operator|+
literal|" },\n title = { "
operator|+
name|title
operator|+
literal|"},\n journal ={ "
operator|+
name|journal
operator|+
literal|"},\n year = "
operator|+
name|year
operator|+
literal|"},\n volume = { "
operator|+
name|volume
operator|+
literal|"},\n number = { "
operator|+
name|number
operator|+
literal|"},\n pages = { "
operator|+
name|fixPageRange
argument_list|(
name|page
argument_list|)
operator|+
literal|"},\n abstract = { "
operator|+
name|abstractText
operator|+
literal|"},\n}"
expr_stmt|;
return|return
name|out
return|;
block|}
annotation|@
name|Override
DECL|method|endElement (String uri, String localName, String qName)
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PubmedArticle"
argument_list|)
condition|)
block|{
comment|//bibitems.add( new Bibitem(null, makeBibtexString(), Globals.nextKey(),"-1" )	 );
comment|// check if year ="" then give medline date instead
if|if
condition|(
name|year
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|MedlineDate
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// multi-year date format
comment|//System.out.println(MedlineDate);
name|year
operator|=
name|MedlineDate
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Matcher m = Pattern.compile("\\b[0-9]{4}\\b").matcher(MedlineDate);
comment|//if(m.matches())
comment|//year = m.group();
block|}
block|}
comment|// Build a string from the collected keywords:
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|descriptors
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|s
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|MedlineHandler
operator|.
name|KEYWORD_SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|keywords
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|BibtexEntry
name|b
init|=
operator|new
name|BibtexEntry
argument_list|(
name|IdGenerator
operator|.
name|next
argument_list|()
argument_list|,
comment|//Globals.DEFAULT_BIBTEXENTRY_ID,
name|Globals
operator|.
name|getEntryType
argument_list|(
literal|"article"
argument_list|)
argument_list|)
decl_stmt|;
comment|// id assumes an existing database so don't create one here
if|if
condition|(
operator|!
name|author
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
name|MedlineHandler
operator|.
name|htmlConverter
operator|.
name|formatUnicode
argument_list|(
name|ImportFormatReader
operator|.
name|expandAuthorInitials
argument_list|(
name|author
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// b.setField("author",Util.replaceSpecialCharacters(ImportFormatReader.expandAuthorInitials(author)));
name|author
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|title
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
name|MedlineHandler
operator|.
name|htmlConverter
operator|.
name|formatUnicode
argument_list|(
name|title
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// if (!title.equals("")) b.setField("title",Util.replaceSpecialCharacters(title));
if|if
condition|(
operator|!
name|journal
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
name|journal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|year
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
name|year
argument_list|)
expr_stmt|;
block|}
comment|// PENDING jeffrey.kuhn@yale.edu 2005-05-27 : added call to fixPageRange
if|if
condition|(
operator|!
name|page
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
name|fixPageRange
argument_list|(
name|page
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|volume
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"volume"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|language
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"language"
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pst
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"medline-pst"
argument_list|,
name|pst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|abstractText
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
name|abstractText
operator|.
name|replaceAll
argument_list|(
literal|"%"
argument_list|,
literal|"\\\\%"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|keywords
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
name|keywords
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|month
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
name|month
argument_list|)
expr_stmt|;
block|}
comment|//if (!url.equals("")) b.setField("url",url);
if|if
condition|(
operator|!
name|number
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"number"
argument_list|,
name|number
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|doi
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
name|doi
argument_list|)
expr_stmt|;
name|b
operator|.
name|setField
argument_list|(
literal|"url"
argument_list|,
literal|"http://dx.doi.org/"
operator|+
name|doi
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pii
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"pii"
argument_list|,
name|pii
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pmc
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"pmc"
argument_list|,
name|pmc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|affiliation
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"institution"
argument_list|,
name|affiliation
operator|.
name|replaceAll
argument_list|(
literal|"#"
argument_list|,
literal|"\\\\#"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// PENDING jeffrey.kuhn@yale.edu 2005-05-27 : added "pmid" bibtex field
comment|// Older references do not have doi entries, but every
comment|// medline entry has a unique pubmed ID (aka primary ID).
comment|// Add a bibtex field for the pubmed ID for future use.
if|if
condition|(
operator|!
name|pubmedid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|b
operator|.
name|setField
argument_list|(
literal|"pmid"
argument_list|,
name|pubmedid
argument_list|)
expr_stmt|;
block|}
name|bibitems
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|abstractText
operator|=
literal|""
expr_stmt|;
name|author
operator|=
literal|""
expr_stmt|;
name|title
operator|=
literal|""
expr_stmt|;
name|journal
operator|=
literal|""
expr_stmt|;
name|keywords
operator|=
literal|""
expr_stmt|;
name|doi
operator|=
literal|""
expr_stmt|;
name|pii
operator|=
literal|""
expr_stmt|;
name|pmc
operator|=
literal|""
expr_stmt|;
name|year
operator|=
literal|""
expr_stmt|;
name|forename
operator|=
literal|""
expr_stmt|;
name|lastName
operator|=
literal|""
expr_stmt|;
name|suffix
operator|=
literal|""
expr_stmt|;
name|abstractText
operator|=
literal|""
expr_stmt|;
name|affiliation
operator|=
literal|""
expr_stmt|;
name|pubmedid
operator|=
literal|""
expr_stmt|;
name|majorTopic
operator|=
literal|""
expr_stmt|;
name|minorTopics
operator|=
literal|""
expr_stmt|;
name|month
operator|=
literal|""
expr_stmt|;
name|volume
operator|=
literal|""
expr_stmt|;
name|language
operator|=
literal|""
expr_stmt|;
name|pst
operator|=
literal|""
expr_stmt|;
name|lastname
operator|=
literal|""
expr_stmt|;
name|suffix
operator|=
literal|""
expr_stmt|;
name|initials
operator|=
literal|""
expr_stmt|;
name|number
operator|=
literal|""
expr_stmt|;
name|page
operator|=
literal|""
expr_stmt|;
name|String
name|medlineID
init|=
literal|""
decl_stmt|;
name|String
name|url
init|=
literal|""
decl_stmt|;
name|MedlineDate
operator|=
literal|""
expr_stmt|;
name|descriptors
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ArticleTitle"
argument_list|)
condition|)
block|{
name|inTitle
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PubDate"
argument_list|)
condition|)
block|{
name|inPubDate
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Year"
argument_list|)
condition|)
block|{
name|inYear
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PMID"
argument_list|)
condition|)
block|{
name|inPubMedID
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlineDate"
argument_list|)
condition|)
block|{
name|inMedlineDate
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlineTA"
argument_list|)
condition|)
block|{
name|inJournal
operator|=
literal|false
expr_stmt|;
block|}
comment|//journal name
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Month"
argument_list|)
condition|)
block|{
name|inMonth
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Volume"
argument_list|)
condition|)
block|{
name|inVolume
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Language"
argument_list|)
condition|)
block|{
name|inLanguage
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"PublicationStatus"
argument_list|)
condition|)
block|{
name|inPst
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"AuthorList"
argument_list|)
condition|)
block|{
name|author
operator|=
name|join
argument_list|(
name|authors
operator|.
name|toArray
argument_list|()
argument_list|,
literal|" and "
argument_list|)
expr_stmt|;
name|inAuthorList
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Author"
argument_list|)
condition|)
block|{
comment|// forename sometimes has initials with " " in middle: is pattern [A-Z] [A-Z]
comment|// when above is the case replace it with initials
if|if
condition|(
name|forename
operator|.
name|length
argument_list|()
operator|==
literal|3
operator|&&
name|forename
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|forename
operator|=
name|initials
expr_stmt|;
block|}
comment|// Put together name with last name first, and enter suffix in between if present:
if|if
condition|(
name|lastname
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
operator|>
literal|0
condition|)
block|{
name|author
operator|=
literal|"{"
operator|+
name|lastname
operator|+
literal|"}"
expr_stmt|;
block|}
else|else
block|{
name|author
operator|=
name|lastname
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|suffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|author
operator|=
name|author
operator|+
literal|", "
operator|+
name|suffix
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|forename
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|author
operator|=
name|author
operator|+
literal|", "
operator|+
name|forename
expr_stmt|;
block|}
comment|//author = initials + " " + lastname;
name|authors
operator|.
name|add
argument_list|(
name|author
argument_list|)
expr_stmt|;
name|inAuthor
operator|=
literal|false
expr_stmt|;
name|forename
operator|=
literal|""
expr_stmt|;
name|initials
operator|=
literal|""
expr_stmt|;
name|lastname
operator|=
literal|""
expr_stmt|;
name|suffix
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"DescriptorName"
argument_list|)
condition|)
block|{
name|inDescriptorName
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"QualifierName"
argument_list|)
condition|)
block|{
name|inQualifierName
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MeshHeading"
argument_list|)
condition|)
block|{
name|inMeshHeader
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|minorTopics
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|descriptors
operator|.
name|add
argument_list|(
name|majorTopic
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|descriptors
operator|.
name|add
argument_list|(
name|majorTopic
operator|+
literal|", "
operator|+
name|minorTopics
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"LastName"
argument_list|)
condition|)
block|{
name|inLastName
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Suffix"
argument_list|)
condition|)
block|{
name|inSuffix
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ForeName"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"FirstName"
argument_list|)
condition|)
block|{
name|inForename
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Issue"
argument_list|)
condition|)
block|{
name|inIssue
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"MedlinePgn"
argument_list|)
condition|)
block|{
name|inMedlinePgn
operator|=
literal|false
expr_stmt|;
block|}
comment|//pagenumber
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"URL"
argument_list|)
condition|)
block|{
name|inUrl
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Initials"
argument_list|)
condition|)
block|{
comment|//initials= '.' + initials + '.';
name|inInitials
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"AbstractText"
argument_list|)
condition|)
block|{
name|inAbstractText
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"Affiliation"
argument_list|)
condition|)
block|{
name|inAffiliation
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"ArticleId"
argument_list|)
condition|)
block|{
if|if
condition|(
name|inDoi
condition|)
block|{
name|inDoi
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inPii
condition|)
block|{
name|inPii
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inPmc
condition|)
block|{
name|inPmc
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|characters (char[] data, int start, int length)
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// if stack is not ready, data is not content of recognized element
name|boolean
name|inURL
init|=
literal|false
decl_stmt|;
name|boolean
name|inMedlineID
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|inTitle
condition|)
block|{
name|title
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inYear
condition|)
block|{
name|year
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inJournal
condition|)
block|{
name|journal
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inMonth
condition|)
block|{
name|month
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inVolume
condition|)
block|{
name|volume
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inLanguage
condition|)
block|{
name|language
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inPst
condition|)
block|{
name|pst
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inLastName
condition|)
block|{
name|lastname
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inSuffix
condition|)
block|{
name|suffix
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inInitials
condition|)
block|{
name|initials
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inIssue
condition|)
block|{
name|number
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inMedlinePgn
condition|)
block|{
name|page
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inMedlineID
condition|)
block|{
name|String
name|medlineID
init|=
literal|""
decl_stmt|;
name|medlineID
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inURL
condition|)
block|{
name|String
name|url
init|=
literal|""
decl_stmt|;
name|url
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inPubMedID
condition|)
block|{
name|pubmedid
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inQualifierName
condition|)
block|{
if|if
condition|(
operator|!
name|minorTopics
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|minorTopics
operator|=
name|minorTopics
operator|+
literal|"/"
expr_stmt|;
block|}
name|minorTopics
operator|=
name|minorTopics
operator|+
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inDescriptorName
condition|)
block|{
name|majorTopic
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|//keywords += new String(data,start,length) + ", ";
elseif|else
if|if
condition|(
name|inForename
condition|)
block|{
name|forename
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|//System.out.println("IN FORENAME: " + forename);
block|}
elseif|else
if|if
condition|(
name|inAbstractText
condition|)
block|{
name|abstractText
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inMedlineDate
condition|)
block|{
name|MedlineDate
operator|+=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inDoi
condition|)
block|{
name|doi
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inPii
condition|)
block|{
name|pii
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inPmc
condition|)
block|{
name|pmc
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inAffiliation
condition|)
block|{
name|affiliation
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|// PENDING jeffrey.kuhn@yale.edu 2005-05-27 : added fixPageRange method
comment|//   Convert medline page ranges from short form to full form.
comment|//   Medline reports page ranges in a shorthand format.
comment|//   The last page is reported using only the digits which
comment|//   differ from the first page.
comment|//      i.e. 12345-51 refers to the actual range 12345-12351
DECL|method|fixPageRange (String pageRange)
specifier|private
name|String
name|fixPageRange
parameter_list|(
name|String
name|pageRange
parameter_list|)
block|{
name|int
name|minusPos
init|=
name|pageRange
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|minusPos
operator|<
literal|0
condition|)
block|{
return|return
name|pageRange
return|;
block|}
name|String
name|first
init|=
name|pageRange
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|minusPos
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|last
init|=
name|pageRange
operator|.
name|substring
argument_list|(
name|minusPos
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|llast
init|=
name|last
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|lfirst
init|=
name|first
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|llast
operator|<
name|lfirst
condition|)
block|{
name|last
operator|=
name|first
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lfirst
operator|-
name|llast
argument_list|)
operator|+
name|last
expr_stmt|;
block|}
return|return
name|first
operator|+
literal|"--"
operator|+
name|last
return|;
block|}
block|}
end_class

end_unit

