begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.search.expression
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|expression
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|CommonAST
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|RegExNode
specifier|public
class|class
name|RegExNode
extends|extends
name|CommonAST
block|{
DECL|field|pattern
specifier|private
name|Pattern
name|pattern
init|=
literal|null
decl_stmt|;
DECL|method|RegExNode (int tokenType, String text, boolean caseSensitive, boolean regex)
specifier|public
name|RegExNode
parameter_list|(
name|int
name|tokenType
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|,
name|boolean
name|regex
parameter_list|)
block|{
name|initialize
argument_list|(
name|tokenType
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
condition|?
name|text
else|:
literal|"\\Q"
operator|+
name|text
operator|+
literal|"\\E"
argument_list|,
comment|// quote if !regex
name|caseSensitive
condition|?
literal|0
else|:
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
block|}
DECL|method|getPattern ()
specifier|public
name|Pattern
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
block|}
end_class

end_unit

