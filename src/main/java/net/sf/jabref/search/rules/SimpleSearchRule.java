begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003 Nathan Dunn, Morten O. Alver   All programs in this directory and  subdirectories are published under the GNU General Public License as  described below.   This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or (at  your option) any later version.   This program is distributed in the hope that it will be useful, but  WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  General Public License for more details.   You should have received a copy of the GNU General Public License  along with this program; if not, write to the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA   Further information about the GNU GPL is available at:  http://www.gnu.org/copyleft/gpl.ja.html   */
end_comment

begin_package
DECL|package|net.sf.jabref.search.rules
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|export
operator|.
name|layout
operator|.
name|format
operator|.
name|RemoveLatexCommands
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|SearchRule
import|;
end_import

begin_comment
comment|//TODO why have simple and basic search rule????
end_comment

begin_class
DECL|class|SimpleSearchRule
specifier|public
class|class
name|SimpleSearchRule
implements|implements
name|SearchRule
block|{
DECL|field|REMOVE_LATEX_COMMANDS
specifier|private
specifier|static
specifier|final
name|RemoveLatexCommands
name|REMOVE_LATEX_COMMANDS
init|=
operator|new
name|RemoveLatexCommands
argument_list|()
decl_stmt|;
DECL|field|caseSensitive
specifier|private
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
DECL|method|SimpleSearchRule (boolean caseSensitive)
specifier|public
name|SimpleSearchRule
parameter_list|(
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validateSearchStrings (String query)
specifier|public
name|boolean
name|validateSearchStrings
parameter_list|(
name|String
name|query
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|applyRule (String query, BibtexEntry bibtexEntry)
specifier|public
name|boolean
name|applyRule
parameter_list|(
name|String
name|query
parameter_list|,
name|BibtexEntry
name|bibtexEntry
parameter_list|)
block|{
name|int
name|score
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|bibtexEntry
operator|.
name|getAllFields
argument_list|()
control|)
block|{
name|Object
name|fieldContentAsObject
init|=
name|bibtexEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldContentAsObject
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|String
name|fieldContent
init|=
name|sanatizeFieldContent
argument_list|(
name|fieldContentAsObject
argument_list|)
decl_stmt|;
name|score
operator|+=
name|getNumberOfOccurrences
argument_list|(
name|fieldContent
argument_list|,
name|sanatizeString
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"sorting error: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|score
operator|>
literal|0
return|;
block|}
DECL|method|sanatizeString (String query)
specifier|private
name|String
name|sanatizeString
parameter_list|(
name|String
name|query
parameter_list|)
block|{
if|if
condition|(
operator|!
name|caseSensitive
condition|)
block|{
return|return
name|query
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|query
return|;
block|}
block|}
DECL|method|sanatizeFieldContent (Object fieldContentAsObject)
specifier|private
name|String
name|sanatizeFieldContent
parameter_list|(
name|Object
name|fieldContentAsObject
parameter_list|)
block|{
return|return
name|sanatizeString
argument_list|(
name|SimpleSearchRule
operator|.
name|REMOVE_LATEX_COMMANDS
operator|.
name|format
argument_list|(
name|fieldContentAsObject
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getNumberOfOccurrences (String haystack, String needle)
specifier|private
specifier|static
name|int
name|getNumberOfOccurrences
parameter_list|(
name|String
name|haystack
parameter_list|,
name|String
name|needle
parameter_list|)
block|{
name|int
name|score
init|=
literal|0
decl_stmt|;
name|int
name|counter
init|=
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|)
decl_stmt|;
while|while
condition|(
name|counter
operator|>=
literal|0
condition|)
block|{
name|score
operator|++
expr_stmt|;
name|counter
operator|=
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|counter
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|score
return|;
block|}
block|}
end_class

end_unit

