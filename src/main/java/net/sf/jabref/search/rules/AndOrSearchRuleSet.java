begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2011 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.search.rules
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
operator|.
name|SearchRule
import|;
end_import

begin_comment
comment|/**  * Subclass of SearchRuleSet that ANDs or ORs between its rules, returning 0 or  * 1.  */
end_comment

begin_class
DECL|class|AndOrSearchRuleSet
specifier|public
class|class
name|AndOrSearchRuleSet
extends|extends
name|SearchRuleSet
block|{
DECL|field|and
specifier|private
specifier|final
name|boolean
name|and
decl_stmt|;
DECL|method|AndOrSearchRuleSet (boolean and)
specifier|public
name|AndOrSearchRuleSet
parameter_list|(
name|boolean
name|and
parameter_list|)
block|{
name|this
operator|.
name|and
operator|=
name|and
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applyRule (Map<String, String> searchString, BibtexEntry bibtexEntry)
specifier|public
name|int
name|applyRule
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|searchString
parameter_list|,
name|BibtexEntry
name|bibtexEntry
parameter_list|)
block|{
name|int
name|score
init|=
literal|0
decl_stmt|;
comment|// We let each rule add a maximum of 1 to the score.
for|for
control|(
name|SearchRule
name|rule
range|:
name|ruleSet
control|)
block|{
name|score
operator|+=
name|rule
operator|.
name|applyRule
argument_list|(
name|searchString
argument_list|,
name|bibtexEntry
argument_list|)
operator|>
literal|0
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
comment|// Then an AND rule demands that score == number of rules, and
comment|// an OR rule demands score> 0.
name|boolean
name|res
decl_stmt|;
if|if
condition|(
name|and
condition|)
block|{
name|res
operator|=
name|score
operator|==
name|ruleSet
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
name|score
operator|>
literal|0
expr_stmt|;
block|}
return|return
name|res
condition|?
literal|1
else|:
literal|0
return|;
block|}
block|}
end_class

end_unit

