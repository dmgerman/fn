begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|net.sf.jabref.search
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|search
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|util
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|SearchExpressionDescriber
specifier|public
class|class
name|SearchExpressionDescriber
block|{
DECL|field|caseSensitive
specifier|private
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
DECL|field|regExp
specifier|private
specifier|final
name|boolean
name|regExp
decl_stmt|;
DECL|field|expr
specifier|private
specifier|final
name|String
name|expr
decl_stmt|;
DECL|field|ast
specifier|private
specifier|final
name|AST
name|ast
decl_stmt|;
DECL|method|SearchExpressionDescriber (boolean caseSensitive, boolean regExp, String expr, AST ast)
specifier|public
name|SearchExpressionDescriber
parameter_list|(
name|boolean
name|caseSensitive
parameter_list|,
name|boolean
name|regExp
parameter_list|,
name|String
name|expr
parameter_list|,
name|AST
name|ast
parameter_list|)
block|{
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
name|this
operator|.
name|regExp
operator|=
name|regExp
expr_stmt|;
name|this
operator|.
name|expr
operator|=
name|expr
expr_stmt|;
name|this
operator|.
name|ast
operator|=
name|ast
expr_stmt|;
block|}
DECL|method|getDescriptionForPreview ()
specifier|public
name|String
name|getDescriptionForPreview
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|ast
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|regExp
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"This group contains entries in which any field contains the regular expression<b>%0</b>"
argument_list|,
name|StringUtil
operator|.
name|quoteForHTML
argument_list|(
name|expr
argument_list|)
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"This group contains entries in which any field contains the term<b>%0</b>"
argument_list|,
name|StringUtil
operator|.
name|quoteForHTML
argument_list|(
name|expr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|caseSensitive
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"case sensitive"
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"case insensitive"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"). "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Entries cannot be manually assigned to or removed from this group."
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<p><br>"
argument_list|)
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"Hint%c To search specific fields only, enter for example%c<p><tt>author%esmith and title%eelectrical</tt>"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// describe advanced search expression
name|sb
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"This group contains entries in which"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|describeNode
argument_list|(
name|ast
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|". "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|caseSensitive
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"The search is case sensitive."
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"The search is case insensitive."
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|describeNode (AST node, boolean not, boolean and, boolean or)
specifier|private
name|String
name|describeNode
parameter_list|(
name|AST
name|node
parameter_list|,
name|boolean
name|not
parameter_list|,
name|boolean
name|and
parameter_list|,
name|boolean
name|or
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|SearchExpressionTreeParserTokenTypes
operator|.
name|And
case|:
if|if
condition|(
name|not
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"not"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
comment|// if there was an "or" in this subtree so far, braces may be needed
if|if
condition|(
name|or
operator|||
name|not
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|describeNode
argument_list|(
name|node
operator|.
name|getFirstChild
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"and"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|describeNode
argument_list|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNextSibling
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|or
operator|||
name|not
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
case|case
name|SearchExpressionTreeParserTokenTypes
operator|.
name|Or
case|:
if|if
condition|(
name|not
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"not"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
comment|// if there was an "and" in this subtree so far, braces may be
comment|// needed
if|if
condition|(
name|and
operator|||
name|not
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|describeNode
argument_list|(
name|node
operator|.
name|getFirstChild
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"or"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|describeNode
argument_list|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNextSibling
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|and
operator|||
name|not
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
case|case
name|SearchExpressionTreeParserTokenTypes
operator|.
name|Not
case|:
return|return
name|describeNode
argument_list|(
name|node
operator|.
name|getFirstChild
argument_list|()
argument_list|,
operator|!
name|not
argument_list|,
name|and
argument_list|,
name|or
argument_list|)
return|;
default|default:
name|node
operator|=
name|node
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
specifier|final
name|String
name|field
init|=
name|node
operator|.
name|getText
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|regExpFieldSpec
init|=
operator|!
name|Pattern
operator|.
name|matches
argument_list|(
literal|"\\w+"
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
specifier|final
name|int
name|type
init|=
name|node
operator|.
name|getType
argument_list|()
decl_stmt|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
specifier|final
name|String
name|termQuoted
init|=
name|StringUtil
operator|.
name|quoteForHTML
argument_list|(
name|node
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fieldSpecQuoted
init|=
name|regExpFieldSpec
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"any field that matches the regular expression<b>%0</b>"
argument_list|,
name|StringUtil
operator|.
name|quoteForHTML
argument_list|(
name|field
argument_list|)
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"the field<b>%0</b>"
argument_list|,
name|StringUtil
operator|.
name|quoteForHTML
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SearchExpressionTreeParserTokenTypes
operator|.
name|LITERAL_contains
case|:
case|case
name|SearchExpressionTreeParserTokenTypes
operator|.
name|EQUAL
case|:
if|if
condition|(
name|regExp
condition|)
block|{
return|return
name|not
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 doesn't contain the Regular Expression<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 contains the Regular Expression<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
return|;
block|}
return|return
name|not
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 doesn't contain the term<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 contains the term<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
return|;
case|case
name|SearchExpressionTreeParserTokenTypes
operator|.
name|LITERAL_matches
case|:
case|case
name|SearchExpressionTreeParserTokenTypes
operator|.
name|EEQUAL
case|:
if|if
condition|(
name|regExp
condition|)
block|{
return|return
name|not
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 doesn't match the Regular Expression<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 matches the Regular Expression<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
return|;
block|}
return|return
name|not
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 doesn't match the term<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 matches the term<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
return|;
case|case
name|SearchExpressionTreeParserTokenTypes
operator|.
name|NEQUAL
case|:
if|if
condition|(
name|regExp
condition|)
block|{
return|return
name|not
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 contains the Regular Expression<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 doesn't contain the Regular Expression<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
return|;
block|}
return|return
name|not
condition|?
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 contains the term<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
else|:
name|Globals
operator|.
name|lang
argument_list|(
literal|"%0 doesn't contain the term<b>%1</b>"
argument_list|,
name|fieldSpecQuoted
argument_list|,
name|termQuoted
argument_list|)
return|;
default|default:
return|return
literal|"Internal error: Unknown AST node type. "
operator|+
literal|"Please report this on www.sf.net/projects/jabref"
return|;
comment|// this should never happen
block|}
block|}
block|}
block|}
end_class

end_unit

