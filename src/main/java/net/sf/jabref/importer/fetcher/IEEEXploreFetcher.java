begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2003-2015 JabRef contributors.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|net.sf.jabref.importer.fetcher
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|CookieHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|CookieManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|ImportInspector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|OutputPrinter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|bibtexfields
operator|.
name|HtmlToLatexFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|bibtexfields
operator|.
name|UnitsToLatexFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
operator|.
name|ProtectTermsFormatter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationLoader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|URLDownload
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_class
DECL|class|IEEEXploreFetcher
specifier|public
class|class
name|IEEEXploreFetcher
implements|implements
name|EntryFetcher
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IEEEXploreFetcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|URL_SEARCH
specifier|private
specifier|static
specifier|final
name|String
name|URL_SEARCH
init|=
literal|"http://ieeexplore.ieee.org/rest/search?reload=true"
decl_stmt|;
DECL|field|URL_BIBTEX_START
specifier|private
specifier|static
specifier|final
name|String
name|URL_BIBTEX_START
init|=
literal|"http://ieeexplore.ieee.org/xpl/downloadCitations?reload=true&recordIds="
decl_stmt|;
DECL|field|URL_BIBTEX_END
specifier|private
specifier|static
specifier|final
name|String
name|URL_BIBTEX_END
init|=
literal|"&download-format=download-bibtex&x=0&y=0"
decl_stmt|;
DECL|field|DIALOG_TITLE
specifier|private
specifier|static
specifier|final
name|String
name|DIALOG_TITLE
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Search %0"
argument_list|,
literal|"IEEEXplore"
argument_list|)
decl_stmt|;
DECL|field|MAX_FETCH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_FETCH
init|=
literal|100
decl_stmt|;
DECL|field|PUBLICATION_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|PUBLICATION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*), \\d*\\.*\\s?(.*)"
argument_list|)
decl_stmt|;
DECL|field|PROCEEDINGS_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROCEEDINGS_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*?)\\.?\\s?Proceedings\\s?(.*)"
argument_list|)
decl_stmt|;
DECL|field|MONTH_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|MONTH_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d*+)\\s*([a-z]*+)-*(\\d*+)\\s*([a-z]*+)"
argument_list|)
decl_stmt|;
DECL|field|PREPROCESSING_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|PREPROCESSING_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?<!&)(#[x]*[0]*\\p{XDigit}+;)"
argument_list|)
decl_stmt|;
DECL|field|SUB_DETECTION_1
specifier|private
specifier|static
specifier|final
name|Pattern
name|SUB_DETECTION_1
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/sub ([^/]+)/"
argument_list|)
decl_stmt|;
DECL|field|SUB_DETECTION_2
specifier|private
specifier|static
specifier|final
name|Pattern
name|SUB_DETECTION_2
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\(sub\\)([^(]+)\\(/sub\\)"
argument_list|)
decl_stmt|;
DECL|field|SUB_TEXT_RESULT
specifier|private
specifier|static
specifier|final
name|String
name|SUB_TEXT_RESULT
init|=
literal|"\\\\textsubscript\\{$1\\}"
decl_stmt|;
DECL|field|SUB_EQ_RESULT
specifier|private
specifier|static
specifier|final
name|String
name|SUB_EQ_RESULT
init|=
literal|"\\$_\\{$1\\}\\$"
decl_stmt|;
DECL|field|SUPER_DETECTION_1
specifier|private
specifier|static
specifier|final
name|Pattern
name|SUPER_DETECTION_1
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/sup ([^/]+)/"
argument_list|)
decl_stmt|;
DECL|field|SUPER_DETECTION_2
specifier|private
specifier|static
specifier|final
name|Pattern
name|SUPER_DETECTION_2
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\(sup\\)([^(]+)\\(/sup\\)"
argument_list|)
decl_stmt|;
DECL|field|SUPER_TEXT_RESULT
specifier|private
specifier|static
specifier|final
name|String
name|SUPER_TEXT_RESULT
init|=
literal|"\\\\textsuperscript\\{$1\\}"
decl_stmt|;
DECL|field|SUPER_EQ_RESULT
specifier|private
specifier|static
specifier|final
name|String
name|SUPER_EQ_RESULT
init|=
literal|"\\$\\^\\{$1\\}\\$"
decl_stmt|;
DECL|field|protectTermsFormatter
specifier|private
specifier|final
name|ProtectTermsFormatter
name|protectTermsFormatter
init|=
operator|new
name|ProtectTermsFormatter
argument_list|()
decl_stmt|;
DECL|field|unitsToLatexFormatter
specifier|private
specifier|final
name|UnitsToLatexFormatter
name|unitsToLatexFormatter
init|=
operator|new
name|UnitsToLatexFormatter
argument_list|()
decl_stmt|;
DECL|field|htmlToLatexFormatter
specifier|private
specifier|final
name|HtmlToLatexFormatter
name|htmlToLatexFormatter
init|=
operator|new
name|HtmlToLatexFormatter
argument_list|()
decl_stmt|;
DECL|field|absCheckBox
specifier|private
specifier|final
name|JCheckBox
name|absCheckBox
init|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Include abstracts"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|shouldContinue
specifier|private
name|boolean
name|shouldContinue
decl_stmt|;
DECL|field|abbreviationLoader
specifier|private
specifier|final
name|JournalAbbreviationLoader
name|abbreviationLoader
decl_stmt|;
DECL|method|IEEEXploreFetcher (JournalAbbreviationLoader abbreviationLoader)
specifier|public
name|IEEEXploreFetcher
parameter_list|(
name|JournalAbbreviationLoader
name|abbreviationLoader
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|abbreviationLoader
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|abbreviationLoader
argument_list|)
expr_stmt|;
name|CookieHandler
operator|.
name|setDefault
argument_list|(
operator|new
name|CookieManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOptionsPanel ()
specifier|public
name|JPanel
name|getOptionsPanel
parameter_list|()
block|{
name|JPanel
name|pan
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|pan
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|pan
operator|.
name|add
argument_list|(
name|absCheckBox
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
return|return
name|pan
return|;
block|}
annotation|@
name|Override
DECL|method|processQuery (String query, ImportInspector dialog, OutputPrinter status)
specifier|public
name|boolean
name|processQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|ImportInspector
name|dialog
parameter_list|,
name|OutputPrinter
name|status
parameter_list|)
block|{
comment|//IEEE API seems to use .QT. as a marker for the quotes for exact phrase searching
name|String
name|terms
init|=
name|query
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|"\\.QT\\."
argument_list|)
decl_stmt|;
name|shouldContinue
operator|=
literal|true
expr_stmt|;
name|int
name|parsed
init|=
literal|0
decl_stmt|;
name|int
name|pageNumber
init|=
literal|1
decl_stmt|;
name|String
name|postData
init|=
name|makeSearchPostRequestPayload
argument_list|(
name|pageNumber
argument_list|,
name|terms
argument_list|)
decl_stmt|;
try|try
block|{
comment|//open the search URL
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|IEEEXploreFetcher
operator|.
name|URL_SEARCH
argument_list|)
decl_stmt|;
name|URLDownload
name|dl
init|=
operator|new
name|URLDownload
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|//add request header
name|dl
operator|.
name|addParameters
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|dl
operator|.
name|addParameters
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
comment|// set post data
name|dl
operator|.
name|setPostData
argument_list|(
name|postData
argument_list|)
expr_stmt|;
comment|//retrieve the search results
name|String
name|page
init|=
name|dl
operator|.
name|downloadToString
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
comment|//the page can be blank if the search did not work (not sure the exact conditions that lead to this, but declaring it an invalid search for now)
if|if
condition|(
name|page
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"You have entered an invalid search '%0'."
argument_list|,
name|query
argument_list|)
argument_list|,
name|DIALOG_TITLE
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//parses the JSON data returned by the query
comment|//TODO: a faster way would be to parse the JSON tokens one at a time just to extract the article number, but this seems to be fast enough...
name|JSONObject
name|searchResultsJson
init|=
operator|new
name|JSONObject
argument_list|(
name|page
argument_list|)
decl_stmt|;
name|int
name|hits
init|=
name|searchResultsJson
operator|.
name|getInt
argument_list|(
literal|"totalRecords"
argument_list|)
decl_stmt|;
comment|//if no search results were found
if|if
condition|(
name|hits
operator|==
literal|0
condition|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No entries found for the search string '%0'"
argument_list|,
name|query
argument_list|)
argument_list|,
name|DIALOG_TITLE
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//if max hits were exceeded, display the warning
if|if
condition|(
name|hits
operator|>
name|IEEEXploreFetcher
operator|.
name|MAX_FETCH
condition|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"%0 entries found. To reduce server load, only %1 will be downloaded."
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|hits
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|IEEEXploreFetcher
operator|.
name|MAX_FETCH
argument_list|)
argument_list|)
argument_list|,
name|DIALOG_TITLE
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
block|}
comment|//fetch the raw Bibtex results from IEEEXplore
name|URL
name|bibtexURL
init|=
operator|new
name|URL
argument_list|(
name|createBibtexQueryURL
argument_list|(
name|searchResultsJson
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|bibtexPage
init|=
operator|new
name|URLDownload
argument_list|(
name|bibtexURL
argument_list|)
operator|.
name|downloadToString
argument_list|()
decl_stmt|;
comment|//preprocess the result (eg. convert HTML escaped characters to latex and do other formatting not performed by BibtexParser)
name|bibtexPage
operator|=
name|preprocessBibtexResultsPage
argument_list|(
name|bibtexPage
argument_list|)
expr_stmt|;
comment|//parse the page into Bibtex entries
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|parsedBibtexCollection
init|=
name|BibtexParser
operator|.
name|fromString
argument_list|(
name|bibtexPage
argument_list|)
decl_stmt|;
if|if
condition|(
name|parsedBibtexCollection
operator|==
literal|null
condition|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error while fetching from %0"
argument_list|,
name|getTitle
argument_list|()
argument_list|)
argument_list|,
name|DIALOG_TITLE
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|nEntries
init|=
name|parsedBibtexCollection
operator|.
name|size
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|BibEntry
argument_list|>
name|parsedBibtexCollectionIterator
init|=
name|parsedBibtexCollection
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|parsedBibtexCollectionIterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|shouldContinue
condition|)
block|{
name|dialog
operator|.
name|addEntry
argument_list|(
name|cleanup
argument_list|(
name|parsedBibtexCollectionIterator
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setProgress
argument_list|(
name|parsed
argument_list|,
name|nEntries
argument_list|)
expr_stmt|;
name|parsed
operator|++
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Bad URL"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectException
decl||
name|UnknownHostException
name|e
parameter_list|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not connect to %0"
argument_list|,
name|getTitle
argument_list|()
argument_list|)
argument_list|,
name|DIALOG_TITLE
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|JSONException
name|e
parameter_list|)
block|{
name|status
operator|.
name|showMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|DIALOG_TITLE
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Search IEEEXplore: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getTitle ()
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
literal|"IEEEXplore"
return|;
block|}
annotation|@
name|Override
DECL|method|getHelpPage ()
specifier|public
name|String
name|getHelpPage
parameter_list|()
block|{
return|return
literal|"IEEEXploreHelp"
return|;
block|}
comment|/**      * This method is called by the dialog when the user has canceled the import.      */
annotation|@
name|Override
DECL|method|stopFetching ()
specifier|public
name|void
name|stopFetching
parameter_list|()
block|{
name|shouldContinue
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|makeSearchPostRequestPayload (int startIndex, String terms)
specifier|private
name|String
name|makeSearchPostRequestPayload
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|String
name|terms
parameter_list|)
block|{
return|return
literal|"{\"queryText\":"
operator|+
name|JSONObject
operator|.
name|quote
argument_list|(
name|terms
argument_list|)
operator|+
literal|",\"refinements\":[],\"pageNumber\":\""
operator|+
name|startIndex
operator|+
literal|"\",\"searchWithin\":[],\"newsearch\":\"true\",\"searchField\":\"Search_All\",\"rowsPerPage\":\"100\"}"
return|;
block|}
DECL|method|createBibtexQueryURL (JSONObject searchResultsJson)
specifier|private
name|String
name|createBibtexQueryURL
parameter_list|(
name|JSONObject
name|searchResultsJson
parameter_list|)
block|{
comment|//buffer to use for building the URL for fetching the bibtex data from IEEEXplore
name|StringBuilder
name|bibtexQueryURLStringBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|bibtexQueryURLStringBuf
operator|.
name|append
argument_list|(
name|URL_BIBTEX_START
argument_list|)
expr_stmt|;
comment|//loop over each record and create a comma-separate list of article numbers which will be used to download the raw Bibtex
name|JSONArray
name|recordsJsonArray
init|=
name|searchResultsJson
operator|.
name|getJSONArray
argument_list|(
literal|"records"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|recordsJsonArray
operator|.
name|length
argument_list|()
condition|;
name|n
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|recordsJsonArray
operator|.
name|getJSONObject
argument_list|(
name|n
argument_list|)
operator|.
name|isNull
argument_list|(
literal|"articleNumber"
argument_list|)
condition|)
block|{
name|bibtexQueryURLStringBuf
operator|.
name|append
argument_list|(
name|recordsJsonArray
operator|.
name|getJSONObject
argument_list|(
name|n
argument_list|)
operator|.
name|getString
argument_list|(
literal|"articleNumber"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
comment|//delete the last comma
name|bibtexQueryURLStringBuf
operator|.
name|deleteCharAt
argument_list|(
name|bibtexQueryURLStringBuf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//add the abstract setting
name|boolean
name|includeAbstract
init|=
name|absCheckBox
operator|.
name|isSelected
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeAbstract
condition|)
block|{
name|bibtexQueryURLStringBuf
operator|.
name|append
argument_list|(
literal|"&citations-format=citation-abstract"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bibtexQueryURLStringBuf
operator|.
name|append
argument_list|(
literal|"&citations-format=citation-only"
argument_list|)
expr_stmt|;
block|}
comment|//append the remaining URL
name|bibtexQueryURLStringBuf
operator|.
name|append
argument_list|(
name|URL_BIBTEX_END
argument_list|)
expr_stmt|;
return|return
name|bibtexQueryURLStringBuf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|preprocessBibtexResultsPage (String bibtexPage)
specifier|private
name|String
name|preprocessBibtexResultsPage
parameter_list|(
name|String
name|bibtexPage
parameter_list|)
block|{
comment|//for some reason, the escaped HTML characters in the titles are in the format "#xNNNN" (they are missing the ampersand)
comment|//add the ampersands back in before passing to the HTML formatter so they can be properly converted
comment|//TODO: Maybe edit the HTMLconverter to also recognize escaped characters even when the& is missing?
name|String
name|result
init|=
name|PREPROCESSING_PATTERN
operator|.
name|matcher
argument_list|(
name|bibtexPage
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"&$1"
argument_list|)
decl_stmt|;
comment|//Also, percent signs are not escaped by the IEEEXplore Bibtex output nor, it would appear, the subsequent processing in JabRef
comment|//TODO: Maybe find a better spot for this if it applies more universally
name|result
operator|=
name|result
operator|.
name|replaceAll
argument_list|(
literal|"(?<!\\\\)%"
argument_list|,
literal|"\\\\%"
argument_list|)
expr_stmt|;
comment|//Format the bibtexResults using the HTML formatter (clears up numerical and text escaped characters and remaining HTML tags)
name|result
operator|=
name|htmlToLatexFormatter
operator|.
name|format
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|cleanup (BibEntry entry)
specifier|private
name|BibEntry
name|cleanup
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// clean up title
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
name|String
name|title
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
comment|// USe the alt-text and replace image links
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"[ ]?img src=[^ ]+ alt=\"([^\"]+)\">[ ]?"
argument_list|,
literal|"\\$$1\\$"
argument_list|)
expr_stmt|;
comment|// Try to sort out most of the /spl / conversions
comment|// Deal with this specific nested type first
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"/sub /spl infin//"
argument_list|,
literal|"\\$_\\\\infty\\$"
argument_list|)
expr_stmt|;
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"/sup /spl infin//"
argument_list|,
literal|"\\$\\^\\\\infty\\$"
argument_list|)
expr_stmt|;
comment|// Replace general expressions
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"/[sS]pl ([^/]+)/"
argument_list|,
literal|"\\$\\\\$1\\$"
argument_list|)
expr_stmt|;
comment|// Deal with subscripts and superscripts
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_CONVERT_TO_EQUATION
argument_list|)
condition|)
block|{
name|title
operator|=
name|SUPER_DETECTION_1
operator|.
name|matcher
argument_list|(
name|title
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUPER_EQ_RESULT
argument_list|)
expr_stmt|;
name|title
operator|=
name|SUB_DETECTION_1
operator|.
name|matcher
argument_list|(
name|title
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUB_EQ_RESULT
argument_list|)
expr_stmt|;
name|title
operator|=
name|SUPER_DETECTION_2
operator|.
name|matcher
argument_list|(
name|title
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUPER_EQ_RESULT
argument_list|)
expr_stmt|;
name|title
operator|=
name|SUB_DETECTION_2
operator|.
name|matcher
argument_list|(
name|title
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUB_EQ_RESULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|title
operator|=
name|SUPER_DETECTION_1
operator|.
name|matcher
argument_list|(
name|title
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUPER_TEXT_RESULT
argument_list|)
expr_stmt|;
name|title
operator|=
name|SUB_DETECTION_1
operator|.
name|matcher
argument_list|(
name|title
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUB_TEXT_RESULT
argument_list|)
expr_stmt|;
name|title
operator|=
name|SUPER_DETECTION_2
operator|.
name|matcher
argument_list|(
name|title
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUPER_TEXT_RESULT
argument_list|)
expr_stmt|;
name|title
operator|=
name|SUB_DETECTION_2
operator|.
name|matcher
argument_list|(
name|title
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUB_TEXT_RESULT
argument_list|)
expr_stmt|;
block|}
comment|// Replace \infin with \infty
name|title
operator|=
name|title
operator|.
name|replaceAll
argument_list|(
literal|"\\\\infin"
argument_list|,
literal|"\\\\infty"
argument_list|)
expr_stmt|;
comment|// Unit formatting
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_UNIT_FORMATTER_ON_SEARCH
argument_list|)
condition|)
block|{
name|title
operator|=
name|unitsToLatexFormatter
operator|.
name|format
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
comment|// Automatic case keeping
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_CASE_KEEPER_ON_SEARCH
argument_list|)
condition|)
block|{
name|title
operator|=
name|protectTermsFormatter
operator|.
name|format
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
comment|// Write back
name|entry
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
comment|// clean up author
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
literal|"author"
argument_list|)
condition|)
block|{
name|String
name|author
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|author
operator|=
name|author
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|//reorder the "Jr." "Sr." etc to the correct ordering
name|String
index|[]
name|authorSplit
init|=
name|author
operator|.
name|split
argument_list|(
literal|"(^\\s*|\\s*$|\\s+and\\s+)"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|authorResult
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|authorSplitPart
range|:
name|authorSplit
control|)
block|{
name|authorResult
operator|.
name|add
argument_list|(
name|authorSplitPart
operator|.
name|replaceAll
argument_list|(
literal|"(.+?),(.+?),(.+)"
argument_list|,
literal|"$1,$3,$2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|author
operator|=
name|String
operator|.
name|join
argument_list|(
literal|" and "
argument_list|,
name|authorResult
argument_list|)
expr_stmt|;
name|author
operator|=
name|author
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|". "
argument_list|)
operator|.
name|replace
argument_list|(
literal|"  "
argument_list|,
literal|" "
argument_list|)
operator|.
name|replace
argument_list|(
literal|". -"
argument_list|,
literal|".-"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"; "
argument_list|,
literal|" and "
argument_list|)
operator|.
name|replace
argument_list|(
literal|" ,"
argument_list|,
literal|","
argument_list|)
operator|.
name|replace
argument_list|(
literal|"  "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|author
operator|=
name|author
operator|.
name|replaceAll
argument_list|(
literal|"[ ,;]+$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|//TODO: remove trailing commas
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
name|author
argument_list|)
expr_stmt|;
block|}
comment|// clean up month
name|String
name|month
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"month"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|month
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|month
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|month
operator|=
name|month
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|month
operator|=
name|month
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|Matcher
name|mm
init|=
name|MONTH_PATTERN
operator|.
name|matcher
argument_list|(
name|month
argument_list|)
decl_stmt|;
name|StringBuilder
name|date
init|=
operator|new
name|StringBuilder
argument_list|(
name|month
argument_list|)
decl_stmt|;
if|if
condition|(
name|mm
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|mm
operator|.
name|group
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|mm
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|date
operator|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|mm
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|date
operator|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
operator|.
name|append
argument_list|(
name|mm
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mm
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|date
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|mm
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|mm
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|mm
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|date
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|date
operator|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
operator|.
name|append
argument_list|(
name|mm
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
operator|.
name|append
argument_list|(
name|mm
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"--"
argument_list|)
operator|.
name|append
argument_list|(
name|mm
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|date
operator|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
operator|.
name|append
argument_list|(
name|mm
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
operator|.
name|append
argument_list|(
name|mm
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"--#"
argument_list|)
operator|.
name|append
argument_list|(
name|mm
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
operator|.
name|append
argument_list|(
name|mm
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
name|entry
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
name|date
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// clean up pages
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
literal|"pages"
argument_list|)
condition|)
block|{
name|String
name|pages
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"pages"
argument_list|)
decl_stmt|;
name|String
index|[]
name|pageNumbers
init|=
name|pages
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pageNumbers
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|pageNumbers
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|pageNumbers
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
comment|// single page
name|entry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
name|pageNumbers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
name|pages
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|"--"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// clean up publication field
name|String
name|type
init|=
name|entry
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|sourceField
init|=
literal|""
decl_stmt|;
if|if
condition|(
literal|"article"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|sourceField
operator|=
literal|"journal"
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"booktitle"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"inproceedings"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|sourceField
operator|=
literal|"booktitle"
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
name|sourceField
argument_list|)
condition|)
block|{
name|String
name|fullName
init|=
name|entry
operator|.
name|getField
argument_list|(
name|sourceField
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"article"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|int
name|ind
init|=
name|fullName
operator|.
name|indexOf
argument_list|(
literal|": Accepted for future publication"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind
operator|>
literal|0
condition|)
block|{
name|fullName
operator|=
name|fullName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"to be published"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"month"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"pages"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|parts
init|=
name|fullName
operator|.
name|split
argument_list|(
literal|"[\\[\\]]"
argument_list|)
decl_stmt|;
comment|//[see also...], [legacy...]
name|fullName
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|fullName
operator|+=
name|parts
index|[
literal|2
index|]
expr_stmt|;
block|}
name|String
name|note
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"note"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Early Access"
operator|.
name|equals
argument_list|(
name|note
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
literal|"to be published"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"month"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"pages"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fullName
operator|=
name|fullName
operator|.
name|replace
argument_list|(
literal|"Conference Proceedings"
argument_list|,
literal|"Proceedings"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Proceedings of"
argument_list|,
literal|"Proceedings"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Proceedings."
argument_list|,
literal|"Proceedings"
argument_list|)
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|replace
argument_list|(
literal|"International"
argument_list|,
literal|"Int."
argument_list|)
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|replace
argument_list|(
literal|"Symposium"
argument_list|,
literal|"Symp."
argument_list|)
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|replace
argument_list|(
literal|"Conference"
argument_list|,
literal|"Conf."
argument_list|)
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|replace
argument_list|(
literal|" on"
argument_list|,
literal|" "
argument_list|)
operator|.
name|replace
argument_list|(
literal|"  "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
name|Matcher
name|m1
init|=
name|PUBLICATION_PATTERN
operator|.
name|matcher
argument_list|(
name|fullName
argument_list|)
decl_stmt|;
name|String
name|abrvPattern
init|=
literal|".*[^,] '?\\d+\\)?"
decl_stmt|;
if|if
condition|(
name|m1
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|prefix
init|=
name|m1
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|postfix
init|=
name|m1
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|abrv
init|=
literal|""
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|prefix
operator|.
name|split
argument_list|(
literal|"\\. "
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|matches
argument_list|(
name|abrvPattern
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
name|abrv
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|abrv
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prefix
operator|.
name|matches
argument_list|(
name|abrvPattern
argument_list|)
condition|)
block|{
name|fullName
operator|=
name|postfix
operator|+
literal|" "
operator|+
name|prefix
expr_stmt|;
block|}
else|else
block|{
name|fullName
operator|=
name|prefix
operator|+
literal|" "
operator|+
name|postfix
operator|+
literal|" "
operator|+
name|abrv
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"article"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|fullName
operator|=
name|fullName
operator|.
name|replace
argument_list|(
literal|" - "
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
comment|//IEE Proceedings-
name|fullName
operator|=
name|fullName
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_IEEE_ABRV
argument_list|)
condition|)
block|{
name|fullName
operator|=
name|abbreviationLoader
operator|.
name|getRepository
argument_list|()
operator|.
name|getMedlineAbbreviation
argument_list|(
name|fullName
argument_list|)
operator|.
name|orElse
argument_list|(
name|fullName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"inproceedings"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Matcher
name|m2
init|=
name|PROCEEDINGS_PATTERN
operator|.
name|matcher
argument_list|(
name|fullName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m2
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|prefix
init|=
name|m2
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|postfix
init|=
name|m2
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\.$"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|matches
argument_list|(
name|abrvPattern
argument_list|)
condition|)
block|{
name|fullName
operator|=
name|postfix
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|prefix
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|abrv
init|=
literal|""
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|postfix
operator|.
name|split
argument_list|(
literal|"\\. "
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|matches
argument_list|(
name|abrvPattern
argument_list|)
condition|)
block|{
name|postfix
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
name|abrv
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|postfix
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|abrv
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
name|fullName
operator|=
name|prefix
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|postfix
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|abrv
expr_stmt|;
block|}
block|}
name|fullName
operator|=
name|fullName
operator|.
name|trim
argument_list|()
expr_stmt|;
name|fullName
operator|=
name|fullName
operator|.
name|replaceAll
argument_list|(
literal|"^[tT]he "
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"^\\d{4} "
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"[,.]$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|year
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
if|if
condition|(
name|year
operator|!=
literal|null
condition|)
block|{
name|fullName
operator|=
name|fullName
operator|.
name|replaceAll
argument_list|(
literal|", "
operator|+
name|year
operator|+
literal|"\\.?"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fullName
operator|.
name|contains
argument_list|(
literal|"Abstract"
argument_list|)
operator|&&
operator|!
name|fullName
operator|.
name|contains
argument_list|(
literal|"Summaries"
argument_list|)
operator|&&
operator|!
name|fullName
operator|.
name|contains
argument_list|(
literal|"Conference Record"
argument_list|)
condition|)
block|{
name|fullName
operator|=
literal|"Proc. "
operator|+
name|fullName
expr_stmt|;
block|}
block|}
name|entry
operator|.
name|setField
argument_list|(
name|sourceField
argument_list|,
name|fullName
argument_list|)
expr_stmt|;
block|}
comment|// clean up abstract
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
literal|"abstract"
argument_list|)
condition|)
block|{
name|String
name|abstr
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"abstract"
argument_list|)
decl_stmt|;
comment|// Try to sort out most of the /spl / conversions
comment|// Deal with this specific nested type first
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"/sub /spl infin//"
argument_list|,
literal|"\\$_\\\\infty\\$"
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"/sup /spl infin//"
argument_list|,
literal|"\\$\\^\\\\infty\\$"
argument_list|)
expr_stmt|;
comment|// Replace general expressions
name|abstr
operator|=
name|abstr
operator|.
name|replaceAll
argument_list|(
literal|"/[sS]pl ([^/]+)/"
argument_list|,
literal|"\\$\\\\$1\\$"
argument_list|)
expr_stmt|;
comment|// Deal with subscripts and superscripts
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_CONVERT_TO_EQUATION
argument_list|)
condition|)
block|{
name|abstr
operator|=
name|SUPER_DETECTION_1
operator|.
name|matcher
argument_list|(
name|abstr
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUPER_EQ_RESULT
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|SUB_DETECTION_1
operator|.
name|matcher
argument_list|(
name|abstr
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUB_EQ_RESULT
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|SUPER_DETECTION_2
operator|.
name|matcher
argument_list|(
name|abstr
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUPER_EQ_RESULT
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|SUB_DETECTION_2
operator|.
name|matcher
argument_list|(
name|abstr
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUB_EQ_RESULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|abstr
operator|=
name|SUPER_DETECTION_1
operator|.
name|matcher
argument_list|(
name|abstr
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUPER_TEXT_RESULT
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|SUB_DETECTION_1
operator|.
name|matcher
argument_list|(
name|abstr
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUB_TEXT_RESULT
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|SUPER_DETECTION_2
operator|.
name|matcher
argument_list|(
name|abstr
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUPER_TEXT_RESULT
argument_list|)
expr_stmt|;
name|abstr
operator|=
name|SUB_DETECTION_2
operator|.
name|matcher
argument_list|(
name|abstr
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SUB_TEXT_RESULT
argument_list|)
expr_stmt|;
block|}
comment|// Replace \infin with \infty
name|abstr
operator|=
name|abstr
operator|.
name|replace
argument_list|(
literal|"\\infin"
argument_list|,
literal|"\\infty"
argument_list|)
expr_stmt|;
comment|// Write back
name|entry
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
name|abstr
argument_list|)
expr_stmt|;
block|}
comment|// Clean up url
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"url"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|url
lambda|->
name|entry
operator|.
name|setField
argument_list|(
literal|"url"
argument_list|,
literal|"http://ieeexplore.ieee.org"
operator|+
name|url
operator|.
name|replace
argument_list|(
literal|"tp=&"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replace ; as keyword separator
name|entry
operator|.
name|getFieldOptional
argument_list|(
literal|"keywords"
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|keys
lambda|->
name|entry
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
name|keys
operator|.
name|replace
argument_list|(
literal|";"
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_KEYWORD_SEPARATOR
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
block|}
end_class

end_unit

