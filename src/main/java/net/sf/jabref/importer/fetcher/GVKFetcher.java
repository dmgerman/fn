begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|gvkPlugin
package|package
name|gvkPlugin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|OutputPrinter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|ImportInspectionDialog
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|EntryFetcher
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|imports
operator|.
name|ImportInspector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_comment
comment|/**  * Fetch or search from GVK http://gso.gbv.de/sru/DB=2.1/  */
end_comment

begin_class
DECL|class|GVKFetcher
specifier|public
class|class
name|GVKFetcher
implements|implements
name|EntryFetcher
block|{
DECL|field|searchKeys
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|searchKeys
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|GVKFetcher ()
specifier|public
name|GVKFetcher
parameter_list|()
block|{
name|searchKeys
operator|.
name|put
argument_list|(
literal|"all"
argument_list|,
literal|"pica.all%3D"
argument_list|)
expr_stmt|;
name|searchKeys
operator|.
name|put
argument_list|(
literal|"tit"
argument_list|,
literal|"pica.tit%3D"
argument_list|)
expr_stmt|;
name|searchKeys
operator|.
name|put
argument_list|(
literal|"per"
argument_list|,
literal|"pica.per%3D"
argument_list|)
expr_stmt|;
name|searchKeys
operator|.
name|put
argument_list|(
literal|"thm"
argument_list|,
literal|"pica.thm%3D"
argument_list|)
expr_stmt|;
name|searchKeys
operator|.
name|put
argument_list|(
literal|"slw"
argument_list|,
literal|"pica.slw%3D"
argument_list|)
expr_stmt|;
name|searchKeys
operator|.
name|put
argument_list|(
literal|"txt"
argument_list|,
literal|"pica.txt%3D"
argument_list|)
expr_stmt|;
name|searchKeys
operator|.
name|put
argument_list|(
literal|"num"
argument_list|,
literal|"pica.num%3D"
argument_list|)
expr_stmt|;
name|searchKeys
operator|.
name|put
argument_list|(
literal|"kon"
argument_list|,
literal|"pica.kon%3D"
argument_list|)
expr_stmt|;
name|searchKeys
operator|.
name|put
argument_list|(
literal|"ppn"
argument_list|,
literal|"pica.ppn%3D"
argument_list|)
expr_stmt|;
name|searchKeys
operator|.
name|put
argument_list|(
literal|"bkl"
argument_list|,
literal|"pica.bkl%3D"
argument_list|)
expr_stmt|;
name|searchKeys
operator|.
name|put
argument_list|(
literal|"erj"
argument_list|,
literal|"pica.erj%3D"
argument_list|)
expr_stmt|;
block|}
DECL|field|shouldContinue
name|boolean
name|shouldContinue
decl_stmt|;
comment|//OutputPrinter frame;
DECL|field|dialog
name|ImportInspector
name|dialog
decl_stmt|;
comment|/**      * Necessary for JabRef      */
DECL|method|stopFetching ()
specifier|public
name|void
name|stopFetching
parameter_list|()
block|{
name|shouldContinue
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Get the name of the help page for this fetcher.      *       * If given, a question mark is displayed in the side pane which leads to      * the help page.      *       * @return The name of the help file or null if this fetcher does not have      *         any help.      */
DECL|method|getHelpPage ()
specifier|public
name|String
name|getHelpPage
parameter_list|()
block|{
comment|//return GUIGlobals.medlineHelp;
return|return
literal|null
return|;
block|}
comment|/**      * Get the appropriate icon URL for this fetcher.      *       * @return The icon URL      */
DECL|method|getIcon ()
specifier|public
name|URL
name|getIcon
parameter_list|()
block|{
return|return
name|GUIGlobals
operator|.
name|getIconUrl
argument_list|(
literal|"www"
argument_list|)
return|;
block|}
comment|/**      * Get the name of the key binding for this fetcher, if any.      *       * @return The name of the key binding or null, if no keybinding should be      *         created.      */
DECL|method|getKeyName ()
specifier|public
name|String
name|getKeyName
parameter_list|()
block|{
comment|// return "Fetch GVK";
return|return
literal|null
return|;
block|}
comment|/**      * If this fetcher requires additional options, a panel for setting up these      * should be returned in a JPanel by this method. This JPanel will be added      * to the side pane component automatically.      *       * @return Options panel for this fetcher or null if this fetcher does not      *         have any options.      */
DECL|method|getOptionsPanel ()
specifier|public
name|JPanel
name|getOptionsPanel
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * The title for this fetcher, displayed in the menu and in the side pane.      *       * @return The title      */
DECL|method|getTitle ()
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|Globals
operator|.
name|menuTitle
argument_list|(
literal|"Search GVK"
argument_list|)
return|;
block|}
comment|/**      * Handle a query entered by the user.      *       * The method is expected to block the caller until all entries have been      * reported to the inspector.      *       * @param query      *            The query text.      * @param inspector      *            The dialog to add imported entries to.      * @param status      *            An OutputPrinter passed to the fetcher for reporting about the      *            status of the fetching.      *       * @return True if the query was completed successfully, false if an error      *         occurred.      */
DECL|method|processQuery (String query, ImportInspector dialog, OutputPrinter frame)
specifier|public
name|boolean
name|processQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|ImportInspector
name|dialog
parameter_list|,
name|OutputPrinter
name|frame
parameter_list|)
block|{
name|String
name|gvkQuery
init|=
literal|""
decl_stmt|;
name|boolean
name|shouldContinue
init|=
literal|true
decl_stmt|;
name|query
operator|=
name|query
operator|.
name|trim
argument_list|()
expr_stmt|;
name|String
index|[]
name|qterms
init|=
name|query
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
comment|// Null abfangen!
if|if
condition|(
name|qterms
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Jeden einzelnen Suchbegriff URL-Encodieren
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|qterms
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
try|try
block|{
name|qterms
index|[
name|x
index|]
operator|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|qterms
index|[
name|x
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unsupported encoding"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
if|if
condition|(
name|searchKeys
operator|.
name|containsKey
argument_list|(
name|qterms
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|gvkQuery
operator|=
name|processComplexQuery
argument_list|(
name|qterms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gvkQuery
operator|=
literal|"pica.all%3D"
expr_stmt|;
name|gvkQuery
operator|=
name|gvkQuery
operator|.
name|concat
argument_list|(
name|qterms
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
name|qterms
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|gvkQuery
operator|=
name|gvkQuery
operator|.
name|concat
argument_list|(
literal|"%20"
argument_list|)
expr_stmt|;
name|gvkQuery
operator|=
name|gvkQuery
operator|.
name|concat
argument_list|(
name|qterms
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|bibs
init|=
name|fetchGVK
argument_list|(
name|gvkQuery
argument_list|)
decl_stmt|;
for|for
control|(
name|BibtexEntry
name|entry
range|:
name|bibs
control|)
block|{
name|dialog
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bibs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|frame
operator|.
name|showMessage
argument_list|(
name|Globals
operator|.
name|lang
argument_list|(
literal|"No references found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|processComplexQuery (String[] s)
specifier|private
name|String
name|processComplexQuery
parameter_list|(
name|String
index|[]
name|s
parameter_list|)
block|{
name|String
name|result
init|=
literal|""
decl_stmt|;
name|boolean
name|lastWasKey
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|s
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|searchKeys
operator|.
name|containsKey
argument_list|(
name|s
index|[
name|x
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|x
operator|==
literal|0
operator|)
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|concat
argument_list|(
literal|"%20and%20"
operator|+
name|searchKeys
operator|.
name|get
argument_list|(
name|s
index|[
name|x
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|searchKeys
operator|.
name|get
argument_list|(
name|s
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
name|lastWasKey
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|lastWasKey
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|concat
argument_list|(
literal|"%20"
argument_list|)
expr_stmt|;
block|}
name|String
name|encoded
init|=
name|s
index|[
name|x
index|]
decl_stmt|;
name|encoded
operator|=
name|encoded
operator|.
name|replaceAll
argument_list|(
literal|","
argument_list|,
literal|"%2C"
argument_list|)
expr_stmt|;
name|encoded
operator|=
name|encoded
operator|.
name|replaceAll
argument_list|(
literal|"\\?"
argument_list|,
literal|"%3F"
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|concat
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|lastWasKey
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
operator|(
name|result
operator|)
return|;
block|}
DECL|method|fetchGVK (String query)
specifier|private
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|fetchGVK
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|List
argument_list|<
name|BibtexEntry
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|String
name|urlPrefix
init|=
literal|"http://sru.gbv.de/gvk?version=1.1&operation=searchRetrieve&query="
decl_stmt|;
name|String
name|urlQuery
init|=
name|query
decl_stmt|;
name|String
name|urlSuffix
init|=
literal|"&maximumRecords=50&recordSchema=picaxml&sortKeys=Year%2C%2C1"
decl_stmt|;
comment|//Systemmeldung zum Debugging (JabRef Ã¼ber bash starten)
comment|//System.out.println(urlPrefix+query+urlSuffix);
name|String
name|searchstring
init|=
operator|(
name|urlPrefix
operator|+
name|urlQuery
operator|+
name|urlSuffix
operator|)
decl_stmt|;
comment|//Systemmeldung zum Debugging (JabRef Ã¼ber bash starten)
comment|//System.out.println(searchstring);
try|try
block|{
name|URI
name|uri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|searchstring
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"URI malformed error"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|new
name|ArrayList
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|()
operator|)
return|;
block|}
comment|// URL url = new URL(urlPrefix + urlQuery + urlSuffix);
name|URL
name|url
init|=
name|uri
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|dbuild
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|content
init|=
name|dbuild
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|result
operator|=
operator|(
operator|new
name|GVKParser
argument_list|()
operator|)
operator|.
name|parseEntries
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"GVK plugin: An I/O exception occurred:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"GVK plugin: An internal parser error occurred:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"An internal parser error occurred:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|BibtexEntry
argument_list|>
argument_list|()
return|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

