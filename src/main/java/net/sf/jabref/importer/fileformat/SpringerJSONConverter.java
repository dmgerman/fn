begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2015 Oscar Gustafsson.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.importer.fileformat
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|date
operator|.
name|MonthUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryType
import|;
end_import

begin_class
DECL|class|SpringerJSONConverter
specifier|public
class|class
name|SpringerJSONConverter
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SpringerJSONConverter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SpringerJSONConverter ()
specifier|public
name|SpringerJSONConverter
parameter_list|()
block|{      }
DECL|method|SpringerJSONtoBibtex (JSONObject springerJsonEntry)
specifier|public
specifier|static
name|BibtexEntry
name|SpringerJSONtoBibtex
parameter_list|(
name|JSONObject
name|springerJsonEntry
parameter_list|)
block|{
comment|// Fields that are directly accessible at the top level Json object
name|String
index|[]
name|singleFieldStrings
init|=
operator|new
name|String
index|[]
block|{
literal|"issn"
block|,
literal|"volume"
block|,
literal|"abstract"
block|,
literal|"doi"
block|,
literal|"title"
block|,
literal|"number"
block|,
literal|"publisher"
block|}
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|String
name|nametype
decl_stmt|;
comment|// Guess publication type
name|String
name|isbn
init|=
name|springerJsonEntry
operator|.
name|optString
argument_list|(
literal|"isbn"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|isbn
operator|==
literal|null
operator|)
operator|||
operator|(
name|isbn
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
comment|// Probably article
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryType
operator|.
name|getType
argument_list|(
literal|"article"
argument_list|)
argument_list|)
expr_stmt|;
name|nametype
operator|=
literal|"journal"
expr_stmt|;
block|}
else|else
block|{
comment|// Probably book chapter or from proceeding, go for book chapter
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryType
operator|.
name|getType
argument_list|(
literal|"incollection"
argument_list|)
argument_list|)
expr_stmt|;
name|nametype
operator|=
literal|"booktitle"
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"isbn"
argument_list|,
name|isbn
argument_list|)
expr_stmt|;
block|}
comment|// Authors
if|if
condition|(
name|springerJsonEntry
operator|.
name|has
argument_list|(
literal|"creators"
argument_list|)
condition|)
block|{
name|JSONArray
name|authors
init|=
name|springerJsonEntry
operator|.
name|getJSONArray
argument_list|(
literal|"creators"
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|authors
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|authors
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|has
argument_list|(
literal|"creator"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|authors
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"creator"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
operator|(
name|authors
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" and "
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Empty author name."
argument_list|)
expr_stmt|;
block|}
block|}
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"No author found."
argument_list|)
expr_stmt|;
block|}
comment|// Direct accessible fields
for|for
control|(
name|String
name|field
range|:
name|singleFieldStrings
control|)
block|{
if|if
condition|(
name|springerJsonEntry
operator|.
name|has
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|springerJsonEntry
operator|.
name|getString
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Page numbers
if|if
condition|(
name|springerJsonEntry
operator|.
name|has
argument_list|(
literal|"startingPage"
argument_list|)
operator|&&
operator|(
name|springerJsonEntry
operator|.
name|getString
argument_list|(
literal|"startingPage"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|springerJsonEntry
operator|.
name|has
argument_list|(
literal|"endPage"
argument_list|)
operator|&&
operator|(
name|springerJsonEntry
operator|.
name|getString
argument_list|(
literal|"endPage"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
name|springerJsonEntry
operator|.
name|getString
argument_list|(
literal|"startingPage"
argument_list|)
operator|+
literal|"--"
operator|+
name|springerJsonEntry
operator|.
name|getString
argument_list|(
literal|"endPage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
name|springerJsonEntry
operator|.
name|getString
argument_list|(
literal|"startingPage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Journal
if|if
condition|(
name|springerJsonEntry
operator|.
name|has
argument_list|(
literal|"publicationName"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|nametype
argument_list|,
name|springerJsonEntry
operator|.
name|getString
argument_list|(
literal|"publicationName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// URL
if|if
condition|(
name|springerJsonEntry
operator|.
name|has
argument_list|(
literal|"url"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"url"
argument_list|,
name|springerJsonEntry
operator|.
name|getJSONArray
argument_list|(
literal|"url"
argument_list|)
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|optString
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Date
if|if
condition|(
name|springerJsonEntry
operator|.
name|has
argument_list|(
literal|"publicationDate"
argument_list|)
condition|)
block|{
name|String
name|date
init|=
name|springerJsonEntry
operator|.
name|getString
argument_list|(
literal|"publicationDate"
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"date"
argument_list|,
name|date
argument_list|)
expr_stmt|;
comment|// For BibLatex
name|String
name|dateparts
index|[]
init|=
name|date
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"year"
argument_list|,
name|dateparts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
literal|"month"
argument_list|,
name|MonthUtil
operator|.
name|getMonthByNumber
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|dateparts
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|.
name|bibtexFormat
argument_list|)
expr_stmt|;
block|}
comment|// Clean up abstract (often starting with Abstract)
name|String
name|abstr
init|=
name|entry
operator|.
name|getField
argument_list|(
literal|"abstract"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|abstr
operator|!=
literal|null
operator|)
operator|&&
name|abstr
operator|.
name|startsWith
argument_list|(
literal|"Abstract"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"abstract"
argument_list|,
name|abstr
operator|.
name|substring
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
block|}
end_class

end_unit

