begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 2015 Oscar Gustafsson.     This program is free software; you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation; either version 2 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License along     with this program; if not, write to the Free Software Foundation, Inc.,     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
DECL|package|net.sf.jabref.importer.fileformat
package|package
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_class
DECL|class|JSONEntryParser
specifier|public
class|class
name|JSONEntryParser
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JSONEntryParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|JSONEntryParser ()
specifier|public
name|JSONEntryParser
parameter_list|()
block|{      }
DECL|method|BibJSONtoBibtex (JSONObject bibJsonEntry)
specifier|public
name|BibtexEntry
name|BibJSONtoBibtex
parameter_list|(
name|JSONObject
name|bibJsonEntry
parameter_list|)
block|{
comment|// Fields that are directly accessible at the top level BibJson object
name|String
index|[]
name|singleFieldStrings
init|=
block|{
literal|"year"
block|,
literal|"title"
block|,
literal|"abstract"
block|,
literal|"month"
block|}
decl_stmt|;
comment|// Fields that are accessible in the journal part of the BibJson object
name|String
index|[]
name|journalSingleFieldStrings
init|=
block|{
literal|"publisher"
block|,
literal|"number"
block|,
literal|"volume"
block|}
decl_stmt|;
name|BibtexEntry
name|entry
init|=
operator|new
name|BibtexEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
expr_stmt|;
comment|// Authors
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"author"
argument_list|)
condition|)
block|{
name|JSONArray
name|authors
init|=
name|bibJsonEntry
operator|.
name|getJSONArray
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|authors
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|authors
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|has
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|authors
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
operator|(
name|authors
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" and "
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Empty author name."
argument_list|)
expr_stmt|;
block|}
block|}
name|entry
operator|.
name|setField
argument_list|(
literal|"author"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"No author found."
argument_list|)
expr_stmt|;
block|}
comment|// Direct accessible fields
for|for
control|(
name|String
name|field
range|:
name|singleFieldStrings
control|)
block|{
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|bibJsonEntry
operator|.
name|getString
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Page numbers
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"start_page"
argument_list|)
condition|)
block|{
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"end_page"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
name|bibJsonEntry
operator|.
name|getString
argument_list|(
literal|"start_page"
argument_list|)
operator|+
literal|"--"
operator|+
name|bibJsonEntry
operator|.
name|getString
argument_list|(
literal|"end_page"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"pages"
argument_list|,
name|bibJsonEntry
operator|.
name|getString
argument_list|(
literal|"start_page"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Journal
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"journal"
argument_list|)
condition|)
block|{
name|JSONObject
name|journal
init|=
name|bibJsonEntry
operator|.
name|getJSONObject
argument_list|(
literal|"journal"
argument_list|)
decl_stmt|;
comment|// Journal title
if|if
condition|(
name|journal
operator|.
name|has
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"journal"
argument_list|,
name|journal
operator|.
name|getString
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"No journal title found."
argument_list|)
expr_stmt|;
block|}
comment|// Other journal related fields
for|for
control|(
name|String
name|field
range|:
name|journalSingleFieldStrings
control|)
block|{
if|if
condition|(
name|journal
operator|.
name|has
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|journal
operator|.
name|getString
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"No journal information found."
argument_list|)
expr_stmt|;
block|}
comment|// Keywords
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"keywords"
argument_list|)
condition|)
block|{
name|JSONArray
name|keywords
init|=
name|bibJsonEntry
operator|.
name|getJSONArray
argument_list|(
literal|"keywords"
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keywords
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|keywords
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|keywords
operator|.
name|getString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
operator|(
name|keywords
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|entry
operator|.
name|setField
argument_list|(
literal|"keywords"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Identifiers
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"identifier"
argument_list|)
condition|)
block|{
name|JSONArray
name|identifiers
init|=
name|bibJsonEntry
operator|.
name|getJSONArray
argument_list|(
literal|"identifier"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|identifiers
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|identifiers
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"doi"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"doi"
argument_list|,
name|identifiers
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"pissn"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"issn"
argument_list|,
name|identifiers
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"eissn"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"issn"
argument_list|,
name|identifiers
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Links
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"link"
argument_list|)
condition|)
block|{
name|JSONArray
name|links
init|=
name|bibJsonEntry
operator|.
name|getJSONArray
argument_list|(
literal|"link"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|links
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|links
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|has
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
name|links
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"fulltext"
argument_list|)
condition|)
block|{
if|if
condition|(
name|links
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|has
argument_list|(
literal|"url"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
literal|"url"
argument_list|,
name|links
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|entry
return|;
block|}
block|}
end_class

end_unit

