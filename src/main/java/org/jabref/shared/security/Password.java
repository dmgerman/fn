begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.shared.security
package|package
name|org
operator|.
name|jabref
operator|.
name|shared
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|NoSuchPaddingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|IvParameterSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_comment
comment|/**  *   {@link Password} contains methods which are useful to encrypt and decrypt passwords using symetric algorithms.  */
end_comment

begin_class
DECL|class|Password
specifier|public
class|class
name|Password
block|{
DECL|field|phrase
specifier|private
specifier|final
name|byte
index|[]
name|phrase
decl_stmt|;
DECL|field|cipher
specifier|private
specifier|final
name|Cipher
name|cipher
decl_stmt|;
DECL|field|secretKey
specifier|private
specifier|final
name|SecretKeySpec
name|secretKey
decl_stmt|;
DECL|field|ivSpec
specifier|private
specifier|final
name|IvParameterSpec
name|ivSpec
decl_stmt|;
comment|/**      * @param phrase Phrase which should be encrypted or decrypted      * @param key Key which is used to improve symmetric encryption      */
DECL|method|Password (char[] phrase, String key)
specifier|public
name|Password
parameter_list|(
name|char
index|[]
name|phrase
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|NoSuchPaddingException
block|{
name|this
operator|.
name|phrase
operator|=
operator|new
name|String
argument_list|(
name|phrase
argument_list|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|this
operator|.
name|cipher
operator|=
name|Cipher
operator|.
name|getInstance
argument_list|(
literal|"AES/CBC/PKCS5Padding"
argument_list|)
expr_stmt|;
name|this
operator|.
name|secretKey
operator|=
operator|new
name|SecretKeySpec
argument_list|(
name|get128BitHash
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
literal|"AES"
argument_list|)
expr_stmt|;
name|this
operator|.
name|ivSpec
operator|=
operator|new
name|IvParameterSpec
argument_list|(
literal|"ThisIsA128BitKey"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Encrypts the set phrase/password with a symmetric encryption algorithm.      *      *  @return Encrypted phrase/password      */
DECL|method|encrypt ()
specifier|public
name|String
name|encrypt
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|UnsupportedEncodingException
block|{
name|cipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|ENCRYPT_MODE
argument_list|,
name|secretKey
argument_list|,
name|ivSpec
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|getEncoder
argument_list|()
operator|.
name|encode
argument_list|(
name|cipher
operator|.
name|doFinal
argument_list|(
name|phrase
argument_list|)
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
comment|/**      *  Decrypts the set phrase/password which was encrypted via {@link Password#encrypt()}.      *      *  @return Decrypted phrase/password      */
DECL|method|decrypt ()
specifier|public
name|String
name|decrypt
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|UnsupportedEncodingException
block|{
name|cipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
name|secretKey
argument_list|,
name|ivSpec
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|cipher
operator|.
name|doFinal
argument_list|(
name|Base64
operator|.
name|getDecoder
argument_list|()
operator|.
name|decode
argument_list|(
name|phrase
argument_list|)
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
comment|/**      * Returns a 128 bit hash using SHA-256.      */
DECL|method|get128BitHash (byte[] byteArrayToHash)
specifier|private
name|byte
index|[]
name|get128BitHash
parameter_list|(
name|byte
index|[]
name|byteArrayToHash
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
block|{
name|MessageDigest
name|messageDigest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
decl_stmt|;
name|messageDigest
operator|.
name|update
argument_list|(
name|byteArrayToHash
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|messageDigest
operator|.
name|digest
argument_list|()
argument_list|,
literal|16
argument_list|)
return|;
comment|// return 128 bit
block|}
block|}
end_class

end_unit

