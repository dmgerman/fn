begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.shared
package|package
name|org
operator|.
name|jabref
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|shared
operator|.
name|exception
operator|.
name|InvalidDBMSConnectionPropertiesException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|DBMSConnection
specifier|public
class|class
name|DBMSConnection
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DBMSConnection
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connection
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
DECL|field|properties
specifier|private
specifier|final
name|DBMSConnectionProperties
name|properties
decl_stmt|;
DECL|method|DBMSConnection (DBMSConnectionProperties properties)
specifier|public
name|DBMSConnection
parameter_list|(
name|DBMSConnectionProperties
name|properties
parameter_list|)
throws|throws
name|SQLException
throws|,
name|InvalidDBMSConnectionPropertiesException
block|{
if|if
condition|(
operator|!
name|properties
operator|.
name|isValid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidDBMSConnectionPropertiesException
argument_list|()
throw|;
block|}
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
try|try
block|{
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// ensure that all SQL drivers are loaded - source: http://stackoverflow.com/a/22384826/873282
comment|// we use the side effect of getAvailableDBMSTypes() - it loads all available drivers
name|DBMSConnection
operator|.
name|getAvailableDBMSTypes
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|properties
operator|.
name|getType
argument_list|()
operator|.
name|getUrl
argument_list|(
name|properties
operator|.
name|getHost
argument_list|()
argument_list|,
name|properties
operator|.
name|getPort
argument_list|()
argument_list|,
name|properties
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|,
name|properties
operator|.
name|getUser
argument_list|()
argument_list|,
name|properties
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Some systems like PostgreSQL retrieves 0 to every exception.
comment|// Therefore a stable error determination is not possible.
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Could not connect to database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" - Error code: "
operator|+
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|getConnection ()
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
return|;
block|}
DECL|method|getProperties ()
specifier|public
name|DBMSConnectionProperties
name|getProperties
parameter_list|()
block|{
return|return
name|this
operator|.
name|properties
return|;
block|}
comment|/**      * Returns a Set of {@link DBMSType} which is supported by available drivers.      */
DECL|method|getAvailableDBMSTypes ()
specifier|public
specifier|static
name|Set
argument_list|<
name|DBMSType
argument_list|>
name|getAvailableDBMSTypes
parameter_list|()
block|{
name|Set
argument_list|<
name|DBMSType
argument_list|>
name|dbmsTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DBMSType
name|dbms
range|:
name|DBMSType
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|dbms
operator|.
name|getDriverClassPath
argument_list|()
argument_list|)
expr_stmt|;
name|dbmsTypes
operator|.
name|add
argument_list|(
name|dbms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// In case that the driver is not available do not perform tests for this system.
name|LOGGER
operator|.
name|info
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"%0 driver not available."
argument_list|,
name|dbms
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dbmsTypes
return|;
block|}
block|}
end_class

end_unit

