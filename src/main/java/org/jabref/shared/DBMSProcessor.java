begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.shared
package|package
name|org
operator|.
name|jabref
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|event
operator|.
name|EntryEventSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|shared
operator|.
name|exception
operator|.
name|OfflineLockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Processes all incoming or outgoing bib data to external SQL Database and manages its structure.  */
end_comment

begin_class
DECL|class|DBMSProcessor
specifier|public
specifier|abstract
class|class
name|DBMSProcessor
block|{
DECL|field|LOGGER
specifier|protected
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DBMSProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connection
specifier|protected
specifier|final
name|Connection
name|connection
decl_stmt|;
DECL|field|connectionProperties
specifier|protected
name|DBMSConnectionProperties
name|connectionProperties
decl_stmt|;
DECL|field|PROCESSOR_ID
specifier|public
specifier|static
specifier|final
name|String
name|PROCESSOR_ID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|method|DBMSProcessor (DBMSConnection dbmsConnection)
specifier|protected
name|DBMSProcessor
parameter_list|(
name|DBMSConnection
name|dbmsConnection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|dbmsConnection
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|this
operator|.
name|connectionProperties
operator|=
name|dbmsConnection
operator|.
name|getProperties
argument_list|()
expr_stmt|;
block|}
comment|/**      * Scans the database for required tables.      *      * @return<code>true</code> if the structure matches the requirements,<code>false</code> if not.      * @throws SQLException      */
DECL|method|checkBaseIntegrity ()
specifier|public
name|boolean
name|checkBaseIntegrity
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|checkTableAvailibility
argument_list|(
literal|"ENTRY"
argument_list|,
literal|"FIELD"
argument_list|,
literal|"METADATA"
argument_list|)
return|;
block|}
comment|/**      * Determines whether the database is using an pre-3.6 structure.      *      * @return<code>true</code> if the structure is old, else<code>false</code>.      */
DECL|method|checkForPre3Dot6Intergrity ()
specifier|public
name|boolean
name|checkForPre3Dot6Intergrity
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|checkTableAvailibility
argument_list|(
literal|"ENTRIES"
argument_list|,
literal|"ENTRY_GROUP"
argument_list|,
literal|"ENTRY_TYPES"
argument_list|,
literal|"GROUPS"
argument_list|,
literal|"GROUP_TYPES"
argument_list|,
literal|"JABREF_DATABASE"
argument_list|,
literal|"STRINGS"
argument_list|)
return|;
comment|// old tables
block|}
comment|/**      * Checks whether all given table names (<b>case insensitive</b>) exist in database.      *      * @param tableNames Table names to be checked      * @return<code>true</code> if<b>all</b> given tables are present, else<code>false</code>.      */
DECL|method|checkTableAvailibility (String... tableNames)
specifier|private
name|boolean
name|checkTableAvailibility
parameter_list|(
name|String
modifier|...
name|tableNames
parameter_list|)
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|requiredTables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|tableNames
control|)
block|{
name|requiredTables
operator|.
name|add
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DatabaseMetaData
name|databaseMetaData
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
comment|// ...getTables(null, ...): no restrictions
try|try
init|(
name|ResultSet
name|databaseMetaDataResultSet
init|=
name|databaseMetaData
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
while|while
condition|(
name|databaseMetaDataResultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tableName
init|=
name|databaseMetaDataResultSet
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|requiredTables
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Remove matching tables to check requiredTables for emptiness
block|}
return|return
name|requiredTables
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
comment|/**      * Creates and sets up the needed tables and columns according to the database type and      * performs a check whether the needed tables are present.      *      * @throws SQLException      */
DECL|method|setupSharedDatabase ()
specifier|public
name|void
name|setupSharedDatabase
parameter_list|()
throws|throws
name|SQLException
block|{
name|setUp
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|checkBaseIntegrity
argument_list|()
condition|)
block|{
comment|// can only happen with users direct intervention on shared database
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Corrupt_shared_database_structure."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates and sets up the needed tables and columns according to the database type.      *      * @throws SQLException      */
DECL|method|setUp ()
specifier|protected
specifier|abstract
name|void
name|setUp
parameter_list|()
throws|throws
name|SQLException
function_decl|;
comment|/**      * Escapes parts of SQL expressions like table or field name to match the conventions      * of the database system using the current dbmsType.      *      * This method is package private, because of DBMSProcessorTest      *      * @param expression Table or field name      * @return Correctly escaped expression      */
DECL|method|escape (String expression)
specifier|abstract
name|String
name|escape
parameter_list|(
name|String
name|expression
parameter_list|)
function_decl|;
comment|/**      * Inserts the given bibEntry into shared database.      *      * @param bibEntry {@link BibEntry} to be inserted      */
DECL|method|insertEntry (BibEntry bibEntry)
specifier|public
name|void
name|insertEntry
parameter_list|(
name|BibEntry
name|bibEntry
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkForBibEntryExistence
argument_list|(
name|bibEntry
argument_list|)
condition|)
block|{
name|insertIntoEntryTable
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
name|insertIntoFieldTable
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Inserts the given bibEntry into ENTRY table.      *      * @param bibEntry {@link BibEntry} to be inserted      */
DECL|method|insertIntoEntryTable (BibEntry bibEntry)
specifier|protected
name|void
name|insertIntoEntryTable
parameter_list|(
name|BibEntry
name|bibEntry
parameter_list|)
block|{
comment|// Inserting into ENTRY table
name|StringBuilder
name|insertIntoEntryQuery
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"TYPE"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|") VALUES(?)"
argument_list|)
decl_stmt|;
comment|// This is the only method to get generated keys which is accepted by MySQL, PostgreSQL and Oracle.
try|try
init|(
name|PreparedStatement
name|preparedEntryStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|insertIntoEntryQuery
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"SHARED_ID"
block|}
argument_list|)
init|)
block|{
name|preparedEntryStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|bibEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|preparedEntryStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
try|try
init|(
name|ResultSet
name|generatedKeys
init|=
name|preparedEntryStatement
operator|.
name|getGeneratedKeys
argument_list|()
init|)
block|{
if|if
condition|(
name|generatedKeys
operator|.
name|next
argument_list|()
condition|)
block|{
name|bibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|setSharedID
argument_list|(
name|generatedKeys
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// set generated ID locally
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SQL Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks whether the given bibEntry already exists on shared database.      * @param bibEntry {@link BibEntry} to be checked      * @return<code>true</code> if existent, else<code>false</code>      */
DECL|method|checkForBibEntryExistence (BibEntry bibEntry)
specifier|private
name|boolean
name|checkForBibEntryExistence
parameter_list|(
name|BibEntry
name|bibEntry
parameter_list|)
block|{
try|try
block|{
comment|// Check if already exists
name|int
name|sharedID
init|=
name|bibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|getSharedID
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedID
operator|!=
operator|-
literal|1
condition|)
block|{
name|StringBuilder
name|selectQuery
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"SELECT * FROM "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"SHARED_ID"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ?"
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|preparedSelectStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|selectQuery
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|preparedSelectStatement
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|sharedID
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|resultSet
init|=
name|preparedSelectStatement
operator|.
name|executeQuery
argument_list|()
init|)
block|{
if|if
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SQL Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Inserts the given bibEntry into FIELD table.      *      * @param bibEntry {@link BibEntry} to be inserted      */
DECL|method|insertIntoFieldTable (BibEntry bibEntry)
specifier|private
name|void
name|insertIntoFieldTable
parameter_list|(
name|BibEntry
name|bibEntry
parameter_list|)
block|{
try|try
block|{
comment|// Inserting into FIELD table
for|for
control|(
name|String
name|fieldName
range|:
name|bibEntry
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|StringBuilder
name|insertFieldQuery
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"FIELD"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY_SHARED_ID"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"NAME"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"VALUE"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|") VALUES(?, ?, ?)"
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|preparedFieldStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|insertFieldQuery
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
comment|// columnIndex starts with 1
name|preparedFieldStatement
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|bibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|getSharedID
argument_list|()
argument_list|)
expr_stmt|;
name|preparedFieldStatement
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|preparedFieldStatement
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|bibEntry
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|preparedFieldStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SQL Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Updates the whole {@link BibEntry} on shared database.      *      * @param localBibEntry {@link BibEntry} affected by changes      * @throws SQLException      */
DECL|method|updateEntry (BibEntry localBibEntry)
specifier|public
name|void
name|updateEntry
parameter_list|(
name|BibEntry
name|localBibEntry
parameter_list|)
throws|throws
name|OfflineLockException
throws|,
name|SQLException
block|{
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// disable auto commit due to transaction
try|try
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|sharedEntryOptional
init|=
name|getSharedEntry
argument_list|(
name|localBibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|getSharedID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sharedEntryOptional
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return;
block|}
name|BibEntry
name|sharedBibEntry
init|=
name|sharedEntryOptional
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// remove shared fields which do not exist locally
name|removeSharedFieldsByDifference
argument_list|(
name|localBibEntry
argument_list|,
name|sharedBibEntry
argument_list|)
expr_stmt|;
comment|// update only if local version is higher or the entries are equal
if|if
condition|(
operator|(
name|localBibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|>=
name|sharedBibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|)
operator|||
name|localBibEntry
operator|.
name|equals
argument_list|(
name|sharedBibEntry
argument_list|)
condition|)
block|{
name|insertOrUpdateFields
argument_list|(
name|localBibEntry
argument_list|)
expr_stmt|;
comment|// updating entry type
name|StringBuilder
name|updateEntryTypeQuery
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"UPDATE "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" SET "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"TYPE"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ?, "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"VERSION"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"VERSION"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" + 1 WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"SHARED_ID"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ?"
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|preparedUpdateEntryTypeStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|updateEntryTypeQuery
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|preparedUpdateEntryTypeStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|localBibEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|preparedUpdateEntryTypeStatement
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|localBibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|getSharedID
argument_list|()
argument_list|)
expr_stmt|;
name|preparedUpdateEntryTypeStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// apply all changes in current transaction
block|}
else|else
block|{
throw|throw
operator|new
name|OfflineLockException
argument_list|(
name|localBibEntry
argument_list|,
name|sharedBibEntry
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SQL Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// undo changes made in current transaction
block|}
finally|finally
block|{
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// enable auto commit mode again
block|}
block|}
comment|/**      * Helping method. Removes shared fields which do not exist locally      */
DECL|method|removeSharedFieldsByDifference (BibEntry localBibEntry, BibEntry sharedBibEntry)
specifier|private
name|void
name|removeSharedFieldsByDifference
parameter_list|(
name|BibEntry
name|localBibEntry
parameter_list|,
name|BibEntry
name|sharedBibEntry
parameter_list|)
throws|throws
name|SQLException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nullFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|sharedBibEntry
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
name|nullFields
operator|.
name|removeAll
argument_list|(
name|localBibEntry
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|nullField
range|:
name|nullFields
control|)
block|{
name|StringBuilder
name|deleteFieldQuery
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"DELETE FROM "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"FIELD"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"NAME"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ? AND "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY_SHARED_ID"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ?"
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|preparedDeleteFieldStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|deleteFieldQuery
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|preparedDeleteFieldStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|nullField
argument_list|)
expr_stmt|;
name|preparedDeleteFieldStatement
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|localBibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|getSharedID
argument_list|()
argument_list|)
expr_stmt|;
name|preparedDeleteFieldStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Helping method. Inserts a key-value pair into FIELD table for every field if not existing. Otherwise only an update is performed.      */
DECL|method|insertOrUpdateFields (BibEntry localBibEntry)
specifier|private
name|void
name|insertOrUpdateFields
parameter_list|(
name|BibEntry
name|localBibEntry
parameter_list|)
throws|throws
name|SQLException
block|{
for|for
control|(
name|String
name|fieldName
range|:
name|localBibEntry
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
comment|// avoiding to use deprecated BibEntry.getField() method. null values are accepted by PreparedStatement!
name|Optional
argument_list|<
name|String
argument_list|>
name|valueOptional
init|=
name|localBibEntry
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valueOptional
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|value
operator|=
name|valueOptional
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|StringBuilder
name|selectFieldQuery
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"SELECT * FROM "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"FIELD"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"NAME"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ? AND "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY_SHARED_ID"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ?"
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|preparedSelectFieldStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|selectFieldQuery
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|preparedSelectFieldStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|preparedSelectFieldStatement
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|localBibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|getSharedID
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|selectFieldResultSet
init|=
name|preparedSelectFieldStatement
operator|.
name|executeQuery
argument_list|()
init|)
block|{
if|if
condition|(
name|selectFieldResultSet
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// check if field already exists
name|StringBuilder
name|updateFieldQuery
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"UPDATE "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"FIELD"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" SET "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"VALUE"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ? WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"NAME"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ? AND "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY_SHARED_ID"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ?"
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|preparedUpdateFieldStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|updateFieldQuery
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|preparedUpdateFieldStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|preparedUpdateFieldStatement
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|preparedUpdateFieldStatement
operator|.
name|setInt
argument_list|(
literal|3
argument_list|,
name|localBibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|getSharedID
argument_list|()
argument_list|)
expr_stmt|;
name|preparedUpdateFieldStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|StringBuilder
name|insertFieldQuery
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"FIELD"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY_SHARED_ID"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"NAME"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"VALUE"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|") VALUES(?, ?, ?)"
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|preparedFieldStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|insertFieldQuery
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|preparedFieldStatement
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|localBibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|getSharedID
argument_list|()
argument_list|)
expr_stmt|;
name|preparedFieldStatement
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|preparedFieldStatement
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|preparedFieldStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**      * Removes the shared bibEntry.      *      * @param bibEntry {@link BibEntry} to be deleted      */
DECL|method|removeEntry (BibEntry bibEntry)
specifier|public
name|void
name|removeEntry
parameter_list|(
name|BibEntry
name|bibEntry
parameter_list|)
block|{
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"DELETE FROM "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"SHARED_ID"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ?"
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|preparedStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|preparedStatement
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|bibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|getSharedID
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SQL Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param sharedID Entry ID      * @return instance of {@link BibEntry}      */
DECL|method|getSharedEntry (int sharedID)
specifier|public
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|getSharedEntry
parameter_list|(
name|int
name|sharedID
parameter_list|)
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|sharedEntries
init|=
name|getSharedEntryList
argument_list|(
name|sharedID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sharedEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|sharedEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|getSharedEntries ()
specifier|public
name|List
argument_list|<
name|BibEntry
argument_list|>
name|getSharedEntries
parameter_list|()
block|{
return|return
name|getSharedEntryList
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      * @param sharedID Entry ID. If 0, all entries are going to be fetched.      * @return List of {@link BibEntry} instances      */
DECL|method|getSharedEntryList (int sharedID)
specifier|private
name|List
argument_list|<
name|BibEntry
argument_list|>
name|getSharedEntryList
parameter_list|(
name|int
name|sharedID
parameter_list|)
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|sharedEntries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|selectEntryQuery
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|selectEntryQuery
operator|.
name|append
argument_list|(
literal|"SELECT * FROM "
argument_list|)
expr_stmt|;
name|selectEntryQuery
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sharedID
operator|!=
literal|0
condition|)
block|{
name|selectEntryQuery
operator|.
name|append
argument_list|(
literal|" WHERE "
argument_list|)
expr_stmt|;
name|selectEntryQuery
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"SHARED_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|selectEntryQuery
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|selectEntryQuery
operator|.
name|append
argument_list|(
name|sharedID
argument_list|)
expr_stmt|;
block|}
name|selectEntryQuery
operator|.
name|append
argument_list|(
literal|" ORDER BY "
argument_list|)
expr_stmt|;
name|selectEntryQuery
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"SHARED_ID"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|selectEntryResultSet
init|=
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeQuery
argument_list|(
name|selectEntryQuery
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
while|while
condition|(
name|selectEntryResultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|BibEntry
name|bibEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
comment|// setting the base attributes once
name|bibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|setSharedID
argument_list|(
name|selectEntryResultSet
operator|.
name|getInt
argument_list|(
literal|"SHARED_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|setType
argument_list|(
name|selectEntryResultSet
operator|.
name|getString
argument_list|(
literal|"TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|bibEntry
operator|.
name|getSharedBibEntryData
argument_list|()
operator|.
name|setVersion
argument_list|(
name|selectEntryResultSet
operator|.
name|getInt
argument_list|(
literal|"VERSION"
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|selectFieldQuery
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"SELECT * FROM "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"FIELD"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY_SHARED_ID"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ?"
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|preparedSelectFieldStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|selectFieldQuery
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|preparedSelectFieldStatement
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|selectEntryResultSet
operator|.
name|getInt
argument_list|(
literal|"SHARED_ID"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|selectFieldResultSet
init|=
name|preparedSelectFieldStatement
operator|.
name|executeQuery
argument_list|()
init|)
block|{
while|while
condition|(
name|selectFieldResultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|bibEntry
operator|.
name|setField
argument_list|(
name|selectFieldResultSet
operator|.
name|getString
argument_list|(
literal|"NAME"
argument_list|)
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|selectFieldResultSet
operator|.
name|getString
argument_list|(
literal|"VALUE"
argument_list|)
argument_list|)
argument_list|,
name|EntryEventSource
operator|.
name|SHARED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sharedEntries
operator|.
name|add
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SQL Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|sharedEntries
return|;
block|}
comment|/**      * Retrieves a mapping between the columns SHARED_ID and VERSION.      */
DECL|method|getSharedIDVersionMapping ()
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|getSharedIDVersionMapping
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sharedIDVersionMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|selectEntryQuery
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"SELECT * FROM "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"ENTRY"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" ORDER BY "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"SHARED_ID"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|ResultSet
name|selectEntryResultSet
init|=
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeQuery
argument_list|(
name|selectEntryQuery
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
while|while
condition|(
name|selectEntryResultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|sharedIDVersionMapping
operator|.
name|put
argument_list|(
name|selectEntryResultSet
operator|.
name|getInt
argument_list|(
literal|"SHARED_ID"
argument_list|)
argument_list|,
name|selectEntryResultSet
operator|.
name|getInt
argument_list|(
literal|"VERSION"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SQL Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|sharedIDVersionMapping
return|;
block|}
comment|/**      * Fetches and returns all shared meta data.      */
DECL|method|getSharedMetaData ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSharedMetaData
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|escape
argument_list|(
literal|"METADATA"
argument_list|)
argument_list|)
init|)
block|{
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
literal|"KEY"
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
literal|"VALUE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SQL Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
comment|/**      * Clears and sets all shared meta data.      *      * @param data JabRef meta data as map      */
DECL|method|setSharedMetaData (Map<String, String> data)
specifier|public
name|void
name|setSharedMetaData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
parameter_list|)
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeUpdate
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|escape
argument_list|(
literal|"METADATA"
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete data all data from table
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metaEntry
range|:
name|data
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"METADATA"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"KEY"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|escape
argument_list|(
literal|"VALUE"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|") VALUES(?, ?)"
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|preparedStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|preparedStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|metaEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|metaEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SQL Error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      *  Returns a new instance of the abstract type {@link DBMSProcessor}      */
DECL|method|getProcessorInstance (DBMSConnection connection)
specifier|public
specifier|static
name|DBMSProcessor
name|getProcessorInstance
parameter_list|(
name|DBMSConnection
name|connection
parameter_list|)
block|{
name|DBMSType
name|type
init|=
name|connection
operator|.
name|getProperties
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|DBMSType
operator|.
name|MYSQL
condition|)
block|{
return|return
operator|new
name|MySQLProcessor
argument_list|(
name|connection
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|DBMSType
operator|.
name|POSTGRESQL
condition|)
block|{
return|return
operator|new
name|PostgreSQLProcessor
argument_list|(
name|connection
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|DBMSType
operator|.
name|ORACLE
condition|)
block|{
return|return
operator|new
name|OracleProcessor
argument_list|(
name|connection
argument_list|)
return|;
block|}
return|return
literal|null
return|;
comment|// can never happen except new types were added without updating this method.
block|}
DECL|method|getDBMSConnectionProperties ()
specifier|public
name|DBMSConnectionProperties
name|getDBMSConnectionProperties
parameter_list|()
block|{
return|return
name|this
operator|.
name|connectionProperties
return|;
block|}
comment|/**      * Listens for notifications from DBMS.      * Needs to be implemented if LiveUpdate is supported by the DBMS      *      * @param dbmsSynchronizer {@link DBMSSynchronizer} which handles the notification.      */
DECL|method|startNotificationListener (@uppressWarningsR) DBMSSynchronizer dbmsSynchronizer)
specifier|public
name|void
name|startNotificationListener
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|DBMSSynchronizer
name|dbmsSynchronizer
parameter_list|)
block|{
comment|// nothing to do
block|}
comment|/**      * Terminates the notification listener.      * Needs to be implemented if LiveUpdate is supported by the DBMS      */
DECL|method|stopNotificationListener ()
specifier|public
name|void
name|stopNotificationListener
parameter_list|()
block|{
comment|// nothing to do
block|}
comment|/**      * Notifies all clients ({@link DBMSSynchronizer}) which are connected to the same DBMS.      * Needs to be implemented if LiveUpdate is supported by the DBMS      */
DECL|method|notifyClients ()
specifier|public
name|void
name|notifyClients
parameter_list|()
block|{
comment|// nothing to do
block|}
block|}
end_class

end_unit

