begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.collab
package|package
name|org
operator|.
name|jabref
operator|.
name|collab
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * This thread monitors a set of files, each associated with a FileUpdateListener, for changes  * in the file's last modification time stamp. The  */
end_comment

begin_class
DECL|class|FileUpdateMonitor
specifier|public
class|class
name|FileUpdateMonitor
implements|implements
name|Runnable
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileUpdateMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|WAIT
specifier|private
specifier|static
specifier|final
name|int
name|WAIT
init|=
literal|4000
decl_stmt|;
DECL|field|entries
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|numberOfUpdateListener
specifier|private
name|int
name|numberOfUpdateListener
decl_stmt|;
DECL|method|getTempFile ()
specifier|private
specifier|static
specifier|synchronized
name|Path
name|getTempFile
parameter_list|()
block|{
name|Path
name|temporaryFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|temporaryFile
operator|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"jabref"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|temporaryFile
operator|.
name|toFile
argument_list|()
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not create temporary file."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|temporaryFile
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// The running variable is used to make the thread stop when needed.
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|Entry
name|e
range|:
name|entries
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|e
operator|.
name|hasBeenUpdated
argument_list|()
condition|)
block|{
name|e
operator|.
name|notifyListener
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|e
operator|.
name|notifyFileRemoved
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Sleep for a while before starting a new polling round.
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"FileUpdateMonitor has been interrupted. Terminating..."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|/**      * Add a new file to monitor. Returns a handle for accessing the entry.      * @param ul FileUpdateListener The listener to notify when the file changes.      * @param file File The file to monitor.      * @throws IOException if the file does not exist.      */
DECL|method|addUpdateListener (FileUpdateListener ul, File file)
specifier|public
name|String
name|addUpdateListener
parameter_list|(
name|FileUpdateListener
name|ul
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File not found"
argument_list|)
throw|;
block|}
name|numberOfUpdateListener
operator|++
expr_stmt|;
name|String
name|key
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|numberOfUpdateListener
argument_list|)
decl_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Entry
argument_list|(
name|ul
argument_list|,
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
comment|/**      * Forces a check on the file, and returns the result. Does not      * force a report to all listeners before the next routine check.      */
DECL|method|hasBeenModified (String handle)
specifier|public
name|boolean
name|hasBeenModified
parameter_list|(
name|String
name|handle
parameter_list|)
block|{
name|Entry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
return|return
name|entry
operator|.
name|hasBeenUpdated
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Thrown if file has been removed. We return false.
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Change the stored timestamp for the given file. If the timestamp equals      * the file's timestamp on disk, after this call the file will appear to      * have been modified. Used if a file has been modified, and the change      * scan fails, in order to ensure successive checks.      * @param handle the handle to the correct file.      */
DECL|method|perturbTimestamp (String handle)
specifier|public
name|void
name|perturbTimestamp
parameter_list|(
name|String
name|handle
parameter_list|)
block|{
name|Entry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|decreaseTimeStamp
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Removes a listener from the monitor.      * @param handle String The handle for the listener to remove.      */
DECL|method|removeUpdateListener (String handle)
specifier|public
name|void
name|removeUpdateListener
parameter_list|(
name|String
name|handle
parameter_list|)
block|{
name|entries
operator|.
name|remove
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
DECL|method|updateTimeStamp (String key)
specifier|public
name|void
name|updateTimeStamp
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Entry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|entry
operator|.
name|updateTimeStamp
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Couldn't update timestamp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Method for getting the temporary file used for this database. The tempfile      * is used for comparison with the changed on-disk version.      * @param key String The handle for this monitor.      * @throws IllegalArgumentException If the handle doesn't correspond to an entry.      * @return Path The temporary file.      */
DECL|method|getTempFile (String key)
specifier|public
name|Path
name|getTempFile
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|Entry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Entry not found"
argument_list|)
throw|;
block|}
return|return
name|entry
operator|.
name|getTmpFile
argument_list|()
return|;
block|}
comment|/**      * A class containing the File, the FileUpdateListener and the current time stamp for one file.      */
DECL|class|Entry
specifier|static
class|class
name|Entry
block|{
DECL|field|listener
specifier|private
specifier|final
name|FileUpdateListener
name|listener
decl_stmt|;
DECL|field|file
specifier|private
specifier|final
name|Path
name|file
decl_stmt|;
DECL|field|tmpFile
specifier|private
specifier|final
name|Path
name|tmpFile
decl_stmt|;
DECL|field|timeStamp
specifier|private
name|long
name|timeStamp
decl_stmt|;
DECL|field|fileSize
specifier|private
name|long
name|fileSize
decl_stmt|;
DECL|method|Entry (FileUpdateListener ul, Path f)
specifier|public
name|Entry
parameter_list|(
name|FileUpdateListener
name|ul
parameter_list|,
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|listener
operator|=
name|ul
expr_stmt|;
name|file
operator|=
name|f
expr_stmt|;
name|timeStamp
operator|=
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|file
argument_list|)
operator|.
name|toMillis
argument_list|()
expr_stmt|;
name|fileSize
operator|=
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|tmpFile
operator|=
name|FileUpdateMonitor
operator|.
name|getTempFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|tmpFile
operator|!=
literal|null
condition|)
block|{
name|tmpFile
operator|.
name|toFile
argument_list|()
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|copy
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Check if time stamp or the file size has changed.          * @throws IOException if the file does no longer exist.          * @return boolean true if the file has changed.          */
DECL|method|hasBeenUpdated ()
specifier|public
name|boolean
name|hasBeenUpdated
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|modified
init|=
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|file
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|modified
operator|==
literal|0L
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File deleted"
argument_list|)
throw|;
block|}
name|long
name|fileSizeNow
init|=
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
operator|(
name|timeStamp
operator|!=
name|modified
operator|)
operator|||
operator|(
name|fileSize
operator|!=
name|fileSizeNow
operator|)
return|;
block|}
DECL|method|updateTimeStamp ()
specifier|public
name|void
name|updateTimeStamp
parameter_list|()
throws|throws
name|IOException
block|{
name|timeStamp
operator|=
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|file
argument_list|)
operator|.
name|toMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|timeStamp
operator|==
literal|0L
condition|)
block|{
name|notifyFileRemoved
argument_list|()
expr_stmt|;
block|}
name|fileSize
operator|=
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|copy
argument_list|()
expr_stmt|;
block|}
DECL|method|copy ()
specifier|public
name|boolean
name|copy
parameter_list|()
block|{
return|return
name|FileUtil
operator|.
name|copyFile
argument_list|(
name|file
argument_list|,
name|tmpFile
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**          * Call the listener method to signal that the file has changed.          */
DECL|method|notifyListener ()
specifier|public
name|void
name|notifyListener
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Update time stamp.
name|timeStamp
operator|=
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|file
argument_list|)
operator|.
name|toMillis
argument_list|()
expr_stmt|;
name|fileSize
operator|=
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|listener
operator|.
name|fileUpdated
argument_list|()
expr_stmt|;
block|}
comment|/**          * Call the listener method to signal that the file has been removed.          */
DECL|method|notifyFileRemoved ()
specifier|public
name|void
name|notifyFileRemoved
parameter_list|()
block|{
name|listener
operator|.
name|fileRemoved
argument_list|()
expr_stmt|;
block|}
DECL|method|getTmpFile ()
specifier|public
name|Path
name|getTmpFile
parameter_list|()
block|{
return|return
name|tmpFile
return|;
block|}
DECL|method|decreaseTimeStamp ()
specifier|public
name|void
name|decreaseTimeStamp
parameter_list|()
block|{
name|timeStamp
operator|--
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

