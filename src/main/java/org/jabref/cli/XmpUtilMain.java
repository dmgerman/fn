begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.cli
package|package
name|org
operator|.
name|jabref
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|BibEntryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|LatexFieldFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XmpPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XmpUtilReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XmpUtilWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_class
DECL|class|XmpUtilMain
specifier|public
class|class
name|XmpUtilMain
block|{
DECL|field|xmpPreferences
specifier|private
specifier|static
name|XmpPreferences
name|xmpPreferences
decl_stmt|;
DECL|field|importFormatPreferences
specifier|private
specifier|static
name|ImportFormatPreferences
name|importFormatPreferences
decl_stmt|;
DECL|method|XmpUtilMain ()
specifier|private
name|XmpUtilMain
parameter_list|()
block|{     }
comment|/**      * Reads metadata from pdf and print all included bib entries to the console.      *      * @param filename Filename of the pdf file (.pdf)      */
DECL|method|readPdfAndPrintBib (String filename)
specifier|private
specifier|static
name|void
name|readPdfAndPrintBib
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".pdf"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entryList
init|=
name|XmpUtilReader
operator|.
name|readXmp
argument_list|(
name|filename
argument_list|,
name|xmpPreferences
argument_list|)
decl_stmt|;
name|BibEntryWriter
name|bibtexEntryWriter
init|=
operator|new
name|BibEntryWriter
argument_list|(
operator|new
name|LatexFieldFormatter
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entryList
control|)
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|bibtexEntryWriter
operator|.
name|write
argument_list|(
name|entry
argument_list|,
name|writer
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|writer
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Insert a file path (.pdf)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes all entries included in the bib file to the metadata section of the pdf file.      *      * @param bibFile Filename of the bib file (.bib)      * @param pdfFile Filename of the pdf file (.pdf)      */
DECL|method|writeBibFileToPdfMetadata (String bibFile, String pdfFile)
specifier|private
specifier|static
name|void
name|writeBibFileToPdfMetadata
parameter_list|(
name|String
name|bibFile
parameter_list|,
name|String
name|pdfFile
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
throws|,
name|TransformerException
block|{
if|if
condition|(
name|bibFile
operator|.
name|endsWith
argument_list|(
literal|".bib"
argument_list|)
operator|&&
name|pdfFile
operator|.
name|endsWith
argument_list|(
literal|".pdf"
argument_list|)
condition|)
block|{
try|try
init|(
name|FileReader
name|reader
init|=
operator|new
name|FileReader
argument_list|(
name|bibFile
argument_list|)
init|)
block|{
name|ParserResult
name|result
init|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
name|Globals
operator|.
name|getFileUpdateMonitor
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|XmpUtilWriter
operator|.
name|writeXmp
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|pdfFile
argument_list|)
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|,
name|result
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|xmpPreferences
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Metadata sucessfully written to Pdf."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Insert correct file paths (.bib and .pdf)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Print usage information for the console tool xmpUtil.      */
DECL|method|printMenu ()
specifier|private
specifier|static
name|void
name|printMenu
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"---------------------Menu-----------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"(0) Exit"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"(1) Read metadata from PDF and print as bibtex"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"(2) Write entries in bib file to Pdf metadata"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    To report bugs visit https://issues.jabref.org"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-------------------------------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Choose an option: "
argument_list|)
expr_stmt|;
block|}
comment|/**      * The tool is implemented as a console application with a read-evaluate-print cycle.      */
DECL|method|executeXmpConsoleApplicaton ()
specifier|public
specifier|static
name|void
name|executeXmpConsoleApplicaton
parameter_list|()
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|==
literal|null
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
name|xmpPreferences
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getXMPPreferences
argument_list|()
expr_stmt|;
name|importFormatPreferences
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
expr_stmt|;
name|BufferedReader
name|consoleReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|option
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|option
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|XmpUtilMain
operator|.
name|printMenu
argument_list|()
expr_stmt|;
name|option
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|consoleReader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|==
literal|0
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|option
operator|==
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Insert your filename (.pdf): "
argument_list|)
expr_stmt|;
name|String
name|filename
init|=
name|consoleReader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|XmpUtilMain
operator|.
name|readPdfAndPrintBib
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|==
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Insert your filename (.bib): "
argument_list|)
expr_stmt|;
name|String
name|bibFile
init|=
name|consoleReader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Insert your filename (.pdf): "
argument_list|)
expr_stmt|;
name|String
name|pdfFile
init|=
name|consoleReader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|XmpUtilMain
operator|.
name|writeBibFileToPdfMetadata
argument_list|(
name|bibFile
argument_list|,
name|pdfFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TransformerException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|XmpUtilMain
operator|.
name|executeXmpConsoleApplicaton
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

