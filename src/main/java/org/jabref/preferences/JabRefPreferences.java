begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.preferences
package|package
name|org
operator|.
name|jabref
operator|.
name|preferences
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|InvalidPreferencesFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumn
operator|.
name|SortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefMain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|SidePaneType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|AutoCompleteFirstNameMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|AutoCompletePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|EntryEditorPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|EntryEditorTabList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|FileDragDropPreferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
operator|.
name|GroupViewMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBindingRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|ColumnPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|MainTablePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
operator|.
name|MergeEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preferences
operator|.
name|ImportSettingsTab
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|push
operator|.
name|PushToApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|push
operator|.
name|PushToApplicationsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ThemeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|FieldContentParserPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|LatexFieldFormatterPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
operator|.
name|BibtexKeyPatternPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|CitationStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|CitationStylePreviewLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|PreviewLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|TextBasedPreviewLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|CleanupPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|CleanupPreset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|Cleanups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|ExporterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|SavePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|TemplateExporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
operator|.
name|DoiFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatterPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
operator|.
name|FileLinkPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
operator|.
name|NameFormatterPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|ProxyPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|OpenOfficePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|StyleLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|preferences
operator|.
name|TimestampPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
operator|.
name|ProtectedTermsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
operator|.
name|ProtectedTermsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
operator|.
name|ProtectedTermsPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|RemotePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|shared
operator|.
name|prefs
operator|.
name|SharedDatabasePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|UpdateFieldPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|AutoLinkPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XmpPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|GlobalBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|FieldFormatterCleanups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexSingleField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|CustomEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FilePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|SaveOrderConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|JabRefPreferences
specifier|public
class|class
name|JabRefPreferences
implements|implements
name|PreferencesService
block|{
comment|// Push to application preferences
DECL|field|EMACS_PATH
specifier|public
specifier|static
specifier|final
name|String
name|EMACS_PATH
init|=
literal|"emacsPath"
decl_stmt|;
DECL|field|EMACS_ADDITIONAL_PARAMETERS
specifier|public
specifier|static
specifier|final
name|String
name|EMACS_ADDITIONAL_PARAMETERS
init|=
literal|"emacsParameters"
decl_stmt|;
comment|/* contents of the defaults HashMap that are defined in this class.      * There are more default parameters in this map which belong to separate preference classes.     */
DECL|field|TEXSTUDIO_PATH
specifier|public
specifier|static
specifier|final
name|String
name|TEXSTUDIO_PATH
init|=
literal|"TeXstudioPath"
decl_stmt|;
DECL|field|WIN_EDT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|WIN_EDT_PATH
init|=
literal|"winEdtPath"
decl_stmt|;
DECL|field|TEXMAKER_PATH
specifier|public
specifier|static
specifier|final
name|String
name|TEXMAKER_PATH
init|=
literal|"texmakerPath"
decl_stmt|;
DECL|field|VIM_SERVER
specifier|public
specifier|static
specifier|final
name|String
name|VIM_SERVER
init|=
literal|"vimServer"
decl_stmt|;
DECL|field|VIM
specifier|public
specifier|static
specifier|final
name|String
name|VIM
init|=
literal|"vim"
decl_stmt|;
DECL|field|LYXPIPE
specifier|public
specifier|static
specifier|final
name|String
name|LYXPIPE
init|=
literal|"lyxpipe"
decl_stmt|;
DECL|field|EXTERNAL_FILE_TYPES
specifier|public
specifier|static
specifier|final
name|String
name|EXTERNAL_FILE_TYPES
init|=
literal|"externalFileTypes"
decl_stmt|;
DECL|field|FONT_FAMILY
specifier|public
specifier|static
specifier|final
name|String
name|FONT_FAMILY
init|=
literal|"fontFamily"
decl_stmt|;
DECL|field|FX_FONT_RENDERING_TWEAK
specifier|public
specifier|static
specifier|final
name|String
name|FX_FONT_RENDERING_TWEAK
init|=
literal|"fxFontRenderingTweak"
decl_stmt|;
DECL|field|FX_THEME
specifier|public
specifier|static
specifier|final
name|String
name|FX_THEME
init|=
literal|"fxTheme"
decl_stmt|;
DECL|field|LANGUAGE
specifier|public
specifier|static
specifier|final
name|String
name|LANGUAGE
init|=
literal|"language"
decl_stmt|;
DECL|field|NAMES_LAST_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|NAMES_LAST_ONLY
init|=
literal|"namesLastOnly"
decl_stmt|;
DECL|field|ABBR_AUTHOR_NAMES
specifier|public
specifier|static
specifier|final
name|String
name|ABBR_AUTHOR_NAMES
init|=
literal|"abbrAuthorNames"
decl_stmt|;
DECL|field|NAMES_NATBIB
specifier|public
specifier|static
specifier|final
name|String
name|NAMES_NATBIB
init|=
literal|"namesNatbib"
decl_stmt|;
DECL|field|NAMES_FIRST_LAST
specifier|public
specifier|static
specifier|final
name|String
name|NAMES_FIRST_LAST
init|=
literal|"namesFf"
decl_stmt|;
DECL|field|BIBLATEX_DEFAULT_MODE
specifier|public
specifier|static
specifier|final
name|String
name|BIBLATEX_DEFAULT_MODE
init|=
literal|"biblatexMode"
decl_stmt|;
DECL|field|NAMES_AS_IS
specifier|public
specifier|static
specifier|final
name|String
name|NAMES_AS_IS
init|=
literal|"namesAsIs"
decl_stmt|;
DECL|field|ENTRY_EDITOR_HEIGHT
specifier|public
specifier|static
specifier|final
name|String
name|ENTRY_EDITOR_HEIGHT
init|=
literal|"entryEditorHeightFX"
decl_stmt|;
DECL|field|AUTO_RESIZE_MODE
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_RESIZE_MODE
init|=
literal|"autoResizeMode"
decl_stmt|;
DECL|field|WINDOW_MAXIMISED
specifier|public
specifier|static
specifier|final
name|String
name|WINDOW_MAXIMISED
init|=
literal|"windowMaximised"
decl_stmt|;
DECL|field|USE_DEFAULT_LOOK_AND_FEEL
specifier|public
specifier|static
specifier|final
name|String
name|USE_DEFAULT_LOOK_AND_FEEL
init|=
literal|"useDefaultLookAndFeel"
decl_stmt|;
DECL|field|PROXY_PORT
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_PORT
init|=
literal|"proxyPort"
decl_stmt|;
DECL|field|PROXY_HOSTNAME
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_HOSTNAME
init|=
literal|"proxyHostname"
decl_stmt|;
DECL|field|PROXY_USE
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_USE
init|=
literal|"useProxy"
decl_stmt|;
DECL|field|PROXY_USERNAME
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_USERNAME
init|=
literal|"proxyUsername"
decl_stmt|;
DECL|field|PROXY_PASSWORD
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_PASSWORD
init|=
literal|"proxyPassword"
decl_stmt|;
DECL|field|PROXY_USE_AUTHENTICATION
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_USE_AUTHENTICATION
init|=
literal|"useProxyAuthentication"
decl_stmt|;
DECL|field|REFORMAT_FILE_ON_SAVE_AND_EXPORT
specifier|public
specifier|static
specifier|final
name|String
name|REFORMAT_FILE_ON_SAVE_AND_EXPORT
init|=
literal|"reformatFileOnSaveAndExport"
decl_stmt|;
DECL|field|EXPORT_IN_ORIGINAL_ORDER
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_IN_ORIGINAL_ORDER
init|=
literal|"exportInOriginalOrder"
decl_stmt|;
DECL|field|EXPORT_IN_SPECIFIED_ORDER
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_IN_SPECIFIED_ORDER
init|=
literal|"exportInSpecifiedOrder"
decl_stmt|;
DECL|field|EXPORT_PRIMARY_SORT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_PRIMARY_SORT_FIELD
init|=
literal|"exportPriSort"
decl_stmt|;
DECL|field|EXPORT_PRIMARY_SORT_DESCENDING
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_PRIMARY_SORT_DESCENDING
init|=
literal|"exportPriDescending"
decl_stmt|;
DECL|field|EXPORT_SECONDARY_SORT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_SECONDARY_SORT_FIELD
init|=
literal|"exportSecSort"
decl_stmt|;
DECL|field|EXPORT_SECONDARY_SORT_DESCENDING
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_SECONDARY_SORT_DESCENDING
init|=
literal|"exportSecDescending"
decl_stmt|;
DECL|field|EXPORT_TERTIARY_SORT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_TERTIARY_SORT_FIELD
init|=
literal|"exportTerSort"
decl_stmt|;
DECL|field|EXPORT_TERTIARY_SORT_DESCENDING
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_TERTIARY_SORT_DESCENDING
init|=
literal|"exportTerDescending"
decl_stmt|;
DECL|field|NEWLINE
specifier|public
specifier|static
specifier|final
name|String
name|NEWLINE
init|=
literal|"newline"
decl_stmt|;
DECL|field|COLUMN_WIDTHS
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN_WIDTHS
init|=
literal|"columnWidths"
decl_stmt|;
DECL|field|COLUMN_NAMES
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN_NAMES
init|=
literal|"columnNames"
decl_stmt|;
DECL|field|COLUMN_IN_SORT_ORDER
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN_IN_SORT_ORDER
init|=
literal|"columnInSortOrder"
decl_stmt|;
DECL|field|COlUMN_IN_SORT_ORDER_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|COlUMN_IN_SORT_ORDER_TYPE
init|=
literal|"columnInSortOrderType"
decl_stmt|;
DECL|field|SIDE_PANE_COMPONENT_PREFERRED_POSITIONS
specifier|public
specifier|static
specifier|final
name|String
name|SIDE_PANE_COMPONENT_PREFERRED_POSITIONS
init|=
literal|"sidePaneComponentPreferredPositions"
decl_stmt|;
DECL|field|SIDE_PANE_COMPONENT_NAMES
specifier|public
specifier|static
specifier|final
name|String
name|SIDE_PANE_COMPONENT_NAMES
init|=
literal|"sidePaneComponentNames"
decl_stmt|;
DECL|field|XMP_PRIVACY_FILTERS
specifier|public
specifier|static
specifier|final
name|String
name|XMP_PRIVACY_FILTERS
init|=
literal|"xmpPrivacyFilters"
decl_stmt|;
DECL|field|USE_XMP_PRIVACY_FILTER
specifier|public
specifier|static
specifier|final
name|String
name|USE_XMP_PRIVACY_FILTER
init|=
literal|"useXmpPrivacyFilter"
decl_stmt|;
DECL|field|DEFAULT_AUTO_SORT
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_AUTO_SORT
init|=
literal|"defaultAutoSort"
decl_stmt|;
DECL|field|DEFAULT_SHOW_SOURCE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SHOW_SOURCE
init|=
literal|"defaultShowSource"
decl_stmt|;
comment|// Window sizes
DECL|field|SIZE_Y
specifier|public
specifier|static
specifier|final
name|String
name|SIZE_Y
init|=
literal|"mainWindowSizeY"
decl_stmt|;
DECL|field|SIZE_X
specifier|public
specifier|static
specifier|final
name|String
name|SIZE_X
init|=
literal|"mainWindowSizeX"
decl_stmt|;
DECL|field|POS_Y
specifier|public
specifier|static
specifier|final
name|String
name|POS_Y
init|=
literal|"mainWindowPosY"
decl_stmt|;
DECL|field|POS_X
specifier|public
specifier|static
specifier|final
name|String
name|POS_X
init|=
literal|"mainWindowPosX"
decl_stmt|;
DECL|field|STRINGS_SIZE_Y
specifier|public
specifier|static
specifier|final
name|String
name|STRINGS_SIZE_Y
init|=
literal|"stringsSizeY"
decl_stmt|;
DECL|field|STRINGS_SIZE_X
specifier|public
specifier|static
specifier|final
name|String
name|STRINGS_SIZE_X
init|=
literal|"stringsSizeX"
decl_stmt|;
DECL|field|STRINGS_POS_Y
specifier|public
specifier|static
specifier|final
name|String
name|STRINGS_POS_Y
init|=
literal|"stringsPosY"
decl_stmt|;
DECL|field|STRINGS_POS_X
specifier|public
specifier|static
specifier|final
name|String
name|STRINGS_POS_X
init|=
literal|"stringsPosX"
decl_stmt|;
DECL|field|DUPLICATES_SIZE_Y
specifier|public
specifier|static
specifier|final
name|String
name|DUPLICATES_SIZE_Y
init|=
literal|"duplicatesSizeY"
decl_stmt|;
DECL|field|DUPLICATES_SIZE_X
specifier|public
specifier|static
specifier|final
name|String
name|DUPLICATES_SIZE_X
init|=
literal|"duplicatesSizeX"
decl_stmt|;
DECL|field|DUPLICATES_POS_Y
specifier|public
specifier|static
specifier|final
name|String
name|DUPLICATES_POS_Y
init|=
literal|"duplicatesPosY"
decl_stmt|;
DECL|field|DUPLICATES_POS_X
specifier|public
specifier|static
specifier|final
name|String
name|DUPLICATES_POS_X
init|=
literal|"duplicatesPosX"
decl_stmt|;
DECL|field|MERGEENTRIES_SIZE_Y
specifier|public
specifier|static
specifier|final
name|String
name|MERGEENTRIES_SIZE_Y
init|=
literal|"mergeEntriesSizeY"
decl_stmt|;
DECL|field|MERGEENTRIES_SIZE_X
specifier|public
specifier|static
specifier|final
name|String
name|MERGEENTRIES_SIZE_X
init|=
literal|"mergeEntriesSizeX"
decl_stmt|;
DECL|field|MERGEENTRIES_POS_Y
specifier|public
specifier|static
specifier|final
name|String
name|MERGEENTRIES_POS_Y
init|=
literal|"mergeEntriesPosY"
decl_stmt|;
DECL|field|MERGEENTRIES_POS_X
specifier|public
specifier|static
specifier|final
name|String
name|MERGEENTRIES_POS_X
init|=
literal|"mergeEntriesPosX"
decl_stmt|;
DECL|field|PREAMBLE_SIZE_Y
specifier|public
specifier|static
specifier|final
name|String
name|PREAMBLE_SIZE_Y
init|=
literal|"preambleSizeY"
decl_stmt|;
DECL|field|PREAMBLE_SIZE_X
specifier|public
specifier|static
specifier|final
name|String
name|PREAMBLE_SIZE_X
init|=
literal|"preambleSizeX"
decl_stmt|;
DECL|field|PREAMBLE_POS_Y
specifier|public
specifier|static
specifier|final
name|String
name|PREAMBLE_POS_Y
init|=
literal|"preamblePosY"
decl_stmt|;
DECL|field|PREAMBLE_POS_X
specifier|public
specifier|static
specifier|final
name|String
name|PREAMBLE_POS_X
init|=
literal|"preamblePosX"
decl_stmt|;
DECL|field|SEARCH_DIALOG_HEIGHT
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_DIALOG_HEIGHT
init|=
literal|"searchDialogHeight"
decl_stmt|;
DECL|field|SEARCH_DIALOG_WIDTH
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_DIALOG_WIDTH
init|=
literal|"searchDialogWidth"
decl_stmt|;
DECL|field|LAST_EDITED
specifier|public
specifier|static
specifier|final
name|String
name|LAST_EDITED
init|=
literal|"lastEdited"
decl_stmt|;
DECL|field|OPEN_LAST_EDITED
specifier|public
specifier|static
specifier|final
name|String
name|OPEN_LAST_EDITED
init|=
literal|"openLastEdited"
decl_stmt|;
DECL|field|LAST_FOCUSED
specifier|public
specifier|static
specifier|final
name|String
name|LAST_FOCUSED
init|=
literal|"lastFocused"
decl_stmt|;
DECL|field|BACKUP
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP
init|=
literal|"backup"
decl_stmt|;
DECL|field|AUTO_OPEN_FORM
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_OPEN_FORM
init|=
literal|"autoOpenForm"
decl_stmt|;
DECL|field|IMPORT_WORKING_DIRECTORY
specifier|public
specifier|static
specifier|final
name|String
name|IMPORT_WORKING_DIRECTORY
init|=
literal|"importWorkingDirectory"
decl_stmt|;
DECL|field|EXPORT_WORKING_DIRECTORY
specifier|public
specifier|static
specifier|final
name|String
name|EXPORT_WORKING_DIRECTORY
init|=
literal|"exportWorkingDirectory"
decl_stmt|;
DECL|field|WORKING_DIRECTORY
specifier|public
specifier|static
specifier|final
name|String
name|WORKING_DIRECTORY
init|=
literal|"workingDirectory"
decl_stmt|;
DECL|field|EDITOR_EMACS_KEYBINDINGS
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_EMACS_KEYBINDINGS
init|=
literal|"editorEMACSkeyBindings"
decl_stmt|;
DECL|field|EDITOR_EMACS_KEYBINDINGS_REBIND_CA
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_EMACS_KEYBINDINGS_REBIND_CA
init|=
literal|"editorEMACSkeyBindingsRebindCA"
decl_stmt|;
DECL|field|EDITOR_EMACS_KEYBINDINGS_REBIND_CF
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_EMACS_KEYBINDINGS_REBIND_CF
init|=
literal|"editorEMACSkeyBindingsRebindCF"
decl_stmt|;
DECL|field|GROUPS_DEFAULT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|GROUPS_DEFAULT_FIELD
init|=
literal|"groupsDefaultField"
decl_stmt|;
DECL|field|KEYWORD_SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
name|KEYWORD_SEPARATOR
init|=
literal|"groupKeywordSeparator"
decl_stmt|;
DECL|field|AUTO_ASSIGN_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_ASSIGN_GROUP
init|=
literal|"autoAssignGroup"
decl_stmt|;
DECL|field|LIST_OF_FILE_COLUMNS
specifier|public
specifier|static
specifier|final
name|String
name|LIST_OF_FILE_COLUMNS
init|=
literal|"listOfFileColumns"
decl_stmt|;
DECL|field|EXTRA_FILE_COLUMNS
specifier|public
specifier|static
specifier|final
name|String
name|EXTRA_FILE_COLUMNS
init|=
literal|"extraFileColumns"
decl_stmt|;
DECL|field|ARXIV_COLUMN
specifier|public
specifier|static
specifier|final
name|String
name|ARXIV_COLUMN
init|=
literal|"arxivColumn"
decl_stmt|;
DECL|field|FILE_COLUMN
specifier|public
specifier|static
specifier|final
name|String
name|FILE_COLUMN
init|=
literal|"fileColumn"
decl_stmt|;
DECL|field|PREFER_URL_DOI
specifier|public
specifier|static
specifier|final
name|String
name|PREFER_URL_DOI
init|=
literal|"preferUrlDoi"
decl_stmt|;
DECL|field|URL_COLUMN
specifier|public
specifier|static
specifier|final
name|String
name|URL_COLUMN
init|=
literal|"urlColumn"
decl_stmt|;
comment|// Colors
DECL|field|FIELD_EDITOR_TEXT_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_EDITOR_TEXT_COLOR
init|=
literal|"fieldEditorTextColor"
decl_stmt|;
DECL|field|ACTIVE_FIELD_EDITOR_BACKGROUND_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|ACTIVE_FIELD_EDITOR_BACKGROUND_COLOR
init|=
literal|"activeFieldEditorBackgroundColor"
decl_stmt|;
DECL|field|INVALID_FIELD_BACKGROUND_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|INVALID_FIELD_BACKGROUND_COLOR
init|=
literal|"invalidFieldBackgroundColor"
decl_stmt|;
DECL|field|VALID_FIELD_BACKGROUND_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|VALID_FIELD_BACKGROUND_COLOR
init|=
literal|"validFieldBackgroundColor"
decl_stmt|;
DECL|field|ICON_ENABLED_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|ICON_ENABLED_COLOR
init|=
literal|"iconEnabledColor"
decl_stmt|;
DECL|field|ICON_DISABLED_COLOR
specifier|public
specifier|static
specifier|final
name|String
name|ICON_DISABLED_COLOR
init|=
literal|"iconDisabledColor"
decl_stmt|;
DECL|field|FONT_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|FONT_SIZE
init|=
literal|"fontSize"
decl_stmt|;
DECL|field|OVERRIDE_DEFAULT_FONT_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|OVERRIDE_DEFAULT_FONT_SIZE
init|=
literal|"overrideDefaultFontSize"
decl_stmt|;
DECL|field|MAIN_FONT_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|MAIN_FONT_SIZE
init|=
literal|"mainFontSize"
decl_stmt|;
DECL|field|FONT_STYLE
specifier|public
specifier|static
specifier|final
name|String
name|FONT_STYLE
init|=
literal|"fontStyle"
decl_stmt|;
DECL|field|RECENT_DATABASES
specifier|public
specifier|static
specifier|final
name|String
name|RECENT_DATABASES
init|=
literal|"recentDatabases"
decl_stmt|;
DECL|field|RENAME_ON_MOVE_FILE_TO_FILE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|RENAME_ON_MOVE_FILE_TO_FILE_DIR
init|=
literal|"renameOnMoveFileToFileDir"
decl_stmt|;
DECL|field|MEMORY_STICK_MODE
specifier|public
specifier|static
specifier|final
name|String
name|MEMORY_STICK_MODE
init|=
literal|"memoryStickMode"
decl_stmt|;
DECL|field|SHOW_ADVANCED_HINTS
specifier|public
specifier|static
specifier|final
name|String
name|SHOW_ADVANCED_HINTS
init|=
literal|"showAdvancedHints"
decl_stmt|;
DECL|field|DEFAULT_OWNER
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_OWNER
init|=
literal|"defaultOwner"
decl_stmt|;
DECL|field|DEFAULT_ENCODING
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ENCODING
init|=
literal|"defaultEncoding"
decl_stmt|;
DECL|field|TOOLBAR_VISIBLE
specifier|public
specifier|static
specifier|final
name|String
name|TOOLBAR_VISIBLE
init|=
literal|"toolbarVisible"
decl_stmt|;
comment|// Timestamp preferences
DECL|field|USE_TIME_STAMP
specifier|public
specifier|static
specifier|final
name|String
name|USE_TIME_STAMP
init|=
literal|"useTimeStamp"
decl_stmt|;
DECL|field|UPDATE_TIMESTAMP
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_TIMESTAMP
init|=
literal|"updateTimestamp"
decl_stmt|;
DECL|field|TIME_STAMP_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|TIME_STAMP_FIELD
init|=
literal|"timeStampField"
decl_stmt|;
DECL|field|TIME_STAMP_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|TIME_STAMP_FORMAT
init|=
literal|"timeStampFormat"
decl_stmt|;
DECL|field|OVERWRITE_TIME_STAMP
specifier|public
specifier|static
specifier|final
name|String
name|OVERWRITE_TIME_STAMP
init|=
literal|"overwriteTimeStamp"
decl_stmt|;
DECL|field|WARN_ABOUT_DUPLICATES_IN_INSPECTION
specifier|public
specifier|static
specifier|final
name|String
name|WARN_ABOUT_DUPLICATES_IN_INSPECTION
init|=
literal|"warnAboutDuplicatesInInspection"
decl_stmt|;
DECL|field|NON_WRAPPABLE_FIELDS
specifier|public
specifier|static
specifier|final
name|String
name|NON_WRAPPABLE_FIELDS
init|=
literal|"nonWrappableFields"
decl_stmt|;
DECL|field|RESOLVE_STRINGS_ALL_FIELDS
specifier|public
specifier|static
specifier|final
name|String
name|RESOLVE_STRINGS_ALL_FIELDS
init|=
literal|"resolveStringsAllFields"
decl_stmt|;
DECL|field|DO_NOT_RESOLVE_STRINGS_FOR
specifier|public
specifier|static
specifier|final
name|String
name|DO_NOT_RESOLVE_STRINGS_FOR
init|=
literal|"doNotResolveStringsFor"
decl_stmt|;
DECL|field|MERGE_ENTRIES_DIFF_MODE
specifier|public
specifier|static
specifier|final
name|String
name|MERGE_ENTRIES_DIFF_MODE
init|=
literal|"mergeEntriesDiffMode"
decl_stmt|;
DECL|field|CUSTOM_EXPORT_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_EXPORT_FORMAT
init|=
literal|"customExportFormat"
decl_stmt|;
DECL|field|CUSTOM_IMPORT_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_IMPORT_FORMAT
init|=
literal|"customImportFormat"
decl_stmt|;
DECL|field|KEY_PATTERN_REGEX
specifier|public
specifier|static
specifier|final
name|String
name|KEY_PATTERN_REGEX
init|=
literal|"KeyPatternRegex"
decl_stmt|;
DECL|field|KEY_PATTERN_REPLACEMENT
specifier|public
specifier|static
specifier|final
name|String
name|KEY_PATTERN_REPLACEMENT
init|=
literal|"KeyPatternReplacement"
decl_stmt|;
DECL|field|CONSOLE_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|CONSOLE_COMMAND
init|=
literal|"consoleCommand"
decl_stmt|;
DECL|field|USE_DEFAULT_CONSOLE_APPLICATION
specifier|public
specifier|static
specifier|final
name|String
name|USE_DEFAULT_CONSOLE_APPLICATION
init|=
literal|"useDefaultConsoleApplication"
decl_stmt|;
DECL|field|ADOBE_ACROBAT_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|ADOBE_ACROBAT_COMMAND
init|=
literal|"adobeAcrobatCommand"
decl_stmt|;
DECL|field|SUMATRA_PDF_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|SUMATRA_PDF_COMMAND
init|=
literal|"sumatraCommand"
decl_stmt|;
DECL|field|USE_PDF_READER
specifier|public
specifier|static
specifier|final
name|String
name|USE_PDF_READER
init|=
literal|"usePDFReader"
decl_stmt|;
DECL|field|USE_DEFAULT_FILE_BROWSER_APPLICATION
specifier|public
specifier|static
specifier|final
name|String
name|USE_DEFAULT_FILE_BROWSER_APPLICATION
init|=
literal|"userDefaultFileBrowserApplication"
decl_stmt|;
DECL|field|FILE_BROWSER_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|FILE_BROWSER_COMMAND
init|=
literal|"fileBrowserCommand"
decl_stmt|;
comment|// Currently, it is not possible to specify defaults for specific entry types
comment|// When this should be made possible, the code to inspect is org.jabref.gui.preferences.BibtexKeyPatternPrefTab.storeSettings() -> LabelPattern keypatterns = getCiteKeyPattern(); etc
DECL|field|DEFAULT_BIBTEX_KEY_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_BIBTEX_KEY_PATTERN
init|=
literal|"defaultBibtexKeyPattern"
decl_stmt|;
DECL|field|GRAY_OUT_NON_HITS
specifier|public
specifier|static
specifier|final
name|String
name|GRAY_OUT_NON_HITS
init|=
literal|"grayOutNonHits"
decl_stmt|;
DECL|field|CONFIRM_DELETE
specifier|public
specifier|static
specifier|final
name|String
name|CONFIRM_DELETE
init|=
literal|"confirmDelete"
decl_stmt|;
DECL|field|WARN_BEFORE_OVERWRITING_KEY
specifier|public
specifier|static
specifier|final
name|String
name|WARN_BEFORE_OVERWRITING_KEY
init|=
literal|"warnBeforeOverwritingKey"
decl_stmt|;
DECL|field|AVOID_OVERWRITING_KEY
specifier|public
specifier|static
specifier|final
name|String
name|AVOID_OVERWRITING_KEY
init|=
literal|"avoidOverwritingKey"
decl_stmt|;
DECL|field|OVERWRITE_OWNER
specifier|public
specifier|static
specifier|final
name|String
name|OVERWRITE_OWNER
init|=
literal|"overwriteOwner"
decl_stmt|;
DECL|field|USE_OWNER
specifier|public
specifier|static
specifier|final
name|String
name|USE_OWNER
init|=
literal|"useOwner"
decl_stmt|;
DECL|field|AUTOLINK_EXACT_KEY_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|AUTOLINK_EXACT_KEY_ONLY
init|=
literal|"autolinkExactKeyOnly"
decl_stmt|;
DECL|field|SHOW_FILE_LINKS_UPGRADE_WARNING
specifier|public
specifier|static
specifier|final
name|String
name|SHOW_FILE_LINKS_UPGRADE_WARNING
init|=
literal|"showFileLinksUpgradeWarning"
decl_stmt|;
DECL|field|SIDE_PANE_WIDTH
specifier|public
specifier|static
specifier|final
name|String
name|SIDE_PANE_WIDTH
init|=
literal|"sidePaneWidthFX"
decl_stmt|;
DECL|field|LAST_USED_EXPORT
specifier|public
specifier|static
specifier|final
name|String
name|LAST_USED_EXPORT
init|=
literal|"lastUsedExport"
decl_stmt|;
DECL|field|CITE_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|CITE_COMMAND
init|=
literal|"citeCommand"
decl_stmt|;
DECL|field|GENERATE_KEYS_BEFORE_SAVING
specifier|public
specifier|static
specifier|final
name|String
name|GENERATE_KEYS_BEFORE_SAVING
init|=
literal|"generateKeysBeforeSaving"
decl_stmt|;
DECL|field|EMAIL_SUBJECT
specifier|public
specifier|static
specifier|final
name|String
name|EMAIL_SUBJECT
init|=
literal|"emailSubject"
decl_stmt|;
DECL|field|OPEN_FOLDERS_OF_ATTACHED_FILES
specifier|public
specifier|static
specifier|final
name|String
name|OPEN_FOLDERS_OF_ATTACHED_FILES
init|=
literal|"openFoldersOfAttachedFiles"
decl_stmt|;
DECL|field|KEY_GEN_ALWAYS_ADD_LETTER
specifier|public
specifier|static
specifier|final
name|String
name|KEY_GEN_ALWAYS_ADD_LETTER
init|=
literal|"keyGenAlwaysAddLetter"
decl_stmt|;
DECL|field|KEY_GEN_FIRST_LETTER_A
specifier|public
specifier|static
specifier|final
name|String
name|KEY_GEN_FIRST_LETTER_A
init|=
literal|"keyGenFirstLetterA"
decl_stmt|;
DECL|field|ENFORCE_LEGAL_BIBTEX_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ENFORCE_LEGAL_BIBTEX_KEY
init|=
literal|"enforceLegalBibtexKey"
decl_stmt|;
DECL|field|ALLOW_INTEGER_EDITION_BIBTEX
specifier|public
specifier|static
specifier|final
name|String
name|ALLOW_INTEGER_EDITION_BIBTEX
init|=
literal|"allowIntegerEditionBibtex"
decl_stmt|;
DECL|field|LOCAL_AUTO_SAVE
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_AUTO_SAVE
init|=
literal|"localAutoSave"
decl_stmt|;
DECL|field|RUN_AUTOMATIC_FILE_SEARCH
specifier|public
specifier|static
specifier|final
name|String
name|RUN_AUTOMATIC_FILE_SEARCH
init|=
literal|"runAutomaticFileSearch"
decl_stmt|;
DECL|field|NUMERIC_FIELDS
specifier|public
specifier|static
specifier|final
name|String
name|NUMERIC_FIELDS
init|=
literal|"numericFields"
decl_stmt|;
DECL|field|AUTOLINK_REG_EXP_SEARCH_EXPRESSION_KEY
specifier|public
specifier|static
specifier|final
name|String
name|AUTOLINK_REG_EXP_SEARCH_EXPRESSION_KEY
init|=
literal|"regExpSearchExpression"
decl_stmt|;
DECL|field|AUTOLINK_USE_REG_EXP_SEARCH_KEY
specifier|public
specifier|static
specifier|final
name|String
name|AUTOLINK_USE_REG_EXP_SEARCH_KEY
init|=
literal|"useRegExpSearch"
decl_stmt|;
DECL|field|BIB_LOC_AS_PRIMARY_DIR
specifier|public
specifier|static
specifier|final
name|String
name|BIB_LOC_AS_PRIMARY_DIR
init|=
literal|"bibLocAsPrimaryDir"
decl_stmt|;
DECL|field|SELECTED_FETCHER_INDEX
specifier|public
specifier|static
specifier|final
name|String
name|SELECTED_FETCHER_INDEX
init|=
literal|"selectedFetcherIndex"
decl_stmt|;
DECL|field|WEB_SEARCH_VISIBLE
specifier|public
specifier|static
specifier|final
name|String
name|WEB_SEARCH_VISIBLE
init|=
literal|"webSearchVisible"
decl_stmt|;
DECL|field|GROUP_SIDEPANE_VISIBLE
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_SIDEPANE_VISIBLE
init|=
literal|"groupSidepaneVisible"
decl_stmt|;
DECL|field|ALLOW_FILE_AUTO_OPEN_BROWSE
specifier|public
specifier|static
specifier|final
name|String
name|ALLOW_FILE_AUTO_OPEN_BROWSE
init|=
literal|"allowFileAutoOpenBrowse"
decl_stmt|;
DECL|field|CUSTOM_TAB_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_TAB_NAME
init|=
literal|"customTabName_"
decl_stmt|;
DECL|field|CUSTOM_TAB_FIELDS
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_TAB_FIELDS
init|=
literal|"customTabFields_"
decl_stmt|;
DECL|field|USE_UNIT_FORMATTER_ON_SEARCH
specifier|public
specifier|static
specifier|final
name|String
name|USE_UNIT_FORMATTER_ON_SEARCH
init|=
literal|"useUnitFormatterOnSearch"
decl_stmt|;
DECL|field|USE_CASE_KEEPER_ON_SEARCH
specifier|public
specifier|static
specifier|final
name|String
name|USE_CASE_KEEPER_ON_SEARCH
init|=
literal|"useCaseKeeperOnSearch"
decl_stmt|;
DECL|field|ASK_AUTO_NAMING_PDFS_AGAIN
specifier|public
specifier|static
specifier|final
name|String
name|ASK_AUTO_NAMING_PDFS_AGAIN
init|=
literal|"AskAutoNamingPDFsAgain"
decl_stmt|;
DECL|field|CLEANUP
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP
init|=
literal|"CleanUp"
decl_stmt|;
DECL|field|CLEANUP_FORMATTERS
specifier|public
specifier|static
specifier|final
name|String
name|CLEANUP_FORMATTERS
init|=
literal|"CleanUpFormatters"
decl_stmt|;
DECL|field|IMPORT_FILENAMEPATTERN
specifier|public
specifier|static
specifier|final
name|String
name|IMPORT_FILENAMEPATTERN
init|=
literal|"importFileNamePattern"
decl_stmt|;
DECL|field|IMPORT_FILEDIRPATTERN
specifier|public
specifier|static
specifier|final
name|String
name|IMPORT_FILEDIRPATTERN
init|=
literal|"importFileDirPattern"
decl_stmt|;
DECL|field|NAME_FORMATTER_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|NAME_FORMATTER_VALUE
init|=
literal|"nameFormatterFormats"
decl_stmt|;
DECL|field|NAME_FORMATER_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NAME_FORMATER_KEY
init|=
literal|"nameFormatterNames"
decl_stmt|;
DECL|field|PUSH_TO_APPLICATION
specifier|public
specifier|static
specifier|final
name|String
name|PUSH_TO_APPLICATION
init|=
literal|"pushToApplication"
decl_stmt|;
DECL|field|SHOW_RECOMMENDATIONS
specifier|public
specifier|static
specifier|final
name|String
name|SHOW_RECOMMENDATIONS
init|=
literal|"showRecommendations"
decl_stmt|;
DECL|field|ACCEPT_RECOMMENDATIONS
specifier|public
specifier|static
specifier|final
name|String
name|ACCEPT_RECOMMENDATIONS
init|=
literal|"acceptRecommendations"
decl_stmt|;
DECL|field|SEND_LANGUAGE_DATA
specifier|public
specifier|static
specifier|final
name|String
name|SEND_LANGUAGE_DATA
init|=
literal|"sendLanguageData"
decl_stmt|;
DECL|field|SEND_OS_DATA
specifier|public
specifier|static
specifier|final
name|String
name|SEND_OS_DATA
init|=
literal|"sendOSData"
decl_stmt|;
DECL|field|SEND_TIMEZONE_DATA
specifier|public
specifier|static
specifier|final
name|String
name|SEND_TIMEZONE_DATA
init|=
literal|"sendTimezoneData"
decl_stmt|;
DECL|field|VALIDATE_IN_ENTRY_EDITOR
specifier|public
specifier|static
specifier|final
name|String
name|VALIDATE_IN_ENTRY_EDITOR
init|=
literal|"validateInEntryEditor"
decl_stmt|;
comment|// Dropped file handler
DECL|field|DROPPEDFILEHANDLER_RENAME
specifier|public
specifier|static
specifier|final
name|String
name|DROPPEDFILEHANDLER_RENAME
init|=
literal|"DroppedFileHandler_RenameFile"
decl_stmt|;
DECL|field|DROPPEDFILEHANDLER_MOVE
specifier|public
specifier|static
specifier|final
name|String
name|DROPPEDFILEHANDLER_MOVE
init|=
literal|"DroppedFileHandler_MoveFile"
decl_stmt|;
DECL|field|DROPPEDFILEHANDLER_COPY
specifier|public
specifier|static
specifier|final
name|String
name|DROPPEDFILEHANDLER_COPY
init|=
literal|"DroppedFileHandler_CopyFile"
decl_stmt|;
DECL|field|DROPPEDFILEHANDLER_LEAVE
specifier|public
specifier|static
specifier|final
name|String
name|DROPPEDFILEHANDLER_LEAVE
init|=
literal|"DroppedFileHandler_LeaveFileInDir"
decl_stmt|;
comment|// Remote
DECL|field|USE_REMOTE_SERVER
specifier|public
specifier|static
specifier|final
name|String
name|USE_REMOTE_SERVER
init|=
literal|"useRemoteServer"
decl_stmt|;
DECL|field|REMOTE_SERVER_PORT
specifier|public
specifier|static
specifier|final
name|String
name|REMOTE_SERVER_PORT
init|=
literal|"remoteServerPort"
decl_stmt|;
comment|/**      * The OpenOffice/LibreOffice connection preferences are:      * OO_PATH main directory for OO/LO installation, used to detect location on Win/OS X when using manual connect      * OO_EXECUTABLE_PATH path to soffice-file      * OO_JARS_PATH directory that contains juh.jar, jurt.jar, ridl.jar, unoil.jar      * OO_SYNC_WHEN_CITING true if the reference list is updated when adding a new citation      * OO_SHOW_PANEL true if the OO panel is shown on startup      * OO_USE_ALL_OPEN_DATABASES true if all databases should be used when citing      * OO_BIBLIOGRAPHY_STYLE_FILE path to the used style file      * OO_EXTERNAL_STYLE_FILES list with paths to external style files      * STYLES_*_* size and position of "Select style" dialog      */
DECL|field|OO_EXECUTABLE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|OO_EXECUTABLE_PATH
init|=
literal|"ooExecutablePath"
decl_stmt|;
DECL|field|OO_PATH
specifier|public
specifier|static
specifier|final
name|String
name|OO_PATH
init|=
literal|"ooPath"
decl_stmt|;
DECL|field|OO_JARS_PATH
specifier|public
specifier|static
specifier|final
name|String
name|OO_JARS_PATH
init|=
literal|"ooJarsPath"
decl_stmt|;
DECL|field|OO_SHOW_PANEL
specifier|public
specifier|static
specifier|final
name|String
name|OO_SHOW_PANEL
init|=
literal|"showOOPanel"
decl_stmt|;
DECL|field|OO_SYNC_WHEN_CITING
specifier|public
specifier|static
specifier|final
name|String
name|OO_SYNC_WHEN_CITING
init|=
literal|"syncOOWhenCiting"
decl_stmt|;
DECL|field|OO_USE_ALL_OPEN_BASES
specifier|public
specifier|static
specifier|final
name|String
name|OO_USE_ALL_OPEN_BASES
init|=
literal|"useAllOpenBases"
decl_stmt|;
DECL|field|OO_BIBLIOGRAPHY_STYLE_FILE
specifier|public
specifier|static
specifier|final
name|String
name|OO_BIBLIOGRAPHY_STYLE_FILE
init|=
literal|"ooBibliographyStyleFile"
decl_stmt|;
DECL|field|OO_EXTERNAL_STYLE_FILES
specifier|public
specifier|static
specifier|final
name|String
name|OO_EXTERNAL_STYLE_FILES
init|=
literal|"ooExternalStyleFiles"
decl_stmt|;
DECL|field|STYLES_SIZE_Y
specifier|public
specifier|static
specifier|final
name|String
name|STYLES_SIZE_Y
init|=
literal|"stylesSizeY"
decl_stmt|;
DECL|field|STYLES_SIZE_X
specifier|public
specifier|static
specifier|final
name|String
name|STYLES_SIZE_X
init|=
literal|"stylesSizeX"
decl_stmt|;
DECL|field|STYLES_POS_Y
specifier|public
specifier|static
specifier|final
name|String
name|STYLES_POS_Y
init|=
literal|"stylesPosY"
decl_stmt|;
DECL|field|STYLES_POS_X
specifier|public
specifier|static
specifier|final
name|String
name|STYLES_POS_X
init|=
literal|"stylesPosX"
decl_stmt|;
comment|// Special field preferences
DECL|field|SHOWCOLUMN_RELEVANCE
specifier|public
specifier|static
specifier|final
name|String
name|SHOWCOLUMN_RELEVANCE
init|=
literal|"showRelevanceColumn"
decl_stmt|;
DECL|field|SHOWCOLUMN_READ
specifier|public
specifier|static
specifier|final
name|String
name|SHOWCOLUMN_READ
init|=
literal|"showReadColumn"
decl_stmt|;
DECL|field|SHOWCOLUMN_RANKING
specifier|public
specifier|static
specifier|final
name|String
name|SHOWCOLUMN_RANKING
init|=
literal|"showRankingColumn"
decl_stmt|;
DECL|field|SHOWCOLUMN_QUALITY
specifier|public
specifier|static
specifier|final
name|String
name|SHOWCOLUMN_QUALITY
init|=
literal|"showQualityColumn"
decl_stmt|;
DECL|field|SHOWCOLUMN_PRIORITY
specifier|public
specifier|static
specifier|final
name|String
name|SHOWCOLUMN_PRIORITY
init|=
literal|"showPriorityColumn"
decl_stmt|;
DECL|field|SHOWCOLUMN_PRINTED
specifier|public
specifier|static
specifier|final
name|String
name|SHOWCOLUMN_PRINTED
init|=
literal|"showPrintedColumn"
decl_stmt|;
DECL|field|SPECIALFIELDSENABLED
specifier|public
specifier|static
specifier|final
name|String
name|SPECIALFIELDSENABLED
init|=
literal|"specialFieldsEnabled"
decl_stmt|;
comment|// The choice between AUTOSYNCSPECIALFIELDSTOKEYWORDS and SERIALIZESPECIALFIELDS is mutually exclusive
DECL|field|SERIALIZESPECIALFIELDS
specifier|public
specifier|static
specifier|final
name|String
name|SERIALIZESPECIALFIELDS
init|=
literal|"serializeSpecialFields"
decl_stmt|;
comment|// The choice between AUTOSYNCSPECIALFIELDSTOKEYWORDS and SERIALIZESPECIALFIELDS is mutually exclusive
comment|// At least in the settings, not in the implementation. But having both confused the users, therefore, having activated both options at the same time has been disabled
DECL|field|AUTOSYNCSPECIALFIELDSTOKEYWORDS
specifier|public
specifier|static
specifier|final
name|String
name|AUTOSYNCSPECIALFIELDSTOKEYWORDS
init|=
literal|"autoSyncSpecialFieldsToKeywords"
decl_stmt|;
comment|// Prefs node for BibtexKeyPatterns
DECL|field|BIBTEX_KEY_PATTERNS_NODE
specifier|public
specifier|static
specifier|final
name|String
name|BIBTEX_KEY_PATTERNS_NODE
init|=
literal|"bibtexkeypatterns"
decl_stmt|;
comment|// Prefs node for customized entry types
DECL|field|CUSTOMIZED_BIBTEX_TYPES
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOMIZED_BIBTEX_TYPES
init|=
literal|"customizedBibtexTypes"
decl_stmt|;
DECL|field|CUSTOMIZED_BIBLATEX_TYPES
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOMIZED_BIBLATEX_TYPES
init|=
literal|"customizedBiblatexTypes"
decl_stmt|;
comment|// Version
DECL|field|VERSION_IGNORED_UPDATE
specifier|public
specifier|static
specifier|final
name|String
name|VERSION_IGNORED_UPDATE
init|=
literal|"versionIgnoreUpdate"
decl_stmt|;
comment|//KeyBindings - keys - public because needed for pref migration
DECL|field|BINDINGS
specifier|public
specifier|static
specifier|final
name|String
name|BINDINGS
init|=
literal|"bindings"
decl_stmt|;
comment|//AutcompleteFields - public because needed for pref migration
DECL|field|AUTOCOMPLETER_COMPLETE_FIELDS
specifier|public
specifier|static
specifier|final
name|String
name|AUTOCOMPLETER_COMPLETE_FIELDS
init|=
literal|"autoCompleteFields"
decl_stmt|;
comment|// Id Entry Generator Preferences
DECL|field|ID_ENTRY_GENERATOR
specifier|public
specifier|static
specifier|final
name|String
name|ID_ENTRY_GENERATOR
init|=
literal|"idEntryGenerator"
decl_stmt|;
comment|//File linking Options for entry editor
DECL|field|ENTRY_EDITOR_DRAG_DROP_PREFERENCE_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|ENTRY_EDITOR_DRAG_DROP_PREFERENCE_TYPE
init|=
literal|"DragDropPreferenceType"
decl_stmt|;
comment|// Preview
DECL|field|PREVIEW_STYLE
specifier|private
specifier|static
specifier|final
name|String
name|PREVIEW_STYLE
init|=
literal|"previewStyle"
decl_stmt|;
DECL|field|CYCLE_PREVIEW_POS
specifier|private
specifier|static
specifier|final
name|String
name|CYCLE_PREVIEW_POS
init|=
literal|"cyclePreviewPos"
decl_stmt|;
DECL|field|CYCLE_PREVIEW
specifier|private
specifier|static
specifier|final
name|String
name|CYCLE_PREVIEW
init|=
literal|"cyclePreview"
decl_stmt|;
DECL|field|PREVIEW_PANEL_HEIGHT
specifier|private
specifier|static
specifier|final
name|String
name|PREVIEW_PANEL_HEIGHT
init|=
literal|"previewPanelHeightFX"
decl_stmt|;
DECL|field|PREVIEW_ENABLED
specifier|private
specifier|static
specifier|final
name|String
name|PREVIEW_ENABLED
init|=
literal|"previewEnabled"
decl_stmt|;
comment|// Auto completion
DECL|field|AUTO_COMPLETE
specifier|private
specifier|static
specifier|final
name|String
name|AUTO_COMPLETE
init|=
literal|"autoComplete"
decl_stmt|;
DECL|field|AUTOCOMPLETER_FIRSTNAME_MODE
specifier|private
specifier|static
specifier|final
name|String
name|AUTOCOMPLETER_FIRSTNAME_MODE
init|=
literal|"autoCompFirstNameMode"
decl_stmt|;
DECL|field|AUTOCOMPLETER_LAST_FIRST
specifier|private
specifier|static
specifier|final
name|String
name|AUTOCOMPLETER_LAST_FIRST
init|=
literal|"autoCompLF"
decl_stmt|;
DECL|field|AUTOCOMPLETER_FIRST_LAST
specifier|private
specifier|static
specifier|final
name|String
name|AUTOCOMPLETER_FIRST_LAST
init|=
literal|"autoCompFF"
decl_stmt|;
DECL|field|BIND_NAMES
specifier|private
specifier|static
specifier|final
name|String
name|BIND_NAMES
init|=
literal|"bindNames"
decl_stmt|;
comment|// User
DECL|field|USER_ID
specifier|private
specifier|static
specifier|final
name|String
name|USER_ID
init|=
literal|"userId"
decl_stmt|;
DECL|field|EXTERNAL_JOURNAL_LISTS
specifier|private
specifier|static
specifier|final
name|String
name|EXTERNAL_JOURNAL_LISTS
init|=
literal|"externalJournalLists"
decl_stmt|;
DECL|field|PERSONAL_JOURNAL_LIST
specifier|private
specifier|static
specifier|final
name|String
name|PERSONAL_JOURNAL_LIST
init|=
literal|"personalJournalList"
decl_stmt|;
DECL|field|USE_IEEE_ABRV
specifier|private
specifier|static
specifier|final
name|String
name|USE_IEEE_ABRV
init|=
literal|"useIEEEAbrv"
decl_stmt|;
comment|// Telemetry collection
DECL|field|COLLECT_TELEMETRY
specifier|private
specifier|static
specifier|final
name|String
name|COLLECT_TELEMETRY
init|=
literal|"collectTelemetry"
decl_stmt|;
DECL|field|ALREADY_ASKED_TO_COLLECT_TELEMETRY
specifier|private
specifier|static
specifier|final
name|String
name|ALREADY_ASKED_TO_COLLECT_TELEMETRY
init|=
literal|"askedCollectTelemetry"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JabRefPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PREFS_BASE_CLASS
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|JabRefMain
argument_list|>
name|PREFS_BASE_CLASS
init|=
name|JabRefMain
operator|.
name|class
decl_stmt|;
DECL|field|DB_CONNECT_USERNAME
specifier|private
specifier|static
specifier|final
name|String
name|DB_CONNECT_USERNAME
init|=
literal|"dbConnectUsername"
decl_stmt|;
DECL|field|DB_CONNECT_DATABASE
specifier|private
specifier|static
specifier|final
name|String
name|DB_CONNECT_DATABASE
init|=
literal|"dbConnectDatabase"
decl_stmt|;
DECL|field|DB_CONNECT_HOSTNAME
specifier|private
specifier|static
specifier|final
name|String
name|DB_CONNECT_HOSTNAME
init|=
literal|"dbConnectHostname"
decl_stmt|;
DECL|field|DB_CONNECT_SERVER_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|DB_CONNECT_SERVER_TYPE
init|=
literal|"dbConnectServerType"
decl_stmt|;
DECL|field|PROTECTED_TERMS_ENABLED_EXTERNAL
specifier|private
specifier|static
specifier|final
name|String
name|PROTECTED_TERMS_ENABLED_EXTERNAL
init|=
literal|"protectedTermsEnabledExternal"
decl_stmt|;
DECL|field|PROTECTED_TERMS_DISABLED_EXTERNAL
specifier|private
specifier|static
specifier|final
name|String
name|PROTECTED_TERMS_DISABLED_EXTERNAL
init|=
literal|"protectedTermsDisabledExternal"
decl_stmt|;
DECL|field|PROTECTED_TERMS_ENABLED_INTERNAL
specifier|private
specifier|static
specifier|final
name|String
name|PROTECTED_TERMS_ENABLED_INTERNAL
init|=
literal|"protectedTermsEnabledInternal"
decl_stmt|;
DECL|field|PROTECTED_TERMS_DISABLED_INTERNAL
specifier|private
specifier|static
specifier|final
name|String
name|PROTECTED_TERMS_DISABLED_INTERNAL
init|=
literal|"protectedTermsDisabledInternal"
decl_stmt|;
comment|//GroupViewMode
DECL|field|GROUP_INTERSECT_UNION_VIEW_MODE
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_INTERSECT_UNION_VIEW_MODE
init|=
literal|"groupIntersectUnionViewModes"
decl_stmt|;
comment|// Dialog states
DECL|field|PREFS_EXPORT_PATH
specifier|private
specifier|static
specifier|final
name|String
name|PREFS_EXPORT_PATH
init|=
literal|"prefsExportPath"
decl_stmt|;
comment|// Helper string
DECL|field|USER_HOME
specifier|private
specifier|static
specifier|final
name|String
name|USER_HOME
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
decl_stmt|;
comment|// Indexes for Strings within stored custom export entries
DECL|field|EXPORTER_NAME_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|EXPORTER_NAME_INDEX
init|=
literal|0
decl_stmt|;
DECL|field|EXPORTER_FILENAME_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|EXPORTER_FILENAME_INDEX
init|=
literal|1
decl_stmt|;
DECL|field|EXPORTER_EXTENSION_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|EXPORTER_EXTENSION_INDEX
init|=
literal|2
decl_stmt|;
comment|// The only instance of this class:
DECL|field|singleton
specifier|private
specifier|static
name|JabRefPreferences
name|singleton
decl_stmt|;
comment|/**      * HashMap that contains all preferences which are set by default      */
DECL|field|defaults
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaults
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Set with all custom {@link org.jabref.logic.importer.Importer}s      */
DECL|field|customImports
specifier|public
specifier|final
name|CustomImportList
name|customImports
decl_stmt|;
comment|// The following field is used as a global variable during the export of a database.
comment|// By setting this field to the path of the database's default file directory, formatters
comment|// that should resolve external file paths can access this field. This is an ugly hack
comment|// to solve the problem of formatters not having access to any context except for the
comment|// string to be formatted and possible formatter arguments.
DECL|field|fileDirForDatabase
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fileDirForDatabase
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|Preferences
name|prefs
decl_stmt|;
DECL|field|keyPattern
specifier|private
name|GlobalBibtexKeyPattern
name|keyPattern
decl_stmt|;
comment|// Object containing info about customized entry editor tabs.
DECL|field|tabList
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tabList
decl_stmt|;
comment|// The constructor is made private to enforce this as a singleton class:
DECL|method|JabRefPreferences ()
specifier|private
name|JabRefPreferences
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
literal|"jabref.xml"
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|importPreferences
argument_list|(
literal|"jabref.xml"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JabRefException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not import preferences from jabref.xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// load user preferences
name|prefs
operator|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|PREFS_BASE_CLASS
argument_list|)
expr_stmt|;
comment|// Since some of the preference settings themselves use localized strings, we cannot set the language after
comment|// the initialization of the preferences in main
comment|// Otherwise that language framework will be instantiated and more importantly, statically initialized preferences
comment|// like the SearchDisplayMode will never be translated.
name|Localization
operator|.
name|setLanguage
argument_list|(
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|SearchPreferences
operator|.
name|putDefaults
argument_list|(
name|defaults
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TEXMAKER_PATH
argument_list|,
name|JabRefDesktop
operator|.
name|getNativeDesktop
argument_list|()
operator|.
name|detectProgramPath
argument_list|(
literal|"texmaker"
argument_list|,
literal|"Texmaker"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WIN_EDT_PATH
argument_list|,
name|JabRefDesktop
operator|.
name|getNativeDesktop
argument_list|()
operator|.
name|detectProgramPath
argument_list|(
literal|"WinEdt"
argument_list|,
literal|"WinEdt Team\\WinEdt"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TEXSTUDIO_PATH
argument_list|,
name|JabRefDesktop
operator|.
name|getNativeDesktop
argument_list|()
operator|.
name|detectProgramPath
argument_list|(
literal|"texstudio"
argument_list|,
literal|"TeXstudio"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|BIBLATEX_DEFAULT_MODE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// Set DOI to be the default ID entry generator
name|defaults
operator|.
name|put
argument_list|(
name|ID_ENTRY_GENERATOR
argument_list|,
name|DoiFetcher
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
name|defaults
operator|.
name|put
argument_list|(
name|FONT_FAMILY
argument_list|,
literal|"SansSerif"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_PATH
argument_list|,
literal|"emacsclient"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_PATH
argument_list|,
literal|"emacsclient.exe"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Linux
name|defaults
operator|.
name|put
argument_list|(
name|FONT_FAMILY
argument_list|,
literal|"SansSerif"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_PATH
argument_list|,
literal|"emacsclient"
argument_list|)
expr_stmt|;
block|}
name|defaults
operator|.
name|put
argument_list|(
name|FX_FONT_RENDERING_TWEAK
argument_list|,
name|OS
operator|.
name|LINUX
argument_list|)
expr_stmt|;
comment|//we turn this on per default on Linux
name|defaults
operator|.
name|put
argument_list|(
name|EMACS_ADDITIONAL_PARAMETERS
argument_list|,
literal|"-n -e"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PUSH_TO_APPLICATION
argument_list|,
literal|"TeXstudio"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|RECENT_DATABASES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXTERNAL_FILE_TYPES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|KEY_PATTERN_REGEX
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|KEY_PATTERN_REPLACEMENT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Proxy
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_USE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_HOSTNAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_PORT
argument_list|,
literal|"80"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_USE_AUTHENTICATION
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_USERNAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROXY_PASSWORD
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_DEFAULT_LOOK_AND_FEEL
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|LYXPIPE
argument_list|,
name|USER_HOME
operator|+
name|File
operator|.
name|separator
operator|+
literal|".lyx/lyxpipe"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|VIM
argument_list|,
literal|"vim"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|VIM_SERVER
argument_list|,
literal|"vim"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|POS_X
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|POS_Y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SIZE_X
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SIZE_Y
argument_list|,
literal|768
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WINDOW_MAXIMISED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTO_RESIZE_MODE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ENTRY_EDITOR_HEIGHT
argument_list|,
literal|0.65
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|NAMES_AS_IS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// "Show names unchanged"
name|defaults
operator|.
name|put
argument_list|(
name|NAMES_FIRST_LAST
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// "Show 'Firstname Lastname'"
name|defaults
operator|.
name|put
argument_list|(
name|NAMES_NATBIB
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// "Natbib style"
name|defaults
operator|.
name|put
argument_list|(
name|ABBR_AUTHOR_NAMES
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// "Abbreviate names"
name|defaults
operator|.
name|put
argument_list|(
name|NAMES_LAST_ONLY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// "Show last names only"
comment|// system locale as default
name|defaults
operator|.
name|put
argument_list|(
name|LANGUAGE
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|REFORMAT_FILE_ON_SAVE_AND_EXPORT
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// export order
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_IN_ORIGINAL_ORDER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_IN_SPECIFIED_ORDER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// export order: if EXPORT_IN_SPECIFIED_ORDER, then use following criteria
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_PRIMARY_SORT_FIELD
argument_list|,
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_PRIMARY_SORT_DESCENDING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_SECONDARY_SORT_FIELD
argument_list|,
name|FieldName
operator|.
name|AUTHOR
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_SECONDARY_SORT_DESCENDING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_TERTIARY_SORT_FIELD
argument_list|,
name|FieldName
operator|.
name|TITLE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_TERTIARY_SORT_DESCENDING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|NEWLINE
argument_list|,
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SIDE_PANE_COMPONENT_NAMES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SIDE_PANE_COMPONENT_PREFERRED_POSITIONS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|COLUMN_NAMES
argument_list|,
literal|"entrytype;author/editor;title;year;journal/booktitle;bibtexkey"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|COLUMN_WIDTHS
argument_list|,
literal|"75;300;470;60;130;100"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|XMP_PRIVACY_FILTERS
argument_list|,
literal|"pdf;timestamp;keywords;owner;note;review"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_XMP_PRIVACY_FILTER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WORKING_DIRECTORY
argument_list|,
name|USER_HOME
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXPORT_WORKING_DIRECTORY
argument_list|,
name|USER_HOME
argument_list|)
expr_stmt|;
comment|// Remembers working directory of last import
name|defaults
operator|.
name|put
argument_list|(
name|IMPORT_WORKING_DIRECTORY
argument_list|,
name|USER_HOME
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREFS_EXPORT_PATH
argument_list|,
name|USER_HOME
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTO_OPEN_FORM
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|BACKUP
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OPEN_LAST_EDITED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|LAST_EDITED
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|LAST_FOCUSED
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STRINGS_POS_X
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STRINGS_POS_Y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STRINGS_SIZE_X
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STRINGS_SIZE_Y
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DUPLICATES_POS_X
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DUPLICATES_POS_Y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DUPLICATES_SIZE_X
argument_list|,
literal|800
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DUPLICATES_SIZE_Y
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MERGEENTRIES_POS_X
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MERGEENTRIES_POS_Y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MERGEENTRIES_SIZE_X
argument_list|,
literal|800
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MERGEENTRIES_SIZE_Y
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREAMBLE_POS_X
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREAMBLE_POS_Y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREAMBLE_SIZE_X
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREAMBLE_SIZE_Y
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_SHOW_SOURCE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_AUTO_SORT
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MERGE_ENTRIES_DIFF_MODE
argument_list|,
name|MergeEntries
operator|.
name|DiffMode
operator|.
name|WORD
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SHOW_RECOMMENDATIONS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ACCEPT_RECOMMENDATIONS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SEND_LANGUAGE_DATA
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SEND_OS_DATA
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SEND_TIMEZONE_DATA
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|VALIDATE_IN_ENTRY_EDITOR
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EDITOR_EMACS_KEYBINDINGS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EDITOR_EMACS_KEYBINDINGS_REBIND_CA
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EDITOR_EMACS_KEYBINDINGS_REBIND_CF
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTO_COMPLETE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTOCOMPLETER_FIRSTNAME_MODE
argument_list|,
name|AutoCompleteFirstNameMode
operator|.
name|BOTH
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTOCOMPLETER_FIRST_LAST
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// "Autocomplete names in 'Firstname Lastname' format only"
name|defaults
operator|.
name|put
argument_list|(
name|AUTOCOMPLETER_LAST_FIRST
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// "Autocomplete names in 'Lastname, Firstname' format only"
name|defaults
operator|.
name|put
argument_list|(
name|AUTOCOMPLETER_COMPLETE_FIELDS
argument_list|,
literal|"author;editor;title;journal;publisher;keywords;crossref;related;entryset"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUPS_DEFAULT_FIELD
argument_list|,
name|FieldName
operator|.
name|KEYWORDS
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTO_ASSIGN_GROUP
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_INTERSECT_UNION_VIEW_MODE
argument_list|,
name|GroupViewMode
operator|.
name|INTERSECTION
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|KEYWORD_SEPARATOR
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TOOLBAR_VISIBLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_ENCODING
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_OWNER
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MEMORY_STICK_MODE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SHOW_ADVANCED_HINTS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|RENAME_ON_MOVE_FILE_TO_FILE_DIR
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FONT_STYLE
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FONT_SIZE
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// Main table color settings:
name|defaults
operator|.
name|put
argument_list|(
name|VALID_FIELD_BACKGROUND_COLOR
argument_list|,
literal|"255:255:255"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|INVALID_FIELD_BACKGROUND_COLOR
argument_list|,
literal|"255:0:0"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ACTIVE_FIELD_EDITOR_BACKGROUND_COLOR
argument_list|,
literal|"220:220:255"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FIELD_EDITOR_TEXT_COLOR
argument_list|,
literal|"0:0:0"
argument_list|)
expr_stmt|;
comment|// default icon colors
name|defaults
operator|.
name|put
argument_list|(
name|ICON_ENABLED_COLOR
argument_list|,
literal|"0:0:0"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ICON_DISABLED_COLOR
argument_list|,
literal|"200:200:200"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|URL_COLUMN
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREFER_URL_DOI
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FILE_COLUMN
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ARXIV_COLUMN
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXTRA_FILE_COLUMNS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|LIST_OF_FILE_COLUMNS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROTECTED_TERMS_ENABLED_INTERNAL
argument_list|,
name|convertListToString
argument_list|(
name|ProtectedTermsLoader
operator|.
name|getInternalLists
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROTECTED_TERMS_DISABLED_INTERNAL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROTECTED_TERMS_ENABLED_EXTERNAL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PROTECTED_TERMS_DISABLED_EXTERNAL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// OpenOffice/LibreOffice
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
name|defaults
operator|.
name|put
argument_list|(
name|OO_PATH
argument_list|,
name|OpenOfficePreferences
operator|.
name|DEFAULT_WINDOWS_PATH
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OO_EXECUTABLE_PATH
argument_list|,
name|OpenOfficePreferences
operator|.
name|DEFAULT_WIN_EXEC_PATH
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OO_JARS_PATH
argument_list|,
name|OpenOfficePreferences
operator|.
name|DEFAULT_WINDOWS_PATH
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
name|defaults
operator|.
name|put
argument_list|(
name|OO_PATH
argument_list|,
name|OpenOfficePreferences
operator|.
name|DEFAULT_OSX_PATH
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OO_EXECUTABLE_PATH
argument_list|,
name|OpenOfficePreferences
operator|.
name|DEFAULT_OSX_EXEC_PATH
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OO_JARS_PATH
argument_list|,
name|OpenOfficePreferences
operator|.
name|DEFAULT_OSX_PATH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Linux
name|defaults
operator|.
name|put
argument_list|(
name|OO_PATH
argument_list|,
name|OpenOfficePreferences
operator|.
name|DEFAULT_LINUX_PATH
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OO_EXECUTABLE_PATH
argument_list|,
name|OpenOfficePreferences
operator|.
name|DEFAULT_LINUX_EXEC_PATH
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OO_JARS_PATH
argument_list|,
name|OpenOfficePreferences
operator|.
name|DEFAULT_LINUX_PATH
argument_list|)
expr_stmt|;
block|}
name|defaults
operator|.
name|put
argument_list|(
name|OO_SYNC_WHEN_CITING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OO_SHOW_PANEL
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OO_USE_ALL_OPEN_BASES
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OO_BIBLIOGRAPHY_STYLE_FILE
argument_list|,
name|StyleLoader
operator|.
name|DEFAULT_AUTHORYEAR_STYLE_PATH
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OO_EXTERNAL_STYLE_FILES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STYLES_POS_X
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STYLES_POS_Y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STYLES_SIZE_X
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|STYLES_SIZE_Y
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SPECIALFIELDSENABLED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SHOWCOLUMN_PRIORITY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SHOWCOLUMN_QUALITY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SHOWCOLUMN_RANKING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SHOWCOLUMN_RELEVANCE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SHOWCOLUMN_PRINTED
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SHOWCOLUMN_READ
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTOSYNCSPECIALFIELDSTOKEYWORDS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SERIALIZESPECIALFIELDS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_OWNER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OVERWRITE_OWNER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AVOID_OVERWRITING_KEY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WARN_BEFORE_OVERWRITING_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CONFIRM_DELETE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GRAY_OUT_NON_HITS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DEFAULT_BIBTEX_KEY_PATTERN
argument_list|,
literal|"[auth][year]"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DO_NOT_RESOLVE_STRINGS_FOR
argument_list|,
name|FieldName
operator|.
name|URL
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|RESOLVE_STRINGS_ALL_FIELDS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|NON_WRAPPABLE_FIELDS
argument_list|,
literal|"pdf;ps;url;doi;file;isbn;issn"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WARN_ABOUT_DUPLICATES_IN_INSPECTION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_TIME_STAMP
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OVERWRITE_TIME_STAMP
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// default time stamp follows ISO-8601. Reason: https://xkcd.com/1179/
name|defaults
operator|.
name|put
argument_list|(
name|TIME_STAMP_FORMAT
argument_list|,
literal|"yyyy-MM-dd"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|TIME_STAMP_FIELD
argument_list|,
name|FieldName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|UPDATE_TIMESTAMP
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GENERATE_KEYS_BEFORE_SAVING
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_REMOTE_SERVER
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|REMOTE_SERVER_PORT
argument_list|,
literal|6050
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PERSONAL_JOURNAL_LIST
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EXTERNAL_JOURNAL_LISTS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CITE_COMMAND
argument_list|,
literal|"\\cite"
argument_list|)
expr_stmt|;
comment|// obsoleted by the app-specific ones (not any more?)
name|defaults
operator|.
name|put
argument_list|(
name|LAST_USED_EXPORT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SIDE_PANE_WIDTH
argument_list|,
literal|0.15
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|MAIN_FONT_SIZE
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OVERRIDE_DEFAULT_FONT_SIZE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SHOW_FILE_LINKS_UPGRADE_WARNING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTOLINK_EXACT_KEY_ONLY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|NUMERIC_FIELDS
argument_list|,
literal|"mittnum;author"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|RUN_AUTOMATIC_FILE_SEARCH
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|LOCAL_AUTO_SAVE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ENFORCE_LEGAL_BIBTEX_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ALLOW_INTEGER_EDITION_BIBTEX
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// Curly brackets ({}) are the default delimiters, not quotes (") as these cause trouble when they appear within the field value:
comment|// Currently, JabRef does not escape them
name|defaults
operator|.
name|put
argument_list|(
name|KEY_GEN_FIRST_LETTER_A
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|KEY_GEN_ALWAYS_ADD_LETTER
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMAIL_SUBJECT
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"References"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|OPEN_FOLDERS_OF_ATTACHED_FILES
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ALLOW_FILE_AUTO_OPEN_BROWSE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|WEB_SEARCH_VISIBLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|GROUP_SIDEPANE_VISIBLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SELECTED_FETCHER_INDEX
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|BIB_LOC_AS_PRIMARY_DIR
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DB_CONNECT_SERVER_TYPE
argument_list|,
literal|"MySQL"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DB_CONNECT_HOSTNAME
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DB_CONNECT_DATABASE
argument_list|,
literal|"jabref"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DB_CONNECT_USERNAME
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|COLLECT_TELEMETRY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ALREADY_ASKED_TO_COLLECT_TELEMETRY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ASK_AUTO_NAMING_PDFS_AGAIN
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|insertDefaultCleanupPreset
argument_list|(
name|defaults
argument_list|)
expr_stmt|;
comment|// defaults for DroppedFileHandler UI
name|defaults
operator|.
name|put
argument_list|(
name|DROPPEDFILEHANDLER_LEAVE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DROPPEDFILEHANDLER_COPY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DROPPEDFILEHANDLER_MOVE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|DROPPEDFILEHANDLER_RENAME
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// use BibTeX key appended with filename as default pattern
name|defaults
operator|.
name|put
argument_list|(
name|IMPORT_FILENAMEPATTERN
argument_list|,
name|ImportSettingsTab
operator|.
name|DEFAULT_FILENAMEPATTERNS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|//Default empty String to be backwards compatible
name|defaults
operator|.
name|put
argument_list|(
name|IMPORT_FILEDIRPATTERN
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|customImports
operator|=
operator|new
name|CustomImportList
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|String
name|defaultExpression
init|=
literal|"**/.*[bibtexkey].*\\\\.[extension]"
decl_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTOLINK_REG_EXP_SEARCH_EXPRESSION_KEY
argument_list|,
name|defaultExpression
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|AUTOLINK_USE_REG_EXP_SEARCH_KEY
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_IEEE_ABRV
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_CASE_KEEPER_ON_SEARCH
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_UNIT_FORMATTER_ON_SEARCH
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_DEFAULT_CONSOLE_APPLICATION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_DEFAULT_FILE_BROWSER_APPLICATION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
name|defaults
operator|.
name|put
argument_list|(
name|CONSOLE_COMMAND
argument_list|,
literal|"C:\\Program Files\\ConEmu\\ConEmu64.exe /single /dir \"%DIR\""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ADOBE_ACROBAT_COMMAND
argument_list|,
literal|"C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Reader"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SUMATRA_PDF_COMMAND
argument_list|,
literal|"C:\\Program Files\\SumatraPDF"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_PDF_READER
argument_list|,
name|ADOBE_ACROBAT_COMMAND
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FILE_BROWSER_COMMAND
argument_list|,
literal|"explorer.exe /select, \"%DIR\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaults
operator|.
name|put
argument_list|(
name|CONSOLE_COMMAND
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ADOBE_ACROBAT_COMMAND
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|SUMATRA_PDF_COMMAND
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|USE_PDF_READER
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|FILE_BROWSER_COMMAND
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|//versioncheck defaults
name|defaults
operator|.
name|put
argument_list|(
name|VERSION_IGNORED_UPDATE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// preview
name|defaults
operator|.
name|put
argument_list|(
name|CYCLE_PREVIEW
argument_list|,
literal|"Preview;"
operator|+
name|CitationStyle
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CYCLE_PREVIEW_POS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREVIEW_PANEL_HEIGHT
argument_list|,
literal|0.65
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREVIEW_ENABLED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|PREVIEW_STYLE
argument_list|,
literal|"<font face=\"sans-serif\">"
operator|+
literal|"<b><i>\\bibtextype</i><a name=\"\\bibtexkey\">\\begin{bibtexkey} (\\bibtexkey)</a>"
operator|+
literal|"\\end{bibtexkey}</b><br>__NEWLINE__"
operator|+
literal|"\\begin{author} \\format[Authors(LastFirst,Initials,Semicolon,Amp),HTMLChars]{\\author}<BR>\\end{author}__NEWLINE__"
operator|+
literal|"\\begin{editor} \\format[Authors(LastFirst,Initials,Semicolon,Amp),HTMLChars]{\\editor} "
operator|+
literal|"<i>(\\format[IfPlural(Eds.,Ed.)]{\\editor})</i><BR>\\end{editor}__NEWLINE__"
operator|+
literal|"\\begin{title} \\format[HTMLChars]{\\title} \\end{title}<BR>__NEWLINE__"
operator|+
literal|"\\begin{chapter} \\format[HTMLChars]{\\chapter}<BR>\\end{chapter}__NEWLINE__"
operator|+
literal|"\\begin{journal}<em>\\format[HTMLChars]{\\journal},</em>\\end{journal}__NEWLINE__"
comment|// Include the booktitle field for @inproceedings, @proceedings, etc.
operator|+
literal|"\\begin{booktitle}<em>\\format[HTMLChars]{\\booktitle},</em>\\end{booktitle}__NEWLINE__"
operator|+
literal|"\\begin{school}<em>\\format[HTMLChars]{\\school},</em>\\end{school}__NEWLINE__"
operator|+
literal|"\\begin{institution}<em>\\format[HTMLChars]{\\institution},</em>\\end{institution}__NEWLINE__"
operator|+
literal|"\\begin{publisher}<em>\\format[HTMLChars]{\\publisher},</em>\\end{publisher}__NEWLINE__"
operator|+
literal|"\\begin{year}<b>\\year</b>\\end{year}\\begin{volume}<i>, \\volume</i>\\end{volume}"
operator|+
literal|"\\begin{pages}, \\format[FormatPagesForHTML]{\\pages} \\end{pages}__NEWLINE__"
operator|+
literal|"\\begin{abstract}<BR><BR><b>Abstract:</b> \\format[HTMLChars]{\\abstract} \\end{abstract}__NEWLINE__"
operator|+
literal|"\\begin{comment}<BR><BR><b>Comment:</b> \\format[HTMLChars]{\\comment} \\end{comment}"
operator|+
literal|"</dd>__NEWLINE__<p></p></font>"
argument_list|)
expr_stmt|;
comment|// set default theme
name|defaults
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|FX_THEME
argument_list|,
name|ThemeLoader
operator|.
name|MAIN_CSS
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|ENTRY_EDITOR_DRAG_DROP_PREFERENCE_TYPE
argument_list|,
name|FileDragDropPreferenceType
operator|.
name|MOVE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|setLanguageDependentDefaultValues
argument_list|()
expr_stmt|;
block|}
DECL|method|getInstance ()
specifier|public
specifier|static
name|JabRefPreferences
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|JabRefPreferences
operator|.
name|singleton
operator|==
literal|null
condition|)
block|{
name|JabRefPreferences
operator|.
name|singleton
operator|=
operator|new
name|JabRefPreferences
argument_list|()
expr_stmt|;
block|}
return|return
name|JabRefPreferences
operator|.
name|singleton
return|;
block|}
DECL|method|convertListToString (List<String> value)
specifier|private
specifier|static
name|String
name|convertListToString
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|val
lambda|->
name|StringUtil
operator|.
name|quote
argument_list|(
name|val
argument_list|,
literal|";"
argument_list|,
literal|'\\'
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|";"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Looks up a color definition in preferences, and returns an array containing the RGB values.      *      * @param value The key for this setting.      * @return The RGB values corresponding to this color setting.      */
DECL|method|getRgb (String value)
specifier|private
specifier|static
name|int
index|[]
name|getRgb
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
literal|3
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|value
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|elements
init|=
name|value
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|values
index|[
literal|2
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elements
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|values
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|method|getPrefsNodeForCustomizedEntryTypes (BibDatabaseMode mode)
specifier|private
specifier|static
name|Preferences
name|getPrefsNodeForCustomizedEntryTypes
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|BibDatabaseMode
operator|.
name|BIBLATEX
condition|)
block|{
return|return
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|PREFS_BASE_CLASS
argument_list|)
operator|.
name|node
argument_list|(
name|CUSTOMIZED_BIBLATEX_TYPES
argument_list|)
return|;
block|}
if|if
condition|(
name|mode
operator|==
name|BibDatabaseMode
operator|.
name|BIBTEX
condition|)
block|{
return|return
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|PREFS_BASE_CLASS
argument_list|)
operator|.
name|node
argument_list|(
name|CUSTOMIZED_BIBTEX_TYPES
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown BibDatabaseMode: "
operator|+
name|mode
argument_list|)
throw|;
block|}
DECL|method|getNextUnit (Reader data)
specifier|private
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|getNextUnit
parameter_list|(
name|Reader
name|data
parameter_list|)
throws|throws
name|IOException
block|{
comment|// character last read
comment|// -1 if end of stream
comment|// initialization necessary, because of Java compiler
name|int
name|c
init|=
operator|-
literal|1
decl_stmt|;
comment|// last character was escape symbol
name|boolean
name|escape
init|=
literal|false
decl_stmt|;
comment|// true if a ";" is found
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|res
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|done
operator|&&
operator|(
operator|(
name|c
operator|=
name|data
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
name|escape
condition|)
block|{
name|escape
operator|=
literal|false
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|escape
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|c
operator|==
literal|';'
condition|)
block|{
if|if
condition|(
name|escape
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|res
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|escape
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|res
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|res
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
comment|// end of stream
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
literal|""
argument_list|)
return|;
block|}
block|}
DECL|method|insertDefaultCleanupPreset (Map<String, Object> storage)
specifier|private
specifier|static
name|void
name|insertDefaultCleanupPreset
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|storage
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|CleanupPreset
operator|.
name|CleanupStep
argument_list|>
name|deactivatedJobs
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CLEAN_UP_UPGRADE_EXTERNAL_LINKS
argument_list|,
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|MOVE_PDF
argument_list|,
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|RENAME_PDF_ONLY_RELATIVE_PATHS
argument_list|,
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CONVERT_TO_BIBLATEX
argument_list|,
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CONVERT_TO_BIBTEX
argument_list|)
decl_stmt|;
for|for
control|(
name|CleanupPreset
operator|.
name|CleanupStep
name|action
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|class
argument_list|)
control|)
block|{
name|storage
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP
operator|+
name|action
operator|.
name|name
argument_list|()
argument_list|,
operator|!
name|deactivatedJobs
operator|.
name|contains
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|storage
operator|.
name|put
argument_list|(
name|CLEANUP_FORMATTERS
argument_list|,
name|convertListToString
argument_list|(
name|Cleanups
operator|.
name|DEFAULT_SAVE_ACTIONS
operator|.
name|getAsStringList
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getEntryEditorPreferences ()
specifier|public
name|EntryEditorPreferences
name|getEntryEditorPreferences
parameter_list|()
block|{
return|return
operator|new
name|EntryEditorPreferences
argument_list|(
name|getEntryEditorTabList
argument_list|()
argument_list|,
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|,
name|getImportFormatPreferences
argument_list|()
argument_list|,
name|getCustomTabFieldNames
argument_list|()
argument_list|,
name|getBoolean
argument_list|(
name|SHOW_RECOMMENDATIONS
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|ACCEPT_RECOMMENDATIONS
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|DEFAULT_SHOW_SOURCE
argument_list|)
argument_list|,
name|getBibtexKeyPatternPreferences
argument_list|()
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
argument_list|,
name|getBoolean
argument_list|(
name|AVOID_OVERWRITING_KEY
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSidePanePreferredPositions ()
specifier|public
name|Map
argument_list|<
name|SidePaneType
argument_list|,
name|Integer
argument_list|>
name|getSidePanePreferredPositions
parameter_list|()
block|{
name|Map
argument_list|<
name|SidePaneType
argument_list|,
name|Integer
argument_list|>
name|preferredPositions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|componentNames
init|=
name|getStringList
argument_list|(
name|SIDE_PANE_COMPONENT_NAMES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|componentPositions
init|=
name|getStringList
argument_list|(
name|SIDE_PANE_COMPONENT_PREFERRED_POSITIONS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|componentNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|name
init|=
name|componentNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|SidePaneType
name|type
init|=
name|Enum
operator|.
name|valueOf
argument_list|(
name|SidePaneType
operator|.
name|class
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|preferredPositions
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|componentPositions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Invalid number format for side pane component '"
operator|+
name|name
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Following component is not a side pane: '"
operator|+
name|name
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|preferredPositions
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
try|try
block|{
return|return
name|get
argument_list|(
name|DEFAULT_OWNER
argument_list|)
operator|+
literal|'-'
operator|+
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Hostname not found."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|DEFAULT_OWNER
argument_list|)
return|;
block|}
block|}
comment|/**      * Get a Map of default tab names to deafult tab fields.      * The fields are returned as a String with fields separated by ;      * They are combined into one string in order to feed into CustomizeGeneralFieldsDialogViewModel.resetFields()      * so that they do not have to be parsed in order to fit there      *      * @return A map of keys with tab names and values as a string containing      * fields for the given name separated by ;      */
annotation|@
name|Override
DECL|method|getCustomTabsNamesAndFields ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getCustomTabsNamesAndFields
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|customTabsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|defNumber
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|//Saved as CUSTOMTABNAME_def{number} and ; separated
name|String
name|name
init|=
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|CUSTOM_TAB_NAME
operator|+
literal|"_def"
operator|+
name|defNumber
argument_list|)
decl_stmt|;
name|String
name|fields
init|=
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def"
operator|+
name|defNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
operator|||
name|StringUtil
operator|.
name|isNullOrEmpty
argument_list|(
name|fields
argument_list|)
condition|)
block|{
break|break;
block|}
name|customTabsMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|defNumber
operator|++
expr_stmt|;
block|}
return|return
name|customTabsMap
return|;
block|}
annotation|@
name|Override
DECL|method|setCustomTabsNameAndFields (String name, String fields, int defNumber)
specifier|public
name|void
name|setCustomTabsNameAndFields
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fields
parameter_list|,
name|int
name|defNumber
parameter_list|)
block|{
name|prefs
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_NAME
operator|+
name|defNumber
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
name|defNumber
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
DECL|method|getCustomTabFieldNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCustomTabFieldNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|customFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|defNumber
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// saved as CUSTOMTABNAME_def{number} and ; separated
name|String
name|fields
init|=
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def"
operator|+
name|defNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isNullOrEmpty
argument_list|(
name|fields
argument_list|)
condition|)
block|{
break|break;
block|}
name|customFields
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fields
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|defNumber
operator|++
expr_stmt|;
block|}
return|return
name|customFields
return|;
block|}
DECL|method|setLanguageDependentDefaultValues ()
specifier|public
name|void
name|setLanguageDependentDefaultValues
parameter_list|()
block|{
comment|// Entry editor tab 0:
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_NAME
operator|+
literal|"_def0"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"General"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|fieldNames
init|=
name|InternalBibtexFields
operator|.
name|getDefaultGeneralFields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|";"
argument_list|)
argument_list|)
decl_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def0"
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
comment|// Entry editor tab 1:
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def1"
argument_list|,
name|FieldName
operator|.
name|ABSTRACT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_NAME
operator|+
literal|"_def1"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Abstract"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Entry editor tab 2: Comments Field - used for research comments, etc.
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_FIELDS
operator|+
literal|"_def2"
argument_list|,
name|FieldName
operator|.
name|COMMENT
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|CUSTOM_TAB_NAME
operator|+
literal|"_def2"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Comments"
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
name|EMAIL_SUBJECT
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"References"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check whether a key is set (differently from null).      *      * @param key The key to check.      * @return true if the key is set, false otherwise.      */
DECL|method|hasKey (String key)
specifier|public
name|boolean
name|hasKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|get (String key)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|get
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getAsOptional (String key)
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getAsOptional
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|get (String key, String def)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|def
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|def
argument_list|)
return|;
block|}
DECL|method|getBoolean (String key)
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|,
name|getBooleanDefault
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getBoolean (String key, boolean def)
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|def
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|,
name|def
argument_list|)
return|;
block|}
DECL|method|getBooleanDefault (String key)
specifier|private
name|boolean
name|getBooleanDefault
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getInt (String key)
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|getInt
argument_list|(
name|key
argument_list|,
name|getIntDefault
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDouble (String key)
specifier|public
name|double
name|getDouble
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|getDouble
argument_list|(
name|key
argument_list|,
name|getDoubleDefault
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getIntDefault (String key)
specifier|public
name|int
name|getIntDefault
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getDoubleDefault (String key)
specifier|private
name|double
name|getDoubleDefault
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
DECL|method|put (String key, String value)
specifier|public
name|void
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|putBoolean (String key, boolean value)
specifier|public
name|void
name|putBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|putBoolean
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|putInt (String key, int value)
specifier|public
name|void
name|putInt
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|putInt
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|putInt (String key, Number value)
specifier|public
name|void
name|putInt
parameter_list|(
name|String
name|key
parameter_list|,
name|Number
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|putInt
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|putDouble (String key, double value)
specifier|public
name|void
name|putDouble
parameter_list|(
name|String
name|key
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|putDouble
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|remove (String key)
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|prefs
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**      * Puts a list of strings into the Preferences, by linking its elements with ';' into a single string. Escape      * characters make the process transparent even if strings contain ';'.      */
DECL|method|putStringList (String key, List<String> value)
specifier|public
name|void
name|putStringList
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return;
block|}
name|put
argument_list|(
name|key
argument_list|,
name|convertListToString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a List of Strings containing the chosen columns.      */
DECL|method|getStringList (String key)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getStringList
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|names
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|StringReader
name|rd
init|=
operator|new
name|StringReader
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|rs
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|rs
operator|=
name|getNextUnit
argument_list|(
name|rd
argument_list|)
operator|)
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|rs
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
return|return
name|res
return|;
block|}
comment|/**      * Looks up a color definition in preferences, and returns the Color object.      *      * @param key The key for this setting.      * @return The color corresponding to the setting.      */
DECL|method|getColor (String key)
specifier|public
name|Color
name|getColor
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
index|[]
name|rgb
init|=
name|getRgb
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|Color
argument_list|(
name|rgb
index|[
literal|0
index|]
argument_list|,
name|rgb
index|[
literal|1
index|]
argument_list|,
name|rgb
index|[
literal|2
index|]
argument_list|)
return|;
block|}
DECL|method|getDefaultColor (String key)
specifier|public
name|Color
name|getDefaultColor
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
index|[]
name|rgb
init|=
name|getRgb
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|Color
argument_list|(
name|rgb
index|[
literal|0
index|]
argument_list|,
name|rgb
index|[
literal|1
index|]
argument_list|,
name|rgb
index|[
literal|2
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns the default BibDatabase mode, which can be either BIBTEX or BIBLATEX.      *      * @return the default BibDatabaseMode      */
DECL|method|getDefaultBibDatabaseMode ()
specifier|public
name|BibDatabaseMode
name|getDefaultBibDatabaseMode
parameter_list|()
block|{
if|if
condition|(
name|getBoolean
argument_list|(
name|BIBLATEX_DEFAULT_MODE
argument_list|)
condition|)
block|{
return|return
name|BibDatabaseMode
operator|.
name|BIBLATEX
return|;
block|}
else|else
block|{
return|return
name|BibDatabaseMode
operator|.
name|BIBTEX
return|;
block|}
block|}
comment|/**      * Set the default value for a key. This is useful for plugins that need to add default values for the prefs keys      * they use.      *      * @param key The preferences key.      * @param value The default value.      */
DECL|method|putDefaultValue (String key, Object value)
specifier|public
name|void
name|putDefaultValue
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|defaults
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stores a color in preferences.      *      * @param key The key for this setting.      * @param color The Color to store.      */
DECL|method|putColor (String key, Color color)
specifier|public
name|void
name|putColor
parameter_list|(
name|String
name|key
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
name|String
name|rgb
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|color
operator|.
name|getRed
argument_list|()
argument_list|)
operator|+
literal|':'
operator|+
name|color
operator|.
name|getGreen
argument_list|()
operator|+
literal|':'
operator|+
name|color
operator|.
name|getBlue
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|rgb
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clear all preferences.      *      * @throws BackingStoreException      */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|BackingStoreException
block|{
name|clearAllCustomEntryTypes
argument_list|()
expr_stmt|;
name|clearKeyPatterns
argument_list|()
expr_stmt|;
name|prefs
operator|.
name|clear
argument_list|()
expr_stmt|;
operator|new
name|SharedDatabasePreferences
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|clear (String key)
specifier|public
name|void
name|clear
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|prefs
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**      * Calling this method will write all preferences into the preference store.      */
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|getBoolean
argument_list|(
name|MEMORY_STICK_MODE
argument_list|)
condition|)
block|{
try|try
block|{
name|exportPreferences
argument_list|(
literal|"jabref.xml"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JabRefException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not export preferences for memory stick mode: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|prefs
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Cannot communicate with backing store"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Fetches key patterns from preferences.      * The implementation doesn't cache the results      *      * @return LabelPattern containing all keys. Returned LabelPattern has no parent      */
DECL|method|getKeyPattern ()
specifier|public
name|GlobalBibtexKeyPattern
name|getKeyPattern
parameter_list|()
block|{
name|keyPattern
operator|=
name|GlobalBibtexKeyPattern
operator|.
name|fromPattern
argument_list|(
name|get
argument_list|(
name|DEFAULT_BIBTEX_KEY_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|Preferences
name|pre
init|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|PREFS_BASE_CLASS
argument_list|)
operator|.
name|node
argument_list|(
name|BIBTEX_KEY_PATTERNS_NODE
argument_list|)
decl_stmt|;
try|try
block|{
name|String
index|[]
name|keys
init|=
name|pre
operator|.
name|keys
argument_list|()
decl_stmt|;
if|if
condition|(
name|keys
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|keyPattern
operator|.
name|addBibtexKeyPattern
argument_list|(
name|key
argument_list|,
name|pre
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"BackingStoreException in JabRefPreferences.getKeyPattern"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|keyPattern
return|;
block|}
comment|/**      * Adds the given key pattern to the preferences      *      * @param pattern the pattern to store      */
DECL|method|putKeyPattern (GlobalBibtexKeyPattern pattern)
specifier|public
name|void
name|putKeyPattern
parameter_list|(
name|GlobalBibtexKeyPattern
name|pattern
parameter_list|)
block|{
name|keyPattern
operator|=
name|pattern
expr_stmt|;
comment|// Store overridden definitions to Preferences.
name|Preferences
name|pre
init|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|PREFS_BASE_CLASS
argument_list|)
operator|.
name|node
argument_list|(
name|BIBTEX_KEY_PATTERNS_NODE
argument_list|)
decl_stmt|;
try|try
block|{
name|pre
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// We remove all old entries.
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"BackingStoreException in JabRefPreferences.putKeyPattern"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|allKeys
init|=
name|pattern
operator|.
name|getAllKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|allKeys
control|)
block|{
if|if
condition|(
operator|!
name|pattern
operator|.
name|isDefaultValue
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// no default value
comment|// the first entry in the array is the full pattern
comment|// see org.jabref.logic.labelPattern.BibtexKeyGenerator.split(String)
name|pre
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|pattern
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|clearKeyPatterns ()
specifier|private
name|void
name|clearKeyPatterns
parameter_list|()
throws|throws
name|BackingStoreException
block|{
name|Preferences
name|pre
init|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|PREFS_BASE_CLASS
argument_list|)
operator|.
name|node
argument_list|(
name|BIBTEX_KEY_PATTERNS_NODE
argument_list|)
decl_stmt|;
name|pre
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|storeCustomEntryTypes (List<CustomEntryType> customEntryTypes, BibDatabaseMode bibDatabaseMode)
specifier|public
name|void
name|storeCustomEntryTypes
parameter_list|(
name|List
argument_list|<
name|CustomEntryType
argument_list|>
name|customEntryTypes
parameter_list|,
name|BibDatabaseMode
name|bibDatabaseMode
parameter_list|)
block|{
name|Preferences
name|prefsNode
init|=
name|getPrefsNodeForCustomizedEntryTypes
argument_list|(
name|bibDatabaseMode
argument_list|)
decl_stmt|;
try|try
block|{
comment|// clear old custom types
name|clearCustomEntryTypes
argument_list|(
name|bibDatabaseMode
argument_list|)
expr_stmt|;
comment|// store current custom types
name|customEntryTypes
operator|.
name|forEach
argument_list|(
name|type
lambda|->
name|prefsNode
operator|.
name|put
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|type
operator|.
name|getAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|prefsNode
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Updating stored custom entry types failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadCustomEntryTypes (BibDatabaseMode bibDatabaseMode)
specifier|public
name|List
argument_list|<
name|CustomEntryType
argument_list|>
name|loadCustomEntryTypes
parameter_list|(
name|BibDatabaseMode
name|bibDatabaseMode
parameter_list|)
block|{
name|List
argument_list|<
name|CustomEntryType
argument_list|>
name|storedEntryTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Preferences
name|prefsNode
init|=
name|getPrefsNodeForCustomizedEntryTypes
argument_list|(
name|bibDatabaseMode
argument_list|)
decl_stmt|;
try|try
block|{
name|Arrays
operator|.
name|stream
argument_list|(
name|prefsNode
operator|.
name|keys
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|key
lambda|->
name|prefsNode
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|forEach
argument_list|(
name|typeString
lambda|->
name|CustomEntryType
operator|.
name|parse
argument_list|(
name|typeString
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|storedEntryTypes
operator|::
name|add
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Parsing customized entry types failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|storedEntryTypes
return|;
block|}
DECL|method|clearAllCustomEntryTypes ()
specifier|private
name|void
name|clearAllCustomEntryTypes
parameter_list|()
throws|throws
name|BackingStoreException
block|{
for|for
control|(
name|BibDatabaseMode
name|mode
range|:
name|BibDatabaseMode
operator|.
name|values
argument_list|()
control|)
block|{
name|clearCustomEntryTypes
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|clearCustomEntryTypes (BibDatabaseMode mode)
specifier|private
name|void
name|clearCustomEntryTypes
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
throws|throws
name|BackingStoreException
block|{
name|Preferences
name|prefsNode
init|=
name|getPrefsNodeForCustomizedEntryTypes
argument_list|(
name|mode
argument_list|)
decl_stmt|;
name|prefsNode
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getPreferences ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getPreferences
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|key
range|:
name|this
operator|.
name|prefs
operator|.
name|keys
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|getObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"could not retrieve preference keys"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getObject (String key)
specifier|private
name|Object
name|getObject
parameter_list|(
name|String
name|key
parameter_list|)
block|{
try|try
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
try|try
block|{
return|return
name|this
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e2
parameter_list|)
block|{
try|try
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e3
parameter_list|)
block|{
return|return
name|this
operator|.
name|getDouble
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|/**      * Removes all entries keyed by prefix+number, where number is equal to or higher than the given number.      *      * @param number or higher.      */
annotation|@
name|Override
DECL|method|purgeSeries (String prefix, int number)
specifier|public
name|void
name|purgeSeries
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|number
parameter_list|)
block|{
name|int
name|n
init|=
name|number
decl_stmt|;
while|while
condition|(
name|get
argument_list|(
name|prefix
operator|+
name|n
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|remove
argument_list|(
name|prefix
operator|+
name|n
argument_list|)
expr_stmt|;
name|n
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getEntryEditorTabList ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getEntryEditorTabList
parameter_list|()
block|{
if|if
condition|(
name|tabList
operator|==
literal|null
condition|)
block|{
name|updateEntryEditorTabList
argument_list|()
expr_stmt|;
block|}
return|return
name|tabList
return|;
block|}
annotation|@
name|Override
DECL|method|getEnforceLegalKeys ()
specifier|public
name|Boolean
name|getEnforceLegalKeys
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|ENFORCE_LEGAL_BIBTEX_KEY
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllowIntegerEdition ()
specifier|public
name|Boolean
name|getAllowIntegerEdition
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|ALLOW_INTEGER_EDITION_BIBTEX
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateEntryEditorTabList ()
specifier|public
name|void
name|updateEntryEditorTabList
parameter_list|()
block|{
name|tabList
operator|=
name|EntryEditorTabList
operator|.
name|create
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Exports Preferences to an XML file.      *      * @param filename String File to export to      */
DECL|method|exportPreferences (String filename)
specifier|public
name|void
name|exportPreferences
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|JabRefException
block|{
name|exportPreferences
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|exportPreferences (Path file)
specifier|public
name|void
name|exportPreferences
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|JabRefException
block|{
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|prefs
operator|.
name|exportSubtree
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
decl||
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|JabRefException
argument_list|(
literal|"Could not export preferences"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not export preferences"
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Imports Preferences from an XML file.      *      * @param filename String File to import from      * @throws JabRefException thrown if importing the preferences failed due to an InvalidPreferencesFormatException      *                         or an IOException      */
DECL|method|importPreferences (String filename)
specifier|public
name|void
name|importPreferences
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|JabRefException
block|{
name|importPreferences
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|importPreferences (Path file)
specifier|public
name|void
name|importPreferences
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|JabRefException
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|Preferences
operator|.
name|importPreferences
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPreferencesFormatException
decl||
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|JabRefException
argument_list|(
literal|"Could not import preferences"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not import preferences"
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * ONLY FOR TESTING!      *      * Do not use in production code. Otherwise the singleton pattern is broken and preferences might get lost.      *      * @param owPrefs      */
DECL|method|overwritePreferences (JabRefPreferences owPrefs)
specifier|public
name|void
name|overwritePreferences
parameter_list|(
name|JabRefPreferences
name|owPrefs
parameter_list|)
block|{
name|singleton
operator|=
name|owPrefs
expr_stmt|;
block|}
DECL|method|getWrappedUsername ()
specifier|public
name|String
name|getWrappedUsername
parameter_list|()
block|{
return|return
literal|'['
operator|+
name|get
argument_list|(
name|DEFAULT_OWNER
argument_list|)
operator|+
literal|']'
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultEncoding ()
specifier|public
name|Charset
name|getDefaultEncoding
parameter_list|()
block|{
return|return
name|Charset
operator|.
name|forName
argument_list|(
name|get
argument_list|(
name|DEFAULT_ENCODING
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setDefaultEncoding (Charset encoding)
specifier|public
name|void
name|setDefaultEncoding
parameter_list|(
name|Charset
name|encoding
parameter_list|)
block|{
name|put
argument_list|(
name|DEFAULT_ENCODING
argument_list|,
name|encoding
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileHistory ()
specifier|public
name|FileHistory
name|getFileHistory
parameter_list|()
block|{
return|return
operator|new
name|FileHistory
argument_list|(
name|getStringList
argument_list|(
name|RECENT_DATABASES
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|storeFileHistory (FileHistory history)
specifier|public
name|void
name|storeFileHistory
parameter_list|(
name|FileHistory
name|history
parameter_list|)
block|{
if|if
condition|(
operator|!
name|history
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|putStringList
argument_list|(
name|RECENT_DATABASES
argument_list|,
name|history
operator|.
name|getHistory
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Path
operator|::
name|toAbsolutePath
argument_list|)
operator|.
name|map
argument_list|(
name|Path
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFilePreferences ()
specifier|public
name|FilePreferences
name|getFilePreferences
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fieldDirectories
init|=
name|Stream
operator|.
name|of
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|,
name|FieldName
operator|.
name|PDF
argument_list|,
name|FieldName
operator|.
name|PS
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|field
lambda|->
name|field
argument_list|,
name|field
lambda|->
name|get
argument_list|(
name|field
operator|+
name|FilePreferences
operator|.
name|DIR_SUFFIX
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilePreferences
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|fieldDirectories
argument_list|,
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|BIB_LOC_AS_PRIMARY_DIR
argument_list|)
argument_list|,
name|get
argument_list|(
name|IMPORT_FILENAMEPATTERN
argument_list|)
argument_list|,
name|get
argument_list|(
name|IMPORT_FILEDIRPATTERN
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUpdateFieldPreferences ()
specifier|public
name|UpdateFieldPreferences
name|getUpdateFieldPreferences
parameter_list|()
block|{
return|return
operator|new
name|UpdateFieldPreferences
argument_list|(
name|getBoolean
argument_list|(
name|USE_OWNER
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|OVERWRITE_OWNER
argument_list|)
argument_list|,
name|get
argument_list|(
name|DEFAULT_OWNER
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|USE_TIME_STAMP
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|OVERWRITE_TIME_STAMP
argument_list|)
argument_list|,
name|get
argument_list|(
name|TIME_STAMP_FIELD
argument_list|)
argument_list|,
name|get
argument_list|(
name|TIME_STAMP_FORMAT
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLatexFieldFormatterPreferences ()
specifier|public
name|LatexFieldFormatterPreferences
name|getLatexFieldFormatterPreferences
parameter_list|()
block|{
return|return
operator|new
name|LatexFieldFormatterPreferences
argument_list|(
name|getBoolean
argument_list|(
name|RESOLVE_STRINGS_ALL_FIELDS
argument_list|)
argument_list|,
name|getStringList
argument_list|(
name|DO_NOT_RESOLVE_STRINGS_FOR
argument_list|)
argument_list|,
name|getFieldContentParserPreferences
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getFieldContentParserPreferences ()
specifier|public
name|FieldContentParserPreferences
name|getFieldContentParserPreferences
parameter_list|()
block|{
return|return
operator|new
name|FieldContentParserPreferences
argument_list|(
name|getStringList
argument_list|(
name|NON_WRAPPABLE_FIELDS
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isKeywordSyncEnabled ()
specifier|public
name|boolean
name|isKeywordSyncEnabled
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SPECIALFIELDSENABLED
argument_list|)
operator|&&
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOSYNCSPECIALFIELDSTOKEYWORDS
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getImportFormatPreferences ()
specifier|public
name|ImportFormatPreferences
name|getImportFormatPreferences
parameter_list|()
block|{
return|return
operator|new
name|ImportFormatPreferences
argument_list|(
name|customImports
argument_list|,
name|getDefaultEncoding
argument_list|()
argument_list|,
name|getKeywordDelimiter
argument_list|()
argument_list|,
name|getBibtexKeyPatternPreferences
argument_list|()
argument_list|,
name|getFieldContentParserPreferences
argument_list|()
argument_list|,
name|getXMPPreferences
argument_list|()
argument_list|,
name|isKeywordSyncEnabled
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadForExportFromPreferences ()
specifier|public
name|SavePreferences
name|loadForExportFromPreferences
parameter_list|()
block|{
name|Boolean
name|saveInOriginalOrder
init|=
name|this
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_IN_ORIGINAL_ORDER
argument_list|)
decl_stmt|;
name|SaveOrderConfig
name|saveOrder
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|saveInOriginalOrder
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_IN_SPECIFIED_ORDER
argument_list|)
condition|)
block|{
name|saveOrder
operator|=
name|this
operator|.
name|loadExportSaveOrder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|saveOrder
operator|=
name|this
operator|.
name|loadTableSaveOrder
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SavePreferences
argument_list|(
name|saveInOriginalOrder
argument_list|,
name|saveOrder
argument_list|,
name|this
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|,
name|this
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|BACKUP
argument_list|)
argument_list|,
name|SavePreferences
operator|.
name|DatabaseSaveType
operator|.
name|ALL
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|REFORMAT_FILE_ON_SAVE_AND_EXPORT
argument_list|)
argument_list|,
name|this
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|,
name|this
operator|.
name|getKeyPattern
argument_list|()
argument_list|,
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GENERATE_KEYS_BEFORE_SAVING
argument_list|)
argument_list|,
name|getBibtexKeyPatternPreferences
argument_list|()
argument_list|)
return|;
block|}
DECL|method|loadForSaveFromPreferences ()
specifier|public
name|SavePreferences
name|loadForSaveFromPreferences
parameter_list|()
block|{
return|return
operator|new
name|SavePreferences
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|,
name|this
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|BACKUP
argument_list|)
argument_list|,
name|SavePreferences
operator|.
name|DatabaseSaveType
operator|.
name|ALL
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|REFORMAT_FILE_ON_SAVE_AND_EXPORT
argument_list|)
argument_list|,
name|this
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|,
name|this
operator|.
name|getKeyPattern
argument_list|()
argument_list|,
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GENERATE_KEYS_BEFORE_SAVING
argument_list|)
argument_list|,
name|getBibtexKeyPatternPreferences
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getExporterFactory (JournalAbbreviationLoader abbreviationLoader)
specifier|public
name|ExporterFactory
name|getExporterFactory
parameter_list|(
name|JournalAbbreviationLoader
name|abbreviationLoader
parameter_list|)
block|{
name|List
argument_list|<
name|TemplateExporter
argument_list|>
name|customFormats
init|=
name|getCustomExportFormats
argument_list|(
name|abbreviationLoader
argument_list|)
decl_stmt|;
name|LayoutFormatterPreferences
name|layoutPreferences
init|=
name|this
operator|.
name|getLayoutFormatterPreferences
argument_list|(
name|abbreviationLoader
argument_list|)
decl_stmt|;
name|SavePreferences
name|savePreferences
init|=
name|this
operator|.
name|loadForExportFromPreferences
argument_list|()
decl_stmt|;
name|XmpPreferences
name|xmpPreferences
init|=
name|this
operator|.
name|getXMPPreferences
argument_list|()
decl_stmt|;
return|return
name|ExporterFactory
operator|.
name|create
argument_list|(
name|customFormats
argument_list|,
name|layoutPreferences
argument_list|,
name|savePreferences
argument_list|,
name|xmpPreferences
argument_list|)
return|;
block|}
DECL|method|getBibtexKeyPatternPreferences ()
specifier|public
name|BibtexKeyPatternPreferences
name|getBibtexKeyPatternPreferences
parameter_list|()
block|{
return|return
operator|new
name|BibtexKeyPatternPreferences
argument_list|(
name|get
argument_list|(
name|KEY_PATTERN_REGEX
argument_list|)
argument_list|,
name|get
argument_list|(
name|KEY_PATTERN_REPLACEMENT
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|KEY_GEN_ALWAYS_ADD_LETTER
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|KEY_GEN_FIRST_LETTER_A
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|ENFORCE_LEGAL_BIBTEX_KEY
argument_list|)
argument_list|,
name|getKeyPattern
argument_list|()
argument_list|,
name|getKeywordDelimiter
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getTimestampPreferences ()
specifier|public
name|TimestampPreferences
name|getTimestampPreferences
parameter_list|()
block|{
return|return
operator|new
name|TimestampPreferences
argument_list|(
name|getBoolean
argument_list|(
name|USE_TIME_STAMP
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|UPDATE_TIMESTAMP
argument_list|)
argument_list|,
name|get
argument_list|(
name|TIME_STAMP_FIELD
argument_list|)
argument_list|,
name|get
argument_list|(
name|TIME_STAMP_FORMAT
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|OVERWRITE_TIME_STAMP
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLayoutFormatterPreferences (JournalAbbreviationLoader journalAbbreviationLoader)
specifier|public
name|LayoutFormatterPreferences
name|getLayoutFormatterPreferences
parameter_list|(
name|JournalAbbreviationLoader
name|journalAbbreviationLoader
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|journalAbbreviationLoader
argument_list|)
expr_stmt|;
return|return
operator|new
name|LayoutFormatterPreferences
argument_list|(
name|getNameFormatterPreferences
argument_list|()
argument_list|,
name|getJournalAbbreviationPreferences
argument_list|()
argument_list|,
name|getFileLinkPreferences
argument_list|()
argument_list|,
name|journalAbbreviationLoader
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getXMPPreferences ()
specifier|public
name|XmpPreferences
name|getXMPPreferences
parameter_list|()
block|{
return|return
operator|new
name|XmpPreferences
argument_list|(
name|getBoolean
argument_list|(
name|USE_XMP_PRIVACY_FILTER
argument_list|)
argument_list|,
name|getStringList
argument_list|(
name|XMP_PRIVACY_FILTERS
argument_list|)
argument_list|,
name|getKeywordDelimiter
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOpenOfficePreferences ()
specifier|public
name|OpenOfficePreferences
name|getOpenOfficePreferences
parameter_list|()
block|{
return|return
operator|new
name|OpenOfficePreferences
argument_list|(
name|this
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|OO_JARS_PATH
argument_list|)
argument_list|,
name|this
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXECUTABLE_PATH
argument_list|)
argument_list|,
name|this
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|OO_PATH
argument_list|)
argument_list|,
name|this
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_USE_ALL_OPEN_BASES
argument_list|)
argument_list|,
name|this
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_SYNC_WHEN_CITING
argument_list|)
argument_list|,
name|this
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_SHOW_PANEL
argument_list|)
argument_list|,
name|this
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXTERNAL_STYLE_FILES
argument_list|)
argument_list|,
name|this
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|OO_BIBLIOGRAPHY_STYLE_FILE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setOpenOfficePreferences (OpenOfficePreferences openOfficePreferences)
specifier|public
name|void
name|setOpenOfficePreferences
parameter_list|(
name|OpenOfficePreferences
name|openOfficePreferences
parameter_list|)
block|{
name|this
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|OO_JARS_PATH
argument_list|,
name|openOfficePreferences
operator|.
name|getJarsPath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXECUTABLE_PATH
argument_list|,
name|openOfficePreferences
operator|.
name|getExecutablePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|OO_PATH
argument_list|,
name|openOfficePreferences
operator|.
name|getInstallationPath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_USE_ALL_OPEN_BASES
argument_list|,
name|openOfficePreferences
operator|.
name|getUseAllDatabases
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_SYNC_WHEN_CITING
argument_list|,
name|openOfficePreferences
operator|.
name|getSyncWhenCiting
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OO_SHOW_PANEL
argument_list|,
name|openOfficePreferences
operator|.
name|getShowPanel
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|OO_EXTERNAL_STYLE_FILES
argument_list|,
name|openOfficePreferences
operator|.
name|getExternalStyles
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|OO_BIBLIOGRAPHY_STYLE_FILE
argument_list|,
name|openOfficePreferences
operator|.
name|getCurrentStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getNameFormatterPreferences ()
specifier|private
name|NameFormatterPreferences
name|getNameFormatterPreferences
parameter_list|()
block|{
return|return
operator|new
name|NameFormatterPreferences
argument_list|(
name|getStringList
argument_list|(
name|NAME_FORMATER_KEY
argument_list|)
argument_list|,
name|getStringList
argument_list|(
name|NAME_FORMATTER_VALUE
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getFileLinkPreferences ()
specifier|public
name|FileLinkPreferences
name|getFileLinkPreferences
parameter_list|()
block|{
return|return
operator|new
name|FileLinkPreferences
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|get
argument_list|(
name|FieldName
operator|.
name|FILE
operator|+
name|FilePreferences
operator|.
name|DIR_SUFFIX
argument_list|)
argument_list|)
argument_list|,
name|fileDirForDatabase
argument_list|)
return|;
block|}
DECL|method|storeVersionPreferences (VersionPreferences versionPreferences)
specifier|public
name|JabRefPreferences
name|storeVersionPreferences
parameter_list|(
name|VersionPreferences
name|versionPreferences
parameter_list|)
block|{
name|put
argument_list|(
name|VERSION_IGNORED_UPDATE
argument_list|,
name|versionPreferences
operator|.
name|getIgnoredVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getVersionPreferences ()
specifier|public
name|VersionPreferences
name|getVersionPreferences
parameter_list|()
block|{
name|Version
name|ignoredVersion
init|=
name|Version
operator|.
name|parse
argument_list|(
name|get
argument_list|(
name|VERSION_IGNORED_UPDATE
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|VersionPreferences
argument_list|(
name|ignoredVersion
argument_list|)
return|;
block|}
DECL|method|storePreviewPreferences (PreviewPreferences previewPreferences)
specifier|public
name|JabRefPreferences
name|storePreviewPreferences
parameter_list|(
name|PreviewPreferences
name|previewPreferences
parameter_list|)
block|{
name|putInt
argument_list|(
name|CYCLE_PREVIEW_POS
argument_list|,
name|previewPreferences
operator|.
name|getPreviewCyclePosition
argument_list|()
argument_list|)
expr_stmt|;
name|putStringList
argument_list|(
name|CYCLE_PREVIEW
argument_list|,
name|previewPreferences
operator|.
name|getPreviewCycle
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|layout
lambda|->
block|{
if|if
condition|(
name|layout
operator|instanceof
name|CitationStylePreviewLayout
condition|)
block|{
return|return
operator|(
operator|(
name|CitationStylePreviewLayout
operator|)
name|layout
operator|)
operator|.
name|getFilePath
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|layout
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|putDouble
argument_list|(
name|PREVIEW_PANEL_HEIGHT
argument_list|,
name|previewPreferences
operator|.
name|getPreviewPanelDividerPosition
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|PREVIEW_STYLE
argument_list|,
name|previewPreferences
operator|.
name|getPreviewStyle
argument_list|()
argument_list|)
expr_stmt|;
name|putBoolean
argument_list|(
name|PREVIEW_ENABLED
argument_list|,
name|previewPreferences
operator|.
name|isPreviewPanelEnabled
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getPreviewPreferences ()
specifier|public
name|PreviewPreferences
name|getPreviewPreferences
parameter_list|()
block|{
name|int
name|cyclePos
init|=
name|getInt
argument_list|(
name|CYCLE_PREVIEW_POS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|getStringList
argument_list|(
name|CYCLE_PREVIEW
argument_list|)
decl_stmt|;
name|double
name|panelHeight
init|=
name|getDouble
argument_list|(
name|PREVIEW_PANEL_HEIGHT
argument_list|)
decl_stmt|;
name|String
name|style
init|=
name|get
argument_list|(
name|PREVIEW_STYLE
argument_list|)
decl_stmt|;
name|String
name|styleDefault
init|=
operator|(
name|String
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|PREVIEW_STYLE
argument_list|)
decl_stmt|;
name|boolean
name|enabled
init|=
name|getBoolean
argument_list|(
name|PREVIEW_ENABLED
argument_list|)
decl_stmt|;
comment|// For backwards compatibility always add at least the default preview to the cycle
if|if
condition|(
name|cycle
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cycle
operator|.
name|add
argument_list|(
literal|"Preview"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|PreviewLayout
argument_list|>
name|layouts
init|=
name|cycle
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|layout
lambda|->
block|{
if|if
condition|(
name|CitationStyle
operator|.
name|isCitationStyleFile
argument_list|(
name|layout
argument_list|)
condition|)
block|{
return|return
name|CitationStyle
operator|.
name|createCitationStyleFromFile
argument_list|(
name|layout
argument_list|)
operator|.
name|map
argument_list|(
name|file
lambda|->
operator|(
name|PreviewLayout
operator|)
operator|new
name|CitationStylePreviewLayout
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TextBasedPreviewLayout
argument_list|(
name|style
argument_list|,
name|getLayoutFormatterPreferences
argument_list|(
name|Globals
operator|.
name|journalAbbreviationLoader
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|PreviewPreferences
argument_list|(
name|layouts
argument_list|,
name|cyclePos
argument_list|,
name|panelHeight
argument_list|,
name|enabled
argument_list|,
name|style
argument_list|,
name|styleDefault
argument_list|)
return|;
block|}
DECL|method|storeProxyPreferences (ProxyPreferences proxyPreferences)
specifier|public
name|void
name|storeProxyPreferences
parameter_list|(
name|ProxyPreferences
name|proxyPreferences
parameter_list|)
block|{
name|putBoolean
argument_list|(
name|PROXY_USE
argument_list|,
name|proxyPreferences
operator|.
name|isUseProxy
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|PROXY_HOSTNAME
argument_list|,
name|proxyPreferences
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|PROXY_PORT
argument_list|,
name|proxyPreferences
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|putBoolean
argument_list|(
name|PROXY_USE_AUTHENTICATION
argument_list|,
name|proxyPreferences
operator|.
name|isUseAuthentication
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|PROXY_USERNAME
argument_list|,
name|proxyPreferences
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|PROXY_PASSWORD
argument_list|,
name|proxyPreferences
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getProxyPreferences ()
specifier|public
name|ProxyPreferences
name|getProxyPreferences
parameter_list|()
block|{
name|Boolean
name|useProxy
init|=
name|getBoolean
argument_list|(
name|PROXY_USE
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|get
argument_list|(
name|PROXY_HOSTNAME
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|get
argument_list|(
name|PROXY_PORT
argument_list|)
decl_stmt|;
name|Boolean
name|useAuthentication
init|=
name|getBoolean
argument_list|(
name|PROXY_USE_AUTHENTICATION
argument_list|)
decl_stmt|;
name|String
name|username
init|=
name|get
argument_list|(
name|PROXY_USERNAME
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|get
argument_list|(
name|PROXY_PASSWORD
argument_list|)
decl_stmt|;
return|return
operator|new
name|ProxyPreferences
argument_list|(
name|useProxy
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|,
name|useAuthentication
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
return|;
block|}
DECL|method|getProtectedTermsPreferences ()
specifier|public
name|ProtectedTermsPreferences
name|getProtectedTermsPreferences
parameter_list|()
block|{
return|return
operator|new
name|ProtectedTermsPreferences
argument_list|(
name|getStringList
argument_list|(
name|PROTECTED_TERMS_ENABLED_INTERNAL
argument_list|)
argument_list|,
name|getStringList
argument_list|(
name|PROTECTED_TERMS_ENABLED_EXTERNAL
argument_list|)
argument_list|,
name|getStringList
argument_list|(
name|PROTECTED_TERMS_DISABLED_INTERNAL
argument_list|)
argument_list|,
name|getStringList
argument_list|(
name|PROTECTED_TERMS_DISABLED_EXTERNAL
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setProtectedTermsPreferences (ProtectedTermsLoader loader)
specifier|public
name|void
name|setProtectedTermsPreferences
parameter_list|(
name|ProtectedTermsLoader
name|loader
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|enabledExternalList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|disabledExternalList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|enabledInternalList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|disabledInternalList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProtectedTermsList
name|list
range|:
name|loader
operator|.
name|getProtectedTermsLists
argument_list|()
control|)
block|{
if|if
condition|(
name|list
operator|.
name|isInternalList
argument_list|()
condition|)
block|{
if|if
condition|(
name|list
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|enabledInternalList
operator|.
name|add
argument_list|(
name|list
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|disabledInternalList
operator|.
name|add
argument_list|(
name|list
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|list
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|enabledExternalList
operator|.
name|add
argument_list|(
name|list
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|disabledExternalList
operator|.
name|add
argument_list|(
name|list
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|putStringList
argument_list|(
name|PROTECTED_TERMS_ENABLED_EXTERNAL
argument_list|,
name|enabledExternalList
argument_list|)
expr_stmt|;
name|putStringList
argument_list|(
name|PROTECTED_TERMS_DISABLED_EXTERNAL
argument_list|,
name|disabledExternalList
argument_list|)
expr_stmt|;
name|putStringList
argument_list|(
name|PROTECTED_TERMS_ENABLED_INTERNAL
argument_list|,
name|enabledInternalList
argument_list|)
expr_stmt|;
name|putStringList
argument_list|(
name|PROTECTED_TERMS_DISABLED_INTERNAL
argument_list|,
name|disabledInternalList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getJournalAbbreviationPreferences ()
specifier|public
name|JournalAbbreviationPreferences
name|getJournalAbbreviationPreferences
parameter_list|()
block|{
return|return
operator|new
name|JournalAbbreviationPreferences
argument_list|(
name|getStringList
argument_list|(
name|EXTERNAL_JOURNAL_LISTS
argument_list|)
argument_list|,
name|get
argument_list|(
name|PERSONAL_JOURNAL_LIST
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|USE_IEEE_ABRV
argument_list|)
argument_list|,
name|getDefaultEncoding
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCleanupPreferences (JournalAbbreviationLoader journalAbbreviationLoader)
specifier|public
name|CleanupPreferences
name|getCleanupPreferences
parameter_list|(
name|JournalAbbreviationLoader
name|journalAbbreviationLoader
parameter_list|)
block|{
return|return
operator|new
name|CleanupPreferences
argument_list|(
name|getLayoutFormatterPreferences
argument_list|(
name|journalAbbreviationLoader
argument_list|)
argument_list|,
name|getFilePreferences
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCleanupPreset ()
specifier|public
name|CleanupPreset
name|getCleanupPreset
parameter_list|()
block|{
name|Set
argument_list|<
name|CleanupPreset
operator|.
name|CleanupStep
argument_list|>
name|activeJobs
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|CleanupPreset
operator|.
name|CleanupStep
name|action
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP
operator|+
name|action
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|activeJobs
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
name|FieldFormatterCleanups
name|formatterCleanups
init|=
name|Cleanups
operator|.
name|parse
argument_list|(
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_FORMATTERS
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|CleanupPreset
argument_list|(
name|activeJobs
argument_list|,
name|formatterCleanups
argument_list|)
return|;
block|}
DECL|method|setCleanupPreset (CleanupPreset cleanupPreset)
specifier|public
name|void
name|setCleanupPreset
parameter_list|(
name|CleanupPreset
name|cleanupPreset
parameter_list|)
block|{
for|for
control|(
name|CleanupPreset
operator|.
name|CleanupStep
name|action
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|class
argument_list|)
control|)
block|{
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP
operator|+
name|action
operator|.
name|name
argument_list|()
argument_list|,
name|cleanupPreset
operator|.
name|isActive
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|CLEANUP_FORMATTERS
argument_list|,
name|cleanupPreset
operator|.
name|getFormatterCleanups
argument_list|()
operator|.
name|getAsStringList
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRemotePreferences ()
specifier|public
name|RemotePreferences
name|getRemotePreferences
parameter_list|()
block|{
return|return
operator|new
name|RemotePreferences
argument_list|(
name|getInt
argument_list|(
name|REMOTE_SERVER_PORT
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|USE_REMOTE_SERVER
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setRemotePreferences (RemotePreferences remotePreferences)
specifier|public
name|void
name|setRemotePreferences
parameter_list|(
name|RemotePreferences
name|remotePreferences
parameter_list|)
block|{
name|putInt
argument_list|(
name|REMOTE_SERVER_PORT
argument_list|,
name|remotePreferences
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|putBoolean
argument_list|(
name|USE_REMOTE_SERVER
argument_list|,
name|remotePreferences
operator|.
name|useRemoteServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeExportSaveOrder (SaveOrderConfig config)
specifier|public
name|void
name|storeExportSaveOrder
parameter_list|(
name|SaveOrderConfig
name|config
parameter_list|)
block|{
name|putBoolean
argument_list|(
name|EXPORT_PRIMARY_SORT_DESCENDING
argument_list|,
name|config
operator|.
name|getSortCriteria
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|descending
argument_list|)
expr_stmt|;
name|putBoolean
argument_list|(
name|EXPORT_SECONDARY_SORT_DESCENDING
argument_list|,
name|config
operator|.
name|getSortCriteria
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|descending
argument_list|)
expr_stmt|;
name|putBoolean
argument_list|(
name|EXPORT_TERTIARY_SORT_DESCENDING
argument_list|,
name|config
operator|.
name|getSortCriteria
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|descending
argument_list|)
expr_stmt|;
name|putBoolean
argument_list|(
name|EXPORT_IN_ORIGINAL_ORDER
argument_list|,
name|config
operator|.
name|saveInOriginalOrder
argument_list|()
argument_list|)
expr_stmt|;
name|putBoolean
argument_list|(
name|EXPORT_IN_SPECIFIED_ORDER
argument_list|,
name|config
operator|.
name|saveInSpecifiedOrder
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|EXPORT_PRIMARY_SORT_FIELD
argument_list|,
name|config
operator|.
name|getSortCriteria
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|EXPORT_SECONDARY_SORT_FIELD
argument_list|,
name|config
operator|.
name|getSortCriteria
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|field
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|EXPORT_TERTIARY_SORT_FIELD
argument_list|,
name|config
operator|.
name|getSortCriteria
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|loadTableSaveOrder ()
specifier|private
name|SaveOrderConfig
name|loadTableSaveOrder
parameter_list|()
block|{
name|SaveOrderConfig
name|config
init|=
operator|new
name|SaveOrderConfig
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|getStringList
argument_list|(
name|COLUMN_IN_SORT_ORDER
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|sortTypes
init|=
name|getStringList
argument_list|(
name|COlUMN_IN_SORT_ORDER_TYPE
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|SortType
operator|::
name|valueOf
argument_list|)
operator|.
name|map
argument_list|(
name|type
lambda|->
name|type
operator|==
name|SortType
operator|.
name|DESCENDING
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|config
operator|.
name|getSortCriteria
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|sortTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
annotation|@
name|Override
DECL|method|loadExportSaveOrder ()
specifier|public
name|SaveOrderConfig
name|loadExportSaveOrder
parameter_list|()
block|{
return|return
operator|new
name|SaveOrderConfig
argument_list|(
name|getBoolean
argument_list|(
name|EXPORT_IN_ORIGINAL_ORDER
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|EXPORT_IN_SPECIFIED_ORDER
argument_list|)
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
name|get
argument_list|(
name|EXPORT_PRIMARY_SORT_FIELD
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|EXPORT_PRIMARY_SORT_DESCENDING
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
name|get
argument_list|(
name|EXPORT_SECONDARY_SORT_FIELD
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|EXPORT_SECONDARY_SORT_DESCENDING
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SaveOrderConfig
operator|.
name|SortCriterion
argument_list|(
name|get
argument_list|(
name|EXPORT_TERTIARY_SORT_FIELD
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|EXPORT_TERTIARY_SORT_DESCENDING
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKeywordDelimiter ()
specifier|public
name|Character
name|getKeywordDelimiter
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|KEYWORD_SEPARATOR
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getOrCreateUserId ()
specifier|public
name|String
name|getOrCreateUserId
parameter_list|()
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|userId
init|=
name|getAsOptional
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|userId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|userId
operator|.
name|get
argument_list|()
return|;
block|}
else|else
block|{
name|String
name|newUserId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|USER_ID
argument_list|,
name|newUserId
argument_list|)
expr_stmt|;
return|return
name|newUserId
return|;
block|}
block|}
DECL|method|shouldCollectTelemetry ()
specifier|public
name|Boolean
name|shouldCollectTelemetry
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|COLLECT_TELEMETRY
argument_list|)
return|;
block|}
DECL|method|setShouldCollectTelemetry (boolean value)
specifier|public
name|void
name|setShouldCollectTelemetry
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|putBoolean
argument_list|(
name|COLLECT_TELEMETRY
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldAskToCollectTelemetry ()
specifier|public
name|Boolean
name|shouldAskToCollectTelemetry
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|ALREADY_ASKED_TO_COLLECT_TELEMETRY
argument_list|)
return|;
block|}
DECL|method|askedToCollectTelemetry ()
specifier|public
name|void
name|askedToCollectTelemetry
parameter_list|()
block|{
name|putBoolean
argument_list|(
name|ALREADY_ASKED_TO_COLLECT_TELEMETRY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeKeyBindingRepository (KeyBindingRepository keyBindingRepository)
specifier|public
name|void
name|storeKeyBindingRepository
parameter_list|(
name|KeyBindingRepository
name|keyBindingRepository
parameter_list|)
block|{
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|BIND_NAMES
argument_list|,
name|keyBindingRepository
operator|.
name|getBindNames
argument_list|()
argument_list|)
expr_stmt|;
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|BINDINGS
argument_list|,
name|keyBindingRepository
operator|.
name|getBindings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKeyBindingRepository ()
specifier|public
name|KeyBindingRepository
name|getKeyBindingRepository
parameter_list|()
block|{
return|return
operator|new
name|KeyBindingRepository
argument_list|(
name|getStringList
argument_list|(
name|BIND_NAMES
argument_list|)
argument_list|,
name|getStringList
argument_list|(
name|BINDINGS
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|storeJournalAbbreviationPreferences (JournalAbbreviationPreferences abbreviationsPreferences)
specifier|public
name|void
name|storeJournalAbbreviationPreferences
parameter_list|(
name|JournalAbbreviationPreferences
name|abbreviationsPreferences
parameter_list|)
block|{
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|EXTERNAL_JOURNAL_LISTS
argument_list|,
name|abbreviationsPreferences
operator|.
name|getExternalJournalLists
argument_list|()
argument_list|)
expr_stmt|;
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_IEEE_ABRV
argument_list|,
name|abbreviationsPreferences
operator|.
name|useIEEEAbbreviations
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAutoLinkPreferences ()
specifier|public
name|AutoLinkPreferences
name|getAutoLinkPreferences
parameter_list|()
block|{
return|return
operator|new
name|AutoLinkPreferences
argument_list|(
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOLINK_USE_REG_EXP_SEARCH_KEY
argument_list|)
argument_list|,
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOLINK_REG_EXP_SEARCH_EXPRESSION_KEY
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOLINK_EXACT_KEY_ONLY
argument_list|)
argument_list|,
name|getKeywordDelimiter
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getAutoCompletePreferences ()
specifier|public
name|AutoCompletePreferences
name|getAutoCompletePreferences
parameter_list|()
block|{
return|return
operator|new
name|AutoCompletePreferences
argument_list|(
name|getBoolean
argument_list|(
name|AUTO_COMPLETE
argument_list|)
argument_list|,
name|AutoCompleteFirstNameMode
operator|.
name|parse
argument_list|(
name|get
argument_list|(
name|AUTOCOMPLETER_FIRSTNAME_MODE
argument_list|)
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|AUTOCOMPLETER_LAST_FIRST
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|AUTOCOMPLETER_FIRST_LAST
argument_list|)
argument_list|,
name|getStringList
argument_list|(
name|AUTOCOMPLETER_COMPLETE_FIELDS
argument_list|)
argument_list|,
name|getJournalAbbreviationPreferences
argument_list|()
argument_list|)
return|;
block|}
DECL|method|storeAutoCompletePreferences (AutoCompletePreferences autoCompletePreferences)
specifier|public
name|void
name|storeAutoCompletePreferences
parameter_list|(
name|AutoCompletePreferences
name|autoCompletePreferences
parameter_list|)
block|{
name|putBoolean
argument_list|(
name|AUTO_COMPLETE
argument_list|,
name|autoCompletePreferences
operator|.
name|shouldAutoComplete
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|AUTOCOMPLETER_FIRSTNAME_MODE
argument_list|,
name|autoCompletePreferences
operator|.
name|getFirstNameMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|putBoolean
argument_list|(
name|AUTOCOMPLETER_LAST_FIRST
argument_list|,
name|autoCompletePreferences
operator|.
name|getOnlyCompleteLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|putBoolean
argument_list|(
name|AUTOCOMPLETER_FIRST_LAST
argument_list|,
name|autoCompletePreferences
operator|.
name|getOnlyCompleteFirstLast
argument_list|()
argument_list|)
expr_stmt|;
name|putStringList
argument_list|(
name|AUTOCOMPLETER_COMPLETE_FIELDS
argument_list|,
name|autoCompletePreferences
operator|.
name|getCompleteFields
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|storeSidePanePreferredPositions (Map<SidePaneType, Integer> preferredPositions)
specifier|public
name|void
name|storeSidePanePreferredPositions
parameter_list|(
name|Map
argument_list|<
name|SidePaneType
argument_list|,
name|Integer
argument_list|>
name|preferredPositions
parameter_list|)
block|{
comment|// Split the map into a pair of parallel String lists suitable for storage
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|preferredPositions
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Enum
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|positions
init|=
name|preferredPositions
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|integer
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|integer
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|putStringList
argument_list|(
name|SIDE_PANE_COMPONENT_NAMES
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|putStringList
argument_list|(
name|SIDE_PANE_COMPONENT_PREFERRED_POSITIONS
argument_list|,
name|positions
argument_list|)
expr_stmt|;
block|}
DECL|method|createExtraFileColumns ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createExtraFileColumns
parameter_list|()
block|{
if|if
condition|(
name|getBoolean
argument_list|(
name|EXTRA_FILE_COLUMNS
argument_list|)
condition|)
block|{
return|return
name|getStringList
argument_list|(
name|LIST_OF_FILE_COLUMNS
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
DECL|method|createSpecialFieldColumns ()
specifier|private
name|List
argument_list|<
name|SpecialField
argument_list|>
name|createSpecialFieldColumns
parameter_list|()
block|{
if|if
condition|(
name|getBoolean
argument_list|(
name|SPECIALFIELDSENABLED
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|SpecialField
argument_list|>
name|fieldsToShow
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getBoolean
argument_list|(
name|SHOWCOLUMN_RANKING
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|RANKING
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getBoolean
argument_list|(
name|SHOWCOLUMN_RELEVANCE
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|RELEVANCE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getBoolean
argument_list|(
name|SHOWCOLUMN_QUALITY
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|QUALITY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getBoolean
argument_list|(
name|SHOWCOLUMN_PRIORITY
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|PRIORITY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getBoolean
argument_list|(
name|SHOWCOLUMN_PRINTED
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|PRINTED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getBoolean
argument_list|(
name|SHOWCOLUMN_READ
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|READ_STATUS
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldsToShow
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
DECL|method|createColumnWidths ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|createColumnWidths
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|getStringList
argument_list|(
name|COLUMN_NAMES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|widths
init|=
name|getStringList
argument_list|(
name|COLUMN_WIDTHS
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|string
lambda|->
block|{
try|try
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Exception while parsing column widths. Choosing default."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_LENGTH
return|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|widths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|getColumnPreferences ()
specifier|public
name|ColumnPreferences
name|getColumnPreferences
parameter_list|()
block|{
return|return
operator|new
name|ColumnPreferences
argument_list|(
name|getBoolean
argument_list|(
name|FILE_COLUMN
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|URL_COLUMN
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|PREFER_URL_DOI
argument_list|)
argument_list|,
name|getBoolean
argument_list|(
name|ARXIV_COLUMN
argument_list|)
argument_list|,
name|getStringList
argument_list|(
name|COLUMN_NAMES
argument_list|)
argument_list|,
name|createSpecialFieldColumns
argument_list|()
argument_list|,
name|createExtraFileColumns
argument_list|()
argument_list|,
name|createColumnWidths
argument_list|()
argument_list|,
name|getMainTableColumnSortTypes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getMainTablePreferences ()
specifier|public
name|MainTablePreferences
name|getMainTablePreferences
parameter_list|()
block|{
return|return
operator|new
name|MainTablePreferences
argument_list|(
name|getColumnPreferences
argument_list|()
argument_list|,
name|getBoolean
argument_list|(
name|AUTO_RESIZE_MODE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDir ()
specifier|public
name|Path
name|getWorkingDir
parameter_list|()
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|get
argument_list|(
name|WORKING_DIRECTORY
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDir (Path dir)
specifier|public
name|void
name|setWorkingDir
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
name|put
argument_list|(
name|WORKING_DIRECTORY
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getGroupViewMode ()
specifier|public
name|GroupViewMode
name|getGroupViewMode
parameter_list|()
block|{
return|return
name|GroupViewMode
operator|.
name|valueOf
argument_list|(
name|get
argument_list|(
name|GROUP_INTERSECT_UNION_VIEW_MODE
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setGroupViewMode (GroupViewMode mode)
specifier|public
name|void
name|setGroupViewMode
parameter_list|(
name|GroupViewMode
name|mode
parameter_list|)
block|{
name|put
argument_list|(
name|GROUP_INTERSECT_UNION_VIEW_MODE
argument_list|,
name|mode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setPreviewStyle (String previewStyle)
specifier|public
name|void
name|setPreviewStyle
parameter_list|(
name|String
name|previewStyle
parameter_list|)
block|{
name|put
argument_list|(
name|PREVIEW_STYLE
argument_list|,
name|previewStyle
argument_list|)
expr_stmt|;
block|}
DECL|method|getPreviewStyle ()
specifier|public
name|String
name|getPreviewStyle
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|PREVIEW_STYLE
argument_list|)
return|;
block|}
DECL|method|getFontSize ()
specifier|public
name|Optional
argument_list|<
name|Integer
argument_list|>
name|getFontSize
parameter_list|()
block|{
if|if
condition|(
name|getBoolean
argument_list|(
name|OVERRIDE_DEFAULT_FONT_SIZE
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|getInt
argument_list|(
name|MAIN_FONT_SIZE
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
DECL|method|setLastPreferencesExportPath ()
specifier|public
name|String
name|setLastPreferencesExportPath
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|PREFS_EXPORT_PATH
argument_list|)
return|;
block|}
DECL|method|setLastPreferencesExportPath (Path exportFile)
specifier|public
name|void
name|setLastPreferencesExportPath
parameter_list|(
name|Path
name|exportFile
parameter_list|)
block|{
name|put
argument_list|(
name|PREFS_EXPORT_PATH
argument_list|,
name|exportFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getLanguage ()
specifier|public
name|Language
name|getLanguage
parameter_list|()
block|{
name|String
name|languageId
init|=
name|get
argument_list|(
name|LANGUAGE
argument_list|)
decl_stmt|;
return|return
name|Stream
operator|.
name|of
argument_list|(
name|Language
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|language
lambda|->
name|language
operator|.
name|getId
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|languageId
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
name|Language
operator|.
name|ENGLISH
argument_list|)
return|;
block|}
DECL|method|setLanguage (Language language)
specifier|public
name|void
name|setLanguage
parameter_list|(
name|Language
name|language
parameter_list|)
block|{
name|Language
name|oldLanguage
init|=
name|getLanguage
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|LANGUAGE
argument_list|,
name|language
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|language
operator|!=
name|oldLanguage
condition|)
block|{
comment|// Update any defaults that might be language dependent:
name|setLanguageDependentDefaultValues
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setIdBasedFetcherForEntryGenerator (String fetcherName)
specifier|public
name|void
name|setIdBasedFetcherForEntryGenerator
parameter_list|(
name|String
name|fetcherName
parameter_list|)
block|{
name|put
argument_list|(
name|ID_ENTRY_GENERATOR
argument_list|,
name|fetcherName
argument_list|)
expr_stmt|;
block|}
DECL|method|getIdBasedFetcherForEntryGenerator ()
specifier|public
name|String
name|getIdBasedFetcherForEntryGenerator
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|ID_ENTRY_GENERATOR
argument_list|)
return|;
block|}
DECL|method|setMainTableColumnSortType (Map<String, SortType> sortOrder)
specifier|public
name|void
name|setMainTableColumnSortType
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SortType
argument_list|>
name|sortOrder
parameter_list|)
block|{
name|putStringList
argument_list|(
name|COLUMN_IN_SORT_ORDER
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|sortOrder
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sortTypes
init|=
name|sortOrder
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|SortType
operator|::
name|name
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|putStringList
argument_list|(
name|COlUMN_IN_SORT_ORDER_TYPE
argument_list|,
name|sortTypes
argument_list|)
expr_stmt|;
block|}
DECL|method|getMainTableColumnSortTypes ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SortType
argument_list|>
name|getMainTableColumnSortTypes
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|getStringList
argument_list|(
name|COLUMN_IN_SORT_ORDER
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SortType
argument_list|>
name|sortTypes
init|=
name|getStringList
argument_list|(
name|COlUMN_IN_SORT_ORDER_TYPE
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|SortType
operator|::
name|valueOf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SortType
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|sortTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|getEntryEditorFileLinkPreference ()
specifier|public
name|FileDragDropPreferenceType
name|getEntryEditorFileLinkPreference
parameter_list|()
block|{
return|return
name|FileDragDropPreferenceType
operator|.
name|valueOf
argument_list|(
name|get
argument_list|(
name|ENTRY_EDITOR_DRAG_DROP_PREFERENCE_TYPE
argument_list|)
argument_list|)
return|;
block|}
DECL|method|storeEntryEditorFileLinkPreference (FileDragDropPreferenceType type)
specifier|public
name|void
name|storeEntryEditorFileLinkPreference
parameter_list|(
name|FileDragDropPreferenceType
name|type
parameter_list|)
block|{
name|put
argument_list|(
name|ENTRY_EDITOR_DRAG_DROP_PREFERENCE_TYPE
argument_list|,
name|type
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCustomExportFormats (JournalAbbreviationLoader loader)
specifier|public
name|List
argument_list|<
name|TemplateExporter
argument_list|>
name|getCustomExportFormats
parameter_list|(
name|JournalAbbreviationLoader
name|loader
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|TemplateExporter
argument_list|>
name|formats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|exporterName
decl_stmt|;
name|String
name|filename
decl_stmt|;
name|String
name|extension
decl_stmt|;
name|LayoutFormatterPreferences
name|layoutPreferences
init|=
name|getLayoutFormatterPreferences
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|SavePreferences
name|savePreferences
init|=
name|loadForExportFromPreferences
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|formatData
decl_stmt|;
while|while
condition|(
operator|!
operator|(
operator|(
name|formatData
operator|=
name|getStringList
argument_list|(
name|CUSTOM_EXPORT_FORMAT
operator|+
name|i
argument_list|)
operator|)
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|exporterName
operator|=
name|formatData
operator|.
name|get
argument_list|(
name|EXPORTER_NAME_INDEX
argument_list|)
expr_stmt|;
name|filename
operator|=
name|formatData
operator|.
name|get
argument_list|(
name|EXPORTER_FILENAME_INDEX
argument_list|)
expr_stmt|;
name|extension
operator|=
name|formatData
operator|.
name|get
argument_list|(
name|EXPORTER_EXTENSION_INDEX
argument_list|)
expr_stmt|;
name|TemplateExporter
name|format
init|=
operator|new
name|TemplateExporter
argument_list|(
name|exporterName
argument_list|,
name|filename
argument_list|,
name|extension
argument_list|,
name|layoutPreferences
argument_list|,
name|savePreferences
argument_list|)
decl_stmt|;
name|format
operator|.
name|setCustomExport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|formats
operator|.
name|add
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|formats
return|;
block|}
annotation|@
name|Override
DECL|method|storeCustomExportFormats (List<TemplateExporter> exporters)
specifier|public
name|void
name|storeCustomExportFormats
parameter_list|(
name|List
argument_list|<
name|TemplateExporter
argument_list|>
name|exporters
parameter_list|)
block|{
if|if
condition|(
name|exporters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|purgeCustomExportFormats
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exporters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|exporterData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|exporterData
operator|.
name|add
argument_list|(
name|EXPORTER_NAME_INDEX
argument_list|,
name|exporters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|exporterData
operator|.
name|add
argument_list|(
name|EXPORTER_FILENAME_INDEX
argument_list|,
name|exporters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLayoutFileName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only stores the first extension associated with FileType
name|exporterData
operator|.
name|add
argument_list|(
name|EXPORTER_EXTENSION_INDEX
argument_list|,
name|exporters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFileType
argument_list|()
operator|.
name|getExtensions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|putStringList
argument_list|(
name|CUSTOM_EXPORT_FORMAT
operator|+
name|i
argument_list|,
name|exporterData
argument_list|)
expr_stmt|;
block|}
name|purgeCustomExportFormats
argument_list|(
name|exporters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|purgeCustomExportFormats (int from)
specifier|private
name|void
name|purgeCustomExportFormats
parameter_list|(
name|int
name|from
parameter_list|)
block|{
name|int
name|i
init|=
name|from
decl_stmt|;
while|while
condition|(
operator|!
name|getStringList
argument_list|(
name|CUSTOM_EXPORT_FORMAT
operator|+
name|i
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remove
argument_list|(
name|CUSTOM_EXPORT_FORMAT
operator|+
name|i
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getExportWorkingDirectory ()
specifier|public
name|String
name|getExportWorkingDirectory
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|EXPORT_WORKING_DIRECTORY
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setExportWorkingDirectory (String layoutFileDirString)
specifier|public
name|void
name|setExportWorkingDirectory
parameter_list|(
name|String
name|layoutFileDirString
parameter_list|)
block|{
name|put
argument_list|(
name|EXPORT_WORKING_DIRECTORY
argument_list|,
name|layoutFileDirString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shouldWarnAboutDuplicatesForImport ()
specifier|public
name|boolean
name|shouldWarnAboutDuplicatesForImport
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WARN_ABOUT_DUPLICATES_IN_INSPECTION
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setShouldWarnAboutDuplicatesForImport (boolean value)
specifier|public
name|void
name|setShouldWarnAboutDuplicatesForImport
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WARN_ABOUT_DUPLICATES_IN_INSPECTION
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|saveCustomEntryTypes ()
specifier|public
name|void
name|saveCustomEntryTypes
parameter_list|()
block|{
name|saveCustomEntryTypes
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
expr_stmt|;
name|saveCustomEntryTypes
argument_list|(
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
expr_stmt|;
block|}
DECL|method|saveCustomEntryTypes (BibDatabaseMode bibDatabaseMode)
specifier|private
name|void
name|saveCustomEntryTypes
parameter_list|(
name|BibDatabaseMode
name|bibDatabaseMode
parameter_list|)
block|{
name|List
argument_list|<
name|CustomEntryType
argument_list|>
name|customBiblatexBibTexTypes
init|=
name|EntryTypes
operator|.
name|getAllValues
argument_list|(
name|bibDatabaseMode
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|type
lambda|->
name|type
operator|instanceof
name|CustomEntryType
argument_list|)
operator|.
name|map
argument_list|(
name|entryType
lambda|->
operator|(
name|CustomEntryType
operator|)
name|entryType
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|storeCustomEntryTypes
argument_list|(
name|customBiblatexBibTexTypes
argument_list|,
name|bibDatabaseMode
argument_list|)
expr_stmt|;
block|}
DECL|method|getActivePushToApplication (PushToApplicationsManager manager)
specifier|public
name|PushToApplication
name|getActivePushToApplication
parameter_list|(
name|PushToApplicationsManager
name|manager
parameter_list|)
block|{
return|return
name|manager
operator|.
name|getApplicationByName
argument_list|(
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|PUSH_TO_APPLICATION
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setActivePushToApplication (PushToApplication application, PushToApplicationsManager manager)
specifier|public
name|void
name|setActivePushToApplication
parameter_list|(
name|PushToApplication
name|application
parameter_list|,
name|PushToApplicationsManager
name|manager
parameter_list|)
block|{
if|if
condition|(
name|application
operator|.
name|getApplicationName
argument_list|()
operator|!=
name|get
argument_list|(
name|PUSH_TO_APPLICATION
argument_list|)
condition|)
block|{
name|put
argument_list|(
name|PUSH_TO_APPLICATION
argument_list|,
name|application
operator|.
name|getApplicationName
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|updateApplicationAction
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNewLineSeparator ()
specifier|public
name|NewLineSeparator
name|getNewLineSeparator
parameter_list|()
block|{
return|return
name|NewLineSeparator
operator|.
name|parse
argument_list|(
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|NEWLINE
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setNewLineSeparator (NewLineSeparator newLineSeparator)
specifier|public
name|void
name|setNewLineSeparator
parameter_list|(
name|NewLineSeparator
name|newLineSeparator
parameter_list|)
block|{
name|String
name|escapeChars
init|=
name|newLineSeparator
operator|.
name|getEscapeChars
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|NEWLINE
argument_list|,
name|escapeChars
argument_list|)
expr_stmt|;
comment|// we also have to change Globals variable as globals is not a getter, but a constant
name|OS
operator|.
name|NEWLINE
operator|=
name|escapeChars
expr_stmt|;
block|}
block|}
end_class

end_unit

