begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.migrations
package|package
name|org
operator|.
name|jabref
operator|.
name|migrations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|MergeReviewIntoCommentMigration
specifier|public
class|class
name|MergeReviewIntoCommentMigration
block|{
DECL|field|LOGGER
specifier|public
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MergeReviewIntoCommentMigration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|needsMigration (ParserResult parserResult)
specifier|public
specifier|static
name|boolean
name|needsMigration
parameter_list|(
name|ParserResult
name|parserResult
parameter_list|)
block|{
return|return
name|parserResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|bibEntry
lambda|->
name|bibEntry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|REVIEW
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
return|;
block|}
DECL|method|performMigration (ParserResult parserResult)
specifier|public
name|void
name|performMigration
parameter_list|(
name|ParserResult
name|parserResult
parameter_list|)
block|{
comment|/* This migration only handles the non-conflicting entries.          * For the other see this.performConflictingMigration().          */
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|parserResult
argument_list|)
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|entries
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|MergeReviewIntoCommentMigration
operator|::
name|hasReviewField
argument_list|)
operator|.
name|filter
argument_list|(
name|entry
lambda|->
operator|!
name|MergeReviewIntoCommentMigration
operator|.
name|hasCommentField
argument_list|(
name|entry
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
name|migrate
argument_list|(
name|entry
argument_list|,
name|parserResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|collectConflicts (ParserResult parserResult)
specifier|public
specifier|static
name|List
argument_list|<
name|BibEntry
argument_list|>
name|collectConflicts
parameter_list|(
name|ParserResult
name|parserResult
parameter_list|)
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|parserResult
argument_list|)
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
return|return
name|entries
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|MergeReviewIntoCommentMigration
operator|::
name|hasReviewField
argument_list|)
operator|.
name|filter
argument_list|(
name|MergeReviewIntoCommentMigration
operator|::
name|hasCommentField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|performConflictingMigration (ParserResult parserResult)
specifier|public
name|void
name|performConflictingMigration
parameter_list|(
name|ParserResult
name|parserResult
parameter_list|)
block|{
name|collectConflicts
argument_list|(
name|parserResult
argument_list|)
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
name|migrate
argument_list|(
name|entry
argument_list|,
name|parserResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|hasCommentField (BibEntry entry)
specifier|private
specifier|static
name|boolean
name|hasCommentField
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|COMMENT
argument_list|)
operator|.
name|isPresent
argument_list|()
return|;
block|}
DECL|method|hasReviewField (BibEntry entry)
specifier|private
specifier|static
name|boolean
name|hasReviewField
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|REVIEW
argument_list|)
operator|.
name|isPresent
argument_list|()
return|;
block|}
DECL|method|mergeCommentFieldIfPresent (BibEntry entry, String review)
specifier|private
name|String
name|mergeCommentFieldIfPresent
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|String
name|review
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|COMMENT
argument_list|)
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Both Comment and Review fields are present in %s! Merging them into the comment field."
argument_list|,
name|entry
operator|.
name|getAuthorTitleYear
argument_list|(
literal|150
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s\n%s:\n%s"
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|COMMENT
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Review"
argument_list|)
argument_list|,
name|review
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
return|return
name|review
return|;
block|}
DECL|method|migrate (BibEntry entry, ParserResult parserResult)
specifier|private
name|void
name|migrate
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|ParserResult
name|parserResult
parameter_list|)
block|{
if|if
condition|(
name|hasReviewField
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|updateFields
argument_list|(
name|entry
argument_list|,
name|mergeCommentFieldIfPresent
argument_list|(
name|entry
argument_list|,
name|entry
operator|.
name|getField
argument_list|(
name|StandardField
operator|.
name|REVIEW
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parserResult
operator|.
name|wasChangedOnMigration
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateFields (BibEntry entry, String review)
specifier|private
name|void
name|updateFields
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|String
name|review
parameter_list|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|COMMENT
argument_list|,
name|review
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
name|StandardField
operator|.
name|REVIEW
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

