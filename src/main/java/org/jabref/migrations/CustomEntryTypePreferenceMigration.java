begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.migrations
package|package
name|org
operator|.
name|jabref
operator|.
name|migrations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|customentrytypes
operator|.
name|CustomEntryTypesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|CustomEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_class
DECL|class|CustomEntryTypePreferenceMigration
class|class
name|CustomEntryTypePreferenceMigration
block|{
comment|//non-default preferences
DECL|field|CUSTOM_TYPE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_TYPE_NAME
init|=
literal|"customTypeName_"
decl_stmt|;
DECL|field|CUSTOM_TYPE_REQ
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_TYPE_REQ
init|=
literal|"customTypeReq_"
decl_stmt|;
DECL|field|CUSTOM_TYPE_OPT
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_TYPE_OPT
init|=
literal|"customTypeOpt_"
decl_stmt|;
DECL|field|CUSTOM_TYPE_PRIOPT
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_TYPE_PRIOPT
init|=
literal|"customTypePriOpt_"
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|static
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
DECL|method|CustomEntryTypePreferenceMigration ()
specifier|private
name|CustomEntryTypePreferenceMigration
parameter_list|()
block|{     }
DECL|method|upgradeStoredCustomEntryTypes (BibDatabaseMode defaultBibDatabaseMode)
specifier|static
name|void
name|upgradeStoredCustomEntryTypes
parameter_list|(
name|BibDatabaseMode
name|defaultBibDatabaseMode
parameter_list|)
block|{
name|List
argument_list|<
name|CustomEntryType
argument_list|>
name|storedOldTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|number
init|=
literal|0
decl_stmt|;
name|Optional
argument_list|<
name|CustomEntryType
argument_list|>
name|type
decl_stmt|;
while|while
condition|(
operator|(
name|type
operator|=
name|getCustomEntryType
argument_list|(
name|number
argument_list|)
operator|)
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
name|type
operator|.
name|get
argument_list|()
argument_list|,
name|defaultBibDatabaseMode
argument_list|)
expr_stmt|;
name|storedOldTypes
operator|.
name|add
argument_list|(
name|type
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|number
operator|++
expr_stmt|;
block|}
name|CustomEntryTypesManager
operator|.
name|saveCustomEntryTypes
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves all deprecated information about the entry type in preferences, with the tag given by number.      *      * (old implementation which has been copied)      */
DECL|method|getCustomEntryType (int number)
specifier|private
specifier|static
name|Optional
argument_list|<
name|CustomEntryType
argument_list|>
name|getCustomEntryType
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|String
name|nr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|number
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|prefs
operator|.
name|get
argument_list|(
name|CUSTOM_TYPE_NAME
operator|+
name|nr
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|req
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|CUSTOM_TYPE_REQ
operator|+
name|nr
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|opt
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|CUSTOM_TYPE_OPT
operator|+
name|nr
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|priOpt
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|CUSTOM_TYPE_PRIOPT
operator|+
name|nr
argument_list|)
decl_stmt|;
if|if
condition|(
name|priOpt
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|CustomEntryType
argument_list|(
name|StringUtil
operator|.
name|capitalizeFirst
argument_list|(
name|name
argument_list|)
argument_list|,
name|req
argument_list|,
name|opt
argument_list|)
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|secondary
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|opt
argument_list|)
decl_stmt|;
name|secondary
operator|.
name|removeAll
argument_list|(
name|priOpt
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|CustomEntryType
argument_list|(
name|StringUtil
operator|.
name|capitalizeFirst
argument_list|(
name|name
argument_list|)
argument_list|,
name|req
argument_list|,
name|priOpt
argument_list|,
name|secondary
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

