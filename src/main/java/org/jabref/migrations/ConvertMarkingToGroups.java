begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.migrations
package|package
name|org
operator|.
name|jabref
operator|.
name|migrations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|DefaultGroupsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|ExplicitGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupHierarchyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_comment
comment|/**  * Converts legacy explicit groups, where the group contained a list of assigned entries, to the new format,  * where the entry stores a list of groups it belongs to.  */
end_comment

begin_class
DECL|class|ConvertMarkingToGroups
specifier|public
class|class
name|ConvertMarkingToGroups
implements|implements
name|PostOpenMigration
block|{
DECL|field|MARKING_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|MARKING_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\[(.*):(\\d+)\\]"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|performMigration (ParserResult parserResult)
specifier|public
name|void
name|performMigration
parameter_list|(
name|ParserResult
name|parserResult
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|parserResult
argument_list|)
expr_stmt|;
name|ObservableList
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|parserResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|BibEntry
argument_list|>
name|markings
init|=
name|getMarkingWithEntries
argument_list|(
name|entries
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|markings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|GroupTreeNode
name|markingRoot
init|=
name|GroupTreeNode
operator|.
name|fromGroup
argument_list|(
operator|new
name|ExplicitGroup
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Markings"
argument_list|)
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|','
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|BibEntry
argument_list|>
argument_list|>
name|marking
range|:
name|markings
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|markingName
init|=
name|marking
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|markingMatchedEntries
init|=
name|marking
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|GroupTreeNode
name|markingGroup
init|=
name|markingRoot
operator|.
name|addSubgroup
argument_list|(
operator|new
name|ExplicitGroup
argument_list|(
name|markingName
argument_list|,
name|GroupHierarchyType
operator|.
name|INCLUDING
argument_list|,
literal|','
argument_list|)
argument_list|)
decl_stmt|;
name|markingGroup
operator|.
name|addEntriesToGroup
argument_list|(
name|markingMatchedEntries
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parserResult
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|parserResult
operator|.
name|getMetaData
argument_list|()
operator|.
name|setGroups
argument_list|(
name|GroupTreeNode
operator|.
name|fromGroup
argument_list|(
name|DefaultGroupsFactory
operator|.
name|getAllEntriesGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GroupTreeNode
name|root
init|=
name|parserResult
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|root
operator|.
name|addChild
argument_list|(
name|markingRoot
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|parserResult
operator|.
name|getMetaData
argument_list|()
operator|.
name|setGroups
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|clearMarkings
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Looks for markings (such as __markedentry = {[Nicolas:6]}) in the given list of entries.      */
DECL|method|getMarkingWithEntries (List<BibEntry> entries)
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|BibEntry
argument_list|>
name|getMarkingWithEntries
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|BibEntry
argument_list|>
name|markings
init|=
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|()
operator|.
name|linkedListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|marking
init|=
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|MARKED_INTERNAL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|marking
operator|.
name|isPresent
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Matcher
name|matcher
init|=
name|MARKING_PATTERN
operator|.
name|matcher
argument_list|(
name|marking
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|owner
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|number
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|markings
operator|.
name|put
argument_list|(
name|owner
operator|+
literal|":"
operator|+
name|number
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not in the expected format, so just add it to not loose information
name|markings
operator|.
name|put
argument_list|(
name|marking
operator|.
name|get
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|markings
return|;
block|}
DECL|method|clearMarkings (List<BibEntry> entries)
specifier|private
name|void
name|clearMarkings
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|entries
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|clearField
argument_list|(
name|FieldName
operator|.
name|MARKED_INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

