begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.migrations
package|package
name|org
operator|.
name|jabref
operator|.
name|migrations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefMain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|GlobalBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|PreferencesMigrations
specifier|public
class|class
name|PreferencesMigrations
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PreferencesMigrations
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|PreferencesMigrations ()
specifier|private
name|PreferencesMigrations
parameter_list|()
block|{     }
comment|/**      * Migrate all preferences from net/sf/jabref to org/jabref      */
DECL|method|upgradePrefsToOrgJabRef ()
specifier|public
specifier|static
name|void
name|upgradePrefsToOrgJabRef
parameter_list|()
block|{
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
name|Preferences
name|mainPrefsNode
init|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|JabRefMain
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|mainPrefsNode
operator|.
name|childrenNames
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
comment|// skip further processing as prefs already have been migrated
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"New prefs node already exists with content - skipping migration"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mainPrefsNode
operator|.
name|parent
argument_list|()
operator|.
name|parent
argument_list|()
operator|.
name|nodeExists
argument_list|(
literal|"net/sf/jabref"
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Migrating old preferences."
argument_list|)
expr_stmt|;
name|Preferences
name|oldNode
init|=
name|mainPrefsNode
operator|.
name|parent
argument_list|()
operator|.
name|parent
argument_list|()
operator|.
name|node
argument_list|(
literal|"net/sf/jabref"
argument_list|)
decl_stmt|;
name|copyPrefsRecursively
argument_list|(
name|oldNode
argument_list|,
name|mainPrefsNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Migrating old preferences failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copyPrefsRecursively (Preferences from, Preferences to)
specifier|private
specifier|static
name|void
name|copyPrefsRecursively
parameter_list|(
name|Preferences
name|from
parameter_list|,
name|Preferences
name|to
parameter_list|)
throws|throws
name|BackingStoreException
block|{
for|for
control|(
name|String
name|key
range|:
name|from
operator|.
name|keys
argument_list|()
control|)
block|{
name|String
name|newValue
init|=
name|from
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|newValue
operator|.
name|contains
argument_list|(
literal|"net.sf"
argument_list|)
condition|)
block|{
name|newValue
operator|=
name|newValue
operator|.
name|replaceAll
argument_list|(
literal|"net\\.sf"
argument_list|,
literal|"org"
argument_list|)
expr_stmt|;
block|}
name|to
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|child
range|:
name|from
operator|.
name|childrenNames
argument_list|()
control|)
block|{
name|Preferences
name|childNode
init|=
name|from
operator|.
name|node
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|Preferences
name|newChildNode
init|=
name|to
operator|.
name|node
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|copyPrefsRecursively
argument_list|(
name|childNode
argument_list|,
name|newChildNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Added from Jabref 2.11 beta 4 onwards to fix wrong encoding names      */
DECL|method|upgradeFaultyEncodingStrings ()
specifier|public
specifier|static
name|void
name|upgradeFaultyEncodingStrings
parameter_list|()
block|{
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
name|String
name|defaultEncoding
init|=
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultEncoding
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|encodingMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"UTF8"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"Cp1250"
argument_list|,
literal|"CP1250"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"Cp1251"
argument_list|,
literal|"CP1251"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"Cp1252"
argument_list|,
literal|"CP1252"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"Cp1253"
argument_list|,
literal|"CP1253"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"Cp1254"
argument_list|,
literal|"CP1254"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"Cp1257"
argument_list|,
literal|"CP1257"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"ISO8859_1"
argument_list|,
literal|"ISO8859-1"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"ISO8859_2"
argument_list|,
literal|"ISO8859-2"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"ISO8859_3"
argument_list|,
literal|"ISO8859-3"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"ISO8859_4"
argument_list|,
literal|"ISO8859-4"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"ISO8859_5"
argument_list|,
literal|"ISO8859-5"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"ISO8859_6"
argument_list|,
literal|"ISO8859-6"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"ISO8859_7"
argument_list|,
literal|"ISO8859-7"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"ISO8859_8"
argument_list|,
literal|"ISO8859-8"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"ISO8859_9"
argument_list|,
literal|"ISO8859-9"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"ISO8859_13"
argument_list|,
literal|"ISO8859-13"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"ISO8859_15"
argument_list|,
literal|"ISO8859-15"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"KOI8_R"
argument_list|,
literal|"KOI8-R"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"Big5_HKSCS"
argument_list|,
literal|"Big5-HKSCS"
argument_list|)
expr_stmt|;
name|encodingMap
operator|.
name|put
argument_list|(
literal|"EUC_JP"
argument_list|,
literal|"EUC-JP"
argument_list|)
expr_stmt|;
if|if
condition|(
name|encodingMap
operator|.
name|containsKey
argument_list|(
name|defaultEncoding
argument_list|)
condition|)
block|{
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_ENCODING
argument_list|,
name|encodingMap
operator|.
name|get
argument_list|(
name|defaultEncoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Upgrade the sort order preferences for the current version      * The old preference is kept in case an old version of JabRef is used with      * these preferences, but it is only used when the new preference does not      * exist      */
DECL|method|upgradeSortOrder ()
specifier|public
specifier|static
name|void
name|upgradeSortOrder
parameter_list|()
block|{
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
if|if
condition|(
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_IN_SPECIFIED_ORDER
argument_list|,
literal|null
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"exportInStandardOrder"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_IN_SPECIFIED_ORDER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_PRIMARY_SORT_FIELD
argument_list|,
name|FieldName
operator|.
name|AUTHOR
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_SECONDARY_SORT_FIELD
argument_list|,
name|FieldName
operator|.
name|EDITOR
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_TERTIARY_SORT_FIELD
argument_list|,
name|FieldName
operator|.
name|YEAR
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_PRIMARY_SORT_DESCENDING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_SECONDARY_SORT_DESCENDING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_TERTIARY_SORT_DESCENDING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
literal|"exportInTitleOrder"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// exportInTitleOrder => title, author, editor
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_IN_SPECIFIED_ORDER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_PRIMARY_SORT_FIELD
argument_list|,
name|FieldName
operator|.
name|TITLE
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_SECONDARY_SORT_FIELD
argument_list|,
name|FieldName
operator|.
name|AUTHOR
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_TERTIARY_SORT_FIELD
argument_list|,
name|FieldName
operator|.
name|EDITOR
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_PRIMARY_SORT_DESCENDING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_SECONDARY_SORT_DESCENDING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXPORT_TERTIARY_SORT_DESCENDING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Migrate all customized entry types from versions<=3.7      */
DECL|method|upgradeStoredCustomEntryTypes ()
specifier|public
specifier|static
name|void
name|upgradeStoredCustomEntryTypes
parameter_list|()
block|{
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
name|Preferences
name|mainPrefsNode
init|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|JabRefMain
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|mainPrefsNode
operator|.
name|nodeExists
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOMIZED_BIBTEX_TYPES
argument_list|)
operator|||
name|mainPrefsNode
operator|.
name|nodeExists
argument_list|(
name|JabRefPreferences
operator|.
name|CUSTOMIZED_BIBLATEX_TYPES
argument_list|)
condition|)
block|{
comment|// skip further processing as prefs already have been migrated
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Migrating old custom entry types."
argument_list|)
expr_stmt|;
name|CustomEntryTypePreferenceMigration
operator|.
name|upgradeStoredCustomEntryTypes
argument_list|(
name|prefs
operator|.
name|getDefaultBibDatabaseMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Migrating old custom entry types failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Migrate LabelPattern configuration from versions<=3.5 to new BibtexKeyPatterns      */
DECL|method|upgradeLabelPatternToBibtexKeyPattern ()
specifier|public
specifier|static
name|void
name|upgradeLabelPatternToBibtexKeyPattern
parameter_list|()
block|{
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
try|try
block|{
name|Preferences
name|mainPrefsNode
init|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|JabRefMain
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Migrate default pattern
if|if
condition|(
name|mainPrefsNode
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_BIBTEX_KEY_PATTERN
argument_list|,
literal|null
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// Check whether old defaultLabelPattern is set
name|String
name|oldDefault
init|=
name|mainPrefsNode
operator|.
name|get
argument_list|(
literal|"defaultLabelPattern"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDefault
operator|!=
literal|null
condition|)
block|{
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_BIBTEX_KEY_PATTERN
argument_list|,
name|oldDefault
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Upgraded old default key generator pattern '"
operator|+
name|oldDefault
operator|+
literal|"' to new version."
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Pref node already exists do not migrate from previous version
if|if
condition|(
name|mainPrefsNode
operator|.
name|nodeExists
argument_list|(
name|JabRefPreferences
operator|.
name|BIBTEX_KEY_PATTERNS_NODE
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Migrate type specific patterns
comment|// Check for prefs node for Version 3.3-3.5
if|if
condition|(
name|mainPrefsNode
operator|.
name|nodeExists
argument_list|(
literal|"logic/labelpattern"
argument_list|)
condition|)
block|{
name|migrateTypedKeyPrefs
argument_list|(
name|prefs
argument_list|,
name|mainPrefsNode
operator|.
name|node
argument_list|(
literal|"logic/labelpattern"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mainPrefsNode
operator|.
name|nodeExists
argument_list|(
literal|"logic/labelPattern"
argument_list|)
condition|)
block|{
comment|// node used for version 3.0-3.2
name|migrateTypedKeyPrefs
argument_list|(
name|prefs
argument_list|,
name|mainPrefsNode
operator|.
name|node
argument_list|(
literal|"logic/labelPattern"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mainPrefsNode
operator|.
name|nodeExists
argument_list|(
literal|"labelPattern"
argument_list|)
condition|)
block|{
comment|// node used for version<3.0
name|migrateTypedKeyPrefs
argument_list|(
name|prefs
argument_list|,
name|mainPrefsNode
operator|.
name|node
argument_list|(
literal|"labelPattern"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Migrating old bibtexKeyPatterns failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Migrate Import File Name and Directory name Patterns from versions<=4.0 to new BracketedPatterns      */
DECL|method|migrateFileImportPattern (String oldStylePattern, String newStylePattern, JabRefPreferences prefs, Preferences mainPrefsNode)
specifier|private
specifier|static
name|void
name|migrateFileImportPattern
parameter_list|(
name|String
name|oldStylePattern
parameter_list|,
name|String
name|newStylePattern
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|,
name|Preferences
name|mainPrefsNode
parameter_list|)
block|{
name|String
name|preferenceFileNamePattern
init|=
name|mainPrefsNode
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|IMPORT_FILENAMEPATTERN
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferenceFileNamePattern
operator|!=
literal|null
operator|&&
name|oldStylePattern
operator|.
name|equals
argument_list|(
name|preferenceFileNamePattern
argument_list|)
condition|)
block|{
comment|// Upgrade the old-style File Name pattern to new one:
name|mainPrefsNode
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|IMPORT_FILENAMEPATTERN
argument_list|,
name|newStylePattern
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"migrated old style "
operator|+
name|JabRefPreferences
operator|.
name|IMPORT_FILENAMEPATTERN
operator|+
literal|" value \""
operator|+
name|oldStylePattern
operator|+
literal|"\" to new value \""
operator|+
name|newStylePattern
operator|+
literal|"\" in the preference file"
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|hasKey
argument_list|(
name|JabRefPreferences
operator|.
name|IMPORT_FILENAMEPATTERN
argument_list|)
condition|)
block|{
comment|// Update also the key in the current application settings, if necessary:
name|String
name|fileNamePattern
init|=
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|IMPORT_FILENAMEPATTERN
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStylePattern
operator|.
name|equals
argument_list|(
name|fileNamePattern
argument_list|)
condition|)
block|{
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|IMPORT_FILENAMEPATTERN
argument_list|,
name|newStylePattern
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"migrated old style "
operator|+
name|JabRefPreferences
operator|.
name|IMPORT_FILENAMEPATTERN
operator|+
literal|" value \""
operator|+
name|oldStylePattern
operator|+
literal|"\" to new value \""
operator|+
name|newStylePattern
operator|+
literal|"\" in the running application"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|upgradeImportFileAndDirePatterns ()
specifier|public
specifier|static
name|void
name|upgradeImportFileAndDirePatterns
parameter_list|()
block|{
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
name|Preferences
name|mainPrefsNode
init|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|JabRefMain
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Migrate Import patterns
comment|// Check for prefs node for Version<= 4.0
if|if
condition|(
name|mainPrefsNode
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|IMPORT_FILENAMEPATTERN
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|oldStylePatterns
init|=
operator|new
name|String
index|[]
block|{
literal|"\\bibtexkey"
block|,
literal|"\\bibtexkey\\begin{title} - \\format[RemoveBrackets]{\\title}\\end{title}"
block|}
decl_stmt|;
name|String
index|[]
name|newStylePatterns
init|=
operator|new
name|String
index|[]
block|{
literal|"[bibtexkey]"
block|,
literal|"[bibtexkey] - [fulltitle]"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldStylePatterns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|migrateFileImportPattern
argument_list|(
name|oldStylePatterns
index|[
name|i
index|]
argument_list|,
name|newStylePatterns
index|[
name|i
index|]
argument_list|,
name|prefs
argument_list|,
name|mainPrefsNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Directory preferences are not yet migrated, since it is not quote clear how to parse and reinterpret
comment|// the user defined old-style patterns, and the default pattern is "".
block|}
DECL|method|upgradeKeyBindingsToJavaFX ()
specifier|public
specifier|static
name|void
name|upgradeKeyBindingsToJavaFX
parameter_list|()
block|{
name|UnaryOperator
argument_list|<
name|String
argument_list|>
name|replaceKeys
init|=
parameter_list|(
name|str
parameter_list|)
lambda|->
block|{
name|String
name|result
init|=
name|str
operator|.
name|replace
argument_list|(
literal|"ctrl "
argument_list|,
literal|"ctrl+"
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|"shift "
argument_list|,
literal|"shift+"
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|"alt "
argument_list|,
literal|"alt+"
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|"meta "
argument_list|,
literal|"meta+"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
decl_stmt|;
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|BINDINGS
argument_list|)
decl_stmt|;
name|keys
operator|.
name|replaceAll
argument_list|(
name|replaceKeys
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|BINDINGS
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
DECL|method|addCrossRefRelatedFieldsForAutoComplete ()
specifier|public
specifier|static
name|void
name|addCrossRefRelatedFieldsForAutoComplete
parameter_list|()
block|{
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
comment|//LinkedHashSet because we want to retain the order and add new fields to the end
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOCOMPLETER_COMPLETE_FIELDS
argument_list|)
argument_list|)
decl_stmt|;
name|keys
operator|.
name|add
argument_list|(
literal|"crossref"
argument_list|)
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
literal|"related"
argument_list|)
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
literal|"entryset"
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOCOMPLETER_COMPLETE_FIELDS
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|migrateTypedKeyPrefs (JabRefPreferences prefs, Preferences oldPatternPrefs)
specifier|private
specifier|static
name|void
name|migrateTypedKeyPrefs
parameter_list|(
name|JabRefPreferences
name|prefs
parameter_list|,
name|Preferences
name|oldPatternPrefs
parameter_list|)
throws|throws
name|BackingStoreException
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Found old Bibtex Key patterns which will be migrated to new version."
argument_list|)
expr_stmt|;
name|GlobalBibtexKeyPattern
name|keyPattern
init|=
name|GlobalBibtexKeyPattern
operator|.
name|fromPattern
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_BIBTEX_KEY_PATTERN
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|oldPatternPrefs
operator|.
name|keys
argument_list|()
control|)
block|{
name|keyPattern
operator|.
name|addBibtexKeyPattern
argument_list|(
name|key
argument_list|,
name|oldPatternPrefs
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|prefs
operator|.
name|putKeyPattern
argument_list|(
name|keyPattern
argument_list|)
expr_stmt|;
block|}
DECL|method|upgradeObsoleteLookAndFeels ()
specifier|public
specifier|static
name|void
name|upgradeObsoleteLookAndFeels
parameter_list|()
block|{
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
name|String
name|currentLandF
init|=
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WIN_LOOK_AND_FEEL
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"com.jgoodies.looks.windows.WindowsLookAndFeel"
operator|.
name|equals
argument_list|(
name|currentLandF
argument_list|)
operator|||
literal|"com.jgoodies.plaf.plastic.Plastic3DLookAndFeel"
operator|.
name|equals
argument_list|(
name|currentLandF
argument_list|)
condition|)
block|{
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
name|String
name|windowsLandF
init|=
literal|"com.sun.java.swing.plaf.windows.WindowsLookAndFeel"
decl_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|WIN_LOOK_AND_FEEL
argument_list|,
name|windowsLandF
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Switched from obsolete look and feel "
operator|+
name|currentLandF
operator|+
literal|" to "
operator|+
name|windowsLandF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|nimbusLandF
init|=
literal|"javax.swing.plaf.nimbus.NimbusLookAndFeel"
decl_stmt|;
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|WIN_LOOK_AND_FEEL
argument_list|,
name|nimbusLandF
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Switched from obsolete look and feel "
operator|+
name|currentLandF
operator|+
literal|" to "
operator|+
name|nimbusLandF
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

