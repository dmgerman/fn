begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.groups
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|Author
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|AuthorList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|OptionalUtil
import|;
end_import

begin_class
DECL|class|AutomaticPersonsGroup
specifier|public
class|class
name|AutomaticPersonsGroup
extends|extends
name|AutomaticGroup
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|method|AutomaticPersonsGroup (String name, GroupHierarchyType context, String field)
specifier|public
name|AutomaticPersonsGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|GroupHierarchyType
name|context
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|AutomaticPersonsGroup
name|that
init|=
operator|(
name|AutomaticPersonsGroup
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|field
argument_list|,
name|that
operator|.
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deepCopy ()
specifier|public
name|AbstractGroup
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|AutomaticPersonsGroup
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createSubgroups (BibEntry entry)
specifier|public
name|Set
argument_list|<
name|GroupTreeNode
argument_list|>
name|createSubgroups
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|Optional
argument_list|<
name|AuthorList
argument_list|>
name|authorList
init|=
name|entry
operator|.
name|getLatexFreeField
argument_list|(
name|field
argument_list|)
operator|.
name|map
argument_list|(
name|AuthorList
operator|::
name|parse
argument_list|)
decl_stmt|;
return|return
name|OptionalUtil
operator|.
name|flatMap
argument_list|(
name|authorList
argument_list|,
name|AuthorList
operator|::
name|getAuthors
argument_list|)
operator|.
name|map
argument_list|(
name|Author
operator|::
name|getLast
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
operator|.
name|filter
argument_list|(
name|lastName
lambda|->
operator|!
name|lastName
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|lastName
lambda|->
operator|new
name|WordKeywordGroup
argument_list|(
name|lastName
argument_list|,
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|,
name|field
argument_list|,
name|lastName
argument_list|,
literal|true
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|GroupTreeNode
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getField ()
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
block|}
end_class

end_unit

