begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.groups
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|KeywordList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_comment
comment|/**  * Matches entries if a given field contains a specified word.  */
end_comment

begin_class
DECL|class|WordKeywordGroup
specifier|public
class|class
name|WordKeywordGroup
extends|extends
name|KeywordGroup
implements|implements
name|GroupEntryChanger
block|{
DECL|field|keywordSeparator
specifier|protected
specifier|final
name|Character
name|keywordSeparator
decl_stmt|;
DECL|field|searchWords
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|searchWords
decl_stmt|;
DECL|field|onlySplitWordsAtSeparator
specifier|private
specifier|final
name|boolean
name|onlySplitWordsAtSeparator
decl_stmt|;
DECL|method|WordKeywordGroup (String name, GroupHierarchyType context, String searchField, String searchExpression, boolean caseSensitive, Character keywordSeparator, boolean onlySplitWordsAtSeparator)
specifier|public
name|WordKeywordGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|GroupHierarchyType
name|context
parameter_list|,
name|String
name|searchField
parameter_list|,
name|String
name|searchExpression
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|,
name|Character
name|keywordSeparator
parameter_list|,
name|boolean
name|onlySplitWordsAtSeparator
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|searchField
argument_list|,
name|searchExpression
argument_list|,
name|caseSensitive
argument_list|)
expr_stmt|;
name|this
operator|.
name|keywordSeparator
operator|=
name|keywordSeparator
expr_stmt|;
name|this
operator|.
name|onlySplitWordsAtSeparator
operator|=
name|onlySplitWordsAtSeparator
expr_stmt|;
name|this
operator|.
name|searchWords
operator|=
name|getSearchWords
argument_list|(
name|searchExpression
argument_list|)
expr_stmt|;
block|}
DECL|method|containsCaseInsensitive (Set<String> searchIn, Collection<String> searchFor)
specifier|private
specifier|static
name|boolean
name|containsCaseInsensitive
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|searchIn
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|searchFor
parameter_list|)
block|{
for|for
control|(
name|String
name|searchWord
range|:
name|searchFor
control|)
block|{
if|if
condition|(
operator|!
name|containsCaseInsensitive
argument_list|(
name|searchIn
argument_list|,
name|searchWord
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|containsCaseInsensitive (Set<String> searchIn, String searchFor)
specifier|private
specifier|static
name|boolean
name|containsCaseInsensitive
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|searchIn
parameter_list|,
name|String
name|searchFor
parameter_list|)
block|{
for|for
control|(
name|String
name|word
range|:
name|searchIn
control|)
block|{
if|if
condition|(
name|word
operator|.
name|equalsIgnoreCase
argument_list|(
name|searchFor
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|add (Collection<BibEntry> entriesToAdd)
specifier|public
name|List
argument_list|<
name|FieldChange
argument_list|>
name|add
parameter_list|(
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entriesToAdd
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entriesToAdd
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|entriesToAdd
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|String
name|oldContent
init|=
name|entry
operator|.
name|getField
argument_list|(
name|searchField
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|KeywordList
name|wordlist
init|=
name|KeywordList
operator|.
name|parse
argument_list|(
name|oldContent
argument_list|,
name|keywordSeparator
argument_list|)
decl_stmt|;
name|wordlist
operator|.
name|add
argument_list|(
name|searchExpression
argument_list|)
expr_stmt|;
name|String
name|newContent
init|=
name|wordlist
operator|.
name|getAsString
argument_list|(
name|keywordSeparator
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|searchField
argument_list|,
name|newContent
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|changes
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|changes
return|;
block|}
annotation|@
name|Override
DECL|method|remove (List<BibEntry> entriesToRemove)
specifier|public
name|List
argument_list|<
name|FieldChange
argument_list|>
name|remove
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entriesToRemove
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entriesToRemove
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|entriesToRemove
argument_list|)
control|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|String
name|oldContent
init|=
name|entry
operator|.
name|getField
argument_list|(
name|searchField
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|KeywordList
name|wordlist
init|=
name|KeywordList
operator|.
name|parse
argument_list|(
name|oldContent
argument_list|,
name|keywordSeparator
argument_list|)
decl_stmt|;
name|wordlist
operator|.
name|remove
argument_list|(
name|searchExpression
argument_list|)
expr_stmt|;
name|String
name|newContent
init|=
name|wordlist
operator|.
name|getAsString
argument_list|(
name|keywordSeparator
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|searchField
argument_list|,
name|newContent
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|changes
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|changes
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|WordKeywordGroup
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|WordKeywordGroup
name|other
init|=
operator|(
name|WordKeywordGroup
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|,
name|other
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|getHierarchicalContext
argument_list|()
argument_list|,
name|other
operator|.
name|getHierarchicalContext
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|searchField
argument_list|,
name|other
operator|.
name|searchField
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|searchExpression
argument_list|,
name|other
operator|.
name|searchExpression
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|caseSensitive
argument_list|,
name|other
operator|.
name|caseSensitive
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|keywordSeparator
argument_list|,
name|other
operator|.
name|keywordSeparator
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|onlySplitWordsAtSeparator
argument_list|,
name|other
operator|.
name|onlySplitWordsAtSeparator
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains (BibEntry entry)
specifier|public
name|boolean
name|contains
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|content
init|=
name|getFieldContentAsWords
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|caseSensitive
condition|)
block|{
return|return
name|content
operator|.
name|containsAll
argument_list|(
name|searchWords
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|containsCaseInsensitive
argument_list|(
name|content
argument_list|,
name|searchWords
argument_list|)
return|;
block|}
block|}
DECL|method|getFieldContentAsWords (BibEntry entry)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getFieldContentAsWords
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|onlySplitWordsAtSeparator
condition|)
block|{
if|if
condition|(
name|BibEntry
operator|.
name|TYPE_HEADER
operator|.
name|equals
argument_list|(
name|searchField
argument_list|)
condition|)
block|{
name|Optional
argument_list|<
name|EntryType
argument_list|>
name|entryType
init|=
name|EntryTypes
operator|.
name|getType
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryType
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|searchWords
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|sw
lambda|->
name|entryType
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|sw
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|entry
operator|.
name|getField
argument_list|(
name|searchField
argument_list|)
operator|.
name|map
argument_list|(
name|content
lambda|->
name|KeywordList
operator|.
name|parse
argument_list|(
name|content
argument_list|,
name|keywordSeparator
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|entry
operator|.
name|getFieldAsWords
argument_list|(
name|searchField
argument_list|)
return|;
block|}
block|}
DECL|method|getSearchWords (String searchExpression)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getSearchWords
parameter_list|(
name|String
name|searchExpression
parameter_list|)
block|{
if|if
condition|(
name|onlySplitWordsAtSeparator
condition|)
block|{
return|return
name|KeywordList
operator|.
name|parse
argument_list|(
name|searchExpression
argument_list|,
name|keywordSeparator
argument_list|)
operator|.
name|toStringList
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|StringUtil
operator|.
name|getStringAsWords
argument_list|(
name|searchExpression
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|deepCopy ()
specifier|public
name|AbstractGroup
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|WordKeywordGroup
argument_list|(
name|getName
argument_list|()
argument_list|,
name|getHierarchicalContext
argument_list|()
argument_list|,
name|searchField
argument_list|,
name|searchExpression
argument_list|,
name|caseSensitive
argument_list|,
name|keywordSeparator
argument_list|,
name|onlySplitWordsAtSeparator
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|getName
argument_list|()
argument_list|,
name|getHierarchicalContext
argument_list|()
argument_list|,
name|searchField
argument_list|,
name|searchExpression
argument_list|,
name|caseSensitive
argument_list|,
name|keywordSeparator
argument_list|,
name|onlySplitWordsAtSeparator
argument_list|)
return|;
block|}
block|}
end_class

end_unit

