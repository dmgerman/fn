begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.cleanup
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_class
DECL|class|FieldFormatterCleanups
specifier|public
class|class
name|FieldFormatterCleanups
block|{
DECL|field|ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|ENABLED
init|=
literal|"enabled"
decl_stmt|;
DECL|field|DISABLED
specifier|public
specifier|static
specifier|final
name|String
name|DISABLED
init|=
literal|"disabled"
decl_stmt|;
DECL|field|actions
specifier|private
specifier|final
name|List
argument_list|<
name|FieldFormatterCleanup
argument_list|>
name|actions
decl_stmt|;
DECL|field|enabled
specifier|private
specifier|final
name|boolean
name|enabled
decl_stmt|;
DECL|method|FieldFormatterCleanups (boolean enabled, List<FieldFormatterCleanup> actions)
specifier|public
name|FieldFormatterCleanups
parameter_list|(
name|boolean
name|enabled
parameter_list|,
name|List
argument_list|<
name|FieldFormatterCleanup
argument_list|>
name|actions
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
name|this
operator|.
name|actions
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|actions
argument_list|)
expr_stmt|;
block|}
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
DECL|method|getConfiguredActions ()
specifier|public
name|List
argument_list|<
name|FieldFormatterCleanup
argument_list|>
name|getConfiguredActions
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|actions
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|(
name|o
operator|==
literal|null
operator|)
operator|||
operator|(
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FieldFormatterCleanups
name|that
init|=
operator|(
name|FieldFormatterCleanups
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|enabled
operator|!=
name|that
operator|.
name|enabled
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|actions
operator|.
name|equals
argument_list|(
name|that
operator|.
name|actions
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|actions
argument_list|,
name|enabled
argument_list|)
return|;
block|}
DECL|method|applySaveActions (BibEntry entry)
specifier|public
name|List
argument_list|<
name|FieldChange
argument_list|>
name|applySaveActions
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
return|return
name|applyAllActions
argument_list|(
name|entry
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
block|}
DECL|method|applyAllActions (BibEntry entry)
specifier|private
name|List
argument_list|<
name|FieldChange
argument_list|>
name|applyAllActions
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|List
argument_list|<
name|FieldChange
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldFormatterCleanup
name|action
range|:
name|actions
control|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|action
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getAsStringList (String newline)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAsStringList
parameter_list|(
name|String
name|newline
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|stringRepresentation
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|stringRepresentation
operator|.
name|add
argument_list|(
name|ENABLED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stringRepresentation
operator|.
name|add
argument_list|(
name|DISABLED
argument_list|)
expr_stmt|;
block|}
name|String
name|formatterString
init|=
name|getMetaDataString
argument_list|(
name|actions
argument_list|,
name|newline
argument_list|)
decl_stmt|;
name|stringRepresentation
operator|.
name|add
argument_list|(
name|formatterString
argument_list|)
expr_stmt|;
return|return
name|stringRepresentation
return|;
block|}
DECL|method|getMetaDataString (List<FieldFormatterCleanup> actionList, String newline)
specifier|private
specifier|static
name|String
name|getMetaDataString
parameter_list|(
name|List
argument_list|<
name|FieldFormatterCleanup
argument_list|>
name|actionList
parameter_list|,
name|String
name|newline
parameter_list|)
block|{
comment|//first, group all formatters by the field for which they apply
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|groupedByField
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldFormatterCleanup
name|cleanup
range|:
name|actionList
control|)
block|{
name|String
name|key
init|=
name|cleanup
operator|.
name|getField
argument_list|()
decl_stmt|;
comment|// add new list into the hashmap if needed
if|if
condition|(
operator|!
name|groupedByField
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|groupedByField
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//add the formatter to the map if it is not already there
name|List
argument_list|<
name|String
argument_list|>
name|formattersForKey
init|=
name|groupedByField
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|formattersForKey
operator|.
name|contains
argument_list|(
name|cleanup
operator|.
name|getFormatter
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|formattersForKey
operator|.
name|add
argument_list|(
name|cleanup
operator|.
name|getFormatter
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// convert the contents of the hashmap into the correct serialization
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|groupedByField
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|StringJoiner
name|joiner
init|=
operator|new
name|StringJoiner
argument_list|(
literal|","
argument_list|,
literal|"["
argument_list|,
literal|"]"
operator|+
name|newline
argument_list|)
decl_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|forEach
argument_list|(
name|joiner
operator|::
name|add
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|joiner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

