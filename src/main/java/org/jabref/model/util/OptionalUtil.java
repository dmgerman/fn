begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.util
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_class
DECL|class|OptionalUtil
specifier|public
class|class
name|OptionalUtil
block|{
DECL|method|toList (Optional<T> value)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|toList
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/**      * No longer needed in Java 9 where {@code Optional<T>.stream()} is added.      */
DECL|method|toStream (Optional<T> value)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Stream
argument_list|<
name|T
argument_list|>
name|toStream
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Stream
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
annotation|@
name|SafeVarargs
DECL|method|toList (Optional<T>.... values)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|toList
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
modifier|...
name|values
parameter_list|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|values
argument_list|)
operator|.
name|flatMap
argument_list|(
name|optional
lambda|->
name|toList
argument_list|(
name|optional
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|flatMapFromStream (Optional<T> value, Function<? super T, ? extends Stream<? extends R>> mapper)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
name|Stream
argument_list|<
name|R
argument_list|>
name|flatMapFromStream
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
name|value
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|Stream
argument_list|<
name|?
extends|extends
name|R
argument_list|>
argument_list|>
name|mapper
parameter_list|)
block|{
return|return
name|toStream
argument_list|(
name|value
argument_list|)
operator|.
name|flatMap
argument_list|(
name|mapper
argument_list|)
return|;
block|}
DECL|method|flatMap (Optional<T> value, Function<? super T, ? extends Collection<? extends R>> mapper)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
name|Stream
argument_list|<
name|R
argument_list|>
name|flatMap
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
name|value
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
extends|extends
name|R
argument_list|>
argument_list|>
name|mapper
parameter_list|)
block|{
return|return
name|toStream
argument_list|(
name|value
argument_list|)
operator|.
name|flatMap
argument_list|(
name|element
lambda|->
name|mapper
operator|.
name|apply
argument_list|(
name|element
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isPresentAnd (Optional<T> value, Predicate<T> check)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Boolean
name|isPresentAnd
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
name|value
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|check
parameter_list|)
block|{
return|return
name|value
operator|.
name|isPresent
argument_list|()
operator|&&
name|check
operator|.
name|test
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isPresentAndTrue (Optional<Boolean> value)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Boolean
name|isPresentAndTrue
parameter_list|(
name|Optional
argument_list|<
name|Boolean
argument_list|>
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|isPresent
argument_list|()
operator|&&
name|value
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|combine (Optional<T> valueOne, Optional<S> valueTwo, BiFunction<T, S, R> combine)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|S
parameter_list|,
name|R
parameter_list|>
name|Optional
argument_list|<
name|R
argument_list|>
name|combine
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
name|valueOne
parameter_list|,
name|Optional
argument_list|<
name|S
argument_list|>
name|valueTwo
parameter_list|,
name|BiFunction
argument_list|<
name|T
argument_list|,
name|S
argument_list|,
name|R
argument_list|>
name|combine
parameter_list|)
block|{
if|if
condition|(
name|valueOne
operator|.
name|isPresent
argument_list|()
operator|&&
name|valueTwo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|combine
operator|.
name|apply
argument_list|(
name|valueOne
operator|.
name|get
argument_list|()
argument_list|,
name|valueTwo
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
DECL|method|orElse (Optional<T> valueOne, Optional<T> valueTwo)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|orElse
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
name|valueOne
parameter_list|,
name|Optional
argument_list|<
name|T
argument_list|>
name|valueTwo
parameter_list|)
block|{
if|if
condition|(
name|valueOne
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|valueOne
return|;
block|}
else|else
block|{
return|return
name|valueTwo
return|;
block|}
block|}
block|}
end_class

end_unit

