begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.util
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiPredicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BinaryOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|TreeNode
import|;
end_import

begin_comment
comment|/**  * Merges a list of nodes into a tree.  * Nodes with a common parent are added as direct children.  * For example, the list { A> A1, A> A2, B } is transformed into the forest { A> A1, A2, B}.  */
end_comment

begin_class
DECL|class|TreeCollector
specifier|public
class|class
name|TreeCollector
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Collector
argument_list|<
name|T
argument_list|,
name|ObservableList
argument_list|<
name|T
argument_list|>
argument_list|,
name|ObservableList
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
DECL|field|getChildren
specifier|private
name|Function
argument_list|<
name|T
argument_list|,
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|getChildren
decl_stmt|;
DECL|field|addChild
specifier|private
name|BiConsumer
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|addChild
decl_stmt|;
DECL|field|equivalence
specifier|private
name|BiPredicate
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|equivalence
decl_stmt|;
comment|/**      * @param getChildren a function that returns a list of children of the specified node      * @param addChild    a function that adds the second argument as a child to the first-specified node      * @param equivalence a function that tells us whether two nodes are equivalent      */
DECL|method|TreeCollector (Function<T, List<T>> getChildren, BiConsumer<T, T> addChild, BiPredicate<T, T> equivalence)
specifier|private
name|TreeCollector
parameter_list|(
name|Function
argument_list|<
name|T
argument_list|,
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|getChildren
parameter_list|,
name|BiConsumer
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|addChild
parameter_list|,
name|BiPredicate
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|equivalence
parameter_list|)
block|{
name|this
operator|.
name|getChildren
operator|=
name|getChildren
expr_stmt|;
name|this
operator|.
name|addChild
operator|=
name|addChild
expr_stmt|;
name|this
operator|.
name|equivalence
operator|=
name|equivalence
expr_stmt|;
block|}
DECL|method|mergeIntoTree (BiPredicate<T, T> equivalence)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|TreeNode
argument_list|<
name|T
argument_list|>
parameter_list|>
name|TreeCollector
argument_list|<
name|T
argument_list|>
name|mergeIntoTree
parameter_list|(
name|BiPredicate
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|equivalence
parameter_list|)
block|{
return|return
operator|new
name|TreeCollector
argument_list|<
name|T
argument_list|>
argument_list|(
name|TreeNode
operator|::
name|getChildren
argument_list|,
parameter_list|(
name|parent
parameter_list|,
name|child
parameter_list|)
lambda|->
name|child
operator|.
name|moveTo
argument_list|(
name|parent
argument_list|)
argument_list|,
name|equivalence
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|supplier ()
specifier|public
name|Supplier
argument_list|<
name|ObservableList
argument_list|<
name|T
argument_list|>
argument_list|>
name|supplier
parameter_list|()
block|{
return|return
name|FXCollections
operator|::
name|observableArrayList
return|;
block|}
annotation|@
name|Override
DECL|method|accumulator ()
specifier|public
name|BiConsumer
argument_list|<
name|ObservableList
argument_list|<
name|T
argument_list|>
argument_list|,
name|T
argument_list|>
name|accumulator
parameter_list|()
block|{
return|return
parameter_list|(
name|alreadyProcessed
parameter_list|,
name|newItem
parameter_list|)
lambda|->
block|{
comment|// Check if the node is already in the tree
name|Optional
argument_list|<
name|T
argument_list|>
name|sameItemInTree
init|=
name|alreadyProcessed
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|item
lambda|->
name|equivalence
operator|.
name|test
argument_list|(
name|item
argument_list|,
name|newItem
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|sameItemInTree
operator|.
name|isPresent
argument_list|()
condition|)
block|{
for|for
control|(
name|T
name|child
range|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getChildren
operator|.
name|apply
argument_list|(
name|newItem
argument_list|)
argument_list|)
control|)
block|{
name|merge
argument_list|(
name|sameItemInTree
operator|.
name|get
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|alreadyProcessed
operator|.
name|add
argument_list|(
name|newItem
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|merge (T target, T node)
specifier|private
name|void
name|merge
parameter_list|(
name|T
name|target
parameter_list|,
name|T
name|node
parameter_list|)
block|{
name|Optional
argument_list|<
name|T
argument_list|>
name|sameItemInTree
init|=
name|getChildren
operator|.
name|apply
argument_list|(
name|target
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|item
lambda|->
name|equivalence
operator|.
name|test
argument_list|(
name|item
argument_list|,
name|node
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|sameItemInTree
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// We need to copy the list because the #addChild method might remove the child from its own parent
for|for
control|(
name|T
name|child
range|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getChildren
operator|.
name|apply
argument_list|(
name|node
argument_list|)
argument_list|)
control|)
block|{
name|merge
argument_list|(
name|sameItemInTree
operator|.
name|get
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|addChild
operator|.
name|accept
argument_list|(
name|target
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|combiner ()
specifier|public
name|BinaryOperator
argument_list|<
name|ObservableList
argument_list|<
name|T
argument_list|>
argument_list|>
name|combiner
parameter_list|()
block|{
return|return
parameter_list|(
name|list1
parameter_list|,
name|list2
parameter_list|)
lambda|->
block|{
for|for
control|(
name|T
name|item
range|:
name|list2
control|)
block|{
name|accumulator
argument_list|()
operator|.
name|accept
argument_list|(
name|list1
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|list1
return|;
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|finisher ()
specifier|public
name|Function
argument_list|<
name|ObservableList
argument_list|<
name|T
argument_list|>
argument_list|,
name|ObservableList
argument_list|<
name|T
argument_list|>
argument_list|>
name|finisher
parameter_list|()
block|{
return|return
name|i
lambda|->
name|i
return|;
block|}
annotation|@
name|Override
DECL|method|characteristics ()
specifier|public
name|Set
argument_list|<
name|Characteristics
argument_list|>
name|characteristics
parameter_list|()
block|{
return|return
name|EnumSet
operator|.
name|of
argument_list|(
name|Characteristics
operator|.
name|UNORDERED
argument_list|,
name|Characteristics
operator|.
name|IDENTITY_FINISH
argument_list|)
return|;
block|}
block|}
end_class

end_unit

