begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.pdf
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_comment
comment|/**  * Our representation of the type of the FileAnnotation. This is needed as some FileAnnotationTypes require special  * handling (e.g., Highlight or Underline), because of the linked FileAnnotations.  */
end_comment

begin_enum
DECL|enum|FileAnnotationType
specifier|public
enum|enum
name|FileAnnotationType
block|{
DECL|enumConstant|TEXT
name|TEXT
argument_list|(
literal|"Text"
argument_list|)
block|,
DECL|enumConstant|HIGHLIGHT
name|HIGHLIGHT
argument_list|(
literal|"Highlight"
argument_list|)
block|,
DECL|enumConstant|UNDERLINE
name|UNDERLINE
argument_list|(
literal|"Underline"
argument_list|)
block|,
DECL|enumConstant|POLYGON
name|POLYGON
argument_list|(
literal|"Polygon"
argument_list|)
block|,
DECL|enumConstant|POPUP
name|POPUP
argument_list|(
literal|"Popup"
argument_list|)
block|,
DECL|enumConstant|LINE
name|LINE
argument_list|(
literal|"Line"
argument_list|)
block|,
DECL|enumConstant|CIRCLE
name|CIRCLE
argument_list|(
literal|"Circle"
argument_list|)
block|,
DECL|enumConstant|FREETEXT
name|FREETEXT
argument_list|(
literal|"FreeText"
argument_list|)
block|,
DECL|enumConstant|STRIKEOUT
name|STRIKEOUT
argument_list|(
literal|"Strikeout"
argument_list|)
block|,
DECL|enumConstant|LINK
name|LINK
argument_list|(
literal|"Link"
argument_list|)
block|,
DECL|enumConstant|UNKNOWN
name|UNKNOWN
argument_list|(
literal|"Unknown"
argument_list|)
block|,
DECL|enumConstant|NONE
name|NONE
argument_list|(
literal|"None"
argument_list|)
block|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileAnnotationType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|FileAnnotationType (String name)
name|FileAnnotationType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Determines the FileAnnotationType of a raw PDAnnotation. Returns 'UNKNOWN' if the type is currently not in our      * list of FileAnnotationTypes.      *      * @param annotation the raw PDAnnotation      * @return The determined FileAnnotationType      */
DECL|method|parse (PDAnnotation annotation)
specifier|public
specifier|static
name|FileAnnotationType
name|parse
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
block|{
try|try
block|{
return|return
name|FileAnnotationType
operator|.
name|valueOf
argument_list|(
name|annotation
operator|.
name|getSubtype
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"FileAnnotationType %s is not supported and was converted into 'Unknown'!"
argument_list|,
name|annotation
operator|.
name|getSubtype
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|UNKNOWN
return|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
block|}
end_enum

end_unit

