begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry.identifier
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|identifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|ISSN
specifier|public
class|class
name|ISSN
block|{
DECL|field|ISSN_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|ISSN_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\d{4}-\\d{3}[\\dxX]$"
argument_list|)
decl_stmt|;
DECL|field|ISSN_PATTERN_NODASH
specifier|private
specifier|static
specifier|final
name|Pattern
name|ISSN_PATTERN_NODASH
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d{4})(\\d{3}[\\dxX])$"
argument_list|)
decl_stmt|;
DECL|field|issnString
specifier|private
specifier|final
name|String
name|issnString
decl_stmt|;
DECL|method|ISSN (String issnString)
specifier|public
name|ISSN
parameter_list|(
name|String
name|issnString
parameter_list|)
block|{
name|this
operator|.
name|issnString
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|issnString
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
DECL|method|isValidFormat ()
specifier|public
name|boolean
name|isValidFormat
parameter_list|()
block|{
name|Matcher
name|issnMatcher
init|=
name|ISSN_PATTERN
operator|.
name|matcher
argument_list|(
name|issnString
argument_list|)
decl_stmt|;
return|return
operator|(
name|issnMatcher
operator|.
name|matches
argument_list|()
operator|)
return|;
block|}
DECL|method|isCanBeCleaned ()
specifier|public
name|boolean
name|isCanBeCleaned
parameter_list|()
block|{
name|Matcher
name|issnNoDashMatcher
init|=
name|ISSN_PATTERN_NODASH
operator|.
name|matcher
argument_list|(
name|issnString
argument_list|)
decl_stmt|;
return|return
operator|(
name|issnNoDashMatcher
operator|.
name|matches
argument_list|()
operator|)
return|;
block|}
DECL|method|getCleanedISSN ()
specifier|public
name|String
name|getCleanedISSN
parameter_list|()
block|{
name|Matcher
name|issnNoDashMatcher
init|=
name|ISSN_PATTERN_NODASH
operator|.
name|matcher
argument_list|(
name|issnString
argument_list|)
decl_stmt|;
if|if
condition|(
name|issnNoDashMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|issnNoDashMatcher
operator|.
name|replaceFirst
argument_list|(
literal|"$1-$2"
argument_list|)
return|;
block|}
return|return
name|issnString
return|;
block|}
DECL|method|isValidChecksum ()
specifier|public
name|boolean
name|isValidChecksum
parameter_list|()
block|{
comment|// Check that the control digit is correct, see e.g. https://en.wikipedia.org/wiki/International_Standard_Serial_Number
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<=
literal|7
condition|;
name|pos
operator|++
control|)
block|{
name|char
name|c
init|=
name|issnString
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
literal|4
condition|)
block|{
name|sum
operator|+=
operator|(
name|c
operator|-
literal|'0'
operator|)
operator|*
operator|(
operator|(
literal|8
operator|-
name|pos
operator|)
operator|+
operator|(
name|pos
operator|>
literal|4
condition|?
literal|1
else|:
literal|0
operator|)
operator|)
expr_stmt|;
block|}
block|}
name|char
name|control
init|=
name|issnString
operator|.
name|charAt
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|control
operator|==
literal|'x'
operator|)
operator|||
operator|(
name|control
operator|==
literal|'X'
operator|)
condition|)
block|{
name|control
operator|=
literal|'9'
operator|+
literal|1
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
operator|(
operator|(
name|sum
operator|%
literal|11
operator|)
operator|+
name|control
operator|)
operator|-
literal|'0'
operator|)
operator|==
literal|11
operator|)
operator|||
operator|(
operator|(
name|sum
operator|%
literal|11
operator|)
operator|==
literal|0
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

