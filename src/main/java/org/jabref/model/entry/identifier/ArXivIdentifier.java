begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry.identifier
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|identifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_comment
comment|/**  * Identifier for the arXiv. See https://arxiv.org/help/arxiv_identifier  */
end_comment

begin_class
DECL|class|ArXivIdentifier
specifier|public
class|class
name|ArXivIdentifier
implements|implements
name|Identifier
block|{
DECL|field|identifier
specifier|private
specifier|final
name|String
name|identifier
decl_stmt|;
DECL|field|classification
specifier|private
specifier|final
name|String
name|classification
decl_stmt|;
DECL|method|ArXivIdentifier (String identifier)
name|ArXivIdentifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|this
argument_list|(
name|identifier
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|ArXivIdentifier (String identifier, String classification)
name|ArXivIdentifier
parameter_list|(
name|String
name|identifier
parameter_list|,
name|String
name|classification
parameter_list|)
block|{
name|this
operator|.
name|identifier
operator|=
name|identifier
operator|.
name|trim
argument_list|()
expr_stmt|;
name|this
operator|.
name|classification
operator|=
name|classification
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
DECL|method|parse (String value)
specifier|public
specifier|static
name|Optional
argument_list|<
name|ArXivIdentifier
argument_list|>
name|parse
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Pattern
name|identifierPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(arxiv|arXiv)?\\s?:?\\s?(?<id>\\d{4}.\\d{4,5}(v\\d+)?)\\s?(\\[(?<classification>\\S+)\\])?"
argument_list|)
decl_stmt|;
name|Matcher
name|identifierMatcher
init|=
name|identifierPattern
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|identifierMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|identifierMatcher
operator|.
name|group
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|classification
init|=
name|identifierMatcher
operator|.
name|group
argument_list|(
literal|"classification"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classification
operator|==
literal|null
condition|)
block|{
name|classification
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|ArXivIdentifier
argument_list|(
name|id
argument_list|,
name|classification
argument_list|)
argument_list|)
return|;
block|}
name|Pattern
name|oldIdentifierPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(arxiv|arXiv)?\\s?:?\\s?(?<id>(?<classification>[a-z\\-]+(\\.[A-Z]{2})?)/\\d{7})"
argument_list|)
decl_stmt|;
name|Matcher
name|oldIdentifierMatcher
init|=
name|oldIdentifierPattern
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldIdentifierMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|oldIdentifierMatcher
operator|.
name|group
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|classification
init|=
name|oldIdentifierMatcher
operator|.
name|group
argument_list|(
literal|"classification"
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|ArXivIdentifier
argument_list|(
name|id
argument_list|,
name|classification
argument_list|)
argument_list|)
return|;
block|}
name|Pattern
name|urlPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(http://arxiv.org/abs/)(?<id>\\S+)"
argument_list|)
decl_stmt|;
name|Matcher
name|urlMatcher
init|=
name|urlPattern
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|urlMatcher
operator|.
name|group
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|ArXivIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|getClassification ()
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getClassification
parameter_list|()
block|{
if|if
condition|(
name|classification
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|classification
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ArXivIdentifier{"
operator|+
literal|"identifier='"
operator|+
name|identifier
operator|+
literal|'\''
operator|+
literal|", classification='"
operator|+
name|classification
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ArXivIdentifier
name|that
init|=
operator|(
name|ArXivIdentifier
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|identifier
argument_list|,
name|that
operator|.
name|identifier
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|classification
argument_list|,
name|that
operator|.
name|classification
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|identifier
argument_list|,
name|classification
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultField ()
specifier|public
name|Field
name|getDefaultField
parameter_list|()
block|{
return|return
name|StandardField
operator|.
name|EPRINT
return|;
block|}
annotation|@
name|Override
DECL|method|getNormalized ()
specifier|public
name|String
name|getNormalized
parameter_list|()
block|{
return|return
name|identifier
return|;
block|}
annotation|@
name|Override
DECL|method|getExternalURI ()
specifier|public
name|Optional
argument_list|<
name|URI
argument_list|>
name|getExternalURI
parameter_list|()
block|{
try|try
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|URI
argument_list|(
literal|"https://arxiv.org/abs/"
operator|+
name|identifier
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

