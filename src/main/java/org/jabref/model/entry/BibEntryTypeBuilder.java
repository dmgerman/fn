begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|BibField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|FieldPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|OrFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|types
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|types
operator|.
name|StandardEntryType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_class
DECL|class|BibEntryTypeBuilder
specifier|public
class|class
name|BibEntryTypeBuilder
block|{
DECL|field|type
specifier|private
name|EntryType
name|type
init|=
name|StandardEntryType
operator|.
name|Misc
decl_stmt|;
DECL|field|fields
specifier|private
name|Set
argument_list|<
name|BibField
argument_list|>
name|fields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|requiredFields
specifier|private
name|Set
argument_list|<
name|OrFields
argument_list|>
name|requiredFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|withType (EntryType type)
specifier|public
name|BibEntryTypeBuilder
name|withType
parameter_list|(
name|EntryType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withImportantFields (Set<BibField> newFields)
specifier|public
name|BibEntryTypeBuilder
name|withImportantFields
parameter_list|(
name|Set
argument_list|<
name|BibField
argument_list|>
name|newFields
parameter_list|)
block|{
return|return
name|withImportantFields
argument_list|(
name|newFields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|BibField
operator|::
name|getField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|withImportantFields (Collection<Field> newFields)
specifier|public
name|BibEntryTypeBuilder
name|withImportantFields
parameter_list|(
name|Collection
argument_list|<
name|Field
argument_list|>
name|newFields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|Streams
operator|.
name|concat
argument_list|(
name|fields
operator|.
name|stream
argument_list|()
argument_list|,
name|newFields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|field
lambda|->
operator|new
name|BibField
argument_list|(
name|field
argument_list|,
name|FieldPriority
operator|.
name|IMPORTANT
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withImportantFields (Field... newFields)
specifier|public
name|BibEntryTypeBuilder
name|withImportantFields
parameter_list|(
name|Field
modifier|...
name|newFields
parameter_list|)
block|{
return|return
name|withImportantFields
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|newFields
argument_list|)
argument_list|)
return|;
block|}
DECL|method|withDetailFields (Collection<Field> newFields)
specifier|public
name|BibEntryTypeBuilder
name|withDetailFields
parameter_list|(
name|Collection
argument_list|<
name|Field
argument_list|>
name|newFields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|Streams
operator|.
name|concat
argument_list|(
name|fields
operator|.
name|stream
argument_list|()
argument_list|,
name|newFields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|field
lambda|->
operator|new
name|BibField
argument_list|(
name|field
argument_list|,
name|FieldPriority
operator|.
name|DETAIL
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withDetailFields (Field... fields)
specifier|public
name|BibEntryTypeBuilder
name|withDetailFields
parameter_list|(
name|Field
modifier|...
name|fields
parameter_list|)
block|{
return|return
name|withDetailFields
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fields
argument_list|)
argument_list|)
return|;
block|}
DECL|method|withRequiredFields (Set<OrFields> requiredFields)
specifier|public
name|BibEntryTypeBuilder
name|withRequiredFields
parameter_list|(
name|Set
argument_list|<
name|OrFields
argument_list|>
name|requiredFields
parameter_list|)
block|{
name|this
operator|.
name|requiredFields
operator|=
name|requiredFields
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withRequiredFields (Field... requiredFields)
specifier|public
name|BibEntryTypeBuilder
name|withRequiredFields
parameter_list|(
name|Field
modifier|...
name|requiredFields
parameter_list|)
block|{
name|this
operator|.
name|requiredFields
operator|=
name|Arrays
operator|.
name|stream
argument_list|(
name|requiredFields
argument_list|)
operator|.
name|map
argument_list|(
name|OrFields
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withRequiredFields (OrFields first, Field... requiredFields)
specifier|public
name|BibEntryTypeBuilder
name|withRequiredFields
parameter_list|(
name|OrFields
name|first
parameter_list|,
name|Field
modifier|...
name|requiredFields
parameter_list|)
block|{
name|this
operator|.
name|requiredFields
operator|=
name|Stream
operator|.
name|concat
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
name|first
argument_list|)
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|requiredFields
argument_list|)
operator|.
name|map
argument_list|(
name|OrFields
operator|::
operator|new
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withRequiredFields (List<OrFields> first, Field... requiredFields)
specifier|public
name|BibEntryTypeBuilder
name|withRequiredFields
parameter_list|(
name|List
argument_list|<
name|OrFields
argument_list|>
name|first
parameter_list|,
name|Field
modifier|...
name|requiredFields
parameter_list|)
block|{
name|this
operator|.
name|requiredFields
operator|=
name|Stream
operator|.
name|concat
argument_list|(
name|first
operator|.
name|stream
argument_list|()
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|requiredFields
argument_list|)
operator|.
name|map
argument_list|(
name|OrFields
operator|::
operator|new
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|BibEntryType
name|build
parameter_list|()
block|{
comment|// Treat required fields as important ones
name|Stream
argument_list|<
name|BibField
argument_list|>
name|requiredAsImportant
init|=
name|requiredFields
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|TreeSet
operator|::
name|stream
argument_list|)
operator|.
name|map
argument_list|(
name|field
lambda|->
operator|new
name|BibField
argument_list|(
name|field
argument_list|,
name|FieldPriority
operator|.
name|IMPORTANT
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|BibField
argument_list|>
name|allFields
init|=
name|Stream
operator|.
name|concat
argument_list|(
name|fields
operator|.
name|stream
argument_list|()
argument_list|,
name|requiredAsImportant
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|BibEntryType
argument_list|(
name|type
argument_list|,
name|allFields
argument_list|,
name|requiredFields
argument_list|)
return|;
block|}
block|}
end_class

end_unit

