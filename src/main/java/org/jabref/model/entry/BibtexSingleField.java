begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Class for keeping properties of a single BibTeX/biblatex field  */
end_comment

begin_class
DECL|class|BibtexSingleField
specifier|public
class|class
name|BibtexSingleField
block|{
DECL|field|DEFAULT_FIELD_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_FIELD_LENGTH
init|=
literal|100
decl_stmt|;
DECL|enum|FieldType
specifier|private
enum|enum
name|FieldType
block|{
DECL|enumConstant|STANDARD
name|STANDARD
block|,
DECL|enumConstant|PRIVATE
name|PRIVATE
block|,
DECL|enumConstant|DISPLAYABLE
name|DISPLAYABLE
block|,
DECL|enumConstant|WRITEABLE
name|WRITEABLE
block|}
comment|// the field name
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|/**      * contains the standard, private, displayable, writable infos      * default is: not standard, public, displayable and writable      */
DECL|field|fieldTypes
specifier|private
specifier|final
name|Set
argument_list|<
name|FieldType
argument_list|>
name|fieldTypes
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|FieldType
operator|.
name|DISPLAYABLE
argument_list|,
name|FieldType
operator|.
name|WRITEABLE
argument_list|)
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
comment|/**      * properties contains a set of FieldProperty to e.g. tell the EntryEditor to add a specific      * function to this field, to format names, or to control the integrity checks.      */
DECL|field|properties
specifier|private
name|Set
argument_list|<
name|FieldProperty
argument_list|>
name|properties
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FieldProperty
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|BibtexSingleField (String fieldName)
specifier|public
name|BibtexSingleField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
argument_list|(
name|fieldName
argument_list|,
literal|true
argument_list|,
name|DEFAULT_FIELD_LENGTH
argument_list|)
expr_stmt|;
block|}
DECL|method|BibtexSingleField (String fieldName, boolean standardField)
specifier|public
name|BibtexSingleField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|standardField
parameter_list|)
block|{
name|this
argument_list|(
name|fieldName
argument_list|,
name|standardField
argument_list|,
name|DEFAULT_FIELD_LENGTH
argument_list|)
expr_stmt|;
block|}
DECL|method|BibtexSingleField (String fieldName, boolean standardField, int length)
specifier|public
name|BibtexSingleField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|standardField
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
if|if
condition|(
name|standardField
condition|)
block|{
name|fieldTypes
operator|.
name|add
argument_list|(
name|FieldType
operator|.
name|STANDARD
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isStandard ()
specifier|public
name|boolean
name|isStandard
parameter_list|()
block|{
return|return
name|fieldTypes
operator|.
name|contains
argument_list|(
name|FieldType
operator|.
name|STANDARD
argument_list|)
return|;
block|}
DECL|method|setPrivate ()
specifier|public
name|void
name|setPrivate
parameter_list|()
block|{
name|fieldTypes
operator|.
name|add
argument_list|(
name|FieldType
operator|.
name|PRIVATE
argument_list|)
expr_stmt|;
block|}
DECL|method|setPublic ()
specifier|public
name|void
name|setPublic
parameter_list|()
block|{
name|fieldTypes
operator|.
name|remove
argument_list|(
name|FieldType
operator|.
name|PRIVATE
argument_list|)
expr_stmt|;
block|}
DECL|method|isPrivate ()
specifier|public
name|boolean
name|isPrivate
parameter_list|()
block|{
return|return
name|fieldTypes
operator|.
name|contains
argument_list|(
name|FieldType
operator|.
name|PRIVATE
argument_list|)
return|;
block|}
DECL|method|setDisplayable (boolean value)
specifier|public
name|void
name|setDisplayable
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
block|{
name|fieldTypes
operator|.
name|add
argument_list|(
name|FieldType
operator|.
name|DISPLAYABLE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldTypes
operator|.
name|remove
argument_list|(
name|FieldType
operator|.
name|DISPLAYABLE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isDisplayable ()
specifier|public
name|boolean
name|isDisplayable
parameter_list|()
block|{
return|return
name|fieldTypes
operator|.
name|contains
argument_list|(
name|FieldType
operator|.
name|DISPLAYABLE
argument_list|)
return|;
block|}
DECL|method|setWriteable (boolean value)
specifier|public
name|void
name|setWriteable
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
block|{
name|fieldTypes
operator|.
name|add
argument_list|(
name|FieldType
operator|.
name|WRITEABLE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldTypes
operator|.
name|remove
argument_list|(
name|FieldType
operator|.
name|WRITEABLE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isWriteable ()
specifier|public
name|boolean
name|isWriteable
parameter_list|()
block|{
return|return
name|fieldTypes
operator|.
name|contains
argument_list|(
name|FieldType
operator|.
name|WRITEABLE
argument_list|)
return|;
block|}
DECL|method|withProperties (FieldProperty first, FieldProperty... rest)
specifier|public
name|BibtexSingleField
name|withProperties
parameter_list|(
name|FieldProperty
name|first
parameter_list|,
name|FieldProperty
modifier|...
name|rest
parameter_list|)
block|{
name|properties
operator|=
name|EnumSet
operator|.
name|of
argument_list|(
name|first
argument_list|,
name|rest
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * properties contains mappings to tell the EntryEditor to add a specific function to this field,      * for instance a dropdown for selecting the month for the month field.      */
DECL|method|getProperties ()
specifier|public
name|Set
argument_list|<
name|FieldProperty
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
comment|/**      * @return The maximum (expected) length of the field value;<em>not</em> the length of the field name      */
DECL|method|getLength ()
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|length
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Set this field's numeric property      *      * @return this BibtexSingleField instance. Makes it easier to call this      * method on the fly while initializing without using a local variable.      */
DECL|method|setNumeric ()
specifier|public
name|BibtexSingleField
name|setNumeric
parameter_list|()
block|{
name|properties
operator|.
name|add
argument_list|(
name|FieldProperty
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isNumeric ()
specifier|public
name|boolean
name|isNumeric
parameter_list|()
block|{
return|return
name|properties
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|NUMERIC
argument_list|)
return|;
block|}
DECL|method|setName (String fieldName)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
block|}
block|}
end_class

end_unit

