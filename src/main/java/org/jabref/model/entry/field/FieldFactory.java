begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry.field
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|OptionalUtil
import|;
end_import

begin_class
DECL|class|FieldFactory
specifier|public
class|class
name|FieldFactory
block|{
comment|/**      * Character separating field names that are to be used in sequence as fallbacks for a single column      * (e.g. "author/editor" to use editor where author is not set):      */
DECL|field|FIELD_OR_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_OR_SEPARATOR
init|=
literal|"/"
decl_stmt|;
DECL|field|DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|DELIMITER
init|=
literal|";"
decl_stmt|;
DECL|method|serializeOrFields (Field... fields)
specifier|public
specifier|static
name|String
name|serializeOrFields
parameter_list|(
name|Field
modifier|...
name|fields
parameter_list|)
block|{
return|return
name|serializeOrFields
argument_list|(
operator|new
name|OrFields
argument_list|(
name|fields
argument_list|)
argument_list|)
return|;
block|}
DECL|method|serializeOrFields (OrFields fields)
specifier|public
specifier|static
name|String
name|serializeOrFields
parameter_list|(
name|OrFields
name|fields
parameter_list|)
block|{
return|return
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Field
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
name|FIELD_OR_SEPARATOR
argument_list|)
argument_list|)
return|;
block|}
DECL|method|serializeOrFieldsList (Set<OrFields> fields)
specifier|public
specifier|static
name|String
name|serializeOrFieldsList
parameter_list|(
name|Set
argument_list|<
name|OrFields
argument_list|>
name|fields
parameter_list|)
block|{
return|return
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|FieldFactory
operator|::
name|serializeOrFields
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
name|DELIMITER
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getNotTextFieldNames ()
specifier|public
specifier|static
name|List
argument_list|<
name|Field
argument_list|>
name|getNotTextFieldNames
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|StandardField
operator|.
name|DOI
argument_list|,
name|StandardField
operator|.
name|FILE
argument_list|,
name|StandardField
operator|.
name|URL
argument_list|,
name|StandardField
operator|.
name|URI
argument_list|,
name|StandardField
operator|.
name|ISBN
argument_list|,
name|StandardField
operator|.
name|ISSN
argument_list|,
name|StandardField
operator|.
name|MONTH
argument_list|,
name|StandardField
operator|.
name|DATE
argument_list|,
name|StandardField
operator|.
name|YEAR
argument_list|)
return|;
block|}
DECL|method|getIdentifierFieldNames ()
specifier|public
specifier|static
name|List
argument_list|<
name|Field
argument_list|>
name|getIdentifierFieldNames
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|StandardField
operator|.
name|DOI
argument_list|,
name|StandardField
operator|.
name|EPRINT
argument_list|,
name|StandardField
operator|.
name|PMID
argument_list|)
return|;
block|}
DECL|method|parseOrFields (String fieldNames)
specifier|public
specifier|static
name|OrFields
name|parseOrFields
parameter_list|(
name|String
name|fieldNames
parameter_list|)
block|{
name|Set
argument_list|<
name|Field
argument_list|>
name|fields
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|fieldNames
operator|.
name|split
argument_list|(
name|FieldFactory
operator|.
name|FIELD_OR_SEPARATOR
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|FieldFactory
operator|::
name|parseField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|OrFields
argument_list|(
name|fields
argument_list|)
return|;
block|}
DECL|method|parseOrFieldsList (String fieldNames)
specifier|public
specifier|static
name|Set
argument_list|<
name|OrFields
argument_list|>
name|parseOrFieldsList
parameter_list|(
name|String
name|fieldNames
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|fieldNames
operator|.
name|split
argument_list|(
name|FieldFactory
operator|.
name|DELIMITER
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|FieldFactory
operator|::
name|parseOrFields
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parseFieldList (String fieldNames)
specifier|public
specifier|static
name|Set
argument_list|<
name|Field
argument_list|>
name|parseFieldList
parameter_list|(
name|String
name|fieldNames
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|fieldNames
operator|.
name|split
argument_list|(
name|FieldFactory
operator|.
name|DELIMITER
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|FieldFactory
operator|::
name|parseField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|serializeFieldsList (Collection<Field> fields)
specifier|public
specifier|static
name|String
name|serializeFieldsList
parameter_list|(
name|Collection
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
block|{
return|return
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Field
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
name|DELIMITER
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseField (String fieldName)
specifier|public
specifier|static
name|Field
name|parseField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|OptionalUtil
operator|.
expr|<
name|Field
operator|>
name|orElse
argument_list|(
name|OptionalUtil
operator|.
expr|<
name|Field
operator|>
name|orElse
argument_list|(
name|OptionalUtil
operator|.
expr|<
name|Field
operator|>
name|orElse
argument_list|(
name|InternalField
operator|.
name|fromName
argument_list|(
name|fieldName
argument_list|)
argument_list|,
name|StandardField
operator|.
name|fromName
argument_list|(
name|fieldName
argument_list|)
argument_list|)
argument_list|,
name|SpecialField
operator|.
name|fromName
argument_list|(
name|fieldName
argument_list|)
argument_list|)
argument_list|,
name|IEEEField
operator|.
name|fromName
argument_list|(
name|fieldName
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
operator|new
name|UnknownField
argument_list|(
name|fieldName
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getKeyFields ()
specifier|public
specifier|static
name|Set
argument_list|<
name|Field
argument_list|>
name|getKeyFields
parameter_list|()
block|{
return|return
name|getFieldsFiltered
argument_list|(
name|field
lambda|->
name|field
operator|.
name|getProperties
argument_list|()
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|SINGLE_ENTRY_LINK
argument_list|)
operator|||
name|field
operator|.
name|getProperties
argument_list|()
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|MULTIPLE_ENTRY_LINK
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isInternalField (Field field)
specifier|public
specifier|static
name|boolean
name|isInternalField
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
return|return
name|field
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"__"
argument_list|)
return|;
block|}
DECL|method|getJournalNameFields ()
specifier|public
specifier|static
name|Set
argument_list|<
name|Field
argument_list|>
name|getJournalNameFields
parameter_list|()
block|{
return|return
name|getFieldsFiltered
argument_list|(
name|field
lambda|->
name|field
operator|.
name|getProperties
argument_list|()
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|JOURNAL_NAME
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a sorted List with all standard fields and including some common internal fields      */
DECL|method|getCommonFields ()
specifier|public
specifier|static
name|Set
argument_list|<
name|Field
argument_list|>
name|getCommonFields
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|Field
argument_list|>
name|publicAndInternalFields
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|Field
operator|::
name|getName
argument_list|)
argument_list|)
decl_stmt|;
name|publicAndInternalFields
operator|.
name|add
argument_list|(
name|InternalField
operator|.
name|INTERNAL_ALL_FIELD
argument_list|)
expr_stmt|;
name|publicAndInternalFields
operator|.
name|add
argument_list|(
name|InternalField
operator|.
name|INTERNAL_ALL_TEXT_FIELDS_FIELD
argument_list|)
expr_stmt|;
name|publicAndInternalFields
operator|.
name|add
argument_list|(
name|InternalField
operator|.
name|KEY_FIELD
argument_list|)
expr_stmt|;
name|publicAndInternalFields
operator|.
name|addAll
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|StandardField
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|publicAndInternalFields
return|;
block|}
DECL|method|getBookNameFields ()
specifier|public
specifier|static
name|Set
argument_list|<
name|Field
argument_list|>
name|getBookNameFields
parameter_list|()
block|{
return|return
name|getFieldsFiltered
argument_list|(
name|field
lambda|->
name|field
operator|.
name|getProperties
argument_list|()
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|BOOK_NAME
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getPersonNameFields ()
specifier|public
specifier|static
name|Set
argument_list|<
name|Field
argument_list|>
name|getPersonNameFields
parameter_list|()
block|{
return|return
name|getFieldsFiltered
argument_list|(
name|field
lambda|->
name|field
operator|.
name|getProperties
argument_list|()
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|PERSON_NAMES
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getFieldsFiltered (Predicate<Field> selector)
specifier|private
specifier|static
name|Set
argument_list|<
name|Field
argument_list|>
name|getFieldsFiltered
parameter_list|(
name|Predicate
argument_list|<
name|Field
argument_list|>
name|selector
parameter_list|)
block|{
return|return
name|getAllFields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|selector
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getAllFields ()
specifier|private
specifier|static
name|Set
argument_list|<
name|Field
argument_list|>
name|getAllFields
parameter_list|()
block|{
name|Set
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|addAll
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|IEEEField
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|addAll
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|InternalField
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|addAll
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|SpecialField
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|addAll
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|StandardField
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
comment|/**      * These are the fields JabRef always displays as default {@link org.jabref.preferences.JabRefPreferences#setLanguageDependentDefaultValues()}      *      * A user can change them. The change is currently stored in the preferences only and not explicitly exposed as      * separate preferences object      */
DECL|method|getDefaultGeneralFields ()
specifier|public
specifier|static
name|List
argument_list|<
name|Field
argument_list|>
name|getDefaultGeneralFields
parameter_list|()
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|defaultGeneralFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|StandardField
operator|.
name|DOI
argument_list|,
name|StandardField
operator|.
name|CROSSREF
argument_list|,
name|StandardField
operator|.
name|KEYWORDS
argument_list|,
name|StandardField
operator|.
name|EPRINT
argument_list|,
name|StandardField
operator|.
name|URL
argument_list|,
name|StandardField
operator|.
name|FILE
argument_list|,
name|InternalField
operator|.
name|GROUPS
argument_list|,
name|InternalField
operator|.
name|OWNER
argument_list|,
name|InternalField
operator|.
name|TIMESTAMP
argument_list|)
argument_list|)
decl_stmt|;
name|defaultGeneralFields
operator|.
name|addAll
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|SpecialField
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|defaultGeneralFields
return|;
block|}
comment|// TODO: Move somewhere more appropriate and make user-configurable
DECL|method|isSingleLineField (final Field field)
specifier|public
specifier|static
name|boolean
name|isSingleLineField
parameter_list|(
specifier|final
name|Field
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
name|StandardField
operator|.
name|ABSTRACT
argument_list|)
operator|||
name|field
operator|.
name|equals
argument_list|(
name|StandardField
operator|.
name|COMMENT
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Treat unknown fields as multi-line fields
return|return
operator|!
operator|(
name|field
operator|instanceof
name|UnknownField
operator|)
return|;
block|}
block|}
end_class

end_unit

