begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry.types
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntryType
import|;
end_import

begin_class
DECL|class|EntryTypeFactory
specifier|public
class|class
name|EntryTypeFactory
block|{
DECL|method|EntryTypeFactory ()
specifier|private
name|EntryTypeFactory
parameter_list|()
block|{     }
comment|/**      * Checks whether two EntryTypeFactory are equal or not based on the equality of the type names and on the equality of      * the required and optional field lists      *      * @param type1 the first EntryType to compare      * @param type2 the secend EntryType to compare      * @return returns true if the two compared entry types have the same name and equal required and optional fields      */
DECL|method|isEqualNameAndFieldBased (BibEntryType type1, BibEntryType type2)
specifier|public
specifier|static
name|boolean
name|isEqualNameAndFieldBased
parameter_list|(
name|BibEntryType
name|type1
parameter_list|,
name|BibEntryType
name|type2
parameter_list|)
block|{
if|if
condition|(
operator|(
name|type1
operator|==
literal|null
operator|)
operator|&&
operator|(
name|type2
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|type1
operator|==
literal|null
operator|)
operator|||
operator|(
name|type2
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|type1
operator|.
name|getType
argument_list|()
argument_list|,
name|type2
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|type1
operator|.
name|getRequiredFields
argument_list|()
argument_list|,
name|type2
operator|.
name|getRequiredFields
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|type1
operator|.
name|getOptionalFields
argument_list|()
argument_list|,
name|type2
operator|.
name|getOptionalFields
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|type1
operator|.
name|getSecondaryOptionalFields
argument_list|()
argument_list|,
name|type2
operator|.
name|getSecondaryOptionalFields
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|isExclusiveBiblatex (EntryType type)
specifier|public
specifier|static
name|boolean
name|isExclusiveBiblatex
parameter_list|(
name|EntryType
name|type
parameter_list|)
block|{
return|return
name|isBiblatex
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
name|isBibtex
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|isBibtex (EntryType type)
specifier|private
specifier|static
name|boolean
name|isBibtex
parameter_list|(
name|EntryType
name|type
parameter_list|)
block|{
return|return
name|BibtexEntryTypeDefinitions
operator|.
name|ALL
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|bibEntryType
lambda|->
name|bibEntryType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isBiblatex (EntryType type)
specifier|private
specifier|static
name|boolean
name|isBiblatex
parameter_list|(
name|EntryType
name|type
parameter_list|)
block|{
return|return
name|BiblatexEntryTypeDefinitions
operator|.
name|ALL
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|bibEntryType
lambda|->
name|bibEntryType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parse (String typeName)
specifier|public
specifier|static
name|EntryType
name|parse
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|List
argument_list|<
name|EntryType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
expr|<
name|EntryType
operator|>
name|asList
argument_list|(
name|StandardEntryType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|types
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
expr|<
name|EntryType
operator|>
name|asList
argument_list|(
name|IEEETranEntryType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|types
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|type
lambda|->
name|type
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|typeName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
operator|new
name|UnknownEntryType
argument_list|(
name|typeName
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

