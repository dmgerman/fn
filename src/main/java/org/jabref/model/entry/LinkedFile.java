begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FileDirectoryPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|FileHelper
import|;
end_import

begin_comment
comment|/**  * Represents the link to an external file (e.g. associated PDF file).  */
end_comment

begin_class
DECL|class|LinkedFile
specifier|public
class|class
name|LinkedFile
block|{
DECL|field|NULL_OBJECT
specifier|private
specifier|static
specifier|final
name|LinkedFile
name|NULL_OBJECT
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
DECL|field|link
specifier|private
name|String
name|link
decl_stmt|;
DECL|field|fileType
specifier|private
name|String
name|fileType
decl_stmt|;
DECL|method|LinkedFile (String description, String link, String fileType)
specifier|public
name|LinkedFile
parameter_list|(
name|String
name|description
parameter_list|,
name|String
name|link
parameter_list|,
name|String
name|fileType
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|link
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|fileType
argument_list|)
expr_stmt|;
block|}
DECL|method|LinkedFile (String description, URL link, String fileType)
specifier|public
name|LinkedFile
parameter_list|(
name|String
name|description
parameter_list|,
name|URL
name|link
parameter_list|,
name|String
name|fileType
parameter_list|)
block|{
name|this
argument_list|(
name|description
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|link
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|fileType
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileType ()
specifier|public
name|String
name|getFileType
parameter_list|()
block|{
return|return
name|fileType
return|;
block|}
DECL|method|setFileType (String fileType)
specifier|public
name|void
name|setFileType
parameter_list|(
name|String
name|fileType
parameter_list|)
block|{
name|this
operator|.
name|fileType
operator|=
name|fileType
expr_stmt|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|method|setDescription (String description)
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
DECL|method|getLink ()
specifier|public
name|String
name|getLink
parameter_list|()
block|{
return|return
name|link
return|;
block|}
DECL|method|setLink (String link)
specifier|public
name|void
name|setLink
parameter_list|(
name|String
name|link
parameter_list|)
block|{
name|this
operator|.
name|link
operator|=
name|link
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|LinkedFile
condition|)
block|{
name|LinkedFile
name|that
init|=
operator|(
name|LinkedFile
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|description
operator|.
name|equals
argument_list|(
name|that
operator|.
name|description
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|link
operator|.
name|equals
argument_list|(
name|that
operator|.
name|link
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|fileType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|fileType
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|description
argument_list|,
name|link
argument_list|,
name|fileType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ParsedFileField{"
operator|+
literal|"description='"
operator|+
name|description
operator|+
literal|'\''
operator|+
literal|", link='"
operator|+
name|link
operator|+
literal|'\''
operator|+
literal|", fileType='"
operator|+
name|fileType
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|NULL_OBJECT
operator|.
name|equals
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|isOnlineLink ()
specifier|public
name|boolean
name|isOnlineLink
parameter_list|()
block|{
return|return
name|link
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
operator|||
name|link
operator|.
name|startsWith
argument_list|(
literal|"https://"
argument_list|)
operator|||
name|link
operator|.
name|contains
argument_list|(
literal|"www."
argument_list|)
return|;
block|}
DECL|method|findIn (BibDatabaseContext databaseContext, FileDirectoryPreferences fileDirectoryPreferences)
specifier|public
name|Optional
argument_list|<
name|Path
argument_list|>
name|findIn
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|FileDirectoryPreferences
name|fileDirectoryPreferences
parameter_list|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
name|databaseContext
operator|.
name|getFileDirectoriesAsPaths
argument_list|(
name|fileDirectoryPreferences
argument_list|)
decl_stmt|;
return|return
name|findIn
argument_list|(
name|dirs
argument_list|)
return|;
block|}
DECL|method|findIn (List<Path> directories)
specifier|public
name|Optional
argument_list|<
name|Path
argument_list|>
name|findIn
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|directories
parameter_list|)
block|{
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|link
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isAbsolute
argument_list|()
operator|||
name|directories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|file
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|FileHelper
operator|.
name|expandFilenameAsPath
argument_list|(
name|link
argument_list|,
name|directories
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

