begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|BibField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|FieldFactory
import|;
end_import

begin_class
DECL|class|BibEntryTypesManager
specifier|public
class|class
name|BibEntryTypesManager
block|{
DECL|field|ENTRYTYPE_FLAG
specifier|public
specifier|static
specifier|final
name|String
name|ENTRYTYPE_FLAG
init|=
literal|"jabref-entrytype: "
decl_stmt|;
DECL|field|BIBTEX
specifier|private
specifier|final
name|InternalEntryTypes
name|BIBTEX
init|=
operator|new
name|InternalEntryTypes
argument_list|(
name|Stream
operator|.
name|concat
argument_list|(
name|BibtexEntryTypes
operator|.
name|ALL
operator|.
name|stream
argument_list|()
argument_list|,
name|IEEETranEntryTypes
operator|.
name|ALL
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|BIBLATEX
specifier|private
specifier|final
name|InternalEntryTypes
name|BIBLATEX
init|=
operator|new
name|InternalEntryTypes
argument_list|(
name|BiblatexEntryTypes
operator|.
name|ALL
argument_list|)
decl_stmt|;
DECL|method|BibEntryTypesManager ()
specifier|public
name|BibEntryTypesManager
parameter_list|()
block|{     }
DECL|method|parse (String comment)
specifier|public
specifier|static
name|Optional
argument_list|<
name|BibEntryType
argument_list|>
name|parse
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|String
name|rest
init|=
name|comment
operator|.
name|substring
argument_list|(
name|ENTRYTYPE_FLAG
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|indexEndOfName
init|=
name|rest
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexEndOfName
operator|<
literal|0
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|String
name|fieldsDescription
init|=
name|rest
operator|.
name|substring
argument_list|(
name|indexEndOfName
operator|+
literal|2
argument_list|)
decl_stmt|;
name|int
name|indexEndOfRequiredFields
init|=
name|fieldsDescription
operator|.
name|indexOf
argument_list|(
literal|']'
argument_list|)
decl_stmt|;
name|int
name|indexEndOfOptionalFields
init|=
name|fieldsDescription
operator|.
name|indexOf
argument_list|(
literal|']'
argument_list|,
name|indexEndOfRequiredFields
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|indexEndOfRequiredFields
operator|<
literal|4
operator|)
operator|||
operator|(
name|indexEndOfOptionalFields
operator|<
operator|(
name|indexEndOfRequiredFields
operator|+
literal|6
operator|)
operator|)
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|EntryType
name|type
init|=
name|EntryTypeFactory
operator|.
name|parse
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexEndOfName
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|reqFields
init|=
name|fieldsDescription
operator|.
name|substring
argument_list|(
literal|4
argument_list|,
name|indexEndOfRequiredFields
argument_list|)
decl_stmt|;
name|String
name|optFields
init|=
name|fieldsDescription
operator|.
name|substring
argument_list|(
name|indexEndOfRequiredFields
operator|+
literal|6
argument_list|,
name|indexEndOfOptionalFields
argument_list|)
decl_stmt|;
name|BibEntryTypeBuilder
name|entryTypeBuilder
init|=
operator|new
name|BibEntryTypeBuilder
argument_list|()
operator|.
name|withType
argument_list|(
name|type
argument_list|)
operator|.
name|withImportantFields
argument_list|(
name|FieldFactory
operator|.
name|parseFieldList
argument_list|(
name|optFields
argument_list|)
argument_list|)
operator|.
name|withRequiredFields
argument_list|(
name|FieldFactory
operator|.
name|parseOrFieldsList
argument_list|(
name|reqFields
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|entryTypeBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|serialize (BibEntryType entryType)
specifier|public
specifier|static
name|String
name|serialize
parameter_list|(
name|BibEntryType
name|entryType
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|ENTRYTYPE_FLAG
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|entryType
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|": req["
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|FieldFactory
operator|.
name|serializeOrFieldsList
argument_list|(
name|entryType
operator|.
name|getRequiredFields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"] opt["
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|FieldFactory
operator|.
name|serializeFieldsList
argument_list|(
name|entryType
operator|.
name|getOptionalFields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|BibField
operator|::
name|getField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns true if the type is a custom type, or if it is a standard type which has customized fields      */
DECL|method|isCustomizedType (BibEntryType type, BibDatabaseMode mode)
specifier|public
name|boolean
name|isCustomizedType
parameter_list|(
name|BibEntryType
name|type
parameter_list|,
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
return|return
name|mode
operator|==
name|BibDatabaseMode
operator|.
name|BIBLATEX
condition|?
name|BIBLATEX
operator|.
name|isCustomizedType
argument_list|(
name|type
argument_list|)
else|:
name|BIBTEX
operator|.
name|isCustomizedType
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Sets the given custom entry types for BibTeX and biblatex mode      */
DECL|method|addCustomizedEntryTypes (List<BibEntryType> customBibtexEntryTypes, List<BibEntryType> customBiblatexEntryTypes)
specifier|public
name|void
name|addCustomizedEntryTypes
parameter_list|(
name|List
argument_list|<
name|BibEntryType
argument_list|>
name|customBibtexEntryTypes
parameter_list|,
name|List
argument_list|<
name|BibEntryType
argument_list|>
name|customBiblatexEntryTypes
parameter_list|)
block|{
name|customBibtexEntryTypes
operator|.
name|forEach
argument_list|(
name|type
lambda|->
name|addCustomizedEntryType
argument_list|(
name|type
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|customBiblatexEntryTypes
operator|.
name|forEach
argument_list|(
name|type
lambda|->
name|addCustomizedEntryType
argument_list|(
name|type
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * For a given database mode, determine all custom entry types, i.e. types that are not overwritten standard types but real custom types.      * For example, a modified "article" type will not be included in the list, but an entry type like "MyCustomType" will be included.      *      * @param mode the BibDatabaseMode to be checked      * @return the list of all found custom types      */
DECL|method|getAllCustomTypes (BibDatabaseMode mode)
specifier|public
name|List
argument_list|<
name|BibEntryType
argument_list|>
name|getAllCustomTypes
parameter_list|(
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|Collection
argument_list|<
name|BibEntryType
argument_list|>
name|customizedTypes
init|=
name|getAllTypes
argument_list|(
name|mode
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|BibDatabaseMode
operator|.
name|BIBTEX
condition|)
block|{
return|return
name|customizedTypes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|entryType
lambda|->
name|BibtexEntryTypes
operator|.
name|ALL
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|bibtexType
lambda|->
name|bibtexType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|entryType
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|entryType
lambda|->
name|IEEETranEntryTypes
operator|.
name|ALL
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|ieeeType
lambda|->
name|ieeeType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|entryType
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|customizedTypes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|entryType
lambda|->
name|BiblatexEntryTypes
operator|.
name|ALL
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|biblatexType
lambda|->
name|biblatexType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|entryType
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|addCustomizedEntryType (BibEntryType entryType, BibDatabaseMode mode)
specifier|public
name|void
name|addCustomizedEntryType
parameter_list|(
name|BibEntryType
name|entryType
parameter_list|,
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|BibDatabaseMode
operator|.
name|BIBLATEX
operator|==
name|mode
condition|)
block|{
name|BIBLATEX
operator|.
name|addCustomizedType
argument_list|(
name|entryType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BibDatabaseMode
operator|.
name|BIBTEX
operator|==
name|mode
condition|)
block|{
name|BIBTEX
operator|.
name|addCustomizedType
argument_list|(
name|entryType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAllTypes (BibDatabaseMode type)
specifier|public
name|Collection
argument_list|<
name|BibEntryType
argument_list|>
name|getAllTypes
parameter_list|(
name|BibDatabaseMode
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|BibDatabaseMode
operator|.
name|BIBLATEX
condition|?
name|BIBLATEX
operator|.
name|getAllTypes
argument_list|()
else|:
name|BIBTEX
operator|.
name|getAllTypes
argument_list|()
return|;
block|}
DECL|method|isCustomType (EntryType type, BibDatabaseMode mode)
specifier|public
name|boolean
name|isCustomType
parameter_list|(
name|EntryType
name|type
parameter_list|,
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
return|return
name|getAllCustomTypes
argument_list|(
name|mode
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|customType
lambda|->
name|customType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This method returns the BibtexEntryType for the entry type.      */
DECL|method|enrich (EntryType type, BibDatabaseMode mode)
specifier|public
name|Optional
argument_list|<
name|BibEntryType
argument_list|>
name|enrich
parameter_list|(
name|EntryType
name|type
parameter_list|,
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
return|return
name|mode
operator|==
name|BibDatabaseMode
operator|.
name|BIBLATEX
condition|?
name|BIBLATEX
operator|.
name|enrich
argument_list|(
name|type
argument_list|)
else|:
name|BIBTEX
operator|.
name|enrich
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * This class is used to specify entry types for either BIBTEX and BIBLATEX.      */
DECL|class|InternalEntryTypes
specifier|static
class|class
name|InternalEntryTypes
block|{
DECL|field|customizedTypes
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|BibEntryType
argument_list|>
name|customizedTypes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|standardTypes
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|BibEntryType
argument_list|>
name|standardTypes
decl_stmt|;
DECL|method|InternalEntryTypes (List<BibEntryType> standardTypes)
specifier|public
name|InternalEntryTypes
parameter_list|(
name|List
argument_list|<
name|BibEntryType
argument_list|>
name|standardTypes
parameter_list|)
block|{
name|this
operator|.
name|standardTypes
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|standardTypes
argument_list|)
expr_stmt|;
block|}
comment|/**          * This method returns the BibtexEntryType for the name of a type,          * or null if it does not exist.          */
DECL|method|enrich (EntryType type)
specifier|public
name|Optional
argument_list|<
name|BibEntryType
argument_list|>
name|enrich
parameter_list|(
name|EntryType
name|type
parameter_list|)
block|{
name|Optional
argument_list|<
name|BibEntryType
argument_list|>
name|enrichedType
init|=
name|customizedTypes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|customizedType
lambda|->
name|customizedType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrichedType
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|enrichedType
return|;
block|}
else|else
block|{
return|return
name|standardTypes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|customizedType
lambda|->
name|customizedType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
return|;
block|}
block|}
DECL|method|addCustomizedType (BibEntryType type)
specifier|private
name|void
name|addCustomizedType
parameter_list|(
name|BibEntryType
name|type
parameter_list|)
block|{
name|customizedTypes
operator|.
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|customizedTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllTypes ()
specifier|public
name|SortedSet
argument_list|<
name|BibEntryType
argument_list|>
name|getAllTypes
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|BibEntryType
argument_list|>
name|allTypes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|customizedTypes
argument_list|)
decl_stmt|;
name|allTypes
operator|.
name|addAll
argument_list|(
name|standardTypes
argument_list|)
expr_stmt|;
return|return
name|allTypes
return|;
block|}
DECL|method|isCustomizedType (BibEntryType entryType)
specifier|public
name|boolean
name|isCustomizedType
parameter_list|(
name|BibEntryType
name|entryType
parameter_list|)
block|{
return|return
name|customizedTypes
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|customizedType
lambda|->
name|customizedType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|entryType
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

