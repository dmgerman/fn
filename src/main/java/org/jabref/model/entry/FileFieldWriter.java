begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
DECL|class|FileFieldWriter
specifier|public
class|class
name|FileFieldWriter
block|{
DECL|method|FileFieldWriter ()
specifier|private
name|FileFieldWriter
parameter_list|()
block|{     }
DECL|method|getStringRepresentation (List<LinkedFile> fields)
specifier|public
specifier|static
name|String
name|getStringRepresentation
parameter_list|(
name|List
argument_list|<
name|LinkedFile
argument_list|>
name|fields
parameter_list|)
block|{
name|String
index|[]
index|[]
name|array
init|=
operator|new
name|String
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LinkedFile
name|entry
range|:
name|fields
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
operator|new
name|String
index|[]
block|{
name|entry
operator|.
name|getDescription
argument_list|()
block|,
name|entry
operator|.
name|getLink
argument_list|()
block|,
name|entry
operator|.
name|getFileType
argument_list|()
block|}
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|encodeStringArray
argument_list|(
name|array
argument_list|)
return|;
block|}
DECL|method|getStringRepresentation (LinkedFile field)
specifier|public
specifier|static
name|String
name|getStringRepresentation
parameter_list|(
name|LinkedFile
name|field
parameter_list|)
block|{
return|return
name|getStringRepresentation
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|field
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Encodes a two-dimensional String array into a single string, using ':' and      * ';' as separators. The characters ':' and ';' are escaped with '\'.      * @param values The String array.      * @return The encoded String.      */
DECL|method|encodeStringArray (String[][] values)
specifier|public
specifier|static
name|String
name|encodeStringArray
parameter_list|(
name|String
index|[]
index|[]
name|values
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|values
argument_list|)
operator|.
name|map
argument_list|(
name|FileFieldWriter
operator|::
name|encodeStringArray
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|";"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Encodes a String array into a single string, using ':' as separator.      * The characters ':' and ';' are escaped with '\'.      * @param entry The String array.      * @return The encoded String.      */
DECL|method|encodeStringArray (String[] entry)
specifier|private
specifier|static
name|String
name|encodeStringArray
parameter_list|(
name|String
index|[]
name|entry
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|entry
argument_list|)
operator|.
name|map
argument_list|(
name|FileFieldWriter
operator|::
name|quote
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|":"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|quote (String s)
specifier|public
specifier|static
name|String
name|quote
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|==
literal|';'
operator|)
operator|||
operator|(
name|c
operator|==
literal|':'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

