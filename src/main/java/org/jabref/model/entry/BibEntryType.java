begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.entry
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|BibField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|FieldPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|OrFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|types
operator|.
name|EntryType
import|;
end_import

begin_class
DECL|class|BibEntryType
specifier|public
class|class
name|BibEntryType
implements|implements
name|Comparable
argument_list|<
name|BibEntryType
argument_list|>
block|{
DECL|field|type
specifier|private
specifier|final
name|EntryType
name|type
decl_stmt|;
DECL|field|requiredFields
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|OrFields
argument_list|>
name|requiredFields
decl_stmt|;
DECL|field|fields
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|BibField
argument_list|>
name|fields
decl_stmt|;
DECL|method|BibEntryType (EntryType type, Collection<BibField> fields, Collection<OrFields> requiredFields)
specifier|public
name|BibEntryType
parameter_list|(
name|EntryType
name|type
parameter_list|,
name|Collection
argument_list|<
name|BibField
argument_list|>
name|fields
parameter_list|,
name|Collection
argument_list|<
name|OrFields
argument_list|>
name|requiredFields
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|requiredFields
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|requiredFields
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|EntryType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Returns all supported optional field names.      *      * @return a List of optional field name Strings      */
DECL|method|getOptionalFields ()
specifier|public
name|SortedSet
argument_list|<
name|BibField
argument_list|>
name|getOptionalFields
parameter_list|()
block|{
return|return
name|getAllFields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|field
lambda|->
operator|!
name|isRequired
argument_list|(
name|field
operator|.
name|getField
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|TreeSet
operator|::
operator|new
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isRequired (Field field)
specifier|public
name|boolean
name|isRequired
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
return|return
name|getRequiredFields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|fields
lambda|->
name|fields
operator|.
name|contains
argument_list|(
name|field
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns all required field names.      * If fields have an OR relationship the name includes both field names divided by /, e.g. author/editor.      * If you need all required fields as sole entities use @see{getRequiredFieldsFlat} .      *      * @return a List of required field name Strings      */
DECL|method|getRequiredFields ()
specifier|public
name|SortedSet
argument_list|<
name|OrFields
argument_list|>
name|getRequiredFields
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSortedSet
argument_list|(
name|requiredFields
argument_list|)
return|;
block|}
comment|/**      * Returns all defined fields.      */
DECL|method|getAllFields ()
specifier|public
name|SortedSet
argument_list|<
name|BibField
argument_list|>
name|getAllFields
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSortedSet
argument_list|(
name|fields
argument_list|)
return|;
block|}
DECL|method|getPrimaryOptionalFields ()
specifier|public
name|SortedSet
argument_list|<
name|BibField
argument_list|>
name|getPrimaryOptionalFields
parameter_list|()
block|{
return|return
name|getOptionalFields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|field
lambda|->
name|field
operator|.
name|getPriority
argument_list|()
operator|==
name|FieldPriority
operator|.
name|IMPORTANT
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|TreeSet
operator|::
operator|new
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSecondaryOptionalFields ()
specifier|public
name|SortedSet
argument_list|<
name|Field
argument_list|>
name|getSecondaryOptionalFields
parameter_list|()
block|{
return|return
name|getOptionalFields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|field
lambda|->
name|field
operator|.
name|getPriority
argument_list|()
operator|==
name|FieldPriority
operator|.
name|DETAIL
argument_list|)
operator|.
name|map
argument_list|(
name|BibField
operator|::
name|getField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
parameter_list|()
lambda|->
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|Field
operator|::
name|getName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDeprecatedFields ()
specifier|public
name|SortedSet
argument_list|<
name|Field
argument_list|>
name|getDeprecatedFields
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|Field
argument_list|>
name|deprecatedFields
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|Field
operator|::
name|getName
argument_list|)
argument_list|)
decl_stmt|;
name|deprecatedFields
operator|.
name|addAll
argument_list|(
name|EntryConverter
operator|.
name|FIELD_ALIASES_TEX_TO_LTX
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|deprecatedFields
operator|.
name|add
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|)
expr_stmt|;
name|deprecatedFields
operator|.
name|add
argument_list|(
name|StandardField
operator|.
name|MONTH
argument_list|)
expr_stmt|;
name|deprecatedFields
operator|.
name|retainAll
argument_list|(
name|getOptionalFieldsAndAliases
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|deprecatedFields
return|;
block|}
DECL|method|getSecondaryOptionalNotDeprecatedFields ()
specifier|public
name|SortedSet
argument_list|<
name|Field
argument_list|>
name|getSecondaryOptionalNotDeprecatedFields
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|Field
argument_list|>
name|optionalFieldsNotPrimaryOrDeprecated
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|Field
operator|::
name|getName
argument_list|)
argument_list|)
decl_stmt|;
name|optionalFieldsNotPrimaryOrDeprecated
operator|.
name|addAll
argument_list|(
name|getSecondaryOptionalFields
argument_list|()
argument_list|)
expr_stmt|;
name|optionalFieldsNotPrimaryOrDeprecated
operator|.
name|removeAll
argument_list|(
name|getDeprecatedFields
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|optionalFieldsNotPrimaryOrDeprecated
return|;
block|}
comment|/**      * Get list of all optional fields of this entry and their aliases.      */
DECL|method|getOptionalFieldsAndAliases ()
specifier|private
name|SortedSet
argument_list|<
name|Field
argument_list|>
name|getOptionalFieldsAndAliases
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|Field
argument_list|>
name|optionalFieldsAndAliases
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|Field
operator|::
name|getName
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|BibField
name|field
range|:
name|getOptionalFields
argument_list|()
control|)
block|{
name|optionalFieldsAndAliases
operator|.
name|add
argument_list|(
name|field
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|EntryConverter
operator|.
name|FIELD_ALIASES_LTX_TO_TEX
operator|.
name|containsKey
argument_list|(
name|field
operator|.
name|getField
argument_list|()
argument_list|)
condition|)
block|{
name|optionalFieldsAndAliases
operator|.
name|add
argument_list|(
name|EntryConverter
operator|.
name|FIELD_ALIASES_LTX_TO_TEX
operator|.
name|get
argument_list|(
name|field
operator|.
name|getField
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|optionalFieldsAndAliases
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BibEntryType
name|that
init|=
operator|(
name|BibEntryType
operator|)
name|o
decl_stmt|;
return|return
name|type
operator|.
name|equals
argument_list|(
name|that
operator|.
name|type
argument_list|)
operator|&&
name|requiredFields
operator|.
name|equals
argument_list|(
name|that
operator|.
name|requiredFields
argument_list|)
operator|&&
name|fields
operator|.
name|equals
argument_list|(
name|that
operator|.
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|type
argument_list|,
name|requiredFields
argument_list|,
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BibEntryType{"
operator|+
literal|"type="
operator|+
name|type
operator|+
literal|", requiredFields="
operator|+
name|requiredFields
operator|+
literal|", fields="
operator|+
name|fields
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (BibEntryType o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|BibEntryType
name|o
parameter_list|)
block|{
return|return
name|this
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

