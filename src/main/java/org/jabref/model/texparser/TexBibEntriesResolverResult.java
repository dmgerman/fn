begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.model.texparser
package|package
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|texparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_class
DECL|class|TexBibEntriesResolverResult
specifier|public
class|class
name|TexBibEntriesResolverResult
block|{
DECL|field|texParserResult
specifier|private
specifier|final
name|TexParserResult
name|texParserResult
decl_stmt|;
DECL|field|newEntryKeys
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|newEntryKeys
decl_stmt|;
DECL|field|newEntries
specifier|private
specifier|final
name|Set
argument_list|<
name|BibEntry
argument_list|>
name|newEntries
decl_stmt|;
DECL|method|TexBibEntriesResolverResult (TexParserResult texParserResult)
specifier|public
name|TexBibEntriesResolverResult
parameter_list|(
name|TexParserResult
name|texParserResult
parameter_list|)
block|{
name|this
operator|.
name|texParserResult
operator|=
name|texParserResult
expr_stmt|;
name|this
operator|.
name|newEntryKeys
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|newEntries
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getTexParserResult ()
specifier|public
name|TexParserResult
name|getTexParserResult
parameter_list|()
block|{
return|return
name|texParserResult
return|;
block|}
DECL|method|getNewEntryKeys ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNewEntryKeys
parameter_list|()
block|{
return|return
name|newEntryKeys
return|;
block|}
DECL|method|getNewEntries ()
specifier|public
name|Set
argument_list|<
name|BibEntry
argument_list|>
name|getNewEntries
parameter_list|()
block|{
return|return
name|newEntries
return|;
block|}
DECL|method|addEntry (BibEntry entry)
specifier|public
name|void
name|addEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|newEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|entryKey
lambda|->
block|{
name|newEntryKeys
operator|.
name|add
argument_list|(
name|entryKey
argument_list|)
expr_stmt|;
name|newEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the BIB files multimap from the TexParserResult object.      */
DECL|method|getBibFiles ()
specifier|public
name|Multimap
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|getBibFiles
parameter_list|()
block|{
return|return
name|texParserResult
operator|.
name|getBibFiles
argument_list|()
return|;
block|}
comment|/**      * Return the citations multimap from the TexParserResult object.      */
DECL|method|getCitations ()
specifier|public
name|Multimap
argument_list|<
name|String
argument_list|,
name|Citation
argument_list|>
name|getCitations
parameter_list|()
block|{
return|return
name|texParserResult
operator|.
name|getCitations
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"TexBibEntriesResolverResult{texParserResult=%s, newEntryKeys=%s, newEntries=%s}"
argument_list|,
name|this
operator|.
name|texParserResult
argument_list|,
name|this
operator|.
name|newEntryKeys
argument_list|,
name|this
operator|.
name|newEntries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TexBibEntriesResolverResult
name|that
init|=
operator|(
name|TexBibEntriesResolverResult
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|texParserResult
argument_list|,
name|that
operator|.
name|texParserResult
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|newEntryKeys
argument_list|,
name|that
operator|.
name|newEntryKeys
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|newEntries
argument_list|,
name|that
operator|.
name|newEntries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|texParserResult
argument_list|,
name|newEntryKeys
argument_list|,
name|newEntries
argument_list|)
return|;
block|}
block|}
end_class

end_unit

