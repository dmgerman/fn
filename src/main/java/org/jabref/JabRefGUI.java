begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref
package|package
name|org
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|application
operator|.
name|Platform
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Scene
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|stage
operator|.
name|Stage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|dialogs
operator|.
name|BackupUIManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|VersionWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|ParserResultWarningDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|actions
operator|.
name|OpenDatabaseAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|shared
operator|.
name|SharedDatabaseUIManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|autosaveandbackup
operator|.
name|BackupManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|OpenDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|shared
operator|.
name|exception
operator|.
name|InvalidDBMSConnectionPropertiesException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|shared
operator|.
name|exception
operator|.
name|NotASharedDatabaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|shared
operator|.
name|DatabaseNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|impl
operator|.
name|org
operator|.
name|controlsfx
operator|.
name|skin
operator|.
name|DecorationPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|JabRefGUI
specifier|public
class|class
name|JabRefGUI
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JabRefGUI
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mainFrame
specifier|private
specifier|static
name|JabRefFrame
name|mainFrame
decl_stmt|;
DECL|field|bibDatabases
specifier|private
specifier|final
name|List
argument_list|<
name|ParserResult
argument_list|>
name|bibDatabases
decl_stmt|;
DECL|field|isBlank
specifier|private
specifier|final
name|boolean
name|isBlank
decl_stmt|;
DECL|field|failed
specifier|private
specifier|final
name|List
argument_list|<
name|ParserResult
argument_list|>
name|failed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|toOpenTab
specifier|private
specifier|final
name|List
argument_list|<
name|ParserResult
argument_list|>
name|toOpenTab
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|JabRefGUI (Stage mainStage, List<ParserResult> databases, boolean isBlank)
specifier|public
name|JabRefGUI
parameter_list|(
name|Stage
name|mainStage
parameter_list|,
name|List
argument_list|<
name|ParserResult
argument_list|>
name|databases
parameter_list|,
name|boolean
name|isBlank
parameter_list|)
block|{
name|this
operator|.
name|bibDatabases
operator|=
name|databases
expr_stmt|;
name|this
operator|.
name|isBlank
operator|=
name|isBlank
expr_stmt|;
name|mainFrame
operator|=
operator|new
name|JabRefFrame
argument_list|(
name|mainStage
argument_list|)
expr_stmt|;
name|openWindow
argument_list|(
name|mainStage
argument_list|)
expr_stmt|;
operator|new
name|VersionWorker
argument_list|(
name|Globals
operator|.
name|BUILD_INFO
operator|.
name|getVersion
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getVersionPreferences
argument_list|()
operator|.
name|getIgnoredVersion
argument_list|()
argument_list|,
name|mainFrame
operator|.
name|getDialogService
argument_list|()
argument_list|,
name|Globals
operator|.
name|TASK_EXECUTOR
argument_list|)
operator|.
name|checkForNewVersionDelayed
argument_list|()
expr_stmt|;
block|}
DECL|method|openWindow (Stage mainStage)
specifier|private
name|void
name|openWindow
parameter_list|(
name|Stage
name|mainStage
parameter_list|)
block|{
name|applyFontRenderingTweak
argument_list|()
expr_stmt|;
name|GUIGlobals
operator|.
name|init
argument_list|()
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Initializing frame"
argument_list|)
expr_stmt|;
name|mainFrame
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// Restore window location and/or maximised state
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WINDOW_MAXIMISED
argument_list|)
condition|)
block|{
name|mainStage
operator|.
name|setMaximized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mainStage
operator|.
name|setX
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getDouble
argument_list|(
name|JabRefPreferences
operator|.
name|POS_X
argument_list|)
argument_list|)
expr_stmt|;
name|mainStage
operator|.
name|setY
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getDouble
argument_list|(
name|JabRefPreferences
operator|.
name|POS_Y
argument_list|)
argument_list|)
expr_stmt|;
name|mainStage
operator|.
name|setWidth
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getDouble
argument_list|(
name|JabRefPreferences
operator|.
name|SIZE_X
argument_list|)
argument_list|)
expr_stmt|;
name|mainStage
operator|.
name|setHeight
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getDouble
argument_list|(
name|JabRefPreferences
operator|.
name|SIZE_Y
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We create a decoration pane ourselves for performance reasons
comment|// (otherwise it has to be injected later, leading to a complete redraw/relayout of the complete scene)
name|DecorationPane
name|root
init|=
operator|new
name|DecorationPane
argument_list|()
decl_stmt|;
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|JabRefGUI
operator|.
name|mainFrame
argument_list|)
expr_stmt|;
name|Scene
name|scene
init|=
operator|new
name|Scene
argument_list|(
name|root
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|getThemeLoader
argument_list|()
operator|.
name|installCss
argument_list|(
name|scene
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
name|mainStage
operator|.
name|setTitle
argument_list|(
name|JabRefFrame
operator|.
name|FRAME_TITLE
argument_list|)
expr_stmt|;
name|mainStage
operator|.
name|getIcons
argument_list|()
operator|.
name|addAll
argument_list|(
name|IconTheme
operator|.
name|getLogoSetFX
argument_list|()
argument_list|)
expr_stmt|;
name|mainStage
operator|.
name|setScene
argument_list|(
name|scene
argument_list|)
expr_stmt|;
name|mainStage
operator|.
name|show
argument_list|()
expr_stmt|;
name|mainStage
operator|.
name|setOnCloseRequest
argument_list|(
name|event
lambda|->
block|{
name|saveWindowState
argument_list|(
name|mainStage
argument_list|)
expr_stmt|;
name|boolean
name|reallyQuit
init|=
name|mainFrame
operator|.
name|quit
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|reallyQuit
condition|)
block|{
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Platform
operator|.
name|runLater
argument_list|(
name|this
operator|::
name|openDatabases
argument_list|)
expr_stmt|;
block|}
DECL|method|openDatabases ()
specifier|private
name|void
name|openDatabases
parameter_list|()
block|{
comment|// If the option is enabled, open the last edited libraries, if any.
if|if
condition|(
operator|!
name|isBlank
operator|&&
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OPEN_LAST_EDITED
argument_list|)
condition|)
block|{
name|openLastEditedDatabases
argument_list|()
expr_stmt|;
block|}
comment|// passed file (we take the first one) should be focused
name|String
name|focusedFile
init|=
name|bibDatabases
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
operator|.
name|flatMap
argument_list|(
name|ParserResult
operator|::
name|getFile
argument_list|)
operator|.
name|map
argument_list|(
name|File
operator|::
name|getAbsolutePath
argument_list|)
operator|.
name|orElse
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_FOCUSED
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add all bibDatabases databases to the frame:
name|boolean
name|first
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|bibDatabases
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ParserResult
argument_list|>
name|parserResultIterator
init|=
name|bibDatabases
operator|.
name|iterator
argument_list|()
init|;
name|parserResultIterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ParserResult
name|pr
init|=
name|parserResultIterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Define focused tab
if|if
condition|(
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|filter
argument_list|(
name|path
lambda|->
name|path
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|equals
argument_list|(
name|focusedFile
argument_list|)
argument_list|)
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|first
operator|=
literal|true
block|;                 }
if|if
condition|(
name|pr
operator|.
name|isInvalid
argument_list|()
condition|)
block|{
name|failed
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
name|parserResultIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|isShared
argument_list|()
condition|)
block|{
try|try
block|{
operator|new
name|SharedDatabaseUIManager
argument_list|(
name|mainFrame
argument_list|)
operator|.
name|openSharedDatabaseFromParserResult
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
decl||
name|DatabaseNotSupportedException
decl||
name|InvalidDBMSConnectionPropertiesException
decl||
name|NotASharedDatabaseException
name|e
parameter_list|)
block|{
name|pr
operator|.
name|getDatabaseContext
argument_list|()
operator|.
name|clearDatabaseFile
argument_list|()
expr_stmt|;
comment|// do not open the original file
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|clearSharedDatabaseID
argument_list|()
expr_stmt|;
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Connection error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|mainFrame
operator|.
name|getDialogService
argument_list|()
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connection error"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"A local copy will be opened."
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|toOpenTab
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|toOpenTab
argument_list|()
condition|)
block|{
comment|// things to be appended to an opened tab should be done after opening all tabs
comment|// add them to the list
name|toOpenTab
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mainFrame
operator|.
name|addParserResult
argument_list|(
name|pr
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|// finally add things to the currently opened tab
for|for
control|(
name|ParserResult
name|pr
range|:
name|toOpenTab
control|)
block|{
name|mainFrame
operator|.
name|addParserResult
argument_list|(
name|pr
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|ParserResult
name|pr
range|:
name|failed
control|)
block|{
name|String
name|message
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error opening file '%0'."
argument_list|,
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\n"
operator|+
name|pr
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
name|mainFrame
operator|.
name|getDialogService
argument_list|()
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Display warnings, if any
name|int
name|tabNumber
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ParserResult
name|pr
range|:
name|bibDatabases
control|)
block|{
name|ParserResultWarningDialog
operator|.
name|showParserResultWarningDialog
argument_list|(
name|pr
argument_list|,
name|mainFrame
argument_list|,
name|tabNumber
operator|++
argument_list|)
expr_stmt|;
block|}
comment|// After adding the databases, go through each and see if
comment|// any post open actions need to be done. For instance, checking
comment|// if we found new entry types that can be imported, or checking
comment|// if the database contents should be modified due to new features
comment|// in this version of JabRef.
comment|// Note that we have to check whether i does not go over getBasePanelCount().
comment|// This is because importToOpen might have been used, which adds to
comment|// loadedDatabases, but not to getBasePanelCount()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|i
operator|<
name|bibDatabases
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
name|i
operator|<
name|mainFrame
operator|.
name|getBasePanelCount
argument_list|()
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|ParserResult
name|pr
init|=
name|bibDatabases
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BasePanel
name|panel
init|=
name|mainFrame
operator|.
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|OpenDatabaseAction
operator|.
name|performPostOpenActions
argument_list|(
name|panel
argument_list|,
name|pr
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Finished adding panels"
argument_list|)
expr_stmt|;
block|}
DECL|method|saveWindowState (Stage mainStage)
specifier|private
name|void
name|saveWindowState
parameter_list|(
name|Stage
name|mainStage
parameter_list|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WINDOW_MAXIMISED
argument_list|,
name|mainStage
operator|.
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDouble
argument_list|(
name|JabRefPreferences
operator|.
name|POS_X
argument_list|,
name|mainStage
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDouble
argument_list|(
name|JabRefPreferences
operator|.
name|POS_Y
argument_list|,
name|mainStage
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDouble
argument_list|(
name|JabRefPreferences
operator|.
name|SIZE_X
argument_list|,
name|mainStage
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putDouble
argument_list|(
name|JabRefPreferences
operator|.
name|SIZE_Y
argument_list|,
name|mainStage
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|openLastEditedDatabases ()
specifier|private
name|void
name|openLastEditedDatabases
parameter_list|()
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_EDITED
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|lastFiles
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_EDITED
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|lastFiles
control|)
block|{
name|File
name|dbFile
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// Already parsed via command line parameter, e.g., "jabref.jar somefile.bib"
if|if
condition|(
name|isLoaded
argument_list|(
name|dbFile
argument_list|)
operator|||
operator|!
name|dbFile
operator|.
name|exists
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|BackupManager
operator|.
name|checkForBackupFile
argument_list|(
name|dbFile
operator|.
name|toPath
argument_list|()
argument_list|)
condition|)
block|{
name|BackupUIManager
operator|.
name|showRestoreBackupDialog
argument_list|(
name|mainFrame
operator|.
name|getDialogService
argument_list|()
argument_list|,
name|dbFile
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ParserResult
name|parsedDatabase
init|=
name|OpenDatabase
operator|.
name|loadDatabase
argument_list|(
name|fileName
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
argument_list|,
name|Globals
operator|.
name|getFileUpdateMonitor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parsedDatabase
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error opening file"
argument_list|)
operator|+
literal|" '"
operator|+
name|dbFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bibDatabases
operator|.
name|add
argument_list|(
name|parsedDatabase
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isLoaded (File fileToOpen)
specifier|private
name|boolean
name|isLoaded
parameter_list|(
name|File
name|fileToOpen
parameter_list|)
block|{
for|for
control|(
name|ParserResult
name|pr
range|:
name|bibDatabases
control|)
block|{
if|if
condition|(
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|isPresent
argument_list|()
operator|&&
name|pr
operator|.
name|getFile
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|fileToOpen
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|applyFontRenderingTweak ()
specifier|private
name|void
name|applyFontRenderingTweak
parameter_list|()
block|{
comment|// On Linux, Java FX fonts look blurry per default. This can be improved by using a non-default rendering setting.
comment|// See https://github.com/woky/javafx-hates-linux
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|FX_FONT_RENDERING_TWEAK
argument_list|)
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"prism.text"
argument_list|,
literal|"t2k"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"prism.lcdtext"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMainFrame ()
specifier|public
specifier|static
name|JabRefFrame
name|getMainFrame
parameter_list|()
block|{
return|return
name|mainFrame
return|;
block|}
block|}
end_class

end_unit

