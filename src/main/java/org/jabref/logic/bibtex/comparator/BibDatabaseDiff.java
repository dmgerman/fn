begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.bibtex.comparator
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|comparator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|DuplicateCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_class
DECL|class|BibDatabaseDiff
specifier|public
class|class
name|BibDatabaseDiff
block|{
DECL|field|MATCH_THRESHOLD
specifier|private
specifier|static
specifier|final
name|double
name|MATCH_THRESHOLD
init|=
literal|0.4
decl_stmt|;
DECL|field|metaDataDiff
specifier|private
specifier|final
name|Optional
argument_list|<
name|MetaDataDiff
argument_list|>
name|metaDataDiff
decl_stmt|;
DECL|field|preambleDiff
specifier|private
specifier|final
name|Optional
argument_list|<
name|PreambleDiff
argument_list|>
name|preambleDiff
decl_stmt|;
DECL|field|bibStringDiffs
specifier|private
specifier|final
name|List
argument_list|<
name|BibStringDiff
argument_list|>
name|bibStringDiffs
decl_stmt|;
DECL|field|entryDiffs
specifier|private
specifier|final
name|List
argument_list|<
name|BibEntryDiff
argument_list|>
name|entryDiffs
decl_stmt|;
DECL|method|BibDatabaseDiff (BibDatabaseContext originalDatabase, BibDatabaseContext newDatabase)
specifier|private
name|BibDatabaseDiff
parameter_list|(
name|BibDatabaseContext
name|originalDatabase
parameter_list|,
name|BibDatabaseContext
name|newDatabase
parameter_list|)
block|{
name|metaDataDiff
operator|=
name|MetaDataDiff
operator|.
name|compare
argument_list|(
name|originalDatabase
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|newDatabase
operator|.
name|getMetaData
argument_list|()
argument_list|)
expr_stmt|;
name|preambleDiff
operator|=
name|PreambleDiff
operator|.
name|compare
argument_list|(
name|originalDatabase
argument_list|,
name|newDatabase
argument_list|)
expr_stmt|;
name|bibStringDiffs
operator|=
name|BibStringDiff
operator|.
name|compare
argument_list|(
name|originalDatabase
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|newDatabase
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sort both databases according to a common sort key.
name|EntryComparator
name|comparator
init|=
name|getEntryComparator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|originalEntriesSorted
init|=
name|originalDatabase
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntriesSorted
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|newEntriesSorted
init|=
name|newDatabase
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntriesSorted
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|entryDiffs
operator|=
name|compareEntries
argument_list|(
name|originalEntriesSorted
argument_list|,
name|newEntriesSorted
argument_list|)
expr_stmt|;
block|}
DECL|method|getEntryComparator ()
specifier|private
specifier|static
name|EntryComparator
name|getEntryComparator
parameter_list|()
block|{
name|EntryComparator
name|comparator
init|=
operator|new
name|EntryComparator
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|StandardField
operator|.
name|TITLE
argument_list|)
decl_stmt|;
name|comparator
operator|=
operator|new
name|EntryComparator
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|StandardField
operator|.
name|AUTHOR
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|comparator
operator|=
operator|new
name|EntryComparator
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|StandardField
operator|.
name|YEAR
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
return|return
name|comparator
return|;
block|}
DECL|method|compareEntries (List<BibEntry> originalEntries, List<BibEntry> newEntries)
specifier|private
specifier|static
name|List
argument_list|<
name|BibEntryDiff
argument_list|>
name|compareEntries
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|originalEntries
parameter_list|,
name|List
argument_list|<
name|BibEntry
argument_list|>
name|newEntries
parameter_list|)
block|{
name|List
argument_list|<
name|BibEntryDiff
argument_list|>
name|differences
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Create pointers that are incremented as the entries of each base are used in
comment|// successive order from the beginning. Entries "further down" in the new database
comment|// can also be matched.
name|int
name|positionNew
init|=
literal|0
decl_stmt|;
comment|// Create a HashSet where we can put references to entries in the new
comment|// database that we have matched. This is to avoid matching them twice.
name|Set
argument_list|<
name|Integer
argument_list|>
name|used
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|newEntries
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|BibEntry
argument_list|>
name|notMatched
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|originalEntries
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Loop through the entries of the original database, looking for exact matches in the new one.
comment|// We must finish scanning for exact matches before looking for near matches, to avoid an exact
comment|// match being "stolen" from another entry.
name|mainLoop
label|:
for|for
control|(
name|BibEntry
name|originalEntry
range|:
name|originalEntries
control|)
block|{
comment|// First check if the similarly placed entry in the other base matches exactly.
if|if
condition|(
operator|!
name|used
operator|.
name|contains
argument_list|(
name|positionNew
argument_list|)
operator|&&
operator|(
name|positionNew
operator|<
name|newEntries
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|double
name|score
init|=
name|DuplicateCheck
operator|.
name|compareEntriesStrictly
argument_list|(
name|originalEntry
argument_list|,
name|newEntries
operator|.
name|get
argument_list|(
name|positionNew
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|score
operator|>
literal|1
condition|)
block|{
name|used
operator|.
name|add
argument_list|(
name|positionNew
argument_list|)
expr_stmt|;
name|positionNew
operator|++
expr_stmt|;
continue|continue;
block|}
block|}
comment|// No? Then check if another entry matches exactly.
for|for
control|(
name|int
name|i
init|=
name|positionNew
operator|+
literal|1
init|;
name|i
operator|<
name|newEntries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|used
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|double
name|score
init|=
name|DuplicateCheck
operator|.
name|compareEntriesStrictly
argument_list|(
name|originalEntry
argument_list|,
name|newEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|score
operator|>
literal|1
condition|)
block|{
name|used
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
continue|continue
name|mainLoop
continue|;
block|}
block|}
block|}
comment|// No? Add this entry to the list of non-matched entries.
name|notMatched
operator|.
name|add
argument_list|(
name|originalEntry
argument_list|)
expr_stmt|;
block|}
comment|// Now we've found all exact matches, look through the remaining entries, looking for close matches.
for|for
control|(
name|Iterator
argument_list|<
name|BibEntry
argument_list|>
name|iteratorNotMatched
init|=
name|notMatched
operator|.
name|iterator
argument_list|()
init|;
name|iteratorNotMatched
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibEntry
name|originalEntry
init|=
name|iteratorNotMatched
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// These two variables will keep track of which entry most closely matches the one we're looking at.
name|double
name|bestMatch
init|=
literal|0
decl_stmt|;
name|int
name|bestMatchIndex
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|positionNew
operator|<
operator|(
name|newEntries
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|positionNew
init|;
name|i
operator|<
name|newEntries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|used
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|double
name|score
init|=
name|DuplicateCheck
operator|.
name|compareEntriesStrictly
argument_list|(
name|originalEntry
argument_list|,
name|newEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|score
operator|>
name|bestMatch
condition|)
block|{
name|bestMatch
operator|=
name|score
expr_stmt|;
name|bestMatchIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|bestMatch
operator|>
name|MATCH_THRESHOLD
condition|)
block|{
name|used
operator|.
name|add
argument_list|(
name|bestMatchIndex
argument_list|)
expr_stmt|;
name|iteratorNotMatched
operator|.
name|remove
argument_list|()
expr_stmt|;
name|differences
operator|.
name|add
argument_list|(
operator|new
name|BibEntryDiff
argument_list|(
name|originalEntry
argument_list|,
name|newEntries
operator|.
name|get
argument_list|(
name|bestMatchIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|differences
operator|.
name|add
argument_list|(
operator|new
name|BibEntryDiff
argument_list|(
name|originalEntry
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Finally, look if there are still untouched entries in the new database. These may have been added.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newEntries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|used
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|differences
operator|.
name|add
argument_list|(
operator|new
name|BibEntryDiff
argument_list|(
literal|null
argument_list|,
name|newEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|differences
return|;
block|}
DECL|method|compare (BibDatabaseContext base, BibDatabaseContext changed)
specifier|public
specifier|static
name|BibDatabaseDiff
name|compare
parameter_list|(
name|BibDatabaseContext
name|base
parameter_list|,
name|BibDatabaseContext
name|changed
parameter_list|)
block|{
return|return
operator|new
name|BibDatabaseDiff
argument_list|(
name|base
argument_list|,
name|changed
argument_list|)
return|;
block|}
DECL|method|getMetaDataDifferences ()
specifier|public
name|Optional
argument_list|<
name|MetaDataDiff
argument_list|>
name|getMetaDataDifferences
parameter_list|()
block|{
return|return
name|metaDataDiff
return|;
block|}
DECL|method|getPreambleDifferences ()
specifier|public
name|Optional
argument_list|<
name|PreambleDiff
argument_list|>
name|getPreambleDifferences
parameter_list|()
block|{
return|return
name|preambleDiff
return|;
block|}
DECL|method|getBibStringDifferences ()
specifier|public
name|List
argument_list|<
name|BibStringDiff
argument_list|>
name|getBibStringDifferences
parameter_list|()
block|{
return|return
name|bibStringDiffs
return|;
block|}
DECL|method|getEntryDifferences ()
specifier|public
name|List
argument_list|<
name|BibEntryDiff
argument_list|>
name|getEntryDifferences
parameter_list|()
block|{
return|return
name|entryDiffs
return|;
block|}
block|}
end_class

end_unit

