begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.bibtex.comparator
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|comparator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_class
DECL|class|GroupDiff
specifier|public
class|class
name|GroupDiff
block|{
DECL|field|originalGroupRoot
specifier|private
specifier|final
name|GroupTreeNode
name|originalGroupRoot
decl_stmt|;
DECL|field|newGroupRoot
specifier|private
specifier|final
name|GroupTreeNode
name|newGroupRoot
decl_stmt|;
DECL|method|GroupDiff (GroupTreeNode originalGroupRoot, GroupTreeNode newGroupRoot)
specifier|private
name|GroupDiff
parameter_list|(
name|GroupTreeNode
name|originalGroupRoot
parameter_list|,
name|GroupTreeNode
name|newGroupRoot
parameter_list|)
block|{
name|this
operator|.
name|originalGroupRoot
operator|=
name|originalGroupRoot
expr_stmt|;
name|this
operator|.
name|newGroupRoot
operator|=
name|newGroupRoot
expr_stmt|;
block|}
comment|/**      * This method only detects whether a change took place or not. It does not determine the type of change. This would      * be possible, but difficult to do properly, so we rather only report the change.      */
DECL|method|compare (MetaData originalMetaData, MetaData newMetaData)
specifier|public
specifier|static
name|Optional
argument_list|<
name|GroupDiff
argument_list|>
name|compare
parameter_list|(
name|MetaData
name|originalMetaData
parameter_list|,
name|MetaData
name|newMetaData
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|GroupTreeNode
argument_list|>
name|originalGroups
init|=
name|originalMetaData
operator|.
name|getGroups
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|GroupTreeNode
argument_list|>
name|newGroups
init|=
name|newMetaData
operator|.
name|getGroups
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|originalGroups
operator|.
name|equals
argument_list|(
name|newGroups
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|GroupDiff
argument_list|(
name|newGroups
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|originalGroups
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
DECL|method|getOriginalGroupRoot ()
specifier|public
name|GroupTreeNode
name|getOriginalGroupRoot
parameter_list|()
block|{
return|return
name|originalGroupRoot
return|;
block|}
DECL|method|getNewGroupRoot ()
specifier|public
name|GroupTreeNode
name|getNewGroupRoot
parameter_list|()
block|{
return|return
name|newGroupRoot
return|;
block|}
block|}
end_class

end_unit

