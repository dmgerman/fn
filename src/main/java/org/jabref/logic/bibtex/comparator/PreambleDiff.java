begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.bibtex.comparator
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|comparator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_class
DECL|class|PreambleDiff
specifier|public
class|class
name|PreambleDiff
block|{
DECL|field|originalPreamble
specifier|private
specifier|final
name|String
name|originalPreamble
decl_stmt|;
DECL|field|newPreamble
specifier|private
specifier|final
name|String
name|newPreamble
decl_stmt|;
DECL|method|PreambleDiff (String originalPreamble, String newPreamble)
specifier|private
name|PreambleDiff
parameter_list|(
name|String
name|originalPreamble
parameter_list|,
name|String
name|newPreamble
parameter_list|)
block|{
name|this
operator|.
name|originalPreamble
operator|=
name|originalPreamble
expr_stmt|;
name|this
operator|.
name|newPreamble
operator|=
name|newPreamble
expr_stmt|;
block|}
DECL|method|compare (BibDatabaseContext originalDatabase, BibDatabaseContext newDatabase)
specifier|public
specifier|static
name|Optional
argument_list|<
name|PreambleDiff
argument_list|>
name|compare
parameter_list|(
name|BibDatabaseContext
name|originalDatabase
parameter_list|,
name|BibDatabaseContext
name|newDatabase
parameter_list|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|originalPreamble
init|=
name|originalDatabase
operator|.
name|getDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|newPreamble
init|=
name|newDatabase
operator|.
name|getDatabase
argument_list|()
operator|.
name|getPreamble
argument_list|()
decl_stmt|;
if|if
condition|(
name|originalPreamble
operator|.
name|equals
argument_list|(
name|newPreamble
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|PreambleDiff
argument_list|(
name|originalPreamble
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|,
name|newPreamble
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|getNewPreamble ()
specifier|public
name|String
name|getNewPreamble
parameter_list|()
block|{
return|return
name|newPreamble
return|;
block|}
DECL|method|getOriginalPreamble ()
specifier|public
name|String
name|getOriginalPreamble
parameter_list|()
block|{
return|return
name|originalPreamble
return|;
block|}
block|}
end_class

end_unit

