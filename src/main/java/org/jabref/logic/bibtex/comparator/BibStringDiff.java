begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.bibtex.comparator
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|comparator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexString
import|;
end_import

begin_class
DECL|class|BibStringDiff
specifier|public
class|class
name|BibStringDiff
block|{
DECL|field|originalString
specifier|private
specifier|final
name|BibtexString
name|originalString
decl_stmt|;
DECL|field|newString
specifier|private
specifier|final
name|BibtexString
name|newString
decl_stmt|;
DECL|method|BibStringDiff (BibtexString originalString, BibtexString newString)
specifier|private
name|BibStringDiff
parameter_list|(
name|BibtexString
name|originalString
parameter_list|,
name|BibtexString
name|newString
parameter_list|)
block|{
name|this
operator|.
name|originalString
operator|=
name|originalString
expr_stmt|;
name|this
operator|.
name|newString
operator|=
name|newString
expr_stmt|;
block|}
DECL|method|compare (BibDatabase originalDatabase, BibDatabase newDatabase)
specifier|public
specifier|static
name|List
argument_list|<
name|BibStringDiff
argument_list|>
name|compare
parameter_list|(
name|BibDatabase
name|originalDatabase
parameter_list|,
name|BibDatabase
name|newDatabase
parameter_list|)
block|{
if|if
condition|(
name|originalDatabase
operator|.
name|hasNoStrings
argument_list|()
operator|&&
name|newDatabase
operator|.
name|hasNoStrings
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|BibStringDiff
argument_list|>
name|differences
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|BibtexString
argument_list|>
name|used
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|BibtexString
argument_list|>
name|notMatched
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// First try to match by string names.
for|for
control|(
name|BibtexString
name|original
range|:
name|originalDatabase
operator|.
name|getStringValues
argument_list|()
control|)
block|{
name|Optional
argument_list|<
name|BibtexString
argument_list|>
name|match
init|=
name|newDatabase
operator|.
name|getStringValues
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|test
lambda|->
name|test
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|original
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// We have found a string with a matching name.
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|original
operator|.
name|getContent
argument_list|()
argument_list|,
name|match
operator|.
name|get
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
condition|)
block|{
comment|// But they have non-matching contents, so we've found a change.
name|differences
operator|.
name|add
argument_list|(
operator|new
name|BibStringDiff
argument_list|(
name|original
argument_list|,
name|match
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|used
operator|.
name|add
argument_list|(
name|match
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No match for this string.
name|notMatched
operator|.
name|add
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
comment|// See if we can detect a name change for those entries that we couldn't match, based on their content
for|for
control|(
name|Iterator
argument_list|<
name|BibtexString
argument_list|>
name|iterator
init|=
name|notMatched
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BibtexString
name|original
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|BibtexString
argument_list|>
name|match
init|=
name|newDatabase
operator|.
name|getStringValues
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|test
lambda|->
name|test
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|original
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// We have found a string with the same content. It cannot have the same
comment|// name, or we would have found it above.
name|differences
operator|.
name|add
argument_list|(
operator|new
name|BibStringDiff
argument_list|(
name|original
argument_list|,
name|match
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|used
operator|.
name|add
argument_list|(
name|match
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Strings that are still not found must have been removed.
for|for
control|(
name|BibtexString
name|original
range|:
name|notMatched
control|)
block|{
name|differences
operator|.
name|add
argument_list|(
operator|new
name|BibStringDiff
argument_list|(
name|original
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Finally, see if there are remaining strings in the new database. They must have been added.
name|newDatabase
operator|.
name|getStringValues
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|test
lambda|->
operator|!
name|used
operator|.
name|contains
argument_list|(
name|test
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|newString
lambda|->
name|differences
operator|.
name|add
argument_list|(
operator|new
name|BibStringDiff
argument_list|(
literal|null
argument_list|,
name|newString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|differences
return|;
block|}
DECL|method|getOriginalString ()
specifier|public
name|BibtexString
name|getOriginalString
parameter_list|()
block|{
return|return
name|originalString
return|;
block|}
DECL|method|getNewString ()
specifier|public
name|BibtexString
name|getNewString
parameter_list|()
block|{
return|return
name|newString
return|;
block|}
block|}
end_class

end_unit

