begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.exporter
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Article
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Book
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Booklet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Conference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Inbook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Incollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Inproceedings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Manual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Mastersthesis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Misc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Phdthesis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Proceedings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Techreport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|bibtexml
operator|.
name|Unpublished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|StandardFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|StandardEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Export format for the BibTeXML format.  */
end_comment

begin_class
DECL|class|BibTeXMLExporter
specifier|public
class|class
name|BibTeXMLExporter
extends|extends
name|Exporter
block|{
DECL|field|BIBTEXML_NAMESPACE_URI
specifier|private
specifier|static
specifier|final
name|String
name|BIBTEXML_NAMESPACE_URI
init|=
literal|"http://bibtexml.sf.net/"
decl_stmt|;
DECL|field|ENGLISH
specifier|private
specifier|static
specifier|final
name|Locale
name|ENGLISH
init|=
name|Locale
operator|.
name|ENGLISH
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BibTeXMLExporter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
name|JAXBContext
name|context
decl_stmt|;
DECL|method|BibTeXMLExporter ()
specifier|public
name|BibTeXMLExporter
parameter_list|()
block|{
name|super
argument_list|(
literal|"bibtexml"
argument_list|,
literal|"BibTexXML"
argument_list|,
name|StandardFileType
operator|.
name|XML
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|export (final BibDatabaseContext databaseContext, final Path resultFile, final Charset encoding, List<BibEntry> entries)
specifier|public
name|void
name|export
parameter_list|(
specifier|final
name|BibDatabaseContext
name|databaseContext
parameter_list|,
specifier|final
name|Path
name|resultFile
parameter_list|,
specifier|final
name|Charset
name|encoding
parameter_list|,
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
throws|throws
name|SaveException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|databaseContext
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entries
argument_list|)
expr_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Only export if entries exist
return|return;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|()
decl_stmt|;
for|for
control|(
name|BibEntry
name|bibEntry
range|:
name|entries
control|)
block|{
name|Entry
name|entry
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
name|bibEntry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|entry
operator|::
name|setId
argument_list|)
expr_stmt|;
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
name|i
init|=
name|bibEntry
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|StandardEntryType
operator|.
name|Article
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Article
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|Book
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Book
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|Booklet
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Booklet
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|Conference
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Conference
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|InBook
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parseInbook
argument_list|(
operator|new
name|Inbook
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|InCollection
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Incollection
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|InProceedings
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Inproceedings
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|MastersThesis
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Mastersthesis
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|Manual
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Manual
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|Misc
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Misc
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|PhdThesis
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Phdthesis
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|Proceedings
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Proceedings
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|TechReport
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Techreport
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StandardEntryType
operator|.
name|Unpublished
operator|.
name|equals
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|parse
argument_list|(
operator|new
name|Unpublished
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"unexpected type appeared"
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|getEntry
argument_list|()
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|createMarshallerAndWriteToFile
argument_list|(
name|file
argument_list|,
name|resultFile
argument_list|)
expr_stmt|;
block|}
DECL|method|createMarshallerAndWriteToFile (File file, Path resultFile)
specifier|private
name|void
name|createMarshallerAndWriteToFile
parameter_list|(
name|File
name|file
parameter_list|,
name|Path
name|resultFile
parameter_list|)
throws|throws
name|SaveException
block|{
try|try
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Marshaller
name|marshaller
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FORMATTED_OUTPUT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|file
argument_list|,
name|resultFile
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SaveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Contains same logic as the {@link #parse(Object, BibEntry, Entry)} method, but inbook needs a special treatment, because      * the contents of inbook are stored in a List of JAXBElements. So we first need to create      * a JAXBElement for every field and then add it to the content list.      */
DECL|method|parseInbook (Inbook inbook, BibEntry bibEntry, Entry entry)
specifier|private
name|void
name|parseInbook
parameter_list|(
name|Inbook
name|inbook
parameter_list|,
name|BibEntry
name|bibEntry
parameter_list|,
name|Entry
name|entry
parameter_list|)
block|{
name|Map
argument_list|<
name|Field
argument_list|,
name|String
argument_list|>
name|fieldMap
init|=
name|bibEntry
operator|.
name|getFieldMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Field
argument_list|,
name|String
argument_list|>
name|entryField
range|:
name|fieldMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|entryField
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Field
name|key
init|=
name|entryField
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|StandardField
operator|.
name|YEAR
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|XMLGregorianCalendar
name|calendar
decl_stmt|;
try|try
block|{
name|calendar
operator|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|XMLGregorianCalendar
argument_list|>
name|year
init|=
operator|new
name|JAXBElement
argument_list|<>
argument_list|(
operator|new
name|QName
argument_list|(
name|BIBTEXML_NAMESPACE_URI
argument_list|,
literal|"year"
argument_list|)
argument_list|,
name|XMLGregorianCalendar
operator|.
name|class
argument_list|,
name|calendar
argument_list|)
decl_stmt|;
name|inbook
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|year
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"A configuration error occured"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|StandardField
operator|.
name|NUMBER
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|JAXBElement
argument_list|<
name|BigInteger
argument_list|>
name|number
init|=
operator|new
name|JAXBElement
argument_list|<>
argument_list|(
operator|new
name|QName
argument_list|(
name|BIBTEXML_NAMESPACE_URI
argument_list|,
literal|"number"
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|class
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|inbook
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|element
init|=
operator|new
name|JAXBElement
argument_list|<>
argument_list|(
operator|new
name|QName
argument_list|(
name|BIBTEXML_NAMESPACE_URI
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|inbook
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
comment|//set the entryType to the entry
name|entry
operator|.
name|setInbook
argument_list|(
name|inbook
argument_list|)
expr_stmt|;
block|}
comment|/**      * Generic method that gets an instance of an entry type (article, book, booklet ...). It also      * gets one bibEntry. Then the method checks all fields of the entry and then for all fields the method      * uses the set method of the entry type with the fieldname. So for example if a bib entry has the field      * author and the value for it is "Max Mustermann" and the given type is an article, then this method      * will invoke<Code>article.setAuthor("Max Mustermann")</Code>.<br>      *<br>      * The second part of this method is that the entry type will be set to the entry. So e.g., if the type is      * article then<Code>entry.setArticle(article)</Code> will be invoked.      *      * @param entryType The type parameterized type of the entry.      * @param bibEntry  The bib entry, which fields will be set to the entryType.      * @param entry     The bibtexml entry. The entryType will be set to this entry.      */
DECL|method|parse (T entryType, BibEntry bibEntry, Entry entry)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|parse
parameter_list|(
name|T
name|entryType
parameter_list|,
name|BibEntry
name|bibEntry
parameter_list|,
name|Entry
name|entry
parameter_list|)
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|declaredSetMethods
init|=
name|getListOfSetMethods
argument_list|(
name|entryType
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Field
argument_list|,
name|String
argument_list|>
name|entryField
range|:
name|bibEntry
operator|.
name|getFieldMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Field
name|key
init|=
name|entryField
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entryField
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|declaredSetMethods
control|)
block|{
name|String
name|methodNameWithoutSet
init|=
name|method
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"set"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|ENGLISH
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|methodNameWithoutSet
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
if|if
condition|(
name|StandardField
operator|.
name|YEAR
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
try|try
block|{
name|XMLGregorianCalendar
name|calendar
init|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|entryType
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"A configuration error occured"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
elseif|else
if|if
condition|(
name|StandardField
operator|.
name|NUMBER
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|entryType
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"The value %s of the 'number' field is not an integer and thus is ignored for the export"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
else|else
block|{
name|method
operator|.
name|invoke
argument_list|(
name|entryType
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Could not invoke method "
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|//set the entryType to the entry
name|List
argument_list|<
name|Method
argument_list|>
name|entryMethods
init|=
name|getListOfSetMethods
argument_list|(
name|entry
argument_list|)
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|entryMethods
control|)
block|{
name|String
name|methodWithoutSet
init|=
name|method
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"set"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|simpleClassName
init|=
name|entryType
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|methodWithoutSet
operator|.
name|equals
argument_list|(
name|simpleClassName
argument_list|)
condition|)
block|{
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|entry
argument_list|,
name|entryType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not set the type to the entry"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|getListOfSetMethods (T entryType)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Method
argument_list|>
name|getListOfSetMethods
parameter_list|(
name|T
name|entryType
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|entryType
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|method
lambda|->
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

