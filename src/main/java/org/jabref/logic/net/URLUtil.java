begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.net
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_class
DECL|class|URLUtil
specifier|public
class|class
name|URLUtil
block|{
DECL|field|URL_EXP
specifier|private
specifier|static
specifier|final
name|String
name|URL_EXP
init|=
literal|"^(https?|ftp)://.+"
decl_stmt|;
comment|// Detect Google search URL
DECL|field|GOOGLE_SEARCH_EXP
specifier|private
specifier|static
specifier|final
name|String
name|GOOGLE_SEARCH_EXP
init|=
literal|"^https?://(?:www\\.)?google\\.[\\.a-z]+?/url.*"
decl_stmt|;
DECL|method|URLUtil ()
specifier|private
name|URLUtil
parameter_list|()
block|{     }
comment|/**      * Cleans URLs returned by Google search.      *      *<example>      *  If you copy links from search results from Google, all links will be enriched with search meta data, e.g.      *  https://www.google.de/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&&url=http%3A%2F%2Fwww.inrg.csie.ntu.edu.tw%2Falgorithm2014%2Fhomework%2FWagner-74.pdf&ei=DifeVYHkDYWqU5W0j6gD&usg=AFQjCNFl638rl5KVta1jIMWLyb4CPSZidg&sig2=0hSSMw9XZXL3HJWwEcJtOg      *</example>      *      * @param url the Google search URL string      * @return the cleaned Google URL or @code{url} if no search URL was detected      */
DECL|method|cleanGoogleSearchURL (String url)
specifier|public
specifier|static
name|String
name|cleanGoogleSearchURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|url
operator|.
name|matches
argument_list|(
name|GOOGLE_SEARCH_EXP
argument_list|)
condition|)
block|{
return|return
name|url
return|;
block|}
comment|// Extract destination URL
try|try
block|{
name|URL
name|searchURL
init|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// URL parameters
name|String
name|query
init|=
name|searchURL
operator|.
name|getQuery
argument_list|()
decl_stmt|;
comment|// no parameters
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
comment|// extract url parameter
name|String
index|[]
name|pairs
init|=
name|query
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pair
range|:
name|pairs
control|)
block|{
comment|// "clean" url is decoded value of "url" parameter
if|if
condition|(
name|pair
operator|.
name|startsWith
argument_list|(
literal|"url="
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|pair
operator|.
name|substring
argument_list|(
name|pair
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|,
name|pair
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|decode
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|value
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
comment|// url?
if|if
condition|(
name|decode
operator|.
name|matches
argument_list|(
name|URL_EXP
argument_list|)
condition|)
block|{
return|return
name|decode
return|;
block|}
block|}
block|}
return|return
name|url
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
decl||
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
name|url
return|;
block|}
block|}
comment|/**      * Checks whether the given String is a URL.      * Currently only checks for a protocol String.      *      * @param url the String to check for a URL      * @return true if<c>url</c> contains a valid URL      */
DECL|method|isURL (String url)
specifier|public
specifier|static
name|boolean
name|isURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
name|url
operator|.
name|contains
argument_list|(
literal|"://"
argument_list|)
return|;
block|}
comment|/**      * @implNote slightly altered version based on https://gist.github.com/enginer/230e2dc2f1d213a825d5      */
DECL|method|addPath (URIBuilder base, String subPath)
specifier|public
specifier|static
name|URIBuilder
name|addPath
parameter_list|(
name|URIBuilder
name|base
parameter_list|,
name|String
name|subPath
parameter_list|)
block|{
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|subPath
argument_list|)
operator|||
literal|"/"
operator|.
name|equals
argument_list|(
name|subPath
argument_list|)
condition|)
block|{
return|return
name|base
return|;
block|}
else|else
block|{
name|base
operator|.
name|setPath
argument_list|(
name|appendSegmentToPath
argument_list|(
name|base
operator|.
name|getPath
argument_list|()
argument_list|,
name|subPath
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|base
return|;
block|}
block|}
DECL|method|appendSegmentToPath (String path, String segment)
specifier|private
specifier|static
name|String
name|appendSegmentToPath
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|segment
parameter_list|)
block|{
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|charAt
argument_list|(
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
operator|||
name|segment
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|path
operator|+
name|segment
return|;
block|}
return|return
name|path
operator|+
literal|"/"
operator|+
name|segment
return|;
block|}
block|}
end_class

end_unit

