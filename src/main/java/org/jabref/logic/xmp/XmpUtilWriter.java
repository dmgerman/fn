begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.xmp
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|DublinCoreSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|XmpSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|XmpUtilWriter
specifier|public
class|class
name|XmpUtilWriter
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XmpUtilWriter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Try to write the given BibTexEntry in the XMP-stream of the given      * PDF-file.      *      * Throws an IOException if the file cannot be read or written, so the user      * can remove a lock or cancel the operation.      *      * The method will overwrite existing BibTeX-XMP-data, but keep other      * existing metadata.      *      * This is a convenience method for writeXMP(File, BibEntry).      *      * @param filename The filename from which to open the file.      * @param entry    The entry to write.      * @param database maybenull An optional database which the given bibtex entries belong to, which will be used to      *                 resolve strings. If the database is null the strings will not be resolved.      * @throws TransformerException If the entry was malformed or unsupported.      * @throws IOException          If the file could not be written to or could not be found.      */
DECL|method|writeXmp (String fileName, BibEntry entry, BibDatabase database, XmpPreferences xmpPreferences)
specifier|public
specifier|static
name|void
name|writeXmp
parameter_list|(
name|String
name|fileName
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|BibDatabase
name|database
parameter_list|,
name|XmpPreferences
name|xmpPreferences
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
name|XmpUtilWriter
operator|.
name|writeXmp
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|entry
argument_list|,
name|database
argument_list|,
name|xmpPreferences
argument_list|)
expr_stmt|;
block|}
comment|/**      * Try to write the given BibTexEntry in the XMP-stream of the given      * PDF-file.      *      * Throws an IOException if the file cannot be read or written, so the user      * can remove a lock or cancel the operation.      *      * The method will overwrite existing BibTeX-XMP-data, but keep other      * existing metadata.      *      * This is a convenience method for writeXMP(File, Collection).      *      * @param path     The path to write to.      * @param entry    The entry to write.      * @param database maybenull An optional database which the given bibtex entries belong to, which will be used to      *                 resolve strings. If the database is null the strings will not be resolved.      * @throws TransformerException If the entry was malformed or unsupported.      * @throws IOException          If the file could not be written to or could not be found.      */
DECL|method|writeXmp (Path file, BibEntry entry, BibDatabase database, XmpPreferences xmpPreferences)
specifier|public
specifier|static
name|void
name|writeXmp
parameter_list|(
name|Path
name|file
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|BibDatabase
name|database
parameter_list|,
name|XmpPreferences
name|xmpPreferences
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibEntryList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|bibEntryList
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|XmpUtilWriter
operator|.
name|writeXmp
argument_list|(
name|file
argument_list|,
name|bibEntryList
argument_list|,
name|database
argument_list|,
name|xmpPreferences
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the information of the bib entry to the dublin core schema using      * a custom extractor.      *      * @param dcSchema  Dublin core schema, which is filled with the bib entry.      * @param entry     The entry, which is added to the dublin core metadata.      * @param database  maybenull An optional database which the given bibtex entries belong to, which will be used to      *                  resolve strings. If the database is null the strings will not be resolved.      * @param xmpPreferences    The user's xmp preferences.      */
DECL|method|writeToDCSchema (DublinCoreSchema dcSchema, BibEntry entry, BibDatabase database, XmpPreferences xmpPreferences)
specifier|private
specifier|static
name|void
name|writeToDCSchema
parameter_list|(
name|DublinCoreSchema
name|dcSchema
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|BibDatabase
name|database
parameter_list|,
name|XmpPreferences
name|xmpPreferences
parameter_list|)
block|{
name|BibEntry
name|resolvedEntry
init|=
name|XmpUtilWriter
operator|.
name|getDefaultOrDatabaseEntry
argument_list|(
name|entry
argument_list|,
name|database
argument_list|)
decl_stmt|;
name|writeToDCSchema
argument_list|(
name|dcSchema
argument_list|,
name|resolvedEntry
argument_list|,
name|xmpPreferences
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the information of the bib entry to the dublin core schema using      * a custom extractor.      *      * @param dcSchema  Dublin core schema, which is filled with the bib entry.      * @param entry     The entry, which is added to the dublin core metadata.      * @param xmpPreferences    The user's xmp preferences.      */
DECL|method|writeToDCSchema (DublinCoreSchema dcSchema, BibEntry entry, XmpPreferences xmpPreferences)
specifier|private
specifier|static
name|void
name|writeToDCSchema
parameter_list|(
name|DublinCoreSchema
name|dcSchema
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|XmpPreferences
name|xmpPreferences
parameter_list|)
block|{
name|DublinCoreExtractor
name|dcExtractor
init|=
operator|new
name|DublinCoreExtractor
argument_list|(
name|dcSchema
argument_list|,
name|xmpPreferences
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|dcExtractor
operator|.
name|fillDublinCoreSchema
argument_list|()
expr_stmt|;
block|}
comment|/**      * Try to write the given BibTexEntry as a DublinCore XMP Schema      *      * Existing DublinCore schemas in the document are not modified.      *      * @param document The pdf document to write to.      * @param entry    The BibTeX entry that is written as a schema.      * @param database maybenull An optional database which the given BibTeX entries belong to, which will be used to      *                 resolve strings. If the database is null the strings will not be resolved.      */
DECL|method|writeDublinCore (PDDocument document, BibEntry entry, BibDatabase database, XmpPreferences xmpPreferences)
specifier|public
specifier|static
name|void
name|writeDublinCore
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|BibDatabase
name|database
parameter_list|,
name|XmpPreferences
name|xmpPreferences
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|XmpUtilWriter
operator|.
name|writeDublinCore
argument_list|(
name|document
argument_list|,
name|entries
argument_list|,
name|database
argument_list|,
name|xmpPreferences
argument_list|)
expr_stmt|;
block|}
comment|/**      * Try to write the given BibTexEntries as DublinCore XMP Schemas      *      * Existing DublinCore schemas in the document are removed      *      * @param document The pdf document to write to.      * @param entries  The BibTeX entries that are written as schemas      * @param database maybenull An optional database which the given BibTeX entries belong to, which will be used to      *                 resolve strings. If the database is null the strings will not be resolved.      */
DECL|method|writeDublinCore (PDDocument document, List<BibEntry> entries, BibDatabase database, XmpPreferences xmpPreferences)
specifier|private
specifier|static
name|void
name|writeDublinCore
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|,
name|BibDatabase
name|database
parameter_list|,
name|XmpPreferences
name|xmpPreferences
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|resolvedEntries
decl_stmt|;
if|if
condition|(
name|database
operator|==
literal|null
condition|)
block|{
name|resolvedEntries
operator|=
name|entries
expr_stmt|;
block|}
else|else
block|{
name|resolvedEntries
operator|=
name|database
operator|.
name|resolveForStrings
argument_list|(
name|entries
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|PDDocumentCatalog
name|catalog
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDMetadata
name|metaRaw
init|=
name|catalog
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|XMPMetadata
name|meta
decl_stmt|;
if|if
condition|(
name|metaRaw
operator|==
literal|null
condition|)
block|{
name|meta
operator|=
name|XMPMetadata
operator|.
name|createXMPMetadata
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|meta
operator|=
name|XmpUtilShared
operator|.
name|parseXmpMetadata
argument_list|(
name|metaRaw
operator|.
name|createInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Remove all current Dublin-Core schemas
name|meta
operator|.
name|removeSchema
argument_list|(
name|meta
operator|.
name|getDublinCoreSchema
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|resolvedEntries
control|)
block|{
name|DublinCoreSchema
name|dcSchema
init|=
name|meta
operator|.
name|createAndAddDublinCoreSchema
argument_list|()
decl_stmt|;
name|XmpUtilWriter
operator|.
name|writeToDCSchema
argument_list|(
name|dcSchema
argument_list|,
name|entry
argument_list|,
literal|null
argument_list|,
name|xmpPreferences
argument_list|)
expr_stmt|;
block|}
comment|// Save to stream and then input that stream to the PDF
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|XmpSerializer
name|serializer
init|=
operator|new
name|XmpSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|meta
argument_list|,
name|os
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|PDMetadata
name|metadataStream
init|=
operator|new
name|PDMetadata
argument_list|(
name|document
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|catalog
operator|.
name|setMetadata
argument_list|(
name|metadataStream
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method generates an xmp metadata string in dublin core format.      *<br/>      *      * @param entries   A list of entries, which are added to the dublin core metadata.      * @param xmpPreferences    The user's xmp preferences.      *      * @return  If something goes wrong (e.g. an exception is thrown), the method returns an empty string,      *          otherwise it returns the xmp metadata as a string in dublin core format.      */
DECL|method|generateXmpString (List<BibEntry> entries, XmpPreferences xmpPreferences)
specifier|public
specifier|static
name|String
name|generateXmpString
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|,
name|XmpPreferences
name|xmpPreferences
parameter_list|)
block|{
name|XMPMetadata
name|meta
init|=
name|XMPMetadata
operator|.
name|createXMPMetadata
argument_list|()
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|DublinCoreSchema
name|dcSchema
init|=
name|meta
operator|.
name|createAndAddDublinCoreSchema
argument_list|()
decl_stmt|;
name|XmpUtilWriter
operator|.
name|writeToDCSchema
argument_list|(
name|dcSchema
argument_list|,
name|entry
argument_list|,
name|xmpPreferences
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|XmpSerializer
name|serializer
init|=
operator|new
name|XmpSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|meta
argument_list|,
name|os
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|os
operator|.
name|toString
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Tranformation into xmp not possible: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Unsupported encoding to UTF-8 of bib entries in xmp metadata."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"IO Exception thrown by closing the output stream."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
comment|/**      * Try to write the given BibTexEntry in the Document Information (the      * properties of the pdf).      *      * Existing fields values are overriden if the bibtex entry has the      * corresponding value set.      *      * @param document The pdf document to write to.      * @param entry    The Bibtex entry that is written into the PDF properties. *      * @param database maybenull An optional database which the given bibtex entries belong to, which will be used to      *                 resolve strings. If the database is null the strings will not be resolved.      */
DECL|method|writeDocumentInformation (PDDocument document, BibEntry entry, BibDatabase database, XmpPreferences xmpPreferences)
specifier|private
specifier|static
name|void
name|writeDocumentInformation
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|BibDatabase
name|database
parameter_list|,
name|XmpPreferences
name|xmpPreferences
parameter_list|)
block|{
name|PDDocumentInformation
name|di
init|=
name|document
operator|.
name|getDocumentInformation
argument_list|()
decl_stmt|;
name|BibEntry
name|resolvedEntry
init|=
name|XmpUtilWriter
operator|.
name|getDefaultOrDatabaseEntry
argument_list|(
name|entry
argument_list|,
name|database
argument_list|)
decl_stmt|;
comment|// Query privacy filter settings
name|boolean
name|useXmpPrivacyFilter
init|=
name|xmpPreferences
operator|.
name|isUseXMPPrivacyFilter
argument_list|()
decl_stmt|;
comment|// Fields for which not to write XMP data later on:
name|Set
argument_list|<
name|String
argument_list|>
name|filters
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|xmpPreferences
operator|.
name|getXmpPrivacyFilter
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set all the values including key and entryType
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|field
range|:
name|resolvedEntry
operator|.
name|getFieldMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|field
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|fieldContent
init|=
name|field
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|useXmpPrivacyFilter
operator|&&
name|filters
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
comment|// erase field instead of adding it
if|if
condition|(
name|FieldName
operator|.
name|AUTHOR
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|di
operator|.
name|setAuthor
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FieldName
operator|.
name|TITLE
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|di
operator|.
name|setTitle
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FieldName
operator|.
name|KEYWORDS
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|di
operator|.
name|setKeywords
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FieldName
operator|.
name|ABSTRACT
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|di
operator|.
name|setSubject
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|di
operator|.
name|setCustomMetadataValue
argument_list|(
literal|"bibtex/"
operator|+
name|fieldName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|FieldName
operator|.
name|AUTHOR
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|di
operator|.
name|setAuthor
argument_list|(
name|fieldContent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FieldName
operator|.
name|TITLE
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|di
operator|.
name|setTitle
argument_list|(
name|fieldContent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FieldName
operator|.
name|KEYWORDS
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|di
operator|.
name|setKeywords
argument_list|(
name|fieldContent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FieldName
operator|.
name|ABSTRACT
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|di
operator|.
name|setSubject
argument_list|(
name|fieldContent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|di
operator|.
name|setCustomMetadataValue
argument_list|(
literal|"bibtex/"
operator|+
name|fieldName
argument_list|,
name|fieldContent
argument_list|)
expr_stmt|;
block|}
block|}
name|di
operator|.
name|setCustomMetadataValue
argument_list|(
literal|"bibtex/entrytype"
argument_list|,
name|StringUtil
operator|.
name|capitalizeFirst
argument_list|(
name|resolvedEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Try to write the given BibTexEntry in the XMP-stream of the given      * PDF-file.      *      * Throws an IOException if the file cannot be read or written, so the user      * can remove a lock or cancel the operation.      *      * The method will overwrite existing BibTeX-XMP-data, but keep other      * existing metadata.      *      * @param file          The file to write the entries to.      * @param bibtexEntries The entries to write to the file. *      * @param database      maybenull An optional database which the given bibtex entries belong to, which will be used      *                      to resolve strings. If the database is null the strings will not be resolved.      * @param writePDFInfo  Write information also in PDF document properties      * @throws TransformerException If the entry was malformed or unsupported.      * @throws IOException          If the file could not be written to or could not be found.      */
DECL|method|writeXmp (Path path, List<BibEntry> bibtexEntries, BibDatabase database, XmpPreferences xmpPreferences)
specifier|public
specifier|static
name|void
name|writeXmp
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibtexEntries
parameter_list|,
name|BibDatabase
name|database
parameter_list|,
name|XmpPreferences
name|xmpPreferences
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|resolvedEntries
decl_stmt|;
if|if
condition|(
name|database
operator|==
literal|null
condition|)
block|{
name|resolvedEntries
operator|=
name|bibtexEntries
expr_stmt|;
block|}
else|else
block|{
name|resolvedEntries
operator|=
name|database
operator|.
name|resolveForStrings
argument_list|(
name|bibtexEntries
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|PDDocument
name|document
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EncryptedPdfsNotSupportedException
argument_list|()
throw|;
block|}
comment|// Write schemas (PDDocumentInformation and DublinCoreSchema) to the document metadata
if|if
condition|(
name|resolvedEntries
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|XmpUtilWriter
operator|.
name|writeDocumentInformation
argument_list|(
name|document
argument_list|,
name|resolvedEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
name|xmpPreferences
argument_list|)
expr_stmt|;
name|XmpUtilWriter
operator|.
name|writeDublinCore
argument_list|(
name|document
argument_list|,
name|resolvedEntries
argument_list|,
literal|null
argument_list|,
name|xmpPreferences
argument_list|)
expr_stmt|;
block|}
comment|// Save
try|try
block|{
name|document
operator|.
name|save
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Could not write XMP metadata"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TransformerException
argument_list|(
literal|"Could not write XMP metadata: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getDefaultOrDatabaseEntry (BibEntry defaultEntry, BibDatabase database)
specifier|private
specifier|static
name|BibEntry
name|getDefaultOrDatabaseEntry
parameter_list|(
name|BibEntry
name|defaultEntry
parameter_list|,
name|BibDatabase
name|database
parameter_list|)
block|{
if|if
condition|(
name|database
operator|==
literal|null
condition|)
block|{
return|return
name|defaultEntry
return|;
block|}
else|else
block|{
return|return
name|database
operator|.
name|resolveForStrings
argument_list|(
name|defaultEntry
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

