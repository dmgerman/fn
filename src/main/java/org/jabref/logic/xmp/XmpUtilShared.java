begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.xmp
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|DomXmpParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|XmpParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * XMPUtilShared provides support for reading (@link XMPUtilReader) and writing (@link XMPUtilWriter) BibTex data as XMP-Metadata  * in PDF-documents.  */
end_comment

begin_class
DECL|class|XmpUtilShared
specifier|public
class|class
name|XmpUtilShared
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XmpUtilShared
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|XmpUtilShared ()
specifier|private
name|XmpUtilShared
parameter_list|()
block|{     }
DECL|method|parseXmpMetadata (InputStream is)
specifier|protected
specifier|static
name|XMPMetadata
name|parseXmpMetadata
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|XMPMetadata
name|meta
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DomXmpParser
name|parser
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
name|meta
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|meta
return|;
block|}
catch|catch
parameter_list|(
name|XmpParsingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Will try to read XMP metadata from the given file, returning whether      * metadata was found.      *      * Caution: This method is as expensive as it is reading the actual metadata      * itself from the PDF.      *      * @param path the path to the PDF.      * @return whether a BibEntry was found in the given PDF.      */
DECL|method|hasMetadata (Path path, XmpPreferences xmpPreferences)
specifier|public
specifier|static
name|boolean
name|hasMetadata
parameter_list|(
name|Path
name|path
parameter_list|,
name|XmpPreferences
name|xmpPreferences
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibEntries
init|=
name|XmpUtilReader
operator|.
name|readXmp
argument_list|(
name|path
argument_list|,
name|xmpPreferences
argument_list|)
decl_stmt|;
return|return
operator|!
name|bibEntries
operator|.
name|isEmpty
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EncryptedPdfsNotSupportedException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Encryption not supported by XMPUtil"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|XmpUtilShared
operator|.
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"No metadata was found. Path: "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

