begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.xmp
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|FieldFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|InternalField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|types
operator|.
name|EntryTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentInformation
import|;
end_import

begin_class
DECL|class|DocumentInformationExtractor
specifier|public
class|class
name|DocumentInformationExtractor
block|{
DECL|field|documentInformation
specifier|private
specifier|final
name|PDDocumentInformation
name|documentInformation
decl_stmt|;
DECL|field|bibEntry
specifier|private
specifier|final
name|BibEntry
name|bibEntry
decl_stmt|;
DECL|method|DocumentInformationExtractor (PDDocumentInformation documentInformation)
specifier|public
name|DocumentInformationExtractor
parameter_list|(
name|PDDocumentInformation
name|documentInformation
parameter_list|)
block|{
name|this
operator|.
name|documentInformation
operator|=
name|documentInformation
expr_stmt|;
name|this
operator|.
name|bibEntry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
block|}
DECL|method|extractAuthor ()
specifier|private
name|void
name|extractAuthor
parameter_list|()
block|{
name|String
name|s
init|=
name|documentInformation
operator|.
name|getAuthor
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|bibEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extractTitle ()
specifier|private
name|void
name|extractTitle
parameter_list|()
block|{
name|String
name|s
init|=
name|documentInformation
operator|.
name|getTitle
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|bibEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extractKeywords ()
specifier|private
name|void
name|extractKeywords
parameter_list|()
block|{
name|String
name|s
init|=
name|documentInformation
operator|.
name|getKeywords
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|bibEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|KEYWORDS
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extractSubject ()
specifier|private
name|void
name|extractSubject
parameter_list|()
block|{
name|String
name|s
init|=
name|documentInformation
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|bibEntry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|ABSTRACT
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extractOtherFields ()
specifier|private
name|void
name|extractOtherFields
parameter_list|()
block|{
name|COSDictionary
name|dict
init|=
name|documentInformation
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|COSName
argument_list|,
name|COSBase
argument_list|>
name|o
range|:
name|dict
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|o
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"bibtex/"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|dict
operator|.
name|getString
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|"bibtex/"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
name|FieldFactory
operator|.
name|parseField
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|InternalField
operator|.
name|TYPE_HEADER
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|bibEntry
operator|.
name|setType
argument_list|(
name|EntryTypeFactory
operator|.
name|parse
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bibEntry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Function for retrieving a BibEntry from the      * PDDocumentInformation in a PDF file.      *      * To understand how to get hold of a PDDocumentInformation have a look in      * the test cases for XMPUtilTest.      *      * The BibEntry is build by mapping individual fields in the document      * information (like author, title, keywords) to fields in a bibtex entry.      *      * @return The bibtex entry found in the document information.      */
DECL|method|extractBibtexEntry ()
specifier|public
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|extractBibtexEntry
parameter_list|()
block|{
name|bibEntry
operator|.
name|setType
argument_list|(
name|BibEntry
operator|.
name|DEFAULT_TYPE
argument_list|)
expr_stmt|;
name|this
operator|.
name|extractAuthor
argument_list|()
expr_stmt|;
name|this
operator|.
name|extractTitle
argument_list|()
expr_stmt|;
name|this
operator|.
name|extractKeywords
argument_list|()
expr_stmt|;
name|this
operator|.
name|extractSubject
argument_list|()
expr_stmt|;
name|this
operator|.
name|extractOtherFields
argument_list|()
expr_stmt|;
if|if
condition|(
name|bibEntry
operator|.
name|getFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|bibEntry
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

