begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.logging
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|impl
operator|.
name|MutableLogEvent
import|;
end_import

begin_comment
comment|/**  * This class is used for storing and archiving all message output of JabRef as log events.  * To listen to changes on the stored logs one can bind to the {@code messagesProperty}.  */
end_comment

begin_class
DECL|class|LogMessages
specifier|public
class|class
name|LogMessages
block|{
DECL|field|instance
specifier|private
specifier|static
name|LogMessages
name|instance
init|=
operator|new
name|LogMessages
argument_list|()
decl_stmt|;
DECL|field|messages
specifier|private
specifier|final
name|ObservableList
argument_list|<
name|LogEvent
argument_list|>
name|messages
init|=
name|FXCollections
operator|.
name|observableArrayList
argument_list|()
decl_stmt|;
DECL|method|LogMessages ()
specifier|private
name|LogMessages
parameter_list|()
block|{     }
DECL|method|getInstance ()
specifier|public
specifier|static
name|LogMessages
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
DECL|method|getMessages ()
specifier|public
name|ObservableList
argument_list|<
name|LogEvent
argument_list|>
name|getMessages
parameter_list|()
block|{
return|return
name|FXCollections
operator|.
name|unmodifiableObservableList
argument_list|(
name|messages
argument_list|)
return|;
block|}
DECL|method|add (LogEvent event)
specifier|public
name|void
name|add
parameter_list|(
name|LogEvent
name|event
parameter_list|)
block|{
comment|// We need to make a copy as instances of LogEvent are reused by log4j
name|MutableLogEvent
name|copy
init|=
operator|new
name|MutableLogEvent
argument_list|()
decl_stmt|;
name|copy
operator|.
name|initFrom
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|messages
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

