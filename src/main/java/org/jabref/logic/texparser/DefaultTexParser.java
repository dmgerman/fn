begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.texparser
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|texparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|texparser
operator|.
name|TexParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|texparser
operator|.
name|TexParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DefaultTexParser
specifier|public
class|class
name|DefaultTexParser
implements|implements
name|TexParser
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultTexParser
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * It is allowed to add new cite commands for pattern matching.      *      *<p>Some valid examples: "citep", "[cC]ite", "[cC]ite(author|title|year|t|p)?"      *      *<p>TODO: Add support for multicite commands.      */
DECL|field|CITE_COMMANDS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|CITE_COMMANDS
init|=
block|{
literal|"[cC]ite(alt|alp|author|authorfull|date|num|p|t|text|title|url|year|yearpar)?"
block|,
literal|"([aA]|fnote|foot|footfull|full|no|[nN]ote|[pP]aren|[pP]note|[tT]ext|[sS]mart|super)cite"
block|,
literal|"footcitetext"
block|}
decl_stmt|;
DECL|field|CITE_GROUP
specifier|private
specifier|static
specifier|final
name|String
name|CITE_GROUP
init|=
literal|"key"
decl_stmt|;
DECL|field|CITE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|CITE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\\\\(%s)\\*?(?:\\[(?:[^\\]]*)\\]){0,2}\\{(?<%s>[^\\}]*)\\}"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|"|"
argument_list|,
name|CITE_COMMANDS
argument_list|)
argument_list|,
name|CITE_GROUP
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|INCLUDE_GROUP
specifier|private
specifier|static
specifier|final
name|String
name|INCLUDE_GROUP
init|=
literal|"file"
decl_stmt|;
DECL|field|INCLUDE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|INCLUDE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\\\\(?:include|input)\\{(?<%s>[^\\}]*)\\}"
argument_list|,
name|INCLUDE_GROUP
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|TEX_EXT
specifier|private
specifier|static
specifier|final
name|String
name|TEX_EXT
init|=
literal|".tex"
decl_stmt|;
DECL|field|result
specifier|private
specifier|final
name|TexParserResult
name|result
decl_stmt|;
DECL|method|DefaultTexParser ()
specifier|public
name|DefaultTexParser
parameter_list|()
block|{
name|this
operator|.
name|result
operator|=
operator|new
name|TexParserResult
argument_list|()
expr_stmt|;
block|}
DECL|method|getResult ()
specifier|public
name|TexParserResult
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|parse (String citeString)
specifier|public
name|TexParserResult
name|parse
parameter_list|(
name|String
name|citeString
parameter_list|)
block|{
name|matchCitation
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|citeString
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|parse (Path texFile)
specifier|public
name|TexParserResult
name|parse
parameter_list|(
name|Path
name|texFile
parameter_list|)
block|{
return|return
name|parse
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|texFile
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parse (List<Path> texFiles)
specifier|public
name|TexParserResult
name|parse
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|texFiles
parameter_list|)
block|{
return|return
name|parse
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|texFiles
argument_list|)
return|;
block|}
comment|/**      * Parse a list of TEX files for searching a given entry.      *      * @param entryKey Optional that contains the cite key we are searching or an empty string for all entries      * @param texFiles List of Path objects linked to a TEX file      * @return a TexParserResult, which contains all data related to the bibliographic entries      */
DECL|method|parse (Optional<String> entryKey, List<Path> texFiles)
specifier|public
name|TexParserResult
name|parse
parameter_list|(
name|Optional
argument_list|<
name|String
argument_list|>
name|entryKey
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|texFiles
parameter_list|)
block|{
name|result
operator|.
name|addFiles
argument_list|(
name|texFiles
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|referencedFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|texFiles
control|)
block|{
try|try
init|(
name|LineNumberReader
name|lineNumberReader
init|=
operator|new
name|LineNumberReader
argument_list|(
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|file
argument_list|)
argument_list|)
init|)
block|{
comment|// Skip comments and blank lines.
name|lineNumberReader
operator|.
name|lines
argument_list|()
operator|.
name|filter
argument_list|(
name|line
lambda|->
operator|!
name|line
operator|.
name|isEmpty
argument_list|()
operator|&&
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'%'
argument_list|)
operator|.
name|forEach
argument_list|(
name|line
lambda|->
block|{
comment|// Check if the current line contains a given entry (or 'entry' parameter is null).
lambda|if (!entryKey.isPresent(
argument_list|)
operator|||
name|line
operator|.
name|contains
argument_list|(
name|entryKey
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
block|)
block|{
name|matchCitation
argument_list|(
name|entryKey
argument_list|,
name|file
argument_list|,
name|lineNumberReader
operator|.
name|getLineNumber
argument_list|()
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|matchNestedFile
argument_list|(
name|file
argument_list|,
name|texFiles
argument_list|,
name|referencedFiles
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|)
function|;
block|}
end_class

begin_catch
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error opening the TEX file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_comment
unit|}
comment|// Parse all files referenced by TEX files, recursively.
end_comment

begin_expr_stmt
unit|if
operator|(
operator|!
name|referencedFiles
operator|.
name|isEmpty
argument_list|()
operator|)
block|{
name|parse
argument_list|(
name|entryKey
argument_list|,
name|referencedFiles
argument_list|)
block|;         }
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_comment
unit|}
comment|/**      * Find cites along a specific line and store them.      */
end_comment

begin_function
DECL|method|matchCitation (Optional<String> entryKey, Path file, int lineNumber, String line)
unit|private
name|void
name|matchCitation
parameter_list|(
name|Optional
argument_list|<
name|String
argument_list|>
name|entryKey
parameter_list|,
name|Path
name|file
parameter_list|,
name|int
name|lineNumber
parameter_list|,
name|String
name|line
parameter_list|)
block|{
name|Matcher
name|citeMatch
init|=
name|CITE_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
while|while
condition|(
name|citeMatch
operator|.
name|find
argument_list|()
condition|)
block|{
name|Arrays
operator|.
name|stream
argument_list|(
name|citeMatch
operator|.
name|group
argument_list|(
name|CITE_GROUP
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|key
lambda|->
operator|!
name|entryKey
operator|.
name|isPresent
argument_list|()
operator|||
name|key
operator|.
name|equals
argument_list|(
name|entryKey
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|key
lambda|->
name|result
operator|.
name|addKey
argument_list|(
name|key
argument_list|,
name|file
argument_list|,
name|lineNumber
argument_list|,
name|citeMatch
operator|.
name|start
argument_list|()
argument_list|,
name|citeMatch
operator|.
name|end
argument_list|()
argument_list|,
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Find inputs and includes along a specific line and store them for parsing later.      */
end_comment

begin_function
DECL|method|matchNestedFile (Path file, List<Path> texFiles, List<Path> referencedFiles, String line)
specifier|private
name|void
name|matchNestedFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|texFiles
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|referencedFiles
parameter_list|,
name|String
name|line
parameter_list|)
block|{
name|Matcher
name|includeMatch
init|=
name|INCLUDE_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
while|while
condition|(
name|includeMatch
operator|.
name|find
argument_list|()
condition|)
block|{
name|StringBuilder
name|include
init|=
operator|new
name|StringBuilder
argument_list|(
name|includeMatch
operator|.
name|group
argument_list|(
name|INCLUDE_GROUP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|include
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|TEX_EXT
argument_list|)
condition|)
block|{
name|include
operator|.
name|append
argument_list|(
name|TEX_EXT
argument_list|)
expr_stmt|;
block|}
name|Path
name|folder
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|inputFile
init|=
operator|(
name|folder
operator|==
literal|null
operator|)
condition|?
name|Paths
operator|.
name|get
argument_list|(
name|include
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|folder
operator|.
name|resolve
argument_list|(
name|include
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texFiles
operator|.
name|contains
argument_list|(
name|inputFile
argument_list|)
condition|)
block|{
name|referencedFiles
operator|.
name|add
argument_list|(
name|inputFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

unit|}
end_unit

