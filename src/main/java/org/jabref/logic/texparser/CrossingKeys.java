begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.texparser
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|texparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|texparser
operator|.
name|CrossingKeysResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|texparser
operator|.
name|TexParserResult
import|;
end_import

begin_class
DECL|class|CrossingKeys
specifier|public
class|class
name|CrossingKeys
block|{
DECL|field|result
specifier|private
specifier|final
name|CrossingKeysResult
name|result
decl_stmt|;
DECL|method|CrossingKeys (TexParserResult texParserResult, BibDatabase masterDatabase)
specifier|public
name|CrossingKeys
parameter_list|(
name|TexParserResult
name|texParserResult
parameter_list|,
name|BibDatabase
name|masterDatabase
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
operator|new
name|CrossingKeysResult
argument_list|(
name|texParserResult
argument_list|,
name|masterDatabase
argument_list|)
expr_stmt|;
block|}
DECL|method|getResult ()
specifier|public
name|CrossingKeysResult
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
comment|/**      * Look for an equivalent BibTeX entry within the reference database for all keys inside of the TEX files.      */
DECL|method|resolveKeys ()
specifier|public
name|CrossingKeysResult
name|resolveKeys
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|result
operator|.
name|getCitationsKeySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keySet
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|checkEntryNewDatabase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry
init|=
name|result
operator|.
name|getEntryMasterDatabase
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|result
operator|.
name|insertEntry
argument_list|(
name|entry
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|resolveCrossReferences
argument_list|(
name|entry
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|addUnresolvedKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Find cross references for inserting into the new database.      */
DECL|method|resolveCrossReferences (BibEntry entry)
specifier|private
name|void
name|resolveCrossReferences
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|CROSSREF
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|crossRef
lambda|->
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|checkEntryNewDatabase
argument_list|(
name|crossRef
argument_list|)
condition|)
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|refEntry
init|=
name|result
operator|.
name|getEntryMasterDatabase
argument_list|(
name|crossRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|refEntry
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|result
operator|.
name|insertEntry
argument_list|(
name|refEntry
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|increaseCrossRefsCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|addUnresolvedKey
argument_list|(
name|crossRef
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

