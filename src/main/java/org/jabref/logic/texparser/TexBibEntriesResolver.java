begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.texparser
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|texparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|OpenDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|texparser
operator|.
name|TexBibEntriesResolverResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|texparser
operator|.
name|TexParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|FileUpdateMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TexBibEntriesResolver
specifier|public
class|class
name|TexBibEntriesResolver
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TexBibEntriesResolver
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|masterDatabase
specifier|private
specifier|final
name|BibDatabase
name|masterDatabase
decl_stmt|;
DECL|field|importFormatPreferences
specifier|private
specifier|final
name|ImportFormatPreferences
name|importFormatPreferences
decl_stmt|;
DECL|field|fileMonitor
specifier|private
specifier|final
name|FileUpdateMonitor
name|fileMonitor
decl_stmt|;
DECL|method|TexBibEntriesResolver (BibDatabase masterDatabase, ImportFormatPreferences importFormatPreferences, FileUpdateMonitor fileMonitor)
specifier|public
name|TexBibEntriesResolver
parameter_list|(
name|BibDatabase
name|masterDatabase
parameter_list|,
name|ImportFormatPreferences
name|importFormatPreferences
parameter_list|,
name|FileUpdateMonitor
name|fileMonitor
parameter_list|)
block|{
name|this
operator|.
name|masterDatabase
operator|=
name|masterDatabase
expr_stmt|;
name|this
operator|.
name|importFormatPreferences
operator|=
name|importFormatPreferences
expr_stmt|;
name|this
operator|.
name|fileMonitor
operator|=
name|fileMonitor
expr_stmt|;
block|}
comment|/**      * Resolve all BibTeX entries and check if they are in the given database.      */
DECL|method|resolve (TexParserResult texParserResult)
specifier|public
name|TexBibEntriesResolverResult
name|resolve
parameter_list|(
name|TexParserResult
name|texParserResult
parameter_list|)
block|{
name|TexBibEntriesResolverResult
name|resolverResult
init|=
operator|new
name|TexBibEntriesResolverResult
argument_list|(
name|texParserResult
argument_list|)
decl_stmt|;
comment|// Preload databases from BIB files.
name|Map
argument_list|<
name|Path
argument_list|,
name|BibDatabase
argument_list|>
name|bibDatabases
init|=
name|resolverResult
operator|.
name|getBibFiles
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|distinct
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|path
lambda|->
name|OpenDatabase
operator|.
name|loadDatabase
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|importFormatPreferences
argument_list|,
name|fileMonitor
argument_list|)
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Get all pairs Entry<String entryKey, Citation>.
name|texParserResult
operator|.
name|getCitations
argument_list|()
operator|.
name|entries
argument_list|()
operator|.
name|forEach
argument_list|(
name|mapEntry
lambda|->
comment|// Load the associated BIB file.
name|texParserResult
operator|.
name|getBibFiles
argument_list|()
operator|.
name|get
argument_list|(
name|mapEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|bibFile
lambda|->
comment|// Get a specific entry from an entryKey.
name|bibDatabases
operator|.
name|get
argument_list|(
name|bibFile
argument_list|)
operator|.
name|getEntriesByKey
argument_list|(
name|mapEntry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|databaseEntry
operator|=
name|masterDatabase
operator|.
name|getEntryByKey
argument_list|(
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|;
comment|// Check if there is already an entry with the same key in the given database.
argument_list|if
operator|(
operator|!
name|databaseEntry
operator|.
name|isPresent
argument_list|()
operator|||
operator|!
name|databaseEntry
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
operator|)
block|{
comment|// Add cross-referencing data to the entry (fill empty fields).
name|bibDatabases
operator|.
name|get
argument_list|(
name|bibFile
argument_list|)
operator|.
name|getReferencedEntry
argument_list|(
name|entry
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|refEntry
lambda|->
name|refEntry
operator|.
name|getFields
argument_list|()
operator|.
name|forEach
argument_list|(
name|field
lambda|->
name|entry
operator|.
name|getFieldMap
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|field
argument_list|,
name|refEntry
operator|.
name|getFieldOrAlias
argument_list|(
name|field
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
block|;
name|resolverResult
operator|.
name|addEntry
argument_list|(
name|entry
argument_list|)
block|;                             }
block|}
block|)
end_class

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|resolverResult
return|;
end_return

unit|} }
end_unit

