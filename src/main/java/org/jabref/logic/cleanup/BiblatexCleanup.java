begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.cleanup
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|CleanupJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_comment
comment|/**  * Converts the entry to biblatex format.  */
end_comment

begin_class
DECL|class|BiblatexCleanup
specifier|public
class|class
name|BiblatexCleanup
implements|implements
name|CleanupJob
block|{
annotation|@
name|Override
DECL|method|cleanup (BibEntry entry)
specifier|public
name|List
argument_list|<
name|FieldChange
argument_list|>
name|cleanup
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|alias
range|:
name|EntryConverter
operator|.
name|FIELD_ALIASES_TEX_TO_LTX
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|oldFieldName
init|=
name|alias
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|newFieldName
init|=
name|alias
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getField
argument_list|(
name|oldFieldName
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|oldValue
lambda|->
block|{
if|if
condition|(
operator|!
name|oldValue
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
name|entry
operator|.
name|getField
argument_list|(
name|newFieldName
argument_list|)
operator|.
name|isPresent
argument_list|()
operator|)
condition|)
block|{
comment|// There is content in the old field and no value in the new, so just copy
name|entry
operator|.
name|setField
argument_list|(
name|newFieldName
argument_list|,
name|oldValue
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|changes
operator|::
name|add
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
name|oldFieldName
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|changes
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Dates: create date out of year and month, save it and delete old fields
comment|// If there already exists a non blank/empty value for the field date, it is not overwritten
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|)
argument_list|)
condition|)
block|{
name|entry
operator|.
name|getFieldOrAlias
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|newDate
lambda|->
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|,
name|newDate
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|changes
operator|::
name|add
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|changes
operator|::
name|add
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
name|FieldName
operator|.
name|MONTH
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|changes
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|changes
return|;
block|}
block|}
end_class

end_unit

