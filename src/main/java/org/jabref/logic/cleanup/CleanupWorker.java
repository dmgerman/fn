begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.cleanup
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatterPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|CleanupJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FileDirectoryPreferences
import|;
end_import

begin_class
DECL|class|CleanupWorker
specifier|public
class|class
name|CleanupWorker
block|{
DECL|field|databaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|fileNamePattern
specifier|private
specifier|final
name|String
name|fileNamePattern
decl_stmt|;
DECL|field|fileDirPattern
specifier|private
specifier|final
name|String
name|fileDirPattern
decl_stmt|;
DECL|field|layoutPrefs
specifier|private
specifier|final
name|LayoutFormatterPreferences
name|layoutPrefs
decl_stmt|;
DECL|field|fileDirectoryPreferences
specifier|private
specifier|final
name|FileDirectoryPreferences
name|fileDirectoryPreferences
decl_stmt|;
DECL|field|unsuccessfulRenames
specifier|private
name|int
name|unsuccessfulRenames
decl_stmt|;
DECL|method|CleanupWorker (BibDatabaseContext databaseContext, CleanupPreferences cleanupPreferences)
specifier|public
name|CleanupWorker
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|CleanupPreferences
name|cleanupPreferences
parameter_list|)
block|{
name|this
operator|.
name|databaseContext
operator|=
name|databaseContext
expr_stmt|;
name|this
operator|.
name|fileNamePattern
operator|=
name|cleanupPreferences
operator|.
name|getFileNamePattern
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileDirPattern
operator|=
name|cleanupPreferences
operator|.
name|getFileDirPattern
argument_list|()
expr_stmt|;
name|this
operator|.
name|layoutPrefs
operator|=
name|cleanupPreferences
operator|.
name|getLayoutFormatterPreferences
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileDirectoryPreferences
operator|=
name|cleanupPreferences
operator|.
name|getFileDirectoryPreferences
argument_list|()
expr_stmt|;
block|}
DECL|method|getUnsuccessfulRenames ()
specifier|public
name|int
name|getUnsuccessfulRenames
parameter_list|()
block|{
return|return
name|unsuccessfulRenames
return|;
block|}
DECL|method|cleanup (CleanupPreset preset, BibEntry entry)
specifier|public
name|List
argument_list|<
name|FieldChange
argument_list|>
name|cleanup
parameter_list|(
name|CleanupPreset
name|preset
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|preset
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CleanupJob
argument_list|>
name|jobs
init|=
name|determineCleanupActions
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CleanupJob
name|job
range|:
name|jobs
control|)
block|{
name|changes
operator|.
name|addAll
argument_list|(
name|job
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|changes
return|;
block|}
DECL|method|determineCleanupActions (CleanupPreset preset)
specifier|private
name|List
argument_list|<
name|CleanupJob
argument_list|>
name|determineCleanupActions
parameter_list|(
name|CleanupPreset
name|preset
parameter_list|)
block|{
name|List
argument_list|<
name|CleanupJob
argument_list|>
name|jobs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|preset
operator|.
name|isConvertToBiblatex
argument_list|()
condition|)
block|{
name|jobs
operator|.
name|add
argument_list|(
operator|new
name|ConvertToBiblatexCleanup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preset
operator|.
name|isConvertToBibtex
argument_list|()
condition|)
block|{
name|jobs
operator|.
name|add
argument_list|(
operator|new
name|ConvertToBibtexCleanup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preset
operator|.
name|getFormatterCleanups
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|jobs
operator|.
name|addAll
argument_list|(
name|preset
operator|.
name|getFormatterCleanups
argument_list|()
operator|.
name|getConfiguredActions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preset
operator|.
name|isCleanUpUpgradeExternalLinks
argument_list|()
condition|)
block|{
name|jobs
operator|.
name|add
argument_list|(
operator|new
name|UpgradePdfPsToFileCleanup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preset
operator|.
name|isCleanUpDOI
argument_list|()
condition|)
block|{
name|jobs
operator|.
name|add
argument_list|(
operator|new
name|DoiCleanup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preset
operator|.
name|isCleanUpISSN
argument_list|()
condition|)
block|{
name|jobs
operator|.
name|add
argument_list|(
operator|new
name|ISSNCleanup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preset
operator|.
name|isFixFileLinks
argument_list|()
condition|)
block|{
name|jobs
operator|.
name|add
argument_list|(
operator|new
name|FileLinksCleanup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preset
operator|.
name|isMovePDF
argument_list|()
condition|)
block|{
name|jobs
operator|.
name|add
argument_list|(
operator|new
name|MoveFilesCleanup
argument_list|(
name|databaseContext
argument_list|,
name|fileDirPattern
argument_list|,
name|fileDirectoryPreferences
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preset
operator|.
name|isMakePathsRelative
argument_list|()
condition|)
block|{
name|jobs
operator|.
name|add
argument_list|(
operator|new
name|RelativePathsCleanup
argument_list|(
name|databaseContext
argument_list|,
name|fileDirectoryPreferences
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preset
operator|.
name|isRenamePDF
argument_list|()
condition|)
block|{
name|RenamePdfCleanup
name|cleaner
init|=
operator|new
name|RenamePdfCleanup
argument_list|(
name|preset
operator|.
name|isRenamePdfOnlyRelativePaths
argument_list|()
argument_list|,
name|databaseContext
argument_list|,
name|fileNamePattern
argument_list|,
name|fileDirectoryPreferences
argument_list|)
decl_stmt|;
name|jobs
operator|.
name|add
argument_list|(
name|cleaner
argument_list|)
expr_stmt|;
name|unsuccessfulRenames
operator|+=
name|cleaner
operator|.
name|getUnsuccessfulRenames
argument_list|()
expr_stmt|;
block|}
return|return
name|jobs
return|;
block|}
block|}
end_class

end_unit

