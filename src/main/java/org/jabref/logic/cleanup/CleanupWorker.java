begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.cleanup
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|CleanupJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FilePreferences
import|;
end_import

begin_class
DECL|class|CleanupWorker
specifier|public
class|class
name|CleanupWorker
block|{
DECL|field|databaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|filePreferences
specifier|private
specifier|final
name|FilePreferences
name|filePreferences
decl_stmt|;
DECL|method|CleanupWorker (BibDatabaseContext databaseContext, CleanupPreferences cleanupPreferences)
specifier|public
name|CleanupWorker
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|CleanupPreferences
name|cleanupPreferences
parameter_list|)
block|{
name|this
operator|.
name|databaseContext
operator|=
name|databaseContext
expr_stmt|;
name|this
operator|.
name|filePreferences
operator|=
name|cleanupPreferences
operator|.
name|getFilePreferences
argument_list|()
expr_stmt|;
block|}
DECL|method|cleanup (CleanupPreset preset, BibEntry entry)
specifier|public
name|List
argument_list|<
name|FieldChange
argument_list|>
name|cleanup
parameter_list|(
name|CleanupPreset
name|preset
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|preset
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CleanupJob
argument_list|>
name|jobs
init|=
name|determineCleanupActions
argument_list|(
name|preset
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CleanupJob
name|job
range|:
name|jobs
control|)
block|{
name|changes
operator|.
name|addAll
argument_list|(
name|job
operator|.
name|cleanup
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|changes
return|;
block|}
DECL|method|determineCleanupActions (CleanupPreset preset)
specifier|private
name|List
argument_list|<
name|CleanupJob
argument_list|>
name|determineCleanupActions
parameter_list|(
name|CleanupPreset
name|preset
parameter_list|)
block|{
name|List
argument_list|<
name|CleanupJob
argument_list|>
name|jobs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CleanupPreset
operator|.
name|CleanupStep
name|action
range|:
name|preset
operator|.
name|getActiveJobs
argument_list|()
control|)
block|{
name|jobs
operator|.
name|add
argument_list|(
name|toJob
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preset
operator|.
name|getFormatterCleanups
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|jobs
operator|.
name|addAll
argument_list|(
name|preset
operator|.
name|getFormatterCleanups
argument_list|()
operator|.
name|getConfiguredActions
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|jobs
return|;
block|}
DECL|method|toJob (CleanupPreset.CleanupStep action)
specifier|private
name|CleanupJob
name|toJob
parameter_list|(
name|CleanupPreset
operator|.
name|CleanupStep
name|action
parameter_list|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|CLEAN_UP_DOI
case|:
return|return
operator|new
name|DoiCleanup
argument_list|()
return|;
case|case
name|CLEANUP_EPRINT
case|:
return|return
operator|new
name|EprintCleanup
argument_list|()
return|;
case|case
name|MAKE_PATHS_RELATIVE
case|:
return|return
operator|new
name|RelativePathsCleanup
argument_list|(
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
return|;
case|case
name|RENAME_PDF
case|:
return|return
operator|new
name|RenamePdfCleanup
argument_list|(
literal|false
argument_list|,
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
return|;
case|case
name|RENAME_PDF_ONLY_RELATIVE_PATHS
case|:
return|return
operator|new
name|RenamePdfCleanup
argument_list|(
literal|true
argument_list|,
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
return|;
case|case
name|CLEAN_UP_UPGRADE_EXTERNAL_LINKS
case|:
return|return
operator|new
name|UpgradePdfPsToFileCleanup
argument_list|()
return|;
case|case
name|CONVERT_TO_BIBLATEX
case|:
return|return
operator|new
name|ConvertToBiblatexCleanup
argument_list|()
return|;
case|case
name|CONVERT_TO_BIBTEX
case|:
return|return
operator|new
name|ConvertToBibtexCleanup
argument_list|()
return|;
case|case
name|MOVE_PDF
case|:
return|return
operator|new
name|MoveFilesCleanup
argument_list|(
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
return|;
case|case
name|FIX_FILE_LINKS
case|:
return|return
operator|new
name|FileLinksCleanup
argument_list|()
return|;
case|case
name|CLEAN_UP_ISSN
case|:
return|return
operator|new
name|ISSNCleanup
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|action
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

