begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.formatter.bibtexfields
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|bibtexfields
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|AbstractFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_class
DECL|class|RegexFormatter
specifier|public
class|class
name|RegexFormatter
extends|extends
name|AbstractFormatter
block|{
DECL|field|PATTERN_ESCAPED_OPENING_CURLY_BRACE
specifier|private
specifier|static
specifier|final
name|Pattern
name|PATTERN_ESCAPED_OPENING_CURLY_BRACE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\\\{"
argument_list|)
decl_stmt|;
DECL|field|PATTERN_ESCAPED_CLOSING_CURLY_BRACE
specifier|private
specifier|static
specifier|final
name|Pattern
name|PATTERN_ESCAPED_CLOSING_CURLY_BRACE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\\\}"
argument_list|)
decl_stmt|;
comment|// RegEx to match {...}
comment|// \\ is required to have the { interpreted as character
comment|// ? is required to disable the aggressive match
DECL|field|PATTERN_ENCLOSED_IN_CURLY_BRACES
specifier|private
specifier|static
specifier|final
name|Pattern
name|PATTERN_ENCLOSED_IN_CURLY_BRACES
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\{.*?})"
argument_list|)
decl_stmt|;
comment|// Magic arbitrary unicode char, which will never appear in bibtex files
DECL|field|PLACEHOLDER_FOR_PROTECTED_GROUP
specifier|private
specifier|static
specifier|final
name|String
name|PLACEHOLDER_FOR_PROTECTED_GROUP
init|=
name|Character
operator|.
name|toString
argument_list|(
literal|'\u0A14'
argument_list|)
decl_stmt|;
DECL|field|PLACEHOLDER_FOR_OPENING_CURLY_BRACE
specifier|private
specifier|static
specifier|final
name|String
name|PLACEHOLDER_FOR_OPENING_CURLY_BRACE
init|=
name|Character
operator|.
name|toString
argument_list|(
literal|'\u0A15'
argument_list|)
decl_stmt|;
DECL|field|PLACEHOLDER_FOR_CLOSING_CURLY_BRACE
specifier|private
specifier|static
specifier|final
name|String
name|PLACEHOLDER_FOR_CLOSING_CURLY_BRACE
init|=
name|Character
operator|.
name|toString
argument_list|(
literal|'\u0A16'
argument_list|)
decl_stmt|;
DECL|field|QUOTE_AND_OPENING_BRACE
specifier|private
specifier|static
specifier|final
name|String
name|QUOTE_AND_OPENING_BRACE
init|=
literal|"\"("
decl_stmt|;
DECL|field|LENGTH_OF_QUOTE_AND_OPENING_BRACE
specifier|private
specifier|static
specifier|final
name|int
name|LENGTH_OF_QUOTE_AND_OPENING_BRACE
init|=
name|QUOTE_AND_OPENING_BRACE
operator|.
name|length
argument_list|()
decl_stmt|;
DECL|field|CLOSING_BRACE_AND_QUOTE
specifier|private
specifier|static
specifier|final
name|String
name|CLOSING_BRACE_AND_QUOTE
init|=
literal|")\""
decl_stmt|;
DECL|field|LENGTH_OF_CLOSING_BRACE_AND_QUOTE
specifier|private
specifier|static
specifier|final
name|int
name|LENGTH_OF_CLOSING_BRACE_AND_QUOTE
init|=
name|CLOSING_BRACE_AND_QUOTE
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// stores the regex set by setRegex
DECL|field|regex
specifier|private
specifier|static
name|String
index|[]
name|regex
decl_stmt|;
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"regular expression"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
literal|"regex"
return|;
block|}
DECL|method|replaceHonoringProtectedGroups (final String input)
specifier|private
name|String
name|replaceHonoringProtectedGroups
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|PATTERN_ENCLOSED_IN_CURLY_BRACES
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|replaced
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|replaced
operator|.
name|add
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|workingString
init|=
name|matcher
operator|.
name|replaceAll
argument_list|(
name|PLACEHOLDER_FOR_PROTECTED_GROUP
argument_list|)
decl_stmt|;
name|workingString
operator|=
name|workingString
operator|.
name|replaceAll
argument_list|(
name|RegexFormatter
operator|.
name|regex
index|[
literal|0
index|]
argument_list|,
name|RegexFormatter
operator|.
name|regex
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|r
range|:
name|replaced
control|)
block|{
name|workingString
operator|=
name|workingString
operator|.
name|replaceFirst
argument_list|(
name|PLACEHOLDER_FOR_PROTECTED_GROUP
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|workingString
return|;
block|}
annotation|@
name|Override
DECL|method|format (final String input)
specifier|public
name|String
name|format
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|regex
operator|==
literal|null
condition|)
block|{
return|return
name|input
return|;
block|}
name|Matcher
name|matcherOpeningCurlyBrace
init|=
name|PATTERN_ESCAPED_OPENING_CURLY_BRACE
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
specifier|final
name|String
name|openingCurlyBraceReplaced
init|=
name|matcherOpeningCurlyBrace
operator|.
name|replaceAll
argument_list|(
name|PLACEHOLDER_FOR_OPENING_CURLY_BRACE
argument_list|)
decl_stmt|;
name|Matcher
name|matcherClosingCurlyBrace
init|=
name|PATTERN_ESCAPED_CLOSING_CURLY_BRACE
operator|.
name|matcher
argument_list|(
name|openingCurlyBraceReplaced
argument_list|)
decl_stmt|;
specifier|final
name|String
name|closingCurlyBraceReplaced
init|=
name|matcherClosingCurlyBrace
operator|.
name|replaceAll
argument_list|(
name|PLACEHOLDER_FOR_CLOSING_CURLY_BRACE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|regexApplied
init|=
name|replaceHonoringProtectedGroups
argument_list|(
name|closingCurlyBraceReplaced
argument_list|)
decl_stmt|;
return|return
name|regexApplied
operator|.
name|replaceAll
argument_list|(
name|PLACEHOLDER_FOR_OPENING_CURLY_BRACE
argument_list|,
literal|"\\\\{"
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|PLACEHOLDER_FOR_CLOSING_CURLY_BRACE
argument_list|,
literal|"\\\\}"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Add a regular expression for the key pattern."
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getExampleInput ()
specifier|public
name|String
name|getExampleInput
parameter_list|()
block|{
return|return
literal|"Please replace the spaces"
return|;
block|}
DECL|method|setRegex (String rex)
specifier|public
specifier|static
name|void
name|setRegex
parameter_list|(
name|String
name|rex
parameter_list|)
block|{
comment|// formatting is like ("exp1","exp2"), we want to remove (" and ")
name|String
name|rexToSet
init|=
name|rex
decl_stmt|;
name|rexToSet
operator|=
name|rexToSet
operator|.
name|substring
argument_list|(
name|LENGTH_OF_QUOTE_AND_OPENING_BRACE
argument_list|,
name|rexToSet
operator|.
name|length
argument_list|()
operator|-
name|LENGTH_OF_CLOSING_BRACE_AND_QUOTE
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|rexToSet
operator|.
name|split
argument_list|(
literal|"\",\""
argument_list|)
decl_stmt|;
name|regex
operator|=
name|parts
expr_stmt|;
block|}
block|}
end_class

end_unit

