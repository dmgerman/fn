begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.protectedterms
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Reads abbreviation files (property files using NAME = ABBREVIATION as a format) into a list of Abbreviations.  */
end_comment

begin_class
DECL|class|ProtectedTermsParser
specifier|public
class|class
name|ProtectedTermsParser
block|{
DECL|field|terms
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"The text after the last line starting with # will be used"
argument_list|)
decl_stmt|;
DECL|field|location
specifier|private
name|String
name|location
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProtectedTermsParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|readTermsFromResource (String resourceFileName, String descriptionString)
specifier|public
name|void
name|readTermsFromResource
parameter_list|(
name|String
name|resourceFileName
parameter_list|,
name|String
name|descriptionString
parameter_list|)
block|{
name|URL
name|url
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ProtectedTermsLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|resourceFileName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|description
operator|=
name|descriptionString
expr_stmt|;
name|location
operator|=
name|resourceFileName
expr_stmt|;
try|try
block|{
name|readTermsList
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Could not read protected terms from resource "
operator|+
name|resourceFileName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readTermsFromFile (File file)
specifier|public
name|void
name|readTermsFromFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|location
operator|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
try|try
init|(
name|FileReader
name|reader
init|=
operator|new
name|FileReader
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|file
argument_list|)
argument_list|)
init|)
block|{
name|readTermsList
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not read terms from file "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readTermsFromFile (File file, Charset encoding)
specifier|public
name|void
name|readTermsFromFile
parameter_list|(
name|File
name|file
parameter_list|,
name|Charset
name|encoding
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|location
operator|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
try|try
init|(
name|FileInputStream
name|stream
init|=
operator|new
name|FileInputStream
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|file
argument_list|)
argument_list|)
init|;
name|InputStreamReader
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|encoding
argument_list|)
argument_list|)
init|)
block|{
name|readTermsList
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not read terms from file "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Read the given file, which should contain a list of journal names and their      * abbreviations. Each line should be formatted as: "Full Journal Name=Abbr. Journal Name"      *      * @param in      */
DECL|method|readTermsList (Reader in)
specifier|private
name|void
name|readTermsList
parameter_list|(
name|Reader
name|in
parameter_list|)
block|{
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
name|in
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|addLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Could not read journal list from file "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addLine (String line)
specifier|private
name|void
name|addLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|description
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|terms
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
DECL|method|getProtectTermsList (boolean enabled, boolean internal)
specifier|public
name|ProtectedTermsList
name|getProtectTermsList
parameter_list|(
name|boolean
name|enabled
parameter_list|,
name|boolean
name|internal
parameter_list|)
block|{
name|ProtectedTermsList
name|termList
init|=
operator|new
name|ProtectedTermsList
argument_list|(
name|description
argument_list|,
name|terms
argument_list|,
name|location
argument_list|,
name|internal
argument_list|)
decl_stmt|;
name|termList
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
return|return
name|termList
return|;
block|}
block|}
end_class

end_unit

