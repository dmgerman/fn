begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.msbib
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|msbib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|Author
import|;
end_import

begin_class
DECL|class|MsBibAuthor
specifier|public
class|class
name|MsBibAuthor
block|{
DECL|field|firstName
specifier|private
name|String
name|firstName
decl_stmt|;
DECL|field|middleName
specifier|private
name|String
name|middleName
decl_stmt|;
DECL|field|author
specifier|private
specifier|final
name|Author
name|author
decl_stmt|;
DECL|field|isCorporate
specifier|private
name|boolean
name|isCorporate
decl_stmt|;
DECL|method|MsBibAuthor (Author author)
specifier|public
name|MsBibAuthor
parameter_list|(
name|Author
name|author
parameter_list|)
block|{
name|this
operator|.
name|author
operator|=
name|author
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|author
operator|.
name|getFirst
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|firstNames
lambda|->
block|{
name|String
index|[]
name|names
init|=
name|firstNames
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|middleName
operator|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|this
operator|.
name|firstName
operator|=
name|names
index|[
literal|0
index|]
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|MsBibAuthor (Author author, boolean isCorporate)
specifier|public
name|MsBibAuthor
parameter_list|(
name|Author
name|author
parameter_list|,
name|boolean
name|isCorporate
parameter_list|)
block|{
name|this
argument_list|(
name|author
argument_list|)
expr_stmt|;
name|this
operator|.
name|isCorporate
operator|=
name|isCorporate
expr_stmt|;
block|}
DECL|method|getFirstName ()
specifier|public
name|String
name|getFirstName
parameter_list|()
block|{
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|firstName
argument_list|)
condition|)
block|{
return|return
name|firstName
return|;
block|}
return|return
name|author
operator|.
name|getFirst
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|getMiddleName ()
specifier|public
name|String
name|getMiddleName
parameter_list|()
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|middleName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|middleName
return|;
block|}
DECL|method|getLastName ()
specifier|public
name|String
name|getLastName
parameter_list|()
block|{
return|return
name|author
operator|.
name|getLast
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|getFirstLast ()
specifier|public
name|String
name|getFirstLast
parameter_list|()
block|{
return|return
name|author
operator|.
name|getFirstLast
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|getLastFirst ()
specifier|public
name|String
name|getLastFirst
parameter_list|()
block|{
return|return
name|author
operator|.
name|getLastFirst
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|isCorporate ()
specifier|public
name|boolean
name|isCorporate
parameter_list|()
block|{
return|return
name|isCorporate
return|;
block|}
block|}
end_class

end_unit

