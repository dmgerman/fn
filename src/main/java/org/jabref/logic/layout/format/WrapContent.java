begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.layout.format
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|AbstractParamLayoutFormatter
import|;
end_import

begin_comment
comment|/**  * This formatter outputs the input value after adding a prefix and a postfix,  * as long as the input value is non-empty. If the input value is empty, an  * empty string is output (the prefix and postfix are not output in this case).  *  * The formatter requires an argument containing the prefix and postix separated  * by a comma. To include a the comma character in either, use an escape sequence  * (\,).  */
end_comment

begin_class
DECL|class|WrapContent
specifier|public
class|class
name|WrapContent
extends|extends
name|AbstractParamLayoutFormatter
block|{
DECL|field|before
specifier|private
name|String
name|before
decl_stmt|;
DECL|field|after
specifier|private
name|String
name|after
decl_stmt|;
annotation|@
name|Override
DECL|method|setArgument (String arg)
specifier|public
name|void
name|setArgument
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|AbstractParamLayoutFormatter
operator|.
name|parseArgument
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
return|return;
block|}
name|before
operator|=
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|after
operator|=
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|format (String fieldText)
specifier|public
name|String
name|format
parameter_list|(
name|String
name|fieldText
parameter_list|)
block|{
if|if
condition|(
name|fieldText
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|before
operator|==
literal|null
condition|)
block|{
return|return
name|fieldText
return|;
block|}
if|if
condition|(
name|fieldText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|before
operator|+
name|fieldText
operator|+
name|after
return|;
block|}
block|}
block|}
end_class

end_unit

