begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.layout.format
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|UnicodeLigaturesMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|cleanup
operator|.
name|Formatter
import|;
end_import

begin_class
DECL|class|ReplaceUnicodeLigaturesFormatter
specifier|public
class|class
name|ReplaceUnicodeLigaturesFormatter
implements|implements
name|LayoutFormatter
implements|,
name|Formatter
block|{
DECL|field|ligaturesMap
specifier|private
name|Map
argument_list|<
name|Pattern
argument_list|,
name|String
argument_list|>
name|ligaturesMap
decl_stmt|;
DECL|method|ReplaceUnicodeLigaturesFormatter ()
specifier|public
name|ReplaceUnicodeLigaturesFormatter
parameter_list|()
block|{
name|ligaturesMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|UnicodeLigaturesMap
name|stringMap
init|=
operator|new
name|UnicodeLigaturesMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|stringMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ligaturesMap
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|key
argument_list|)
argument_list|,
name|stringMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Replace Unicode ligatures"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
literal|"remove_unicode_ligatures"
return|;
block|}
annotation|@
name|Override
DECL|method|format (String fieldText)
specifier|public
name|String
name|format
parameter_list|(
name|String
name|fieldText
parameter_list|)
block|{
name|String
name|result
init|=
name|fieldText
decl_stmt|;
for|for
control|(
name|Pattern
name|key
range|:
name|ligaturesMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|result
operator|=
name|key
operator|.
name|matcher
argument_list|(
name|result
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|ligaturesMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Replaces Unicode ligatures with their expanded form"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getExampleInput ()
specifier|public
name|String
name|getExampleInput
parameter_list|()
block|{
return|return
literal|"Ãneas"
return|;
block|}
block|}
end_class

end_unit

