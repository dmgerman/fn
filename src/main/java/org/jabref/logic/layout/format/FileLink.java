begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.layout.format
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|ParamLayoutFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FileFieldParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_comment
comment|/**  * Export formatter that handles the file link list of JabRef 2.3 and later, by  * selecting the first file link, if any, specified by the field.  */
end_comment

begin_class
DECL|class|FileLink
specifier|public
class|class
name|FileLink
implements|implements
name|ParamLayoutFormatter
block|{
DECL|field|prefs
specifier|private
specifier|final
name|FileLinkPreferences
name|prefs
decl_stmt|;
DECL|field|fileType
specifier|private
name|String
name|fileType
decl_stmt|;
DECL|method|FileLink (FileLinkPreferences fileLinkPreferences)
specifier|public
name|FileLink
parameter_list|(
name|FileLinkPreferences
name|fileLinkPreferences
parameter_list|)
block|{
name|this
operator|.
name|prefs
operator|=
name|fileLinkPreferences
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|format (String field)
specifier|public
name|String
name|format
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|List
argument_list|<
name|LinkedFile
argument_list|>
name|fileList
init|=
name|FileFieldParser
operator|.
name|parse
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|LinkedFile
name|link
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
literal|null
condition|)
block|{
comment|// No file type specified. Simply take the first link.
if|if
condition|(
operator|!
operator|(
name|fileList
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|link
operator|=
name|fileList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// A file type is specified:
for|for
control|(
name|LinkedFile
name|flEntry
range|:
name|fileList
control|)
block|{
if|if
condition|(
name|flEntry
operator|.
name|getFileType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|fileType
argument_list|)
condition|)
block|{
name|link
operator|=
name|flEntry
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|link
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|dirs
decl_stmt|;
comment|// We need to resolve the file directory from the database's metadata,
comment|// but that is not available from a formatter. Therefore, as an
comment|// ugly hack, the export routine has set a global variable before
comment|// starting the export, which contains the database's file directory:
if|if
condition|(
name|prefs
operator|.
name|getFileDirForDatabase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dirs
operator|=
name|prefs
operator|.
name|getGeneratedDirForDatabase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dirs
operator|=
name|prefs
operator|.
name|getFileDirForDatabase
argument_list|()
expr_stmt|;
block|}
return|return
name|link
operator|.
name|findIn
argument_list|(
name|dirs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|path
lambda|->
name|path
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
name|link
operator|.
name|getLink
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This method is called if the layout file specifies an argument for this      * formatter. We use it as an indicator of which file type we should look for.      * @param arg The file type.      */
annotation|@
name|Override
DECL|method|setArgument (String arg)
specifier|public
name|void
name|setArgument
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|fileType
operator|=
name|arg
expr_stmt|;
block|}
block|}
end_class

end_unit

