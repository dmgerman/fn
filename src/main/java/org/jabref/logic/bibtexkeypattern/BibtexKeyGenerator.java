begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.bibtexkeypattern
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|AbstractBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|GlobalBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is the utility class of the LabelPattern package.  */
end_comment

begin_class
DECL|class|BibtexKeyGenerator
specifier|public
class|class
name|BibtexKeyGenerator
extends|extends
name|BracketedPattern
block|{
comment|/*      * All single characters that we can use for extending a key to make it unique.      */
DECL|field|APPENDIX_CHARACTERS
specifier|public
specifier|static
specifier|final
name|String
name|APPENDIX_CHARACTERS
init|=
literal|"abcdefghijklmnopqrstuvwxyz"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BibtexKeyGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|KEY_ILLEGAL_CHARACTERS
specifier|private
specifier|static
specifier|final
name|String
name|KEY_ILLEGAL_CHARACTERS
init|=
literal|"{}(),\\\"-#~^:'`รยน"
decl_stmt|;
DECL|field|KEY_UNWANTED_CHARACTERS
specifier|private
specifier|static
specifier|final
name|String
name|KEY_UNWANTED_CHARACTERS
init|=
literal|"{}(),\\\"-"
decl_stmt|;
DECL|field|citeKeyPattern
specifier|private
specifier|final
name|AbstractBibtexKeyPattern
name|citeKeyPattern
decl_stmt|;
DECL|field|database
specifier|private
specifier|final
name|BibDatabase
name|database
decl_stmt|;
DECL|field|bibtexKeyPatternPreferences
specifier|private
specifier|final
name|BibtexKeyPatternPreferences
name|bibtexKeyPatternPreferences
decl_stmt|;
DECL|method|BibtexKeyGenerator (BibDatabaseContext bibDatabaseContext, BibtexKeyPatternPreferences bibtexKeyPatternPreferences)
specifier|public
name|BibtexKeyGenerator
parameter_list|(
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|,
name|BibtexKeyPatternPreferences
name|bibtexKeyPatternPreferences
parameter_list|)
block|{
name|this
argument_list|(
name|bibDatabaseContext
operator|.
name|getMetaData
argument_list|()
operator|.
name|getCiteKeyPattern
argument_list|(
name|bibtexKeyPatternPreferences
operator|.
name|getKeyPattern
argument_list|()
argument_list|)
argument_list|,
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|bibtexKeyPatternPreferences
argument_list|)
expr_stmt|;
block|}
DECL|method|BibtexKeyGenerator (AbstractBibtexKeyPattern citeKeyPattern, BibDatabase database, BibtexKeyPatternPreferences bibtexKeyPatternPreferences)
specifier|public
name|BibtexKeyGenerator
parameter_list|(
name|AbstractBibtexKeyPattern
name|citeKeyPattern
parameter_list|,
name|BibDatabase
name|database
parameter_list|,
name|BibtexKeyPatternPreferences
name|bibtexKeyPatternPreferences
parameter_list|)
block|{
name|this
operator|.
name|citeKeyPattern
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|citeKeyPattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|database
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|this
operator|.
name|bibtexKeyPatternPreferences
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|bibtexKeyPatternPreferences
argument_list|)
expr_stmt|;
block|}
DECL|method|generateKey (BibEntry entry, String pattern)
specifier|static
name|String
name|generateKey
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
return|return
name|generateKey
argument_list|(
name|entry
argument_list|,
name|pattern
argument_list|,
operator|new
name|BibDatabase
argument_list|()
argument_list|)
return|;
block|}
DECL|method|generateKey (BibEntry entry, String pattern, BibDatabase database)
specifier|static
name|String
name|generateKey
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|String
name|pattern
parameter_list|,
name|BibDatabase
name|database
parameter_list|)
block|{
name|GlobalBibtexKeyPattern
name|keyPattern
init|=
operator|new
name|GlobalBibtexKeyPattern
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|keyPattern
operator|.
name|setDefaultValue
argument_list|(
literal|"["
operator|+
name|pattern
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
operator|new
name|BibtexKeyGenerator
argument_list|(
name|keyPattern
argument_list|,
name|database
argument_list|,
operator|new
name|BibtexKeyPatternPreferences
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|keyPattern
argument_list|,
literal|','
argument_list|)
argument_list|)
operator|.
name|generateKey
argument_list|(
name|entry
argument_list|)
return|;
block|}
comment|/**      * Computes an appendix to a BibTeX key that could make it unique. We use      * a-z for numbers 0-25, and then aa-az, ba-bz, etc.      *      * @param number      *            The appendix number.      * @return The String to append.      */
DECL|method|getAppendix (int number)
specifier|private
specifier|static
name|String
name|getAppendix
parameter_list|(
name|int
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>=
name|APPENDIX_CHARACTERS
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|lastChar
init|=
name|number
operator|%
name|APPENDIX_CHARACTERS
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|getAppendix
argument_list|(
operator|(
name|number
operator|/
name|APPENDIX_CHARACTERS
operator|.
name|length
argument_list|()
operator|)
operator|-
literal|1
argument_list|)
operator|+
name|APPENDIX_CHARACTERS
operator|.
name|substring
argument_list|(
name|lastChar
argument_list|,
name|lastChar
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|APPENDIX_CHARACTERS
operator|.
name|substring
argument_list|(
name|number
argument_list|,
name|number
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
DECL|method|removeUnwantedCharacters (String key, boolean enforceLegalKey)
specifier|public
specifier|static
name|String
name|removeUnwantedCharacters
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|enforceLegalKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enforceLegalKey
condition|)
block|{
comment|// User doesn't want us to enforce legal characters. We must still look
comment|// for whitespace and some characters such as commas, since these would
comment|// interfere with parsing:
name|StringBuilder
name|newKey
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|key
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|key
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|KEY_UNWANTED_CHARACTERS
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|newKey
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newKey
operator|.
name|toString
argument_list|()
return|;
block|}
name|StringBuilder
name|newKey
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|key
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|key
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|KEY_ILLEGAL_CHARACTERS
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|newKey
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Replace non-English characters like umlauts etc. with a sensible
comment|// letter or letter combination that bibtex can accept.
return|return
name|StringUtil
operator|.
name|replaceSpecialCharacters
argument_list|(
name|newKey
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|cleanKey (String key, boolean enforceLegalKey)
specifier|public
specifier|static
name|String
name|cleanKey
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|enforceLegalKey
parameter_list|)
block|{
return|return
name|removeUnwantedCharacters
argument_list|(
name|key
argument_list|,
name|enforceLegalKey
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|generateKey (BibEntry entry)
specifier|public
name|String
name|generateKey
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|String
name|key
decl_stmt|;
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
comment|// get the type of entry
name|EntryType
name|entryType
init|=
name|entry
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// Get the arrayList corresponding to the type
name|List
argument_list|<
name|String
argument_list|>
name|typeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|citeKeyPattern
operator|.
name|getValue
argument_list|(
name|entryType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|typeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|typeList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|boolean
name|field
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|typeListEntry
range|:
name|typeList
control|)
block|{
if|if
condition|(
literal|"["
operator|.
name|equals
argument_list|(
name|typeListEntry
argument_list|)
condition|)
block|{
name|field
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"]"
operator|.
name|equals
argument_list|(
name|typeListEntry
argument_list|)
condition|)
block|{
name|field
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
condition|)
block|{
comment|// check whether there is a modifier on the end such as
comment|// ":lower"
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|parseFieldMarker
argument_list|(
name|typeListEntry
argument_list|)
decl_stmt|;
name|Character
name|delimiter
init|=
name|bibtexKeyPatternPreferences
operator|.
name|getKeywordDelimiter
argument_list|()
decl_stmt|;
name|String
name|pattern
init|=
literal|"["
operator|+
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"]"
decl_stmt|;
name|String
name|label
init|=
name|expandBrackets
argument_list|(
name|pattern
argument_list|,
name|delimiter
argument_list|,
name|entry
argument_list|,
name|database
argument_list|,
name|bibtexKeyPatternPreferences
operator|.
name|isEnforceLegalKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// apply modifier if present
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|label
operator|=
name|applyModifiers
argument_list|(
name|label
argument_list|,
name|parts
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Remove all illegal characters from the label.
name|label
operator|=
name|cleanKey
argument_list|(
name|label
argument_list|,
name|bibtexKeyPatternPreferences
operator|.
name|isEnforceLegalKey
argument_list|()
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|typeListEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Cannot make label"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
name|stringBuilder
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// Remove Regular Expressions while generating Keys
name|String
name|regex
init|=
name|bibtexKeyPatternPreferences
operator|.
name|getKeyPatternRegex
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|regex
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|regex
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|replacement
init|=
name|bibtexKeyPatternPreferences
operator|.
name|getKeyPatternReplacement
argument_list|()
decl_stmt|;
name|key
operator|=
name|key
operator|.
name|replaceAll
argument_list|(
name|regex
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
name|String
name|oldKey
init|=
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|occurrences
init|=
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|oldKey
argument_list|,
name|key
argument_list|)
condition|)
block|{
name|occurrences
operator|--
expr_stmt|;
comment|// No change, so we can accept one dupe.
block|}
name|boolean
name|alwaysAddLetter
init|=
name|bibtexKeyPatternPreferences
operator|.
name|isAlwaysAddLetter
argument_list|()
decl_stmt|;
name|boolean
name|firstLetterA
init|=
name|bibtexKeyPatternPreferences
operator|.
name|isFirstLetterA
argument_list|()
decl_stmt|;
name|String
name|newKey
decl_stmt|;
if|if
condition|(
operator|!
name|alwaysAddLetter
operator|&&
operator|(
name|occurrences
operator|==
literal|0
operator|)
condition|)
block|{
name|newKey
operator|=
name|key
expr_stmt|;
block|}
else|else
block|{
comment|// The key is already in use, so we must modify it.
name|int
name|number
init|=
operator|!
name|alwaysAddLetter
operator|&&
operator|!
name|firstLetterA
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|String
name|moddedKey
decl_stmt|;
do|do
block|{
name|moddedKey
operator|=
name|key
operator|+
name|getAppendix
argument_list|(
name|number
argument_list|)
expr_stmt|;
name|number
operator|++
expr_stmt|;
name|occurrences
operator|=
name|database
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|getNumberOfKeyOccurrences
argument_list|(
name|moddedKey
argument_list|)
expr_stmt|;
comment|// only happens if #getAddition() is buggy
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|oldKey
argument_list|,
name|moddedKey
argument_list|)
condition|)
block|{
name|occurrences
operator|--
expr_stmt|;
block|}
block|}
do|while
condition|(
name|occurrences
operator|>
literal|0
condition|)
do|;
name|newKey
operator|=
name|moddedKey
expr_stmt|;
block|}
return|return
name|newKey
return|;
block|}
comment|/**      * Generates a BibTeX key for the given entry, and sets the key.      *      * @param entry the entry to generate the key for      * @return the change to the key (or an empty optional if the key was not changed)      */
DECL|method|generateAndSetKey (BibEntry entry)
specifier|public
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|generateAndSetKey
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|String
name|newKey
init|=
name|generateKey
argument_list|(
name|entry
argument_list|)
decl_stmt|;
return|return
name|entry
operator|.
name|setCiteKey
argument_list|(
name|newKey
argument_list|)
return|;
block|}
block|}
end_class

end_unit

