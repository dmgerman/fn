begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|URLDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|identifier
operator|.
name|DOI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility class for trying to resolve URLs to full-text PDF for articles.  */
end_comment

begin_class
DECL|class|FulltextFetchers
specifier|public
class|class
name|FulltextFetchers
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FulltextFetchers
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Timeout in seconds
DECL|field|FETCHER_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|FETCHER_TIMEOUT
init|=
literal|10
decl_stmt|;
DECL|field|finders
specifier|private
specifier|final
name|List
argument_list|<
name|FulltextFetcher
argument_list|>
name|finders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|FulltextFetchers (ImportFormatPreferences importFormatPreferences)
specifier|public
name|FulltextFetchers
parameter_list|(
name|ImportFormatPreferences
name|importFormatPreferences
parameter_list|)
block|{
name|this
argument_list|(
name|WebFetchers
operator|.
name|getFullTextFetchers
argument_list|(
name|importFormatPreferences
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|FulltextFetchers (List<FulltextFetcher> fetcher)
name|FulltextFetchers
parameter_list|(
name|List
argument_list|<
name|FulltextFetcher
argument_list|>
name|fetcher
parameter_list|)
block|{
name|finders
operator|.
name|addAll
argument_list|(
name|fetcher
argument_list|)
expr_stmt|;
block|}
DECL|method|findFullTextPDF (BibEntry entry)
specifier|public
name|Optional
argument_list|<
name|URL
argument_list|>
name|findFullTextPDF
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
comment|// for accuracy, fetch DOI first but do not modify entry
name|BibEntry
name|clonedEntry
init|=
operator|(
name|BibEntry
operator|)
name|entry
operator|.
name|clone
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|DOI
argument_list|>
name|doi
init|=
name|clonedEntry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|)
operator|.
name|flatMap
argument_list|(
name|DOI
operator|::
name|parse
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|doi
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|findDoiForEntry
argument_list|(
name|clonedEntry
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Future
argument_list|<
name|Optional
argument_list|<
name|FetcherResult
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|=
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|executeAll
argument_list|(
name|getCallables
argument_list|(
name|clonedEntry
argument_list|,
name|finders
argument_list|)
argument_list|,
name|FETCHER_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|FulltextFetchers
operator|::
name|getResults
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
operator|.
name|filter
argument_list|(
name|res
lambda|->
name|Objects
operator|.
name|nonNull
argument_list|(
name|res
operator|.
name|getSource
argument_list|()
argument_list|)
argument_list|)
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
name|comparingInt
argument_list|(
parameter_list|(
name|FetcherResult
name|res
parameter_list|)
lambda|->
name|res
operator|.
name|getTrust
argument_list|()
operator|.
name|getTrustScore
argument_list|()
argument_list|)
operator|.
name|reversed
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|res
lambda|->
name|res
operator|.
name|getSource
argument_list|()
argument_list|)
operator|.
name|findFirst
argument_list|()
return|;
block|}
DECL|method|findDoiForEntry (BibEntry clonedEntry)
specifier|private
name|void
name|findDoiForEntry
parameter_list|(
name|BibEntry
name|clonedEntry
parameter_list|)
block|{
try|try
block|{
name|WebFetchers
operator|.
name|getIdFetcherForIdentifier
argument_list|(
name|DOI
operator|.
name|class
argument_list|)
operator|.
name|findIdentifier
argument_list|(
name|clonedEntry
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|e
lambda|->
name|clonedEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|,
name|e
operator|.
name|getDOI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FetcherException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Failed to find DOI"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getResults (Future<Optional<FetcherResult>> future)
specifier|private
specifier|static
name|Optional
argument_list|<
name|FetcherResult
argument_list|>
name|getResults
parameter_list|(
name|Future
argument_list|<
name|Optional
argument_list|<
name|FetcherResult
argument_list|>
argument_list|>
name|future
parameter_list|)
block|{
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{          }
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|CancellationException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Fetcher execution failed or was cancelled"
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|field|isPDF
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|isPDF
init|=
name|url
lambda|->
block|{
try|try
block|{
return|return
operator|new
name|URLDownload
argument_list|(
name|url
argument_list|)
operator|.
name|isPdf
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"URL returned by fulltext fetcher is invalid"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
decl_stmt|;
DECL|method|getCallable (BibEntry entry, FulltextFetcher fetcher)
specifier|private
name|Callable
argument_list|<
name|Optional
argument_list|<
name|FetcherResult
argument_list|>
argument_list|>
name|getCallable
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|FulltextFetcher
name|fetcher
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
block|{
try|try
block|{
return|return
name|fetcher
operator|.
name|findFullText
argument_list|(
name|entry
argument_list|)
operator|.
name|filter
argument_list|(
name|url
lambda|->
name|isPDF
operator|.
name|test
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|url
lambda|->
operator|new
name|FetcherResult
argument_list|(
name|fetcher
operator|.
name|getTrustLevel
argument_list|()
argument_list|,
name|url
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|FetcherException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Failed to find fulltext PDF at given URL"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|;
block|}
DECL|method|getCallables (BibEntry entry, List<FulltextFetcher> fetchers)
specifier|private
name|List
argument_list|<
name|Callable
argument_list|<
name|Optional
argument_list|<
name|FetcherResult
argument_list|>
argument_list|>
argument_list|>
name|getCallables
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|List
argument_list|<
name|FulltextFetcher
argument_list|>
name|fetchers
parameter_list|)
block|{
return|return
name|fetchers
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|f
lambda|->
name|getCallable
argument_list|(
name|entry
argument_list|,
name|f
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

