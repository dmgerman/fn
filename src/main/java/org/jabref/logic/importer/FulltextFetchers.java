begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|URLDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|identifier
operator|.
name|DOI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Utility class for trying to resolve URLs to full-text PDF for articles.  */
end_comment

begin_class
DECL|class|FulltextFetchers
specifier|public
class|class
name|FulltextFetchers
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FulltextFetchers
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|finders
specifier|private
specifier|final
name|List
argument_list|<
name|FulltextFetcher
argument_list|>
name|finders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|FulltextFetchers (ImportFormatPreferences importFormatPreferences)
specifier|public
name|FulltextFetchers
parameter_list|(
name|ImportFormatPreferences
name|importFormatPreferences
parameter_list|)
block|{
name|this
argument_list|(
name|WebFetchers
operator|.
name|getFullTextFetchers
argument_list|(
name|importFormatPreferences
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|FulltextFetchers (List<FulltextFetcher> fetcher)
name|FulltextFetchers
parameter_list|(
name|List
argument_list|<
name|FulltextFetcher
argument_list|>
name|fetcher
parameter_list|)
block|{
name|finders
operator|.
name|addAll
argument_list|(
name|fetcher
argument_list|)
expr_stmt|;
block|}
DECL|method|findFullTextPDF (BibEntry entry)
specifier|public
name|Optional
argument_list|<
name|URL
argument_list|>
name|findFullTextPDF
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
comment|// for accuracy, fetch DOI first but do not modify entry
name|BibEntry
name|clonedEntry
init|=
operator|(
name|BibEntry
operator|)
name|entry
operator|.
name|clone
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|DOI
argument_list|>
name|doi
init|=
name|clonedEntry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|)
operator|.
name|flatMap
argument_list|(
name|DOI
operator|::
name|parse
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|doi
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|WebFetchers
operator|.
name|getIdFetcherForIdentifier
argument_list|(
name|DOI
operator|.
name|class
argument_list|)
operator|.
name|findIdentifier
argument_list|(
name|clonedEntry
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|e
lambda|->
name|clonedEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|,
name|e
operator|.
name|getDOI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FetcherException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Failed to find DOI"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|FulltextFetcher
name|finder
range|:
name|finders
control|)
block|{
try|try
block|{
name|Optional
argument_list|<
name|URL
argument_list|>
name|result
init|=
name|finder
operator|.
name|findFullText
argument_list|(
name|clonedEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isPresent
argument_list|()
operator|&&
operator|new
name|URLDownload
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isPdf
argument_list|()
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|FetcherException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Failed to find fulltext PDF at given URL"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

