begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fetcher
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|DateTimeException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|TemporalAccessor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|FetcherException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|IdBasedFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|URLDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|DummyFileUpdateMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|IacrEprintFetcher
specifier|public
class|class
name|IacrEprintFetcher
implements|implements
name|IdBasedFetcher
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"IACR eprints"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IacrEprintFetcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DATE_FROM_WEBSITE_AFTER_2000_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|DATE_FROM_WEBSITE_AFTER_2000_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[a-z ]+(\\d{1,2} [A-Za-z][a-z]{2} \\d{4})"
argument_list|)
decl_stmt|;
DECL|field|DATE_FORMAT_WEBSITE_AFTER_2000
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|DATE_FORMAT_WEBSITE_AFTER_2000
init|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"d MMM yyyy"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
DECL|field|DATE_FROM_WEBSITE_BEFORE_2000_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|DATE_FROM_WEBSITE_BEFORE_2000_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[A-Za-z ]+? ([A-Za-z][a-z]{2,10} \\d{1,2}(th|st|nd|rd)?, \\d{4})\\.?"
argument_list|)
decl_stmt|;
DECL|field|DATE_FORMAT_WEBSITE_BEFORE_2000_LONG_MONTHS
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|DATE_FORMAT_WEBSITE_BEFORE_2000_LONG_MONTHS
init|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"MMMM d['th']['st']['nd']['rd'] yyyy"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
DECL|field|DATE_FORMAT_WEBSITE_BEFORE_2000_SHORT_MONTHS
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|DATE_FORMAT_WEBSITE_BEFORE_2000_SHORT_MONTHS
init|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"MMM d['th']['st']['nd']['rd'] yyyy"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
DECL|field|DATE_FORMAT_BIBTEX
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|DATE_FORMAT_BIBTEX
init|=
name|DateTimeFormatter
operator|.
name|ISO_LOCAL_DATE
decl_stmt|;
DECL|field|IDENTIFIER_PREDICATE
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|IDENTIFIER_PREDICATE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\d{4}/\\d{3,5}"
argument_list|)
operator|.
name|asPredicate
argument_list|()
decl_stmt|;
DECL|field|CITATION_URL_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CITATION_URL_PREFIX
init|=
literal|"https://eprint.iacr.org/eprint-bin/cite.pl?entry="
decl_stmt|;
DECL|field|DESCRIPTION_URL_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIPTION_URL_PREFIX
init|=
literal|"https://eprint.iacr.org/"
decl_stmt|;
DECL|field|WEBSITE_CHARSET
specifier|private
specifier|static
specifier|final
name|Charset
name|WEBSITE_CHARSET
init|=
name|StandardCharsets
operator|.
name|ISO_8859_1
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|ImportFormatPreferences
name|prefs
decl_stmt|;
DECL|method|IacrEprintFetcher (ImportFormatPreferences prefs)
specifier|public
name|IacrEprintFetcher
parameter_list|(
name|ImportFormatPreferences
name|prefs
parameter_list|)
block|{
name|this
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|performSearchById (String identifier)
specifier|public
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|performSearchById
parameter_list|(
name|String
name|identifier
parameter_list|)
throws|throws
name|FetcherException
block|{
name|String
name|identifierWithoutLettersAndSpaces
init|=
name|identifier
operator|.
name|replaceAll
argument_list|(
literal|"[^0-9/]"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|IDENTIFIER_PREDICATE
operator|.
name|test
argument_list|(
name|identifierWithoutLettersAndSpaces
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FetcherException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Invalid identifier: '%0'."
argument_list|,
name|identifier
argument_list|)
argument_list|)
throw|;
block|}
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry
init|=
name|createEntryFromIacrCitation
argument_list|(
name|identifierWithoutLettersAndSpaces
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|setAdditionalFields
argument_list|(
name|entry
operator|.
name|get
argument_list|()
argument_list|,
name|identifierWithoutLettersAndSpaces
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
DECL|method|createEntryFromIacrCitation (String validIdentifier)
specifier|private
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|createEntryFromIacrCitation
parameter_list|(
name|String
name|validIdentifier
parameter_list|)
throws|throws
name|FetcherException
block|{
name|String
name|bibtexCitationHtml
init|=
name|getHtml
argument_list|(
name|CITATION_URL_PREFIX
operator|+
name|validIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|bibtexCitationHtml
operator|.
name|contains
argument_list|(
literal|"No such report found"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FetcherException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No results found."
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|actualEntry
init|=
name|getRequiredValueBetween
argument_list|(
literal|"<PRE>"
argument_list|,
literal|"</PRE>"
argument_list|,
name|bibtexCitationHtml
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|BibtexParser
operator|.
name|singleFromString
argument_list|(
name|actualEntry
argument_list|,
name|prefs
argument_list|,
operator|new
name|DummyFileUpdateMonitor
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FetcherException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry from %0 could not be parsed."
argument_list|,
literal|"IACR"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|setAdditionalFields (BibEntry entry, String identifier)
specifier|private
name|void
name|setAdditionalFields
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|String
name|identifier
parameter_list|)
throws|throws
name|FetcherException
block|{
name|String
name|entryUrl
init|=
name|DESCRIPTION_URL_PREFIX
operator|+
name|identifier
decl_stmt|;
name|String
name|descriptiveHtml
init|=
name|getHtml
argument_list|(
name|entryUrl
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|ABSTRACT
argument_list|,
name|getAbstract
argument_list|(
name|descriptiveHtml
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dateStringAsInHtml
init|=
name|getRequiredValueBetween
argument_list|(
literal|"<b>Date:</b>"
argument_list|,
literal|"<p />"
argument_list|,
name|descriptiveHtml
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DATE
argument_list|,
name|getLatestDate
argument_list|(
name|dateStringAsInHtml
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFromOrAfterYear2000
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|String
name|version
init|=
name|getVersion
argument_list|(
name|identifier
argument_list|,
name|descriptiveHtml
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|,
name|entryUrl
operator|+
literal|"/"
operator|+
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No version information for entries before year 2000
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|,
name|entryUrl
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getVersion (String identifier, String descriptiveHtml)
specifier|private
name|String
name|getVersion
parameter_list|(
name|String
name|identifier
parameter_list|,
name|String
name|descriptiveHtml
parameter_list|)
throws|throws
name|FetcherException
block|{
name|String
name|startOfVersionString
init|=
literal|"<b>Version:</b><a href=\"/"
operator|+
name|identifier
operator|+
literal|"/"
decl_stmt|;
name|String
name|version
init|=
name|getRequiredValueBetween
argument_list|(
name|startOfVersionString
argument_list|,
literal|"\""
argument_list|,
name|descriptiveHtml
argument_list|)
decl_stmt|;
return|return
name|version
return|;
block|}
DECL|method|getAbstract (String descriptiveHtml)
specifier|private
name|String
name|getAbstract
parameter_list|(
name|String
name|descriptiveHtml
parameter_list|)
throws|throws
name|FetcherException
block|{
name|String
name|abstractText
init|=
name|getRequiredValueBetween
argument_list|(
literal|"<b>Abstract:</b>"
argument_list|,
literal|"<p />"
argument_list|,
name|descriptiveHtml
argument_list|)
decl_stmt|;
comment|// for some reason, all spaces are doubled...
name|abstractText
operator|=
name|abstractText
operator|.
name|replaceAll
argument_list|(
literal|"\\s(\\s)"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
return|return
name|abstractText
return|;
block|}
DECL|method|getLatestDate (String dateStringAsInHtml)
specifier|private
name|String
name|getLatestDate
parameter_list|(
name|String
name|dateStringAsInHtml
parameter_list|)
throws|throws
name|FetcherException
block|{
if|if
condition|(
name|dateStringAsInHtml
operator|.
name|contains
argument_list|(
literal|"withdrawn"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FetcherException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"This paper has been withdrawn."
argument_list|)
argument_list|)
throw|;
block|}
name|String
index|[]
name|rawDates
init|=
name|dateStringAsInHtml
operator|.
name|split
argument_list|(
literal|", \\D"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|formattedDates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|rawDate
range|:
name|rawDates
control|)
block|{
name|TemporalAccessor
name|date
init|=
name|parseSingleDateFromWebsite
argument_list|(
name|rawDate
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|formattedDates
operator|.
name|add
argument_list|(
name|DATE_FORMAT_BIBTEX
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|formattedDates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FetcherException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry from %0 could not be parsed."
argument_list|,
literal|"IACR"
argument_list|)
argument_list|)
throw|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|formattedDates
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|formattedDates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|parseSingleDateFromWebsite (String dateStringFromWebsite)
specifier|private
name|TemporalAccessor
name|parseSingleDateFromWebsite
parameter_list|(
name|String
name|dateStringFromWebsite
parameter_list|)
block|{
name|TemporalAccessor
name|date
init|=
literal|null
decl_stmt|;
comment|// Some entries contain double spaces in the date string (which would break our regexs below)
name|String
name|dateStringWithoutDoubleSpaces
init|=
name|dateStringFromWebsite
operator|.
name|replaceAll
argument_list|(
literal|"\\s\\s+"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|Matcher
name|dateMatcherAfter2000
init|=
name|DATE_FROM_WEBSITE_AFTER_2000_PATTERN
operator|.
name|matcher
argument_list|(
name|dateStringWithoutDoubleSpaces
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dateMatcherAfter2000
operator|.
name|find
argument_list|()
condition|)
block|{
try|try
block|{
name|date
operator|=
name|DATE_FORMAT_WEBSITE_AFTER_2000
operator|.
name|parse
argument_list|(
name|dateMatcherAfter2000
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Date from IACR could not be parsed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Entries before year 2000 use a variety of date formats - fortunately, we can match them with only two different
comment|// date formats (each of which differ from the unified format of post-2000 entries).
name|Matcher
name|dateMatcherBefore2000
init|=
name|DATE_FROM_WEBSITE_BEFORE_2000_PATTERN
operator|.
name|matcher
argument_list|(
name|dateStringWithoutDoubleSpaces
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dateMatcherBefore2000
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|dateWithoutComma
init|=
name|dateMatcherBefore2000
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
name|date
operator|=
name|DATE_FORMAT_WEBSITE_BEFORE_2000_LONG_MONTHS
operator|.
name|parse
argument_list|(
name|dateWithoutComma
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|e
parameter_list|)
block|{
try|try
block|{
name|date
operator|=
name|DATE_FORMAT_WEBSITE_BEFORE_2000_SHORT_MONTHS
operator|.
name|parse
argument_list|(
name|dateWithoutComma
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DateTimeException
name|e1
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Date from IACR could not be parsed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Date from IACR could not be parsed"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|date
return|;
block|}
DECL|method|getHtml (String url)
specifier|private
name|String
name|getHtml
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|FetcherException
block|{
try|try
block|{
name|URLDownload
name|download
init|=
operator|new
name|URLDownload
argument_list|(
name|url
argument_list|)
decl_stmt|;
return|return
name|download
operator|.
name|asString
argument_list|(
name|WEBSITE_CHARSET
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FetcherException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not retrieve entry data from '%0'."
argument_list|,
name|url
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getRequiredValueBetween (String from, String to, String haystack)
specifier|private
name|String
name|getRequiredValueBetween
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|,
name|String
name|haystack
parameter_list|)
throws|throws
name|FetcherException
block|{
name|String
name|value
init|=
name|StringUtils
operator|.
name|substringBetween
argument_list|(
name|haystack
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FetcherException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry from %0 could not be parsed."
argument_list|,
literal|"IACR"
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
DECL|method|isFromOrAfterYear2000 (BibEntry entry)
specifier|private
name|boolean
name|isFromOrAfterYear2000
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
throws|throws
name|FetcherException
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|yearField
init|=
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|yearField
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|yearField
operator|.
name|get
argument_list|()
argument_list|)
operator|>
literal|2000
return|;
block|}
throw|throw
operator|new
name|FetcherException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry from %0 could not be parsed."
argument_list|,
literal|"IACR"
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
block|}
end_class

end_unit

