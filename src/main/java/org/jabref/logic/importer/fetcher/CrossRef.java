begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fetcher
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|bibtexfields
operator|.
name|RemoveBracesFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|DOI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
operator|.
name|StringSimilarity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mashape
operator|.
name|unirest
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mashape
operator|.
name|unirest
operator|.
name|http
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mashape
operator|.
name|unirest
operator|.
name|http
operator|.
name|Unirest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mashape
operator|.
name|unirest
operator|.
name|http
operator|.
name|exceptions
operator|.
name|UnirestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * A class for fetching DOIs from CrossRef  *  * See https://github.com/CrossRef/rest-api-doc  */
end_comment

begin_class
DECL|class|CrossRef
specifier|public
class|class
name|CrossRef
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CrossRef
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|API_URL
specifier|private
specifier|static
specifier|final
name|String
name|API_URL
init|=
literal|"http://api.crossref.org"
decl_stmt|;
comment|// number of results to lookup from crossref API
DECL|field|API_RESULTS
specifier|private
specifier|static
specifier|final
name|int
name|API_RESULTS
init|=
literal|5
decl_stmt|;
DECL|field|REMOVE_BRACES_FORMATTER
specifier|private
specifier|static
specifier|final
name|RemoveBracesFormatter
name|REMOVE_BRACES_FORMATTER
init|=
operator|new
name|RemoveBracesFormatter
argument_list|()
decl_stmt|;
DECL|method|findDOI (BibEntry entry)
specifier|public
specifier|static
name|Optional
argument_list|<
name|DOI
argument_list|>
name|findDOI
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|DOI
argument_list|>
name|doi
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
comment|// title is minimum requirement
name|Optional
argument_list|<
name|String
argument_list|>
name|title
init|=
name|entry
operator|.
name|getLatexFreeField
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isPresent
argument_list|()
operator|||
name|title
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|doi
return|;
block|}
name|String
name|query
init|=
name|enhanceQuery
argument_list|(
name|title
operator|.
name|get
argument_list|()
argument_list|,
name|entry
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpResponse
argument_list|<
name|JsonNode
argument_list|>
name|response
init|=
name|Unirest
operator|.
name|get
argument_list|(
name|API_URL
operator|+
literal|"/works"
argument_list|)
operator|.
name|queryString
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
operator|.
name|queryString
argument_list|(
literal|"rows"
argument_list|,
name|API_RESULTS
argument_list|)
operator|.
name|asJson
argument_list|()
decl_stmt|;
name|JSONArray
name|items
init|=
name|response
operator|.
name|getBody
argument_list|()
operator|.
name|getObject
argument_list|()
operator|.
name|getJSONObject
argument_list|(
literal|"message"
argument_list|)
operator|.
name|getJSONArray
argument_list|(
literal|"items"
argument_list|)
decl_stmt|;
comment|// quality check
name|Optional
argument_list|<
name|String
argument_list|>
name|dataDoi
init|=
name|findMatchingEntry
argument_list|(
name|entry
argument_list|,
name|items
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataDoi
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"DOI "
operator|+
name|dataDoi
operator|.
name|get
argument_list|()
operator|+
literal|" for "
operator|+
name|title
operator|.
name|get
argument_list|()
operator|+
literal|" found."
argument_list|)
expr_stmt|;
return|return
name|DOI
operator|.
name|build
argument_list|(
name|dataDoi
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnirestException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Unable to query CrossRef API: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|doi
return|;
block|}
DECL|method|enhanceQuery (String query, BibEntry entry)
specifier|private
specifier|static
name|String
name|enhanceQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
block|{
name|StringBuilder
name|enhancedQuery
init|=
operator|new
name|StringBuilder
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// author
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|author
lambda|->
block|{
if|if
condition|(
operator|!
name|author
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|enhancedQuery
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
operator|.
name|append
argument_list|(
name|author
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// year
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|year
lambda|->
block|{
if|if
condition|(
operator|!
name|year
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|enhancedQuery
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
operator|.
name|append
argument_list|(
name|year
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|enhancedQuery
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|findMatchingEntry (BibEntry entry, JSONArray results)
specifier|private
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|findMatchingEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|JSONArray
name|results
parameter_list|)
block|{
specifier|final
name|String
name|entryTitle
init|=
name|REMOVE_BRACES_FORMATTER
operator|.
name|format
argument_list|(
name|entry
operator|.
name|getLatexFreeField
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|StringSimilarity
name|stringSimilarity
init|=
operator|new
name|StringSimilarity
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// currently only title-based
comment|// title: [ "How the Mind Hurts and Heals the Body." ]
comment|// subtitle: [ "" ]
try|try
block|{
comment|// title
name|JSONObject
name|data
init|=
name|results
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|dataTitle
init|=
name|data
operator|.
name|getJSONArray
argument_list|(
literal|"title"
argument_list|)
operator|.
name|getString
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|stringSimilarity
operator|.
name|isSimilar
argument_list|(
name|entryTitle
argument_list|,
name|dataTitle
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|data
operator|.
name|getString
argument_list|(
literal|"DOI"
argument_list|)
argument_list|)
return|;
block|}
comment|// subtitle
comment|// additional check, as sometimes subtitle is needed but sometimes only duplicates the title
if|if
condition|(
name|data
operator|.
name|getJSONArray
argument_list|(
literal|"subtitle"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|dataWithSubTitle
init|=
name|dataTitle
operator|+
literal|" "
operator|+
name|data
operator|.
name|getJSONArray
argument_list|(
literal|"subtitle"
argument_list|)
operator|.
name|getString
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|stringSimilarity
operator|.
name|isSimilar
argument_list|(
name|entryTitle
argument_list|,
name|dataWithSubTitle
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|data
operator|.
name|getString
argument_list|(
literal|"DOI"
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JSONException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"CrossRef API JSON format has changed: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

