begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fetcher
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|help
operator|.
name|HelpFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|FetcherException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|SearchBasedParserFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|URLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Fetches data from the Directory of Open Access Journals (DOAJ)  *  * @implNote<a href="https://doaj.org/api/v1/docs">API documentation</a>  */
end_comment

begin_class
DECL|class|DOAJFetcher
specifier|public
class|class
name|DOAJFetcher
implements|implements
name|SearchBasedParserFetcher
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DOAJFetcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SEARCH_URL
specifier|private
specifier|static
specifier|final
name|String
name|SEARCH_URL
init|=
literal|"https://doaj.org/api/v1/search/articles/"
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|ImportFormatPreferences
name|preferences
decl_stmt|;
DECL|method|DOAJFetcher (ImportFormatPreferences preferences)
specifier|public
name|DOAJFetcher
parameter_list|(
name|ImportFormatPreferences
name|preferences
parameter_list|)
block|{
name|this
operator|.
name|preferences
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|preferences
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convert a JSONObject containing a bibJSON entry to a BibEntry      *      * @param bibJsonEntry The JSONObject to convert      * @return the converted BibEntry      */
DECL|method|parseBibJSONtoBibtex (JSONObject bibJsonEntry, Character keywordSeparator)
specifier|public
specifier|static
name|BibEntry
name|parseBibJSONtoBibtex
parameter_list|(
name|JSONObject
name|bibJsonEntry
parameter_list|,
name|Character
name|keywordSeparator
parameter_list|)
block|{
comment|// Fields that are directly accessible at the top level BibJson object
name|String
index|[]
name|singleFieldStrings
init|=
block|{
name|FieldName
operator|.
name|YEAR
block|,
name|FieldName
operator|.
name|TITLE
block|,
name|FieldName
operator|.
name|ABSTRACT
block|,
name|FieldName
operator|.
name|MONTH
block|}
decl_stmt|;
comment|// Fields that are accessible in the journal part of the BibJson object
name|String
index|[]
name|journalSingleFieldStrings
init|=
block|{
name|FieldName
operator|.
name|PUBLISHER
block|,
name|FieldName
operator|.
name|NUMBER
block|,
name|FieldName
operator|.
name|VOLUME
block|}
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
literal|"article"
argument_list|)
expr_stmt|;
comment|// Authors
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"author"
argument_list|)
condition|)
block|{
name|JSONArray
name|authors
init|=
name|bibJsonEntry
operator|.
name|getJSONArray
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|authorList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|authors
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|authors
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|has
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|authorList
operator|.
name|add
argument_list|(
name|authors
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Empty author name."
argument_list|)
expr_stmt|;
block|}
block|}
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|" and "
argument_list|,
name|authorList
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"No author found."
argument_list|)
expr_stmt|;
block|}
comment|// Direct accessible fields
for|for
control|(
name|String
name|field
range|:
name|singleFieldStrings
control|)
block|{
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|bibJsonEntry
operator|.
name|getString
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Page numbers
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"start_page"
argument_list|)
condition|)
block|{
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"end_page"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|PAGES
argument_list|,
name|bibJsonEntry
operator|.
name|getString
argument_list|(
literal|"start_page"
argument_list|)
operator|+
literal|"--"
operator|+
name|bibJsonEntry
operator|.
name|getString
argument_list|(
literal|"end_page"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|PAGES
argument_list|,
name|bibJsonEntry
operator|.
name|getString
argument_list|(
literal|"start_page"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Journal
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"journal"
argument_list|)
condition|)
block|{
name|JSONObject
name|journal
init|=
name|bibJsonEntry
operator|.
name|getJSONObject
argument_list|(
literal|"journal"
argument_list|)
decl_stmt|;
comment|// Journal title
if|if
condition|(
name|journal
operator|.
name|has
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|JOURNAL
argument_list|,
name|journal
operator|.
name|getString
argument_list|(
literal|"title"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"No journal title found."
argument_list|)
expr_stmt|;
block|}
comment|// Other journal related fields
for|for
control|(
name|String
name|field
range|:
name|journalSingleFieldStrings
control|)
block|{
if|if
condition|(
name|journal
operator|.
name|has
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|journal
operator|.
name|getString
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"No journal information found."
argument_list|)
expr_stmt|;
block|}
comment|// Keywords
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"keywords"
argument_list|)
condition|)
block|{
name|JSONArray
name|keywords
init|=
name|bibJsonEntry
operator|.
name|getJSONArray
argument_list|(
literal|"keywords"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keywords
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|keywords
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|entry
operator|.
name|addKeyword
argument_list|(
name|keywords
operator|.
name|getString
argument_list|(
name|i
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
name|keywordSeparator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Identifiers
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"identifier"
argument_list|)
condition|)
block|{
name|JSONArray
name|identifiers
init|=
name|bibJsonEntry
operator|.
name|getJSONArray
argument_list|(
literal|"identifier"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|identifiers
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|identifiers
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"doi"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|,
name|identifiers
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"pissn"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|ISSN
argument_list|,
name|identifiers
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"eissn"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|ISSN
argument_list|,
name|identifiers
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Links
if|if
condition|(
name|bibJsonEntry
operator|.
name|has
argument_list|(
literal|"link"
argument_list|)
condition|)
block|{
name|JSONArray
name|links
init|=
name|bibJsonEntry
operator|.
name|getJSONArray
argument_list|(
literal|"link"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|links
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|links
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|has
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
name|links
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"fulltext"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
name|links
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|has
argument_list|(
literal|"url"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|,
name|links
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|entry
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"DOAJ"
return|;
block|}
annotation|@
name|Override
DECL|method|getHelpPage ()
specifier|public
name|Optional
argument_list|<
name|HelpFile
argument_list|>
name|getHelpPage
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|HelpFile
operator|.
name|FETCHER_DOAJ
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getURLForQuery (String query)
specifier|public
name|URL
name|getURLForQuery
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|MalformedURLException
throws|,
name|FetcherException
block|{
name|URIBuilder
name|uriBuilder
init|=
operator|new
name|URIBuilder
argument_list|(
name|SEARCH_URL
argument_list|)
decl_stmt|;
name|URLUtil
operator|.
name|addPath
argument_list|(
name|uriBuilder
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|uriBuilder
operator|.
name|addParameter
argument_list|(
literal|"pageSize"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
comment|// Number of results
comment|//uriBuilder.addParameter("page", "1"); // Page (not needed so far)
return|return
name|uriBuilder
operator|.
name|build
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getParser ()
specifier|public
name|Parser
name|getParser
parameter_list|()
block|{
return|return
name|inputStream
lambda|->
block|{
name|String
name|response
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|)
argument_list|)
operator|.
name|lines
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|)
decl_stmt|;
name|JSONObject
name|jsonObject
init|=
operator|new
name|JSONObject
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|jsonObject
operator|.
name|has
argument_list|(
literal|"results"
argument_list|)
condition|)
block|{
name|JSONArray
name|results
init|=
name|jsonObject
operator|.
name|getJSONArray
argument_list|(
literal|"results"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|bibJsonEntry
init|=
name|results
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getJSONObject
argument_list|(
literal|"bibjson"
argument_list|)
decl_stmt|;
name|BibEntry
name|entry
init|=
name|parseBibJSONtoBibtex
argument_list|(
name|bibJsonEntry
argument_list|,
name|preferences
operator|.
name|getKeywordSeparator
argument_list|()
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entries
return|;
block|}
return|;
block|}
block|}
end_class

end_unit

