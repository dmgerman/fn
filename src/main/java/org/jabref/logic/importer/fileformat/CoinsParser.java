begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fileformat
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|StandardEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_comment
comment|/**  * @implNote implemented by reverse-engineering<a href="https://github.com/SeerLabs/CiteSeerX/blob/4df28a98083be2829ec4c56ebbac09eb7772d379/src/java/edu/psu/citeseerx/domain/BiblioTransformer.java#L155-L249">the implementation by CiteSeerX</a>  */
end_comment

begin_class
DECL|class|CoinsParser
specifier|public
class|class
name|CoinsParser
implements|implements
name|Parser
block|{
DECL|field|DOI
specifier|private
specifier|final
name|Pattern
name|DOI
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"%3Fdoi%3D([^&]+)"
argument_list|)
decl_stmt|;
DECL|field|TITLE
specifier|private
specifier|final
name|Pattern
name|TITLE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"&amp;rft.atitle=([^&]+)"
argument_list|)
decl_stmt|;
DECL|field|JOURNAL
specifier|private
specifier|final
name|Pattern
name|JOURNAL
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"&amp;rft.jtitle=([^&]+)"
argument_list|)
decl_stmt|;
DECL|field|YEAR
specifier|private
specifier|final
name|Pattern
name|YEAR
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"&amp;rft.date=([^&]+)"
argument_list|)
decl_stmt|;
DECL|field|VOLUME
specifier|private
specifier|final
name|Pattern
name|VOLUME
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"&amp;rft.volume=([^&]+)"
argument_list|)
decl_stmt|;
DECL|field|PAGES
specifier|private
specifier|final
name|Pattern
name|PAGES
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"&amp;rft.pages=([^&]+)"
argument_list|)
decl_stmt|;
DECL|field|ISSUE
specifier|private
specifier|final
name|Pattern
name|ISSUE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"&amp;rft.issue=([^&]+)"
argument_list|)
decl_stmt|;
DECL|field|TYPE
specifier|private
specifier|final
name|Pattern
name|TYPE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"&amp;rft.genre=([^&]+)"
argument_list|)
decl_stmt|;
DECL|field|AUTHOR
specifier|private
specifier|final
name|Pattern
name|AUTHOR
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"&amp;rft.au=([^&]+)"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|parseEntries (InputStream inputStream)
specifier|public
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parseEntries
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|data
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|)
argument_list|)
operator|.
name|lines
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|)
decl_stmt|;
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|appendData
argument_list|(
name|data
argument_list|,
name|entry
argument_list|,
name|DOI
argument_list|,
name|StandardField
operator|.
name|DOI
argument_list|)
expr_stmt|;
name|appendData
argument_list|(
name|data
argument_list|,
name|entry
argument_list|,
name|TITLE
argument_list|,
name|StandardField
operator|.
name|TITLE
argument_list|)
expr_stmt|;
name|appendData
argument_list|(
name|data
argument_list|,
name|entry
argument_list|,
name|JOURNAL
argument_list|,
name|StandardField
operator|.
name|JOURNALTITLE
argument_list|)
expr_stmt|;
name|appendData
argument_list|(
name|data
argument_list|,
name|entry
argument_list|,
name|YEAR
argument_list|,
name|StandardField
operator|.
name|YEAR
argument_list|)
expr_stmt|;
name|appendData
argument_list|(
name|data
argument_list|,
name|entry
argument_list|,
name|VOLUME
argument_list|,
name|StandardField
operator|.
name|VOLUME
argument_list|)
expr_stmt|;
name|appendData
argument_list|(
name|data
argument_list|,
name|entry
argument_list|,
name|PAGES
argument_list|,
name|StandardField
operator|.
name|PAGES
argument_list|)
expr_stmt|;
name|appendData
argument_list|(
name|data
argument_list|,
name|entry
argument_list|,
name|ISSUE
argument_list|,
name|StandardField
operator|.
name|ISSUE
argument_list|)
expr_stmt|;
name|Matcher
name|matcherType
init|=
name|TYPE
operator|.
name|matcher
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcherType
operator|.
name|find
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|matcherType
operator|.
name|group
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|"article"
case|:
name|entry
operator|.
name|setType
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"unknown"
case|:
default|default:
name|entry
operator|.
name|setType
argument_list|(
name|StandardEntryType
operator|.
name|Misc
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|authors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Matcher
name|matcherAuthors
init|=
name|AUTHOR
operator|.
name|matcher
argument_list|(
name|data
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcherAuthors
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|author
init|=
name|matcherAuthors
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|authors
operator|.
name|add
argument_list|(
name|author
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
name|authors
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|" and "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
return|;
block|}
DECL|method|appendData (String data, BibEntry entry, Pattern pattern, Field field)
specifier|private
name|void
name|appendData
parameter_list|(
name|String
name|data
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|Pattern
name|pattern
parameter_list|,
name|Field
name|field
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

