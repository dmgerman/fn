begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  */
end_comment

begin_package
DECL|package|org.jabref.logic.importer.fileformat
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|Importer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  *  *  */
end_comment

begin_class
DECL|class|MrDLibImporter
specifier|public
class|class
name|MrDLibImporter
extends|extends
name|Importer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MrDLibImporter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|parserResult
specifier|public
name|ParserResult
name|parserResult
decl_stmt|;
annotation|@
name|Override
DECL|method|isRecognizedFormat (BufferedReader input)
specifier|public
name|boolean
name|isRecognizedFormat
parameter_list|(
name|BufferedReader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|recommendationsAsString
init|=
name|convertToString
argument_list|(
name|input
argument_list|)
decl_stmt|;
comment|// check for valid format
try|try
block|{
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SAXParser
name|saxParser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|DefaultHandler
name|handler
init|=
operator|new
name|DefaultHandler
argument_list|()
block|{
comment|// No Processing here. Just check for valid xml.
comment|// Later here will be the check against the XML schema.
block|}
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|recommendationsAsString
operator|.
name|getBytes
argument_list|()
argument_list|)
init|)
block|{
name|saxParser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
decl||
name|SAXException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|importDatabase (BufferedReader input)
specifier|public
name|ParserResult
name|importDatabase
parameter_list|(
name|BufferedReader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|parse
argument_list|(
name|input
argument_list|)
expr_stmt|;
return|return
name|parserResult
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"MrDLibImporter"
return|;
block|}
annotation|@
name|Override
DECL|method|getFileType ()
specifier|public
name|FileType
name|getFileType
parameter_list|()
block|{
return|return
name|FileType
operator|.
name|XML
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Takes valid xml documents. Parses from MrDLib API a BibEntry"
return|;
block|}
comment|/**      * The SaxParser needs this String. So I convert it here.      * @param Takes a BufferedReader with a reference to the XML document delivered by mdl server.      * @return Returns an String containing the XML file.      * @throws IOException      */
DECL|method|convertToString (BufferedReader input)
specifier|private
name|String
name|convertToString
parameter_list|(
name|BufferedReader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|line
decl_stmt|;
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|line
operator|=
name|input
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Small pair-class to ensure the right order of the recommendations.      */
DECL|class|RankedBibEntry
specifier|private
class|class
name|RankedBibEntry
block|{
DECL|field|entry
specifier|public
name|BibEntry
name|entry
decl_stmt|;
DECL|field|rank
specifier|public
name|Integer
name|rank
decl_stmt|;
DECL|method|RankedBibEntry (BibEntry entry, Integer rank)
specifier|public
name|RankedBibEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|Integer
name|rank
parameter_list|)
block|{
name|this
operator|.
name|rank
operator|=
name|rank
expr_stmt|;
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
block|}
block|}
comment|/**      * Parses the input from the server to a ParserResult      * @param input A BufferedReader with a reference to a string with the servers response      * @throws IOException      */
DECL|method|parse (BufferedReader input)
specifier|private
name|void
name|parse
parameter_list|(
name|BufferedReader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The Bibdatabase that gets returned in the ParserResult.
name|BibDatabase
name|bibDatabase
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
comment|// The document to parse
name|String
name|recommendations
init|=
name|convertToString
argument_list|(
name|input
argument_list|)
decl_stmt|;
comment|// The sorted BibEntries gets stored here later
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibEntries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Parsing the response with a SAX parser
try|try
block|{
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SAXParser
name|saxParser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|MrDlibImporterHandler
name|handler
init|=
operator|new
name|MrDlibImporterHandler
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|recommendations
operator|.
name|getBytes
argument_list|()
argument_list|)
init|)
block|{
name|saxParser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RankedBibEntry
argument_list|>
name|rankedBibEntries
init|=
name|handler
operator|.
name|getRankedBibEntries
argument_list|()
decl_stmt|;
name|rankedBibEntries
operator|.
name|sort
argument_list|(
parameter_list|(
name|RankedBibEntry
name|rankedBibEntry1
parameter_list|,
name|RankedBibEntry
name|rankedBibEntry2
parameter_list|)
lambda|->
name|rankedBibEntry1
operator|.
name|rank
operator|.
name|compareTo
argument_list|(
name|rankedBibEntry2
operator|.
name|rank
argument_list|)
argument_list|)
expr_stmt|;
name|bibEntries
operator|=
name|rankedBibEntries
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|entry
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
decl||
name|SAXException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BibEntry
name|bibentry
range|:
name|bibEntries
control|)
block|{
name|bibDatabase
operator|.
name|insertEntry
argument_list|(
name|bibentry
argument_list|)
expr_stmt|;
block|}
name|parserResult
operator|=
operator|new
name|ParserResult
argument_list|(
name|bibDatabase
argument_list|)
expr_stmt|;
block|}
DECL|method|getParserResult ()
specifier|public
name|ParserResult
name|getParserResult
parameter_list|()
block|{
return|return
name|parserResult
return|;
block|}
comment|/**      * Handler that parses the response from Mr. DLib to BibEntries      */
DECL|class|MrDlibImporterHandler
specifier|private
class|class
name|MrDlibImporterHandler
extends|extends
name|DefaultHandler
block|{
comment|// The list ob BibEntries with its associated rank
DECL|field|rankedBibEntries
specifier|private
specifier|final
name|List
argument_list|<
name|RankedBibEntry
argument_list|>
name|rankedBibEntries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|authors
specifier|private
name|boolean
name|authors
decl_stmt|;
DECL|field|published_in
specifier|private
name|boolean
name|published_in
decl_stmt|;
DECL|field|title
specifier|private
name|boolean
name|title
decl_stmt|;
DECL|field|year
specifier|private
name|boolean
name|year
decl_stmt|;
DECL|field|snippet
specifier|private
name|boolean
name|snippet
decl_stmt|;
DECL|field|rank
specifier|private
name|boolean
name|rank
decl_stmt|;
DECL|field|type
specifier|private
name|boolean
name|type
decl_stmt|;
DECL|field|htmlSnippetSingle
specifier|private
name|String
name|htmlSnippetSingle
decl_stmt|;
DECL|field|htmlSnippetSingleRank
specifier|private
name|int
name|htmlSnippetSingleRank
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|currentEntry
specifier|private
name|BibEntry
name|currentEntry
decl_stmt|;
DECL|method|getRankedBibEntries ()
specifier|public
name|List
argument_list|<
name|RankedBibEntry
argument_list|>
name|getRankedBibEntries
parameter_list|()
block|{
return|return
name|rankedBibEntries
return|;
block|}
annotation|@
name|Override
DECL|method|startElement (String uri, String localName, String qName, Attributes attributes)
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
switch|switch
condition|(
name|qName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
condition|)
block|{
case|case
literal|"related_article"
case|:
name|currentEntry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
name|htmlSnippetSingle
operator|=
literal|null
expr_stmt|;
name|htmlSnippetSingleRank
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
case|case
literal|"authors"
case|:
name|authors
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|"published_in"
case|:
name|published_in
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|"title"
case|:
name|title
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|"year"
case|:
name|year
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|"type"
case|:
name|type
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|"suggested_rank"
case|:
name|rank
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|qName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"snippet"
argument_list|)
operator|&&
name|attributes
operator|.
name|getValue
argument_list|(
literal|0
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"html_fully_formatted"
argument_list|)
condition|)
block|{
name|snippet
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|endElement (String uri, String localName, String qName)
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|qName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"related_article"
argument_list|)
condition|)
block|{
name|rankedBibEntries
operator|.
name|add
argument_list|(
operator|new
name|RankedBibEntry
argument_list|(
name|currentEntry
argument_list|,
name|htmlSnippetSingleRank
argument_list|)
argument_list|)
expr_stmt|;
name|currentEntry
operator|=
operator|new
name|BibEntry
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|characters (char ch[], int start, int length)
specifier|public
name|void
name|characters
parameter_list|(
name|char
name|ch
index|[]
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|authors
condition|)
block|{
name|currentEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|,
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|authors
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|published_in
condition|)
block|{
name|currentEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|JOURNAL
argument_list|,
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|published_in
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|title
condition|)
block|{
name|currentEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|TITLE
argument_list|,
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|title
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|year
condition|)
block|{
name|currentEntry
operator|.
name|setField
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|,
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|year
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|rank
condition|)
block|{
name|htmlSnippetSingleRank
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|rank
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|snippet
condition|)
block|{
name|currentEntry
operator|.
name|setField
argument_list|(
literal|"html_representation"
argument_list|,
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|snippet
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

