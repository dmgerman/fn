begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fileformat
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|Importer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|FileExtensions
import|;
end_import

begin_comment
comment|/**  * Object with data for a custom importer.  *  *<p>Is also responsible for instantiating the class loader.</p>  */
end_comment

begin_class
DECL|class|CustomImporter
specifier|public
class|class
name|CustomImporter
extends|extends
name|Importer
block|{
DECL|field|className
specifier|private
specifier|final
name|String
name|className
decl_stmt|;
DECL|field|basePath
specifier|private
specifier|final
name|Path
name|basePath
decl_stmt|;
DECL|field|importer
specifier|private
name|Importer
name|importer
decl_stmt|;
DECL|method|CustomImporter (String basePath, String className)
specifier|public
name|CustomImporter
parameter_list|(
name|String
name|basePath
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|this
operator|.
name|basePath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
try|try
block|{
name|importer
operator|=
name|load
argument_list|(
name|this
operator|.
name|basePath
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|this
operator|.
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|""
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
DECL|method|load (URL basePathURL, String className)
specifier|private
specifier|static
name|Importer
name|load
parameter_list|(
name|URL
name|basePathURL
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
try|try
init|(
name|URLClassLoader
name|cl
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|basePathURL
block|}
argument_list|)
init|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|true
argument_list|,
name|cl
argument_list|)
decl_stmt|;
return|return
operator|(
name|Importer
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
DECL|method|getAsStringList ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAsStringList
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|basePath
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
argument_list|,
name|className
argument_list|)
return|;
block|}
DECL|method|getClassName ()
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
DECL|method|getBasePath ()
specifier|public
name|Path
name|getBasePath
parameter_list|()
block|{
return|return
name|basePath
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|CustomImporter
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CustomImporter
name|otherImporter
init|=
operator|(
name|CustomImporter
operator|)
name|other
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|className
argument_list|,
name|otherImporter
operator|.
name|className
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|basePath
argument_list|,
name|otherImporter
operator|.
name|basePath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isRecognizedFormat (BufferedReader input)
specifier|public
name|boolean
name|isRecognizedFormat
parameter_list|(
name|BufferedReader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|importer
operator|.
name|isRecognizedFormat
argument_list|(
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|importDatabase (BufferedReader input)
specifier|public
name|ParserResult
name|importDatabase
parameter_list|(
name|BufferedReader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|importer
operator|.
name|importDatabase
argument_list|(
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|importer
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getExtensions ()
specifier|public
name|FileExtensions
name|getExtensions
parameter_list|()
block|{
return|return
name|importer
operator|.
name|getExtensions
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|importer
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|importer
operator|.
name|getDescription
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|className
argument_list|,
name|basePath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

