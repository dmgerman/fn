begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fileformat
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|Importer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Abstract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Authors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Contributors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Dates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|ElectronicResourceNum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Isbn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Keywords
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Notes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Number
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Pages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|PdfUrls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|RefType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|RelatedUrls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|SecondaryTitle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Style
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Title
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Titles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Urls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Volume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Xml
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|endnote
operator|.
name|Year
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|StandardFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|StandardEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|OptionalUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Importer for the Endnote XML format.  *  * Based on dtd scheme downloaded from Article #122577 in http://kbportal.thomson.com.  */
end_comment

begin_class
DECL|class|EndnoteXmlImporter
specifier|public
class|class
name|EndnoteXmlImporter
extends|extends
name|Importer
implements|implements
name|Parser
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EndnoteXmlImporter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|ImportFormatPreferences
name|preferences
decl_stmt|;
DECL|field|unmarshaller
specifier|private
name|Unmarshaller
name|unmarshaller
decl_stmt|;
DECL|method|EndnoteXmlImporter (ImportFormatPreferences preferences)
specifier|public
name|EndnoteXmlImporter
parameter_list|(
name|ImportFormatPreferences
name|preferences
parameter_list|)
block|{
name|this
operator|.
name|preferences
operator|=
name|preferences
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"EndNote XML"
return|;
block|}
annotation|@
name|Override
DECL|method|getFileType ()
specifier|public
name|StandardFileType
name|getFileType
parameter_list|()
block|{
return|return
name|StandardFileType
operator|.
name|XML
return|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"endnote"
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Importer for the EndNote XML format."
return|;
block|}
annotation|@
name|Override
DECL|method|isRecognizedFormat (BufferedReader reader)
specifier|public
name|boolean
name|isRecognizedFormat
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|str
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
operator|(
name|str
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|i
operator|<
literal|50
operator|)
condition|)
block|{
if|if
condition|(
name|str
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|contains
argument_list|(
literal|"<records>"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|importDatabase (BufferedReader reader)
specifier|public
name|ParserResult
name|importDatabase
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|reader
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|unmarshalledObject
init|=
name|unmarshallRoot
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|unmarshalledObject
operator|instanceof
name|Xml
condition|)
block|{
comment|// Check whether we have an article set, an article, a book article or a book article set
name|Xml
name|root
init|=
operator|(
name|Xml
operator|)
name|unmarshalledObject
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibEntries
init|=
name|root
operator|.
name|getRecords
argument_list|()
operator|.
name|getRecord
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|parseRecord
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ParserResult
argument_list|(
name|bibEntries
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ParserResult
operator|.
name|fromErrorMessage
argument_list|(
literal|"File does not start with xml tag."
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|JAXBException
decl||
name|XMLStreamException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"could not parse document"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|ParserResult
operator|.
name|fromError
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|unmarshallRoot (BufferedReader reader)
specifier|private
name|Object
name|unmarshallRoot
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|XMLStreamException
throws|,
name|JAXBException
block|{
name|initUnmarshaller
argument_list|()
expr_stmt|;
name|XMLInputFactory
name|xmlInputFactory
init|=
name|XMLInputFactory
operator|.
name|newFactory
argument_list|()
decl_stmt|;
name|XMLStreamReader
name|xmlStreamReader
init|=
name|xmlInputFactory
operator|.
name|createXMLStreamReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
comment|// Go to the root element
while|while
condition|(
operator|!
name|xmlStreamReader
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|xmlStreamReader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|xmlStreamReader
argument_list|)
return|;
block|}
DECL|method|initUnmarshaller ()
specifier|private
name|void
name|initUnmarshaller
parameter_list|()
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|unmarshaller
operator|==
literal|null
condition|)
block|{
comment|// Lazy init because this is expensive
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
literal|"org.jabref.logic.importer.fileformat.endnote"
argument_list|)
decl_stmt|;
name|unmarshaller
operator|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|convertRefNameToType (String refName)
specifier|private
specifier|static
name|EntryType
name|convertRefNameToType
parameter_list|(
name|String
name|refName
parameter_list|)
block|{
switch|switch
condition|(
name|refName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
condition|)
block|{
case|case
literal|"artwork"
case|:
return|return
name|StandardEntryType
operator|.
name|Misc
return|;
case|case
literal|"generic"
case|:
return|return
name|StandardEntryType
operator|.
name|Misc
return|;
case|case
literal|"electronic rticle"
case|:
return|return
name|StandardEntryType
operator|.
name|Electronic
return|;
case|case
literal|"book section"
case|:
return|return
name|StandardEntryType
operator|.
name|InBook
return|;
case|case
literal|"book"
case|:
return|return
name|StandardEntryType
operator|.
name|Book
return|;
case|case
literal|"journal article"
case|:
return|return
name|StandardEntryType
operator|.
name|Article
return|;
default|default:
return|return
name|StandardEntryType
operator|.
name|Article
return|;
block|}
block|}
DECL|method|parseRecord (Record record)
specifier|private
name|BibEntry
name|parseRecord
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
name|BibEntry
name|entry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|getType
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|getAuthors
argument_list|(
name|record
argument_list|)
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|value
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getTitles
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Titles
operator|::
name|getTitle
argument_list|)
operator|.
name|map
argument_list|(
name|Title
operator|::
name|getStyle
argument_list|)
operator|.
name|map
argument_list|(
name|Style
operator|::
name|getvalue
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|value
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
name|clean
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getTitles
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Titles
operator|::
name|getSecondaryTitle
argument_list|)
operator|.
name|map
argument_list|(
name|SecondaryTitle
operator|::
name|getStyle
argument_list|)
operator|.
name|map
argument_list|(
name|Style
operator|::
name|getvalue
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|value
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|JOURNAL
argument_list|,
name|clean
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getPages
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Pages
operator|::
name|getStyle
argument_list|)
operator|.
name|map
argument_list|(
name|Style
operator|::
name|getvalue
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|value
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|PAGES
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getNumber
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Number
operator|::
name|getStyle
argument_list|)
operator|.
name|map
argument_list|(
name|Style
operator|::
name|getvalue
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|value
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|NUMBER
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getVolume
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Volume
operator|::
name|getStyle
argument_list|)
operator|.
name|map
argument_list|(
name|Style
operator|::
name|getvalue
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|value
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|VOLUME
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getDates
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Dates
operator|::
name|getYear
argument_list|)
operator|.
name|map
argument_list|(
name|Year
operator|::
name|getStyle
argument_list|)
operator|.
name|map
argument_list|(
name|Style
operator|::
name|getvalue
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|value
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getNotes
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Notes
operator|::
name|getStyle
argument_list|)
operator|.
name|map
argument_list|(
name|Style
operator|::
name|getvalue
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|value
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|NOTE
argument_list|,
name|value
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getUrl
argument_list|(
name|record
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|value
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|URL
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|putKeywords
argument_list|(
name|getKeywords
argument_list|(
name|record
argument_list|)
argument_list|,
name|preferences
operator|.
name|getKeywordSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getAbstract
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Abstract
operator|::
name|getStyle
argument_list|)
operator|.
name|map
argument_list|(
name|Style
operator|::
name|getvalue
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|value
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|ABSTRACT
argument_list|,
name|value
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setFiles
argument_list|(
name|getLinkedFiles
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getIsbn
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Isbn
operator|::
name|getStyle
argument_list|)
operator|.
name|map
argument_list|(
name|Style
operator|::
name|getvalue
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|value
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|ISBN
argument_list|,
name|clean
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getElectronicResourceNum
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|ElectronicResourceNum
operator|::
name|getStyle
argument_list|)
operator|.
name|map
argument_list|(
name|Style
operator|::
name|getvalue
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|doi
lambda|->
name|entry
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|DOI
argument_list|,
name|doi
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
DECL|method|getType (Record record)
specifier|private
name|EntryType
name|getType
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getRefType
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|RefType
operator|::
name|getName
argument_list|)
operator|.
name|map
argument_list|(
name|EndnoteXmlImporter
operator|::
name|convertRefNameToType
argument_list|)
operator|.
name|orElse
argument_list|(
name|StandardEntryType
operator|.
name|Article
argument_list|)
return|;
block|}
DECL|method|getLinkedFiles (Record record)
specifier|private
name|List
argument_list|<
name|LinkedFile
argument_list|>
name|getLinkedFiles
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
name|Optional
argument_list|<
name|PdfUrls
argument_list|>
name|urls
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getUrls
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Urls
operator|::
name|getPdfUrls
argument_list|)
decl_stmt|;
return|return
name|OptionalUtil
operator|.
name|toStream
argument_list|(
name|urls
argument_list|)
operator|.
name|flatMap
argument_list|(
name|pdfUrls
lambda|->
name|pdfUrls
operator|.
name|getUrl
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|flatMap
argument_list|(
name|url
lambda|->
name|OptionalUtil
operator|.
name|toStream
argument_list|(
name|getUrlValue
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|url
lambda|->
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|url
argument_list|,
literal|"PDF"
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getUrl (Record record)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|getUrl
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
name|Optional
argument_list|<
name|RelatedUrls
argument_list|>
name|urls
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getUrls
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Urls
operator|::
name|getRelatedUrls
argument_list|)
decl_stmt|;
return|return
name|OptionalUtil
operator|.
name|toStream
argument_list|(
name|urls
argument_list|)
operator|.
name|flatMap
argument_list|(
name|url
lambda|->
name|url
operator|.
name|getUrl
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|flatMap
argument_list|(
name|url
lambda|->
name|OptionalUtil
operator|.
name|toStream
argument_list|(
name|getUrlValue
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
return|;
block|}
DECL|method|getUrlValue (Url url)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|getUrlValue
parameter_list|(
name|Url
name|url
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|url
argument_list|)
operator|.
name|map
argument_list|(
name|Url
operator|::
name|getStyle
argument_list|)
operator|.
name|map
argument_list|(
name|Style
operator|::
name|getvalue
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|clean
argument_list|)
return|;
block|}
DECL|method|getKeywords (Record record)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getKeywords
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
name|Keywords
name|keywords
init|=
name|record
operator|.
name|getKeywords
argument_list|()
decl_stmt|;
if|if
condition|(
name|keywords
operator|!=
literal|null
condition|)
block|{
return|return
name|keywords
operator|.
name|getKeyword
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|keyword
lambda|->
name|keyword
operator|.
name|getStyle
argument_list|()
operator|.
name|getvalue
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
DECL|method|getAuthors (Record record)
specifier|private
name|String
name|getAuthors
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
name|Optional
argument_list|<
name|Authors
argument_list|>
name|authors
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|record
operator|.
name|getContributors
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Contributors
operator|::
name|getAuthors
argument_list|)
decl_stmt|;
return|return
name|OptionalUtil
operator|.
name|toStream
argument_list|(
name|authors
argument_list|)
operator|.
name|flatMap
argument_list|(
name|value
lambda|->
name|value
operator|.
name|getAuthor
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|author
lambda|->
name|author
operator|.
name|getStyle
argument_list|()
operator|.
name|getvalue
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|" and "
argument_list|)
argument_list|)
return|;
block|}
DECL|method|clean (String input)
specifier|private
name|String
name|clean
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|StringUtil
operator|.
name|unifyLineBreaks
argument_list|(
name|input
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" +"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseEntries (InputStream inputStream)
specifier|public
name|List
argument_list|<
name|BibEntry
argument_list|>
name|parseEntries
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|ParseException
block|{
try|try
block|{
return|return
name|importDatabase
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

