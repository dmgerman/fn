begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.importer.fileformat
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|Importer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XMPPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XMPUtil
import|;
end_import

begin_comment
comment|/**  * Wraps the XMPUtility function to be used as an Importer.  */
end_comment

begin_class
DECL|class|PdfXmpImporter
specifier|public
class|class
name|PdfXmpImporter
extends|extends
name|Importer
block|{
DECL|field|xmpPreferences
specifier|private
specifier|final
name|XMPPreferences
name|xmpPreferences
decl_stmt|;
DECL|method|PdfXmpImporter (XMPPreferences xmpPreferences)
specifier|public
name|PdfXmpImporter
parameter_list|(
name|XMPPreferences
name|xmpPreferences
parameter_list|)
block|{
name|this
operator|.
name|xmpPreferences
operator|=
name|xmpPreferences
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"XMP-annotated PDF"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileType ()
specifier|public
name|FileType
name|getFileType
parameter_list|()
block|{
return|return
name|FileType
operator|.
name|XMP
return|;
block|}
annotation|@
name|Override
DECL|method|importDatabase (BufferedReader reader)
specifier|public
name|ParserResult
name|importDatabase
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|reader
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"PdfXmpImporter does not support importDatabase(BufferedReader reader)."
operator|+
literal|"Instead use importDatabase(Path filePath, Charset defaultEncoding)."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|importDatabase (String data)
specifier|public
name|ParserResult
name|importDatabase
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"PdfXmpImporter does not support importDatabase(String data)."
operator|+
literal|"Instead use importDatabase(Path filePath, Charset defaultEncoding)."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|importDatabase (Path filePath, Charset defaultEncoding)
specifier|public
name|ParserResult
name|importDatabase
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|Charset
name|defaultEncoding
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ParserResult
argument_list|(
name|XMPUtil
operator|.
name|readXMP
argument_list|(
name|filePath
argument_list|,
name|xmpPreferences
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
return|return
name|ParserResult
operator|.
name|fromError
argument_list|(
name|exception
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|isRecognizedFormat (BufferedReader reader)
specifier|public
name|boolean
name|isRecognizedFormat
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|reader
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**      * Returns whether the given stream contains data that is a.) a pdf and b.)      * contains at least one BibEntry.      */
annotation|@
name|Override
DECL|method|isRecognizedFormat (Path filePath, Charset defaultEncoding)
specifier|public
name|boolean
name|isRecognizedFormat
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|Charset
name|defaultEncoding
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
return|return
name|XMPUtil
operator|.
name|hasMetadata
argument_list|(
name|filePath
argument_list|,
name|xmpPreferences
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"xmp"
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Wraps the XMPUtility function to be used as an Importer."
return|;
block|}
block|}
end_class

end_unit

