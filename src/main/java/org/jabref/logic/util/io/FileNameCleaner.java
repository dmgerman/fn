begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.util.io
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * This class is based on http://stackoverflow.com/a/5626340/873282  *  * Replaces illegal characters in given file paths.  */
end_comment

begin_class
DECL|class|FileNameCleaner
specifier|public
class|class
name|FileNameCleaner
block|{
comment|/**      * MUST ALWAYS BE A SORTED ARRAY because it is used in a binary search      */
comment|// @formatter:off
DECL|field|ILLEGAL_CHARS
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ILLEGAL_CHARS
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|,
literal|16
block|,
literal|17
block|,
literal|18
block|,
literal|19
block|,
literal|20
block|,
literal|21
block|,
literal|22
block|,
literal|23
block|,
literal|24
block|,
literal|25
block|,
literal|26
block|,
literal|27
block|,
literal|28
block|,
literal|29
block|,
literal|30
block|,
literal|31
block|,
literal|34
block|,
literal|42
block|,
literal|47
block|,
literal|58
block|,
literal|60
block|,
literal|62
block|,
literal|63
block|,
literal|92
block|,
literal|124
block|}
decl_stmt|;
comment|// @formatter:on
comment|/**      * Replaces illegal characters in given fileName by '_'      *      * @param badFileName the fileName to clean      * @return a clean filename      */
DECL|method|cleanFileName (String badFileName)
specifier|public
specifier|static
name|String
name|cleanFileName
parameter_list|(
name|String
name|badFileName
parameter_list|)
block|{
name|StringBuilder
name|cleanName
init|=
operator|new
name|StringBuilder
argument_list|(
name|badFileName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|badFileName
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|badFileName
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|FileNameCleaner
operator|.
name|isCharLegal
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|cleanName
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cleanName
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cleanName
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|isCharLegal (char c)
specifier|private
specifier|static
name|boolean
name|isCharLegal
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|FileNameCleaner
operator|.
name|ILLEGAL_CHARS
argument_list|,
name|c
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
end_class

end_unit

