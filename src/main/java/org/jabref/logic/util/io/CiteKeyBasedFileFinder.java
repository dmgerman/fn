begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.util.io
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiPredicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|FileHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|CiteKeyBasedFileFinder
class|class
name|CiteKeyBasedFileFinder
implements|implements
name|FileFinder
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CiteKeyBasedFileFinder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exactKeyOnly
specifier|private
specifier|final
name|boolean
name|exactKeyOnly
decl_stmt|;
DECL|method|CiteKeyBasedFileFinder (boolean exactKeyOnly)
name|CiteKeyBasedFileFinder
parameter_list|(
name|boolean
name|exactKeyOnly
parameter_list|)
block|{
name|this
operator|.
name|exactKeyOnly
operator|=
name|exactKeyOnly
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|findAssociatedFiles (List<BibEntry> entries, List<Path> directories, List<String> extensions)
specifier|public
name|Multimap
argument_list|<
name|BibEntry
argument_list|,
name|Path
argument_list|>
name|findAssociatedFiles
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|directories
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|extensions
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|directories
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|BibEntry
argument_list|,
name|Path
argument_list|>
name|result
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// First scan directories
name|Set
argument_list|<
name|Path
argument_list|>
name|filesWithExtension
init|=
name|findFilesByExtension
argument_list|(
name|directories
argument_list|,
name|extensions
argument_list|)
decl_stmt|;
comment|// Now look for keys
name|nextFile
label|:
for|for
control|(
name|Path
name|file
range|:
name|filesWithExtension
control|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|dot
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
comment|// First, look for exact matches:
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|citeKey
init|=
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|citeKey
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|!
name|citeKey
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|dot
operator|>
literal|0
operator|)
operator|&&
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dot
argument_list|)
operator|.
name|equals
argument_list|(
name|citeKey
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|get
argument_list|(
name|entry
argument_list|)
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
continue|continue
name|nextFile
continue|;
block|}
block|}
comment|// If we get here, we did not find any exact matches. If non-exact
comment|// matches are allowed, try to find one:
if|if
condition|(
operator|!
name|exactKeyOnly
condition|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|citeKey
init|=
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|citeKey
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|!
name|citeKey
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
name|citeKey
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|get
argument_list|(
name|entry
argument_list|)
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
continue|continue
name|nextFile
continue|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Returns a list of all files in the given directories which have one of the given extension.      */
DECL|method|findFilesByExtension (List<Path> directories, List<String> extensions)
specifier|public
name|Set
argument_list|<
name|Path
argument_list|>
name|findFilesByExtension
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|directories
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|extensions
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|extensions
argument_list|,
literal|"Extensions must not be null!"
argument_list|)
expr_stmt|;
name|BiPredicate
argument_list|<
name|Path
argument_list|,
name|BasicFileAttributes
argument_list|>
name|isFileWithCorrectExtension
init|=
parameter_list|(
name|path
parameter_list|,
name|attributes
parameter_list|)
lambda|->
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|path
argument_list|)
operator|&&
name|extensions
operator|.
name|contains
argument_list|(
name|FileHelper
operator|.
name|getFileExtension
argument_list|(
name|path
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|directory
range|:
name|directories
control|)
block|{
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|directory
argument_list|)
condition|)
block|{
try|try
init|(
name|Stream
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|Files
operator|.
name|find
argument_list|(
name|directory
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|isFileWithCorrectExtension
argument_list|)
init|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|files
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Problem in finding files"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

