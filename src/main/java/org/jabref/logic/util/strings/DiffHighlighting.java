begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.util.strings
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|strings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|difflib
operator|.
name|Delta
import|;
end_import

begin_import
import|import
name|difflib
operator|.
name|DiffUtils
import|;
end_import

begin_class
DECL|class|DiffHighlighting
specifier|public
class|class
name|DiffHighlighting
block|{
DECL|field|HTML_START
specifier|public
specifier|static
specifier|final
name|String
name|HTML_START
init|=
literal|"<html><body>"
decl_stmt|;
DECL|field|HTML_END
specifier|public
specifier|static
specifier|final
name|String
name|HTML_END
init|=
literal|"</body></html>"
decl_stmt|;
DECL|field|ADDITION_START
specifier|private
specifier|static
specifier|final
name|String
name|ADDITION_START
init|=
literal|"<span class=add>"
decl_stmt|;
DECL|field|REMOVAL_START
specifier|private
specifier|static
specifier|final
name|String
name|REMOVAL_START
init|=
literal|"<span class=del>"
decl_stmt|;
DECL|field|CHANGE_START
specifier|private
specifier|static
specifier|final
name|String
name|CHANGE_START
init|=
literal|"<span class=change>"
decl_stmt|;
DECL|field|TAG_END
specifier|private
specifier|static
specifier|final
name|String
name|TAG_END
init|=
literal|"</span>"
decl_stmt|;
DECL|method|DiffHighlighting ()
specifier|private
name|DiffHighlighting
parameter_list|()
block|{     }
DECL|method|generateDiffHighlighting (String baseString, String modifiedString, String separator)
specifier|public
specifier|static
name|String
name|generateDiffHighlighting
parameter_list|(
name|String
name|baseString
parameter_list|,
name|String
name|modifiedString
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|baseString
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|modifiedString
operator|!=
literal|null
operator|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|stringList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|baseString
operator|.
name|split
argument_list|(
name|separator
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Delta
argument_list|<
name|String
argument_list|>
argument_list|>
name|deltaList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|DiffUtils
operator|.
name|diff
argument_list|(
name|stringList
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|modifiedString
operator|.
name|split
argument_list|(
name|separator
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getDeltas
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|deltaList
argument_list|)
expr_stmt|;
for|for
control|(
name|Delta
argument_list|<
name|String
argument_list|>
name|delta
range|:
name|deltaList
control|)
block|{
name|int
name|startPos
init|=
name|delta
operator|.
name|getOriginal
argument_list|()
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|delta
operator|.
name|getOriginal
argument_list|()
operator|.
name|getLines
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|delta
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CHANGE
case|:
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|stringList
operator|.
name|set
argument_list|(
name|startPos
operator|+
name|offset
argument_list|,
operator|(
name|offset
operator|==
literal|0
condition|?
name|DiffHighlighting
operator|.
name|REMOVAL_START
else|:
literal|""
operator|)
operator|+
name|line
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
name|stringList
operator|.
name|set
argument_list|(
operator|(
name|startPos
operator|+
name|offset
operator|)
operator|-
literal|1
argument_list|,
name|stringList
operator|.
name|get
argument_list|(
operator|(
name|startPos
operator|+
name|offset
operator|)
operator|-
literal|1
argument_list|)
operator|+
name|DiffHighlighting
operator|.
name|TAG_END
operator|+
name|separator
operator|+
name|DiffHighlighting
operator|.
name|ADDITION_START
operator|+
name|String
operator|.
name|join
argument_list|(
name|separator
argument_list|,
name|delta
operator|.
name|getRevised
argument_list|()
operator|.
name|getLines
argument_list|()
argument_list|)
operator|+
name|DiffHighlighting
operator|.
name|TAG_END
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|stringList
operator|.
name|set
argument_list|(
name|startPos
operator|+
name|offset
argument_list|,
operator|(
name|offset
operator|==
literal|0
condition|?
name|DiffHighlighting
operator|.
name|REMOVAL_START
else|:
literal|""
operator|)
operator|+
name|line
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
name|stringList
operator|.
name|set
argument_list|(
operator|(
name|startPos
operator|+
name|offset
operator|)
operator|-
literal|1
argument_list|,
name|stringList
operator|.
name|get
argument_list|(
operator|(
name|startPos
operator|+
name|offset
operator|)
operator|-
literal|1
argument_list|)
operator|+
name|DiffHighlighting
operator|.
name|TAG_END
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|stringList
operator|.
name|add
argument_list|(
name|delta
operator|.
name|getOriginal
argument_list|()
operator|.
name|getPosition
argument_list|()
argument_list|,
name|DiffHighlighting
operator|.
name|ADDITION_START
operator|+
name|String
operator|.
name|join
argument_list|(
name|separator
argument_list|,
name|delta
operator|.
name|getRevised
argument_list|()
operator|.
name|getLines
argument_list|()
argument_list|)
operator|+
name|DiffHighlighting
operator|.
name|TAG_END
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|String
operator|.
name|join
argument_list|(
name|separator
argument_list|,
name|stringList
argument_list|)
return|;
block|}
return|return
name|modifiedString
return|;
block|}
DECL|method|generateSymmetricHighlighting (String baseString, String modifiedString, String separator)
specifier|public
specifier|static
name|String
name|generateSymmetricHighlighting
parameter_list|(
name|String
name|baseString
parameter_list|,
name|String
name|modifiedString
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
if|if
condition|(
operator|(
name|baseString
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|modifiedString
operator|!=
literal|null
operator|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|stringList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|baseString
operator|.
name|split
argument_list|(
name|separator
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Delta
argument_list|<
name|String
argument_list|>
argument_list|>
name|deltaList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|DiffUtils
operator|.
name|diff
argument_list|(
name|stringList
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|modifiedString
operator|.
name|split
argument_list|(
name|separator
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getDeltas
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|deltaList
argument_list|)
expr_stmt|;
for|for
control|(
name|Delta
argument_list|<
name|String
argument_list|>
name|delta
range|:
name|deltaList
control|)
block|{
name|int
name|startPos
init|=
name|delta
operator|.
name|getOriginal
argument_list|()
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|delta
operator|.
name|getOriginal
argument_list|()
operator|.
name|getLines
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|delta
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CHANGE
case|:
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|stringList
operator|.
name|set
argument_list|(
name|startPos
operator|+
name|offset
argument_list|,
operator|(
name|offset
operator|==
literal|0
condition|?
name|DiffHighlighting
operator|.
name|CHANGE_START
else|:
literal|""
operator|)
operator|+
name|line
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
name|stringList
operator|.
name|set
argument_list|(
operator|(
name|startPos
operator|+
name|offset
operator|)
operator|-
literal|1
argument_list|,
name|stringList
operator|.
name|get
argument_list|(
operator|(
name|startPos
operator|+
name|offset
operator|)
operator|-
literal|1
argument_list|)
operator|+
name|DiffHighlighting
operator|.
name|TAG_END
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|stringList
operator|.
name|set
argument_list|(
name|startPos
operator|+
name|offset
argument_list|,
operator|(
name|offset
operator|==
literal|0
condition|?
name|DiffHighlighting
operator|.
name|ADDITION_START
else|:
literal|""
operator|)
operator|+
name|line
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
name|stringList
operator|.
name|set
argument_list|(
operator|(
name|startPos
operator|+
name|offset
operator|)
operator|-
literal|1
argument_list|,
name|stringList
operator|.
name|get
argument_list|(
operator|(
name|startPos
operator|+
name|offset
operator|)
operator|-
literal|1
argument_list|)
operator|+
name|DiffHighlighting
operator|.
name|TAG_END
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|String
operator|.
name|join
argument_list|(
name|separator
argument_list|,
name|stringList
argument_list|)
return|;
block|}
return|return
name|modifiedString
return|;
block|}
block|}
end_class

end_unit

