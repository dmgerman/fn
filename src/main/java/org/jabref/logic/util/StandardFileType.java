begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.util
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  * @implNote Enter the extensions without a dot! The dot is added implicitly.  */
end_comment

begin_enum
DECL|enum|StandardFileType
specifier|public
enum|enum
name|StandardFileType
implements|implements
name|FileType
block|{
DECL|enumConstant|BIBTEXML
name|BIBTEXML
argument_list|(
literal|"bibx"
argument_list|,
literal|"xml"
argument_list|)
block|,
DECL|enumConstant|ENDNOTE
name|ENDNOTE
argument_list|(
literal|"ref"
argument_list|,
literal|"enw"
argument_list|)
block|,
DECL|enumConstant|FREECITE
name|FREECITE
argument_list|(
literal|"txt"
argument_list|,
literal|"xml"
argument_list|)
block|,
DECL|enumConstant|ISI
name|ISI
argument_list|(
literal|"isi"
argument_list|,
literal|"txt"
argument_list|)
block|,
DECL|enumConstant|MEDLINE
name|MEDLINE
argument_list|(
literal|"nbib"
argument_list|,
literal|"xml"
argument_list|)
block|,
DECL|enumConstant|MEDLINE_PLAIN
name|MEDLINE_PLAIN
argument_list|(
literal|"nbib"
argument_list|,
literal|"txt"
argument_list|)
block|,
DECL|enumConstant|PUBMED
name|PUBMED
argument_list|(
literal|"fcgi"
argument_list|)
block|,
DECL|enumConstant|SILVER_PLATTER
name|SILVER_PLATTER
argument_list|(
literal|"dat"
argument_list|,
literal|"txt"
argument_list|)
block|,
DECL|enumConstant|AUX
name|AUX
argument_list|(
literal|"aux"
argument_list|)
block|,
DECL|enumConstant|BIBTEX_DB
name|BIBTEX_DB
argument_list|(
literal|"bib"
argument_list|)
block|,
DECL|enumConstant|CITATION_STYLE
name|CITATION_STYLE
argument_list|(
literal|"csl"
argument_list|)
block|,
DECL|enumConstant|CLASS
name|CLASS
argument_list|(
literal|"class"
argument_list|)
block|,
DECL|enumConstant|CSV
name|CSV
argument_list|(
literal|"csv"
argument_list|)
block|,
DECL|enumConstant|HTML
name|HTML
argument_list|(
literal|"html"
argument_list|)
block|,
DECL|enumConstant|JAR
name|JAR
argument_list|(
literal|"jar"
argument_list|)
block|,
DECL|enumConstant|JSTYLE
name|JSTYLE
argument_list|(
literal|"jstyle"
argument_list|)
block|,
DECL|enumConstant|LAYOUT
name|LAYOUT
argument_list|(
literal|"layout"
argument_list|)
block|,
DECL|enumConstant|ODS
name|ODS
argument_list|(
literal|"ods"
argument_list|)
block|,
DECL|enumConstant|PDF
name|PDF
argument_list|(
literal|"pdf"
argument_list|)
block|,
DECL|enumConstant|RIS
name|RIS
argument_list|(
literal|"ris"
argument_list|)
block|,
DECL|enumConstant|TERMS
name|TERMS
argument_list|(
literal|"terms"
argument_list|)
block|,
DECL|enumConstant|TXT
name|TXT
argument_list|(
literal|"txt"
argument_list|)
block|,
DECL|enumConstant|RDF
name|RDF
argument_list|(
literal|"rdf"
argument_list|)
block|,
DECL|enumConstant|RTF
name|RTF
argument_list|(
literal|"rtf"
argument_list|)
block|,
DECL|enumConstant|SXC
name|SXC
argument_list|(
literal|"sxc"
argument_list|)
block|,
DECL|enumConstant|XML
name|XML
argument_list|(
literal|"xml"
argument_list|)
block|,
DECL|enumConstant|XMP
name|XMP
argument_list|(
literal|"xmp"
argument_list|)
block|,
DECL|enumConstant|ZIP
name|ZIP
argument_list|(
literal|"zip"
argument_list|)
block|;
DECL|field|extensions
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|extensions
decl_stmt|;
DECL|method|StandardFileType (String... extensions)
name|StandardFileType
parameter_list|(
name|String
modifier|...
name|extensions
parameter_list|)
block|{
name|this
operator|.
name|extensions
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|extensions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExtensions ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExtensions
parameter_list|()
block|{
return|return
name|extensions
return|;
block|}
DECL|method|newFileType (String... extensions)
specifier|public
specifier|static
name|FileType
name|newFileType
parameter_list|(
name|String
modifier|...
name|extensions
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
name|Arrays
operator|.
name|asList
argument_list|(
name|extensions
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

