begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.remote.client
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|RemotePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|shared
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|shared
operator|.
name|RemoteMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|RemoteClient
specifier|public
class|class
name|RemoteClient
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RemoteClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|2000
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|method|RemoteClient (int port)
specifier|public
name|RemoteClient
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|ping ()
specifier|public
name|boolean
name|ping
parameter_list|()
block|{
try|try
init|(
name|Protocol
name|protocol
init|=
name|openNewConnection
argument_list|()
init|)
block|{
name|protocol
operator|.
name|sendMessage
argument_list|(
name|RemoteMessage
operator|.
name|PING
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|RemoteMessage
argument_list|,
name|Object
argument_list|>
name|response
init|=
name|protocol
operator|.
name|receiveMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getKey
argument_list|()
operator|==
name|RemoteMessage
operator|.
name|PONG
operator|&&
name|Protocol
operator|.
name|IDENTIFIER
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|String
name|port
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|port
argument_list|)
decl_stmt|;
name|String
name|errorMessage
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cannot use port %0 for remote operation; another application may be using it. Try specifying another port."
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Could not ping server at port "
operator|+
name|port
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Attempt to send command line arguments to already running JabRef instance.      *      * @param args command line arguments.      * @return true if successful, false otherwise.      */
DECL|method|sendCommandLineArguments (String[] args)
specifier|public
name|boolean
name|sendCommandLineArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
init|(
name|Protocol
name|protocol
init|=
name|openNewConnection
argument_list|()
init|)
block|{
name|protocol
operator|.
name|sendMessage
argument_list|(
name|RemoteMessage
operator|.
name|SEND_COMMAND_LINE_ARGUMENTS
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|RemoteMessage
argument_list|,
name|Object
argument_list|>
name|response
init|=
name|protocol
operator|.
name|receiveMessage
argument_list|()
decl_stmt|;
return|return
name|response
operator|.
name|getKey
argument_list|()
operator|==
name|RemoteMessage
operator|.
name|OK
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Could not send args "
operator|+
name|String
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|args
argument_list|)
operator|+
literal|" to the server at port "
operator|+
name|port
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|openNewConnection ()
specifier|private
name|Protocol
name|openNewConnection
parameter_list|()
throws|throws
name|IOException
block|{
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
name|RemotePreferences
operator|.
name|getIpAddress
argument_list|()
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|TIMEOUT
argument_list|)
expr_stmt|;
return|return
operator|new
name|Protocol
argument_list|(
name|socket
argument_list|)
return|;
block|}
block|}
end_class

end_unit

