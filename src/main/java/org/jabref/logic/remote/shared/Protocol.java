begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.remote.shared
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @implNote The first byte of every message identifies its type as a {@link RemoteMessage}.  * Every message is terminated with '\0'.  */
end_comment

begin_class
DECL|class|Protocol
specifier|public
class|class
name|Protocol
implements|implements
name|AutoCloseable
block|{
DECL|field|IDENTIFIER
specifier|public
specifier|static
specifier|final
name|String
name|IDENTIFIER
init|=
literal|"jabref"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Protocol
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|socket
specifier|private
specifier|final
name|Socket
name|socket
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|ObjectOutputStream
name|out
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|ObjectInputStream
name|in
decl_stmt|;
DECL|method|Protocol (Socket socket)
specifier|public
name|Protocol
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|socket
operator|=
name|socket
expr_stmt|;
name|this
operator|.
name|out
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|socket
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|in
operator|=
operator|new
name|ObjectInputStream
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|sendMessage (RemoteMessage type)
specifier|public
name|void
name|sendMessage
parameter_list|(
name|RemoteMessage
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeObject
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|sendMessage (RemoteMessage type, Object argument)
specifier|public
name|void
name|sendMessage
parameter_list|(
name|RemoteMessage
name|type
parameter_list|,
name|Object
name|argument
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeObject
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|argument
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|receiveMessage ()
specifier|public
name|Pair
argument_list|<
name|RemoteMessage
argument_list|,
name|Object
argument_list|>
name|receiveMessage
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|RemoteMessage
name|type
init|=
operator|(
name|RemoteMessage
operator|)
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|Object
name|argument
init|=
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|int
name|endOfMessage
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|endOfMessage
operator|!=
literal|'\0'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Message didn't end on correct end of message identifier. Got "
operator|+
name|endOfMessage
argument_list|)
throw|;
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|type
argument_list|,
name|argument
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not deserialize message"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
block|}
block|}
end_class

end_unit

