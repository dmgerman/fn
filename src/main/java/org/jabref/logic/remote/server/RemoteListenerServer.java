begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.remote.server
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|RemotePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|shared
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|remote
operator|.
name|shared
operator|.
name|RemoteMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|RemoteListenerServer
specifier|public
class|class
name|RemoteListenerServer
implements|implements
name|Runnable
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RemoteListenerServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BACKLOG
specifier|private
specifier|static
specifier|final
name|int
name|BACKLOG
init|=
literal|1
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|1000
decl_stmt|;
DECL|field|messageHandler
specifier|private
specifier|final
name|MessageHandler
name|messageHandler
decl_stmt|;
DECL|field|serverSocket
specifier|private
specifier|final
name|ServerSocket
name|serverSocket
decl_stmt|;
DECL|method|RemoteListenerServer (MessageHandler messageHandler, int port)
specifier|public
name|RemoteListenerServer
parameter_list|(
name|MessageHandler
name|messageHandler
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|serverSocket
operator|=
operator|new
name|ServerSocket
argument_list|(
name|port
argument_list|,
name|BACKLOG
argument_list|,
name|RemotePreferences
operator|.
name|getIpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageHandler
operator|=
name|messageHandler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
try|try
init|(
name|Socket
name|socket
init|=
name|serverSocket
operator|.
name|accept
argument_list|()
init|)
block|{
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|TIMEOUT
argument_list|)
expr_stmt|;
try|try
init|(
name|Protocol
name|protocol
init|=
operator|new
name|Protocol
argument_list|(
name|socket
argument_list|)
init|)
block|{
name|Pair
argument_list|<
name|RemoteMessage
argument_list|,
name|Object
argument_list|>
name|input
init|=
name|protocol
operator|.
name|receiveMessage
argument_list|()
decl_stmt|;
name|handleMessage
argument_list|(
name|protocol
argument_list|,
name|input
operator|.
name|getKey
argument_list|()
argument_list|,
name|input
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketException
name|ex
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"RemoteListenerServer crashed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|closeServerSocket
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handleMessage (Protocol protocol, RemoteMessage type, Object argument)
specifier|private
name|void
name|handleMessage
parameter_list|(
name|Protocol
name|protocol
parameter_list|,
name|RemoteMessage
name|type
parameter_list|,
name|Object
name|argument
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PING
case|:
name|protocol
operator|.
name|sendMessage
argument_list|(
name|RemoteMessage
operator|.
name|PONG
argument_list|,
name|Protocol
operator|.
name|IDENTIFIER
argument_list|)
expr_stmt|;
break|break;
case|case
name|SEND_COMMAND_LINE_ARGUMENTS
case|:
if|if
condition|(
name|argument
operator|instanceof
name|String
index|[]
condition|)
block|{
name|messageHandler
operator|.
name|handleCommandLineArguments
argument_list|(
operator|(
name|String
index|[]
operator|)
name|argument
argument_list|)
expr_stmt|;
name|protocol
operator|.
name|sendMessage
argument_list|(
name|RemoteMessage
operator|.
name|OK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Argument for 'SEND_COMMAND_LINE_ARGUMENTS' is not of type String[]. Got "
operator|+
name|argument
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unhandled message to server "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
DECL|method|closeServerSocket ()
specifier|public
name|void
name|closeServerSocket
parameter_list|()
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
block|}
block|}
end_class

end_unit

