begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.pdf
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|pdf
operator|.
name|FileAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|pdf
operator|.
name|FileAnnotationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFTextStripperByArea
import|;
end_import

begin_class
DECL|class|PdfAnnotationImporter
specifier|public
class|class
name|PdfAnnotationImporter
implements|implements
name|AnnotationImporter
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PdfAnnotationImporter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Imports the comments from a pdf specified by its path      *      * @param path a path to a pdf      * @return a list with the all the annotations found in the file of the path      */
annotation|@
name|Override
DECL|method|importAnnotations (final Path path)
specifier|public
name|List
argument_list|<
name|FileAnnotation
argument_list|>
name|importAnnotations
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validatePath
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// Path could not be validated, return default result
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|FileAnnotation
argument_list|>
name|annotationsList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|PDDocument
name|document
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|List
name|pdfPages
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAllPages
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pageIndex
init|=
literal|0
init|;
name|pageIndex
operator|<
name|pdfPages
operator|.
name|size
argument_list|()
condition|;
name|pageIndex
operator|++
control|)
block|{
name|PDPage
name|page
init|=
operator|(
name|PDPage
operator|)
name|pdfPages
operator|.
name|get
argument_list|(
name|pageIndex
argument_list|)
decl_stmt|;
for|for
control|(
name|PDAnnotation
name|annotation
range|:
name|page
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isSupportedAnnotationType
argument_list|(
name|annotation
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|FileAnnotationType
operator|.
name|UNDERLINE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|annotation
operator|.
name|getSubtype
argument_list|()
argument_list|)
operator|||
name|FileAnnotationType
operator|.
name|HIGHLIGHT
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|annotation
operator|.
name|getSubtype
argument_list|()
argument_list|)
condition|)
block|{
name|annotationsList
operator|.
name|add
argument_list|(
name|createMarkedAnnotations
argument_list|(
name|pageIndex
argument_list|,
name|page
argument_list|,
name|annotation
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileAnnotation
name|fileAnnotation
init|=
operator|new
name|FileAnnotation
argument_list|(
name|annotation
argument_list|,
name|pageIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileAnnotation
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fileAnnotation
operator|.
name|getContent
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|annotationsList
operator|.
name|add
argument_list|(
name|fileAnnotation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to read file '%s'."
argument_list|,
name|path
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|annotationsList
return|;
block|}
DECL|method|isSupportedAnnotationType (PDAnnotation annotation)
specifier|private
name|boolean
name|isSupportedAnnotationType
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|FileAnnotationType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|FileAnnotationType
operator|.
name|valueOf
argument_list|(
name|annotation
operator|.
name|getSubtype
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not parse the FileAnnotation %s into any known FileAnnotationType. It was %s!"
argument_list|,
name|annotation
argument_list|,
name|annotation
operator|.
name|getSubtype
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|createMarkedAnnotations (int pageIndex, PDPage page, PDAnnotation annotation)
specifier|private
name|FileAnnotation
name|createMarkedAnnotations
parameter_list|(
name|int
name|pageIndex
parameter_list|,
name|PDPage
name|page
parameter_list|,
name|PDAnnotation
name|annotation
parameter_list|)
block|{
name|FileAnnotation
name|annotationBelongingToMarking
init|=
operator|new
name|FileAnnotation
argument_list|(
name|annotation
operator|.
name|getDictionary
argument_list|()
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|T
argument_list|)
argument_list|,
name|FileAnnotation
operator|.
name|extractModifiedTime
argument_list|(
name|annotation
operator|.
name|getModifiedDate
argument_list|()
argument_list|)
argument_list|,
name|pageIndex
operator|+
literal|1
argument_list|,
name|annotation
operator|.
name|getContents
argument_list|()
argument_list|,
name|FileAnnotationType
operator|.
name|valueOf
argument_list|(
name|annotation
operator|.
name|getSubtype
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|FileAnnotationType
operator|.
name|HIGHLIGHT
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|annotation
operator|.
name|getSubtype
argument_list|()
argument_list|)
operator|||
name|FileAnnotationType
operator|.
name|UNDERLINE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|annotation
operator|.
name|getSubtype
argument_list|()
argument_list|)
condition|)
block|{
name|annotation
operator|.
name|setContents
argument_list|(
name|extractMarkedText
argument_list|(
name|page
argument_list|,
name|annotation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|annotation
operator|.
name|setContents
argument_list|(
literal|"JabRef: Could not extract any marked text!"
argument_list|)
expr_stmt|;
block|}
comment|//Marked text that has a sticky note on it should be linked to the sticky note
return|return
operator|new
name|FileAnnotation
argument_list|(
name|annotation
argument_list|,
name|pageIndex
operator|+
literal|1
argument_list|,
name|annotationBelongingToMarking
argument_list|)
return|;
block|}
DECL|method|extractMarkedText (PDPage page, PDAnnotation annotation)
specifier|private
name|String
name|extractMarkedText
parameter_list|(
name|PDPage
name|page
parameter_list|,
name|PDAnnotation
name|annotation
parameter_list|)
throws|throws
name|IOException
block|{
comment|//highlighted or underlined text has to be extracted by the rectangle calculated from the marking
name|PDFTextStripperByArea
name|stripperByArea
init|=
operator|new
name|PDFTextStripperByArea
argument_list|()
decl_stmt|;
name|COSArray
name|quadsArray
init|=
operator|(
name|COSArray
operator|)
name|annotation
operator|.
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"QuadPoints"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|markedText
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|,
name|k
init|=
literal|0
init|;
name|j
operator|<=
operator|(
name|quadsArray
operator|.
name|size
argument_list|()
operator|/
literal|8
operator|)
condition|;
name|j
operator|++
control|)
block|{
name|COSFloat
name|upperLeftX
init|=
operator|(
name|COSFloat
operator|)
name|quadsArray
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|COSFloat
name|upperLeftY
init|=
operator|(
name|COSFloat
operator|)
name|quadsArray
operator|.
name|get
argument_list|(
literal|1
operator|+
name|k
argument_list|)
decl_stmt|;
name|COSFloat
name|upperRightX
init|=
operator|(
name|COSFloat
operator|)
name|quadsArray
operator|.
name|get
argument_list|(
literal|2
operator|+
name|k
argument_list|)
decl_stmt|;
name|COSFloat
name|upperRightY
init|=
operator|(
name|COSFloat
operator|)
name|quadsArray
operator|.
name|get
argument_list|(
literal|3
operator|+
name|k
argument_list|)
decl_stmt|;
name|COSFloat
name|lowerLeftX
init|=
operator|(
name|COSFloat
operator|)
name|quadsArray
operator|.
name|get
argument_list|(
literal|4
operator|+
name|k
argument_list|)
decl_stmt|;
name|COSFloat
name|lowerLeftY
init|=
operator|(
name|COSFloat
operator|)
name|quadsArray
operator|.
name|get
argument_list|(
literal|5
operator|+
name|k
argument_list|)
decl_stmt|;
name|k
operator|+=
literal|8
expr_stmt|;
name|float
name|ulx
init|=
name|upperLeftX
operator|.
name|floatValue
argument_list|()
operator|-
literal|1
decl_stmt|;
name|float
name|uly
init|=
name|upperLeftY
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|width
init|=
name|upperRightX
operator|.
name|floatValue
argument_list|()
operator|-
name|lowerLeftX
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|height
init|=
name|upperRightY
operator|.
name|floatValue
argument_list|()
operator|-
name|lowerLeftY
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|PDRectangle
name|pageSize
init|=
name|page
operator|.
name|getMediaBox
argument_list|()
decl_stmt|;
name|uly
operator|=
name|pageSize
operator|.
name|getHeight
argument_list|()
operator|-
name|uly
expr_stmt|;
name|Rectangle2D
operator|.
name|Float
name|rectangle
init|=
operator|new
name|Rectangle2D
operator|.
name|Float
argument_list|(
name|ulx
argument_list|,
name|uly
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|stripperByArea
operator|.
name|addRegion
argument_list|(
literal|"markedRegion"
argument_list|,
name|rectangle
argument_list|)
expr_stmt|;
name|stripperByArea
operator|.
name|extractRegions
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|String
name|markedTextInLine
init|=
name|stripperByArea
operator|.
name|getTextForRegion
argument_list|(
literal|"markedRegion"
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|>
literal|1
condition|)
block|{
name|markedText
operator|=
name|markedText
operator|.
name|concat
argument_list|(
name|markedTextInLine
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|markedText
operator|=
name|markedTextInLine
expr_stmt|;
block|}
block|}
return|return
name|markedText
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|validatePath (Path path)
specifier|private
name|boolean
name|validatePath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".pdf"
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"File %s does not end with .pdf!"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"File %s does not exist!"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isRegularFile
argument_list|(
name|path
argument_list|)
operator|||
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"File %s is not readable!"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

