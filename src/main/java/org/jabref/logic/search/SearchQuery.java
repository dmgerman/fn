begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.search
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|search
operator|.
name|SearchMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|search
operator|.
name|rules
operator|.
name|ContainBasedSearchRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|search
operator|.
name|rules
operator|.
name|GrammarBasedSearchRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|search
operator|.
name|rules
operator|.
name|SearchRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|search
operator|.
name|rules
operator|.
name|SearchRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|search
operator|.
name|rules
operator|.
name|SentenceAnalyzer
import|;
end_import

begin_class
DECL|class|SearchQuery
specifier|public
class|class
name|SearchQuery
implements|implements
name|SearchMatcher
block|{
DECL|field|query
specifier|private
specifier|final
name|String
name|query
decl_stmt|;
DECL|field|caseSensitive
specifier|private
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
DECL|field|regularExpression
specifier|private
specifier|final
name|boolean
name|regularExpression
decl_stmt|;
DECL|field|rule
specifier|private
specifier|final
name|SearchRule
name|rule
decl_stmt|;
DECL|method|SearchQuery (String query, boolean caseSensitive, boolean regularExpression)
specifier|public
name|SearchQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|,
name|boolean
name|regularExpression
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
name|this
operator|.
name|regularExpression
operator|=
name|regularExpression
expr_stmt|;
name|this
operator|.
name|rule
operator|=
name|SearchRules
operator|.
name|getSearchRuleByQuery
argument_list|(
name|query
argument_list|,
name|caseSensitive
argument_list|,
name|regularExpression
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"\"%s\" (%s, %s)"
argument_list|,
name|getQuery
argument_list|()
argument_list|,
name|getCaseSensitiveDescription
argument_list|()
argument_list|,
name|getRegularExpressionDescription
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isMatch (BibEntry entry)
specifier|public
name|boolean
name|isMatch
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
return|return
name|rule
operator|.
name|applyRule
argument_list|(
name|getQuery
argument_list|()
argument_list|,
name|entry
argument_list|)
return|;
block|}
DECL|method|isValid ()
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|rule
operator|.
name|validateSearchStrings
argument_list|(
name|getQuery
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isContainsBasedSearch ()
specifier|public
name|boolean
name|isContainsBasedSearch
parameter_list|()
block|{
return|return
name|rule
operator|instanceof
name|ContainBasedSearchRule
return|;
block|}
DECL|method|getCaseSensitiveDescription ()
specifier|private
name|String
name|getCaseSensitiveDescription
parameter_list|()
block|{
if|if
condition|(
name|isCaseSensitive
argument_list|()
condition|)
block|{
return|return
literal|"case sensitive"
return|;
block|}
else|else
block|{
return|return
literal|"case insensitive"
return|;
block|}
block|}
DECL|method|getRegularExpressionDescription ()
specifier|private
name|String
name|getRegularExpressionDescription
parameter_list|()
block|{
if|if
condition|(
name|isRegularExpression
argument_list|()
condition|)
block|{
return|return
literal|"regular expression"
return|;
block|}
else|else
block|{
return|return
literal|"plain text"
return|;
block|}
block|}
DECL|method|localize ()
specifier|public
name|String
name|localize
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"\"%s\" (%s, %s)"
argument_list|,
name|getQuery
argument_list|()
argument_list|,
name|getLocalizedCaseSensitiveDescription
argument_list|()
argument_list|,
name|getLocalizedRegularExpressionDescription
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getLocalizedCaseSensitiveDescription ()
specifier|private
name|String
name|getLocalizedCaseSensitiveDescription
parameter_list|()
block|{
if|if
condition|(
name|isCaseSensitive
argument_list|()
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"case sensitive"
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"case insensitive"
argument_list|)
return|;
block|}
block|}
DECL|method|getLocalizedRegularExpressionDescription ()
specifier|private
name|String
name|getLocalizedRegularExpressionDescription
parameter_list|()
block|{
if|if
condition|(
name|isRegularExpression
argument_list|()
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"regular expression"
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"plain text"
argument_list|)
return|;
block|}
block|}
DECL|method|isGrammarBasedSearch ()
specifier|public
name|boolean
name|isGrammarBasedSearch
parameter_list|()
block|{
return|return
name|rule
operator|instanceof
name|GrammarBasedSearchRule
return|;
block|}
DECL|method|getQuery ()
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
DECL|method|isCaseSensitive ()
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|caseSensitive
return|;
block|}
DECL|method|isRegularExpression ()
specifier|public
name|boolean
name|isRegularExpression
parameter_list|()
block|{
return|return
name|regularExpression
return|;
block|}
comment|/**      * Returns a list of words this query searches for.      * The returned strings can be a regular expression.      */
DECL|method|getSearchWords ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSearchWords
parameter_list|()
block|{
if|if
condition|(
name|isRegularExpression
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|getQuery
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// Parses the search query for valid words and returns a list these words.
comment|// For example, "The great Vikinger" will give ["The","great","Vikinger"]
return|return
operator|(
operator|new
name|SentenceAnalyzer
argument_list|(
name|getQuery
argument_list|()
argument_list|)
operator|)
operator|.
name|getWords
argument_list|()
return|;
block|}
block|}
DECL|method|getRule ()
specifier|public
name|SearchRule
name|getRule
parameter_list|()
block|{
return|return
name|rule
return|;
block|}
block|}
end_class

end_unit

