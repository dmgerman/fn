begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.externalfiles
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|externalfiles
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FilePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|FileHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|LinkedFileHandler
specifier|public
class|class
name|LinkedFileHandler
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LinkedFileHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|databaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|filePreferences
specifier|private
specifier|final
name|FilePreferences
name|filePreferences
decl_stmt|;
DECL|field|entry
specifier|private
specifier|final
name|BibEntry
name|entry
decl_stmt|;
DECL|field|fileEntry
specifier|private
specifier|final
name|LinkedFile
name|fileEntry
decl_stmt|;
DECL|method|LinkedFileHandler (LinkedFile fileEntry, BibEntry entry, BibDatabaseContext databaseContext, FilePreferences filePreferences)
specifier|public
name|LinkedFileHandler
parameter_list|(
name|LinkedFile
name|fileEntry
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|FilePreferences
name|filePreferences
parameter_list|)
block|{
name|this
operator|.
name|fileEntry
operator|=
name|fileEntry
expr_stmt|;
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
name|this
operator|.
name|databaseContext
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|databaseContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|filePreferences
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|filePreferences
argument_list|)
expr_stmt|;
block|}
DECL|method|moveToDefaultDirectory ()
specifier|public
name|boolean
name|moveToDefaultDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|targetDirectory
init|=
name|databaseContext
operator|.
name|getFirstExistingFileDir
argument_list|(
name|filePreferences
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetDirectory
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Optional
argument_list|<
name|Path
argument_list|>
name|oldFile
init|=
name|fileEntry
operator|.
name|findIn
argument_list|(
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Could not find file
return|return
literal|false
return|;
block|}
name|String
name|targetDirName
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|filePreferences
operator|.
name|getFileDirPattern
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|targetDirName
operator|=
name|FileUtil
operator|.
name|createDirNameFromPattern
argument_list|(
name|databaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|filePreferences
operator|.
name|getFileDirPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|targetPath
init|=
name|targetDirectory
operator|.
name|get
argument_list|()
operator|.
name|resolve
argument_list|(
name|targetDirName
argument_list|)
operator|.
name|resolve
argument_list|(
name|oldFile
operator|.
name|get
argument_list|()
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
comment|// We do not overwrite already existing files
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"The file {} would have been moved to {}. However, there exists already a file with that name so we do nothing."
argument_list|,
name|oldFile
operator|.
name|get
argument_list|()
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// Make sure sub-directories exist
name|Files
operator|.
name|createDirectories
argument_list|(
name|targetPath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Move
name|Files
operator|.
name|move
argument_list|(
name|oldFile
operator|.
name|get
argument_list|()
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
comment|// Update path
name|fileEntry
operator|.
name|setLink
argument_list|(
name|relativize
argument_list|(
name|targetPath
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|renameToSuggestedName ()
specifier|public
name|boolean
name|renameToSuggestedName
parameter_list|()
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|oldFile
init|=
name|fileEntry
operator|.
name|findIn
argument_list|(
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Could not find file
return|return
literal|false
return|;
block|}
name|String
name|targetFileName
init|=
name|getSuggestedFileName
argument_list|()
decl_stmt|;
name|Path
name|newPath
init|=
name|oldFile
operator|.
name|get
argument_list|()
operator|.
name|resolveSibling
argument_list|(
name|targetFileName
argument_list|)
decl_stmt|;
name|String
name|expandedOldFilePath
init|=
name|oldFile
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|pathsDifferOnlyByCase
init|=
name|newPath
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|expandedOldFilePath
argument_list|)
operator|&&
operator|!
name|newPath
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|expandedOldFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|newPath
argument_list|)
operator|&&
operator|!
name|pathsDifferOnlyByCase
condition|)
block|{
comment|// We do not overwrite files
comment|// Since Files.exists is sometimes not case-sensitive, the check pathsDifferOnlyByCase ensures that we
comment|// nonetheless rename files to a new name which just differs by case.
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"The file {} would have been moved to {}. However, there exists already a file with that name so we do nothing."
argument_list|,
name|oldFile
operator|.
name|get
argument_list|()
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|newPath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Rename
name|Files
operator|.
name|move
argument_list|(
name|oldFile
operator|.
name|get
argument_list|()
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
comment|// Update path
name|fileEntry
operator|.
name|setLink
argument_list|(
name|relativize
argument_list|(
name|newPath
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|relativize (Path path)
specifier|private
name|String
name|relativize
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|fileDirectories
init|=
name|databaseContext
operator|.
name|getFileDirectoriesAsPaths
argument_list|(
name|filePreferences
argument_list|)
decl_stmt|;
return|return
name|FileUtil
operator|.
name|relativize
argument_list|(
name|path
argument_list|,
name|fileDirectories
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getSuggestedFileName ()
specifier|public
name|String
name|getSuggestedFileName
parameter_list|()
block|{
name|String
name|oldFileName
init|=
name|fileEntry
operator|.
name|getLink
argument_list|()
decl_stmt|;
name|String
name|targetFileName
init|=
name|FileUtil
operator|.
name|createFileNameFromPattern
argument_list|(
name|databaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|filePreferences
operator|.
name|getFileNamePattern
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
operator|+
literal|'.'
operator|+
name|FileHelper
operator|.
name|getFileExtension
argument_list|(
name|oldFileName
argument_list|)
operator|.
name|orElse
argument_list|(
name|fileEntry
operator|.
name|getFileType
argument_list|()
argument_list|)
decl_stmt|;
comment|// Only create valid file names
return|return
name|FileUtil
operator|.
name|getValidFileName
argument_list|(
name|targetFileName
argument_list|)
return|;
block|}
comment|/**      * Check to see if a file already exists in the target directory.  Search is not case sensitive.      *      * @return First identified path that matches an existing file.  This name can be used in subsequent calls to      * override the existing file.      */
DECL|method|findExistingFile (LinkedFile flEntry, BibEntry entry)
specifier|public
name|Optional
argument_list|<
name|Path
argument_list|>
name|findExistingFile
parameter_list|(
name|LinkedFile
name|flEntry
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
block|{
name|String
name|targetFileName
init|=
name|getSuggestedFileName
argument_list|()
decl_stmt|;
comment|// The .get() is legal without check because the method will always return a value.
name|Path
name|targetFilePath
init|=
name|flEntry
operator|.
name|findIn
argument_list|(
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
name|targetFileName
argument_list|)
decl_stmt|;
name|Path
name|oldFilePath
init|=
name|flEntry
operator|.
name|findIn
argument_list|(
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|//Check if file already exists in directory with different case.
comment|//This is necessary because other entries may have such a file.
name|Optional
argument_list|<
name|Path
argument_list|>
name|matchedByDiffCase
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
try|try
init|(
name|Stream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|list
argument_list|(
name|oldFilePath
operator|.
name|getParent
argument_list|()
argument_list|)
init|)
block|{
name|matchedByDiffCase
operator|=
name|stream
operator|.
name|filter
argument_list|(
name|name
lambda|->
name|name
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|targetFilePath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Could not get the list of files in target directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|matchedByDiffCase
return|;
block|}
block|}
end_class

end_unit

